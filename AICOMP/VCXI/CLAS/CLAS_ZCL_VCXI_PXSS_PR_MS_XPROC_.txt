
class ZCL_VCXI_PXSS_PR_MS_XPROC definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_COMM_NEXT
      abstract methods DO_BACKWARD .
  interfaces ZIF_VCXI_PXSS_LTEXT .
  interfaces ZIF_VCXI_XCS_PSCALE_MGR .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IEVNT_O_FPSMO_CHANGED type /VCXI/VKSC_IEVNT value 'FPSMO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_KAUSF_CHANGED type /VCXI/VKSC_IEVNT value 'KAUSF_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRODH_CHANGED type /VCXI/VKSC_IEVNT value 'PRODH_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_MS_XPROC type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_MS_XPROC' ##NO_TEXT.
  constants C_PARID_FPSMO type /VCXI/VKS_PARID value 'ZVCXI_P0_FPSMO' ##NO_TEXT.
  constants C_PARID_KAUSF type /VCXI/VKS_PARID value 'ZVCXI_XC_KAUSF' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_PRODH type /VCXI/VKS_PARID value 'ZVCXI_XC_PRODH' ##NO_TEXT.

  methods GET_FPSMO
    returning
      value(RF_FPSMO) type ZVCXI_P0SS_FPSMO
    raising
      /VCXI/CX_CKX .
  methods GET_ICONT
    returning
      value(RF_ICONT) type ZVCXI_P0S_ICONT
    raising
      /VCXI/CX_CKX .
  methods GET_KAUSF
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ALLOWED type ABAP_BOOL
    returning
      value(RS_KAUSF) type ZVCXI_XCSP_S_KAUSF
    raising
      /VCXI/CX_CKX .
  methods GET_PRODH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods SET_FPSMO
    importing
      !IF_FPSMO type ZVCXI_P0SS_FPSMO optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_KAUSF
    importing
      !IS_KAUSF type ZVCXI_XCSP_S_KAUSF optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_PRICE
    redefinition .
  methods GET_PRICP
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods SET_PRICE
    redefinition .
  methods SET_PRICP
    redefinition .
protected section.

  constants C_IEVNT_I_LOAD_PSCALE type /VCXI/VKSC_IEVNT value 'LOAD_PSCALE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods CHECK_MAKTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRODH
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_ID_BY_IPRVT
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_IPRVT type /VCXI/VKSC_IPRVT
    returning
      value(RF_ID) type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_PSCALE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_PR_MS_XPROC definition
class ZCL_VCXI_PXSS_PR_MS_XPROC implementation.
  method CHECK_MAKTX.

*** Check only for Dummys
    check ME->IS_DUMMY( ).

*** Check Material Description
    if ME->GET_MAKTX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Material Description is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '077' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Description is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '078' ).
      endif.
    endif.

  endmethod.
  method CHECK_PRODH.

    try.
        data(LF_PRODH) = ME->GET_PRODH( ).
        check LF_PRODH is not initial.
        ZCL_VCXI_XCS_SERVICE=>CHECK_PRODH( IF_PRODH = LF_PRODH ).

        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
          IR_MESSAGE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
        endif.
    endtry.

  endmethod.
  method GET_DESCR.

    data: LF_MATNR type MATNR,
          LF_DESCR type /VCXI/CKX_DESCR.

    LF_MATNR = ME->GET_MATNR( ).

    if LF_MATNR is not initial.
***   Convert Material Number to Output
      call function 'CONVERSION_EXIT_MATN1_OUTPUT'
        exporting
          INPUT  = LF_MATNR
        importing
          OUTPUT = LF_MATNR.
***   Get Material Description
      LF_DESCR = ME->GET_MAKTX( ).

      concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
    else.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.

  endmethod.
method GET_FPSMO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).
  move LS_PARAM-ATWRT to RF_FPSMO.

endmethod.
  method GET_ICONT.

    data: LT_PRVDR type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR type ref to /VCXI/CL_VKSR_GATE,
          LR_ICONT type ref to ZIF_VCXI_PXSS_ICONT.

*** Find Context Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_ICONT=>C_IPRVT_PX_ICONT
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC = 0.
    try.
        move LR_PRVDR->R_CLSPR ?to LR_ICONT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_ICONT.
    endtry.

    check LR_ICONT is bound.
    move LR_ICONT->GET_ICONT( ) to RF_ICONT.

  endmethod.
  method GET_ID_BY_IPRVT.

    data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

    LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_IPRVT = IF_IPRVT ).

    read table LT_PRVDR_DEF into LS_PRVDR_DEF with key IPRVT = IF_IPRVT.
    if SY-SUBRC eq 0.
      move LS_PRVDR_DEF-ID to RF_ID.
    else.
***   Provider Type &1 not defined for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_PXSS'
                                            IF_MSGNO = '003'
                                            IF_MSGV1 = IF_IPRVT
                                            IF_MSGV2 = IR_GATE->F_ID ).
    endif.

  endmethod.
  method GET_KAUSF.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    if RS_KAUSF is requested or
       EF_SETBY is requested.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KAUSF ).

      move LS_PARAM-ATFLV to RS_KAUSF-KAUSF.
      move LS_PARAM-UNIT  to RS_KAUSF-KAUSF_UOM.
      move LS_PARAM-SETBY to EF_SETBY.
    endif.

*** Allow Component Scrap only of Co-Products
    if ME->R_CUST_MATNR is bound and
       ME->R_CUST_MATNR is instance of ZCL_VCXI_PXSS_CUST_XPROC.
      EF_ALLOWED = cast ZCL_VCXI_PXSS_CUST_XPROC( ME->R_CUST_MATNR )->F_KZKUP.
    endif.

  endmethod.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    if ME->IS_DUMMY( ).
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
      move LS_PARAM-STRNG to RF_MAKTX.
      move LS_PARAM-SETBY to EF_SETBY.

      if EF_FOVRR is requested.
        EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                           when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                            else ABAP_FALSE ).
      endif.
    else.
***   Use Standard Material Description
      RF_MAKTX = ME->GET_MATNR_DESCR( ).
    endif.

  endmethod.
  method GET_PRICE.

    "only Price Scales are supported

  endmethod.
  method GET_PRICP.

    "only Price Scales are supported

  endmethod.
  method GET_PRODH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).
    RF_PRODH = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.


***--------------------------------------------------------------------------------------
    check RF_PRODH is not initial.

    if EF_DESCR is requested.
      EF_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_PRODH_DESCR( IF_PRODH = RF_PRODH ).
    endif.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MAKTX( ) ).

*** Check Product Hierarchy
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRODH( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Material Description
    ME->CHECK_MAKTX( IR_MESSAGE = IR_MESSAGE ).

*** Check Product Hierarchy
    ME->CHECK_PRODH( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

      when C_IEVNT_I_LOAD_PSCALE.
        ME->HANDLE_LOAD_PSCALE( ).

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR   type MATNR,
          LF_WERKS   type WERKS_D,
          LF_ALLOWED type ABAP_BOOL.


***--------------------------------------------------------------------------------------
    LF_MATNR = ME->GET_MATNR( ).
    LF_WERKS = ME->GET_WERKS( ).

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.

    clear ME->R_CUST_MATNR.

***--------------------------------------------------------------------------------------
    if LF_MATNR is not initial.
      try.
***       Load the Customizing
          ME->R_CUST_MATNR = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LF_MATNR
                                                                    IF_WERKS = LF_WERKS
                                                                    IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF ).

        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          return.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Set Values for Real Material
    if ME->IS_DUMMY( ) eq ABAP_FALSE.

    else.
***   Set Procurement Option
      ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if Component Scrap can be defined
    ME->GET_KAUSF( importing EF_ALLOWED = LF_ALLOWED ).
    if LF_ALLOWED ne ABAP_TRUE.
***   Clear Component Scrap
      ME->SET_KAUSF( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_LOAD_PSCALE.

*** Set Load Data to Active
    call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
    call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.

    if ME->IS_DUMMY( ).
***   Only calcualate if calculation is active
      ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

***   Set new Description
      ME->SET_MAKTX( IF_MAKTX = LF_MAKTX ).

    else.
***   Initialize Material Description
      ME->SET_MAKTX( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_FPSMO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).

    move IF_FPSMO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPSMO_CHANGED ).
    endif.

  endmethod.
  method SET_KAUSF.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KAUSF ).

    if IS_KAUSF is supplied.
      LS_PARAM-ATFLV = IS_KAUSF-KAUSF.
      LS_PARAM-UNIT  = IS_KAUSF-KAUSF_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KAUSF_CHANGED ).
    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_PRICE.

    "only Price Scales are supported

  endmethod.
  method SET_PRICP.

    "only Price Scales are supported

  endmethod.
  method SET_PRODH.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).

    LS_PARAM-ATWRT = IF_PRODH.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRODH_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_MS_XPROC> type ZVCXI_PXSS_S_FDI_MS_XPROC.


***------------------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_MS_XPROC.
    assign RR_DATA->* to <S_FDI_MS_XPROC>.


***------------------------------------------------------------------------------------------------
*** Get Material Number
    <S_FDI_MS_XPROC>-MATNR = ME->GET_MATNR( ).

*** Get Material Description
    <S_FDI_MS_XPROC>-MAKTX = ME->GET_MAKTX( importing EF_FOVRR = <S_FDI_MS_XPROC>-FOVRR_MAKTX ).

*** Is Dummy Material
    <S_FDI_MS_XPROC>-DUMMY = ME->IS_DUMMY( ).

*** Get Procurement Option
    <S_FDI_MS_XPROC>-PURCH = ME->GET_PURCH( ).

*** Get Vendor
    <S_FDI_MS_XPROC>-LIFNR = ME->GET_LIFNR( ).

*** Get Flag - Price Scale modified
    <S_FDI_MS_XPROC>-FPSMO = ME->GET_FPSMO( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_MS_XPROC_OLD type ZVCXI_PXSS_S_FDI_MS_XPROC,
          LS_FDI_MS_XPROC_NEW type ZVCXI_PXSS_S_FDI_MS_XPROC.
    data: LR_DATA_OLD   type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_MS_XPROC_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_MS_XPROC_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Material Number
    if LS_FDI_MS_XPROC_OLD-MATNR ne LS_FDI_MS_XPROC_NEW-MATNR.
      ME->SET_MATNR( IF_MATNR = LS_FDI_MS_XPROC_NEW-MATNR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Material Description
    if LS_FDI_MS_XPROC_OLD-MAKTX        ne LS_FDI_MS_XPROC_NEW-MAKTX or
       LS_FDI_MS_XPROC_OLD-FOVRR_MAKTX  ne LS_FDI_MS_XPROC_NEW-FOVRR_MAKTX.
      if LS_FDI_MS_XPROC_NEW-FOVRR_MAKTX ne ABAP_FALSE.
        ME->SET_MAKTX( IF_MAKTX = LS_FDI_MS_XPROC_NEW-MAKTX
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->SET_MAKTX( IF_MAKTX = LS_FDI_MS_XPROC_NEW-MAKTX
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Procurement Option
    if LS_FDI_MS_XPROC_OLD-PURCH ne LS_FDI_MS_XPROC_NEW-PURCH.
      ME->SET_PURCH( IF_PURCH = LS_FDI_MS_XPROC_NEW-PURCH
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Vendor
    if LS_FDI_MS_XPROC_OLD-LIFNR ne LS_FDI_MS_XPROC_NEW-LIFNR.
      ME->SET_LIFNR( IF_LIFNR = LS_FDI_MS_XPROC_NEW-LIFNR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag - Price Scale modified
    if LS_FDI_MS_XPROC_OLD-FPSMO ne LS_FDI_MS_XPROC_NEW-FPSMO.
      ME->SET_FPSMO( IF_FPSMO = LS_FDI_MS_XPROC_NEW-FPSMO
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~GET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).
    move LS_PARAM-STRNG to RF_LTEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_LTEXT~SET_LTEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_LTEXT~C_PARID_LTEXT ).

    move IF_LTEXT   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

*** Add Node for Procurement
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = ME->GET_DESCR( )
                                                    IF_DESCR      = ME->GET_DESCR( )
                                                    IF_ICON       = 'sap-icon://tag'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

    data: LS_PSQTY       type ZVCXI_XCS_S_PSQTY,
          LS_PSQTY_MATCH type ZVCXI_XCS_S_PSQTY,
          LS_UOMCF       type ZVCXI_XCS_S_UOMCF.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_PSCALE       type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_PR_PSCALE_MATCH type ref to ZCL_VCXI_XCS_PR_PSCALE.


*** Get Gates of Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***       Get Price Scale Quantity
          move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

***       Convert Price Scale Quantity if needed
          if LS_PSQTY-PSQTY_UOM ne IS_PSQTY-PSQTY_UOM.
            read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
            LS_PSQTY-PSQTY_UOM = IS_PSQTY-PSQTY_UOM.
            if LS_UOMCF-UOMCF is not initial.
              LS_PSQTY-PSQTY     = LS_PSQTY-PSQTY / LS_UOMCF-UOMCF.
            else.
              clear: LS_PSQTY-PSQTY.
            endif.
          endif.

***       Check conversion was successful
          check IS_PSQTY-PSQTY_UOM eq LS_PSQTY-PSQTY_UOM.

***       Compare
          if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
             ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
               LS_PSQTY_MATCH-PSQTY is initial ).
            move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
            move LS_PSQTY     to LS_PSQTY_MATCH.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_PSCALE.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
    check LR_PR_PSCALE_MATCH is bound.
    ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
    ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

*** Check if Conversion is needed for Price Unit
    if ES_PRICP-PRICP_UOM ne IS_PSQTY-PSQTY_UOM.
      read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
      ES_PRICP-PRICP_UOM = IS_PSQTY-PSQTY_UOM.
      if LS_UOMCF-UOMCF is not initial.
        ES_PRICE-PRICE     = ES_PRICE-PRICE * LS_UOMCF-UOMCF.
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

*** Changeable depending on Flag - Price Scale modified
    RF_CHANGEABLE = switch #( ME->GET_FPSMO( ) when ABAP_TRUE      then ABAP_TRUE
                                               when ABAP_FALSE     then ABAP_FALSE
                                               when ABAP_UNDEFINED then ABAP_TRUE ).

  endmethod.
