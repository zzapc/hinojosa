
class ZCL_VCXI_P2SS_UI_CSTEP_SSS definition
  public
  inheriting from ZCL_VCXI_P2SS_UI_CSTEP
  create public .

public section.

  data S_CSTEP_SSS_VIS type ZVCXI_P2SS_S_CSTEP_SSS_VIS .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_UPDATE_VIS
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_GRID_SCORE_AP type ref to ZCL_VCXI_PXSS_GRID_SCORE_AP .
  data R_PR_CSTEP_SSS type ref to ZCL_VCXI_P2SS_PR_CSTEP_SSS .

  methods HANDLE_GATE_FREED
    redefinition .
  methods INIT_VIS
    redefinition .
private section.
endclass. "ZCL_VCXI_P2SS_UI_CSTEP_SSS definition
class ZCL_VCXI_P2SS_UI_CSTEP_SSS implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'ZVCXI_P2SS_UI_CSTEP_SSS_BIND'
      exporting
        IR_UI_CSTEP_SSS = ME
      importing
        ES_DYNP         = ME->S_DYNP.

***--------------------------------------------------------------------------------------
*** Create Grid for GRID_SCORE
    create object ME->R_GRID_SCORE_AP
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_SCORE_AP'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_CSTEP_SSS.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

    if ME->R_GRID_SCORE_AP is bound.
      ME->R_GRID_SCORE_AP->DO_FREE( ).
      clear ME->R_GRID_SCORE_AP.
    endif.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Super PBO
    SUPER->DO_PBO( ).

***--------------------------------------------------------------------------------------
*** Initialize GRID
    if ME->R_GRID_SCORE_AP is bound.
      ME->R_GRID_SCORE_AP->F_REFRESH_REQ = ABAP_TRUE.
      ME->R_GRID_SCORE_AP->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_CSTEP_SSS_VIS type ZVCXI_P2SS_S_CSTEP_SSS_VIS.


*** Call SUPER
    SUPER->DO_UPDATE_VIS( IS_CSTEP_VIS = IS_CSTEP_VIS ).

    check ME->R_PR_CSTEP_SSS is bound.

*** "Cast" Vis Structure
    move-corresponding IS_CSTEP_VIS to LS_CSTEP_SSS_VIS.

***--------------------------------------------------------------------------------------
*** Set Dimension
    if ME->S_CSTEP_SSS_VIS-DIMEN ne LS_CSTEP_SSS_VIS-DIMEN.
      ME->R_PR_CSTEP_SSS->SET_DIMEN( IF_DIMEN = LS_CSTEP_SSS_VIS-DIMEN
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Number of Outs
    if ME->S_CSTEP_SSS_VIS-NOUTT ne LS_CSTEP_SSS_VIS-NOUTT.
      ME->R_PR_CSTEP_SSS->SET_NOUTT( IF_NOUTT = LS_CSTEP_SSS_VIS-NOUTT
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim on Slitting
    if ME->S_CSTEP_SSS_VIS-S_TRSLI ne LS_CSTEP_SSS_VIS-S_TRSLI.
      ME->R_PR_CSTEP_SSS->SET_TRSLI( IS_TRSLI = LS_CSTEP_SSS_VIS-S_TRSLI
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim Left
    if ME->S_CSTEP_SSS_VIS-S_TRLEF ne LS_CSTEP_SSS_VIS-S_TRLEF.
      ME->R_PR_CSTEP_SSS->SET_TRLEF( IS_TRLEF = LS_CSTEP_SSS_VIS-S_TRLEF
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim Right
    if ME->S_CSTEP_SSS_VIS-S_TRRIG ne LS_CSTEP_SSS_VIS-S_TRRIG.
      ME->R_PR_CSTEP_SSS->SET_TRRIG( IS_TRRIG = LS_CSTEP_SSS_VIS-S_TRRIG
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim on Slotting
    if ME->S_CSTEP_SSS_VIS-S_TRSLO ne LS_CSTEP_SSS_VIS-S_TRSLO.
      ME->R_PR_CSTEP_SSS->SET_TRSLO( IS_TRSLO = LS_CSTEP_SSS_VIS-S_TRSLO
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim Top
    if ME->S_CSTEP_SSS_VIS-S_TRTOP ne LS_CSTEP_SSS_VIS-S_TRTOP.
      ME->R_PR_CSTEP_SSS->SET_TRTOP( IS_TRTOP = LS_CSTEP_SSS_VIS-S_TRTOP
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim Bottom
    if ME->S_CSTEP_SSS_VIS-S_TRBOT ne LS_CSTEP_SSS_VIS-S_TRBOT.
      ME->R_PR_CSTEP_SSS->SET_TRBOT( IS_TRBOT = LS_CSTEP_SSS_VIS-S_TRBOT
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    if ME->R_GRID_SCORE_AP is bound.
      ME->R_GRID_SCORE_AP->CHECK_CHANGED_DATA( ).
    endif.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_CSTEP_SSS.

  endmethod.
  method INIT_VIS.

    SUPER->INIT_VIS( ).

    free: ME->S_CSTEP_SSS_VIS.
    move ME->S_CSTEP_VIS to S_CSTEP_SSS_VIS-S_CSTEP_VIS.

***--------------------------------------------------------------------------------------
*** Dimension
    ME->S_CSTEP_SSS_VIS-DIMEN = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_DIMEN( ).

*** Number of Outs
    ME->S_CSTEP_SSS_VIS-NOUTT = ME->R_PR_CSTEP_SSS->GET_NOUTT( ).

*** Trim on Slitting
    ME->S_CSTEP_SSS_VIS-S_TRSLI = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRSLI( importing EF_DESCR = ME->S_CSTEP_SSS_VIS-TRSLI_DESCR ).

*** Trim Left
    ME->S_CSTEP_SSS_VIS-S_TRLEF = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRLEF( ).

*** Trim Right
    ME->S_CSTEP_SSS_VIS-S_TRRIG = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRRIG( ).

*** Trim on Slotting
    ME->S_CSTEP_SSS_VIS-S_TRSLO = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRSLO( importing EF_DESCR = ME->S_CSTEP_SSS_VIS-TRSLO_DESCR ).

*** Trim Top
    ME->S_CSTEP_SSS_VIS-S_TRTOP = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRTOP( ).

*** Trim Bottom
    ME->S_CSTEP_SSS_VIS-S_TRBOT = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRBOT( ).

*** Get Score String Length & Cross
    ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SCORES_AP~GET_SCSTR( importing EF_SSTRL = ME->S_CSTEP_SSS_VIS-SSTRL
                                                                     EF_SSTRC = ME->S_CSTEP_SSS_VIS-SSTRC ).

***--------------------------------------------------------------------------------------
*** Slotting is Active
    ME->S_CSTEP_SSS_VIS-FASLO = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~IS_SLOT_ACTIVE( ).

*** Slitting is Active
    ME->S_CSTEP_SSS_VIS-FASLI = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~IS_SLIT_ACTIVE( ).

*** Score is Active
    ME->S_CSTEP_SSS_VIS-FASCO = ME->R_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~IS_SCORE_ACTIVE( ).

  endmethod.
