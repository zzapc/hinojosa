
class ZCL_VCXI_XCA_MWB_CLMAT definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  types:
    YT_T134T type standard table of T134T .
  types:
    YT_T134 type standard table of T134 .

  constants C_FC_OPEN_SVC type UI_FUNC value 'OPEN_SVC' ##NO_TEXT.
  constants C_FC_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.
  constants C_FC_VCLOCK type UI_FUNC value 'VCLOCK' ##NO_TEXT.
  constants C_TDID_BDATA type TDID value 'GRUN' ##NO_TEXT.
  constants C_TDID_INSPE type TDID value 'PRUE' ##NO_TEXT.
  data F_CHANGED type ABAP_BOOL read-only .
  data R_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT .
  data F_CREAMODE type ABAP_BOOL read-only .
  class-data T_T134 type YT_T134 .
  class-data T_T134T type YT_T134T .

  events FREED .

  methods GET_BOB_MAT
    returning
      value(RR_BOB_MAT) type ref to ZCL_VCXI_XCI_BOB_MAT
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    exporting
      !EF_MAKTX type MAKTX
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_ORGDATA
    returning
      value(RS_ORGDATA) type ZVCXI_XCA_MWB_S_ORGDATA .
  methods CHECK_MATNR
    importing
      !IF_MATNR type MATNR
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods CREATE_COPY
    returning
      value(RR_CLMAT) type ref to ZCL_VCXI_XCA_MWB_CLMAT
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IR_REGMDL type ref to ZCL_VCXI_XCA_MWB_REGMDL
      !IF_MATNR type MATNR
      !IS_ORGDATA type ZVCXI_XCA_MWB_S_ORGDATA
    returning
      value(RR_CLMAT) type ref to ZCL_VCXI_XCA_MWB_CLMAT
    raising
      /VCXI/CX_CKX .
  methods GET_VCLOCK
    returning
      value(RF_VCLOCK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_CONFIGURABLE
    returning
      value(RF_FLAG) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_MATNR_CHANGEABLE
    returning
      value(RF_CHANGEABLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods MARK_CHANGED
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX
      !IF_LANGU type SYLANGU default SY-LANGU
    raising
      /VCXI/CX_CKX .
  methods SET_VCLOCK
    importing
      !IF_VCLOCK type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_PRPID_ATNAM_XML type /VCXI/CKX_PRPID value 'ATNAM_XML' ##NO_TEXT.
  data F_VCLOCK type ABAP_BOOL value ABAP_UNDEFINED ##NO_TEXT.
  constants C_NUMBERRANGE_OBJECT type NROBJ value 'MATERIALNR' ##NO_TEXT.

  methods CREATE_MAT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IS_ORGDATA type ZVCXI_XCA_MWB_S_ORGDATA
    raising
      /VCXI/CX_CKX .
  methods GET_ATNAM_XML
    importing
      !IF_GVCIN type /VCXI/VKCR_GVCIN
    returning
      value(RF_ATNAM) type ATNAM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_OPEN_SVC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_VCLOCK
    raising
      /VCXI/CX_CKX .
  methods PREP_CNF_AFTER_COPY
    raising
      /VCXI/CX_CKX .
  methods RENEW_MATNR
    raising
      /VCXI/CX_CKX .
private section.

*{   REPLACE        HEDK925686
***  data T_MKAL type CMD_BS_MAT_T_MKAL .
  data T_MKAL type CURTO_MKAL_T .
*}   REPLACE
  data F_MATNR type MATNR .
  data S_ORGDATA type ZVCXI_XCA_MWB_S_ORGDATA .
  data F_LOCKED type /VCXI/CKX_LOCKED .

  methods HANDLE_OBJECT_CHANGED
      for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCA_MWB_CLMAT definition
class ZCL_VCXI_XCA_MWB_CLMAT implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.

  return.

endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when C_FC_SAVE.
      ME->HANDLE_SAVE( ).

    when C_FC_OPEN_SVC.
      ME->HANDLE_OPEN_SVC( ).

    when C_FC_VCLOCK.
      ME->HANDLE_UC_VCLOCK( ).

    when others.
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

  return.

endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

    try.
***     Enqueue Material
        ME->GET_BOB_MAT( )->ENQUEUE( ).

        ME->F_LOCKED = ABAP_TRUE.
        ME->LOAD_FROM_DB( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
    endtry.

  endmethod.
  method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

    ME->GET_BOB_MAT( )->DEQUEUE( ).

    move ABAP_FALSE to ME->F_LOCKED.

    if ME->F_CREAMODE ne ABAP_TRUE.
      ME->LOAD_FROM_DB( ).
    else.
***   Initialize Configuration Environment
      call function 'CUCB_INITIALIZER'.

      raise event FREED.
    endif.

  endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  data:  LT_DESCR type /VCXI/CKX_TT_DESCR.

  try.
      LT_DESCR = ME->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ).
      RF_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
    catch /VCXI/CX_CKX.
      clear RF_DESCR.
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

  data:          LS_MAKT_GA type BAPI_MAKT_GA.
  field-symbols: <S_DESCR>  type /VCXI/CKX_S_DESCR.

  check ME->R_BOB_MAT is bound.

  loop at ME->R_BOB_MAT->T_MATERIALDESCRIPTION into LS_MAKT_GA.
    append initial line to RT_DESCR assigning <S_DESCR>.
    move LS_MAKT_GA-LANGU     to <S_DESCR>-LANGU.
    move LS_MAKT_GA-MATL_DESC to <S_DESCR>-DESCR.
  endloop.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  return.

endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_ID.

    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = ME->GET_MATNR( )
      importing
        OUTPUT = RF_ID.

  endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  return.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  return.

endmethod.
  method CHECK_MATNR.

    data: LF_MTART type MTART,
          LF_RC    type NRRETURN.
    data: LS_T134  type T134.


    check ME->F_CREAMODE eq ABAP_TRUE.
    check IF_MATNR is not initial.

    LF_MTART = ME->GET_BOB_MAT( )->S_CLIENTDATA-MATL_TYPE.
    LS_T134 = value #( T_T134[ MTART = LF_MTART ] optional ).

*** Check for external numbering w/o check is allowed (T134-ENVOP)
*** Note: In that case, the material number may not be purely numeric
    if LS_T134-ENVOP is not initial.
      if IF_MATNR co ' 0123456789'.
***     With this material type, ext. material no. must not contain only numbers
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'M3'
                                              IF_MSGNO = '565' ).
      endif.

*** Then check whether the material type allows external numbering
    elseif LS_T134-NUMKE is initial.
***   No external number assignment possible for mat. type &
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'M3'
                                            IF_MSGNO = '317'
                                            IF_MSGV1 = value #( T_T134T[ MTART = LF_MTART ]-MTBEZ optional ) ).
    else.

***   If external numbering is allowed, check whether the specified material number lies
***   in an interval assigned to this material type
      call function 'NUMBER_CHECK'
        exporting
          NR_RANGE_NR             = LS_T134-NUMKE
          NUMBER                  = IF_MATNR
          OBJECT                  = C_NUMBERRANGE_OBJECT
        importing
          RETURNCODE              = LF_RC
        exceptions
          INTERVAL_NOT_FOUND      = 01
          NUMBER_RANGE_NOT_EXTERN = 02
          OBJECT_NOT_FOUND        = 03.

      if SY-SUBRC ne 0.
***     Internal error in the number range check for the material number
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'M3'
                                              IF_MSGNO = '317' ).
      endif.

      if LF_RC is not initial.
***     Number & not defined for material type &
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'M3'
                                              IF_MSGNO = '318'
                                              IF_MSGV1 = IF_MATNR
                                              IF_MSGV2 = value #( T_T134T[ MTART = LF_MTART ]-MTBEZ optional ) ).
      endif.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Read Database
    select * from T134
             into table T_T134.

    select * from T134T
             into table T_T134T
            where SPRAS eq SY-LANGU.

  endmethod.
  method CONSTRUCTOR.

*** Buffer for delayed load of BOB Material
    ME->F_MATNR   = IF_MATNR.
    ME->S_ORGDATA = IS_ORGDATA.

    set handler ME->HANDLE_OBJECT_CHANGED for ME.

  endmethod.
  method CREATE_COPY.

    data: LF_CLSNA type STRING.


*** Create new Instance of same Subclass
    LF_CLSNA = cast CL_ABAP_CLASSDESCR( CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = ME ) )->GET_RELATIVE_NAME( ).

*** Create new Material Instance
    create object RR_CLMAT type (LF_CLSNA)
      exporting
        IF_MATNR   = ME->GET_MATNR( )
        IS_ORGDATA = ME->GET_ORGDATA( ).

*** Buffer original Production Versions
    RR_CLMAT->T_MKAL = ME->GET_BOB_MAT( )->GET_PVER( ).

*** Remove Material Number
    RR_CLMAT->GET_BOB_MAT( )->SET_MATNR( IF_MATNR = value #( ) ).

*** Prepare new Configuration after Copy
    RR_CLMAT->PREP_CNF_AFTER_COPY( ).

*** Set automatically to locked for newly created copy
    RR_CLMAT->F_LOCKED   = ABAP_TRUE.
    RR_CLMAT->F_CHANGED  = ABAP_TRUE.
    RR_CLMAT->F_CREAMODE = ABAP_TRUE.

  endmethod.
  method CREATE_MAT.

    data: LF_CUOBJ_FROM type CUOBJ.
    data: LS_STZUB type STZUB.
    data: LT_MKAL   type CMD_BS_MAT_T_MKAL,
          LT_MKAL_X type ZVCXI_XCI_TT_MKAL_X.


***--------------------------------------------------------------------------------------
*** Buffer original Configuration Object for later copy
    LF_CUOBJ_FROM = ME->GET_BOB_MAT( )->F_CUOBJ.

*** Create new Material Number if needed
    if ME->GET_MATNR( ) is initial.
      ME->RENEW_MATNR( ).
    endif.

*** Save Material
    ME->R_BOB_MAT->SAVE( ).

***--------------------------------------------------------------------------------------
    if ME->IS_CONFIGURABLE( ).
***   Create Configuration in Material Master
      ME->R_BOB_MAT->CREATE_CONFIG( IF_CUOBJ = LF_CUOBJ_FROM ).

***   Set the VC Status
      ME->R_BOB_MAT->SET_VCSTA( exporting IF_VCLOCK = ME->F_VCLOCK ).
    endif.

***--------------------------------------------------------------------------------------
*** Assign Material to Configurable Material using Bill of Material Business Object
    if ZCL_VCXI_XCI_BOB_BOM=>CHECK_EXISTS( exporting IF_MATNR = conv #( ME->R_BOB_MAT->S_PLANTDATA-PS_CONF_MAT )
                                                     IF_WERKS = ME->R_BOB_MAT->GET_WERKS( )
                                                     IF_STLAN = ME->R_BOB_MAT->S_PLANTDATA-BOM_USAGE
                                           importing ES_STZUB = LS_STZUB ).
      new ZCL_VCXI_XCI_BOB_BOM( IF_MATNR = conv #( ME->R_BOB_MAT->S_PLANTDATA-PS_CONF_MAT )
                                IF_WERKS = ME->R_BOB_MAT->GET_WERKS( ) )->ASSIGN_MAT( IF_MATNR = ME->R_BOB_MAT->GET_MATNR( )
                                                                                      IF_STLAN = LS_STZUB-STLAN ).
    endif.

*** Assign Material to Configurable Material using Routing Business Object
    if ZCL_VCXI_XCI_BOB_RTE=>CHECK_EXISTS( IF_MATNR = conv #( ME->R_BOB_MAT->S_PLANTDATA-PS_CONF_MAT )
                                           IF_WERKS = ME->R_BOB_MAT->GET_WERKS( ) ).
      new ZCL_VCXI_XCI_BOB_RTE( IF_MATNR = conv #( ME->R_BOB_MAT->S_PLANTDATA-PS_CONF_MAT )
                                IF_WERKS = ME->R_BOB_MAT->GET_WERKS( ) )->ASSIGN_MAT( IF_MATNR = ME->R_BOB_MAT->GET_MATNR( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Production Versions
    if ME->T_MKAL is not initial.
      loop at ME->T_MKAL into data(LS_MKAL).
***     Adjust Material and build Update List
        LS_MKAL-MATNR = ME->R_BOB_MAT->GET_MATNR( ).
        LS_MKAL-ADATU = SY-DATUM.
        insert LS_MKAL into table LT_MKAL.
        append value #( UPDKZ = 'I'
                        MATNR = LS_MKAL-MATNR
                        WERKS = LS_MKAL-WERKS
                        VERID = LS_MKAL-VERID ) to LT_MKAL_X.
      endloop.

***   Save Procution Versions to new Material
      ME->R_BOB_MAT->SAVE_PVER( IT_MKAL   = LT_MKAL
                                IT_MKAL_X = LT_MKAL_X ).
    endif.

    commit work and wait.

  endmethod.
  method FACTORY.

    check IR_REGMDL is bound.
    try.
        create object RR_CLMAT type (IR_REGMDL->S_CLMAT-CLMAT)
          exporting IF_MATNR   = IF_MATNR
                    IS_ORGDATA = IS_ORGDATA.
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
method GET_ATNAM_XML.

  data: LS_CMPRK  type /VCXI/VKC_S_CMPRK,
        LS_PRPTY  type /VCXI/CKX_S_PRPTY,
        LS_PRPVA  type /VCXI/CKX_S_PRPVA,
        LR_CUPRFL type ref to /VCXI/CL_VKSC_CUPRFL,
        LR_PRPSET type ref to /VCXI/CL_CKR_PRPSET.


***------------------------------------------------------------------------------------------------
*** Config. Material & Profile Key
  LS_CMPRK  = /VCXI/CL_VKCR_GATEWAY=>GET_CMPRK( IF_GVCIN = IF_GVCIN ).

*** SmartVC Profile Customizing
  LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = LS_CMPRK ).

  move LR_CUPRFL->R_PRPSET_DC to LR_PRPSET.
  if LR_PRPSET is not bound.
*** Property Set for Data Connector is not defined.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = '/VCXI/VKSR'
                                          IF_MSGNO = '201' ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Property for Characteristic Pattern
  LS_PRPTY = LR_PRPSET->/VCXI/IF_CKX_OBJECT_PRPTY~GET_PRPTY( IF_PRPID        = C_PRPID_ATNAM_XML
                                                             IF_INCL_COMMENT = ABAP_FALSE ).

  read table LS_PRPTY-T_PRPVA into LS_PRPVA index 1.
  if SY-SUBRC ne 0 or LS_PRPVA-PRPVA is initial.
*** Characteristic for XML is not specified in Property &.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = '/VCXI/VKSR'
                                          IF_MSGNO = '202'
                                          IF_MSGV1 = LS_PRPTY-PRPID ).
  endif.

  move LS_PRPVA-PRPVA to RF_ATNAM.

endmethod.
  method GET_BOB_MAT.

    if ME->R_BOB_MAT is not bound.
***   Create BOB Material
      create object ME->R_BOB_MAT.
      ME->R_BOB_MAT->INIT_FROM_DB( IF_MATNR = ME->F_MATNR
                                   IF_WERKS = ME->S_ORGDATA-WERKS
                                   IF_BWTAR = ME->S_ORGDATA-BWTAR
                                   IF_LGORT = ME->S_ORGDATA-LGORT
                                   IF_VKORG = ME->S_ORGDATA-VKORG
                                   IF_VTWEG = ME->S_ORGDATA-VTWEG
                                   IF_LGNUM = ME->S_ORGDATA-LGNUM
                                   IF_LGTYP = ME->S_ORGDATA-LGTYP ).
    endif.

    RR_BOB_MAT = ME->R_BOB_MAT.

  endmethod.
  method GET_MATNR.

    data: LS_MAKT type MAKT.


    if ME->R_BOB_MAT is bound.
      RF_MATNR = ME->R_BOB_MAT->GET_MATNR( ).

      if EF_MAKTX is requested.
        EF_MAKTX = ME->R_BOB_MAT->GET_DESCR( ).
      endif.

    else.
      RF_MATNR = ME->F_MATNR.

      if EF_MAKTX is requested.
        call function 'MAKT_SINGLE_READ'
          exporting
            MATNR  = RF_MATNR
            SPRAS  = SY-LANGU
          importing
            WMAKT  = LS_MAKT
          exceptions
            others = 9.
        if SY-SUBRC ne 0.
          clear LS_MAKT.
        endif.
        EF_MAKTX = LS_MAKT-MAKTX.
      endif.
    endif.

  endmethod.
  method GET_ORGDATA.

    if ME->R_BOB_MAT is bound.
      RS_ORGDATA = value ZVCXI_XCA_MWB_S_ORGDATA( WERKS = ME->R_BOB_MAT->S_PLANTDATA-PLANT
                                                  BWTAR = ME->R_BOB_MAT->S_VALUATIONDATA-VAL_TYPE
                                                  LGORT = ME->R_BOB_MAT->S_STORAGELOCATIONDATA-STGE_LOC
                                                  VKORG = ME->R_BOB_MAT->S_SALESDATA-SALES_ORG
                                                  VTWEG = ME->R_BOB_MAT->S_SALESDATA-DISTR_CHAN
                                                  LGNUM = ME->R_BOB_MAT->S_STORAGETYPEDATA-WHSE_NO
                                                  LGTYP = ME->R_BOB_MAT->S_STORAGETYPEDATA-STGE_TYPE ).
    else.
      RS_ORGDATA = ME->S_ORGDATA.
    endif.

  endmethod.
  method GET_VCLOCK.

    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.


    if ME->F_VCLOCK eq ABAP_UNDEFINED.
      LR_BOB_MAT = ME->GET_BOB_MAT( ).
      if LR_BOB_MAT is bound.
***     Get SAP VC Status
        call function 'CE_I_GET_STATUS'
          exporting
            INSTANCE           = LR_BOB_MAT->F_CUOBJ
          exceptions
            FREE               = 1
            INCOMPLETE         = 2
            LOCKED             = 3
            INSTANCE_NOT_FOUND = 4
            STATUS_NOT_FOUND   = 5
            others             = 6.

        ME->F_VCLOCK = switch #( SY-SUBRC when 3 then ABAP_TRUE
                                                 else ABAP_FALSE ).
      endif.
    endif.
    move ME->F_VCLOCK to RF_VCLOCK.

  endmethod.
method HANDLE_OBJECT_CHANGED.

  move ABAP_TRUE to ME->F_CHANGED.

endmethod.
  method HANDLE_OPEN_SVC.

    data: LF_GVCIN   type /VCXI/VKCR_GVCIN,
          LF_CHANGED type ABAP_BOOL.
    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_SVC     type ref to /VCXI/CL_VKSRA_SVC.


    LR_BOB_MAT = ME->GET_BOB_MAT( ).
    check LR_BOB_MAT->F_CUOBJ is not initial.

***--------------------------------------------------------------------------------------
*** Run Config before opening SmartVC
    LR_BOB_MAT->RUN_CONFIG( exporting IF_LOCKED  = ME->F_LOCKED
                            importing EF_CHANGED = LF_CHANGED ).
*** VC Changes in background, mark as changed
    if LF_CHANGED is not initial.
      ME->MARK_CHANGED( ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Configuration Instance
    LF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LR_BOB_MAT->F_CUOBJ ).

*** Get SmartVC Instance
    LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = LF_GVCIN ).

*** Start SmartVC UI
    LR_SVC->START_UI( ).

*** Update Data Connector with new SmartVC Values
    if /VCXI/CL_VKCR_GATEWAY=>IS_LOCKED( IF_GVCIN = LF_GVCIN ) eq ABAP_TRUE.
***   Update SmartVC DC
      LF_CHANGED = LR_SVC->UPDATE_DC( ).
***   Changes in SVC, mark as changed and update configuration
      if LF_CHANGED is not initial.
        LR_BOB_MAT->RUN_CONFIG( IF_LOCKED = ME->F_LOCKED ).
        ME->MARK_CHANGED( ).
      endif.
    endif.

  endmethod.
  method HANDLE_SAVE.

***--------------------------------------------------------------------------------------
*** Check if created from reference
    if ME->F_CREAMODE eq ABAP_TRUE.
      ME->CREATE_MAT( ).

***   Material & created
      message id 'M3'
              type 'S'
              number '800'
              with ME->R_BOB_MAT->GET_MATNR( ).

    else.
***--------------------------------------------------------------------------------------
***   Change of existing Material number
      if ME->F_CHANGED eq ABAP_TRUE.
        if ME->IS_CONFIGURABLE( ) eq ABAP_TRUE.
***       Set the VC Status
          ME->R_BOB_MAT->SET_VCSTA( exporting IF_VCLOCK = ME->F_VCLOCK ).

***       Change Configuration
          ME->R_BOB_MAT->CHANGE_CONFIG( ).
        endif.

***     Save Material via BAPI
        ME->R_BOB_MAT->SAVE( ).
      endif.

***   Material & changed
      message id 'M3'
              type 'S'
              number '801'
              with ME->R_BOB_MAT->GET_MATNR( ).
    endif.

***--------------------------------------------------------------------------------------
*** Reset change indicator
    ME->F_CHANGED = ABAP_FALSE.

*** Material was saved already
    ME->F_CREAMODE = ABAP_FALSE.

*** Unlock Object
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).

  endmethod.
  method HANDLE_UC_VCLOCK.

    case ME->F_VCLOCK.
      when ABAP_TRUE.
***     Status "not red"
        ME->SET_VCLOCK( ABAP_FALSE ).

***     Run Configuration Profile to redetermine new Status
        ME->GET_BOB_MAT( )->RUN_CONFIG( IF_LOCKED = ABAP_TRUE ).

      when ABAP_FALSE.
***     Status Red
        ME->SET_VCLOCK( ABAP_TRUE ).

      when others.
    endcase.

    move ABAP_TRUE to ME->F_CHANGED.

  endmethod.
  method IS_CONFIGURABLE.

    if ME->GET_BOB_MAT( )->F_CUOBJ is not initial.
      move ABAP_TRUE to RF_FLAG.
    endif.

  endmethod.
  method IS_MATNR_CHANGEABLE.

    data: LS_T134 type T134.

    move ABAP_FALSE to RF_CHANGEABLE.

*** Check Material is not yet saved
    check ME->F_CREAMODE eq ABAP_TRUE.

*** If material type has external number assignment
    read table T_T134 into LS_T134 with key MTART = ME->GET_BOB_MAT( )->S_CLIENTDATA-MATL_TYPE.
    check LS_T134-NUMKE is not initial.

*** Make the field changeable
    move ABAP_TRUE to RF_CHANGEABLE.

  endmethod.
  method LOAD_FROM_DB.

*** Refresh local Buffer
    ME->F_MATNR   = ME->GET_MATNR( ).
    ME->S_ORGDATA = ME->GET_ORGDATA( ).

***--------------------------------------------------------------------------------------
*** Mark as unchanged
    move ABAP_FALSE to ME->F_CHANGED.

*** Initialize Configuration Environment
    call function 'CUCB_INITIALIZER'.

*** Reload BOB Material from DB
    clear ME->R_BOB_MAT.
    ME->GET_BOB_MAT( ).

  endmethod.
method MARK_CHANGED.

  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method PREP_CNF_AFTER_COPY.
  endmethod.
  method RENEW_MATNR.

    ME->R_BOB_MAT->RENEW_MATNR( ).

*** Update Material Number
    ME->F_MATNR = ME->R_BOB_MAT->GET_MATNR( ).

  endmethod.
  method SET_MAKTX.

    data: LR_BOB_MAT type ref to ZCL_VCXI_XCI_BOB_MAT.
    field-symbols: <S_MDESC> type BAPI_MAKT_GA.


    LR_BOB_MAT = ME->GET_BOB_MAT( ).

*** Read Material Description
    read table LR_BOB_MAT->T_MATERIALDESCRIPTION assigning <S_MDESC>
                                                 with key LANGU = IF_LANGU.
    if SY-SUBRC is initial.
      if <S_MDESC>-MATL_DESC eq IF_MAKTX.
        return.
      endif.

      move: IF_MAKTX to <S_MDESC>-MATL_DESC.

    else.
      insert initial line into table LR_BOB_MAT->T_MATERIALDESCRIPTION assigning <S_MDESC>.
      move: IF_LANGU to <S_MDESC>-LANGU,
            IF_MAKTX to <S_MDESC>-MATL_DESC.
    endif.

    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
method SET_VCLOCK.

  move IF_VCLOCK to ME->F_VCLOCK.

endmethod.
