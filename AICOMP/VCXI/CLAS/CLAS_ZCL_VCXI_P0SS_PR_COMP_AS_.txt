
class ZCL_VCXI_P0SS_PR_COMP_AS definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCSS_OPQTY .

  constants C_IEVNT_O_FCSFG_CHANGED type /VCXI/VKSC_IEVNT value 'FCSFG_CHANGED'. "#EC NOTEXT
  constants C_PARID_FCSFG type /VCXI/VKS_PARID value 'ZVCXI_P0_FCSFG'. "#EC NOTEXT
  constants C_IPRVT_P0_COMP_AS type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_COMP_AS'. "#EC NOTEXT
  constants C_PARID_PPASS type /VCXI/VKS_PARID value 'ZVCXI_P0_PPASS'. "#EC NOTEXT
  constants C_PARID_COMPR type /VCXI/VKS_PARID value 'ZVCXI_P0_COMPR'. "#EC NOTEXT

  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_TPRST
    returning
      value(RF_TPRST) type ZVCXI_P0SS_TPRST
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COMPP
    returning
      value(RF_COMPP) type ZVCXI_P0SS_COMPP
    raising
      /VCXI/CX_CKX .
  methods GET_COMPP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COMPR
    returning
      value(RF_COMPR) type ZVCXI_P0SS_COMPR
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOI
    returning
      value(RF_NOCOI) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOO
    returning
      value(RF_NOCOO) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_FCSFG
    returning
      value(RF_FCSFG) type ZVCXI_P0SS_FCSFG
    raising
      /VCXI/CX_CKX .
  methods GET_PPASS
    returning
      value(RF_PPASS) type ZVCXI_P0SS_PPASS
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY
    returning
      value(RF_PRSTY) type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_DESCR
    returning
      value(RF_PRSTY_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI
    returning
      value(RF_PRTYI) type ZVCXI_P0SS_PRTYI
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI_DESCR
    returning
      value(RF_PRTYI_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO
    returning
      value(RF_PRTYO) type ZVCXI_P0SS_PRTYO
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO_DESCR
    returning
      value(RF_PRTYO_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BOXPA
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COMPP
    importing
      !IF_COMPP type ZVCXI_P0SS_COMPP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COMPR
    importing
      !IF_COMPR type ZVCXI_P0SS_COMPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOI
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOO
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_PPASS
    importing
      !IF_PPASS type ZVCXI_P0SS_PPASS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FCSFG
    importing
      !IF_FCSFG type ZVCXI_P0SS_FCSFG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRSTY
    importing
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYI
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYO
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_COMPR_CHANGED type /VCXI/VKSC_IEVNT value 'COMPR_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PPASS_CHANGED type /VCXI/VKSC_IEVNT value 'PPASS_CHANGED'. "#EC NOTEXT
  data R_PR_SPEC type ref to ZCL_VCXI_P0SS_PR_SPEC .

  methods CHECK_PPASS
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_COMPP
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_AS
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_COMP_AS definition
class ZCL_VCXI_P0SS_PR_COMP_AS implementation.
method CHECK_COMPP.

*** 0 - Product Type is maintained and valid.
*** 1 - Product Type is maintained but not valid for AS
*** 2 - Product type is maintained but not valid.
*** 3 - Product Type is not maintained.

  data: LF_COMPP type ZVCXI_P0SS_COMPP,
        LF_PTYPE type ZVCXI_P0S_PTYPE.

*** Start Positiv
  RF_RESULT = 0.

  LF_COMPP = ME->GET_COMPP( ).

*** Check if Product Type is maintained.
  if LF_COMPP is initial.
    RF_RESULT = 3.
    exit.
  endif.

*** Check Product Type is valid
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100 with key PTYPE = LF_COMPP transporting no fields.
  if SY-SUBRC ne 0.
    RF_RESULT = 2.
    exit.
  endif.

*** Check Product Type is valid
  LF_PTYPE = ME->GET_PTYPE_AS( ).
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC101 with key PTYPE = LF_PTYPE
                                                        COMPP = LF_COMPP transporting no fields.
  if SY-SUBRC ne 0.
    RF_RESULT = 1.
    exit.
  endif.

endmethod.
method CHECK_PPASS.

*** RF_SUBRC = 0 => Production Pass is maintained
*** RF_SUBRC = 1 => Production Pass is not maintained

  if ME->GET_PPASS( ) is initial.
    move 1 to RF_SUBRC.
    exit.
  endif.

endmethod.
method GET_BOXPA.

  check ME->R_PR_SPEC is bound.

  RF_BOXPA = ME->R_PR_SPEC->GET_BOXPA( ).

endmethod.
method GET_BOXPA_DESCR.

  check ME->R_PR_SPEC is bound.

  RF_DESCR = ME->R_PR_SPEC->GET_BOXPA_DESCR( ).

endmethod.
method GET_COMPP.

  check ME->R_PR_SPEC is bound.

  move ME->R_PR_SPEC->GET_PTYPE( ) to RF_COMPP.

endmethod.
method GET_COMPP_DESCR.

  check ME->R_PR_SPEC is bound.

  move ME->R_PR_SPEC->GET_PTYPE_DESCR( ) to RF_DESCR.

endmethod.
method GET_COMPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPR ).
  move LS_PARAM-ATFLV to RF_COMPR.

endmethod.
method GET_FCSFG.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCSFG ).
  move LS_PARAM-ATWRT to RF_FCSFG.

endmethod.
method GET_MATDE.

  check ME->R_PR_SPEC is bound.

  RF_MATDE = ME->R_PR_SPEC->GET_MATDE( ).

endmethod.
method GET_NOCOI.

  check ME->R_PR_SPEC is bound.

  RF_NOCOI = ME->R_PR_SPEC->GET_NOCOI( ).

endmethod.
method GET_NOCOO.

  check ME->R_PR_SPEC is bound.

  RF_NOCOO = ME->R_PR_SPEC->GET_NOCOO( ).

endmethod.
method GET_PPASS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PPASS ).
  move LS_PARAM-ATFLV to RF_PPASS.

endmethod.
method GET_PROHE.

  check ME->R_PR_SPEC is bound.

  RS_PROHE = ME->R_PR_SPEC->GET_PROHE( ).

endmethod.
method GET_PROLE.

  check ME->R_PR_SPEC is bound.

  RS_PROLE = ME->R_PR_SPEC->GET_PROLE( ).

endmethod.
method GET_PROWI.

  check ME->R_PR_SPEC is bound.

  RS_PROWI = ME->R_PR_SPEC->GET_PROWI( ).

endmethod.
method GET_PRSTY.

  check ME->R_PR_SPEC is bound.

  RF_PRSTY = ME->R_PR_SPEC->GET_PRSTY( ).

endmethod.
method GET_PRSTY_DESCR.

  check ME->R_PR_SPEC is bound.

  RF_PRSTY_DESCR = ME->R_PR_SPEC->GET_PRSTY_DESCR( ).

endmethod.
method GET_PRTYI.

  check ME->R_PR_SPEC is bound.

  RF_PRTYI = ME->R_PR_SPEC->GET_PRTYI( ).

endmethod.
method GET_PRTYI_DESCR.

  check ME->R_PR_SPEC is bound.

  RF_PRTYI_DESCR = ME->R_PR_SPEC->GET_PRTYI_DESCR( ).

endmethod.
method GET_PRTYO.

  check ME->R_PR_SPEC is bound.

  RF_PRTYO = ME->R_PR_SPEC->GET_PRTYO( ).

endmethod.
method GET_PRTYO_DESCR.

  check ME->R_PR_SPEC is bound.

  RF_PRTYO_DESCR = ME->R_PR_SPEC->GET_PRTYO_DESCR( ).

endmethod.
method GET_PTYPE_AS.

  data:          LT_PRVDR             type        /VCXI/VKSR_TT_GATE.
  data:          LR_PRVDR             type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SPEC_AS        type ref to ZCL_VCXI_P0SS_PR_SPEC_AS.

*** Get Gates of AS Specification
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_AS=>C_IPRVT_P0_SPEC_AS
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  check sy-subrc = 0.
  try.
      move LR_PRVDR->R_CLSPR ?to LR_PR_SPEC_AS.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SPEC_AS.
  endtry.

  check LR_PR_SPEC_AS is bound.
  move LR_PR_SPEC_AS->GET_PTYPE( ) to RF_PTYPE.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

  try.

***---------------------------------------------------------------------------------------------
***   Check Component Product Type
      if ME->CHECK_COMPP( ) is initial.
***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).

      else.
***     Merge Status
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endif.

***---------------------------------------------------------------------------------------------
***   Check Component Production Pass
      case ME->CHECK_PPASS( ).
        when 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        when others.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
      endcase.

    catch /VCXI/CX_CKX.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_E ).
  endtry.

endmethod.                    "GET_STATUS
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***-----------------------------------------------------------------------------------
*** Check Component Product type
  case ME->CHECK_COMPP( ).
    when 0.
*** Product Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '851' ).

    when 1.
*** Product Type is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '852' ).

    when 2.
*** Product type is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '853' ).
    when 3.
*** Product Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '854' ).

  endcase.

***-----------------------------------------------------------------------------------
*** Check Component Production Pass
  case ME->CHECK_PPASS( ).
    when 0.
***   Production Pass is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '855' ).

    when 1.
***   Production Pass is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '856' ).

  endcase.

endmethod.
method GET_TPRST.

  check ME->R_PR_SPEC is bound.

  RF_TPRST = ME->R_PR_SPEC->GET_TPRST( ).

endmethod.
method GET_WERKS.

  check ME->R_PR_SPEC is bound.
  RF_WERKS = ME->R_PR_SPEC->GET_WERKS( ).

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QITEM.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QITEM_CHANGED ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QCALC.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QCALC_CHANGED ).
  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_PR_SPEC.
  endtry.

  if ME->R_PR_SPEC is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '010'
                                          IF_MSGV1 = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_BOXPA.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_BOXPA( IF_BOXPA = IF_BOXPA
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_COMPP.

  data: LF_PTYPE     type ZVCXI_P0S_PTYPE.

  check ME->R_PR_SPEC is bound.

  move IF_COMPP to LF_PTYPE.
  ME->R_PR_SPEC->SET_PTYPE( IF_PTYPE = LF_PTYPE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_COMPR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COMPR ).

  move IF_COMPR           to LS_PARAM-ATFLV.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COMPR_CHANGED ).
  endif.

endmethod.
method SET_FCSFG.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FCSFG ).

  move IF_FCSFG to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FCSFG_CHANGED ).
  endif.

endmethod.
method SET_MATDE.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_MATDE( IF_MATDE = IF_MATDE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_NOCOI.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_NOCOI( IF_NOCOL = IF_NOCOL ).

endmethod.
method SET_NOCOO.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_NOCOO( IF_NOCOL = IF_NOCOL ).

endmethod.
method SET_PPASS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PPASS ).

  move IF_PPASS to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if IF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PPASS_CHANGED ).
  endif.

endmethod.
method SET_PROHE.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PROHE( IS_PROHE = IS_PROHE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PROLE.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PROLE( IS_PROLE = IS_PROLE
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PROWI.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PROWI( IS_PROWI = IS_PROWI
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PRSTY.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PRSTY( IF_PRSTY = IF_PRSTY
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PRTYI.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PRTYI( IF_PRTYP = IF_PRTYP
                            IF_SETBY = IF_SETBY ).

endmethod.
method SET_PRTYO.

  check ME->R_PR_SPEC is bound.

  ME->R_PR_SPEC->SET_PRTYO( IF_PRTYP = IF_PRTYP
                            IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QCALC.

  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QCALC( importing ES_QCALC_BASE = ES_QCALC_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QCALC_BASE-QCALC.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QCALC_BASE-QCALC_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Set Component Ratio as Numerator
  move ME->GET_COMPR( ) to EF_UMREZ.

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QCALC_SELF-QCALC   = ES_QCALC_BASE-QCALC * EF_UMREZ / EF_UMREN.
  endif.
  ES_QCALC_SELF-QCALC_UOM = ES_QCALC_BASE-QCALC_UOM.

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QITEM.

  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QITEM( importing ES_QITEM_BASE = ES_QITEM_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QITEM_BASE-QITEM.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QITEM_BASE-QITEM_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Set Component Ratio as Numerator
  move ME->GET_COMPR( ) to EF_UMREZ.

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QITEM_SELF-QITEM   = ES_QITEM_BASE-QITEM * EF_UMREZ / EF_UMREN.
  endif.
  ES_QITEM_SELF-QITEM_UOM = ES_QITEM_BASE-QITEM_UOM.

endmethod.
