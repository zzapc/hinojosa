
class ZCL_VCXI_XCA_DPM_CONV definition
  public
  create public .

public section.

  constants C_ICVRT_UNIT_ISO type ZVCXI_XCA_DPM_ICVRT value 'UNIT_ISO' ##NO_TEXT.

  methods CONV_TO_INPUT
    importing
      !IF_VALUE type STRING
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    changing
      value(CF_VALUE) type ANY
    raising
      /VCXI/CX_CKX .
  methods CONV_TO_OUTPUT
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_CVCLS type ZVCXI_XCA_DPM_CVCLS
    returning
      value(RR_CONV) type ref to ZCL_VCXI_XCA_DPM_CONV
    raising
      /VCXI/CX_CKX .
protected section.

  methods CONV_IN_UNIT_ISO
    importing
      !IF_VALUE type STRING
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    changing
      value(CF_VALUE) type ANY
    raising
      /VCXI/CX_CKX .
  methods CONV_OUT_UNIT_ISO
    importing
      !IF_VALUE type ANY
      !IR_DATA type ref to DATA
      !IS_VALMP type ZVCXI_XCA_DPM_S_VALMP
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCA_DPM_CONV definition
class ZCL_VCXI_XCA_DPM_CONV implementation.
  method CONV_IN_UNIT_ISO.

    data: LF_SAPCODE type T006-MSEHI,
          LF_ISOCODE type T006-ISOCODE.


    check IF_VALUE is not initial.
    LF_ISOCODE = IF_VALUE.

    call function 'UNIT_OF_MEASURE_ISO_TO_SAP'
      exporting
        ISO_CODE  = LF_ISOCODE
      importing
        SAP_CODE  = LF_SAPCODE
      exceptions
        NOT_FOUND = 1.

    if SY-SUBRC eq 0.
      CF_VALUE = LF_SAPCODE.
    else.
      clear CF_VALUE.
    endif.

  endmethod.
  method CONV_OUT_UNIT_ISO.

    data: LF_SAPCODE type T006-MSEHI,
          LF_ISOCODE type T006-ISOCODE.


    check IF_VALUE is not initial.
    LF_SAPCODE = IF_VALUE.

    call function 'UNIT_OF_MEASURE_SAP_TO_ISO'
      exporting
        SAP_CODE    = LF_SAPCODE
      importing
        ISO_CODE    = LF_ISOCODE
      exceptions
        NOT_FOUND   = 01
        NO_ISO_CODE = 02.

    if SY-SUBRC eq 0.
      RF_VALUE = LF_ISOCODE.
    else.
      RF_VALUE = IF_VALUE.
    endif.

  endmethod.
  method CONV_TO_INPUT.

    case IS_VALMP-ICVRT.
***   Convert ISO Code to SAP Unit
      when C_ICVRT_UNIT_ISO.
        ME->CONV_IN_UNIT_ISO( exporting IF_VALUE = IF_VALUE
                                        IR_DATA  = IR_DATA
                                        IS_VALMP = IS_VALMP
                              changing  CF_VALUE = CF_VALUE ).

      when SPACE.
***     Standard Input
        CF_VALUE = IF_VALUE.
      when others.
***     Not supported
        raise exception type /VCXI/CX_CKX.
    endcase.

  endmethod.
  method CONV_TO_OUTPUT.

    case IS_VALMP-ICVRT.
***   Convert SAP Unit to ISO Code
      when C_ICVRT_UNIT_ISO.
        RF_VALUE = ME->CONV_OUT_UNIT_ISO( IF_VALUE = IF_VALUE
                                          IR_DATA  = IR_DATA
                                          IS_VALMP = IS_VALMP ).

      when SPACE.
***     Standard Output
        RF_VALUE = |{ IF_VALUE }|.
      when others.
***     Not supported
        raise exception type /VCXI/CX_CKX.
    endcase.

  endmethod.
  method FACTORY.

    try.
        if IF_CVCLS is not initial.
          create object RR_CONV
            type (IF_CVCLS).
        else.
          create object RR_CONV.
        endif.

***   Catch Creation Errors
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
