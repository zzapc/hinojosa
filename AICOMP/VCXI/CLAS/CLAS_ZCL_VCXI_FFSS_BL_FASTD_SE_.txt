
class ZCL_VCXI_FFSS_BL_FASTD_SE definition
  public
  inheriting from ZCL_VCXI_FFSS_BL_FASTD
  create public .

public section.

  constants C_QTYMA_TABS type /VCXI/VKSC_QTYMA value 20 ##NO_TEXT.

  methods SET_NOFFG
    importing
      !IF_NOFFG type ZVCXI_FFS_NOFFG
    raising
      /VCXI/CX_CKX .

  methods GET_GATE_FFG
    redefinition .
protected section.

  methods ANALYZE_OUTPUT
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_BL_FASTD_SE definition
class ZCL_VCXI_FFSS_BL_FASTD_SE implementation.
  method ANALYZE_OUTPUT.

    data: LF_COUNT    type        I,
          LF_ONLY_FFG type        ABAP_BOOL.
    data: LT_PARAM       type        /VCXI/VKSR_TT_PARAM.
    data: LR_SPVRE_CHILD type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE        type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Check for multiple Out Elements
    move ABAP_TRUE to LF_ONLY_FFG.
    loop at IT_SPVRE into LR_SPVRE_CHILD
                    where TABLE_LINE->R_PARENT = IR_SPVRE_OUTPUT.
      add 1 to LF_COUNT.

      if LR_SPVRE_CHILD->R_SPVCE->/VCXI/IF_CKX_OBJECT~GET_ID( ) ne 'FFG'.
        move ABAP_FALSE to LF_ONLY_FFG.
      endif.
    endloop.

*** More than 1 child of Output found
    if LF_COUNT gt 1.
***   All needs to be FFG
      if LF_ONLY_FFG ne ABAP_TRUE.
        move C_SFDAT_NONSTANDARD to CF_SFDAT.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Check for parameter that were set by User
    if IF_LEVEL ne 0.
      LR_GATE = ME->GET_GATE_BY_SPVRE( IR_SPVRE = IR_SPVRE_OUTPUT
                                       IT_PRVDR = IT_PRVDR ).
      if LR_GATE is bound.
        LT_PARAM = LR_GATE->GET_PARAM_ALL( ).
        read table LT_PARAM with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                            transporting no fields.
        if SY-SUBRC eq 0.
          move C_SFDAT_NONSTANDARD to CF_SFDAT.
        endif.
      endif.
    endif.

  endmethod.
  method GET_GATE_FFG.

    data: LT_SPVRE type        /VCXI/VKSR_TT_SPVRE,
          LT_PRVDR type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR        type ref to /VCXI/CL_VKSR_GATE,
          LR_SPVRE_OUTPUT type ref to /VCXI/CL_VKSR_SPVRE.

    clear ER_GATE_FFG.

***--------------------------------------------------------------------------------------
*** Get Film Finished Good Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG ).
    move LT_PRVDR to ET_FFG_PRVDR.
    read table LT_PRVDR into LR_PRVDR index 1.
    if SY-SUBRC eq 0.
      move LR_PRVDR to ER_GATE_FFG.
    endif.

*** Mark it as non-standard if more than one provider can be found
    if LINES( LT_PRVDR ) le 1.
      move C_SFDAT_NONSTANDARD to EF_SFDAT.
    else.
      move C_SFDAT_STANDARD to EF_SFDAT.
    endif.

***--------------------------------------------------------------------------------------
*** Get Output Provider to Finished Good
    if ER_GATE_FFG is bound.
      LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_OUTPUT=>C_IPRVT_OUTPUT ).
      loop at LT_PRVDR into LR_PRVDR.
        if LR_PRVDR->IS_PARENT( IR_GATE_CHILD = ER_GATE_FFG ) eq ABAP_TRUE.
          move LR_PRVDR to ER_GATE_OUTPUT.
          exit.
        endif.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** If no Finished Good found -> Create new
    if ER_GATE_FFG is not bound.
***   Get current Supervised Elements
      move ME->R_GATE->GET_SPVRE( ) to LT_SPVRE.

***   Create new Film Component
      ME->ADD_FCOMP( importing ER_SPVRE_OUTPUT = LR_SPVRE_OUTPUT
                     changing  CT_SPVRE        = LT_SPVRE ).

      do 2 times.
***     Create new FFG
        ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = LR_SPVRE_OUTPUT
                                 IF_ID           = ME->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG )
                       changing  CT_SPVRE        = LT_SPVRE ).
      enddo.

***   Set via Supervisor
      ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE ).

***   Try Again
      ME->GET_GATE_FFG( importing ER_GATE_OUTPUT = ER_GATE_OUTPUT
                                  ER_GATE_FFG    = ER_GATE_FFG
                                  EF_SFDAT       = EF_SFDAT ).

      LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG ).
      move LT_PRVDR to ET_FFG_PRVDR.
    endif.

  endmethod.
  method SET_NOFFG.

    data: LF_INDEX       type I,
          LF_NOFFG       type I.
    data: LS_PRVDR_DEF   type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_FFG_PRVDR   type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF   type /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE.

    ME->GET_GATE_FFG( importing ER_GATE_OUTPUT = LR_GATE_OUTPUT
                                ET_FFG_PRVDR   = LT_FFG_PRVDR ).
    check LR_GATE_OUTPUT is bound.

    move LINES( LT_FFG_PRVDR ) to LF_NOFFG.

*** Less FG needed
    if LF_NOFFG gt IF_NOFFG.
      LF_INDEX = IF_NOFFG + 1.
      loop at LT_FFG_PRVDR into LR_GATE from LF_INDEX.
        LR_GATE->DO_FREE( ).
        delete LT_FFG_PRVDR.
      endloop.

*** More FG needed
    else.
***   Check SmartVC Customizing for allowed number of FGs
      move LR_GATE_OUTPUT->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_FFSS_PR_FFG=>C_IPRVT_FFG ) to LT_PRVDR_DEF.
      read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
      check LS_PRVDR_DEF is not initial.

***   Add an extra Finished Good
      LF_INDEX = IF_NOFFG - LF_NOFFG.
      do LF_INDEX times.
        LR_GATE = LR_GATE_OUTPUT->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      enddo.
    endif.

  endmethod.
