
class ZCL_VCXI_XCS_PR_COPYSPV definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  methods SET_COPY
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    raising
      /VCXI/CX_CKX .
protected section.

  data R_SVC type ref to /VCXI/CL_VKSRA_SVC .
  data T_SPV_CELMNT type /VCXI/CKX_TT_OBJECT .
  data T_SPV_RELMNT type /VCXI/VKSR_TT_SPVRE .
  data T_SPV_RELNEW type /VCXI/VKSR_TT_SPVRE .

  methods COPY_SVC_ELEMENT
    importing
      !IR_SVC_ELEMENT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods COPY_PARAM
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FIND_SPVCE_BY_ID
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RR_SPVCE) type ref to /VCXI/CL_VKSC_SPVCE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_PR_COPYSPV definition
class ZCL_VCXI_XCS_PR_COPYSPV implementation.
method COPY_PARAM.

  data: LS_LEOKEY         type        /VCXI/VKSR_S_LEOKY,
        LS_PARAR          type        /VCXI/VKSR_S_PARAM,
        LS_PARAS          type        /VCXI/VKSR_S_PARAM.
  data: LT_PARAM          type        /VCXI/VKSR_TT_PARAM.

  IR_SPVRE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  LS_LEOKEY = IR_SVCEL->GET_LEOKY( ).
  IR_SPVRE->SET_LEOKY( IS_LEOKY = LS_LEOKEY ).

  LT_PARAM  = IR_SVCEL->GET_PARAM_ALL( ).
  loop at LT_PARAM into LS_PARAR.
    try.
        LS_PARAS = IR_SPVRE->GET_PARAM( IF_PARID = LS_PARAR-PARID ).
        if LS_PARAS-PARID is not initial.
          LS_PARAS-ATWRT = LS_PARAR-ATWRT.
          LS_PARAS-STRNG = LS_PARAR-STRNG.
          LS_PARAS-ATFLV = LS_PARAR-ATFLV.
          LS_PARAS-UNIT  = LS_PARAR-UNIT.
          LS_PARAS-CURKY = LS_PARAR-CURKY.
          LS_PARAS-SETBY = LS_PARAR-SETBY.
          IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAS ).
        else.
          IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAR ).
        endif.
      catch /VCXI/CX_CKX.
        continue.
    endtry.
  endloop.

endmethod.
method COPY_SVC_ELEMENT.

  data:  LF_ID          type /VCXI/CKX_ID.
  data:  LT_SVC_ELEMENT type /VCXI/CKX_TT_OBJECT.
  data:  LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE       type ref to /VCXI/CL_VKSR_SPVRE,
         LR_SVCEL       type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
         LR_SVC_ELEMENT type ref to /VCXI/IF_CKX_OBJECT.

*** Copy SVC Data
  ME->COPY_PARAM( IR_SVCEL = IR_SVC_ELEMENT
                  IR_SPVRE = IR_SPVRE ).

*** Copy all existing Children of Source
  LT_SVC_ELEMENT = ME->R_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = IR_SVC_ELEMENT
                                                IF_SORTED             = ABAP_TRUE ).

  loop at LT_SVC_ELEMENT into LR_SVC_ELEMENT.
    LF_ID = LR_SVC_ELEMENT->GET_ID( ).
    move LR_SVC_ELEMENT ?to LR_SVCEL.
    if LR_SVCEL->IS_INUSE( ) ne ABAP_TRUE.
      continue.
    endif.

    LR_SPVCE = ME->FIND_SPVCE_BY_ID( IR_SPVRE = IR_SPVRE
                                     IF_ID    = LF_ID ).
    if LR_SPVCE is bound.
      create object LR_SPVRE
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE.

      append LR_SPVRE to ME->T_SPV_RELNEW.
      move LR_SVC_ELEMENT ?to LR_SVCEL.
      ME->COPY_SVC_ELEMENT( IR_SVC_ELEMENT = LR_SVCEL
                            IR_SPVRE       = LR_SPVRE ).
    endif.
  endloop.

endmethod.
method FIND_SPVCE_BY_ID.

  data:  LF_ID       type        /VCXI/CKX_ID.
  data:  LS_CMPRK    type        /VCXI/VKC_S_CMPRK.
  data:  LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
         LR_SPVCE    type ref to /VCXI/CL_VKSC_SPVCE.

  loop at ME->T_SPV_CELMNT into LR_OBJECT.
    move LR_OBJECT ?to LR_SPVCE.

    if LR_SPVCE->/VCXI/IF_CKX_OBJECT~GET_ID( )       eq IF_ID and
       LR_SPVCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) eq IR_SPVRE->R_SPVCE.
      move LR_SPVCE to RR_SPVCE.
      exit.
    endif.
  endloop.


  if RR_SPVCE is not bound.
*** Get Configuration Info
    ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).
    if IR_SPVRE is not bound.
***   Supervised Cust.Element &1 can't be found in Model &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '401'
                                            IF_MSGV1 = IF_ID
                                            IF_MSGV2 = LS_CMPRK-CMATN ).
    else.
***   Supervised Cust.Element &1 can't be found as child of &2 in Model &3.
      move IR_SPVRE->R_SPVCE->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '402'
                                            IF_MSGV1 = IF_ID
                                            IF_MSGV2 = LF_ID
                                            IF_MSGV3 = LS_CMPRK-CMATN ).
    endif.
  endif.

endmethod.
method SET_COPY.

  data: LF_ID          type /VCXI/CKX_ID.
  data: LT_SVC_ELEMENT type /VCXI/CKX_TT_OBJECT.
  data: LR_SPVRE       type ref to /VCXI/CL_VKSR_SPVRE,
        LR_SVCEL       type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
        LR_PARENT      type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
        LR_SVC_ELEMENT type ref to /VCXI/IF_CKX_OBJECT.

  ME->R_SVC = IR_SVC.
  free ME->T_SPV_RELNEW.
  clear: LR_PARENT.

*** Get Supervised Customizing Elements by Supervisor (Own Customizing Element)
  ME->T_SPV_CELMNT = ME->R_GATE->GET_SPVCE( ).
  ME->T_SPV_RELMNT = ME->R_GATE->GET_SPVRE( ).

*** Get all existing Root Elements of Source
  LT_SVC_ELEMENT = IR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = LR_PARENT
                                             IF_SORTED             = ABAP_TRUE ).
  check LT_SVC_ELEMENT is not initial.

  loop at LT_SVC_ELEMENT into LR_SVC_ELEMENT.
    move LR_SVC_ELEMENT->GET_ID( ) to LF_ID.

*** Find Existing Root Elements of Target
    loop at ME->T_SPV_RELMNT into LR_SPVRE.
      if LR_SPVRE->GET_ID( ) eq LF_ID and
         LR_SPVRE->R_PARENT  is not bound.

***     Keep Root Element
        append LR_SPVRE to ME->T_SPV_RELNEW.

***     Start with Copy
        move LR_SVC_ELEMENT ?to LR_SVCEL.
        ME->COPY_SVC_ELEMENT( IR_SVC_ELEMENT = LR_SVCEL
                              IR_SPVRE       = LR_SPVRE ).
      endif.
    endloop.
  endloop.

  ME->R_GATE->SET_SPVRE( IT_SPVRE = ME->T_SPV_RELNEW ).

endmethod.
