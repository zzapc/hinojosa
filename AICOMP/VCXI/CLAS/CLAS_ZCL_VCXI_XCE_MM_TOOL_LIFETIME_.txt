
class ZCL_VCXI_XCE_MM_TOOL_LIFETIME definition
  public
  final
  create public .

public section.

  types:
    begin of YS_COND,
        TPRCE       type KBETR,
        TPRCE_KSTAR type KSCHL,
        TDISC       type KBETR,
        TDISC_KSTAR type KSCHL,
      end of YS_COND .
  types:
    begin of YS_MCHB,
        MATNR        type MATNR,
        WERKS        type WERKS_D,
        CHARG        type CHARG_D,
        LGORT        type LGORT_D,
        UNRESTR_STCK type LABST,
        BLOCKED_STCK type SPEME,
      end of YS_MCHB .
  types:
    YT_MCHB type standard table of YS_MCHB with default key .

  methods CREATE_PURORD_TOOL
    importing
      !IF_MATNR_SERVICE type MATNR
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC optional
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_BPREI type BPREI
      !IF_KOSTL type KOSTL
      !IF_VDATU type EDATU_VBAK
      !IF_LIFNR type LIFNR
      !IF_EKORG type EKORG
    changing
      value(CR_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods CREATE_SDOC_TOOL
    importing
      !IF_MATNR type MATNR
      !IF_MATNR_SERVICE type MATNR
      !IS_TPRCE type ZVCXI_XCS_S_TPRCE
      !IF_VDATU type EDATU_VBAK
      !IF_WERKS type WERKS_D
    exporting
      value(ER_BOB_SDOC) type ref to ZCL_VCXI_XCI_BOB_SDOC
    changing
      value(CR_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods GET_LAST_ORDER
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
    returning
      value(RR_BOB_SDOC) type ref to ZCL_VCXI_XCI_BOB_SDOC
    raising
      /VCXI/CX_CKX .
  methods SCRAP
    importing
      !IT_SCRAP type ZVCXI_XCE_MM_TT_SCRAP
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods SET_DAMAGED
    importing
      !IT_DAMAGED type ZVCXI_XCE_MM_TT_DAMAGED
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods GET_COND
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RS_COND) type YS_COND
    raising
      /VCXI/CX_CKX .
  methods REORDER
    importing
      !IT_REORDER type ZVCXI_XCE_MM_TT_REORDER
    changing
      !CR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    returning
      value(RF_ERR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.
private section.

  constants C_PCRSK_TOOL_PRICE type ZVCXI_XCM_MBQ_PCRSK value 'TOOL_PRICE' ##NO_TEXT.
  constants C_PCRSK_TOOL_DISC type ZVCXI_XCM_MBQ_PCRSK value 'TOOL_DISC' ##NO_TEXT.

  methods GET_LGORT_DAMAGED
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RF_LGORT) type LGORT_D
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL_STOCK_UNR
    importing
      !IT_DAMAGED type ZVCXI_XCE_MM_TT_DAMAGED
    returning
      value(RT_MCHB) type YT_MCHB
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL_STOCK_UNR_BLCK
    changing
      !CT_SCRAP type ZVCXI_XCE_MM_TT_SCRAP
    raising
      /VCXI/CX_CKX .
  methods ADD_PRT
    importing
      !IS_REORDER type ZVCXI_XCE_MM_S_REORDER
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCE_MM_TOOL_LIFETIME definition
class ZCL_VCXI_XCE_MM_TOOL_LIFETIME implementation.
  method ADD_PRT.

*** Search for Plant View
    select MATNR, WERKS
           into table @data(LT_MARC)
           from MARC
          where MATNR eq @IS_REORDER-MATNR
           and  WERKS eq @IS_REORDER-WERKS
           and  LVORM eq @SPACE.
    check SY-SUBRC eq 0 and
          LT_MARC  is not initial.

*** Search for General View
    select MATNR, MEINS
           into table @data(LT_MARA)
           from MARA
           for all entries in @LT_MARC
          where MATNR eq @LT_MARC-MATNR
           and  LVORM eq @SPACE.
    check SY-SUBRC eq 0 and
          LT_MARA  is not initial.

*** Search for Sales View
    select MATNR, VRKME
           into table @data(LT_MVKE)
           from MVKE
           for all entries in @LT_MARA
          where MATNR eq @LT_MARA-MATNR
           and  VKORG eq @IR_BOB_SDOC->S_VBAK-VKORG
           and  VTWEG eq @IR_BOB_SDOC->S_VBAK-VTWEG
           and  LVORM eq @SPACE.
    check SY-SUBRC eq 0 and
          LT_MVKE  is not initial.

***------------------------------------------------------------------------------------------------
*** Add Items
*** Filter
    check LINE_EXISTS( LT_MARC[ MATNR = IS_REORDER-MATNR
                                WERKS = IS_REORDER-WERKS ] ) and
          LINE_EXISTS( LT_MVKE[ MATNR = IS_REORDER-MATNR ] ).

*** Add Item
    append value #( POSNR  = IR_BOB_SDOC->GET_POSNR_NEXT( )
                    MATNR  = IS_REORDER-MATNR
                    WERKS  = IS_REORDER-WERKS
                    SPART  = IR_BOB_SDOC->S_VBAK-SPART
                    KWMENG = 1
                    VRKME  = LT_MVKE[ MATNR = IS_REORDER-MATNR ]-VRKME
                    MEINS  = LT_MARA[ MATNR = IS_REORDER-MATNR ]-MEINS
                    UMVKZ  = 1
                    UMVKN  = 1
                    STDAT  = SY-DATUM
                  ) to IR_BOB_SDOC->T_VBAP assigning field-symbol(<S_VBAP>).

*** Schedule Lines Data
    append value #( POSNR = <S_VBAP>-POSNR
                    ETENR = '0001'
                    WMENG = <S_VBAP>-KWMENG
                    VRKME = <S_VBAP>-VRKME
                    MEINS = <S_VBAP>-MEINS
                  ) to IR_BOB_SDOC->T_VBEP.

*** Add Conditions
    append value #( KPOSN = <S_VBAP>-POSNR
                    KSCHL = IS_REORDER-TPRCE_KSTAR            "Price
                    KBETR = IS_REORDER-TPRCE / 10
                  ) to IR_BOB_SDOC->T_KOMV.
    if IS_REORDER-TDISC ne 0.
      append value #( KPOSN = <S_VBAP>-POSNR
                      KSCHL = IS_REORDER-TDISC_KSTAR            "% Disc.from Gross
                      KBETR = IS_REORDER-TDISC
                    ) to IR_BOB_SDOC->T_KOMV.

    endif.
  endmethod.
  method CREATE_PURORD_TOOL.

    data: LF_EBELP     type EBELP value 10,
          LF_MATNR_TXT type MATNR.
    data: LS_MAKT  type MAKT.

***----------------------------------------------------------------------------
*** Search for General View
    select single MATNR, MEINS, MATKL
           into @data(LS_MARA)
           from MARA
          where MATNR eq @IF_MATNR
           and  LVORM eq @SPACE.
    check SY-SUBRC eq 0.

*** Search for Plant View
    select single MATNR, WERKS, EKGRP
           into @data(LS_MARC)
           from MARC
          where MATNR eq @IF_MATNR
           and  WERKS eq @IF_WERKS
           and  LVORM eq @SPACE.

*** Get Description for Service Material
    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = IF_MATNR_SERVICE
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.
    if SY-SUBRC ne 0.
      LS_MAKT-MAKTX = IF_MATNR_SERVICE.
    endif.

*** Convert Material into external format
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = IF_MATNR
      importing
        OUTPUT = LF_MATNR_TXT.

***----------------------------------------------------------------------------
*** Create a new Purchase Order Business Object Instance
    data(LR_BOB_PURORD) = new ZCL_VCXI_XCI_BOB_PURORD( ).
*** Define Header
    LR_BOB_PURORD->S_HEADER = value #( DOC_TYPE  = 'NB'
                                       VENDOR    = IF_LIFNR
                                       PURCH_ORG = IF_EKORG
                                       PUR_GROUP = LS_MARC-EKGRP
                                     ).

*** Add Items
    if IR_BOB_SDOC is initial.
      LR_BOB_PURORD->ADD_TEXT_ITEM( IF_WERKS = IF_WERKS
                                    IF_MATKL = LS_MARA-MATKL
                                    IF_TXZ01 = |{ LS_MAKT-MAKTX } - { LF_MATNR_TXT }|
                                    IF_BSTMG = 1
                                    IF_BSTME = LS_MARA-MEINS
                                    IF_BPREI = IF_BPREI
                                    IF_EEIND = |{ IF_VDATU date = user }|
                                    IF_KOSTL = IF_KOSTL ).  " Supply IF_KOSTL to set Account Assignment Category to 'K'
    else.
***   In case there is a Sales Order use its information
      LR_BOB_PURORD->ADD_TEXT_ITEM( IF_WERKS = IF_WERKS
                                    IF_MATKL = LS_MARA-MATKL
                                    IF_TXZ01 = |{ LS_MAKT-MAKTX } - { LF_MATNR_TXT }|
                                    IF_BSTMG = 1
                                    IF_BSTME = LS_MARA-MEINS
                                    IF_BPREI = IF_BPREI
                                    IF_EEIND = |{ IF_VDATU date = user }|
                                    IF_VBELN = value #( IR_BOB_SDOC->T_VBEP[ 1 ]-VBELN optional )
                                    IF_POSNR = value #( IR_BOB_SDOC->T_VBEP[ 1 ]-POSNR optional )
                                    IF_ETENR = value #( IR_BOB_SDOC->T_VBEP[ 1 ]-ETENR optional ) ).
    endif.

*** Create Purchase Order
    data(LF_TESTRUN) = ABAP_FALSE.
    data(LR_MSG) = LR_BOB_PURORD->SAVE( IF_TESTRUN = LF_TESTRUN ).
    CR_MSG->MERGE( changing CR_MESSAGE = LR_MSG ).

  endmethod.
  method CREATE_SDOC_TOOL.

    data(LR_TOOL_ORDER) = new ZCL_VCXI_XCE_SD_TOOL_ORDER( ).


    data(LR_BOB_SDOC) = ME->GET_LAST_ORDER( IF_MATNR = IF_MATNR
                                            IF_WERKS = IF_WERKS ).
*** Raise Exception if no Sales Order found
    if LR_BOB_SDOC is initial.
***   No Sales Order found for Material IF_MATNR in Plant IF_WERKS
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '019'
                                            IF_MSGV1 = IF_MATNR
                                            IF_MSGV2 = IF_WERKS ).

    endif.
*** Prepare Tool Order
    ER_BOB_SDOC =  LR_TOOL_ORDER->PREPARE( IF_AUART = LR_BOB_SDOC->S_VBAK-AUART
                                           IF_VKORG = LR_BOB_SDOC->S_VBAK-VKORG
                                           IF_VTWEG = LR_BOB_SDOC->S_VBAK-VTWEG
                                           IF_SPART = LR_BOB_SDOC->S_VBAK-SPART
                                           IF_VDATU = IF_VDATU
                                           IF_KUNAG = value #( LR_BOB_SDOC->T_VBPA[ PARVW = 'AG' ]-KUNNR optional )
                                           IF_KUNWE = value #( LR_BOB_SDOC->T_VBPA[ PARVW = 'WE' ]-KUNNR optional ) ).
*** Add PRT
    LR_TOOL_ORDER->ADD_PRT( IT_PRT      = value #( ( MATNR = IF_MATNR_SERVICE
                                                     WERKS = IF_WERKS ) )
                            IR_BOB_SDOC = ER_BOB_SDOC ).

*** Add Conditions
    data(LT_TC210) = ZCL_VCXI_XCM_MBQ_CUST=>GET_KSCHL( IF_PCRSK = ME->C_PCRSK_TOOL_PRICE
                                                       IF_VKORG = LR_BOB_SDOC->S_VBAK-VKORG ).

    loop at ER_BOB_SDOC->T_VBAP assigning field-symbol(<S_VBAP>).
      append value #( KPOSN = <S_VBAP>-POSNR
                      KSCHL = LT_TC210[ 1 ]-KSTAR    "Price
                      KBETR = IS_TPRCE-TPRCE / 10
                    ) to ER_BOB_SDOC->T_KOMV.
    endloop.
    check ER_BOB_SDOC->T_VBAP is not initial.

*** Create Sales Document
    data(LF_TESTRUN) = ABAP_FALSE.
    data(LR_MSG) = ER_BOB_SDOC->SAVE( IF_TESTRUN = LF_TESTRUN ).
    CR_MSG->MERGE( changing CR_MESSAGE = LR_MSG ).

  endmethod.
  method GET_COND.

*** Simulate Pricing
    ZCL_VCXI_XCI_BOB_PCR=>SIMULATE_SALES_PRICE( exporting IF_AUART = IR_BOB_SDOC->S_VBAK-AUART
                                                          IS_PISPR = value #( MATNR = IF_MATNR
                                                                              WERKS = IF_WERKS
                                                                              KUNNR = value #( IR_BOB_SDOC->T_VBPA[ PARVW = 'AG' ]-KUNNR optional )
                                                                              VKORG = IR_BOB_SDOC->S_VBAK-VKORG
                                                                              VTWEG = IR_BOB_SDOC->S_VBAK-VTWEG
                                                                              SPART = IR_BOB_SDOC->S_VBAK-SPART
                                                                              MGAME = 1
                                                                              KPEIN = 1 )
                                                importing ET_KOMV = data(LT_KOMV) ).

*** Conditions for Tool Price
    data(LT_TC210) = ZCL_VCXI_XCM_MBQ_CUST=>GET_KSCHL( IF_PCRSK = ME->C_PCRSK_TOOL_PRICE
                                                       IF_VKORG = IR_BOB_SDOC->S_VBAK-VKORG ).
*** Get Tool Price Key
    if LT_TC210 is not initial.
      RS_COND-TPRCE_KSTAR = LT_TC210[ 1 ]-KSTAR.
      RS_COND-TPRCE = value #( LT_KOMV[ KSCHL = RS_COND-TPRCE_KSTAR ]-KBETR optional ).
    else.
***   No Condition Type for Mat. &1 in Plant &2 with Key &3 in Sales Org. &4
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '020'
                                            IF_MSGV1 = IF_MATNR
                                            IF_MSGV2 = IF_WERKS
                                            IF_MSGV3 = ME->C_PCRSK_TOOL_PRICE
                                            IF_MSGV4 = IR_BOB_SDOC->S_VBAK-VKORG ).
    endif.

*** Conditions for Tool Discount
    LT_TC210 = ZCL_VCXI_XCM_MBQ_CUST=>GET_KSCHL( IF_PCRSK = ME->C_PCRSK_TOOL_DISC
                                                 IF_VKORG = IR_BOB_SDOC->S_VBAK-VKORG ).
*** Get Tool Discount Key
    if LT_TC210 is not initial.
      RS_COND-TDISC_KSTAR = LT_TC210[ 1 ]-KSTAR.
      RS_COND-TDISC = value #( LT_KOMV[ KSCHL = RS_COND-TDISC_KSTAR ]-KBETR optional ).
    else.
***   No Condition Type for Mat. &1 in Plant &2 with Key &3 in Sales Org. &4
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '020'
                                            IF_MSGV1 = IF_MATNR
                                            IF_MSGV2 = IF_WERKS
                                            IF_MSGV3 = ME->C_PCRSK_TOOL_DISC
                                            IF_MSGV4 = IR_BOB_SDOC->S_VBAK-VKORG ).

    endif.


  endmethod.
  method GET_LAST_ORDER.

    data: LF_VBELN type VBELN.
    data: LT_VBELN type table of VBELN.

***------------------------------------------------------------------------------------------------
*** Determine if Tool is Part of a Set
*** Find Ink Tools using DMS
    select SETTN, INKTN
           from ZVCXI_PXE_TD200
           inner join ZVCXI_PXE_TD210
            on   ZVCXI_PXE_TD210~DOKAR = ZVCXI_PXE_TD200~DOKAR
             and ZVCXI_PXE_TD210~DOKNR = ZVCXI_PXE_TD200~DOKNR
             and ZVCXI_PXE_TD210~DOKVR = ZVCXI_PXE_TD200~DOKVR
             and ZVCXI_PXE_TD210~DOKTL = ZVCXI_PXE_TD200~DOKTL
           where INKTN = @IF_MATNR
           union select SETTN, INKTN
                 from ZVCXI_FFE_TD200
                 inner join ZVCXI_FFE_TD210
                  on   ZVCXI_FFE_TD210~DOKAR = ZVCXI_FFE_TD200~DOKAR
                   and ZVCXI_FFE_TD210~DOKNR = ZVCXI_FFE_TD200~DOKNR
                   and ZVCXI_FFE_TD210~DOKVR = ZVCXI_FFE_TD200~DOKVR
                   and ZVCXI_FFE_TD210~DOKTL = ZVCXI_FFE_TD200~DOKTL
                   where INKTN = @IF_MATNR
           appending table @data(LT_INK_TOOL).

    if SY-SUBRC eq 0.
***   Get Sales Document Number
      select VBELN
        into table @LT_VBELN
        from VBAP
        for all entries in @LT_INK_TOOL
        where VBAP~MATNR eq @LT_INK_TOOL-SETTN
         and  VBAP~WERKS eq @IF_WERKS.
      if SY-SUBRC eq 0.
        sort LT_VBELN descending.
        read table LT_VBELN index 1 into LF_VBELN.
      endif.
*** If nothing found it is likely a DCT
    else.
      select single VBELN
        into @LF_VBELN
        from VBAP
       where VBAP~MATNR eq @IF_MATNR
         and VBAP~WERKS eq @IF_WERKS.

    endif.

    if SY-SUBRC ne 0.
***   No Sales Order found for Material &1 in Plant &2
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '019'
                                            IF_MSGV1 = IF_MATNR
                                            IF_MSGV2 = IF_WERKS ).

    endif.

***------------------------------------------------------------------------------------------------
*** Load Sales Document (Header and Partners only)
    RR_BOB_SDOC = new #( ).
    RR_BOB_SDOC->INIT_FROM_DB( IF_VBELN      = LF_VBELN
                               IS_ORDER_VIEW = value #( HEADER  = ABAP_TRUE
                                                        PARTNER = ABAP_TRUE ) ).

  endmethod.
  method GET_LGORT_DAMAGED.

*** Get Storage Location from Database Table
    select single LGORT into @RF_LGORT
             from ZVCXI_XCE_TC310
            where TSLOC eq 'DAMAGED'
              and WERKS eq @IF_WERKS.
    if SY-SUBRC ne 0.
      select single LGORT into @RF_LGORT
               from ZVCXI_XCE_TC310
              where TSLOC eq 'DAMAGED'.
    endif.

    if SY-SUBRC ne 0.
***   No Storage Location found
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '017' ).

    endif.

  endmethod.
  method GET_TOOL_STOCK_UNR.

*** Get Tool Stock with Unrestricted Stock
    select MCHB~MATNR, MCHB~WERKS, MCHB~CHARG, LGORT,
           sum( CLABS ) as UNRESTR_STCK
           from @IT_DAMAGED as DAMAGED
           inner join MCHB
             on  MCHB~MATNR = DAMAGED~MATNR
             and MCHB~WERKS = DAMAGED~WERKS
             and MCHB~CHARG = DAMAGED~CHARG
           where MCHB~CLABS ne 0
           group by MCHB~MATNR, MCHB~WERKS, MCHB~CHARG, LGORT
           into table @RT_MCHB.

    if SY-SUBRC ne 0.
***   No Tool Stock with Unrestricted Stock
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '010' ).
    endif.

  endmethod.
  method GET_TOOL_STOCK_UNR_BLCK.

*** Get Tool Stock with Stock (Unrestricted & Blocked)
    select MCHB~MATNR, MCHB~WERKS, MCHB~CHARG, MCHB~LGORT,
           sum( CLABS ) as LABST,
           sum( CSPEM ) as SPEME
           from @CT_SCRAP as SCRAP
           inner join MCHB
             on  MCHB~MATNR = SCRAP~MATNR
             and MCHB~WERKS = SCRAP~WERKS
             and MCHB~CHARG = SCRAP~CHARG
           where ( CLABS ne 0 or
                   CSPEM ne 0 )
           group by MCHB~MATNR, MCHB~WERKS, MCHB~CHARG, MCHB~LGORT
           into table @data(LT_SCRAP).
    if SY-SUBRC ne 0.
***   No Tool Stock with Unrestricted Stock or Blocked Stock
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCE_MM'
                                            IF_MSGNO = '018' ).
    endif.

    CT_SCRAP = corresponding #( LT_SCRAP ).

  endmethod.
  method REORDER.

    data(LR_TOOL_ORDER) = new ZCL_VCXI_XCE_SD_TOOL_ORDER( ).
    data(LT_REORDER) = IT_REORDER.

    loop at LT_REORDER assigning field-symbol(<S_REORDER>).
***   Log if no Conditions were found and skip current loop
      if <S_REORDER>-TPRCE is initial or <S_REORDER>-TPRCE_KSTAR is initial.
***     No Conditions found for Material MATNR in Plant WERKS
        CR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                             IF_MSGID = 'ZVCXI_XCE_MM'
                             IF_MSGNO = '20'
                             IF_MSGV1 = <S_REORDER>-MATNR
                             IF_MSGV2 = <S_REORDER>-WERKS ).
        continue.
      endif.

***   Get Last Order
      data(LR_BOB_SDOC_LO) = ME->GET_LAST_ORDER( IF_MATNR = <S_REORDER>-MATNR
                                                 IF_WERKS = <S_REORDER>-WERKS ).

***   Log if no Sales Order was found and skip current loop
      if LR_BOB_SDOC_LO is initial.
***     No Sales Order found for Material MATNR in Plant WERKS
        CR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                             IF_MSGID = 'ZVCXI_XCE_MM'
                             IF_MSGNO = '019'
                             IF_MSGV1 = <S_REORDER>-MATNR
                             IF_MSGV2 = <S_REORDER>-WERKS  ).
        continue.
      endif.

***   Prepare new Tool Order
      data(LR_BOB_SDOC) =  LR_TOOL_ORDER->PREPARE( IF_AUART = LR_BOB_SDOC_LO->S_VBAK-AUART
                                                   IF_VKORG = LR_BOB_SDOC_LO->S_VBAK-VKORG
                                                   IF_VTWEG = LR_BOB_SDOC_LO->S_VBAK-VTWEG
                                                   IF_SPART = LR_BOB_SDOC_LO->S_VBAK-SPART
                                                   IF_VDATU = <S_REORDER>-VDATU
                                                   IF_KUNAG = value #( LR_BOB_SDOC_LO->T_VBPA[ PARVW = 'AG' ]-KUNNR optional )
                                                   IF_KUNWE = value #( LR_BOB_SDOC_LO->T_VBPA[ PARVW = 'WE' ]-KUNNR optional ) ).
***   Add PRT
      ME->ADD_PRT( IS_REORDER  = <S_REORDER>
                   IR_BOB_SDOC = LR_BOB_SDOC ).

      check LR_BOB_SDOC->T_VBAP is not initial.

***   Create Sales Document
      data(LF_TESTRUN) = ABAP_FALSE.
      data(LR_MSG) = LR_BOB_SDOC->SAVE( IF_TESTRUN = LF_TESTRUN ).
      CR_MSG->MERGE( changing CR_MESSAGE = LR_MSG ).

    endloop.

  endmethod.
  method SCRAP.

    data: LT_SCRAP  type ZVCXI_XCE_MM_TT_SCRAP,
          LT_GMITEM type table of BAPI2017_GM_ITEM_CREATE.

*** Get Tool Stock with Stock (Unrestricted & Blocked)
    LT_SCRAP = IT_SCRAP.
    ME->GET_TOOL_STOCK_UNR_BLCK( changing CT_SCRAP = LT_SCRAP ).
    check LT_SCRAP is not initial.

*** Collect Items
    loop at LT_SCRAP assigning field-symbol(<LS_SCRAP>).
      if <LS_SCRAP>-LABST ne 0.
        append value #( MOVE_TYPE      = '551'              "Withdrawal for scrapping from unrestricted-use stock
                        MATERIAL       =  <LS_SCRAP>-MATNR
                        PLANT          =  <LS_SCRAP>-WERKS
                        STGE_LOC       =  <LS_SCRAP>-LGORT
                        BATCH          =  <LS_SCRAP>-CHARG
                        ENTRY_QNT      =  <LS_SCRAP>-LABST
                        ENTRY_UOM      = 'ST'
                      ) to LT_GMITEM.
      endif.
      if <LS_SCRAP>-SPEME ne 0.
        append value #( MOVE_TYPE      = '555'              "Withdrawal for scrapping from blocked stock
                        MATERIAL       =  <LS_SCRAP>-MATNR
                        PLANT          =  <LS_SCRAP>-WERKS
                        STGE_LOC       =  <LS_SCRAP>-LGORT
                        BATCH          =  <LS_SCRAP>-CHARG
                        ENTRY_QNT      =  <LS_SCRAP>-SPEME
                        ENTRY_UOM      =  <LS_SCRAP>-MEINS
                      ) to LT_GMITEM.
      endif.
    endloop.

*** Create Goods Movements
    try.
        ZCL_VCXI_XCI_BOB_GOODSMVT=>CREATE( exporting IF_BKTXT   = 'Scrap'(002)
                                                     IF_GMCODE  = ZCL_VCXI_XCI_BOB_GOODSMVT=>C_GMCODE_GI   "Goods Issue
                                                     IT_GMITEM  = LT_GMITEM
                                           changing  CR_MSG     = CR_MSG ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        CR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method SET_DAMAGED.

    data: LT_GMITEM type table of BAPI2017_GM_ITEM_CREATE.
    data: LR_MSG type ref to /VCXI/CL_CKXM_MESSAGE.


*** Get Tool Stock with Unrestricted Stock
    data(RT_MCHB) = ME->GET_TOOL_STOCK_UNR( IT_DAMAGED = IT_DAMAGED ).
    check RT_MCHB is not initial.

    try.
***     Collect Items
        loop at RT_MCHB into data(LS_MCHB).
          append lines of ZCL_VCXI_XCI_BOB_GOODSMVT=>PREPARE_GMITEM_BLOCK( IF_MATNR  = LS_MCHB-MATNR
                                                                           IF_WERKS  = LS_MCHB-WERKS
                                                                           IF_CHARG  = LS_MCHB-CHARG
                                                                           IF_LGORT  = LS_MCHB-LGORT
                                                                           IF_UMLGO  = ME->GET_LGORT_DAMAGED( IF_WERKS = LS_MCHB-WERKS )
                                                                           IF_ERFMG  = LS_MCHB-UNRESTR_STCK
                                                                         ) to LT_GMITEM.
        endloop.

***     Create Goods Movements
        ZCL_VCXI_XCI_BOB_GOODSMVT=>CREATE( exporting IF_BKTXT   = 'Set Damaged'(001)
                                                     IF_GMCODE  = ZCL_VCXI_XCI_BOB_GOODSMVT=>C_GMCODE_TRANSFER   "Transfer posting
                                                     IT_GMITEM  = LT_GMITEM
                                           changing  CR_MSG     = CR_MSG ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        CR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
