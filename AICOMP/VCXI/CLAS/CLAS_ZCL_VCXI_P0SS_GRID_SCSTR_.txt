
class ZCL_VCXI_P0SS_GRID_SCSTR definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_SCSTR_MGR type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR .

  methods CHANGE_COLOR_SCSTR
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
    changing
      !CT_SCOL type LVC_T_SCOL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_SCSTR
    importing
      !IF_SPLIT type ABAP_BOOL
      !IF_NO_CALC type ABAP_BOOL
      !IF_FOVRR_SCSTR type ZVCXI_XCS_FOVRR
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_SCSTR_VIS
    importing
      !IR_PR_SCSTR type ref to ZCL_VCXI_P0SS_PR_SCSTR
    returning
      value(RS_SCSTR_VIS) type ZVCXI_P0SS_S_SCSTR_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_SCSTR_VIS
    importing
      !IR_PR_SCSTR type ref to ZCL_VCXI_P0SS_PR_SCSTR
      !IS_SCSTR_VIS type ZVCXI_P0SS_S_SCSTR_VIS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_DOUBLE_CLICK
    redefinition .
  methods HANDLE_UCOMM
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_GRID_SCSTR definition
class ZCL_VCXI_P0SS_GRID_SCSTR implementation.
method CHANGE_COLOR_SCSTR.

  data: LS_SCOL type LVC_S_SCOL.

  free: CT_SCOL.

  case IF_SHTDI.
*** Width will be checked
    when 'A'.
      LS_SCOL-FNAME = 'SHTWI'.
      LS_SCOL-COLOR-INT = 1.
      LS_SCOL-COLOR-INV = 1.
      append LS_SCOL to CT_SCOL.

      LS_SCOL-FNAME = 'SHTWI_UOM'.
      LS_SCOL-COLOR-INT = 1.
      LS_SCOL-COLOR-INV = 1.
      append LS_SCOL to CT_SCOL.

*** Length will be checked
    when 'B'.
      LS_SCOL-FNAME = 'SHTLE'.
      LS_SCOL-COLOR-INT = 1.
      LS_SCOL-COLOR-INV = 1.
      append LS_SCOL to CT_SCOL.

      LS_SCOL-FNAME = 'SHTLE_UOM'.
      LS_SCOL-COLOR-INT = 1.
      LS_SCOL-COLOR-INV = 1.
      append LS_SCOL to CT_SCOL.

  endcase.

endmethod.
method CHANGE_STYLE_SCSTR.

  data: LF_STYLE_ENABLED_CSCOR type LVC_STYLE,
        LF_STYLE_ENABLED_SCSTR type LVC_STYLE,
        LF_STYLE_ENABLED_FOVRR type LVC_STYLE.

  free CT_STYL.

***--------------------------------------------------------------------------------------
*** Set Style Details -> only Editable
  if IF_SPLIT eq ABAP_TRUE.
    move ME->F_STYLE_ENABLED  to LF_STYLE_ENABLED_CSCOR.
  else.
    move ME->F_STYLE_DISABLED to LF_STYLE_ENABLED_CSCOR.
  endif.

  if IF_NO_CALC     eq ABAP_TRUE or
     IF_SPLIT       eq ABAP_TRUE or
     IF_FOVRR_SCSTR eq ABAP_TRUE.
    move ME->F_STYLE_ENABLED  to LF_STYLE_ENABLED_SCSTR.
  else.
    move ME->F_STYLE_DISABLED to LF_STYLE_ENABLED_SCSTR.
  endif.

  if IF_NO_CALC     eq ABAP_TRUE or
     IF_SPLIT       eq ABAP_TRUE.
    LF_STYLE_ENABLED_FOVRR = ME->F_STYLE_DISABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO.
  else.
    LF_STYLE_ENABLED_FOVRR = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT.
  endif.


***--------------------------------------------------------------------------------------
*** Set Score Operation = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCSOP'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Score Operation Description = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCSOP_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Score Category = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'CSCOR'
                              IF_STYLE     = LF_STYLE_ENABLED_CSCOR
                    changing  CT_STYL      = CT_STYL ).

*** Set Division Dimension = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DIVDI'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Division Dimension Description = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DIVDI_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Sheet Direction = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTDI'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Sheet Direction Description = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTDI_DESCR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Score String = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCSTR_EXT'
                              IF_STYLE     = LF_STYLE_ENABLED_SCSTR
                    changing  CT_STYL      = CT_STYL ).

*** Set Score String Override Flag = Editable if needed
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FOVRR_SCSTR'
                              IF_STYLE     = LF_STYLE_ENABLED_FOVRR
                    changing  CT_STYL      = CT_STYL ).

*** Set Sheet Width = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTWI'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTWI_UOM'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Set Sheet Length = Not Editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTLE'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTLE_UOM'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_P0SS_S_SCSTR_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).


  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SCSTR_MGR.

***   Define Provider Type for Button
      ME->F_IPRVT = ZCL_VCXI_P0SS_PR_SCSTR=>C_IPRVT_P0_SCSTR.

    catch CX_SY_MOVE_CAST_ERROR.
      clear ME->R_PR_SCSTR_MGR.
  endtry.


endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED    type        /VCXI/CKX_LOCKED,
                 LF_SPLIT     type        ABAP_BOOL,
                 LF_NO_CALC   type        ABAP_BOOL,
                 LF_FNEST     type        ZVCXI_P0SS_FNEST.
  data:          LS_FCAT      type        LVC_S_FCAT.
  field-symbols: <S_FCAT>     type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock Split Status and Nested Flag
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if ME->R_PR_SCSTR_MGR->GET_SOPLE( ) eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SCSOP_SPLIT or
     ME->R_PR_SCSTR_MGR->GET_SOPCR( ) eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SCSOP_SPLIT.
    LF_SPLIT = ABAP_TRUE.
  endif.
  LF_FNEST = ME->R_PR_SCSTR_MGR->GET_FNEST( ).
  if LF_FNEST                         eq ABAP_TRUE                                   and
   ( ME->R_PR_SCSTR_MGR->GET_SOPLE( ) eq ZCL_VCXI_P0SS_BL_SCSOP_CUT=>C_SCSOP_CUTTING or
     ME->R_PR_SCSTR_MGR->GET_SOPCR( ) eq ZCL_VCXI_P0SS_BL_SCSOP_CUT=>C_SCSOP_CUTTING ).
    move ABAP_TRUE to LF_NO_CALC.
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL' or 'T_SCOL'
        or 'SCSOP' or 'DIVDI' or 'SHTDI' or 'SHTDI_DESCR'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

        if <S_FCAT>-FIELDNAME eq 'SHTDI_DESCR'.
          read table RT_FCAT with key FIELDNAME = 'SHTDI' into LS_FCAT.
          move LS_FCAT-COLTEXT   to <S_FCAT>-COLTEXT.
          move LS_FCAT-SCRTEXT_L to <S_FCAT>-SCRTEXT_L.
          move LS_FCAT-SCRTEXT_M to <S_FCAT>-SCRTEXT_M.
          move LS_FCAT-SCRTEXT_S to <S_FCAT>-SCRTEXT_S.
        endif.

      when 'CSCOR'.
        move '!' to <S_FCAT>-VALEXI.
        if LF_LOCKED   eq ABAP_TRUE and
           LF_SPLIT    eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        else.
          move ABAP_FALSE    to <S_FCAT>-EDIT.
        endif.

      when 'SCSTR'.
        move ABAP_TRUE    to <S_FCAT>-TECH.
      when 'SCSTR_EXT'.
        if LF_LOCKED    eq ABAP_TRUE and
         ( LF_SPLIT     eq ABAP_TRUE or
           LF_FNEST     eq ABAP_TRUE or
           LF_NO_CALC   eq ABAP_TRUE ).
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        else.
          move ABAP_FALSE    to <S_FCAT>-EDIT.
        endif.

      when 'FOVRR_SCSTR'.
        move ABAP_TRUE      to <S_FCAT>-CHECKBOX.
        if LF_LOCKED    eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        else.
          move ABAP_FALSE   to <S_FCAT>-EDIT.
        endif.

      when 'STATU'.
        move ABAP_TRUE to <S_FCAT>-ICON.

      when 'SCSOP_DESCR'.
        read table RT_FCAT with key FIELDNAME = 'SCSOP' into LS_FCAT.
        move LS_FCAT-COLTEXT   to <S_FCAT>-COLTEXT.
        move LS_FCAT-SCRTEXT_L to <S_FCAT>-SCRTEXT_L.
        move LS_FCAT-SCRTEXT_M to <S_FCAT>-SCRTEXT_M.
        move LS_FCAT-SCRTEXT_S to <S_FCAT>-SCRTEXT_S.

      when 'DIVDI_DESCR'.
        read table RT_FCAT with key FIELDNAME = 'DIVDI' into LS_FCAT.
        move LS_FCAT-COLTEXT   to <S_FCAT>-COLTEXT.
        move LS_FCAT-SCRTEXT_L to <S_FCAT>-SCRTEXT_L.
        move LS_FCAT-SCRTEXT_M to <S_FCAT>-SCRTEXT_M.
        move LS_FCAT-SCRTEXT_S to <S_FCAT>-SCRTEXT_S.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LF_SPLIT             type          ABAP_BOOL,
                 LF_NO_CALC           type          ABAP_BOOL,
                 LF_FNEST             type          ABAP_BOOL,
                 LF_OP_NUMBER         type          I.
  data:          LS_SCSTR_GRID        type          ZVCXI_P0SS_S_SCSTR_GRID,
                 LS_SCSTR_VIS         type          ZVCXI_P0SS_S_SCSTR_VIS,
                 LS_SCSOP             type          ZVCXI_P0SS_S_SCSOP.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE,
                 LT_SCSOP             type          ZVCXI_P0SS_TT_SCSOP.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_SCSTR          type ref to   ZCL_VCXI_P0SS_PR_SCSTR.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Flag Nested
  LF_FNEST = ME->R_PR_SCSTR_MGR->GET_FNEST( ).

*** Get Operations
  LT_SCSOP = ME->R_PR_SCSTR_MGR->GET_SCSOP( ).

  delete LT_SCSOP where SCSOP eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SCSOP_NONE.

*** Get Gates of SCORE String
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SCSTR=>C_IPRVT_P0_SCSTR
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    LF_OP_NUMBER = SY-TABIX.
    clear: LS_SCSTR_GRID, LS_SCSTR_VIS, LF_SPLIT, LF_NO_CALC.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCSTR.
        check LR_PR_SCSTR is bound.

***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->GET_POSID( ) to LS_SCSTR_GRID-POSID.
        move LR_GATE->F_GATKY      to LS_SCSTR_GRID-GATKY.
        move LR_GATE               to LS_SCSTR_GRID-R_GATE.

        LS_SCSTR_VIS = ME->GET_SCSTR_VIS( IR_PR_SCSTR = LR_PR_SCSTR ).
        move-corresponding LS_SCSTR_VIS to LS_SCSTR_GRID.

***     Check if Split is active
        clear LS_SCSOP.
        read table LT_SCSOP into LS_SCSOP index LF_OP_NUMBER.
        case LS_SCSOP-CSCOR.
          when ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_LENGTH.
            if ME->R_PR_SCSTR_MGR->GET_SOPLE( ) eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SCSOP_SPLIT.
              move ABAP_TRUE to LF_SPLIT.
            endif.

          when ZCL_VCXI_P0SS_CUST_PRSTY=>C_CSCOR_CROSS.
            if ME->R_PR_SCSTR_MGR->GET_SOPCR( ) eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SCSOP_SPLIT.
              move ABAP_TRUE to LF_SPLIT.
            endif.

        endcase.

***     Check what can't be calculated
        LF_NO_CALC = ME->R_PR_SCSTR_MGR->CHECK_NO_CALC( IF_CSCOR   = LS_SCSOP-CSCOR
                                                        IF_FNEST   = LF_FNEST
                                                        IF_ACTIV   = LS_SCSOP-ACTIV
                                                        IF_SCSOP   = LS_SCSOP-SCSOP ).

*** -----------------------------------------------------------------------------------------------
***     Set Color Details
        ME->CHANGE_COLOR_SCSTR( exporting IF_SHTDI   = LS_SCSTR_GRID-SHTDI
                                changing  CT_SCOL    = LS_SCSTR_GRID-T_SCOL ).

*** -----------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_SCSTR( exporting IF_SPLIT       = LF_SPLIT
                                          IF_NO_CALC     = LF_NO_CALC
                                          IF_FOVRR_SCSTR = LS_SCSTR_VIS-FOVRR_SCSTR
                                changing  CT_STYL        = LS_SCSTR_GRID-T_STYL ).

***     Call DVC Service - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_SCSTR_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_SCSTR_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

  move ABAP_TRUE to RS_LAYOUT-NO_ROWMARK.
  move ABAP_TRUE to RS_LAYOUT-NO_TOOLBAR.
  move 'T_SCOL'  to RS_LAYOUT-CTAB_FNAME.

endmethod.
method GET_SCSTR_VIS.

  data:  LF_SHTDI type CHAR30,
         LF_UOM   type UNIT.
  data:  LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
         LS_SHTLE type ZVCXI_P0SS_S_SHTLE.

*** Get Score String Operation
  move IR_PR_SCSTR->GET_SCSOP( )         to RS_SCSTR_VIS-SCSOP.
  move IR_PR_SCSTR->GET_SCSOP_DESCR( )   to RS_SCSTR_VIS-SCSOP_DESCR.

*** Get Score Category
  move IR_PR_SCSTR->GET_CSCOR( )         to RS_SCSTR_VIS-CSCOR.

*** Get Division Dimension
  move IR_PR_SCSTR->GET_DIVDI( )         to RS_SCSTR_VIS-DIVDI.
  move IR_PR_SCSTR->GET_DIVDI_DESCR( )   to RS_SCSTR_VIS-DIVDI_DESCR.

*** Get Sheet Direction
  move IR_PR_SCSTR->GET_SHTDI( )         to RS_SCSTR_VIS-SHTDI.
  move IR_PR_SCSTR->GET_SHTDI_DESCR( )   to RS_SCSTR_VIS-SHTDI_DESCR.
  concatenate '(' RS_SCSTR_VIS-SHTDI ')' into LF_SHTDI.
  concatenate RS_SCSTR_VIS-SHTDI_DESCR LF_SHTDI
         into RS_SCSTR_VIS-SHTDI_DESCR separated by SPACE.

*** Get Score String
  move IR_PR_SCSTR->GET_SCSTR( )         to RS_SCSTR_VIS-SCSTR.
  move IR_PR_SCSTR->GET_FOVRR_SCSTR( )   to RS_SCSTR_VIS-FOVRR_SCSTR.

*** Get Sheet Width
  move IR_PR_SCSTR->GET_SHTWI( )         to LS_SHTWI.
  move-corresponding LS_SHTWI            to RS_SCSTR_VIS.

*** Get Sheet Length
  move IR_PR_SCSTR->GET_SHTLE( )         to LS_SHTLE.
  move-corresponding LS_SHTLE            to RS_SCSTR_VIS.

*** Get Status Icon
  move IR_PR_SCSTR->GET_STATUS_ICON( )   to RS_SCSTR_VIS-STATU.

***------------------------------------------------------------------------------------------------
*** Get the right Unit Value.
  if RS_SCSTR_VIS-SHTDI eq 'A'.
    move LS_SHTWI-SHTWI_UOM to LF_UOM.
  elseif RS_SCSTR_VIS-SHTDI eq 'B'.
    move LS_SHTLE-SHTLE_UOM to LF_UOM.
  endif.
*** Do Conversion for ScoreString to External format
  RS_SCSTR_VIS-SCSTR_EXT = ZCL_VCXI_P0SS_CUST_SCSTR=>CONV_SCSTR_TO_EXT( IF_SCSTR = RS_SCSTR_VIS-SCSTR
                                                                        IF_UOM   = LF_UOM ).


endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_SCSTR_GRID        type          ZVCXI_P0SS_S_SCSTR_GRID,
                 LS_SCSTR_VIS         type          ZVCXI_P0SS_S_SCSTR_VIS.
  data:          LR_PR_SCSTR          type ref to   ZCL_VCXI_P0SS_PR_SCSTR,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        try.
            move-corresponding <S_DATA> to LS_SCSTR_GRID.
            check LS_SCSTR_GRID-R_GATE is bound.

            move LS_SCSTR_GRID-R_GATE->R_CLSPR ?to LR_PR_SCSTR.
            check LR_PR_SCSTR is bound.

***         Set Values to PR Class
            move-corresponding LS_SCSTR_GRID to LS_SCSTR_VIS.
            ME->SET_SCSTR_VIS( IR_PR_SCSTR  = LR_PR_SCSTR
                               IS_SCSTR_VIS = LS_SCSTR_VIS ).

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

***   Send Event
      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX,
                 LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_MSG               type ref to   /VCXI/CL_CKXM_MESSAGE.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any.


  try.
      case E_COLUMN.
        when 'STATU'.

***       Dereferencing of Data Reference
          assign ME->R_DATA->* to <T_DATA>.

          loop at <T_DATA> assigning <S_DATA>.
            check SY-TABIX  eq E_ROW-INDEX.

***         Get Gate to Show Status Message
            assign component C_FIELDNAME_RGATE of structure <S_DATA> to <F_FIELD>.
            check <F_FIELD> is assigned.
            move <F_FIELD> to LR_GATE.

***         Check Gate is bound
            check LR_GATE is bound.

***         Create Messge object
            create object LR_MSG.

            LR_MSG = LR_GATE->GET_STATUS_MSG( ).
            LR_MSG->DISPLAY_MSG( ).

          endloop.

        when others.

          SUPER->HANDLE_DOUBLE_CLICK( exporting E_ROW     = E_ROW
                                                E_COLUMN  = E_COLUMN
                                                ES_ROW_NO = ES_ROW_NO ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_SCSTR_GRID     type          ZVCXI_P0SS_S_SCSTR_GRID.
  data:          LR_PR_SCSTR       type ref to   ZCL_VCXI_P0SS_PR_SCSTR,
                 LR_CX_CKX         type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>          type standard table,
                 <S_DATA>          type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW_ID.

        try.
            move-corresponding <S_DATA> to LS_SCSTR_GRID.

            move LS_SCSTR_GRID-R_GATE->R_CLSPR ?to LR_PR_SCSTR.
            check LR_PR_SCSTR is bound.

***         Process Hotspot Click
            case E_COLUMN_ID-FIELDNAME.
              when 'FOVRR_SCSTR'.
                case LS_SCSTR_GRID-FOVRR_SCSTR.
                  when ABAP_TRUE.  move ABAP_FALSE to LS_SCSTR_GRID-FOVRR_SCSTR.
                  when ABAP_FALSE. move ABAP_TRUE  to LS_SCSTR_GRID-FOVRR_SCSTR.
                endcase.

            endcase.

***         Set Values to PR Class
            ME->SET_SCSTR_VIS( IR_PR_SCSTR  = LR_PR_SCSTR
                               IS_SCSTR_VIS = LS_SCSTR_GRID-S_SCSTR_VIS ).

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SCSTR.
        endtry.
      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UCOMM.

  data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
***   Trigger Grid Changes
      ME->CHECK_CHANGED_DATA( ).

***   Do Super
      SUPER->HANDLE_UCOMM( E_UCOMM = E_UCOMM ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.


endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Set Hotspot
  set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

endmethod.
method SET_SCSTR_VIS.

  data:  LF_SCSTR       type ZVCXI_P0SS_SCSTR.
  data:  LS_SCSTR_VIS   type ZVCXI_P0SS_S_SCSTR_VIS.

*** Get Current data to do Update only if Value changed.
  LS_SCSTR_VIS = ME->GET_SCSTR_VIS( IR_PR_SCSTR = IR_PR_SCSTR ).

*** Score Category
  if IS_SCSTR_VIS-CSCOR ne LS_SCSTR_VIS-CSCOR.
    IR_PR_SCSTR->SET_CSCOR( IF_CSCOR = IS_SCSTR_VIS-CSCOR
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Score String
  if IS_SCSTR_VIS-SCSTR_EXT ne LS_SCSTR_VIS-SCSTR_EXT.
*** Do Conversion for ScoreString to External format
    LF_SCSTR = ZCL_VCXI_P0SS_CUST_SCSTR=>CONV_SCSTR_TO_INT( IF_SCSTR_EXT = IS_SCSTR_VIS-SCSTR_EXT ).

    IR_PR_SCSTR->SET_SCSTR( IF_SCSTR = LF_SCSTR
                            IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Override Flag for Score String
  if IS_SCSTR_VIS-FOVRR_SCSTR ne LS_SCSTR_VIS-FOVRR_SCSTR.
    IR_PR_SCSTR->SET_FOVRR_SCSTR( IF_FOVRR = IS_SCSTR_VIS-FOVRR_SCSTR ).
  endif.

endmethod.
