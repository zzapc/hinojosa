
class ZCL_VCXI_XCSR_BL_PSTEP definition
  public
  create public .

public section.

  interfaces /VCXI/IF_VSMR_BL_PSTEP .

  data F_DATE type DATS read-only .
  data F_IPSTP type /VCXI/VSMC_IPSTP read-only .
  data I_IPSEQ type ZVCXI_XCSR_TT_RANGE_IPSEQ read-only .
  data R_PSTEP type ref to /VCXI/CL_VSMC_PSTEP read-only .
  data T_HELPER type ZVCXI_XCSR_TT_HELPER .
  data T_IMFXC_IN type ZVCXI_XCSP_TT_IMFXC .
  data T_IMFXC_OUT type ZVCXI_XCSP_TT_IMFXC .
  data T_NEXTL type ZVCXI_XCSP_TT_NEXTL .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    importing
      !IR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP
    raising
      /VCXI/CX_CKX .
  methods ADD_LIMITS_TO_RTE_PSTEP
    importing
      !IR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP
    raising
      /VCXI/CX_CKX .
  methods ADJ_EVQTY_BY_IMFXC
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
    changing
      !CS_EVQTY type ZVCXI_XCSR_S_EVQTY
    raising
      /VCXI/CX_CKX .
  methods ADJ_FEATURE
    changing
      !CT_FEATURE type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods COMPARE
    importing
      !IR_BL_PSTEP type ref to ZCL_VCXI_XCSR_BL_PSTEP
    returning
      value(RF_SIMILAR) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .
  methods COPY
    returning
      value(RR_BL_PSTEP) type ref to ZCL_VCXI_XCSR_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods DESERIALIZE
    importing
      !IF_XML type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_ARBPL_INFO
    changing
      !CF_ID_GRP type /VCXI/CKX_ID
      !CF_ID_ARBPL type /VCXI/CKX_ID
    raising
      /VCXI/CX_CKX .
  methods GET_IMFXC
    returning
      value(RT_IMFXC_IN) type ZVCXI_XCSP_TT_IMFXC
    raising
      /VCXI/CX_CKX .
  methods GET_MFICF_BY_IMFXC
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
    exporting
      !EF_MFICF type ZVCXI_XCSP_MFICF
      !EF_MFICP type ZVCXI_XCSP_MFICP
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE_ACTVY
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    returning
      value(RT_SPVRE) type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE_ADDON
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ARBPL type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    returning
      value(RT_SPVRE) type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE_MF
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
      !CF_MFI type ABAP_BOOL
      !CF_MFO type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE optional
    raising
      /VCXI/CX_CKX .
  methods RESTORE_ON_UPDATE
    importing
      !IR_BL_PSTEP type ref to ZCL_VCXI_XCSR_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    returning
      value(RF_XML) type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_IQCFT
    importing
      !IF_IATYP type /VCXI/VSMC_IATYP optional
    returning
      value(RT_FEATURE) type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_APPDATA type ref to /VCXI/CL_VKSR_APPDATA .

  methods FILL_SPVRE_ADDON
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_MANU
    raising
      /VCXI/CX_CKX .
  methods INIT_OUTSO
    raising
      /VCXI/CX_CKX .
  methods FILL_IQCFT
    importing
      !IR_SVCRE type ref to /VCXI/CL_VKSR_SPVRE
      !IT_FEATURE type /VCXI/CKI_TT_FEATURE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.

  class-data T_PSTEP type /VCXI/CKX_TT_OBJECT .

  methods INIT_PSTEP
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSR_BL_PSTEP definition
class ZCL_VCXI_XCSR_BL_PSTEP implementation.
  method /VCXI/IF_VSMR_BL_PSTEP~GET_ATYPE.

    check ME->R_PSTEP is bound.
    RT_ATYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_ATYPE~GET_LINKED_ATYPE( ).

  endmethod.
method ADD_ASPECTS_TO_RTE_PSTEP.
endmethod.
method ADD_LIMITS_TO_RTE_PSTEP.

  field-symbols: <S_WERKS>   type line of /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS.

  check ME->R_APPDATA is bound.

*** Filter to Delivery Plant
  append initial line to IR_RTE_PSTEP->I_WERKS assigning <S_WERKS>.
  move 'I'                    to <S_WERKS>-SIGN.
  move 'EQ'                   to <S_WERKS>-OPTION.
  move ME->R_APPDATA->F_WERKS to <S_WERKS>-LOW.

endmethod.
  method ADJ_EVQTY_BY_IMFXC.

    data: LF_MFICF type  ZVCXI_XCSP_MFICF,
          LF_MFICP type  ZVCXI_XCSP_MFICP.


    ME->GET_MFICF_BY_IMFXC( exporting IF_IMFXC = IF_IMFXC
                            importing EF_MFICF = LF_MFICF
                                      EF_MFICP = LF_MFICP ).
    if LF_MFICP ne 0.
      CS_EVQTY-EVQTY = CS_EVQTY-EVQTY * LF_MFICF / LF_MFICP.
    else.
      CS_EVQTY-EVQTY = 0.
    endif.

  endmethod.
  method ADJ_FEATURE.

*** Get stored IQ.catalyst Feature for all add-ons
    loop at ME->GET_IQCFT( ) into data(LS_FEATURE).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = LS_FEATURE
                                        changing  CT_FEATURE = CT_FEATURE ).
    endloop.

  endmethod.
method CLASS_CONSTRUCTOR.

  data: LR_MACHCUST   type ref to /VCXI/CL_VSMC_MACHCUST.

  try.
***   Get Machine Customizing Instance
      LR_MACHCUST = /VCXI/CL_VSMC_MACHCUST=>GET_INSTANCE( ).

***   Get all Production Steps
      ZCL_VCXI_XCSR_BL_PSTEP=>T_PSTEP = LR_MACHCUST->GET_REGISTERED_OBJECT( IF_TOOBJ = /VCXI/CL_VSMC_PSTEP=>C_TOOBJ_PSTEP ).

    catch /VCXI/CX_CKX.
***   Ignore Error
      clear ZCL_VCXI_XCSR_BL_PSTEP=>T_PSTEP.
  endtry.

endmethod.
method COMPARE.

  data:  LF_CLSNA_ME     type        STRING,
         LF_CLSNA_OTHER  type        STRING.
  data:  LR_CLASSDESCR   type ref to CL_ABAP_CLASSDESCR,
         LR_MANU_ME      type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_MANU_OTHER   type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_OUTSO_ME     type ref to ZIF_VCXI_XCSR_BL_OUTSO,
         LR_OUTSO_OTHER  type ref to ZIF_VCXI_XCSR_BL_OUTSO.

***--------------------------------------------------------------------------------------
*** Compare Class Types
  LR_CLASSDESCR ?= CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = ME ).
  move LR_CLASSDESCR->GET_RELATIVE_NAME( ) to LF_CLSNA_ME.

  LR_CLASSDESCR ?= CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = IR_BL_PSTEP ).
  move LR_CLASSDESCR->GET_RELATIVE_NAME( ) to LF_CLSNA_OTHER.

  if LF_CLSNA_ME eq LF_CLSNA_OTHER.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.


***--------------------------------------------------------------------------------------
*** Compare Basic Data
  if ME->R_PSTEP   eq IR_BL_PSTEP->R_PSTEP and
     ME->F_IPSTP   eq IR_BL_PSTEP->F_IPSTP and
     ME->I_IPSEQ   eq IR_BL_PSTEP->I_IPSEQ and
     ME->F_DATE    eq IR_BL_PSTEP->F_DATE  and
     ME->T_HELPER  eq IR_BL_PSTEP->T_HELPER.
    move ABAP_TRUE  to RF_SIMILAR.
  else.
    move ABAP_FALSE to RF_SIMILAR.
    exit.
  endif.


***--------------------------------------------------------------------------------------
*** Compare Manual Operation if available
  try.
      move ME          ?to LR_MANU_ME.
      move IR_BL_PSTEP ?to LR_MANU_OTHER.

      if LR_MANU_ME    is bound and
         LR_MANU_OTHER is bound.
        if LR_MANU_ME->F_MANWC eq LR_MANU_OTHER->F_MANWC and
           LR_MANU_ME->F_TEXT  eq LR_MANU_OTHER->F_TEXT  and
           LR_MANU_ME->S_MSRS  eq LR_MANU_OTHER->S_MSRS  and
           LR_MANU_ME->S_SCRAP eq LR_MANU_OTHER->S_SCRAP.
          move ABAP_TRUE  to RF_SIMILAR.
        else.
          move ABAP_FALSE to RF_SIMILAR.
          exit.
        endif.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.


***--------------------------------------------------------------------------------------
*** Compare Outsourcing if available
  try.
      move ME          ?to LR_OUTSO_ME.
      move IR_BL_PSTEP ?to LR_OUTSO_OTHER.

      if LR_OUTSO_ME    is bound and
         LR_OUTSO_OTHER is bound.
        if LR_OUTSO_ME->F_OUTSO  eq LR_OUTSO_OTHER->F_OUTSO and
           LR_OUTSO_ME->F_TEXT   eq LR_OUTSO_OTHER->F_TEXT  and
           LR_OUTSO_ME->S_SCRAP  eq LR_OUTSO_OTHER->S_SCRAP and
           LR_OUTSO_ME->F_LIFNR  eq LR_OUTSO_OTHER->F_LIFNR and
           LR_OUTSO_ME->S_PRICE  eq LR_OUTSO_OTHER->S_PRICE and
           LR_OUTSO_ME->S_PRICP  eq LR_OUTSO_OTHER->S_PRICP and
           LR_OUTSO_ME->T_PSCALE eq LR_OUTSO_OTHER->T_PSCALE.
          move ABAP_TRUE  to RF_SIMILAR.
        else.
          move ABAP_FALSE to RF_SIMILAR.
          exit.
        endif.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

endmethod.
method CONSTRUCTOR.

  move IF_DATE    to ME->F_DATE.
  move IR_APPDATA to ME->R_APPDATA.

***------------------------------------------------------------------
*** Get Production Step by ID
  move IF_IPSTP to ME->F_IPSTP.
  ME->INIT_PSTEP( ).

endmethod.
method COPY.

  data:  LF_CLSNA      type        STRING.
  data:  LR_CLASSDESCR type ref to CL_ABAP_CLASSDESCR,
         LR_MANU_ME    type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_MANU_NEW   type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_OUTSO_ME   type ref to ZIF_VCXI_XCSR_BL_OUTSO,
         LR_OUTSO_NEW  type ref to ZIF_VCXI_XCSR_BL_OUTSO.

***--------------------------------------------------------------------------------------
*** Create new Instance of same Subclass
  LR_CLASSDESCR ?= CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = ME ).
  move LR_CLASSDESCR->GET_RELATIVE_NAME( ) to LF_CLSNA.

  create object RR_BL_PSTEP
    type
      (LF_CLSNA)
    exporting
      IF_IPSTP   = ME->F_IPSTP
      IF_DATE    = ME->F_DATE
      IR_APPDATA = ME->R_APPDATA.

***--------------------------------------------------------------------------------------
*** Copy Production Sequence ID Filter
  move ME->I_IPSEQ  to RR_BL_PSTEP->I_IPSEQ.

*** Copy Helper
  move ME->T_HELPER to RR_BL_PSTEP->T_HELPER.

***--------------------------------------------------------------------------------------
*** Copy Manual Operation if available
  try.
      move ME          ?to LR_MANU_ME.
      move RR_BL_PSTEP ?to LR_MANU_NEW.

      if LR_MANU_ME  is bound and
         LR_MANU_NEW is bound.
        move LR_MANU_ME->F_MANWC to LR_MANU_NEW->F_MANWC.
        move LR_MANU_ME->F_TEXT  to LR_MANU_NEW->F_TEXT.
        move LR_MANU_ME->S_MSRS  to LR_MANU_NEW->S_MSRS.
        move LR_MANU_ME->S_SCRAP to LR_MANU_NEW->S_SCRAP.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

***--------------------------------------------------------------------------------------
*** Copy Outsourcing if available
  try.
      move ME          ?to LR_OUTSO_ME.
      move RR_BL_PSTEP ?to LR_OUTSO_NEW.

      if LR_OUTSO_ME  is bound and
         LR_OUTSO_NEW is bound.
        move LR_OUTSO_ME->F_OUTSO  to LR_OUTSO_NEW->F_OUTSO.
        move LR_OUTSO_ME->F_TEXT   to LR_OUTSO_NEW->F_TEXT.
        move LR_OUTSO_ME->S_SCRAP  to LR_OUTSO_NEW->S_SCRAP.
        move LR_OUTSO_ME->F_LIFNR  to LR_OUTSO_NEW->F_LIFNR.
        move LR_OUTSO_ME->S_PRICE  to LR_OUTSO_NEW->S_PRICE.
        move LR_OUTSO_ME->S_PRICP  to LR_OUTSO_NEW->S_PRICP.
        move LR_OUTSO_ME->T_PSCALE to LR_OUTSO_NEW->T_PSCALE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

endmethod.
method DESERIALIZE.

  data:  LF_MANU_MANWC    type        ZVCXI_XCSR_MANWC,
         LF_MANU_TEXT     type        TEXT30,
         LF_OUTSO_OUTSO   type        ZVCXI_XCSR_OUTSO,
         LF_OUTSO_TEXT    type        TEXT30,
         LF_OUTSO_LIFNR   type        LIFNR.
  data:  LS_MANU_MSRS     type        /VCXI/VSM_S_MSRS,
         LS_MANU_SCRAP    type        ZVCXI_XCSP_S_SCRAP,
         LS_OUTSO_SCRAP   type        ZVCXI_XCSP_S_SCRAP,
         LS_OUTSO_PRICE   type        ZVCXI_XCS_S_PRICE,
         LS_OUTSO_PRICP   type        ZVCXI_XCS_S_PRICP.
  data:  LT_OUTSO_PSCALE  type        ZVCXI_XCSR_TT_PSCALE.
  data:  LR_MANU          type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_OUTSO         type ref to ZIF_VCXI_XCSR_BL_OUTSO.

  check IF_XML is not initial.

***--------------------------------------------------------------------------------------
*** Deserialize
  call transformation id
       source XML IF_XML
       result I_IPSEQ        = ME->I_IPSEQ
              T_HELPER       = ME->T_HELPER

              F_MANU_MANWC   = LF_MANU_MANWC
              F_MANU_TEXT    = LF_MANU_TEXT
              S_MANU_MSRS    = LS_MANU_MSRS
              S_MANU_SCRAP   = LS_MANU_SCRAP

              F_OUTSO_OUTSO  = LF_OUTSO_OUTSO
              F_OUTSO_TEXT   = LF_OUTSO_TEXT
              S_OUTSO_SCRAP  = LS_OUTSO_SCRAP
              F_OUTSO_LIFNR  = LF_OUTSO_LIFNR
              S_OUTSO_PRICE  = LS_OUTSO_PRICE
              S_OUTSO_PRICP  = LS_OUTSO_PRICP
              T_OUTSO_PSCALE = LT_OUTSO_PSCALE.

***--------------------------------------------------------------------------------------
*** Set Manual Operation if available
  try.
      move ME ?to LR_MANU.

      if LR_MANU is bound.
        move LF_MANU_MANWC to LR_MANU->F_MANWC.
        move LF_MANU_TEXT  to LR_MANU->F_TEXT.
        move LS_MANU_MSRS  to LR_MANU->S_MSRS.
        move LS_MANU_SCRAP to LR_MANU->S_SCRAP.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

***--------------------------------------------------------------------------------------
*** Set Outsourcing if available
  try.
      move ME ?to LR_OUTSO.

      if LR_OUTSO is bound.
        move LF_OUTSO_OUTSO  to LR_OUTSO->F_OUTSO.
        move LF_OUTSO_TEXT   to LR_OUTSO->F_TEXT.
        move LS_OUTSO_SCRAP  to LR_OUTSO->S_SCRAP.
        move LF_OUTSO_LIFNR  to LR_OUTSO->F_LIFNR.
        move LS_OUTSO_PRICE  to LR_OUTSO->S_PRICE.
        move LS_OUTSO_PRICP  to LR_OUTSO->S_PRICP.
        move LT_OUTSO_PSCALE to LR_OUTSO->T_PSCALE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

endmethod.
  method FILL_IQCFT.

    data: LF_STRNG  type /VCXI/CKX_STRING.


    check IT_FEATURE is not initial.

    call transformation ID
         source T_FEATURE = IT_FEATURE
         result xml LF_STRNG.

    IR_SVCRE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_ADDON=>C_PARID_IQCFT
                                             PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_STRG
                                             STRNG = LF_STRNG
                                             SETBY = IF_SETBY ) ).

  endmethod.
  method FILL_SPVRE_ADDON.

*** Set Stored Feature
    ME->FILL_IQCFT( IR_SVCRE   = IR_SPVRE_ADDON
                    IT_FEATURE = ME->GET_IQCFT( IF_IATYP = IR_SPVRE_ADDON->GET_ID( ) ) ).

  endmethod.
method GET_ARBPL_INFO.
endmethod.
  method GET_IMFXC. "#EC NEEDED

*** Define x-Connection IDs that are specifically consumed by PStep

  endmethod.
  method GET_IQCFT.
  endmethod.
  method GET_MFICF_BY_IMFXC.

*** Default
    EF_MFICF = 1.
    EF_MFICP = 1.

  endmethod.
method GET_SPVRE_ACTVY.

*** Will be redefined

endmethod.
method GET_SPVRE_ADDON.

  data: LF_ID          type        /VCXI/CKX_ID.
  data: LR_ATYPE       type ref to /VCXI/CL_VSMC_ATYPE,
        LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
        LR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE,
        LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.

***----------------------------------------------------------------------------
*** Add Add-ons
  loop at ME->/VCXI/IF_VSMR_BL_PSTEP~GET_ATYPE( ) into LR_OBJECT.
    move LR_OBJECT ?to LR_ATYPE.

*** Get Customizing Element for Add-on
    move LR_ATYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = LF_ID
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ADDON
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ADDON to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ADDON->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Fill Supervised Runtime Element of Add-on
    ME->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_ADDON = LR_SPVRE_ADDON
                                    IR_ARBPL       = IR_ARBPL
                          changing  CT_SPVRE       = RT_SPVRE ).
  endloop.

endmethod.
method GET_SPVRE_MF.
endmethod.
method INIT_BY_SPEC.
endmethod.
method INIT_MANU.

  data:  LF_GUID       type        /VCXI/CKX_GUID.
  data:  LR_MANU       type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_PARAM      type ref to /VCXI/CL_VKSC_PARAM.

***--------------------------------------------------------------------------------------
  try.
      move ME ?to LR_MANU.
      check LR_MANU is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

***--------------------------------------------------------------------------------------
*** Initialize Machine Run Speed Rate Unit
  move LR_MANU->F_PARID_MSRSR to LF_GUID.
  LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  move LR_PARAM->F_UOMKY_M to LR_MANU->S_MSRS-MSRSR_UOM.

*** Initialize Machine Run Speed Time Unit
  move ZCL_VCXI_XCSP_PR_MANU=>C_PARID_MSRST to LF_GUID.
  LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  move LR_PARAM->F_UOMKY_M to LR_MANU->S_MSRS-MSRST_UOM.

*** Initialize Scrap Unit
  move ZCL_VCXI_XCSP_PR_MANU=>C_PARID_MSRWF to LF_GUID.
  LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  move LR_PARAM->F_UOMKY_M to LR_MANU->S_SCRAP-SCRAP_UOM.

endmethod.
method INIT_OUTSO.

  data: LF_BUKRS type BUKRS,
        LF_GUID  type /VCXI/CKX_GUID.
  data: LS_T001  type T001.
  data: LR_OUTSO type ref to ZIF_VCXI_XCSR_BL_OUTSO,
        LR_PARAM type ref to /VCXI/CL_VKSC_PARAM.

***--------------------------------------------------------------------------------------
  try.
      move ME ?to LR_OUTSO.
      check LR_OUTSO is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

***--------------------------------------------------------------------------------------
*** Initialize Price Currency
  if ME->R_APPDATA is bound.
*** Get the Company Code
    call function 'CO_RM_COMPANYCODE_FIND'
      exporting
        WERKS    = ME->R_APPDATA->F_WERKS
      importing
        COMPCODE = LF_BUKRS
      exceptions
        NO_ENTRY = 1
        others   = 2.

*** Get Currency Key by Company Code
    if SY-SUBRC eq 0.
***   Get Company Code Data
      call function 'FI_COMPANY_CODE_DATA'
        exporting
          I_BUKRS      = LF_BUKRS
        importing
          E_T001       = LS_T001
        exceptions
          SYSTEM_ERROR = 1.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      LR_OUTSO->S_PRICE-PRICE_CURR = LS_T001-WAERS.
    endif.
  endif.

*** Initialize Price Per Unit
  move LR_OUTSO->F_PARID_PRICP to LF_GUID.
  LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  move LR_PARAM->F_UOMKY_M to LR_OUTSO->S_PRICP-PRICP_UOM.

*** Initialize Scrap Unit
  move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_SCRAP to LF_GUID.
  LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
  move LR_PARAM->F_UOMKY_M to LR_OUTSO->S_SCRAP-SCRAP_UOM.

endmethod.
method INIT_PSTEP.

  data: LT_OBJECT     type        /VCXI/CKX_TT_OBJECT.
  data: LR_MACHCUST   type ref to /VCXI/CL_VSMC_MACHCUST,
        LR_OBJECT     type ref to /VCXI/IF_CKX_OBJECT.

*** Get all Production Steps
  if ZCL_VCXI_XCSR_BL_PSTEP=>T_PSTEP is not initial.
    move ZCL_VCXI_XCSR_BL_PSTEP=>T_PSTEP to LT_OBJECT.
  else.
*** Try to get them again to receive possible Error Message
    LR_MACHCUST = /VCXI/CL_VSMC_MACHCUST=>GET_INSTANCE( ).
    LT_OBJECT = LR_MACHCUST->GET_REGISTERED_OBJECT( IF_TOOBJ = /VCXI/CL_VSMC_PSTEP=>C_TOOBJ_PSTEP ).
  endif.

*** Find Match by ID
  loop at LT_OBJECT into LR_OBJECT.
    check LR_OBJECT->GET_ID( ) eq ME->F_IPSTP.
    try.
        move LR_OBJECT ?to ME->R_PSTEP.
        exit.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

  if ME->R_PSTEP is not bound.
*** Production Step & not found. (Check Machine Customizing)
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCSR'
                                          IF_MSGNO = '101'
                                          IF_MSGV1 = ME->F_IPSTP ).
  endif.

endmethod.
method RESTORE_ON_UPDATE.

  data:  LR_MANU_ME    type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_MANU_OLD   type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_OUTSO_ME   type ref to ZIF_VCXI_XCSR_BL_OUTSO,
         LR_OUTSO_OLD  type ref to ZIF_VCXI_XCSR_BL_OUTSO.

  check IR_BL_PSTEP is bound.

***--------------------------------------------------------------------------------------
*** Restore Helper
  move IR_BL_PSTEP->T_HELPER to ME->T_HELPER.

***--------------------------------------------------------------------------------------
*** Restore Manual Operation if available
  try.
      move IR_BL_PSTEP ?to LR_MANU_OLD.
      move ME          ?to LR_MANU_ME.

      if LR_MANU_OLD  is bound and
         LR_MANU_ME   is bound.
        move LR_MANU_OLD->F_MANWC to LR_MANU_ME->F_MANWC.
        move LR_MANU_OLD->F_TEXT  to LR_MANU_ME->F_TEXT.
        move LR_MANU_OLD->S_MSRS  to LR_MANU_ME->S_MSRS.
        move LR_MANU_OLD->S_SCRAP to LR_MANU_ME->S_SCRAP.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

***--------------------------------------------------------------------------------------
*** Restore Outsourcing if available
  try.
      move IR_BL_PSTEP ?to LR_OUTSO_OLD.
      move ME          ?to LR_OUTSO_ME.

      if LR_OUTSO_OLD is bound and
         LR_OUTSO_ME  is bound.
        move LR_OUTSO_OLD->F_OUTSO  to LR_OUTSO_ME->F_OUTSO.
        move LR_OUTSO_OLD->F_TEXT   to LR_OUTSO_ME->F_TEXT.
        move LR_OUTSO_OLD->S_SCRAP  to LR_OUTSO_ME->S_SCRAP.
        move LR_OUTSO_OLD->F_LIFNR  to LR_OUTSO_ME->F_LIFNR.
        move LR_OUTSO_OLD->S_PRICE  to LR_OUTSO_ME->S_PRICE.
        move LR_OUTSO_OLD->S_PRICP  to LR_OUTSO_ME->S_PRICP.
        move LR_OUTSO_OLD->T_PSCALE to LR_OUTSO_ME->T_PSCALE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

endmethod.
method SERIALIZE.

  data:  LF_MANU_MANWC    type        ZVCXI_XCSR_MANWC,
         LF_MANU_TEXT     type        TEXT30,
         LF_OUTSO_OUTSO   type        ZVCXI_XCSR_OUTSO,
         LF_OUTSO_TEXT    type        TEXT30,
         LF_OUTSO_LIFNR   type        LIFNR.
  data:  LS_MANU_MSRS     type        /VCXI/VSM_S_MSRS,
         LS_MANU_SCRAP    type        ZVCXI_XCSP_S_SCRAP,
         LS_OUTSO_SCRAP   type        ZVCXI_XCSP_S_SCRAP,
         LS_OUTSO_PRICE   type        ZVCXI_XCS_S_PRICE,
         LS_OUTSO_PRICP   type        ZVCXI_XCS_S_PRICP.
  data:  LT_OUTSO_PSCALE  type        ZVCXI_XCSR_TT_PSCALE.
  data:  LR_MANU          type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_OUTSO         type ref to ZIF_VCXI_XCSR_BL_OUTSO.

***--------------------------------------------------------------------------------------
*** Get Manual Operation if available
  try.
      move ME ?to LR_MANU.

      if LR_MANU is bound.
        move LR_MANU->F_MANWC to LF_MANU_MANWC.
        move LR_MANU->F_TEXT  to LF_MANU_TEXT.
        move LR_MANU->S_MSRS  to LS_MANU_MSRS.
        move LR_MANU->S_SCRAP to LS_MANU_SCRAP.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.

***--------------------------------------------------------------------------------------
*** Get Outsourcing if available
  try.
      move ME ?to LR_OUTSO.

      if LR_OUTSO is bound.
        move LR_OUTSO->F_OUTSO  to LF_OUTSO_OUTSO.
        move LR_OUTSO->F_TEXT   to LF_OUTSO_TEXT.
        move LR_OUTSO->S_SCRAP  to LS_OUTSO_SCRAP.
        move LR_OUTSO->F_LIFNR  to LF_OUTSO_LIFNR.
        move LR_OUTSO->S_PRICE  to LS_OUTSO_PRICE.
        move LR_OUTSO->S_PRICP  to LS_OUTSO_PRICP.
        move LR_OUTSO->T_PSCALE to LT_OUTSO_PSCALE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
  endtry.


***--------------------------------------------------------------------------------------
*** Serialize
  call transformation id
       source I_IPSEQ        = ME->I_IPSEQ
              T_HELPER       = ME->T_HELPER

              F_MANU_MANWC   = LF_MANU_MANWC
              F_MANU_TEXT    = LF_MANU_TEXT
              S_MANU_MSRS    = LS_MANU_MSRS
              S_MANU_SCRAP   = LS_MANU_SCRAP

              F_OUTSO_OUTSO  = LF_OUTSO_OUTSO
              F_OUTSO_TEXT   = LF_OUTSO_TEXT
              S_OUTSO_SCRAP  = LS_OUTSO_SCRAP
              F_OUTSO_LIFNR  = LF_OUTSO_LIFNR
              S_OUTSO_PRICE  = LS_OUTSO_PRICE
              S_OUTSO_PRICP  = LS_OUTSO_PRICP
              T_OUTSO_PSCALE = LT_OUTSO_PSCALE

       result XML RF_XML.

endmethod.
