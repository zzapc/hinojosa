
class ZCL_VCXI_XCSS_UI_TINFO definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_TINFO_VIS type ZVCXI_XCSS_S_TINFO_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_VIS type ANY
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
protected section.

  data R_PR_TINFO type ref to ZCL_VCXI_XCSS_PR_TINFO .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSS_UI_TINFO definition
class ZCL_VCXI_XCSS_UI_TINFO implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_XCSS_UI_TINFO_BIND'
      exporting
        IR_UI_TINFO = ME
      importing
        ES_DYNP     = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_TINFO.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.


    SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                             IF_DYNNR = IF_DYNNR ).

    try.
        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Hide Fields in case of One-Time Usage Tool
          if SCREEN-GROUP1 = 'OTU' and
             ME->S_TINFO_VIS-FOTUT eq ABAP_TRUE.
            move 0 to SCREEN-ACTIVE.
          endif.

***       Hide Fields in case of External Tool
          if SCREEN-GROUP1 = 'EXT' and
             ME->S_TINFO_VIS-FEXTT eq ABAP_TRUE.
            move 0 to SCREEN-ACTIVE.
          endif.

          if SCREEN-GROUP2 = 'MRK' and
             ME->S_TINFO_VIS-TPRCE_FOVRR eq ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
          if SCREEN-GROUP2 = 'PRC' and
             ME->S_TINFO_VIS-TPRCE_FOVRR ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Initialize VIS
    ME->INIT_VIS( ).

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_TINFO_VIS type ZVCXI_XCSS_S_TINFO_VIS.


*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_TINFO_VIS.

***--------------------------------------------------------------------------------------
*** Tool Lifetime
    if ME->S_TINFO_VIS-S_TLTIM ne LS_TINFO_VIS-S_TLTIM.
      ME->R_PR_TINFO->SET_TLTIM( IS_TLTIM = LS_TINFO_VIS-S_TLTIM
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** One-Time Usage Tool Flag
    if ME->S_TINFO_VIS-FOTUT ne LS_TINFO_VIS-FOTUT.
      ME->R_PR_TINFO->SET_FOTUT( IF_FOTUT = LS_TINFO_VIS-FOTUT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** External Tool Flag
    if ME->S_TINFO_VIS-FEXTT ne LS_TINFO_VIS-FEXTT.
      ME->R_PR_TINFO->SET_FEXTT( IF_FEXTT = LS_TINFO_VIS-FEXTT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Estimated Tool Costs
    if ME->S_TINFO_VIS-S_TCEST ne LS_TINFO_VIS-S_TCEST.
      ME->R_PR_TINFO->SET_TCEST( IS_TCEST = LS_TINFO_VIS-S_TCEST
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Markup
    if ME->S_TINFO_VIS-S_MRKUP ne LS_TINFO_VIS-S_MRKUP.
      ME->R_PR_TINFO->SET_MRKUP( IS_MRKUP = LS_TINFO_VIS-S_MRKUP
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Tool Price if it is "Overriden"
    if ME->S_TINFO_VIS-TPRCE_FOVRR eq ABAP_TRUE and
       ME->S_TINFO_VIS-S_TPRCE ne LS_TINFO_VIS-S_TPRCE.
      ME->R_PR_TINFO->SET_TPRCE( IS_TPRCE = LS_TINFO_VIS-S_TPRCE
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
*** Set Flag Override Tool Price
    if ME->S_TINFO_VIS-TPRCE_FOVRR ne LS_TINFO_VIS-TPRCE_FOVRR.
      ME->R_PR_TINFO->SET_TPRCE( IF_FOVRR = LS_TINFO_VIS-TPRCE_FOVRR ).
    endif.

*** Tool Costs covered by Customer
    if ME->S_TINFO_VIS-S_TCCBC ne LS_TINFO_VIS-S_TCCBC.
      ME->R_PR_TINFO->SET_TCCBC( IS_TCCBC = LS_TINFO_VIS-S_TCCBC
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Vendor
    if ME->S_TINFO_VIS-LIFNR ne LS_TINFO_VIS-LIFNR.
      ME->R_PR_TINFO->SET_LIFNR( IF_LIFNR = LS_TINFO_VIS-LIFNR
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method INIT_VIS.

   free: ME->S_TINFO_VIS.

*** Desription by Tool User
    ME->R_PR_TINFO->GET_PRVDR_TUSER( importing EF_DESCR = ME->S_TINFO_VIS-DESCR ).

*** Tool Lifetime
    ME->S_TINFO_VIS-S_TLTIM = ME->R_PR_TINFO->GET_TLTIM( ).

*** One-Time Usage Tool Flag
    ME->S_TINFO_VIS-FOTUT   = ME->R_PR_TINFO->GET_FOTUT( ).

*** External Tool Flag
    ME->S_TINFO_VIS-FEXTT   = ME->R_PR_TINFO->GET_FEXTT( ).

*** Estimated Tool Costs
    ME->S_TINFO_VIS-S_TCEST = ME->R_PR_TINFO->GET_TCEST( importing ES_TCEST_LOCAL = ME->S_TINFO_VIS-S_TCEST_LOCAL ).

*** Markup
    ME->S_TINFO_VIS-S_MRKUP = ME->R_PR_TINFO->GET_MRKUP( ).

*** Tool Price
    ME->S_TINFO_VIS-S_TPRCE = ME->R_PR_TINFO->GET_TPRCE( importing EF_FOVRR       = ME->S_TINFO_VIS-TPRCE_FOVRR
                                                                   ES_TPRCE_LOCAL = ME->S_TINFO_VIS-S_TPRCE_LOCAL ).

*** Tool Costs covered by Customer
    ME->S_TINFO_VIS-S_TCCBC = ME->R_PR_TINFO->GET_TCCBC( ).

*** Internal Tool Costs
    ME->S_TINFO_VIS-S_TCINT = ME->R_PR_TINFO->GET_TCINT( ).

*** Vendor
    ME->S_TINFO_VIS-LIFNR   = ME->R_PR_TINFO->GET_LIFNR( importing EF_DESCR = ME->S_TINFO_VIS-LIFNR_DESCR ).

  endmethod.
