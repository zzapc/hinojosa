
class ZCL_VCXI_FBSS_UI_MS_HPART_P definition
  public
  inheriting from ZCL_VCXI_F0S_UI_TAB
  create public .

public section.

  constants C_PURCH type SYUCOMM value 'PURCH' ##NO_TEXT.
  data S_MS_HPART_P_VIS type ZVCXI_FBSS_S_MS_HPART_P_VIS read-only .
  constants C_DYNNR_PSCALE type DYNNR value '0110' ##NO_TEXT.
  constants C_DYNNR_BLANK type DYNNR value '9999' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_F0S_TABPT default '0100S_BP_TAB-TAB'
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_OUTPUT_VIS
    importing
      !IS_MS_HPART_P_VIS type ZVCXI_FBSS_S_MS_HPART_P_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
  methods GET_REGISTERED_UI_INFO
    redefinition .
protected section.

  data R_GRID_PSCALE type ref to ZCL_VCXI_XCS_GRID_PSCALE .
  data R_PR_MS_HPART_P type ref to ZCL_VCXI_FBSS_PR_MS_HPART_P .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods TOGGLE_PURCH
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_MS_HPART_P definition
class ZCL_VCXI_FBSS_UI_MS_HPART_P implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_MS_HPART_P_BIND'
      exporting
        IR_UI_MS_HPART_P = ME
      importing
        ES_DYNP          = ME->S_DYNP
        EF_ACTIVE_TAB    = ME->F_ACTIVE_TAB.

*** Create Grid for Price Scale
    create object ME->R_GRID_PSCALE
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0110CC_PSCALE'.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE
                        IF_TABPT  = IF_TABPT ).
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_MS_HPART_P.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Free Price Scale
    if ME->R_GRID_PSCALE is bound.
      ME->R_GRID_PSCALE->DO_FREE( ).
      clear ME->R_GRID_PSCALE.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.

          if LF_LOCKED eq ABAP_TRUE or
             LF_INUSE  eq ABAP_TRUE.

***         If No Dummy Material, then set to read only
            if ME->R_PR_MS_HPART_P->IS_DUMMY( ) eq ABAP_FALSE.
              if SCREEN-GROUP1    eq 'DUM'.
                move 0 to SCREEN-INPUT.
              endif.

****        if Dummy Material set the Purchased Flag
            elseif SCREEN-GROUP1  eq 'PUR'.
              move 0 to SCREEN-INPUT.
            endif.

***         Hide Purchasing Infos (e.g Vendor) if not purchased
            if ME->S_MS_HPART_P_VIS-PURCH eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK and
               SCREEN-GROUP2              eq 'APU'.  "Active Purchasing
              move 1 to SCREEN-INVISIBLE.
              move 0 to SCREEN-ACTIVE.
            endif.

          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.

        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    SUPER->DO_PBO( ).

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Refresh Grid
    if ME->R_GRID_PSCALE is bound.
      if ME->R_GRID_PSCALE->F_REFRESH_REQ eq ABAP_FALSE.
        move ABAP_TRUE to ME->R_GRID_PSCALE->F_REFRESH_REQ.
      endif.
      ME->R_GRID_PSCALE->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_OUTPUT_VIS.

    data: LF_MAKTX type MAKTX.

    check ME->R_PR_MS_HPART_P is bound.

***--------------------------------------------------------------------------------------
*** Set Material Number
    if ME->S_MS_HPART_P_VIS-MATNR ne IS_MS_HPART_P_VIS-MATNR.
      ME->R_PR_MS_HPART_P->SET_MATNR( IF_MATNR = IS_MS_HPART_P_VIS-MATNR
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Material description
    if ME->S_MS_HPART_P_VIS-MATNR_DESCR ne IS_MS_HPART_P_VIS-MATNR_DESCR.
      LF_MAKTX = IS_MS_HPART_P_VIS-MATNR_DESCR.
      ME->R_PR_MS_HPART_P->SET_MAKTX( IF_MAKTX = LF_MAKTX
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Procurement Option
    if ME->S_MS_HPART_P_VIS-PURCH ne IS_MS_HPART_P_VIS-PURCH.
      ME->R_PR_MS_HPART_P->SET_PURCH( IF_PURCH = IS_MS_HPART_P_VIS-PURCH
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Vendor
    if ME->S_MS_HPART_P_VIS-LIFNR ne IS_MS_HPART_P_VIS-LIFNR.
      ME->R_PR_MS_HPART_P->SET_LIFNR( IF_LIFNR = IS_MS_HPART_P_VIS-LIFNR
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Handle Part Type
    if ME->S_MS_HPART_P_VIS-TPHND ne IS_MS_HPART_P_VIS-TPHND.
      ME->R_PR_MS_HPART_P->SET_TPHND( IF_TPHND = IS_MS_HPART_P_VIS-TPHND
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Handle Part Factor
    if ME->S_MS_HPART_P_VIS-HPFCT ne IS_MS_HPART_P_VIS-HPFCT.
      ME->R_PR_MS_HPART_P->SET_HPFCT( IF_HPFCT = IS_MS_HPART_P_VIS-HPFCT
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Handle Part Weight
    if ME->S_MS_HPART_P_VIS-HPWGT ne IS_MS_HPART_P_VIS-HPWGT.
      ME->R_PR_MS_HPART_P->SET_HPWGT( IS_HPWGT = IS_MS_HPART_P_VIS-S_HPWGT
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    if ME->R_GRID_PSCALE is bound.
      ME->R_GRID_PSCALE->CHECK_CHANGED_DATA( ).
    endif.

    case IF_UCOMM.

      when C_PURCH.
        ME->TOGGLE_PURCH( ).

    endcase.

  endmethod.
  method GET_REGISTERED_UI_INFO.

*** Display Blank subscreen if no Price Scale should be shown
    if R_PR_MS_HPART_P->GET_PURCH( ) ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
      move ME->C_DYNNR_BLANK to  RS_DYNP-DYNNR.
    else.
      move ME->C_DYNNR_PSCALE to RS_DYNP-DYNNR.
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_MS_HPART_P.

  endmethod.
  method INIT_VIS.

    free: ME->S_MS_HPART_P_VIS.
    check ME->R_PR_MS_HPART_P is bound.

*** Material
    ME->R_PR_MS_HPART_P->GET_MATNR( receiving RF_MATNR = ME->S_MS_HPART_P_VIS-MATNR ).

*** Material Description
    ME->R_PR_MS_HPART_P->GET_MATNR_DESCR( receiving RF_DESCR = ME->S_MS_HPART_P_VIS-MATNR_DESCR ).

*** Procurement Option
    ME->R_PR_MS_HPART_P->GET_PURCH( receiving RF_PURCH = ME->S_MS_HPART_P_VIS-PURCH ).

*** Vendor
    ME->R_PR_MS_HPART_P->GET_LIFNR( receiving RF_LIFNR = ME->S_MS_HPART_P_VIS-LIFNR ).

*** Handle Part Type
    ME->R_PR_MS_HPART_P->GET_TPHND( importing EF_TPHND = ME->S_MS_HPART_P_VIS-TPHND ).

*** Handle Part Factor
    ME->R_PR_MS_HPART_P->GET_HPFCT( importing EF_HPFCT = ME->S_MS_HPART_P_VIS-HPFCT ).

*** Handle Part Weight
    ME->R_PR_MS_HPART_P->GET_HPWGT( importing ES_HPWGT = ME->S_MS_HPART_P_VIS-S_HPWGT ).

  endmethod.
  method TOGGLE_PURCH.

    data:  LF_PURCH type FLAG.

*** Toggle Purchased flag depending on old value
    if ME->S_MS_HPART_P_VIS-PURCH eq ABAP_TRUE.
      move ABAP_FALSE to LF_PURCH.
    else.
      move ABAP_TRUE to LF_PURCH.
    endif.

*** Set Purchased Flag
    ME->R_PR_MS_HPART_P->SET_PURCH( IF_PURCH = LF_PURCH
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
