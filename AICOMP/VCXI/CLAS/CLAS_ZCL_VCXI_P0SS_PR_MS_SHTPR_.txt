
class ZCL_VCXI_P0SS_PR_MS_SHTPR definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_CALIP .
  interfaces ZIF_VCXI_P0SS_PRALLOC .
  interfaces ZIF_VCXI_P0SS_WEIGHT .
  interfaces ZIF_VCXI_XCS_PSCALE_MGR .

  aliases C_IEVNT_O_WDRYW_CHANGED
    for ZIF_VCXI_P0SS_WEIGHT~C_IEVNT_O_WDRYW_CHANGED .
  aliases C_IEVNT_O_WWETW_CHANGED
    for ZIF_VCXI_P0SS_WEIGHT~C_IEVNT_O_WWETW_CHANGED .

  constants C_IPRVT_P0_MS_SHTPR type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_MS_SHTPR' ##NO_TEXT.
  data R_CUST_P0_SHTPR type ref to ZCL_VCXI_P0SS_CUST_SHTPR read-only .

  methods SET_PRDET
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_PRDET type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods SET_PRDEO
    importing
      !IF_PRDEO type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods SET_PRDEI
    importing
      !IF_PRDEI type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods IS_PRINT_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRDET
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RF_PRDET) type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods GET_PRDEO
    returning
      value(RF_PRDEO) type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods GET_PRDEI
    returning
      value(RF_PRDEI) type ZVCXI_P0SS_PRDET
    raising
      /VCXI/CX_CKX .
  methods GET_KAUSF
    importing
      !IS_EVQTY type ZVCXI_XCSR_S_EVQTY
    returning
      value(RS_KAUSF) type ZVCXI_XCSP_S_KAUSF
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGP
    returning
      value(RS_BAWGP) type ZVCXI_P0S_S_BAWGP
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    returning
      value(RS_BAWGT) type ZVCXI_P0S_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_FLCUT
    returning
      value(RF_FLCUT) type ZVCXI_P0SS_FLCUT
    raising
      /VCXI/CX_CKX .
  methods GET_FLPRI
    returning
      value(RF_FLPRI) type ZVCXI_P0SS_FLPRI
    raising
      /VCXI/CX_CKX .
  methods GET_FLPRO
    returning
      value(RF_FLPRO) type ZVCXI_P0SS_FLPRO
    raising
      /VCXI/CX_CKX .
  methods GET_FPSMO
    returning
      value(RF_FPSMO) type ZVCXI_P0SS_FPSMO
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOI
    returning
      value(RF_NOCOI) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOL
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RF_NOCOL) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOO
    returning
      value(RF_NOCOO) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYI
    returning
      value(RF_PRTYI) type ZVCXI_P0SS_PRTYI
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYP
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
    returning
      value(RF_PRTYP) type ZVCXI_P0S_PRTYP
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYO
    returning
      value(RF_PRTYO) type ZVCXI_P0SS_PRTYO
    raising
      /VCXI/CX_CKX .
  methods GET_PSCALE
    importing
      !IS_PSQTY type ZVCXI_XCS_S_PSQTY
    exporting
      !ES_PRICE type ZVCXI_XCS_S_PRICE
      !ES_PRICP type ZVCXI_XCS_S_PRICP
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLE
    returning
      value(RS_SHTLE) type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
  methods GET_SHTWI
    returning
      value(RS_SHTWI) type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods GET_TRFPR
    returning
      value(RF_TRFPR) type ZVCXI_P0SS_TRFPR
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGP
    importing
      !IS_BAWGP type ZVCXI_P0S_S_BAWGP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BAWGT
    importing
      !IS_BAWGT type ZVCXI_P0S_S_BAWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLCUT
    importing
      !IF_FLCUT type ZVCXI_P0SS_FLCUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLPRI
    importing
      !IF_FLPRI type ZVCXI_P0SS_FLPRI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FLPRO
    importing
      !IF_FLPRO type ZVCXI_P0SS_FLPRO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FPSMO
    importing
      !IF_FPSMO type ZVCXI_P0SS_FPSMO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOI
    importing
      !IF_NOCOI type ZVCXI_P0S_NOCOL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOL
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_NOCOL type ZVCXI_P0S_NOCOL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOO
    importing
      !IF_NOCOO type ZVCXI_P0S_NOCOL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYI
    importing
      !IF_PRTYI type ZVCXI_P0SS_PRTYI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYP
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYO
    importing
      !IF_PRTYO type ZVCXI_P0SS_PRTYO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLE
    importing
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTWI
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRFPR
    importing
      !IF_TRFPR type ZVCXI_P0SS_TRFPR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods IS_SP_PRINT_ACTIVE
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES' ##NO_TEXT.
  constants C_IEVNT_I_LOAD_PSCALE type /VCXI/VKSC_IEVNT value 'LOAD_PSCALE' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_BAWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BAWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CONV_CHANGED type /VCXI/VKSC_IEVNT value 'CONV_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FPSMO_CHANGED type /VCXI/VKSC_IEVNT value 'FPSMO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TPROC_CHANGED type /VCXI/VKSC_IEVNT value 'TPROC_CHANGED' ##NO_TEXT.
  constants C_PARID_BAWGP type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGP_A' ##NO_TEXT.
  constants C_PARID_BAWGT type /VCXI/VKS_PARID value 'ZVCXI_P0_BAWGT' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_FLCUT type /VCXI/VKS_PARID value 'ZVCXI_P0_FLCUT' ##NO_TEXT.
  constants C_PARID_FLPRI type /VCXI/VKS_PARID value 'ZVCXI_P0_FLPRI' ##NO_TEXT.
  constants C_PARID_FLPRO type /VCXI/VKS_PARID value 'ZVCXI_P0_FLPRO' ##NO_TEXT.
  constants C_PARID_FPSMO type /VCXI/VKS_PARID value 'ZVCXI_P0_FPSMO' ##NO_TEXT.
  constants C_PARID_NOCOI type /VCXI/VKS_PARID value 'ZVCXI_P0_NOCOI' ##NO_TEXT.
  constants C_PARID_NOCOO type /VCXI/VKS_PARID value 'ZVCXI_P0_NOCOO' ##NO_TEXT.
  constants C_PARID_PRTYI type /VCXI/VKS_PARID value 'ZVCXI_P0_PRTYI' ##NO_TEXT.
  constants C_PARID_PRTYO type /VCXI/VKS_PARID value 'ZVCXI_P0_PRTYO' ##NO_TEXT.
  constants C_PARID_SHTLE type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLE' ##NO_TEXT.
  constants C_PARID_SHTWI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTWI' ##NO_TEXT.
  constants C_PARID_TRFPR type /VCXI/VKS_PARID value 'ZVCXI_P0_TRFPR' ##NO_TEXT.
  data R_ICONT type ref to ZIF_VCXI_P0SS_ICONT .

  methods SET_SHTPR_BY_CUST
    raising
      /VCXI/CX_CKX .
  methods SET_PRINT_BY_CUST
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_SP_PRINT
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_MS_SHTPR
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MOVE_PRALLOC_PRINT
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SELF type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods GET_ICONT
    returning
      value(RF_ICONT) type ZVCXI_P0S_ICONT
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRINT_I
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRINT_O
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHTLE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHTWI
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_PSCALE
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_SP_PRINT
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_CREATE type ABAP_BOOL
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_PR_MS_SHTPR definition
class ZCL_VCXI_P0SS_PR_MS_SHTPR implementation.
method CHECK_PRINT_I.

*** 0 - Print Inside is maintained and valid.
*** 1 - Print Inside is not fully maintained.
*** 2 - Print Type for Print Inside is not valid.
*** 9 - Print Inside is not active.

  data:  LF_PRTYP type ZVCXI_P0S_PRTYP.

  if ME->GET_FLPRI( ) ne ABAP_TRUE.
    move 9 to RF_RETURN.
    exit.
  endif.

  if ME->GET_NOCOI( ) is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

  LF_PRTYP = ME->GET_PRTYI( ).

  if LF_PRTYP is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    if ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_PRTYP_EXIST( IF_PRTYP = LF_PRTYP ) eq ABAP_TRUE.
      move 0 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_PRINT_O.

*** 0 - Print Outside is maintained and valid
*** 1 - Print Outside is not fully maintained
*** 2 - Print Type for Print Outside is not valid
*** 9 - Print Outside is not active

  data:  LF_PRTYP type ZVCXI_P0S_PRTYP.

  if ME->GET_FLPRO( ) ne ABAP_TRUE.
    move 9 to RF_RETURN.
    exit.
  endif.

  if ME->GET_NOCOO( ) is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

  LF_PRTYP = ME->GET_PRTYO( ).

  if LF_PRTYP is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    if ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_PRTYP_EXIST( IF_PRTYP = LF_PRTYP ) eq ABAP_TRUE.
      move 0 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_SHTLE.

*** 0 - Sheet Length is maintained and valid.
*** 1 - Sheet Length is not maintained.
*** 2 - Sheet Length is maintained but do not fit the Gross Sheet Size.
*** 3 - Sheet Length is maintained but do not fit the Lamination Sheet Size.

  data:  LF_RLAMI      type        ZVCXI_P0SS_RLAMI.
  data:  LS_SHTLE      type        ZVCXI_P0SS_S_SHTLE,
         LS_SHTLE_C    type        ZVCXI_P0SS_S_SHTLE,
         LS_SHTGL      type        ZVCXI_P0SS_S_SHTGL,
         LS_SHTLW      type        ZVCXI_P0SS_S_SHTLW,
         LS_SHTLL      type        ZVCXI_P0SS_S_SHTLL.
  data:  LT_PRVDR      type        /VCXI/VKSR_TT_GATE.
  data:  LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM     type ref to ZIF_VCXI_P0SS_SHTDIM,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Sheet Length
  LS_SHTLE = ME->GET_SHTLE( ).
  if LS_SHTLE-SHTLE is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    move 2 to RF_RETURN.
  endif.

*** Get Sheet Dimension Provider
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  if SY-SUBRC = 0.
    try.
        move LR_PRVDR->R_CLSPR ?to LR_SHTDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_SHTDIM.
    endtry.
  endif.

  if LR_SHTDIM is bound.

*** Get Gross Sheet Length
    LS_SHTGL = LR_SHTDIM->GET_SHTGL( ).

    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SHTLE-SHTLE_UOM
                                                       IF_UOM_IN    = LS_SHTGL-SHTGL_UOM
                                                       IF_VALUE_IN  = LS_SHTGL-SHTGL
                                             importing EF_VALUE_OUT = LS_SHTGL-SHTGL
                                                       EF_UOM_OUT   = LS_SHTGL-SHTGL_UOM ).

*** Everything fits together
    if LS_SHTGL eq LS_SHTLE.
      move 0 to RF_RETURN.
    endif.

  else.
    move 3 to RF_RETURN.

*** Get Lamination Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    if SY-SUBRC = 0.
      try.
          move LR_PRVDR->R_CLSPR ?to LR_PR_LAMI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_LAMI.
      endtry.
    endif.

    if LR_PR_LAMI is bound.
***   Get Lamination Sheet Width/Length
      LS_SHTLW = LR_PR_LAMI->GET_SHTLW( ).
      LS_SHTLL = LR_PR_LAMI->GET_SHTLL( ).
      LF_RLAMI = LR_PR_LAMI->GET_RLAMI( ).

      ZCL_VCXI_P0SS_CUST_LAMI=>MAP_SHTL( exporting IF_RLAMI = LF_RLAMI
                                                   IS_SHTLL = LS_SHTLL
                                                   IS_SHTLW = LS_SHTLW
                                         importing ES_SHTLE = LS_SHTLE_C ).

      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SHTLE-SHTLE_UOM
                                                         IF_UOM_IN    = LS_SHTLE_C-SHTLE_UOM
                                                         IF_VALUE_IN  = LS_SHTLE_C-SHTLE
                                               importing EF_VALUE_OUT = LS_SHTLE_C-SHTLE
                                                         EF_UOM_OUT   = LS_SHTLE_C-SHTLE_UOM ).

***   Everything fits together
      if LS_SHTLE_C eq LS_SHTLE.
        move 0 to RF_RETURN.
      endif.

    endif.
  endif.

endmethod.
method CHECK_SHTWI.

*** 0 - Sheet Width is maintained and valid.
*** 1 - Sheet Width is not maintained.
*** 2 - Sheet Width is maintained but do not fit the Gross Sheet Size.
*** 3 - Sheet Width is maintained but do not fit the Lamination Sheet Size.

  data:  LF_RLAMI      type        ZVCXI_P0SS_RLAMI.
  data:  LS_SHTWI      type        ZVCXI_P0SS_S_SHTWI,
         LS_SHTWI_C    type        ZVCXI_P0SS_S_SHTWI,
         LS_SHTGW      type        ZVCXI_P0SS_S_SHTGW,
         LS_SHTLW      type        ZVCXI_P0SS_S_SHTLW,
         LS_SHTLL      type        ZVCXI_P0SS_S_SHTLL.
  data:  LT_PRVDR      type        /VCXI/VKSR_TT_GATE.
  data:  LR_PRVDR      type ref to /VCXI/CL_VKSR_GATE,
         LR_SHTDIM     type ref to ZIF_VCXI_P0SS_SHTDIM,
         LR_PR_LAMI    type ref to ZCL_VCXI_P0SS_PR_LAMI.

*** Get Sheet Width
  LS_SHTWI = ME->GET_SHTWI( ).
  if LS_SHTWI-SHTWI is initial.
    move 1 to RF_RETURN.
    exit.
  else.
    move 2 to RF_RETURN.
  endif.

*** Get Sheet Dimension Provider
  LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
                                    IF_INUSE = ABAP_TRUE ).
  read table LT_PRVDR into LR_PRVDR index 1.
  if SY-SUBRC = 0.
    try.
        move LR_PRVDR->R_CLSPR ?to LR_SHTDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_SHTDIM.
    endtry.
  endif.

  if LR_SHTDIM is bound.

*** Get Gross Sheet Width
    LS_SHTGW = LR_SHTDIM->GET_SHTGW( ).

    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SHTWI-SHTWI_UOM
                                                       IF_UOM_IN    = LS_SHTGW-SHTGW_UOM
                                                       IF_VALUE_IN  = LS_SHTGW-SHTGW
                                             importing EF_VALUE_OUT = LS_SHTGW-SHTGW
                                                       EF_UOM_OUT   = LS_SHTGW-SHTGW_UOM ).

*** Everything fits together
    if LS_SHTGW eq LS_SHTWI.
      move 0 to RF_RETURN.
    endif.

  else.
    move 3 to RF_RETURN.

*** Get Lamination Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    if SY-SUBRC = 0.
      try.
          move LR_PRVDR->R_CLSPR ?to LR_PR_LAMI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_LAMI.
      endtry.
    endif.

    if LR_PR_LAMI is bound.
***   Get Lamination Sheet Width/Length
      LS_SHTLW = LR_PR_LAMI->GET_SHTLW( ).
      LS_SHTLL = LR_PR_LAMI->GET_SHTLL( ).
      LF_RLAMI = LR_PR_LAMI->GET_RLAMI( ).

      ZCL_VCXI_P0SS_CUST_LAMI=>MAP_SHTL( exporting IF_RLAMI = LF_RLAMI
                                                   IS_SHTLL = LS_SHTLL
                                                   IS_SHTLW = LS_SHTLW
                                         importing ES_SHTWI = LS_SHTWI_C ).

      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_SHTWI-SHTWI_UOM
                                                         IF_UOM_IN    = LS_SHTWI_C-SHTWI_UOM
                                                         IF_VALUE_IN  = LS_SHTWI_C-SHTWI
                                               importing EF_VALUE_OUT = LS_SHTWI_C-SHTWI
                                                         EF_UOM_OUT   = LS_SHTWI_C-SHTWI_UOM ).

***   Everything fits together
      if LS_SHTWI_C eq LS_SHTWI.
        move 0 to RF_RETURN.
      endif.

    endif.
  endif.


endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

  ME->F_PARID_PRICP = C_PARID_PRICP_A.

endmethod.
method DO_FREE.

  ME->R_GATE->DO_FREE( ).

endmethod.
method GET_BAWGP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).
  move LS_PARAM-ATFLV to RS_BAWGP-BAWGP.
  move LS_PARAM-UNIT  to RS_BAWGP-BAWGP_UOM.

endmethod.
method GET_BAWGT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).
  move LS_PARAM-ATFLV to RS_BAWGT-BAWGT.
  move LS_PARAM-UNIT  to RS_BAWGT-BAWGT_UOM.

endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
method GET_FLCUT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLCUT ).
  move LS_PARAM-ATWRT to RF_FLCUT.

endmethod.
method GET_FLPRI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRI ).
  move LS_PARAM-ATWRT to RF_FLPRI.

endmethod.
method GET_FLPRO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRO ).
  move LS_PARAM-ATWRT to RF_FLPRO.

endmethod.
method GET_FPSMO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).
  move LS_PARAM-ATWRT to RF_FPSMO.

endmethod.
method GET_ICONT.

  check ME->R_ICONT is bound.

*** Return Context
  RF_ICONT = ME->R_ICONT->GET_ICONT( ).

endmethod.
method GET_KAUSF.

  if ME->R_CUST_P0_SHTPR is not bound.
    ME->HANDLE_INIT_CUST_MATNR( ).
  endif.

  check ME->R_CUST_P0_SHTPR is bound.
  move ME->R_CUST_P0_SHTPR->GET_KAUSF( IS_EVQTY = IS_EVQTY ) to RS_KAUSF.

endmethod.
method GET_NOCOI.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOI ).
    move LS_PARAM-ATWRT to RF_NOCOI.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_NOCOI = LR_PR_SP_PRINT->GET_NOCOL( ).

  endif.

endmethod.
method GET_NOCOL.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      move ME->GET_NOCOI( ) to RF_NOCOL.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      move ME->GET_NOCOO( ) to RF_NOCOL.
  endcase.

endmethod.
method GET_NOCOO.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOO ).
  move LS_PARAM-ATWRT to RF_NOCOO.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_NOCOO = LR_PR_SP_PRINT->GET_NOCOL( ).

  endif.

endmethod.
method GET_PRDEI.

  data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                              IF_CREATE = SPACE ).
  check LR_GATE is bound.
  move ABAP_TRUE to RF_PRDEI.

endmethod.
method GET_PRDEO.

  data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                              IF_CREATE = SPACE ).
  check LR_GATE is bound.
  move ABAP_TRUE to RF_PRDEO.

endmethod.
method GET_PRDET.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      move ME->GET_PRDEI( ) to RF_PRDET.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      move ME->GET_PRDEO( ) to RF_PRDET.
  endcase.

endmethod.
method GET_PRTYI.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYI ).
    move LS_PARAM-ATWRT to RF_PRTYI.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_PRTYI = LR_PR_SP_PRINT->GET_PRTYP( ).

  endif.

endmethod.
method GET_PRTYO.

  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYO ).
  move LS_PARAM-ATWRT to RF_PRTYO.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    RF_PRTYO = LR_PR_SP_PRINT->GET_PRTYP( ).

  endif.

endmethod.
method GET_PRTYP.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      move ME->GET_PRTYI( ) to RF_PRTYP.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      move ME->GET_PRTYO( ) to RF_PRTYP.
  endcase.

endmethod.
method GET_PSCALE.

  data:          LS_PSQTY             type        ZVCXI_XCS_S_PSQTY,
                 LS_PSQTY_MATCH       type        ZVCXI_XCS_S_PSQTY.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PSCALE         type ref to ZCL_VCXI_XCS_PR_PSCALE,
                 LR_PR_PSCALE_MATCH   type ref to ZCL_VCXI_XCS_PR_PSCALE.

*** Get Gates of Price Scales
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
        check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***     Get Price Scale Quantity
        move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

        if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
           ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
             LS_PSQTY_MATCH-PSQTY is initial ).
          move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
          move LS_PSQTY     to LS_PSQTY_MATCH.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
  check LR_PR_PSCALE_MATCH is bound.
  ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
  ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

endmethod.
method GET_SHTLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).
  move LS_PARAM-ATFLV to RS_SHTLE-SHTLE.
  move LS_PARAM-UNIT  to RS_SHTLE-SHTLE_UOM.

endmethod.
method GET_SHTWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).
  move LS_PARAM-ATFLV to RS_SHTWI-SHTWI.
  move LS_PARAM-UNIT  to RS_SHTWI-SHTWI_UOM.

endmethod.
method GET_SP_PRINT.

  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT     type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

***------------------------------------------------------------------------------------------------
*** Get all Prints
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        check LR_PR_SP_PRINT is bound and
              LR_PR_SP_PRINT->GET_PRSID( ) eq IF_PRSID.
        move LR_GATE to RR_GATE.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
  if RR_GATE is not bound and
     IF_CREATE   eq ABAP_TRUE.
*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
    check SY-SUBRC eq 0.
    RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Print Side
    move RR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    LR_PR_SP_PRINT->SET_PRSID( IF_PRSID = IF_PRSID ).

  endif.

endmethod.
method GET_STATUS.

  data:  LS_CALIP type ZVCXI_P0SS_S_CALIP,
         LS_BAWGT type ZVCXI_P0S_S_BAWGT,
         LS_BAWGP type ZVCXI_P0S_S_BAWGP.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Sheet Dimensions against Gross Sheet Sizes
  if ME->CHECK_SHTWI( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    if ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_PROD.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    elseif ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_SALES.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    endif.
  endif.

  if ME->CHECK_SHTLE( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    if ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_PROD.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    elseif ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_SALES.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    endif.
  endif.

*** Check Caliper
  LS_CALIP = ME->GET_CALIP( ).
  if LS_CALIP-CALIP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Base Weight
  LS_BAWGT = ME->GET_BAWGT( ).
  LS_BAWGP = ME->GET_BAWGP( ).
  if LS_BAWGT-BAWGT is not initial and
     LS_BAWGP-BAWGP is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Print Inside
  if ME->CHECK_PRINT_I( ) eq 0 or
     ME->CHECK_PRINT_I( ) eq 9.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Print Outside
  if ME->CHECK_PRINT_O( ) eq 0 or
     ME->CHECK_PRINT_O( ) eq 9.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  data:  LF_MSGTY type SYMSGTY.
  data:  LS_CALIP type ZVCXI_P0SS_S_CALIP,
         LS_BAWGT type ZVCXI_P0S_S_BAWGT,
         LS_BAWGP type ZVCXI_P0S_S_BAWGP.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).


  if ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_PROD.
    LF_MSGTY = 'E'.
  elseif ME->GET_ICONT( ) eq ZIF_VCXI_P0SS_ICONT=>C_ICONT_SALES.
    LF_MSGTY = 'W'.
  endif.

***------------------------------------------------------------------
*** Sheet Dimensions will be checked against Production Sheet Dimension!
  IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                           IF_MSGTY = 'I'
                           IF_MSGNO = '607' ).

***------------------------------------------------------------------
*** Check Sheet Dimensions against Gross Sheet Sizes
  case  ME->CHECK_SHTWI( ).
    when 0.
***   Sheet Width is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '601' ).
    when 1.
***   Sheet Width is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '602' ).
    when 2.
***   Sheet Width is maintained but do not fit the Gross Sheet Size.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = LF_MSGTY
                               IF_MSGNO = '603' ).
    when 3.
***   Sheet Width is maintained but do not fit the Lamination Sheet Size.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = LF_MSGTY
                               IF_MSGNO = '608' ).
  endcase.

  case  ME->CHECK_SHTLE( ).
    when 0.
***   Sheet Length is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '604' ).
    when 1.
***   Sheet Length is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '605' ).
    when 2.
***   Sheet Length is maintained but do not fit the Gross Sheet Size.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = LF_MSGTY
                               IF_MSGNO = '606' ).
    when 3.
***   Sheet Length is maintained but do not fit the Lamination Sheet Size.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = LF_MSGTY
                               IF_MSGNO = '609' ).
  endcase.

*** Check Caliper
  LS_CALIP = ME->GET_CALIP( ).
  if LS_CALIP-CALIP is not initial.
*** Caliper is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '615' ).
  else.
*** Caliper is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '616' ).
  endif.

*** Check Base Weight
  LS_BAWGT = ME->GET_BAWGT( ).
  LS_BAWGP = ME->GET_BAWGP( ).
  if LS_BAWGT-BAWGT is not initial and
     LS_BAWGP-BAWGP is not initial.
*** Base Weight is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '620' ).
  else.
*** Base Weight is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '621' ).
  endif.

*** Check Print Inside
  case ME->CHECK_PRINT_I( ).
    when 0.
***   Print Inside is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '625' ).
    when 1.
***   Print Inside is not fully maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '626' ).
    when 2.
***   Print Type for Print Inside is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '627' ).
  endcase.

*** Check Print Outside
  case ME->CHECK_PRINT_O( ).
    when 0.
***   Print Outside is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '628' ).
    when 1.
***   Print Outside is not fully maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '629' ).
    when 2.
***   Print Type for Print Outside is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '630' ).
  endcase.

endmethod.
method GET_TRFPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRFPR ).
  move LS_PARAM-ATWRT to RF_TRFPR.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_LOAD_PSCALE.
      ME->HANDLE_LOAD_PSCALE( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

  endcase.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR       type        MATNR,
         LF_WERKS       type        WERKS_D,
         LF_DCONF       type        DATS.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.
  move ME->GET_DCONF( )            to LF_DCONF.

  if ME->R_CUST_P0_SHTPR          is bound    and
     ME->R_CUST_P0_SHTPR->F_MATNR eq LF_MATNR and
     ME->R_CUST_P0_SHTPR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear:  ME->R_CUST_MATNR, ME->R_CUST_P0_SHTPR.

*** Load the Customizing
  ME->R_CUST_P0_SHTPR = ZCL_VCXI_P0SS_CUST_SHTPR=>GET_INSTANCE_P0_SHTPR( IF_MATNR = LF_MATNR
                                                                         IF_WERKS = LF_WERKS
                                                                         IF_DATE  = LF_DCONF ).

  check ME->R_CUST_P0_SHTPR is bound.
  move ME->R_CUST_P0_SHTPR to ME->R_CUST_MATNR.

*** Set Data
  ME->SET_SHTPR_BY_CUST( ).
  ME->SET_PRINT_BY_CUST( ).

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Get Context Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_ICONT=>C_IPRVT_P0_ICONT
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to ME->R_ICONT.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: ME->R_ICONT.
  endtry.

  if ME->R_ICONT is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '010'
                                          IF_MSGV1 = ZIF_VCXI_P0SS_ICONT=>C_IPRVT_P0_ICONT
                                          IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_LOAD_PSCALE.

*** Set Load Data to Active
  call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method IS_PRINT_CALCULATED.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SPEC_SE      type ref to ZCL_VCXI_P0SS_PR_SPEC_SE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI.

***------------------------------------------------------------------------------------------------
*** Get Specification SE Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SPEC_SE.
  endtry.

  if LR_PR_SPEC_SE is bound.
    RF_CALCULATED = LR_PR_SPEC_SE->IS_PRINT_CALCULATED( ).
    exit.
  endif.

***------------------------------------------------------------------------------------------------
*** Get Lamination Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  try.
      if LR_GATE          is bound and
         LR_GATE->R_CLSPR is bound.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_LAMI.
  endtry.

  if LR_PR_LAMI is bound.
    RF_CALCULATED = LR_PR_LAMI->IS_PRINT_CALCULATED( ).
    exit.
  endif.

endmethod.
method IS_SP_PRINT_ACTIVE.

  data:  LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definitions
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  check lines( LT_PRVDR_DEF ) is not initial.
  move ABAP_TRUE to RF_ACTIVE.

endmethod.
method MOVE_PRALLOC_MS_SHTPR.

  data:  LF_PRTYP                type        ZVCXI_P0S_PRTYP,
         LF_NOCOL                type        ZVCXI_P0S_NOCOL.
  data:  LR_PR_MS_SHTPR_SELF     type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR,
         LR_PR_MS_SHTPR_SOURCE   type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***--------------------------------------------------------------------------------------
*** Get own Sheet Procurement PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_MS_SHTPR_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR_SELF.
  endtry.
  check LR_PR_MS_SHTPR_SELF is bound.

*** Get Source Sheet Procurement PR Class
  try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_MS_SHTPR_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR_SOURCE.
  endtry.
  check LR_PR_MS_SHTPR_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Sheet Procurement
  move LR_PR_MS_SHTPR_SOURCE->GET_PRTYP( IF_PRSID = IF_PRSID ) to LF_PRTYP.
  LR_PR_MS_SHTPR_SELF->SET_PRTYP( IF_PRSID = IF_PRSID
                                  IF_PRTYP = LF_PRTYP ).

  move LR_PR_MS_SHTPR_SOURCE->GET_NOCOL( IF_PRSID = IF_PRSID ) to LF_NOCOL.
  LR_PR_MS_SHTPR_SELF->SET_NOCOL( IF_PRSID = IF_PRSID
                                  IF_NOCOL = LF_NOCOL ).

endmethod.
method MOVE_PRALLOC_PRINT.

  data:  LF_PRTYP               type        ZVCXI_P0S_PRTYP,
         LF_NOCOL               type        ZVCXI_P0S_NOCOL,
         LF_PRCAN               type        ZVCXI_P0SS_PRCAN,
         LF_FPRFS               type        ZVCXI_P0SS_FPRFS,
         LF_COLCO               type        ZVCXI_P0SS_COLCO,
         LF_TMARK               type        ZVCXI_P0SS_TMARK,
         LF_MARKP               type        ZVCXI_P0SS_MARKP,
         LF_NUMPR               type        ZVCXI_P0SS_NUMPR,
         LF_ACONO               type        ZVCXI_P0SS_ACONO,
         LF_SETBY               type        /VCXI/VKSR_SETBY.
  data:  LS_COVRG               type        ZVCXI_P0S_S_COVRG,
         LS_PRVDR_DEF           type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE_SELF           type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SOURCE         type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF           type        /VCXI/VKSR_TT_PRVDR_DEF,
         LS_ATTRI               type        /VCXI/VKS_S_ATTRI.
  data:  LR_PR_MS_SHTPR_SELF    type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR,
         LR_PR_SP_PRINT_SELF    type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_PR_PRINT_SOURCE     type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_GATE_SELF           type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SOURCE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_INK_SELF      type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_MS_INK_SOURCE    type ref to ZCL_VCXI_P0SS_PR_MS_INK,
         LR_PR_MARK_SELF        type ref to ZCL_VCXI_P0SS_PR_MARK,
         LR_PR_MARK_SOURCE      type ref to ZCL_VCXI_P0SS_PR_MARK.

***--------------------------------------------------------------------------------------
*** Get own Sheet Procurement PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_MS_SHTPR_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR_SELF.
  endtry.
  if LR_PR_MS_SHTPR_SELF is not bound.
*** Get own Printing PR Class
    try.
        move IR_GATE_SELF->R_CLSPR ?to LR_PR_SP_PRINT_SELF.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SP_PRINT_SELF.
    endtry.
    check LR_PR_SP_PRINT_SELF is bound.
  endif.

*** Get Source Printing PR Class
  try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_PRINT_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_PRINT_SOURCE.
  endtry.
  check LR_PR_PRINT_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Print
  move LR_PR_PRINT_SOURCE->GET_PRTYP( ) to LF_PRTYP.
  move LR_PR_PRINT_SOURCE->GET_NOCOL( ) to LF_NOCOL.
  move LR_PR_PRINT_SOURCE->GET_PRCAN( ) to LF_PRCAN.
  move LR_PR_PRINT_SOURCE->GET_FPRFS( ) to LF_FPRFS.

*** Set Basic Information
  if LR_PR_MS_SHTPR_SELF is bound.
    LR_PR_MS_SHTPR_SELF->SET_PRTYP( IF_PRSID = IF_PRSID
                                    IF_PRTYP = LF_PRTYP ).
    LR_PR_MS_SHTPR_SELF->SET_NOCOL( IF_PRSID = IF_PRSID
                                    IF_NOCOL = LF_NOCOL ).
  endif.
  check LR_PR_SP_PRINT_SELF is bound.

*** Set with Details
  LR_PR_SP_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_SP_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).
  LR_PR_SP_PRINT_SELF->SET_PRCAN( IF_PRCAN = LF_PRCAN ).
  LR_PR_SP_PRINT_SELF->SET_FPRFS( IF_FPRFS = LF_FPRFS ).

***--------------------------------------------------------------------------------------
*** Move Calcualted Attribute
  LS_ATTRI = IR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_PRINT=>C_ATTID_CALCULATED ).
  IR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
*** Move Ink Information
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                              IF_INUSE = ABAP_TRUE ).
  LT_GATE_SELF   = IR_GATE_SELF->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                            IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    read table LT_GATE_SELF into LR_GATE_SELF index SY-TABIX.
    check SY-SUBRC eq 0.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MS_INK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MS_INK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_SP_INK_SELF.

*** Copy Color Code
    LR_PR_MS_INK_SOURCE->GET_COLCO( importing EF_COLCO = LF_COLCO
                                              EF_SETBY = LF_SETBY ).
    LR_PR_SP_INK_SELF->SET_COLCO( IF_COLCO = LF_COLCO
                                  IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MS_INK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                              EF_SETBY = LF_SETBY ).
    LR_PR_SP_INK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                  IF_SETBY = LF_SETBY ).

  endloop.

***--------------------------------------------------------------------------------------
*** Move Marking Information
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_INUSE = ABAP_TRUE ).

*** Get Provider Definitions for Marking
  LT_PRVDR_DEF = IR_GATE_SELF->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
  check SY-SUBRC = 0.

  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    LR_GATE_SELF = IR_GATE_SELF->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    if LR_GATE_SELF->GET_USYNC( ) ne ABAP_TRUE.
      LR_GATE_SELF->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MARK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MARK_SELF.

*** Copy Marking Type
    LR_PR_MARK_SOURCE->GET_TMARK( importing EF_TMARK = LF_TMARK
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_TMARK( IF_TMARK = LF_TMARK
                                IF_SETBY = LF_SETBY ).

*** Copy Marking Position
    LR_PR_MARK_SOURCE->GET_MARKP( importing EF_MARKP = LF_MARKP
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_MARKP( IF_MARKP = LF_MARKP
                                IF_SETBY = LF_SETBY ).

*** Copy Number Print for Marking
    LR_PR_MARK_SOURCE->GET_NUMPR( importing EF_NUMPR = LF_NUMPR
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_NUMPR( IF_NUMPR = LF_NUMPR
                                IF_SETBY = LF_SETBY ).

*** Copy Assigned Color Number
    LR_PR_MARK_SOURCE->GET_ACONO( importing EF_ACONO = LF_ACONO
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_ACONO( IF_ACONO = LF_ACONO
                                IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MARK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                IF_SETBY = LF_SETBY ).

  endloop.
endmethod.
method MOVE_PRALLOC_SP_PRINT.

  data:  LF_PRTYP               type        ZVCXI_P0S_PRTYP,
         LF_NOCOL               type        ZVCXI_P0S_NOCOL,
         LF_PRCAN               type        ZVCXI_P0SS_PRCAN,
         LF_FPRFS               type        ZVCXI_P0SS_FPRFS,
         LF_COLCO               type        ZVCXI_P0SS_COLCO,
         LF_TMARK               type        ZVCXI_P0SS_TMARK,
         LF_MARKP               type        ZVCXI_P0SS_MARKP,
         LF_NUMPR               type        ZVCXI_P0SS_NUMPR,
         LF_ACONO               type        ZVCXI_P0SS_ACONO,
         LF_SETBY               type        /VCXI/VKSR_SETBY.
  data:  LS_COVRG               type        ZVCXI_P0S_S_COVRG,
         LS_PRVDR_DEF           type        /VCXI/VKSR_S_PRVDR_DEF,
         LS_ATTRI               type        /VCXI/VKS_S_ATTRI.
  data:  LT_GATE_SELF           type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SOURCE         type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF           type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_PR_MS_SHTPR_SELF    type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR,
         LR_PR_SP_PRINT_SELF    type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_PR_SP_PRINT_SOURCE  type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_GATE_SELF           type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SOURCE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_INK_SELF      type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_SP_INK_SOURCE    type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_MARK_SELF        type ref to ZCL_VCXI_P0SS_PR_MARK,
         LR_PR_MARK_SOURCE      type ref to ZCL_VCXI_P0SS_PR_MARK.

***--------------------------------------------------------------------------------------
*** Get own Sheet Procurement PR Class
  try.
      move IR_GATE_SELF->R_CLSPR ?to LR_PR_MS_SHTPR_SELF.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_MS_SHTPR_SELF.
  endtry.
  if LR_PR_MS_SHTPR_SELF is not bound.
*** Get own Printing PR Class
    try.
        move IR_GATE_SELF->R_CLSPR ?to LR_PR_SP_PRINT_SELF.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_SP_PRINT_SELF.
    endtry.
    check LR_PR_SP_PRINT_SELF is bound.
  endif.

*** Get Source Printing PR Class
  try.
      move IR_GATE_SOURCE->R_CLSPR ?to LR_PR_SP_PRINT_SOURCE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_PR_SP_PRINT_SOURCE.
  endtry.
  check LR_PR_SP_PRINT_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Move Information from Print
  move LR_PR_SP_PRINT_SOURCE->GET_PRTYP( ) to LF_PRTYP.
  move LR_PR_SP_PRINT_SOURCE->GET_NOCOL( ) to LF_NOCOL.
  move LR_PR_SP_PRINT_SOURCE->GET_PRCAN( ) to LF_PRCAN.
  move LR_PR_SP_PRINT_SOURCE->GET_FPRFS( ) to LF_FPRFS.

*** Set Basic Information
  if LR_PR_MS_SHTPR_SELF is bound.
    LR_PR_MS_SHTPR_SELF->SET_PRTYP( IF_PRSID = IF_PRSID
                                    IF_PRTYP = LF_PRTYP ).
    LR_PR_MS_SHTPR_SELF->SET_NOCOL( IF_PRSID = IF_PRSID
                                    IF_NOCOL = LF_NOCOL ).
  endif.
  check LR_PR_SP_PRINT_SELF is bound.

*** Set with Details
  LR_PR_SP_PRINT_SELF->SET_PRTYP( IF_PRTYP = LF_PRTYP ).
  LR_PR_SP_PRINT_SELF->SET_NOCOL( IF_NOCOL = LF_NOCOL ).
  LR_PR_SP_PRINT_SELF->SET_PRCAN( IF_PRCAN = LF_PRCAN ).
  LR_PR_SP_PRINT_SELF->SET_FPRFS( IF_FPRFS = LF_FPRFS ).


***--------------------------------------------------------------------------------------
*** Move Calcualted Attribute
  LS_ATTRI = IR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_ATTID_CALCULATED ).
  IR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
*** Move Ink Information
  LT_GATE_SELF   = IR_GATE_SELF->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                            IF_INUSE = ABAP_TRUE ).
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                              IF_INUSE = ABAP_TRUE ).
  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    read table LT_GATE_SELF into LR_GATE_SELF index SY-TABIX.
    check SY-SUBRC eq 0.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_SP_INK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_SP_INK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_SP_INK_SELF.

*** Copy Color Code
    LR_PR_SP_INK_SOURCE->GET_COLCO( importing EF_COLCO = LF_COLCO
                                              EF_SETBY = LF_SETBY ).
    LR_PR_SP_INK_SELF->SET_COLCO( IF_COLCO = LF_COLCO
                                  IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_SP_INK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                              EF_SETBY = LF_SETBY ).
    LR_PR_SP_INK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                  IF_SETBY = LF_SETBY ).

  endloop.

***--------------------------------------------------------------------------------------
*** Move Marking Information
  LT_GATE_SOURCE = IR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_INUSE = ABAP_TRUE ).

*** Get Provider Definitions for Marking
  LT_PRVDR_DEF = IR_GATE_SELF->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
  read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.
  check SY-SUBRC = 0.

  loop at LT_GATE_SOURCE into LR_GATE_SOURCE.
    LR_GATE_SELF = IR_GATE_SELF->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
    if LR_GATE_SELF->GET_USYNC( ) ne ABAP_TRUE.
      LR_GATE_SELF->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

*** Move Calcualted Attribute
    LS_ATTRI = LR_GATE_SOURCE->GET_ATTRI( IF_ATTID = ZCL_VCXI_P0SS_PR_MARK=>C_ATTID_CALCULATED ).
    LR_GATE_SELF->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_MARK_SOURCE.
    move LR_GATE_SELF->R_CLSPR   ?to LR_PR_MARK_SELF.

*** Copy Marking Type
    LR_PR_MARK_SOURCE->GET_TMARK( importing EF_TMARK = LF_TMARK
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_TMARK( IF_TMARK = LF_TMARK
                                IF_SETBY = LF_SETBY ).

*** Copy Marking Position
    LR_PR_MARK_SOURCE->GET_MARKP( importing EF_MARKP = LF_MARKP
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_MARKP( IF_MARKP = LF_MARKP
                                IF_SETBY = LF_SETBY ).

*** Copy Number Print for Marking
    LR_PR_MARK_SOURCE->GET_NUMPR( importing EF_NUMPR = LF_NUMPR
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_NUMPR( IF_NUMPR = LF_NUMPR
                                IF_SETBY = LF_SETBY ).

*** Copy Assigned Color Number
    LR_PR_MARK_SOURCE->GET_ACONO( importing EF_ACONO = LF_ACONO
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_ACONO( IF_ACONO = LF_ACONO
                                IF_SETBY = LF_SETBY ).

*** Copy Coverage
    LR_PR_MARK_SOURCE->GET_COVRG( importing ES_COVRG = LS_COVRG
                                            EF_SETBY = LF_SETBY ).
    LR_PR_MARK_SELF->SET_COVRG( IS_COVRG = LS_COVRG
                                IF_SETBY = LF_SETBY ).

  endloop.

endmethod.
method SET_BAWGP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGP ).

  move IS_BAWGP-BAWGP                      to LS_PARAM-ATFLV.
  move IS_BAWGP-BAWGP_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRYW_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETW_CHANGED ).
  endif.

endmethod.
method SET_BAWGT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BAWGT ).

  move IS_BAWGT-BAWGT                      to LS_PARAM-ATFLV.
  move IS_BAWGT-BAWGT_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BAWGT_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRYW_CHANGED ).
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETW_CHANGED ).
  endif.

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM  to LS_PARAM-UNIT.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
  endif.

endmethod.
method SET_FLCUT.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLCUT ).

  move IF_FLCUT to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
  endif.

endmethod.
method SET_FLPRI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRI ).

  move IF_FLPRI to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
  endif.

*** Clear also Print Type and Number of Colors if it is deaktivated
  if IF_FLPRI eq ABAP_FALSE.
    ME->SET_PRTYI( IF_PRTYI = SPACE
                   IF_SETBY = SPACE ).
    ME->SET_NOCOI( IF_SETBY = SPACE ).
    ME->SET_PRDEI( IF_PRDEI = ABAP_FALSE ).
  endif.

endmethod.
method SET_FLPRO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLPRO ).

  move IF_FLPRO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
  endif.

*** Clear also Print Type and Number of Colors if it is deaktivated
  if IF_FLPRO eq ABAP_FALSE.
    ME->SET_PRTYO( IF_PRTYO = SPACE
                   IF_SETBY = SPACE ).
    ME->SET_NOCOO( IF_SETBY = SPACE ).
    ME->SET_PRDEO( IF_PRDEO = ABAP_FALSE ).
  endif.

endmethod.
method SET_FPSMO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).

  move IF_FPSMO to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPSMO_CHANGED ).
  endif.

endmethod.
method SET_NOCOI.

  data:  LF_CHANGED     type        ABAP_BOOL.
  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOI ).

    if IF_NOCOI is supplied.
      move IF_NOCOI to LS_PARAM-ATWRT.
    else.
      clear: LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
    endif.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_NOCOL( IF_NOCOL = IF_NOCOI ).

  endif.

endmethod.
method SET_NOCOL.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      ME->SET_NOCOI( IF_NOCOI = IF_NOCOL
                     IF_SETBY = IF_SETBY ).
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      ME->SET_NOCOO( IF_NOCOO = IF_NOCOL
                     IF_SETBY = IF_SETBY ).
  endcase.

endmethod.
method SET_NOCOO.

  data:  LF_CHANGED     type        ABAP_BOOL.
  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOCOO ).

    if IF_NOCOO is supplied.
      move IF_NOCOO to LS_PARAM-ATWRT.
    else.
      clear: LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
    endif.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_NOCOL( IF_NOCOL = IF_NOCOO ).

  endif.

endmethod.
method SET_PRDEI.

  data: LF_PRTYP       type        ZVCXI_P0S_PRTYP,
        LF_NOCOL       type        ZVCXI_P0S_NOCOL.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

*** Get Current Printing Data
  LF_PRTYP = ME->GET_PRTYI( ).
  LF_NOCOL = ME->GET_NOCOI( ).

*** Get Instance of Print Node
  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                              IF_CREATE = IF_PRDEI ).
  check LR_GATE is bound.
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SP_PRINT.
  endtry.
  check LR_PR_SP_PRINT is bound.

*** Initialize Printing Data
  ME->SET_PRTYI( IF_PRTYI = SPACE
                 IF_SETBY = SPACE ).
  ME->SET_NOCOI( IF_SETBY = SPACE ).

  if IF_PRDEI eq ABAP_FALSE.
*** Delete Print
    LR_GATE->DO_FREE( ).
  endif.

*** Set Values again
  if LF_PRTYP is not initial.
    ME->SET_PRTYI( IF_PRTYI = LF_PRTYP ).
  endif.
  if LF_NOCOL is not initial.
    ME->SET_NOCOI( IF_NOCOI = LF_NOCOL ).
  endif.

endmethod.
method SET_PRDEO.

  data: LF_PRTYP       type        ZVCXI_P0S_PRTYP,
        LF_NOCOL       type        ZVCXI_P0S_NOCOL.
  data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

*** Get Current Printing Data
  LF_PRTYP = ME->GET_PRTYO( ).
  LF_NOCOL = ME->GET_NOCOO( ).

*** Get Instance of Print Node
  LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                              IF_CREATE = IF_PRDEO ).
  check LR_GATE is bound.
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SP_PRINT.
  endtry.
  check LR_PR_SP_PRINT is bound.

*** Initialize Printing Data
  ME->SET_PRTYO( IF_PRTYO = SPACE
                 IF_SETBY = SPACE ).
  ME->SET_NOCOO( IF_SETBY = SPACE ).

  if IF_PRDEO eq ABAP_FALSE.
*** Delete Print
    LR_GATE->DO_FREE( ).
  endif.

*** Set Values again
  if LF_PRTYP is not initial.
    ME->SET_PRTYO( IF_PRTYO = LF_PRTYP ).
  endif.
  if LF_NOCOL is not initial.
    ME->SET_NOCOO( IF_NOCOO = LF_NOCOL ).
  endif.

endmethod.
method SET_PRDET.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      ME->SET_PRDEI( IF_PRDEI = IF_PRDET ).
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      ME->SET_PRDEO( IF_PRDEO = IF_PRDET ).
  endcase.

endmethod.
method SET_PRINT_BY_CUST.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT     type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.

***--------------------------------------------------------------------------------------
*** Get Printing Info for Stock Materials
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_FLPRI( IF_FLPRI = ME->R_CUST_P0_SHTPR->F_FLPRI ).
    ME->SET_PRTYI( IF_PRTYI = ME->R_CUST_P0_SHTPR->F_PRTYI ).
    ME->SET_NOCOI( IF_NOCOI = ME->R_CUST_P0_SHTPR->F_NOCOI ).
    ME->SET_FLPRO( IF_FLPRO = ME->R_CUST_P0_SHTPR->F_FLPRO ).
    ME->SET_PRTYO( IF_PRTYO = ME->R_CUST_P0_SHTPR->F_PRTYO ).
    ME->SET_NOCOO( IF_NOCOO = ME->R_CUST_P0_SHTPR->F_NOCOO ).

***--------------------------------------------------------------------------------------
*** Inside Print Details?
    if ME->R_CUST_P0_SHTPR->F_FPRFI     is not initial or
       ME->R_CUST_P0_SHTPR->F_PRCAI     is not initial or
       ME->R_CUST_P0_SHTPR->T_SP_INK_I  is not initial or
       ME->R_CUST_P0_SHTPR->T_SP_MARK_I is not initial.
      ME->SET_PRDEI( IF_PRDEI = ABAP_TRUE ).

***   Get Instance of Print Node Inside and Force Load Printing Details
      LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                                  IF_CREATE = SPACE ).
      if LR_GATE is bound.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SP_PRINT.
        endtry.
        if LR_PR_SP_PRINT is bound.
          LR_PR_SP_PRINT->LOAD_PRDET_BY_CUST( IR_CUST_SFG = ME->R_CUST_P0_SHTPR ).
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Outside Print Details?
    if ME->R_CUST_P0_SHTPR->F_FPRFO     is not initial or
       ME->R_CUST_P0_SHTPR->F_PRCAO     is not initial or
       ME->R_CUST_P0_SHTPR->T_SP_INK_O  is not initial or
       ME->R_CUST_P0_SHTPR->T_SP_MARK_O is not initial.
      ME->SET_PRDEO( IF_PRDEO = ABAP_TRUE ).

***   Get Instance of Print Node Outside and Force Load Printing Details
      LR_GATE = ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                                  IF_CREATE = SPACE ).
      if LR_GATE is bound.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SP_PRINT.
        endtry.
        if LR_PR_SP_PRINT is bound.
          LR_PR_SP_PRINT->LOAD_PRDET_BY_CUST( IR_CUST_SFG = ME->R_CUST_P0_SHTPR ).
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set Printing Details to no calculated
  else.
*** Get all Prints
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_IPRVT_P0_SP_PRINT
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
          check LR_PR_SP_PRINT is bound.
          LR_PR_SP_PRINT->INIT_CALCULATED( ).

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SP_PRINT.
      endtry.
    endloop.
  endif.

endmethod.
method SET_PRTYI.

  data:  LF_CHANGED     type        ABAP_BOOL.
  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_I
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYI ).

    move IF_PRTYI to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
    endif.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_PRTYP( IF_PRTYP = IF_PRTYI ).

  endif.

endmethod.
method SET_PRTYO.

  data:  LF_CHANGED     type        ABAP_BOOL.
  data:  LS_PARAM       type        /VCXI/VKSR_S_PARAM.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_PRINT type ref to ZCL_VCXI_P0SS_PR_SP_PRINT.


  LR_GATE =  ME->GET_SP_PRINT( IF_PRSID  = ZCL_VCXI_P0SS_PR_SP_PRINT=>C_PRSID_O
                               IF_CREATE = SPACE ).

  if LR_GATE is not bound.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYO ).

    move IF_PRTYO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
    endif.

  else.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_PRINT.
    endtry.

    check LR_PR_SP_PRINT is bound.
    LR_PR_SP_PRINT->SET_PRTYP( IF_PRTYP = IF_PRTYO ).

  endif.

endmethod.
method SET_PRTYP.

  case IF_PRSID.
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
      ME->SET_PRTYI( IF_PRTYI = IF_PRTYP
                     IF_SETBY = IF_SETBY ).
    when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
      ME->SET_PRTYO( IF_PRTYO = IF_PRTYP
                     IF_SETBY = IF_SETBY ).
  endcase.

endmethod.
method SET_SHTLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).

  move IS_SHTLE-SHTLE     to LS_PARAM-ATFLV.
  move IS_SHTLE-SHTLE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_SHTPR_BY_CUST.

*** Get Sheet Procurement Info's for Stock Materials
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_CALIP( IS_CALIP = ME->R_CUST_P0_SHTPR->S_CALIP ).
    ME->SET_BAWGT( IS_BAWGT = ME->R_CUST_P0_SHTPR->S_BAWGT ).
    ME->SET_BAWGP( IS_BAWGP = ME->R_CUST_P0_SHTPR->S_BAWGP ).
    ME->SET_SHTLE( IS_SHTLE = ME->R_CUST_P0_SHTPR->S_SHTLE ).
    ME->SET_SHTWI( IS_SHTWI = ME->R_CUST_P0_SHTPR->S_SHTWI ).
    ME->SET_FLCUT( IF_FLCUT = ME->R_CUST_P0_SHTPR->F_FLCUT ).
  endif.

endmethod.
method SET_SHTWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).

  move IS_SHTWI-SHTWI     to LS_PARAM-ATFLV.
  move IS_SHTWI-SHTWI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_TRFPR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRFPR ).

  move IF_TRFPR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method ZIF_VCXI_P0SS_CALIP~GET_CALIP.

  data: LF_POOTI    type          ZVCXI_P0S_POOTI,
        LF_CONTINUE type          ABAP_BOOL.
  data: LT_POOTI    type table of ZVCXI_P0S_POOTI.

  split IF_POOTI at ZIF_VCXI_P0SS_CALIP~C_POOTI_SEP into table LT_POOTI.

  loop at LT_POOTI into LF_POOTI.
    condense LF_POOTI.
    check LF_POOTI eq '*'     or
          LF_POOTI eq 'BASE'.

    LF_CONTINUE = ABAP_TRUE.
    exit.
  endloop.

  check LF_CONTINUE eq ABAP_TRUE.

  RS_CALIP = ME->GET_CALIP( ).

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~GET_PRINFO.

***--------------------------------------------------------------------------------------
*** Changeable for Dummys
  if ME->IS_DUMMY( ) eq ABAP_TRUE.
    move ABAP_TRUE to EF_CHANGEABLE.
  endif.

***--------------------------------------------------------------------------------------
*** Create if needed
  if IF_CREATE eq ABAP_TRUE.
    case IF_PRSID.
      when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
        if ME->GET_FLPRO( ) ne ABAP_TRUE.
          ME->SET_FLPRO( IF_FLPRO = ABAP_TRUE ).
        endif.
      when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
        if ME->GET_FLPRI( ) ne ABAP_TRUE.
          ME->SET_FLPRI( IF_FLPRI = ABAP_TRUE ).
        endif.
    endcase.
  endif.

***--------------------------------------------------------------------------------------
*** Print Type
  if EF_PRTYP is requested.
    move ME->GET_PRTYP( IF_PRSID = IF_PRSID ) to EF_PRTYP.
  endif.

***--------------------------------------------------------------------------------------
*** Number of Colors
  if EF_NOCOL is requested.
    move ME->GET_NOCOL( IF_PRSID = IF_PRSID ) to EF_NOCOL.
  endif.

***--------------------------------------------------------------------------------------
*** Print Gate
  if ER_GATE is requested.
    ER_GATE = ME->GET_SP_PRINT( IF_PRSID  = IF_PRSID
                                IF_CREATE = ABAP_FALSE ).
    if ER_GATE is not bound.
      case IF_PRSID.
        when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
          if ME->GET_FLPRO( ) eq ABAP_TRUE.
            move ME->R_GATE to ER_GATE.
          endif.
        when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
          if ME->GET_FLPRI( ) eq ABAP_TRUE.
            move ME->R_GATE to ER_GATE.
          endif.
      endcase.
    endif.
  endif.

endmethod.
method ZIF_VCXI_P0SS_PRALLOC~SET_PRINFO.

  data:  LR_GATE_SELF     type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_PRINT      type ref to ZCL_VCXI_P0SS_PR_PRINT,
         LR_PR_SP_PRINT   type ref to ZCL_VCXI_P0SS_PR_SP_PRINT,
         LR_PR_MS_SHTPR   type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR.

***--------------------------------------------------------------------------------------
*** Check is changeable
  check ME->IS_DUMMY( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Print Type
  if IF_PRTYP is supplied.
    ME->SET_PRTYP( IF_PRSID = IF_PRSID
                   IF_PRTYP = IF_PRTYP
                   IF_SETBY = IF_SETBY ).
  endif.

***--------------------------------------------------------------------------------------
*** Number of Colors
  if IF_NOCOL is supplied.
    ME->SET_NOCOL( IF_PRSID = IF_PRSID
                   IF_NOCOL = IF_NOCOL
                   IF_SETBY = IF_SETBY ).
  endif.

***--------------------------------------------------------------------------------------
*** Print Gate
  if IR_GATE is supplied.
    if IR_GATE is not bound.
***   Deactivate Print
      case IF_PRSID.
        when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
          ME->SET_FLPRI( IF_FLPRI = ABAP_FALSE
                         IF_SETBY = IF_SETBY ).
        when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
          ME->SET_FLPRO( IF_FLPRO = ABAP_FALSE
                         IF_SETBY = IF_SETBY ).
      endcase.
    else.
***   Activate Print
      case IF_PRSID.
        when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
          ME->SET_FLPRI( IF_FLPRI = ABAP_TRUE
                         IF_SETBY = IF_SETBY ).
        when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
          ME->SET_FLPRO( IF_FLPRO = ABAP_TRUE
                         IF_SETBY = IF_SETBY ).
      endcase.

***   Move Information from Print
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_PRINT.
      endtry.
      if LR_PR_PRINT is bound.
        try.
            LR_GATE_SELF = ME->GET_SP_PRINT( IF_PRSID  = IF_PRSID
                                             IF_CREATE = ABAP_TRUE ).
          catch /VCXI/CX_CKX.
            clear: LR_GATE_SELF.
        endtry.
        if LR_GATE_SELF is not bound.
          move ME->R_GATE to LR_GATE_SELF.
        endif.
        ME->MOVE_PRALLOC_PRINT( IF_PRSID       = IF_PRSID
                                IR_GATE_SOURCE = IR_GATE
                                IR_GATE_SELF   = LR_GATE_SELF ).
      endif.

***   Move Information from Sheet Procurement Print
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_SP_PRINT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_SP_PRINT.
      endtry.
      if LR_PR_SP_PRINT is bound.
        try.
            LR_GATE_SELF = ME->GET_SP_PRINT( IF_PRSID  = IF_PRSID
                                             IF_CREATE = ABAP_TRUE ).
          catch /VCXI/CX_CKX.
            clear: LR_GATE_SELF.
        endtry.
        if LR_GATE_SELF is not bound.
          move ME->R_GATE to LR_GATE_SELF.
        endif.
        ME->MOVE_PRALLOC_SP_PRINT( IF_PRSID       = IF_PRSID
                                   IR_GATE_SOURCE = IR_GATE
                                   IR_GATE_SELF   = LR_GATE_SELF ).
      endif.

***   Move Information from Sheet Procurement
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_MS_SHTPR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MS_SHTPR.
      endtry.
      if LR_PR_MS_SHTPR is bound.
        ME->MOVE_PRALLOC_MS_SHTPR( IF_PRSID       = IF_PRSID
                                   IR_GATE_SOURCE = IR_GATE
                                   IR_GATE_SELF   = ME->R_GATE ).
      endif.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Remove empty Print
  if ME->GET_PRTYP( IF_PRSID = IF_PRSID ) is initial and
     ME->GET_NOCOL( IF_PRSID = IF_PRSID ) is initial.
    case IF_PRSID.
      when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_INSIDE.
        ME->SET_FLPRI( IF_FLPRI = ABAP_FALSE
                       IF_SETBY = IF_SETBY ).
      when ZCL_VCXI_P0SS_CUST_PRINT=>C_PRSID_OUTSIDE.
        ME->SET_FLPRO( IF_FLPRO = ABAP_FALSE
                       IF_SETBY = IF_SETBY ).
    endcase.
  endif.

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WDRYW.

  data: LS_BAWGT           type        ZVCXI_P0S_S_BAWGT,
        LS_BAWGP           type        ZVCXI_P0S_S_BAWGP.

  LS_BAWGT = ME->GET_BAWGT( ).
  LS_BAWGP = ME->GET_BAWGP( ).

  ES_WDRYW-WDRYW     = LS_BAWGT-BAWGT.
  ES_WDRYW-WDRYW_UOM = LS_BAWGT-BAWGT_UOM.
  ES_WDRYA-WDRYA     = LS_BAWGP-BAWGP.
  ES_WDRYA-WDRYA_UOM = LS_BAWGP-BAWGP_UOM.

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WWETW.

  data: LS_BAWGT           type        ZVCXI_P0S_S_BAWGT,
        LS_BAWGP           type        ZVCXI_P0S_S_BAWGP.

  LS_BAWGT = ME->GET_BAWGT( ).
  LS_BAWGP = ME->GET_BAWGP( ).

  ES_WWETW-WWETW     = LS_BAWGT-BAWGT.
  ES_WWETW-WWETW_UOM = LS_BAWGT-BAWGT_UOM.
  ES_WWETA-WWETA     = LS_BAWGP-BAWGP.
  ES_WWETA-WWETA_UOM = LS_BAWGP-BAWGP_UOM.

endmethod.
method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

  data:          LS_PSQTY             type        ZVCXI_XCS_S_PSQTY,
                 LS_PSQTY_MATCH       type        ZVCXI_XCS_S_PSQTY,
                 LS_UOMCF             type        ZVCXI_XCS_S_UOMCF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_PSCALE         type ref to ZCL_VCXI_XCS_PR_PSCALE,
                 LR_PR_PSCALE_MATCH   type ref to ZCL_VCXI_XCS_PR_PSCALE.

*** Get Gates of Price Scales
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
        check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***     Get Price Scale Quantity
        move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

***     Convert Price Scale Quantity if needed
        if LS_PSQTY-PSQTY_UOM ne IS_PSQTY-PSQTY_UOM.
          read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
          LS_PSQTY-PSQTY_UOM = IS_PSQTY-PSQTY_UOM.
          if LS_UOMCF-UOMCF is not initial.
            LS_PSQTY-PSQTY     = LS_PSQTY-PSQTY / LS_UOMCF-UOMCF.
          else.
            clear: LS_PSQTY-PSQTY.
          endif.
        endif.

***     Check conversion was successful
        check IS_PSQTY-PSQTY_UOM eq LS_PSQTY-PSQTY_UOM.

***     Compare
        if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
           ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
             LS_PSQTY_MATCH-PSQTY is initial ).
          move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
          move LS_PSQTY     to LS_PSQTY_MATCH.
        endif.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PSCALE.
    endtry.
  endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
  check LR_PR_PSCALE_MATCH is bound.
  ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
  ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

*** Check if Conversion is needed for Price Unit
  if ES_PRICP-PRICP_UOM ne IS_PSQTY-PSQTY_UOM.
    read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
    ES_PRICP-PRICP_UOM = IS_PSQTY-PSQTY_UOM.
    if LS_UOMCF-UOMCF is not initial.
      ES_PRICE-PRICE     = ES_PRICE-PRICE * LS_UOMCF-UOMCF.
    endif.
  endif.

endmethod.
method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

*** Changeable depending on Flag - Price Scale modified
  RF_CHANGEABLE = ME->GET_FPSMO( ).

endmethod.
