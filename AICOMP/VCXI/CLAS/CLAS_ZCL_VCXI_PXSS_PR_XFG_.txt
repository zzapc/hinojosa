
class ZCL_VCXI_PXSS_PR_XFG definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_COMM_PREV
      abstract methods DO_FORWARD .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_PXSS_FG
      abstract methods GET_HNDDIM .
  interfaces ZIF_VCXI_XCS_NGREP .
  interfaces ZIF_VCXI_XCSS_MTS .

  constants C_IEVNT_O_DIKEY_CHANGED type /VCXI/VKSC_IEVNT value 'DIKEY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUTT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUTT_CHANGED' ##NO_TEXT.
  constants C_IPRVT_XFG type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_XFG' ##NO_TEXT.
  constants C_PARID_DIKEY type /VCXI/VKS_PARID value 'ZVCXI_P0_DIKEY' ##NO_TEXT.
  constants C_PARID_NOUTT type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTT' ##NO_TEXT.

  methods GET_DIKEY
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_DIKEY) type ZVCXI_P0SS_S_DIKEY
    raising
      /VCXI/CX_CKX .
  methods GET_ICONT
    returning
      value(RF_ICONT) type ZVCXI_P0S_ICONT
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ALLOW_MULTI type ABAP_BOOL
      !EF_NOUTT_MULTI type ZVCXI_PXS_NOUTT
    returning
      value(RF_NOUTT) type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_OUTPUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_OUTPUT) type ref to ZCL_VCXI_PXSS_PR_OUTPUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SHIPMGR
    exporting
      !ER_GATE_SHIPMGR type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SHIPMGR) type ref to ZCL_VCXI_XCSU_PR_SHIPMGR
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_DIKEY
    importing
      !IS_DIKEY type ZVCXI_P0SS_S_DIKEY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTT
    importing
      !IF_NOUTT type ZVCXI_PXS_NOUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_MRP type /VCXI/VKSC_IEVNT value 'INIT_MRP' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_COMPR type /VCXI/VKSC_IEVNT value 'RECALC_COMPR' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_CSPLIT type /VCXI/VKSC_IEVNT value 'RECALC_CSPLIT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DIKEY type /VCXI/VKSC_IEVNT value 'RECALC_DIKEY' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_PRODH type /VCXI/VKSC_IEVNT value 'RECALC_PRODH' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods CHECK_COMPR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIKEY
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_KDMAT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_MAKTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUTT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRODH
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_BOB_CMIR
    returning
      value(RR_BOB_CMIR) type ref to ZCL_VCXI_XCI_BOB_CMIR
    raising
      /VCXI/CX_CKX .
  methods GET_ICSPL
    returning
      value(RF_ICSPL) type ZVCXI_XCSP_ICSPL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_MRP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_COMPR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DIKEY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRODH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.

  data R_BOB_CMIR type ref to ZCL_VCXI_XCI_BOB_CMIR .
endclass. "ZCL_VCXI_PXSS_PR_XFG definition
class ZCL_VCXI_PXSS_PR_XFG implementation.
  method CHECK_COMPR.

    data: LF_COMPR   type ZVCXI_P0SS_COMPR,
          LF_ALLOWED type ABAP_BOOL.


*** Get Component Ratio
    LF_COMPR = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( importing EF_ALLOWED = LF_ALLOWED ).

    if LF_ALLOWED eq ABAP_TRUE.
      if LF_COMPR is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Component Ratio is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '035' ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Component Ratio is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '036' ).
        endif.
      endif.

    else.
      if LF_COMPR gt 1.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Component Ratio should not be maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '037' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_DIKEY.

*** Check Distribution Key
    if ME->GET_DIKEY( )-DIKEY gt 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Distribution Key greater 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '034' ).
      endif.
    endif.

  endmethod.
  method CHECK_KDMAT.

    data: LS_VBAP type VBAP.


*** Only check if Material Number has not been set
    check ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ) is initial.

*** Don't check if item is rejected
    ME->R_GATE->GET_APPDATA( )->GET_LOVC_APPDATA( exporting IF_TNAME = 'VBAP'
                                                  changing  CS_DATA  = LS_VBAP ).
    check LS_VBAP-ABGRU is initial.

*** Get Customer Material
    data(LF_KDMAT) = ME->ZIF_VCXI_PXSS_FG~GET_KDMAT( ).
    check LF_KDMAT is not initial.

***------------------------------------------------------------------------------------------------
*** Get Instance Business Object - Customer-Material Info Record
    data(LR_BOB_CMIR) = ME->GET_BOB_CMIR( ).
    check LR_BOB_CMIR is bound.

*** Check duplicate entries of Customer Material Number
    data(LS_KNMT) = LR_BOB_CMIR->GET_KNMT( IF_KDMAT = LF_KDMAT ).

    if LS_KNMT-MATNR is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Customer material &1 has already been used in info &2
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'VS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '003'
                                 IF_MSGV1 = LF_KDMAT
                                 IF_MSGV2 = LS_KNMT-MATNR ).
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Check other FGs for duplicates
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
      check LR_GATE ne ME->R_GATE.

      if cast ZIF_VCXI_PXSS_FG( LR_GATE->R_CLSPR )->GET_KDMAT( ) eq LF_KDMAT.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Customer material &1 is already defined for "&2"
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '026'
                                   IF_MSGV1 = LF_KDMAT
                                   IF_MSGV2 = LR_GATE->R_CLSPR->GET_DESCR( ) ).
        endif.
      endif.
    endloop.

  endmethod.
  method CHECK_MAKTX.

***------------------------------------------------------------------------------------------------
    if ME->ZIF_VCXI_PXSS_FG~GET_MAKTX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Material Description is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '021' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Description is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '022' ).
      endif.
    endif.

  endmethod.
  method CHECK_NOUTT.

*** Check Number of Outs
    if ME->GET_NOUTT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Outs is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '030' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Number of Outs is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '031' ).
      endif.
    endif.

  endmethod.
  method CHECK_PRODH.

    try.
        data(LF_PRODH) = ME->ZIF_VCXI_PXSS_FG~GET_PRODH( ).
        check LF_PRODH is not initial.
        ZCL_VCXI_XCS_SERVICE=>CHECK_PRODH( IF_PRODH = LF_PRODH ).

        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
          IR_MESSAGE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
        endif.
    endtry.

  endmethod.
  method GET_BOB_CMIR.

    if ME->R_BOB_CMIR is not bound.
      data(LR_APPDATA) = cast ZCL_VCXI_XCS_APPDATA( ME->R_GATE->GET_APPDATA( ) ).
      ME->R_BOB_CMIR = new #( IF_KUNNR = LR_APPDATA->S_KNVV_AG-KUNNR
                              IF_VKORG = LR_APPDATA->S_KNVV_AG-VKORG
                              IF_SPART = LR_APPDATA->S_KNVV_AG-SPART
                              IF_VTWEG = LR_APPDATA->S_KNVV_AG-VTWEG ).
    endif.

    RR_BOB_CMIR = ME->R_BOB_CMIR.

  endmethod.
  method GET_DESCR.

    data: LF_MAKTX type MAKTX.

*** Get Material Description
    LF_MAKTX = ME->ZIF_VCXI_PXSS_FG~GET_MAKTX( ).

    if LF_MAKTX is initial.
      RF_DESCR = SUPER->GET_DESCR( ).
    else.
      move LF_MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_DIKEY.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).
    move LS_PARAM-ATFLV to RS_DIKEY-DIKEY.
    move LS_PARAM-UNIT  to RS_DIKEY-DIKEY_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_ICONT.

    data: LT_PRVDR type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR type ref to /VCXI/CL_VKSR_GATE,
          LR_ICONT type ref to ZIF_VCXI_PXSS_ICONT.

*** Find Context Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_ICONT=>C_IPRVT_PX_ICONT
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC = 0.
    try.
        move LR_PRVDR->R_CLSPR ?to LR_ICONT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_ICONT.
    endtry.

    check LR_ICONT is bound.
    move LR_ICONT->GET_ICONT( ) to RF_ICONT.

  endmethod.
  method GET_ICSPL.

    data: LT_GATE   type        /VCXI/VKSR_TT_GATE.

*** Get all Finished Good Provider via Interface
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                     IF_INUSE  = ABAP_TRUE ).
    append ME->R_GATE to LT_GATE.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** Search for own Gate in Table
    read table LT_GATE with key TABLE_LINE = ME->R_GATE
                       transporting no fields.
    check SY-SUBRC eq 0.

*** Use Table Position as ID for Cost Split
    move SY-TABIX to RF_ICSPL.

  endmethod.
  method GET_NOUTT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_PR_OUTPUT type ref to ZCL_VCXI_PXSS_PR_OUTPUT.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).
    move LS_PARAM-ATFLV to RF_NOUTT.
    move LS_PARAM-SETBY to EF_SETBY.

*** Are multiple Outs allowed?
    if EF_ALLOW_MULTI is requested or
       EF_NOUTT_MULTI is requested.
      LR_PR_OUTPUT = ME->GET_PRVDR_OUTPUT( ).
      if LR_PR_OUTPUT is bound.
        EF_NOUTT_MULTI = LR_PR_OUTPUT->GET_NOUTT( importing EF_ALLOW_MULTI = EF_ALLOW_MULTI ).
      else.
        EF_ALLOW_MULTI = ABAP_FALSE.
      endif.
    endif.

  endmethod.
  method GET_PRVDR_OUTPUT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_OUTPUT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_OUTPUT=>C_IPRVT_PX_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_OUTPUT.

  endmethod.
  method GET_PRVDR_SHIPMGR.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Shipping Manager Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Shipping Manager Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_SHIPMGR.
          check RR_PR_SHIPMGR is bound.
          move LR_GATE to ER_GATE_SHIPMGR.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_SHIPMGR, ER_GATE_SHIPMGR.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Component Ratio
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COMPR( ) ).

*** Check Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MAKTX( ) ).

*** Check Customer Material Number (CMIR)
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_KDMAT( ) ).

*** Check Product Hierarchy
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRODH( ) ).

*** Check Number of Outs (total)
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOUTT( ) ).

*** Check Distribution Key
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DIKEY( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Component Ratio
    ME->CHECK_COMPR( IR_MESSAGE = IR_MESSAGE ).

*** Check Material Description
    ME->CHECK_MAKTX( IR_MESSAGE = IR_MESSAGE ).

*** Check Customer Material Number (CMIR)
    ME->CHECK_KDMAT( IR_MESSAGE = IR_MESSAGE ).

*** Check Product Hierarchy
    ME->CHECK_PRODH( IR_MESSAGE = IR_MESSAGE ).

*** Check Number of Outs (total)
    ME->CHECK_NOUTT( IR_MESSAGE = IR_MESSAGE ).

*** Check Distribution Key
    ME->CHECK_DIKEY( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

      when C_IEVNT_I_RECALC_PRODH.
        ME->HANDLE_RECALC_PRODH( ).
      when C_IEVNT_I_RECALC_COMPR.
        ME->HANDLE_RECALC_COMPR( ).
      when C_IEVNT_I_RECALC_DIKEY.
        ME->HANDLE_RECALC_DIKEY( ).
      when C_IEVNT_I_RECALC_CSPLIT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_CSPLIT_CHANGED ).

      when C_IEVNT_I_INIT_MRP.
        ME->HANDLE_INIT_MRP( ).

***   Event Backwarding/Forwardin for Communication
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_BACKWARD_REQ ).
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_INIT_MRP.

*** Get Flag for MRP Settings
    data(LF_FMTSA) = ME->ZIF_VCXI_XCSS_MTS~GET_FMTSA( ).

*** Reset to update Plants if needed
    ME->ZIF_VCXI_XCSS_MTS~SET_FMTSA( IF_FMTSA = LF_FMTSA ).

  endmethod.
  method HANDLE_RECALC_COMPR.

    data: LF_COMPR   type ZVCXI_P0SS_COMPR,
          LF_SETBY   type /VCXI/VKSR_SETBY,
          LF_ALLOWED type ABAP_BOOL.


***--------------------------------------------------------------------------------------
*** Get Component Ratio and check if the usage of it is allowed
    LF_COMPR = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( importing EF_SETBY   = LF_SETBY
                                                         EF_ALLOWED = LF_ALLOWED ).
    if LF_ALLOWED eq ABAP_TRUE.
***   Only go on if not set by user and not empty
      check   LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
            ( LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER and
              LF_COMPR eq 0 ).
***   Use Number of Outs
      LF_COMPR = ME->GET_NOUTT( ).
    else.
      move 1 to LF_COMPR.
    endif.

*** Set Component Ratio
    ME->ZIF_VCXI_PXSS_FG~SET_COMPR( IF_COMPR = LF_COMPR ).

  endmethod.
  method HANDLE_RECALC_DIKEY.

    data: LF_NOUTT  type ZVCXI_PXS_NOUTT,
          LF_FACTOR type F,
          LF_SETBY  type /VCXI/VKSR_SETBY.
    data: LS_DIKEY type ZVCXI_P0SS_S_DIKEY.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.


***------------------------------------------------------------------------------------------------
*** Get Distribution Key (Unit) and SETBY Value
    LS_DIKEY = ME->GET_DIKEY( importing EF_SETBY = LF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Get all sibling provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
    if LINES( LT_GATE ) le 1.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    endif.


*** Only go on if not set by user and not empty
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
          LS_DIKEY-DIKEY eq 0.

***------------------------------------------------------------------------------------------------
*** Loop through all siblings and collect total number of Outs
    loop at LT_GATE into LR_GATE.
      case type of LR_GATE->R_CLSPR.
        when type ZCL_VCXI_PXSS_PR_XCONO into LR_PR_XCONO.
          LF_NOUTT += LR_PR_XCONO->GET_NOUTT( ).
      endcase.
    endloop.

*** Determine Factor
    if LINES( LT_GATE ) gt 1.     " not only me
      if LF_NOUTT gt 0.
        LF_FACTOR = ME->GET_NOUTT( ) / LF_NOUTT.
      else.
        LF_FACTOR = 0.
      endif.
    else.
      LF_FACTOR = 1.
    endif.

    LS_DIKEY-DIKEY = LF_FACTOR * 100.

***------------------------------------------------------------------------------------------------
*** Set Distribution Key
    ME->SET_DIKEY( IS_DIKEY = LS_DIKEY ).

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.


*** Only calcualate if calculation is active
    ME->ZIF_VCXI_PXSS_FG~GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

*** Get generated Material Description
    LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

*** Set new Description
    ME->ZIF_VCXI_PXSS_FG~SET_MAKTX( IF_MAKTX = LF_MAKTX ).

  endmethod.
  method HANDLE_RECALC_PRODH.
  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method SET_DIKEY.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DIKEY ).

    move IS_DIKEY-DIKEY     to LS_PARAM-ATFLV.
    move IS_DIKEY-DIKEY_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_DIKEY_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).

    move IF_NOUTT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUTT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LF_ALLOW_MULTI type ABAP_BOOL.
    data: LR_PR_SHIPMGR type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.
    field-symbols: <S_FDI_XFG> type ZVCXI_PXSS_S_FDI_XFG.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_XFG.
    assign RR_DATA->* to <S_FDI_XFG>.


***------------------------------------------------------------------------------------------------
*** Get Material Number
    <S_FDI_XFG>-MATNR = ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ).

*** Get Material Description
    <S_FDI_XFG>-MAKTX = ME->ZIF_VCXI_PXSS_FG~GET_MAKTX( importing EF_FOVRR = <S_FDI_XFG>-FOVRR_MAKTX ).

*** Get Material Belonging to the Customer
    <S_FDI_XFG>-KDMAT = ME->ZIF_VCXI_PXSS_FG~GET_KDMAT( ).

*** Get Customer Description of Material
    <S_FDI_XFG>-KDPTX = ME->ZIF_VCXI_PXSS_FG~GET_KDPTX( ).

*** Get Component Ratio
    <S_FDI_XFG>-COMPR = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( importing EF_ALLOWED = <S_FDI_XFG>-COMPR_ALLOWED ).

*** Number Out (Total)
    <S_FDI_XFG>-NOUTT = ME->GET_NOUTT( importing EF_ALLOW_MULTI = LF_ALLOW_MULTI ).
    if LF_ALLOW_MULTI ne ABAP_TRUE. "Exclude if Multiple Outs are not allowed
      append 'NOUTT' to ET_FDMEX.
    endif.

***------------------------------------------------------------------------------------------------
*** Get Shipping Manger
    LR_PR_SHIPMGR = ME->GET_PRVDR_SHIPMGR( ).
    if LR_PR_SHIPMGR is bound.
      <S_FDI_XFG>-CNTXT = LR_PR_SHIPMGR->GET_CNTXT( ).
      <S_FDI_XFG>-SHSCH = LR_PR_SHIPMGR->GET_SHSCH( ).
      <S_FDI_XFG>-CPACK = LR_PR_SHIPMGR->GET_CPACK( ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_XFG_OLD type ZVCXI_PXSS_S_FDI_XFG,
          LS_FDI_XFG_NEW type ZVCXI_PXSS_S_FDI_XFG.
    data: LR_DATA_OLD   type ref to DATA,
          LR_PR_SHIPMGR type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_XFG_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_XFG_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Material Description
    if LS_FDI_XFG_OLD-MAKTX        ne LS_FDI_XFG_NEW-MAKTX or
       LS_FDI_XFG_OLD-FOVRR_MAKTX  ne LS_FDI_XFG_NEW-FOVRR_MAKTX.
      if LS_FDI_XFG_NEW-FOVRR_MAKTX ne ABAP_FALSE.
        ME->ZIF_VCXI_PXSS_FG~SET_MAKTX( IF_MAKTX = LS_FDI_XFG_NEW-MAKTX
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->ZIF_VCXI_PXSS_FG~SET_MAKTX( IF_MAKTX = LS_FDI_XFG_NEW-MAKTX
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Material Belonging to the Customer
    if LS_FDI_XFG_OLD-KDMAT ne LS_FDI_XFG_NEW-KDMAT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'KDMAT' ] ).
      ME->ZIF_VCXI_PXSS_FG~SET_KDMAT( IF_KDMAT = LS_FDI_XFG_NEW-KDMAT
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Customer Description of Material
    if LS_FDI_XFG_OLD-KDPTX ne LS_FDI_XFG_NEW-KDPTX and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'KDPTX' ] ).
      ME->ZIF_VCXI_PXSS_FG~SET_KDPTX( IF_KDPTX = LS_FDI_XFG_NEW-KDPTX
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Component Ratio
    if LS_FDI_XFG_OLD-COMPR_ALLOWED eq ABAP_TRUE and
       LS_FDI_XFG_OLD-COMPR ne LS_FDI_XFG_NEW-COMPR and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'COMPR' ] ).
      ME->ZIF_VCXI_PXSS_FG~SET_COMPR( IF_COMPR = LS_FDI_XFG_NEW-COMPR
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Number Out (Total)
    if LS_FDI_XFG_OLD-NOUTT ne LS_FDI_XFG_NEW-NOUTT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'NOUTT' ] ).
      ME->SET_NOUTT( IF_NOUTT = LS_FDI_XFG_NEW-NOUTT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***------------------------------------------------------------------------------------------------
*** Get Shipping Manger
    LR_PR_SHIPMGR = ME->GET_PRVDR_SHIPMGR( ).
    if LR_PR_SHIPMGR is bound.
      if LS_FDI_XFG_OLD-SHSCH ne LS_FDI_XFG_NEW-SHSCH and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'SHSCH' ] ).
        LR_PR_SHIPMGR->SET_SHSCH( IF_SHSCH = LS_FDI_XFG_NEW-SHSCH
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
      if LS_FDI_XFG_OLD-CPACK ne LS_FDI_XFG_NEW-CPACK and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'CPACK' ] ).
        LR_PR_SHIPMGR->SET_CPACK( IF_CPACK = LS_FDI_XFG_NEW-CPACK
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_COMPR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_COMPR ).
    RF_COMPR = LS_PARAM-ATFLV.
    EF_SETBY = LS_PARAM-SETBY.


    if EF_ALLOWED is requested.
      EF_ALLOWED = cond #( when LINES( ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                                              IF_INUSE = ABAP_TRUE ) ) gt 1 then ABAP_TRUE
                                                                                            else ABAP_FALSE ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_CSPLIT.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE        type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_CSPLIT>  type ZVCXI_PXSS_S_CSPLIT.

***--------------------------------------------------------------------------------------
*** Get all Finished Good Provider via Interface
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_FG=>C_IPRVT_FG
                                     IF_INUSE = ABAP_TRUE ).
    if LT_GATE is not initial.
      ME->GET_PRVDR_OUTPUT( importing ER_GATE = LR_GATE_OUTPUT ).
      check LR_GATE_OUTPUT is bound.

***   Ignore other Finish Goods sharing same Output after MBQ
      loop at LT_GATE into LR_GATE.
        if LR_GATE_OUTPUT->IS_PARENT( IR_GATE_CHILD = LR_GATE ) and
           cast ZIF_VCXI_PXSS_FG( LR_GATE->R_CLSPR )->GET_MATNR( ) is not initial.
          delete LT_GATE.
        endif.
      endloop.

***   Including self and sorted the list by Tree Position
      append ME->R_GATE to LT_GATE.
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

***   Add an Cost Split entry for each Finished Good
      loop at LT_GATE into LR_GATE.
        append initial line to RT_CSPLIT assigning <S_CSPLIT>.
        move SY-TABIX to <S_CSPLIT>-ICSPL.
        shift <S_CSPLIT>-ICSPL left deleting leading SPACE.
        if LR_GATE eq ME->R_GATE.    " Own Gate carries 100%
          <S_CSPLIT>-S_DCSPL-DCSPL     = 100.
          <S_CSPLIT>-S_DCSPL-DCSPL_UOM = '%'.
          <S_CSPLIT>-COMPR             = ME->ZIF_VCXI_PXSS_FG~GET_COMPR( ).
          <S_CSPLIT>-QFACT             = ME->ZIF_VCXI_PXSS_FG~GET_QFACT( ).
        else.
          <S_CSPLIT>-S_DCSPL-DCSPL     = 0.
          <S_CSPLIT>-S_DCSPL-DCSPL_UOM = '%'.
        endif.
      endloop.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_KDMAT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDMAT ).
    move LS_PARAM-STRNG to RF_KDMAT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_KDPTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDPTX ).
    move LS_PARAM-STRNG to RF_KDPTX.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_MAKTX ).
    move LS_PARAM-STRNG to RF_MAKTX.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                         when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                          else ABAP_FALSE ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_MATNR.

    data: LS_LEOKY type  /VCXI/VKSR_S_LEOKY,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    RF_MATNR = LS_LEOKY-LEOKY.
    EF_SETBY = LS_LEOKY-SETBY.

    check RF_MATNR is not initial.

***----------------------------------------------------------------------------
    if EF_MAKTX is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR      = RF_MATNR
          SPRAS      = SY-LANGU
        importing
          WMAKT      = LS_MAKT
        exceptions
          WRONG_CALL = 1
          NOT_FOUND  = 2
          others     = 3.

      if SY-SUBRC ne 0.
        clear EF_MAKTX.
      else.
        EF_MAKTX = LS_MAKT-MAKTX.
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_PRODH.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_PRODH ).
    move LS_PARAM-ATWRT to RF_PRODH.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                                                          else ABAP_FALSE ).
    endif.

    check RF_PRODH is not initial.

    if EF_DESCR is requested.
      EF_DESCR = ZCL_VCXI_XCS_SERVICE=>GET_PRODH_DESCR( IF_PRODH = RF_PRODH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_PRVDR_AREA_WGT.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


    clear: RR_PR_AREA_WGT,
           ER_GATE.

***--------------------------------------------------------------------------------------
*** Get Area & Weight provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_AREA_WGT=>C_IPRVT_PX_AREA_WGT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Area & Weight Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_AREA_WGT.
          check RR_PR_AREA_WGT is bound.
          move LR_GATE to ER_GATE.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_AREA_WGT, ER_GATE.
      endtry.
    endloop.

  endmethod.
  method ZIF_VCXI_PXSS_FG~GET_QFACT.

    RF_QFACT = 1 * ME->ZIF_VCXI_PXSS_FG~GET_COMPR( ).

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_COMPR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_COMPR ).

    move IF_COMPR           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_COMPR_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_KDMAT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDMAT ).

    move IF_KDMAT to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_KDMAT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_KDPTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_KDPTX ).

    move IF_KDPTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_KDPTX_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_MATNR.

    data:  LF_CHANGED  type ABAP_BOOL.
    data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

    move IF_MATNR to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.

    LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_MATNR_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FG~SET_PRODH.

    data: LF_SETBY   type /VCXI/VKSR_SETBY,
          LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_FG~C_PARID_PRODH ).

    if IF_PRODH is supplied.
      LS_PARAM-ATWRT = IF_PRODH.
    endif.

    LS_PARAM-SETBY = LF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_FG~C_IEVNT_O_PRODH_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

***------------------------------------------------------------------------------------------------
*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = ME->GET_DESCR( )
                                                    IF_DESCR      = ME->GET_DESCR( )
                                                    IF_ICON       = 'sap-icon://form'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
    data(LR_PR_SHIPMGR) = cast ZCL_VCXI_PXSU_PR_SHIPMGR( ME->GET_PRVDR_SHIPMGR( ) ).
    if LR_PR_SHIPMGR is bound.
      LR_PR_SHIPMGR->ZIF_VCXI_XCS_NGREP~FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                              changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
    endif.

  endmethod.
  method ZIF_VCXI_XCSS_MTS~GET_FMTSA.

*** Get MRP Settings Provider
    ET_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_MRP=>C_IPRVT_XCS_MRP
                                     IF_INUSE = ABAP_TRUE ).

*** No MRP allowed in case of existing Material Number (Data managed directly by Material Master)
*** otherwise based on existing provider
    RF_FMTSA = cond #( when ME->ZIF_VCXI_PXSS_FG~GET_MATNR( ) is not initial then ABAP_UNDEFINED
                       when ET_GATE is not initial then ABAP_TRUE
                                                   else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_XCSS_MTS~SET_FMTSA.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE,
          LT_WERKS type T_WERKS.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get current Status and MRP Settings Gates
    data(LF_FMTSA) = ME->ZIF_VCXI_XCSS_MTS~GET_FMTSA( importing ET_GATE = LT_GATE ).

*** Check if requested status is allowed
    LF_FMTSA = switch #( LF_FMTSA when ABAP_UNDEFINED then ABAP_FALSE      "Not allowed
                                                      else IF_FMTSA ).

    case LF_FMTSA.
      when ABAP_FALSE or ABAP_UNDEFINED.  "Deactivate or not allowed
        loop at LT_GATE into LR_GATE.
          LR_GATE->DO_FREE( ).
        endloop.

      when ABAP_TRUE.  "Activate
***     Collect Specification and Application Data Plant
        collect ME->GET_WERKS( ) into LT_WERKS.
        collect ME->R_GATE->GET_APPDATA( )->F_WERKS into LT_WERKS.

***     Create required Provider
        ZCL_VCXI_XCSS_PR_MRP=>INIT_AS_PRVDR( IR_GATE_PARENT = ME->R_GATE
                                             IT_WERKS       = LT_WERKS ).
    endcase.

  endmethod.
