
class ZCL_VCXI_P2SS_PR_FCPRDTL definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P4SS_PRDTL .
  interfaces ZIF_VCXI_PXSS_PRINT_COM .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IEVNT_O_ADDWT_CHANGED type /VCXI/VKSC_IEVNT value 'ADDWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BOXPA_CHANGED type /VCXI/VKSC_IEVNT value 'BOXPA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COUAR_CHANGED type /VCXI/VKSC_IEVNT value 'COUAR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ECMA_CHANGED type /VCXI/VKSC_IEVNT value 'ECMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FDUST_CHANGED type /VCXI/VKSC_IEVNT value 'FDUST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FTUCK_CHANGED type /VCXI/VKSC_IEVNT value 'FTUCK_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GRAIO_CHANGED type /VCXI/VKSC_IEVNT value 'GRAIO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GRAMM_CHANGED type /VCXI/VKSC_IEVNT value 'GRAMM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JEXT_CHANGED type /VCXI/VKSC_IEVNT value 'JEXT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOIPO_CHANGED type /VCXI/VKSC_IEVNT value 'JOIPO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOIWI_CHANGED type /VCXI/VKSC_IEVNT value 'JOIWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PAPGR_CHANGED type /VCXI/VKSC_IEVNT value 'PAPGR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROH2_CHANGED type /VCXI/VKSC_IEVNT value 'PROH2_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROHE_CHANGED type /VCXI/VKSC_IEVNT value 'PROHE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROLE_CHANGED type /VCXI/VKSC_IEVNT value 'PROLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PROWI_CHANGED type /VCXI/VKSC_IEVNT value 'PROWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTPL_CHANGED type /VCXI/VKSC_IEVNT value 'SHTPL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTPW_CHANGED type /VCXI/VKSC_IEVNT value 'SHTPW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_ADDWT type /VCXI/VKS_PARID value 'ZVCXI_PX_ADDWT' ##NO_TEXT.
  constants C_PARID_BOXPA type /VCXI/VKS_PARID value 'ZVCXI_P0_BOXPA' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_COUAR type /VCXI/VKS_PARID value 'ZVCXI_PX_COUAR' ##NO_TEXT.
  constants C_PARID_ECMA type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSTY' ##NO_TEXT.
  constants C_PARID_FDUST type /VCXI/VKS_PARID value 'ZVCXI_PC_FDUST' ##NO_TEXT.
  constants C_PARID_FTUCK type /VCXI/VKS_PARID value 'ZVCXI_PC_FTUCK' ##NO_TEXT.
  constants C_PARID_GRAIO type /VCXI/VKS_PARID value 'ZVCXI_PF_GRAIO' ##NO_TEXT.
  constants C_PARID_GRAMM type /VCXI/VKS_PARID value 'ZVCXI_P0_GRAMM' ##NO_TEXT.
  constants C_PARID_JEXTB type /VCXI/VKS_PARID value 'ZVCXI_P0_JEXTB' ##NO_TEXT.
  constants C_PARID_JEXTT type /VCXI/VKS_PARID value 'ZVCXI_P0_JEXTT' ##NO_TEXT.
  constants C_PARID_JOILE type /VCXI/VKS_PARID value 'ZVCXI_P0_JOILE' ##NO_TEXT.
  constants C_PARID_JOIPO type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIPO' ##NO_TEXT.
  constants C_PARID_JOITY type /VCXI/VKS_PARID value 'ZVCXI_P0_JOITY' ##NO_TEXT.
  constants C_PARID_JOIWI type /VCXI/VKS_PARID value 'ZVCXI_P0_JOIWI' ##NO_TEXT.
  constants C_PARID_PAPGR type /VCXI/VKS_PARID value 'ZVCXI_PF_PAPGR' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.
  constants C_PARID_PROH2 type /VCXI/VKS_PARID value 'ZVCXI_PC_PROH2' ##NO_TEXT.
  constants C_PARID_PROHE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROHE' ##NO_TEXT.
  constants C_PARID_PROLE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROLE' ##NO_TEXT.
  constants C_PARID_PROWI type /VCXI/VKS_PARID value 'ZVCXI_P0_PROWI' ##NO_TEXT.
  constants C_PARID_SHTPL type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTPL' ##NO_TEXT.
  constants C_PARID_SHTPW type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTPW' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  constants C_TPRST_ECMA type ZVCXI_P0SS_TPRST value 'ECMA' ##NO_TEXT.

  methods CHECK_CUST_DESIGN
    returning
      value(RF_FCUSD) type ZVCXI_P0SS_FCUSD
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_BOXPA
    returning
      value(RF_BOXPA) type ZVCXI_P0SS_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_JOITY
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_JOITY) type ZVCXI_P0S_JOITY
    raising
      /VCXI/CX_CKX .
  methods GET_COUAR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COUAR) type ZVCXI_PXS_S_COUAR
    raising
      /VCXI/CX_CKX .
  methods GET_ECMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
      !ER_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY
    returning
      value(RF_ECMA) type ZVCXI_PFSS_ECMA
    raising
      /VCXI/CX_CKX .
  methods GET_FDUST
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FDUST) type ZVCXI_PCSS_S_FDUST
    raising
      /VCXI/CX_CKX .
  methods GET_FTUCK
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_FTUCK) type ZVCXI_PCSS_S_FTUCK
    raising
      /VCXI/CX_CKX .
  methods GET_GRAIO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_GRAIO) type ZVCXI_PFSS_GRAIO
    raising
      /VCXI/CX_CKX .
  methods SET_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_JOILE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JOILE) type ZVCXI_P0S_S_JOILE
    raising
      /VCXI/CX_CKX .
  methods GET_JOIPO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_JOIPO) type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  methods SET_JOILE
    importing
      !IS_JOILE type ZVCXI_P0S_S_JOILE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRL type ZVCXI_P0SS_FOVRL optional
    raising
      /VCXI/CX_CKX .
  methods GET_JOIWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JOIWI) type ZVCXI_P0S_S_JOIWI
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRODIM_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_JEXTB
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JEXTB) type ZVCXI_P0SS_S_JEXTB
    raising
      /VCXI/CX_CKX .
  methods GET_JEXTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_JEXTT) type ZVCXI_P0SS_S_JEXTT
    raising
      /VCXI/CX_CKX .
  methods GET_PROH2
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROH2) type ZVCXI_PCSS_S_PROH2
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_ELEMENTS
    returning
      value(RT_ELEMENT) type ZVCXI_P0SS_TT_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTLE) type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
  methods GET_SHTPL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTPL) type ZVCXI_P0SS_S_SHTPL
    raising
      /VCXI/CX_CKX .
  methods GET_SHTPW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTPW) type ZVCXI_P0SS_S_SHTPW
    raising
      /VCXI/CX_CKX .
  methods GET_SHTWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTWI) type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_BOXPA
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COUAR
    importing
      !IS_COUAR type ZVCXI_PXS_S_COUAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ECMA
    importing
      !IF_ECMA type ZVCXI_PFSS_ECMA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_FDUST
    importing
      !IS_FDUST type ZVCXI_PCSS_S_FDUST optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FTUCK
    importing
      !IS_FTUCK type ZVCXI_PCSS_S_FTUCK optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAIO
    importing
      !IF_GRAIO type ZVCXI_PFSS_GRAIO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIPO
    importing
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOIWI
    importing
      !IS_JOIWI type ZVCXI_P0S_S_JOIWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROH2
    importing
      !IS_PROH2 type ZVCXI_PCSS_S_PROH2 optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_JEXTT
    importing
      !IS_JEXTT type ZVCXI_P0SS_S_JEXTT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JEXTB
    importing
      !IS_JEXTB type ZVCXI_P0SS_S_JEXTB optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLE
    importing
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTPL
    importing
      !IS_SHTPL type ZVCXI_P0SS_S_SHTPL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTPW
    importing
      !IS_SHTPW type ZVCXI_P0SS_S_SHTPW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTWI
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_PRODIM type /VCXI/VKSC_IEVNT value 'INIT_PRODIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_AREA type /VCXI/VKSC_IEVNT value 'RECALC_AREA' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_HNDDIM type /VCXI/VKSC_IEVNT value 'RECALC_HNDDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_JOIDIM type /VCXI/VKSC_IEVNT value 'RECALC_JOIDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SHTDIM type /VCXI/VKSC_IEVNT value 'RECALC_SHTDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_WEIGHT type /VCXI/VKSC_IEVNT value 'RECALC_WEIGHT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_JOILE_CHANGED type /VCXI/VKSC_IEVNT value 'JOILE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_JOITY_CHANGED type /VCXI/VKSC_IEVNT value 'JOITY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTLE_CHANGED type /VCXI/VKSC_IEVNT value 'SHTLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTWI_CHANGED type /VCXI/VKSC_IEVNT value 'SHTWI_CHANGED' ##NO_TEXT.
  constants C_PARID_SHTLE type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLE' ##NO_TEXT.
  constants C_PARID_SHTWI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTWI' ##NO_TEXT.

  methods CHECK_CALIP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_ECMA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_GRAMM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOIPO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PAPGR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRODIM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SURWT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_FOLDIM
    returning
      value(RS_FOLDIM) type ZVCXI_PXS_S_FOLDIM
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SCORE_MGR
    exporting
      !ER_GATE_SCORE_MGR type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SCORE_MGR) type ref to ZCL_VCXI_PXSS_PR_SCORE_MGR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_PRODIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_JOIDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P2SS_PR_FCPRDTL definition
class ZCL_VCXI_P2SS_PR_FCPRDTL implementation.
  method CHECK_CALIP.

*** Check Caliper
    if ME->GET_CALIP( )-CALIP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Caliper is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '125' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Caliper is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '126' ).
      endif.
    endif.

  endmethod.
  method CHECK_CUST_DESIGN.

    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


    ME->GET_ECMA( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.
    RF_FCUSD = LR_CUST_PRSTY->GET_FCUSD( ).

  endmethod.
  method CHECK_ECMA.

    data: LF_ECMA type ZVCXI_PFSS_ECMA.


    LF_ECMA = ME->GET_ECMA( ).
    if LF_ECMA is initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     ECMA is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '103' ).
      endif.

    else.
***   Check Existance
      case ZCL_VCXI_PFSS_CUST_ECMA=>CHECK_PRSTY_EXIST( IF_PRSTY = LF_ECMA ).
        when ABAP_TRUE.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          if IR_MESSAGE is bound.
***         ECMA is maintained and valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '101' ).
          endif.
        when others.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
          if IR_MESSAGE is bound.
***         ECMA is maintained but not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '102' ).
          endif.
      endcase.
    endif.

  endmethod.
  method CHECK_GRAMM.

*** Check Grammage
    if ME->GET_GRAMM( )-GRAMM is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Grammage is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '123' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Grammage is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '124' ).
      endif.
    endif.

  endmethod.
  method CHECK_JOIPO.

    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


    ME->GET_ECMA( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.
    RF_ELMST = switch #( LR_CUST_PRSTY->CHECK_JOIPO( IF_JOIPO   = ME->GET_JOIPO( )
                                                     IR_MESSAGE = IR_MESSAGE ) when ABAP_TRUE then /VCXI/CL_VKSR_SERVICE=>C_ELMST_G
                                                                                              else /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).

  endmethod.
  method CHECK_PAPGR.

*** Check Paper Grade
    if ME->GET_PAPGR( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Paper Grade is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '121' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Paper Grade is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '122' ).
      endif.
    endif.

  endmethod.
  method CHECK_PRODIM.

    data: LF_COMPLETE type ABAP_BOOL.
    data: LR_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get Product Style Customizing and Elements
    ME->GET_ECMA( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.

***--------------------------------------------------------------------------------------
*** Check Element Values
    LF_COMPLETE = LR_CUST_PRSTY->CHECK_ELEMV( IT_ELEMENT = ME->GET_PRSTY_ELEMENTS( )
                                              IF_BOXPA   = ME->GET_BOXPA( )
                                              IR_MESSAGE = IR_MESSAGE ).

    RF_ELMST = switch #( LF_COMPLETE when ABAP_TRUE then /VCXI/CL_VKSR_SERVICE=>C_ELMST_G
                                                    else /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).

  endmethod.
  method CHECK_SURWT.

*** Check Surface Weight
    if ME->GET_SURWT( )-SURWT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Surface Weight is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '127' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Surface Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '128' ).
      endif.
    endif.

  endmethod.
  method GET_ADDWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).
    move LS_PARAM-ATFLV to RS_ADDWT-ADDWT.
    move LS_PARAM-UNIT  to RS_ADDWT-ADDWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BOXPA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).
    move LS_PARAM-ATWRT to RF_BOXPA.

  endmethod.
  method GET_CALIP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
    move LS_PARAM-ATFLV to RS_CALIP-CALIP.
    move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_COUAR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUAR ).
    move LS_PARAM-ATFLV to RS_COUAR-COUAR.
    move LS_PARAM-UNIT  to RS_COUAR-COUAR_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_ECMA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ECMA ).
    move LS_PARAM-ATWRT to RF_ECMA.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_ECMA is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PRSTY_DESCR( IF_TPRST = C_TPRST_ECMA
                                                            IF_PRSTY = RF_ECMA ).
    endif.

    if ER_CUST_PRSTY is requested.
***   Customizing Instance for Product Style
      try.
          ER_CUST_PRSTY = ZCL_VCXI_PXSS_CUST_PRSTY=>GET_INSTANCE( IF_TPRST = ZCL_VCXI_P2SS_PR_FCFG=>C_TPRST_ECMA
                                                                  IF_PRSTY = RF_ECMA ).
        catch /VCXI/CX_CKX.
          clear ER_CUST_PRSTY.
      endtry.
    endif.

  endmethod.
  method GET_FDUST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDUST ).
    move LS_PARAM-ATFLV to RS_FDUST-FDUST.
    move LS_PARAM-UNIT  to RS_FDUST-FDUST_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FOLDIM.

    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get ECMA Customizing
    ME->GET_ECMA( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.

*** Get Folding Dimensions
    RS_FOLDIM = LR_CUST_PRSTY->GET_FOLDIM( IF_ORIEN   = ME->GET_GRAIO( )
                                           IT_ELEMENT = ME->GET_PRSTY_ELEMENTS( ) ).

  endmethod.
  method GET_FTUCK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FTUCK ).
    move LS_PARAM-ATFLV to RS_FTUCK-FTUCK.
    move LS_PARAM-UNIT  to RS_FTUCK-FTUCK_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GRAIO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAIO ).
    move LS_PARAM-ATWRT to RF_GRAIO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GRAMM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).
    RS_GRAMM-GRAMM     = LS_PARAM-ATFLV.
    RS_GRAMM-GRAMM_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_JEXTB.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTB ).
    move LS_PARAM-ATFLV to RS_JEXTB-JEXTB.
    move LS_PARAM-UNIT  to RS_JEXTB-JEXTB_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JEXTT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTT ).
    move LS_PARAM-ATFLV to RS_JEXTT-JEXTT.
    move LS_PARAM-UNIT  to RS_JEXTT-JEXTT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOILE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).
    move LS_PARAM-ATFLV to RS_JOILE-JOILE.
    move LS_PARAM-UNIT  to RS_JOILE-JOILE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOIPO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).
    move LS_PARAM-ATWRT to RF_JOIPO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOITY.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOITY ).
    move LS_PARAM-ATWRT to RF_JOITY.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_JOITY_DESCR( IF_JOITY = RF_JOITY ).
    endif.

  endmethod.
  method GET_JOIWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).
    move LS_PARAM-ATFLV to RS_JOIWI-JOIWI.
    move LS_PARAM-UNIT  to RS_JOIWI-JOIWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PAPGR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).
    RF_PAPGR = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_PRODIM_DESCR.

    data: LF_BOXPA type ZVCXI_P0SS_BOXPA.
    data: LR_CUST_PRSTY  type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get ECMA Customizing and Part of Box
    ME->GET_ECMA( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    LF_BOXPA = ME->GET_BOXPA( ).

    if LR_CUST_PRSTY is bound.
***   Length
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_LENGTH
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'L' else '/L' ).
      endif.

***   Width
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_WIDTH
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'W' else '/W' ).
      endif.

***   Height
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'H' else '/H' ).
      endif.

***   Second Height
      if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT2
                                       IF_BOXPA = LF_BOXPA ).
        RF_DESCR = RF_DESCR && switch /VCXI/CKX_DESCR( RF_DESCR when '' then 'h' else '/h' ).
      endif.
    else.
***   Fallback
      RF_DESCR = 'L/W/H'.
    endif.

*** Full Description String
    RF_DESCR = 'Product Dim. ('(T01) && RF_DESCR && ')'.

  endmethod.
  method GET_PROH2.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROH2 ).
    move LS_PARAM-ATFLV to RS_PROH2-PROH2.
    move LS_PARAM-UNIT  to RS_PROH2-PROH2_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROHE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).
    move LS_PARAM-ATFLV to RS_PROHE-PROHE.
    move LS_PARAM-UNIT  to RS_PROHE-PROHE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).
    move LS_PARAM-ATFLV to RS_PROLE-PROLE.
    move LS_PARAM-UNIT  to RS_PROLE-PROLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PROWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).
    move LS_PARAM-ATFLV to RS_PROWI-PROWI.
    move LS_PARAM-UNIT  to RS_PROWI-PROWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRSTY_ELEMENTS.

    data: LS_PROLE type ZVCXI_P0S_S_PROLE,
          LS_PROWI type ZVCXI_P0S_S_PROWI,
          LS_PROHE type ZVCXI_P0S_S_PROHE,
          LS_PROH2 type ZVCXI_PCSS_S_PROH2,
          LS_JOIWI type ZVCXI_P0S_S_JOIWI,
          LS_FDUST type ZVCXI_PCSS_S_FDUST,
          LS_FTUCK type ZVCXI_PCSS_S_FTUCK,
          LS_SHTPL type ZVCXI_P0SS_S_SHTPL,
          LS_SHTPW type ZVCXI_P0SS_S_SHTPW,
          LS_CALIP type ZVCXI_P0SS_S_CALIP.
    field-symbols: <S_ELEMENT> type ZVCXI_P0SS_S_ELEMENT.

***--------------------------------------------------------------------------------------
*** Product Length
    LS_PROLE = ME->GET_PROLE( ).
    if LS_PROLE-PROLE is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_LENGTH
                      ELEMV     = LS_PROLE-PROLE
                      ELEMV_UOM = LS_PROLE-PROLE_UOM
                    ) to RT_ELEMENT.
    endif.

*** Product Width
    LS_PROWI = ME->GET_PROWI( ).
    if LS_PROWI-PROWI is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_WIDTH
                      ELEMV     = LS_PROWI-PROWI
                      ELEMV_UOM = LS_PROWI-PROWI_UOM
                    ) to RT_ELEMENT.
    endif.

*** Product Height
    LS_PROHE = ME->GET_PROHE( ).
    if LS_PROHE-PROHE is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT
                      ELEMV     = LS_PROHE-PROHE
                      ELEMV_UOM = LS_PROHE-PROHE_UOM
                    ) to RT_ELEMENT.
    endif.

*** Product Height2
    LS_PROH2 = ME->GET_PROH2( ).
    if LS_PROH2-PROH2 is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT2
                      ELEMV     = LS_PROHE-PROHE
                      ELEMV_UOM = LS_PROHE-PROHE_UOM
                    ) to RT_ELEMENT.
    endif.

*** Get Joint Width
    LS_JOIWI = ME->GET_JOIWI( ).
    if LS_JOIWI-JOIWI is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_JOIWI
                      ELEMV     = LS_JOIWI-JOIWI
                      ELEMV_UOM = LS_JOIWI-JOIWI_UOM
                    ) to RT_ELEMENT.
    endif.

*** Dust Flap
    LS_FDUST = ME->GET_FDUST( ).
    if LS_FDUST-FDUST is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FDUST
                      ELEMV     = LS_FDUST-FDUST
                      ELEMV_UOM = LS_FDUST-FDUST_UOM
                    ) to RT_ELEMENT.
    endif.

*** Tuck in Flap
    LS_FTUCK = ME->GET_FTUCK( ).
    if LS_FTUCK-FTUCK is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FTUCK
                      ELEMV     = LS_FTUCK-FTUCK
                      ELEMV_UOM = LS_FTUCK-FTUCK_UOM
                    ) to RT_ELEMENT.
    endif.

***--------------------------------------------------------------------------------------
*** Get Product Sheet Dimensions (Outbound)
    LS_SHTPL = ME->GET_SHTPL( ).
    if LS_SHTPL-SHTPL is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTPL
                      ELEMV     = LS_SHTPL-SHTPL
                      ELEMV_UOM = LS_SHTPL-SHTPL_UOM
                    ) to RT_ELEMENT.
    endif.

    LS_SHTPW = ME->GET_SHTPW( ).
    if LS_SHTPW-SHTPW is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_SHTPW
                      ELEMV     = LS_SHTPW-SHTPW
                      ELEMV_UOM = LS_SHTPW-SHTPW_UOM
                    ) to RT_ELEMENT.
    endif.

***--------------------------------------------------------------------------------------
*** Get Caliper
    move ME->GET_CALIP( ) to LS_CALIP.
    if LS_CALIP-CALIP is not initial.
      append value #( IELEM     = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_CALIP
                      ELEMV     = LS_CALIP-CALIP
                      ELEMV_UOM = LS_CALIP-CALIP_UOM
                    ) to RT_ELEMENT.
    endif.

  endmethod.
  method GET_PRVDR_SCORE_MGR.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Score Manager provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_IPRVT_PX_SCORE_MGR
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Score Manager Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_SCORE_MGR.
          check RR_PR_SCORE_MGR is bound.
          move LR_GATE to ER_GATE_SCORE_MGR.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_SCORE_MGR, ER_GATE_SCORE_MGR.
      endtry.
    endloop.

  endmethod.
  method GET_SHTLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).
    move LS_PARAM-ATFLV to RS_SHTLE-SHTLE.
    move LS_PARAM-UNIT  to RS_SHTLE-SHTLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTPL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPL ).
    move LS_PARAM-ATFLV to RS_SHTPL-SHTPL.
    move LS_PARAM-UNIT  to RS_SHTPL-SHTPL_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTPW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPW ).
    move LS_PARAM-ATFLV to RS_SHTPW-SHTPW.
    move LS_PARAM-UNIT  to RS_SHTPW-SHTPW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).
    move LS_PARAM-ATFLV to RS_SHTWI-SHTWI.
    move LS_PARAM-UNIT  to RS_SHTWI-SHTWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check ECMA
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_ECMA( ) ).

*** Check Product Dimensions
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PRODIM( ) ).

*** Check Paper Grade
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PAPGR( ) ).

*** Check Grammage
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_GRAMM( ) ).

*** Check Surface Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SURWT( ) ).

*** Check Caliper
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CALIP( ) ).

*** Check Joint Position
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_JOIPO( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check ECMA
    ME->CHECK_ECMA( IR_MESSAGE = IR_MESSAGE ).

*** Check Product Dimensions
    ME->CHECK_PRODIM( IR_MESSAGE = IR_MESSAGE ).

*** Check Paper Grade
    ME->CHECK_PAPGR( IR_MESSAGE = IR_MESSAGE ).

*** Check Grammage
    ME->CHECK_GRAMM( IR_MESSAGE = IR_MESSAGE ).

*** Check Surface Weight
    ME->CHECK_SURWT( IR_MESSAGE = IR_MESSAGE ).

*** Check Caliper
    ME->CHECK_CALIP( IR_MESSAGE = IR_MESSAGE ).

*** Check Joint Position
    ME->CHECK_JOIPO( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_PRODIM.
        ME->HANDLE_INIT_PRODIM( ).
      when C_IEVNT_I_RECALC_SHTDIM.
        ME->HANDLE_RECALC_SHTDIM( ).
      when C_IEVNT_I_RECALC_JOIDIM.
        ME->HANDLE_RECALC_JOIDIM( ).

***   Event Forwarding
      when C_IEVNT_I_RECALC_HNDDIM.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P4SS_PRDTL~C_IEVNT_O_HNDDIM_CHANGED ).
      when C_IEVNT_I_RECALC_AREA.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P4SS_PRDTL~C_IEVNT_O_AREA_CHANGED ).
      when C_IEVNT_I_RECALC_WEIGHT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P4SS_PRDTL~C_IEVNT_O_WEIGHT_CHANGED ).
    endcase.

  endmethod.
  method HANDLE_INIT_PRODIM.

    data: LF_BOXPA type ZVCXI_P0SS_BOXPA,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_ELEMV type ZVCXI_P0SS_S_ELEMV.
    data: LT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT.
    data: LR_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get Product Style Customizing and Elements
    ME->GET_ECMA( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    check LR_CUST_PRSTY is bound.
    LT_ELEMENT = ME->GET_PRSTY_ELEMENTS( ).

***--------------------------------------------------------------------------------------
*** Part of Box
    if LR_CUST_PRSTY->GET_BOXPA( ) is initial.
      ME->SET_BOXPA( IF_SETBY = SPACE ).
    endif.
    LF_BOXPA = ME->GET_BOXPA( ).

***--------------------------------------------------------------------------------------
*** Height
    if not LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT
                                         IF_BOXPA = LF_BOXPA ).
      ME->SET_PROHE( IF_SETBY = SPACE ).
    endif.

*** Second Height
    if not LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT2
                                         IF_BOXPA = LF_BOXPA ).
      ME->SET_PROH2( IF_SETBY = SPACE ).
    endif.

*** Tuck In Flap
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FTUCK
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_FTUCK( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FTUCK
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_FTUCK( IS_FTUCK = value #( FTUCK     = LS_ELEMV-ELEMV
                                           FTUCK_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_FTUCK( IF_SETBY = SPACE ).
    endif.

*** Dust Flap
    if LR_CUST_PRSTY->IS_IELEM_USED( IF_IELEM = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FDUST
                                     IF_BOXPA = LF_BOXPA ).
      ME->GET_FDUST( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FDUST
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_FDUST( IS_FDUST = value #( FDUST     = LS_ELEMV-ELEMV
                                           FDUST_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
      ME->SET_FDUST( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_JOIDIM.

    data: LF_JOIPO type ZVCXI_P0S_JOIPO,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_ELEMV type ZVCXI_P0SS_S_ELEMV,
          LS_JOILE type ZVCXI_P0S_S_JOILE.
    data: LT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT.
    data: LR_CUST_PRSTY type ref to ZCL_VCXI_PXSS_CUST_PRSTY.


*** Get Product Style Customizing and Elements
    ME->GET_ECMA( importing ER_CUST_PRSTY = LR_CUST_PRSTY ).
    LT_ELEMENT = ME->GET_PRSTY_ELEMENTS( ).

***--------------------------------------------------------------------------------------
*** Joint Position
    LF_JOIPO = ME->GET_JOIPO( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY is initial and   "only if initial
       LR_CUST_PRSTY is bound.
      LR_CUST_PRSTY->GET_JOIPO( importing EF_DEFAULT = LF_JOIPO ).
      if LF_JOIPO is not initial.
        ME->SET_JOIPO( IF_JOIPO = LF_JOIPO ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Joint Type
    if LF_JOIPO ne ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE.

    else.
***   Initialize Joint Type
      ME->SET_JOITY( IF_SETBY = SPACE ).
    endif.

***--------------------------------------------------------------------------------------
*** Joint Width
    if LF_JOIPO ne ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE.
      ME->GET_JOIWI( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY is initial and   "only if initial
         LR_CUST_PRSTY is bound.
***     Set Default Value for Element
        LS_ELEMV = LR_CUST_PRSTY->GET_ELEMV( IF_IELEM   = ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_JOIWI
                                             IT_ELEMENT = LT_ELEMENT ).
        ME->SET_JOIWI( IS_JOIWI = value #( JOIWI     = LS_ELEMV-ELEMV
                                           JOIWI_UOM = LS_ELEMV-ELEMV_UOM ) ).
      endif.
    else.
***   Initialize Joint Width
      ME->SET_JOIWI( IF_SETBY = SPACE ).
    endif.

***--------------------------------------------------------------------------------------
*** Joint Length
    if LF_JOIPO ne ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE.
      ME->GET_JOILE( importing EF_SETBY = LF_SETBY ).
      if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
***     Use Product Height as Joint Length
        LS_JOILE = corresponding #( ME->GET_PROHE( ) mapping JOILE     = PROHE
                                                             JOILE_UOM = PROHE_UOM ).
***     Add Joint Extension Top and Bottom
        try.
            data(LS_JEXTT) = ME->GET_JEXTT( ).
            if LS_JEXTT-JEXTT is not initial.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_JOILE-JOILE
                                                                  IF_CALCV_UOM_1 = LS_JOILE-JOILE_UOM
                                                                  IF_CALCV_2     = LS_JEXTT-JEXTT
                                                                  IF_CALCV_UOM_2 = LS_JEXTT-JEXTT_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_JOILE-JOILE_UOM
                                                        importing EF_CALCV       = LS_JOILE-JOILE
                                                                  EF_CALCV_UOM   = LS_JOILE-JOILE_UOM ).
            endif.
            data(LS_JEXTB) = ME->GET_JEXTB( ).
            if LS_JEXTB is not initial.
              ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_JOILE-JOILE
                                                                  IF_CALCV_UOM_1 = LS_JOILE-JOILE_UOM
                                                                  IF_CALCV_2     = LS_JEXTB-JEXTB
                                                                  IF_CALCV_UOM_2 = LS_JEXTB-JEXTB_UOM
                                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                                  IF_UOM         = LS_JOILE-JOILE_UOM
                                                        importing EF_CALCV       = LS_JOILE-JOILE
                                                                  EF_CALCV_UOM   = LS_JOILE-JOILE_UOM ).
            endif.
          catch /VCXI/CX_CKX into data(LR_CX_CKX).
            ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
            clear LS_JOILE-JOILE.
        endtry.

***     Set new Default
        ME->SET_JOILE( IS_JOILE = LS_JOILE ).
      endif.
    else.
***   Initialize Joint Length and Extension
      ME->SET_JOILE( IF_SETBY = SPACE ).
      ME->SET_JEXTT( IF_SETBY = SPACE ).
      ME->SET_JEXTB( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_SHTDIM.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.
    data: LR_PR_SCORE_MGR type ref to ZCL_VCXI_PXSS_PR_SCORE_MGR.

*** Ger Score Manager Provider
    LR_PR_SCORE_MGR = ME->GET_PRVDR_SCORE_MGR( ).
    check LR_PR_SCORE_MGR is bound.

*** Get Sheet Dimensions based on Scores
    LR_PR_SCORE_MGR->GET_SHT_DIM( importing ES_SHTLE = LS_SHTLE
                                            ES_SHTWI = LS_SHTWI ).

*** Set Sheet Dimensions
    ME->SET_SHTLE( exporting IS_SHTLE = LS_SHTLE ).
    ME->SET_SHTWI( exporting IS_SHTWI = LS_SHTWI ).

*** Set Product Sheet Dimension for Non-Custom Designs
    if ME->CHECK_CUST_DESIGN( ) ne ABAP_TRUE.
      ME->SET_SHTPL( IS_SHTPL = value #( SHTPL     = LS_SHTLE-SHTLE
                                         SHTPL_UOM = LS_SHTLE-SHTLE_UOM ) ).
      ME->SET_SHTPW( IS_SHTPW = value #( SHTPW     = LS_SHTWI-SHTWI
                                         SHTPW_UOM = LS_SHTWI-SHTWI_UOM ) ).
    endif.

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method SET_ADDWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).

    LS_PARAM-ATFLV = IS_ADDWT-ADDWT.
    LS_PARAM-UNIT  = IS_ADDWT-ADDWT_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ADDWT_CHANGED ).
    endif.

  endmethod.
  method SET_BOXPA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BOXPA ).

    if IF_BOXPA is supplied.
      LS_PARAM-ATWRT = IF_BOXPA.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOXPA_CHANGED ).
    endif.

  endmethod.
  method SET_CALIP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

    LS_PARAM-ATFLV = IS_CALIP-CALIP.
    LS_PARAM-UNIT  = IS_CALIP-CALIP_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
    endif.

  endmethod.
  method SET_COUAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COUAR ).

    move IS_COUAR-COUAR     to LS_PARAM-ATFLV.
    move IS_COUAR-COUAR_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COUAR_CHANGED ).
    endif.

  endmethod.
  method SET_ECMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ECMA ).

    move IF_ECMA  to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ECMA_CHANGED ).
    endif.

  endmethod.
  method SET_FDUST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDUST ).

    if IS_FDUST is supplied.
      LS_PARAM-ATFLV = IS_FDUST-FDUST.
      LS_PARAM-UNIT  = IS_FDUST-FDUST_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FDUST_CHANGED ).
    endif.

  endmethod.
  method SET_FTUCK.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FTUCK ).

    if IS_FTUCK is supplied.
      LS_PARAM-ATFLV = IS_FTUCK-FTUCK.
      LS_PARAM-UNIT  = IS_FTUCK-FTUCK_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FTUCK_CHANGED ).
    endif.

  endmethod.
  method SET_GRAIO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAIO ).

    move IF_GRAIO     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GRAIO_CHANGED ).
    endif.

  endmethod.
method SET_GRAMM.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).

  move IS_GRAMM-GRAMM     to LS_PARAM-ATFLV.
  move IS_GRAMM-GRAMM_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GRAMM_CHANGED ).
  endif.

endmethod.
  method SET_JEXTB.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTB ).

    if IS_JEXTB is supplied.
      LS_PARAM-ATFLV = IS_JEXTB-JEXTB.
      LS_PARAM-UNIT  = IS_JEXTB-JEXTB_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JEXT_CHANGED ).
    endif.

  endmethod.
  method SET_JEXTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JEXTT ).

    if IS_JEXTT is supplied.
      LS_PARAM-ATFLV = IS_JEXTT-JEXTT.
      LS_PARAM-UNIT  = IS_JEXTT-JEXTT_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JEXT_CHANGED ).
    endif.

  endmethod.
  method SET_JOILE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOILE ).

    if IS_JOILE is supplied.
      LS_PARAM-ATFLV = IS_JOILE-JOILE.
      LS_PARAM-UNIT  = IS_JOILE-JOILE_UOM.
    endif.

*** Identify correct SETBY
    if IF_FOVRL is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRL when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOILE_CHANGED ).
    endif.

  endmethod.
  method SET_JOIPO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIPO ).

    move IF_JOIPO     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIPO_CHANGED ).
    endif.

  endmethod.
  method SET_JOITY.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOITY ).

    move IF_JOITY     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    if IF_JOITY is supplied.
      LS_PARAM-ATWRT = IF_JOITY.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOITY_CHANGED ).
    endif.

  endmethod.
  method SET_JOIWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_JOIWI ).

    if IS_JOIWI is supplied.
      LS_PARAM-ATFLV = IS_JOIWI-JOIWI.
      LS_PARAM-UNIT  = IS_JOIWI-JOIWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_JOIWI_CHANGED ).
    endif.

  endmethod.
method SET_PAPGR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).

  move IF_PAPGR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PAPGR_CHANGED ).
  endif.

endmethod.
  method SET_PROH2.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROH2 ).

    if IS_PROH2 is supplied.
      LS_PARAM-ATFLV = IS_PROH2-PROH2.
      LS_PARAM-UNIT  = IS_PROH2-PROH2_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROH2_CHANGED ).
    endif.

  endmethod.
  method SET_PROHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).

    if IS_PROHE is supplied.
      LS_PARAM-ATFLV = IS_PROHE-PROHE.
      LS_PARAM-UNIT  = IS_PROHE-PROHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROHE_CHANGED ).
    endif.

  endmethod.
  method SET_PROLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).

    move IS_PROLE-PROLE     to LS_PARAM-ATFLV.
    move IS_PROLE-PROLE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROLE_CHANGED ).
    endif.

  endmethod.
  method SET_PROWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).

    move IS_PROWI-PROWI     to LS_PARAM-ATFLV.
    move IS_PROWI-PROWI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROWI_CHANGED ).
    endif.

  endmethod.
  method SET_SHTLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).

    move IS_SHTLE-SHTLE     to LS_PARAM-ATFLV.
    move IS_SHTLE-SHTLE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTLE_CHANGED ).
    endif.

  endmethod.
  method SET_SHTPL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPL ).

    move IS_SHTPL-SHTPL     to LS_PARAM-ATFLV.
    move IS_SHTPL-SHTPL_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTPL_CHANGED ).
    endif.

  endmethod.
  method SET_SHTPW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTPW ).

    move IS_SHTPW-SHTPW     to LS_PARAM-ATFLV.
    move IS_SHTPW-SHTPW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTPW_CHANGED ).
    endif.

  endmethod.
  method SET_SHTWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).

    move IS_SHTWI-SHTWI     to LS_PARAM-ATFLV.
    move IS_SHTWI-SHTWI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTWI_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P4SS_PRDTL~GET_ADDWT.

*** Get Additional Weight
    RS_ADDWT = ME->GET_ADDWT( ).

*** Adjust Unit if requested
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = RS_ADDWT-ADDWT
                                                         IF_UOM_IN    = RS_ADDWT-ADDWT_UOM
                                                         IF_UOM_OUT   = IF_UOM
                                               importing EF_VALUE_OUT = RS_ADDWT-ADDWT
                                                         EF_UOM_OUT   = RS_ADDWT-ADDWT_UOM ).
    endif.

  endmethod.
  method ZIF_VCXI_P4SS_PRDTL~GET_COUAR.

    RS_COUAR = ME->GET_COUAR( ).

    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = RS_COUAR-COUAR
                                                         IF_UOM_IN    = RS_COUAR-COUAR_UOM
                                                         IF_UOM_OUT   = IF_UOM
                                               importing EF_VALUE_OUT = RS_COUAR-COUAR
                                                         EF_UOM_OUT   = RS_COUAR-COUAR_UOM ).
    endif.

  endmethod.
  method ZIF_VCXI_P4SS_PRDTL~GET_COUWT.

    data: LS_COUAR type ZVCXI_PXS_S_COUAR,
          LS_SURWT type ZVCXI_PXS_S_SURWT.


***------------------------------------------------------------------------------------------------
*** Get Surface Weight
    LS_SURWT = ME->GET_SURWT( ).

*** Get Cut Out Area
    LS_COUAR = ME->ZIF_VCXI_P4SS_PRDTL~GET_COUAR( ).

***------------------------------------------------------------------------------------------------
*** Calculate Cut Out Weight
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_COUAR-COUAR
                                                          IF_CALCV_UOM_1 = LS_COUAR-COUAR_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_COUWT-COUWT
                                                          EF_CALCV_UOM   = RS_COUWT-COUWT_UOM ).
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_COUAR-COUAR
                                                          IF_CALCV_UOM_1 = LS_COUAR-COUAR_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = RS_COUWT-COUWT
                                                          EF_CALCV_UOM   = RS_COUWT-COUWT_UOM ).
    endif.

  endmethod.
  method ZIF_VCXI_P4SS_PRDTL~GET_HNDDIM.

    data: LS_FOLDIM type ZVCXI_PXS_S_FOLDIM.

***   For Closed Products use Folding Dimension
*    if LR_BL_FCFPROP->GET_TFOLD( ) eq ZCL_VCXI_P0SS_CUST_PRSTY=>C_TFOLD_CLOSED.
    LS_FOLDIM = ME->GET_FOLDIM( ).
    RS_HNDDIM = value #( HNDLE     = LS_FOLDIM-FOLLE
                         HNDLE_UOM = LS_FOLDIM-FOLLE_UOM
                         HNDWI     = LS_FOLDIM-FOLWI
                         HNDWI_UOM = LS_FOLDIM-FOLWI_UOM
                         HNDHE     = LS_FOLDIM-FOLHE
                         HNDHE_UOM = LS_FOLDIM-FOLHE_UOM ).
*    else.
****     Otherwise use Sheet Dimension
*      LR_BL_FCBPROP->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
*                                           ES_SHTWI = LS_SHTWI ).
*      LS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
*                           HNDLE_UOM = LS_SHTLE-SHTLE_UOM
*                           HNDWI     = LS_SHTWI-SHTWI
*                           HNDWI_UOM = LS_SHTWI-SHTWI_UOM
*                           HNDHE     = LR_BL_CRFPROP->S_CALIP-CALIP
*                           HNDHE_UOM = LR_BL_CRFPROP->S_CALIP-CALIP_UOM ).
*    endif.
*  endif.

*** Ensure no negative Values have been calculated
    RS_HNDDIM-HNDLE = cond #( when RS_HNDDIM-HNDLE lt 0 then 0 else RS_HNDDIM-HNDLE ).
    RS_HNDDIM-HNDWI = cond #( when RS_HNDDIM-HNDWI lt 0 then 0 else RS_HNDDIM-HNDWI ).
    RS_HNDDIM-HNDHE = cond #( when RS_HNDDIM-HNDHE lt 0 then 0 else RS_HNDDIM-HNDHE ).

  endmethod.
  method ZIF_VCXI_P4SS_PRDTL~GET_SBLAR.

    data: LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_SHTLE type ZVCXI_P0SS_S_SHTLE.


***------------------------------------------------------------------------------------------------
*** Get Sheet Dimension
    LS_SHTWI = ME->GET_SHTWI( ).
    LS_SHTLE = ME->GET_SHTLE( ).

***------------------------------------------------------------------------------------------------
*** Calculate Area
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_SBLAR-SBLAR
                                                          EF_CALCV_UOM   = RS_SBLAR-SBLAR_UOM ).
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = RS_SBLAR-SBLAR
                                                          EF_CALCV_UOM   = RS_SBLAR-SBLAR_UOM ).
    endif.

  endmethod.
  method ZIF_VCXI_P4SS_PRDTL~GET_SBLWT.

    data: LS_SBLAR type ZVCXI_PXS_S_SBLAR,
          LS_SURWT type ZVCXI_PXS_S_SURWT.


***------------------------------------------------------------------------------------------------
*** Get Surface Weight
    LS_SURWT = ME->GET_SURWT( ).

*** Get Sold Blank Area
    LS_SBLAR = ME->ZIF_VCXI_P4SS_PRDTL~GET_SBLAR( ).

***------------------------------------------------------------------------------------------------
*** Calculate Sold Blank Weight
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SBLAR-SBLAR
                                                          IF_CALCV_UOM_1 = LS_SBLAR-SBLAR_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_SBLWT-SBLWT
                                                          EF_CALCV_UOM   = RS_SBLWT-SBLWT_UOM ).
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SBLAR-SBLAR
                                                          IF_CALCV_UOM_1 = LS_SBLAR-SBLAR_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = RS_SBLWT-SBLWT
                                                          EF_CALCV_UOM   = RS_SBLWT-SBLWT_UOM ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_FCPRDTL>  type ZVCXI_P2SS_S_FDI_FCPRDTL.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P2SS_S_FDI_FCPRDTL.
    assign RR_DATA->* to <S_FDI_FCPRDTL>.

***--------------------------------------------------------------------------------------
*** Get ECMA Code
    <S_FDI_FCPRDTL>-ECMA = ME->GET_ECMA( ).

*** Get Part of Box
    <S_FDI_FCPRDTL>-BOXPA = ME->GET_BOXPA( ).

*** Get Product Dimension
    <S_FDI_FCPRDTL>-PRODIM_DESCR = ME->GET_PRODIM_DESCR( ).
    <S_FDI_FCPRDTL>-S_PROWI      = ME->GET_PROWI( ).
    <S_FDI_FCPRDTL>-S_PROLE      = ME->GET_PROLE( ).
    <S_FDI_FCPRDTL>-S_PROHE      = ME->GET_PROHE( ).
    <S_FDI_FCPRDTL>-S_PROH2      = ME->GET_PROH2( ).

*** Get Product Sheet Dimension
    <S_FDI_FCPRDTL>-S_SHTPW = ME->GET_SHTPW( ).
    <S_FDI_FCPRDTL>-S_SHTPL = ME->GET_SHTPL( ).

*** Get Tuck in/Dust Flap
    <S_FDI_FCPRDTL>-S_FTUCK = ME->GET_FTUCK( ).
    <S_FDI_FCPRDTL>-S_FDUST = ME->GET_FDUST( ).

*** Get Grain Orientation
    <S_FDI_FCPRDTL>-GRAIO = ME->GET_GRAIO( ).

*** Paper Grade / Grammage
    <S_FDI_FCPRDTL>-PAPGR   = ME->GET_PAPGR( ).
    <S_FDI_FCPRDTL>-S_GRAMM = ME->GET_GRAMM( ).

*** Caliper
    <S_FDI_FCPRDTL>-S_CALIP = GET_CALIP( ).

*** Get Cut Out Area
    <S_FDI_FCPRDTL>-S_COUAR = ME->GET_COUAR( ).

*** Additional Weight
    <S_FDI_FCPRDTL>-S_ADDWT = ME->GET_ADDWT( ).

*** Joint Information
    <S_FDI_FCPRDTL>-JOIPO   = ME->GET_JOIPO( ).
    <S_FDI_FCPRDTL>-JOITY   = ME->GET_JOITY( ).
    <S_FDI_FCPRDTL>-S_JOIWI = ME->GET_JOIWI( ).
    <S_FDI_FCPRDTL>-S_JOILE = ME->GET_JOILE( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_FCPRDTL_OLD type ZVCXI_P2SS_S_FDI_FCPRDTL,
          LS_FDI_FCPRDTL_NEW type ZVCXI_P2SS_S_FDI_FCPRDTL.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_FCPRDTL_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_FCPRDTL_NEW = corresponding #( <S_DATA> ).
    endif.


***--------------------------------------------------------------------------------------
*** Set ECMA
    if LS_FDI_FCPRDTL_OLD-ECMA ne LS_FDI_FCPRDTL_NEW-ECMA.
      ME->SET_ECMA( IF_ECMA = LS_FDI_FCPRDTL_NEW-ECMA
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Part of Box
    if LS_FDI_FCPRDTL_OLD-BOXPA ne LS_FDI_FCPRDTL_NEW-BOXPA.
      ME->SET_BOXPA( IF_BOXPA = LS_FDI_FCPRDTL_NEW-BOXPA
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Product Length
    if LS_FDI_FCPRDTL_OLD-S_PROLE ne LS_FDI_FCPRDTL_NEW-S_PROLE.
      ME->SET_PROLE( IS_PROLE = LS_FDI_FCPRDTL_NEW-S_PROLE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Width
    if LS_FDI_FCPRDTL_OLD-S_PROWI ne LS_FDI_FCPRDTL_NEW-S_PROWI.
      ME->SET_PROWI( IS_PROWI = LS_FDI_FCPRDTL_NEW-S_PROWI
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Height
    if LS_FDI_FCPRDTL_OLD-S_PROHE ne LS_FDI_FCPRDTL_NEW-S_PROHE.
      ME->SET_PROHE( IS_PROHE = LS_FDI_FCPRDTL_NEW-S_PROHE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Height2
    if LS_FDI_FCPRDTL_OLD-S_PROH2 ne LS_FDI_FCPRDTL_NEW-S_PROH2.
      ME->SET_PROH2( IS_PROH2 = LS_FDI_FCPRDTL_NEW-S_PROH2
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Product Sheet Length
    if LS_FDI_FCPRDTL_OLD-S_SHTPL ne LS_FDI_FCPRDTL_NEW-S_SHTPL.
      ME->SET_SHTPL( IS_SHTPL = LS_FDI_FCPRDTL_NEW-S_SHTPL
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Product Sheet Width
    if LS_FDI_FCPRDTL_OLD-S_SHTPW ne LS_FDI_FCPRDTL_NEW-S_SHTPW.
      ME->SET_SHTPW( IS_SHTPW = LS_FDI_FCPRDTL_NEW-S_SHTPW
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Tuck in Flap
    if LS_FDI_FCPRDTL_OLD-S_FTUCK ne LS_FDI_FCPRDTL_NEW-S_FTUCK.
      ME->SET_FTUCK( IS_FTUCK = LS_FDI_FCPRDTL_NEW-S_FTUCK
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Dust Flap
    if LS_FDI_FCPRDTL_OLD-S_FDUST ne LS_FDI_FCPRDTL_NEW-S_FDUST.
      ME->SET_FDUST( IS_FDUST = LS_FDI_FCPRDTL_NEW-S_FDUST
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Paper Grade
    if LS_FDI_FCPRDTL_OLD-PAPGR ne LS_FDI_FCPRDTL_NEW-PAPGR.
      ME->SET_PAPGR( IF_PAPGR = LS_FDI_FCPRDTL_NEW-PAPGR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Grammage
    if LS_FDI_FCPRDTL_OLD-S_GRAMM ne LS_FDI_FCPRDTL_NEW-S_GRAMM.
      ME->SET_GRAMM( IS_GRAMM = LS_FDI_FCPRDTL_NEW-S_GRAMM
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Caliper
    if LS_FDI_FCPRDTL_OLD-S_CALIP ne LS_FDI_FCPRDTL_NEW-S_CALIP.
      ME->SET_CALIP( IS_CALIP = LS_FDI_FCPRDTL_NEW-S_CALIP
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Grain Orientation
    if LS_FDI_FCPRDTL_OLD-GRAIO ne LS_FDI_FCPRDTL_NEW-GRAIO.
      ME->SET_GRAIO( IF_GRAIO = LS_FDI_FCPRDTL_NEW-GRAIO
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Cut Out Area
    if LS_FDI_FCPRDTL_OLD-S_COUAR ne LS_FDI_FCPRDTL_NEW-S_COUAR.
      ME->SET_COUAR( IS_COUAR = LS_FDI_FCPRDTL_NEW-S_COUAR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Additional Weight
    if LS_FDI_FCPRDTL_OLD-S_ADDWT ne LS_FDI_FCPRDTL_NEW-S_ADDWT.
      ME->SET_ADDWT( IS_ADDWT = LS_FDI_FCPRDTL_NEW-S_ADDWT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Joint Position
    if LS_FDI_FCPRDTL_OLD-JOIPO ne LS_FDI_FCPRDTL_NEW-JOIPO.
      ME->SET_JOIPO( IF_JOIPO = LS_FDI_FCPRDTL_NEW-JOIPO
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Joint Type
    if LS_FDI_FCPRDTL_OLD-JOITY ne LS_FDI_FCPRDTL_NEW-JOITY.
      ME->SET_JOITY( IF_JOITY = LS_FDI_FCPRDTL_NEW-JOITY
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Joint Width
    if LS_FDI_FCPRDTL_OLD-S_JOIWI ne LS_FDI_FCPRDTL_NEW-S_JOIWI.
      ME->SET_JOIWI( IS_JOIWI = LS_FDI_FCPRDTL_NEW-S_JOIWI
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Joint Length
    if LS_FDI_FCPRDTL_OLD-S_JOILE ne LS_FDI_FCPRDTL_NEW-S_JOILE.
      ME->SET_JOILE( IS_JOILE = LS_FDI_FCPRDTL_NEW-S_JOILE
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = ABAP_TRUE.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
