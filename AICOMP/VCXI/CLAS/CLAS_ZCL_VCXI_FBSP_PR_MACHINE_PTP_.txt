
class ZCL_VCXI_FBSP_PR_MACHINE_PTP definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MACHINE
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MFI_BGDIM
    returning
      value(RT_BGDIM) type ZVCXI_FBSP_TT_BGDIM
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_BGDIM
    returning
      value(RT_BGDIM) type ZVCXI_FBSP_TT_BGDIM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_BGDIM type /VCXI/VKSC_IEVNT value 'RECALC_BGDIM' ##NO_TEXT.

  methods HANDLE_RECALC_BGDIM
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_BGDIM
    importing
      !IT_BGDIM type ZVCXI_FBSP_TT_BGDIM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSP_PR_MACHINE_PTP definition
class ZCL_VCXI_FBSP_PR_MACHINE_PTP implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter ID's
    move C_PARID_MQTYI_P to ME->F_PARID_MQTYI.
    move C_PARID_MQTYO_P to ME->F_PARID_MQTYO.
    move C_PARID_MSRWA_P to ME->F_PARID_MSRWA.
    move C_PARID_MSSWA_P to ME->F_PARID_MSSWA.

*** Get Inbound Dimension
    call function 'DIMENSION_GET'
      importing
        DIMID               = ME->F_DIMNI
      exceptions
        DIMENSION_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Outbound Dimension
    call function 'DIMENSION_GET'
      importing
        DIMID               = ME->F_DIMNO
      exceptions
        DIMENSION_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method GET_MFI_BGDIM.

    data: LT_GATE               type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_BGDIM type ref to ZIF_VCXI_FBSP_BGDIM,
          LR_FIDIM type ref to ZIF_VCXI_FFSP_FIDIM.
    field-symbols: <S_BGDIM>    type        ZVCXI_FBSP_S_BGDIM.

    check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Material Flow In
    LT_GATE = ME->R_PR_MFMGR->GET_MFI( ).
    if LINES( LT_GATE ) lt 1.
***   No Material Flow In available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSP'
          IF_MSGNO = '210' ).
    endif.

*** Get all Bag Dimensions
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_BGDIM.
          check LR_BGDIM is bound.

          insert initial line into table RT_BGDIM assigning <S_BGDIM>.
          LR_BGDIM->GET_IBAGT( importing EF_IBAGT = <S_BGDIM>-IBAGT ).
          LR_BGDIM->GET_BGHEI( importing ES_BGHEI = <S_BGDIM>-S_BGHEI ).
          LR_BGDIM->GET_BGWID( importing ES_BGWID = <S_BGDIM>-S_BGWID ).
          LR_BGDIM->GET_BGWGT( importing ES_BGWGT = <S_BGDIM>-S_BGWGT ).

          LR_BGDIM->GET_NOOUT( importing EF_NOOUT = <S_BGDIM>-NOOUT ).
          LR_BGDIM->GET_NOUPS( importing EF_NOUPS = <S_BGDIM>-NOUPS ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

    if RT_BGDIM is initial.
*** Get all Film Dimensions
      loop at LT_GATE into LR_GATE.
        try.
            move LR_GATE->R_CLSPR ?to LR_FIDIM.
            check LR_FIDIM is bound.

            insert initial line into table RT_BGDIM assigning <S_BGDIM>.
            LR_FIDIM->GET_NOOUT( importing EF_NOOUT = <S_BGDIM>-NOOUT ).
            LR_FIDIM->GET_NOUPS( importing EF_NOUPS = <S_BGDIM>-NOUPS ).

          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.
    endif.

  endmethod.
  method GET_MFO_BGDIM.

    data: LT_GATE  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_BGDIM type ref to ZIF_VCXI_FBSP_BGDIM.
    field-symbols: <S_BGDIM>    type       ZVCXI_FBSP_S_BGDIM.

    check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Material Flow Out
    LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
    if LINES( LT_GATE ) lt 1.
***   No Material Flow Out available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSP'
          IF_MSGNO = '209' ).
    endif.

*** Get Dimensions of all
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_BGDIM.
          check LR_BGDIM is bound.

          insert initial line into table RT_BGDIM assigning <S_BGDIM>.

          LR_BGDIM->GET_IBAGT( importing EF_IBAGT = <S_BGDIM>-IBAGT ).
          LR_BGDIM->GET_BGHEI( importing ES_BGHEI = <S_BGDIM>-S_BGHEI ).
          LR_BGDIM->GET_BGWID( importing ES_BGWID = <S_BGDIM>-S_BGWID ).
          LR_BGDIM->GET_BGWGT( importing ES_BGWGT = <S_BGDIM>-S_BGWGT ).

          LR_BGDIM->GET_NOOUT( importing EF_NOOUT = <S_BGDIM>-NOOUT ).
          LR_BGDIM->GET_NOUPS( importing EF_NOUPS = <S_BGDIM>-NOUPS ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_BGDIM.
        ME->HANDLE_RECALC_BGDIM( ).

    endcase.

  endmethod.
method HANDLE_RECALC_BGDIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LT_BGDIM     type        ZVCXI_FBSP_TT_BGDIM.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_BGDIM type ref to ZIF_VCXI_FBSP_ADJ_BGDIM.

  check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Bag Dimension of Material Flow In
  move ME->GET_MFI_BGDIM( ) to LT_BGDIM.

***--------------------------------------------------------------------------------------
*** Get all adjusting Addon's and adjust the Film Dimensions
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_FBSP_ADJ_BGDIM=>C_IPRVT_ADJ_BGDIM
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_BGDIM.
        check LR_ADJ_BGDIM is bound.

        LR_ADJ_BGDIM->CALC_BGDIM_OUT( changing CT_BGDIM = LT_BGDIM ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***--------------------------------------------------------------------------------------
*** Set new Bag Dimension of Material Flow
  ME->SET_MFO_BGDIM( IT_BGDIM = LT_BGDIM ).

endmethod.
method SET_MFO_BGDIM.

  data: LS_BGDIM     type        ZVCXI_FBSP_S_BGDIM,
        LS_BGDIM_OLD type        ZVCXI_FBSP_S_BGDIM.
  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_MFSO_P type ref to ZCL_VCXI_FBSP_PR_MFSO_P.

  check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).

*** Set Dimensions to all
  loop at LT_GATE into LR_GATE.
    clear: LS_BGDIM.

    read table IT_BGDIM into LS_BGDIM index SY-TABIX.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MFSO_P.
        check LR_PR_MFSO_P is bound.

        LR_PR_MFSO_P->SET_IBAGT( IF_IBAGT = LS_BGDIM-IBAGT ).
        LR_PR_MFSO_P->SET_BGHEI( IS_BGHEI = LS_BGDIM-S_BGHEI ).
        LR_PR_MFSO_P->SET_BGWID( IS_BGWID = LS_BGDIM-S_BGWID ).
        LR_PR_MFSO_P->SET_BGWGT( IS_BGWGT = LS_BGDIM-S_BGWGT ).
        LR_PR_MFSO_P->SET_NOUPS( IF_NOUPS = LS_BGDIM-NOUPS ).
        LR_PR_MFSO_P->SET_SHUNT( IF_SHUNT = LS_BGDIM-SHUNT ).

***     Check if Conversion for Machine Quantity changed
        if LS_BGDIM-NOUPS ne LS_BGDIM_OLD-NOUPS.
***       Send Event
          ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
        endif.

***     Set Number of Outs
        LR_PR_MFSO_P->ZIF_VCXI_XCSP_MFO~SET_NOOUT( IF_NOOUT = LS_BGDIM-NOOUT ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

    data: LF_NOOUT     type        ZVCXI_XCS_NOOUT,
          LF_NOUPS_OUT type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_IN  type        ZVCXI_F0S_NOUPS.
    data: LS_BGDIM     type        ZVCXI_FBSP_S_BGDIM.
    data: LT_BGDIM_OUT type        ZVCXI_FBSP_TT_BGDIM,
          LT_BGDIM_IN  type        ZVCXI_FBSP_TT_BGDIM.
***----------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
    move ME->GET_MQTYI( ) to RS_MQTYI.
    clear RS_MQTYI-MQTYI.

***----------------------------------------------------------------------------
    try.
***     Get Bag Dimension of Material Flow In and Out
        move ME->GET_MFI_BGDIM( ) to LT_BGDIM_IN.
        move ME->GET_MFO_BGDIM( ) to LT_BGDIM_OUT.
      catch /VCXI/CX_CKX.
        return.
    endtry.

***----------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_BGDIM_OUT ) eq 0.
      return.

***----------------------------------------------------------------------------
*** Logic "Single MFO"
    elseif LINES( LT_BGDIM_OUT ) eq 1.

***   Get No Ups of Flow Out
      read table LT_BGDIM_OUT into LS_BGDIM index 1.
      if SY-SUBRC eq 0.
        move LS_BGDIM-NOUPS to LF_NOUPS_OUT.
      endif.
      check LF_NOUPS_OUT is not initial.

***   Get No Ups of Flow In
      loop at LT_BGDIM_IN into LS_BGDIM.
***     Take maximum No of Ups
        if LS_BGDIM-NOUPS gt LF_NOUPS_IN.
          move LS_BGDIM-NOUPS to LF_NOUPS_IN.
        endif.
      endloop.
      check LF_NOUPS_IN is not initial.

***   Convert it to Machine Quantity In
      RS_MQTYI-MQTYI = IS_QTY-QTY * LF_NOUPS_OUT / LF_NOUPS_IN.

***----------------------------------------------------------------------------
*** Logic "Multiple MFO"
    else.
***   Get Total Number of Out
      loop at LT_BGDIM_OUT into LS_BGDIM.
        LF_NOOUT = LF_NOOUT + LS_BGDIM-NOOUT.
      endloop.
      check LF_NOOUT is not initial.

***   Convert it to Machine Quantity In using the Total Out
      RS_MQTYI-MQTYI = IS_QTY-QTY / LF_NOOUT.
    endif.

*** Round Bags if not unitized
    if LS_BGDIM-SHUNT is initial.
      RS_MQTYI-MQTYI = CEIL( RS_MQTYI-MQTYI ).
    endif.

  endmethod.
  method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.

    data: LF_NOUPS_IN  type ZVCXI_F0S_NOUPS.
    data: LS_BGDIM type ZVCXI_FBSP_S_BGDIM,
          LS_MQTYO type ZVCXI_XCSP_S_MQTYO.
    data: LT_BGDIM_OUT type ZVCXI_FBSP_TT_BGDIM,
          LT_BGDIM_IN  type ZVCXI_FBSP_TT_BGDIM.

***--------------------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
    move ME->GET_MQTYO( ) to RS_MQTYO.
    clear RS_MQTYO-MQTYO.

***--------------------------------------------------------------------------------------
    try.
***     Get PC Dimension of Material Flow In and Out
        move ME->GET_MFI_BGDIM( ) to LT_BGDIM_IN.
        move ME->GET_MFO_BGDIM( ) to LT_BGDIM_OUT.
      catch /VCXI/CX_CKX.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Get PC Ups of Flow In
    loop at LT_BGDIM_IN into LS_BGDIM.
***   Take maximum PC
      if LS_BGDIM-NOUPS gt LF_NOUPS_IN.
        move LS_BGDIM-NOUPS to LF_NOUPS_IN.
      endif.
    endloop.
    check LF_NOUPS_IN is not initial.

***--------------------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_BGDIM_OUT ) eq 0.
      exit.

***--------------------------------------------------------------------------------------
*** Logic "Single MFO"
    elseif LINES( LT_BGDIM_OUT ) eq 1.

***   Get PC Ups of Flow Out
      read table LT_BGDIM_OUT into LS_BGDIM index 1.

      if LS_BGDIM-NOUPS ne 0.
***     Convert it To Machine Quantity Out
        RS_MQTYO-MQTYO = IS_QTY-QTY * LF_NOUPS_IN / LS_BGDIM-NOUPS.
      else.
        clear RS_MQTYO-MQTYO.
        exit.
      endif.

***   Round Bags if not unitized
      if LS_BGDIM-SHUNT is initial.
        RS_MQTYO-MQTYO = CEIL( RS_MQTYO-MQTYO ).
      endif.

***--------------------------------------------------------------------------------------
*** Logic "Multiple MFO"
    else.
***   Calculate each Output
      loop at LT_BGDIM_OUT into LS_BGDIM.
        if LS_BGDIM-NOUPS ne 0.
***       Convert it to Machine Quantity Out
          LS_MQTYO-MQTYO = IS_QTY-QTY * LS_BGDIM-NOOUT.

***       Round Bags if not unitized
          if LS_BGDIM-SHUNT is initial.
            LS_MQTYO-MQTYO = CEIL( LS_MQTYO-MQTYO ).
          endif.

***       Add to Total Quantity
          add LS_MQTYO-MQTYO to RS_MQTYO-MQTYO.
        else.
          clear RS_MQTYO-MQTYO.
          exit.
        endif.
      endloop.
    endif.

  endmethod.
