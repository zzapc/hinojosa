
class ZCL_VCXI_XCA_MWB_CLQRY definition
  public
  abstract
  create public .

public section.

  data F_MAXSEL type TBMAXSEL .
  data:
    I_BUKRS type range of BUKRS .
  data:
    I_BWKEY type range of BWKEY .
  data:
    I_BWTAR type range of BWTAR_D .
  data:
    I_LGNUM type range of LGNUM .
  data:
    I_LGORT type range of LGORT_D .
  data:
    I_LGTYP type range of LGTYP .
  data:
    I_VKORG type range of VKORG .
  data:
    I_VTWEG type range of VTWEG .
  data:
    I_WERKS type range of WERKS_D .
  data R_REGMDL type ref to ZCL_VCXI_XCA_MWB_REGMDL .

  methods EXECUTE
  abstract
    returning
      value(RT_RESULT) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_ORGDATA
    importing
      !IF_MATNR type MATNR
    returning
      value(RT_ORGDATA) type ZVCXI_XCA_MWB_TT_ORGDATA
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_GREGE type /VCXI/CKR_GREGE
      !IT_SELCR type ZVCXI_XCA_MWB_TT_SELCR
      !IF_MAXSEL type TBMAXSEL optional
    returning
      value(RR_CLQRY) type ref to ZCL_VCXI_XCA_MWB_CLQRY
    raising
      /VCXI/CX_CKX .
  class-methods MAP_PARAM_TO_SELCR
    importing
      !IF_CPDNA type SEOCPDNAME
      !IF_PARAM type ANY
    changing
      !CT_SELCR type ZVCXI_XCA_MWB_TT_SELCR
    raising
      /VCXI/CX_CKX .
  class-methods MAP_SELOP_TO_SELCR
    importing
      !IF_CPDNA type SEOCPDNAME
      !IT_SELOP type ANY TABLE
    changing
      !CT_SELCR type ZVCXI_XCA_MWB_TT_SELCR
    raising
      /VCXI/CX_CKX .
protected section.

  data F_MARC type ABAP_BOOL .
  data F_MARD type ABAP_BOOL .
  data F_MBEW type ABAP_BOOL .
  data F_MLGT type ABAP_BOOL .
  data F_MVKE type ABAP_BOOL .

  methods MAP_SELCR
    importing
      !IT_SELCR type ZVCXI_XCA_MWB_TT_SELCR
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCA_MWB_CLQRY definition
class ZCL_VCXI_XCA_MWB_CLQRY implementation.
  method FACTORY.

    data: LR_REGMDL type ref to ZCL_VCXI_XCA_MWB_REGMDL.


    try.
        LR_REGMDL ?= ZCL_VCXI_XCA_MWB_REGMDL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( conv #( IF_GREGE ) ).
      catch CX_SY_MOVE_CAST_ERROR.
***     Registry Element GUID is not compatible with Query ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = 'ZVCXI_XCA_MWB'
            F_MSGNO = '040'.
    endtry.

    check LR_REGMDL is bound.

    try.
        create object RR_CLQRY type (LR_REGMDL->S_CLQRY-CLQRY).
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

    RR_CLQRY->MAP_SELCR( IT_SELCR = IT_SELCR ).
    RR_CLQRY->R_REGMDL = LR_REGMDL.
    RR_CLQRY->F_MAXSEL = IF_MAXSEL.

  endmethod.
  method GET_ORGDATA.

    data: LS_ORGDATA type ZVCXI_XCA_MWB_S_ORGDATA.
    data: LT_MVKE  type table of MVKE,
          LT_MBEW  type table of MBEW,
          LT_MARD  type table of MARD,
          LT_TVKWZ type table of TVKWZ,
          LT_T001K type table of T001K,
          LT_MLGT  type table of MLGT,
          LT_MARC  type table of MARC.
    field-symbols: <S_MVKE>  type MVKE,
                   <S_MBEW>  type MBEW,
                   <S_MARD>  type MARD,
                   <S_TVKWZ> type TVKWZ,
                   <S_T001K> type T001K,
                   <S_MARC>  type MARC,
                   <S_MLGT>  type MLGT.


***--------------------------------------------------------------------------------------
*** General Customizing
    select *
           from TVKWZ
           into table LT_TVKWZ.

    select *
           from T001K
           into table LT_T001K.

***--------------------------------------------------------------------------------------
*** Read Sales Data for Material
    if ME->F_MVKE ne ABAP_FALSE.
      call function 'MVKE_READ_WITH_MATNR'
        exporting
          MATNR    = IF_MATNR
        tables
          MVKE_TAB = LT_MVKE
        exceptions
          others   = 0.
    endif.

*** Read Material Valuation
    if ME->F_MBEW ne ABAP_FALSE.
      call function 'MBEW_READ_WITH_MATNR'
        exporting
          MATNR    = IF_MATNR
        tables
          MBEW_TAB = LT_MBEW
        exceptions
          others   = 0.
    endif.

*** Read Plant Data for Material
    if ME->F_MARC ne ABAP_FALSE.
      call function 'MARC_READ_WITH_MATNR'
        exporting
          MATNR    = IF_MATNR
        tables
          MARC_TAB = LT_MARC
        exceptions
          others   = 0.
    endif.

*** Read Storage Location Data for Material
    if ME->F_MARD ne ABAP_FALSE.
      call function 'MARD_GENERIC_READ_WITH_MATNR'
        exporting
          MATNR    = IF_MATNR
        tables
          MARD_TAB = LT_MARD
        exceptions
          others   = 0.
    endif.

*** Material Data for Each Storage Type
    if ME->F_MLGT ne ABAP_FALSE.
      select MATNR LGNUM LGTYP
             from MLGT
             into corresponding fields of table LT_MLGT
            where MATNR eq IF_MATNR.
    endif.

***--------------------------------------------------------------------------------------
*** Apply Filter of Query Object
    if ME->I_WERKS is not initial.
      delete LT_MARC where WERKS not in ME->I_WERKS.
      delete LT_MARD where WERKS not in ME->I_WERKS.
    endif.

    if ME->I_LGORT is not initial.
      delete LT_MARD where LGORT not in ME->I_LGORT.
    endif.

    if ME->I_VKORG is not initial.
      delete LT_MVKE where VKORG not in ME->I_VKORG.
    endif.

    if ME->I_VTWEG is not initial.
      delete LT_MVKE where VTWEG not in ME->I_VTWEG.
    endif.

    if ME->I_BWKEY is not initial.
      delete LT_MBEW where BWKEY not in ME->I_BWKEY.
    endif.

    if ME->I_BWTAR is not initial.
      delete LT_MBEW where BWTAR not in ME->I_BWTAR.
    endif.

    if ME->I_LGNUM is not initial.
      delete LT_MLGT where LGNUM not in ME->I_LGNUM.
    endif.

    if ME->I_LGTYP is not initial.
      delete LT_MLGT where LGTYP not in ME->I_LGTYP.
    endif.

    if ME->I_BUKRS is not initial.
      delete LT_T001K where BUKRS not in ME->I_BUKRS.
    endif.

***--------------------------------------------------------------------------------------
*** Prepare Tables for full-scope append even if no data is maintained
    if LT_MARC is initial or ME->F_MARC eq ABAP_UNDEFINED.
      append initial line to LT_MARC.
    endif.
    if LT_MARD is initial or ME->F_MARD eq ABAP_UNDEFINED.
      append initial line to LT_MARD.
    endif.
    if LT_MVKE is initial or ME->F_MVKE eq ABAP_UNDEFINED.
      append initial line to LT_MVKE.
    endif.
    if LT_MBEW is initial or ME->F_MBEW eq ABAP_UNDEFINED.
      append initial line to LT_MBEW.
    endif.
    if LT_MLGT is initial or ME->F_MLGT eq ABAP_UNDEFINED.
      append initial line to LT_MLGT.
    endif.

***--------------------------------------------------------------------------------------
*** Plant Data
    loop at LT_MARC assigning <S_MARC>.
      move <S_MARC>-WERKS to LS_ORGDATA-WERKS.

***   Storage Location
      loop at LT_MARD assigning <S_MARD> where WERKS eq <S_MARC>-WERKS
                                          or   WERKS is initial.
        move <S_MARD>-LGORT to LS_ORGDATA-LGORT.

***     Sales Org and Distribution Channel
        loop at LT_MVKE assigning <S_MVKE>.
          clear: LS_ORGDATA-VKORG,
                 LS_ORGDATA-VTWEG.
          if <S_MVKE>-VKORG is not initial or
             <S_MVKE>-VTWEG is not initial.
***         Check what possible combinations exist for werks/vkorg/vtweg
            read table LT_TVKWZ assigning <S_TVKWZ> with key WERKS = <S_MARD>-WERKS
                                                             VKORG = <S_MVKE>-VKORG
                                                             VTWEG = <S_MVKE>-VTWEG.
            if SY-SUBRC eq 0.
              move <S_MVKE>-VKORG to LS_ORGDATA-VKORG.
              move <S_MVKE>-VTWEG to LS_ORGDATA-VTWEG.
            else.
              continue.
            endif.
          endif.

***       Valuation area/type
          loop at LT_MBEW assigning <S_MBEW> where BWKEY eq <S_MARC>-WERKS
                                              or   BWKEY is initial.
            move <S_MBEW>-BWKEY to LS_ORGDATA-BWKEY.
            move <S_MBEW>-BWTAR to LS_ORGDATA-BWTAR.

***         Company Code
            read table LT_T001K assigning <S_T001K> with key BWKEY = <S_MBEW>-BWKEY.
            if SY-SUBRC = 0.
              move <S_T001K>-BUKRS to LS_ORGDATA-BUKRS.
            else.
              clear LS_ORGDATA-BUKRS.
            endif.

***         Warehouse Number / Warehouse Storage Type
            loop at LT_MLGT assigning <S_MLGT>.
              move <S_MLGT>-LGNUM to LS_ORGDATA-LGNUM.
              move <S_MLGT>-LGTYP to LS_ORGDATA-LGTYP.
              append LS_ORGDATA to RT_ORGDATA.
            endloop.
          endloop.
        endloop.
      endloop.
    endloop.

  endmethod.
  method MAP_PARAM_TO_SELCR.

    field-symbols: <S_SELCR> type ZVCXI_XCA_MWB_S_SELCR.


*** Move Parameter Name
    if IF_CPDNA is initial.
***   Component Name is mandatory.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCA_MWB'
                                            IF_MSGNO = '041' ).
    endif.

    insert value #( CPDNA = IF_CPDNA ) into table CT_SELCR assigning <S_SELCR>.

*** Move Parameter Value
    check IF_PARAM is not initial.
    insert value #( SIGN = 'I' OPTION = 'EQ' LOW = IF_PARAM ) into table <S_SELCR>-I_SELOP.

  endmethod.
  method MAP_SELCR.

    data: LS_SELCR type ZVCXI_XCA_MWB_S_SELCR.
    data: LF_SELOP type STRING.
    field-symbols: <I_SELOP> type any table.


    loop at IT_SELCR into LS_SELCR.
***   Assign range-based Class Attribute
      LF_SELOP = 'ME->' && LS_SELCR-CPDNA.
      assign (LF_SELOP) to <I_SELOP>.

      if <I_SELOP> is not assigned.
***     Attribute name &1 is not part of query class.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCA_MWB'
                                              IF_MSGNO = '042' ).
      endif.

***   Fill Select-Option
      <I_SELOP> = corresponding #( LS_SELCR-I_SELOP ).
    endloop.

  endmethod.
  method MAP_SELOP_TO_SELCR.

    field-symbols: <S_SELCR> type ZVCXI_XCA_MWB_S_SELCR.


*** Move Select Option Name
    if IF_CPDNA is initial.
***   Component name is mandatory.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCA_MWB'
                                            IF_MSGNO = '041' ).
    endif.

    insert value #( CPDNA = IF_CPDNA ) into table CT_SELCR assigning <S_SELCR>.

*** Move Select-Option Value
    check IT_SELOP is not initial.
    <S_SELCR>-I_SELOP = corresponding #( IT_SELOP ).

  endmethod.
