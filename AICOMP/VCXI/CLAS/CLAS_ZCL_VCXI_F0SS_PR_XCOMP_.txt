
class ZCL_VCXI_F0SS_PR_XCOMP definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_F0SS_ANCHI .
  interfaces ZIF_VCXI_F0SS_ANCHO .
  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IPRVT_XCOMP type /VCXI/VKSC_IPRVT value 'ZVCXI_F0SS_XCOMP' ##NO_TEXT.

  methods GET_PR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SPEC) type ref to ZCL_VCXI_F0SS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods SPLIT
    importing
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ET_XCONA type ZVCXI_F0SS_TT_XCONA
      !ER_GATE_DEST type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods MERGE
    importing
      !IR_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SOV type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods IS_MERGE_ALLOWED
    importing
      !IR_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
protected section.

  data T_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF .
  data T_SPVCE type /VCXI/CKX_TT_OBJECT .

  methods DET_SPVRE_CHILDREN
    importing
      !IR_PR_SOV type ref to ZCL_VCXI_F0SS_PR_SOV
      !IR_GATE_SOV type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !IR_XCOMP_DEST type ref to /VCXI/CL_VKSR_GATE
    exporting
      !ET_SPVRE_CHILD type ZVCXI_F0SS_TT_SPVRE_CHILD
      !ER_XCOMP_SOURCE type ref to /VCXI/CL_VKSR_GATE
      !ET_SPVRE type /VCXI/VKSR_TT_SPVRE
      !ET_XCONA type ZVCXI_F0SS_TT_XCONA
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_BY_GATE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IF_COPY_CHILDREN type ABAP_BOOL
    exporting
      !ER_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IF_ID type /VCXI/CKX_ID
    exporting
      !ER_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SOV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SOV) type ref to ZCL_VCXI_F0SS_PR_SOV
    raising
      /VCXI/CX_CKX .
  methods COPY_FROM_GATE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_SPVRE_BY_GATE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_SPVRE type /VCXI/VKSR_TT_SPVRE
    returning
      value(RR_SPVRE) type ref to /VCXI/CL_VKSR_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_SPVCE_BY_ID
    importing
      !IF_ID type /VCXI/CKX_ID
      !IR_SPVCE_PARENT type ref to /VCXI/CL_VKSC_SPVCE
    returning
      value(RR_SPVCE) type ref to /VCXI/CL_VKSC_SPVCE
    raising
      /VCXI/CX_CKX .
  methods GET_CHILD_PRVDR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_GATE_CHILDS type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0SS_PR_XCOMP definition
class ZCL_VCXI_F0SS_PR_XCOMP implementation.
  method ADD_SPVRE.

    data: LR_SPVCE type ref to /VCXI/CL_VKSC_SPVCE.

    clear ER_SPVRE.

*** Get Parent Customizing Element if bound
    if IR_SPVRE_PARENT is bound.
      move IR_SPVRE_PARENT->R_SPVCE to LR_SPVCE.
    endif.

*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE_BY_ID( IF_ID           = IF_ID
                                    IR_SPVCE_PARENT = LR_SPVCE ).

*** Create
    create object ER_SPVRE
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append ER_SPVRE to CT_SPVRE.

*** Set InUse
    ER_SPVRE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

  endmethod.
  method ADD_SPVRE_BY_GATE.

    data: LS_PRVDR_DEF  type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF  type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE       type /VCXI/VKSR_TT_GATE,
          LT_GATE_CHILD type /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Add Runtime Element based on ID of Gate
    ME->ADD_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_PARENT
                             IF_ID           = IR_GATE->F_ID
                   importing ER_SPVRE        = ER_SPVRE
                   changing  CT_SPVRE        = CT_SPVRE ).

*** Copy values from Gate
    ME->COPY_FROM_GATE( IR_GATE  = IR_GATE
                        IR_SPVRE = ER_SPVRE ).

***--------------------------------------------------------------------------------------
    if IF_COPY_CHILDREN eq ABAP_TRUE.
***   Get Child Provider
      LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
        LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                      IF_INUSE = ABAP_TRUE ).
        loop at LT_GATE into LR_GATE.
          read table LT_GATE_CHILD with key TABLE_LINE = LR_GATE
                                   transporting no fields.
          if SY-SUBRC ne 0.
            append LR_GATE to LT_GATE_CHILD.
          endif.
        endloop.
      endloop.
      IR_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).

***   Copy Children
      loop at LT_GATE_CHILD into LR_GATE.
        ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                         IR_SPVRE_PARENT  = ER_SPVRE
                                         IF_COPY_CHILDREN = IF_COPY_CHILDREN
                               changing  CT_SPVRE         = CT_SPVRE ).
      endloop.
    endif.

  endmethod.
  method COPY_FROM_GATE.

    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY,
          LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LT_PARAM type /VCXI/VKSR_TT_PARAM.

*** Copy Leading Object
    move IR_GATE->GET_LEOKY( ) to LS_LEOKY.
    IR_SPVRE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

*** Get all superviable Parameter
    LT_PARAM = IR_GATE->GET_PARAM_ALL( IF_PARSP = ABAP_TRUE ).

*** Copy Parameter
    loop at LT_PARAM into LS_PARAM.
      IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).
    endloop.

  endmethod.
  method DET_SPVRE_CHILDREN.

    data: LF_TABIX            type        SYTABIX.
    data: LS_PRVDR_CSTEPS type        ZVCXI_F0SS_S_PRVDR_DEF,
          LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE         type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR        type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR_CSTEPS type        ZVCXI_F0SS_TT_PRVDR_DEF,
          LT_PRVDR_DEF    type        /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE_INPUT       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CONV        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOURCE_SPEC type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_DEST_SPEC   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CSTEP         type ref to ZCL_VCXI_F0SS_PR_CSTEP,
          LR_PR_SPEC          type ref to ZCL_VCXI_F0SS_PR_SPEC,
          LR_SEQ              type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOURCE      type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_SPVRE_CHILD> type ZVCXI_F0SS_S_SPVRE_CHILD.

    refresh ET_SPVRE_CHILD.

*** Buffer Source Gate
    move IR_GATE_SOURCE to LR_GATE_SOURCE.

***--------------------------------------------------------------------------------------
*** Get Selected node --> CSTEPs
    try.
        move LR_GATE_SOURCE->R_CLSPR ?to LR_PR_CSTEP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_CSTEP.
    endtry.
    if LR_PR_CSTEP is bound.
***   Get Source Conversion Steps via Specification
      LT_PRVDR = LR_GATE_SOURCE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
      read table LT_PRVDR into LR_GATE_SOURCE_SPEC index 1.
      if LR_GATE_SOURCE_SPEC is bound.
        try .
            move LR_GATE_SOURCE_SPEC->R_CLSPR ?to LR_PR_SPEC.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_PR_SPEC.
        endtry.

        if LR_PR_SPEC is bound.
          LR_PR_SPEC->GET_CSTEPS_DEF( exporting IF_NOCHECK = ABAP_TRUE
                                      importing ET_PRVDR_CSTEPS = LT_PRVDR_CSTEPS ).

          read table LT_PRVDR_CSTEPS into LS_PRVDR_CSTEPS with key ID = LR_GATE_SOURCE->F_ID.
          if SY-SUBRC is initial.
***         Get Destination Conversion Gate
            if IR_XCOMP_DEST is bound.
              LT_PRVDR = IR_XCOMP_DEST->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
              read table LT_PRVDR into LR_GATE_DEST_SPEC index 1.
              if LR_GATE_DEST_SPEC is bound.
***             Get childs of Destination Specification
                LT_PRVDR_DEF = LR_GATE_DEST_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
                read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = 'CONV'.
                if LS_PRVDR_DEF-IPRVT is not initial.
***               Get Gates of Provider
                  LT_GATE = LR_GATE_DEST_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                                          IF_INUSE = ABAP_TRUE ).

                  read table LT_GATE into LR_GATE_CONV with key TABLE_LINE->F_ID = 'CONV'.
                endif.
              endif.
            endif.

***         Set the Destination supervised element parent
            insert initial line into table ET_SPVRE_CHILD assigning <S_SPVRE_CHILD>.
            move LR_GATE_CONV to <S_SPVRE_CHILD>-R_GATE_PARENT.
            move ABAP_TRUE to <S_SPVRE_CHILD>-COPY_CHILDREN.

***         Get index of selected Gate
            read table LS_PRVDR_CSTEPS-T_GATE_SEQ with key TABLE_LINE = LR_GATE_SOURCE
                                                  transporting no fields.
            if SY-SUBRC is initial.
              move SY-TABIX to LF_TABIX.
            endif.

***         Split after selected Gate
            loop at LS_PRVDR_CSTEPS-T_GATE_SEQ into LR_SEQ.
              check SY-TABIX le LF_TABIX.
              append LR_SEQ to <S_SPVRE_CHILD>-T_GATE_CHILDS.
            endloop.
          endif.

***       Collect also Input Of Source Film Component
          LT_PRVDR_DEF = LR_GATE_SOURCE_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
          read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = 'INPUT'.
          if LS_PRVDR_DEF-IPRVT is not initial.
***         Get Gates of Provider
            LT_GATE = LR_GATE_SOURCE_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                                      IF_INUSE = ABAP_TRUE ).

            read table LT_GATE into LR_GATE_SOURCE with key TABLE_LINE->F_ID = 'INPUT'.
          endif.
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get Selected node --> It will always be INPUT the Source Gate
    if LR_GATE_SOURCE is bound.
***   Get Destination Input Supervised Runtime Element
      if IR_XCOMP_DEST is bound.
        LT_GATE  = IR_XCOMP_DEST->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHI=>C_IPRVT_ANCHI
                                             IF_INUSE  = ABAP_TRUE ).
        read table LT_GATE into LR_GATE_INPUT index 1.
        if LR_GATE_INPUT is bound.
***       Set the Destination supervised element parent
          insert initial line into table ET_SPVRE_CHILD assigning <S_SPVRE_CHILD>.
          move LR_GATE_INPUT to <S_SPVRE_CHILD>-R_GATE_PARENT.
          move ABAP_TRUE to <S_SPVRE_CHILD>-COPY_CHILDREN.

***       Get Childs Provider
          ME->GET_CHILD_PRVDR( exporting IR_GATE       = LR_GATE_SOURCE
                               changing CT_GATE_CHILDS = <S_SPVRE_CHILD>-T_GATE_CHILDS ).
        endif.
      endif.
    endif.

*** Get All Supervised Runtime Elements
    ET_SPVRE = IR_GATE_SOV->GET_SPVRE( ).

    loop at ET_SPVRE_CHILD assigning <S_SPVRE_CHILD> where R_GATE_PARENT is bound.
***   Get Supervised Runtime Element
      <S_SPVRE_CHILD>-R_SPVRE_PARENT = ME->GET_SPVRE_BY_GATE( IR_GATE  = <S_SPVRE_CHILD>-R_GATE_PARENT
                                                              IT_SPVRE = ET_SPVRE ).
    endloop.

***--------------------------------------------------------------------------------------
*** Get Source Component
    LT_GATE = IR_GATE_SOV->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0SS_PR_XCOMP=>C_IPRVT_XCOMP
                                      IF_INUSE  = ABAP_TRUE
                                      IF_SORTED = ABAP_TRUE ).
    loop at LT_GATE into ER_XCOMP_SOURCE.
      check ER_XCOMP_SOURCE->IS_IN_LINE( IR_GATE = LR_GATE_SOURCE ) eq ABAP_TRUE.
      exit.
    endloop.

  endmethod.
  method GET_CHILD_PRVDR.

    data: LS_PRVDR_DEF type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE      type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type        /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

*** Get Child Providers
    LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                    IF_INUSE = ABAP_TRUE ).
***   Get Child Gates and collect
      loop at LT_GATE into LR_GATE.
        read table CT_GATE_CHILDS with key TABLE_LINE = LR_GATE
                                  transporting no fields.
        if SY-SUBRC is not initial.
          append LR_GATE to CT_GATE_CHILDS.
        endif.
      endloop.
    endloop.
    IR_GATE->SORT_GATE( changing CT_GATE = CT_GATE_CHILDS ).

  endmethod.
  method GET_DESCR.

    data: LF_WERKS type WERKS_D,
          LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PRVDR_DEF  type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATES     type /VCXI/VKSR_TT_GATE,
          LT_GATE      type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_CHILD type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC    type ref to ZCL_VCXI_F0SS_PR_SPEC.

*** Call Super implementation
    RF_DESCR = SUPER->GET_DESCR( ).

*** Get Plant
    LT_GATES = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_GATES into LR_GATE index 1.
    if LR_GATE is bound.
      try .
          move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_SPEC.
      endtry.

      if LR_PR_SPEC is bound.
        LR_PR_SPEC->GET_WERKS( importing EF_WERKS = LF_WERKS ).
      endif.
    endif.

*** Get Anchorage for Connection Out => Output
    refresh LT_GATES.
    LT_GATES = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_F0SS_ANCHO=>C_IPRVT_ANCHO
                                      IF_INUSE = ABAP_TRUE ).
    clear LR_GATE.
    read table LT_GATES into LR_GATE index 1.
    check LR_GATE is bound.

    refresh LT_GATES.
    LT_PRVDR_DEF = LR_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

    sort LT_PRVDR_DEF by ID.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

*** Get children of Output and sort them
    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      refresh LT_GATE.
      LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                    IF_INUSE = ABAP_TRUE ).
      append lines of LT_GATE to LT_GATES.
    endloop.

    LR_GATE->SORT_GATE( changing CT_GATE = LT_GATES ).

*** Get first child of Output
    read table LT_GATES into LR_GATE_CHILD index 1.
    check LR_GATE_CHILD is bound and
          LR_GATE_CHILD->R_CLSPR is bound.

*** Get child description
    move LR_GATE_CHILD->R_CLSPR->GET_DESCR( ) to LF_DESCR.

    check LF_DESCR is not initial.
    concatenate ')' LF_DESCR into RF_DESCR separated by SPACE.
    concatenate '(' LF_WERKS RF_DESCR into RF_DESCR.

  endmethod.
  method GET_PR_SPEC.

    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.


    clear ER_GATE.

    check ME->R_GATE is bound.

***--------------------------------------------------------------------------------------
*** Get Specification
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_PRVDR into ER_GATE index 1.
    check ER_GATE is bound.

    try.
        move ER_GATE->R_CLSPR ?to RR_PR_SPEC.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: RR_PR_SPEC,
               ER_GATE.
    endtry.

  endmethod.
  method GET_PRVDR_SOV.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_SOV.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification Overview
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SOV=>C_IPRVT_F0_SOV
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_SOV.

  endmethod.
  method GET_SPVCE_BY_ID.

    data: LF_ID     type        /VCXI/CKX_ID.
    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_SPVCE  type ref to /VCXI/CL_VKSC_SPVCE.

    loop at ME->T_SPVCE into LR_OBJECT.
      move LR_OBJECT ?to LR_SPVCE.

      if LR_SPVCE->/VCXI/IF_CKX_OBJECT~GET_ID( )       eq IF_ID and
         LR_SPVCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) eq IR_SPVCE_PARENT.
        move LR_SPVCE to RR_SPVCE.
        exit.
      endif.
    endloop.

    if RR_SPVCE is not bound.
      if IR_SPVCE_PARENT is not bound.
***     Supervisor Element &1 can't be found.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '401'
                                              IF_MSGV1 = IF_ID ).
      else.
***     Supervisor Element &1 can't be found as child of &2.
        move IR_SPVCE_PARENT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSR'
                                              IF_MSGNO = '402'
                                              IF_MSGV1 = IF_ID
                                              IF_MSGV2 = LF_ID ).
      endif.
    endif.

  endmethod.
  method GET_SPVRE_BY_GATE.

    data:  LR_SPVRE   type ref to /VCXI/CL_VKSR_SPVRE.

    loop at IT_SPVRE into LR_SPVRE.
      if LR_SPVRE->F_GATKY eq IR_GATE->F_GATKY.
        move LR_SPVRE to RR_SPVRE.
      endif.
    endloop.
    if RR_SPVRE is not bound.
***   No Supervised Runtime Element matches the given Gate
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_F0SS'
                                            IF_MSGNO = '102' ).
    endif.

  endmethod.
  method IS_MERGE_ALLOWED.

    data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INPUT  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE.

    move ABAP_FALSE to RF_RETURN.

*** Make sure the Merge is done between the same components
    check ME->R_GATE->F_ID eq IR_XCOMP_OUT->F_ID.

****--------------------------------------------------------------------------------------
*** Check --> No more than 1 Input type XCONI (second XCOMP)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHI=>C_IPRVT_ANCHI
                                     IF_INUSE  = ABAP_TRUE ).
    read table LT_GATE into LR_GATE_INPUT index 1.
    if LR_GATE_INPUT is bound.
      refresh LT_GATE.
***   Get Childs Provider
      ME->GET_CHILD_PRVDR( exporting IR_GATE       = LR_GATE_INPUT
                           changing CT_GATE_CHILDS = LT_GATE ).

      if LINES( LT_GATE ) gt 1.
***     More than 1 Input type found
        return.
      endif.
    endif.

*** Check --> No more than 1 Output type XCONO (first XCOMP)
    LT_GATE = IR_XCOMP_OUT->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHO=>C_IPRVT_ANCHO
                                       IF_INUSE  = ABAP_TRUE ).
    read table LT_GATE into LR_GATE_OUTPUT index 1.
    if LR_GATE_OUTPUT is bound.
      refresh LT_GATE.
***   Get Childs Provider
      ME->GET_CHILD_PRVDR( exporting IR_GATE       = LR_GATE_OUTPUT
                           changing CT_GATE_CHILDS = LT_GATE ).

      if LINES( LT_GATE ) gt 1.
***     More than 1 Output type found
        return.
      endif.
    endif.

    move ABAP_TRUE to RF_RETURN.

  endmethod.
  method MERGE.

    data: LS_SPVRE_CHILD type ZVCXI_F0SS_S_SPVRE_CHILD,
          LS_PRVDR_DEF   type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE        type /VCXI/VKSR_TT_GATE,
          LT_GATE_DEL    type /VCXI/VKSR_TT_GATE,
          LT_GATE_CHILDS type /VCXI/VKSR_TT_GATE,
          LT_SPVRE       type /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_CHILD type ZVCXI_F0SS_TT_SPVRE_CHILD,
          LT_SPVRE_NEW   type /VCXI/VKSR_TT_SPVRE,
          LT_PRVDR       type /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF   type /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_SPVRE         type ref to /VCXI/CL_VKSR_SPVRE,
          LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SPEC     type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUT_SPEC type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUT_CONV type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_SPVRE_CHILD>  type ZVCXI_F0SS_S_SPVRE_CHILD,
                   <S_SPVRE_CHILD2> type ZVCXI_F0SS_S_SPVRE_CHILD.


***--------------------------------------------------------------------------------------
*** Get Supervised Customizing Elements if not already buffered
    if ME->T_SPVCE is initial.
      ME->T_SPVCE = IR_GATE_SOV->GET_SPVCE( ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if Merge is allowed
    check ME->IS_MERGE_ALLOWED( IR_XCOMP_OUT = IR_XCOMP_OUT ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Gather all Elements -->  X-COMP OUT elements
    LT_PRVDR = IR_XCOMP_OUT->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_PRVDR into LR_GATE_OUT_SPEC index 1.
    if LR_GATE_OUT_SPEC is bound.
***   Get childs of Destination Specification
      LT_PRVDR_DEF = LR_GATE_OUT_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
***     Get Gates of Provider
        LT_GATE = LR_GATE_OUT_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                               IF_INUSE = ABAP_TRUE ).
        loop at LT_GATE into LR_GATE.
          case LR_GATE->F_ID.
            when 'CONV'.
***           Buffer the Conversion Node
              move LR_GATE to LR_GATE_OUT_CONV.

            when 'OUTPUT'.
              read table LT_GATE_DEL with key TABLE_LINE = LR_GATE transporting no fields.
              check SY-SUBRC is not initial.

***           Add the gate to the Deleted objects table
              append LR_GATE to LT_GATE_DEL.

***           Get Childs Provider
              refresh LT_GATE_CHILDS.
              ME->GET_CHILD_PRVDR( exporting IR_GATE       = LR_GATE
                                   changing CT_GATE_CHILDS = LT_GATE_CHILDS ).

              append lines of LT_GATE_CHILDS to LT_GATE_DEL.
          endcase.

        endloop.
      endloop.
    endif.

*** Gather all Elements -->  X-COMP IN elements
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_PRVDR into LR_GATE_SPEC index 1.
    if LR_GATE_SPEC is bound.
      append ME->R_GATE to LT_GATE_DEL.
      append LR_GATE_SPEC to LT_GATE_DEL.

***   Get childs of Destination Specification
      LT_PRVDR_DEF = LR_GATE_SPEC->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
***     Get Gates of Provider
        LT_GATE = LR_GATE_SPEC->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                           IF_INUSE = ABAP_TRUE ).

***     Buffer Specification Out
        read table LT_SPVRE_CHILD assigning <S_SPVRE_CHILD> with key R_GATE_PARENT = LR_GATE_OUT_SPEC.
        if SY-SUBRC is not initial.
          insert initial line into table LT_SPVRE_CHILD assigning <S_SPVRE_CHILD>.
          move LR_GATE_OUT_SPEC to <S_SPVRE_CHILD>-R_GATE_PARENT.
          move ABAP_TRUE to <S_SPVRE_CHILD>-COPY_CHILDREN.
        endif.

        loop at LT_GATE into LR_GATE.

          case LR_GATE->F_ID.
            when 'INPUT'.
              append LR_GATE to LT_GATE_DEL.

***           Get Childs Provider
              refresh LT_GATE_CHILDS.
              ME->GET_CHILD_PRVDR( exporting IR_GATE       = LR_GATE
                                   changing CT_GATE_CHILDS = LT_GATE_CHILDS ).

              append lines of LT_GATE_CHILDS to LT_GATE_DEL.

            when 'CONV'.
***           Add Conversion to delete gates
              append LR_GATE to LT_GATE_DEL.

              read table LT_SPVRE_CHILD with key R_GATE_PARENT = LR_GATE
                                        transporting no fields.
              if SY-SUBRC is not initial.
                insert initial line into table LT_SPVRE_CHILD assigning <S_SPVRE_CHILD2>.
                move LR_GATE_OUT_CONV to <S_SPVRE_CHILD2>-R_GATE_PARENT.

***             Get Childs Provider
                refresh LT_GATE_CHILDS.
                ME->GET_CHILD_PRVDR( exporting IR_GATE       = LR_GATE
                                     changing CT_GATE_CHILDS = LT_GATE_CHILDS ).
                move LT_GATE_CHILDS to <S_SPVRE_CHILD2>-T_GATE_CHILDS.
                move ABAP_TRUE      to <S_SPVRE_CHILD2>-COPY_CHILDREN.
              endif.

            when others.
***           Add the remaining Gate to the new parent SPEC
              read table <S_SPVRE_CHILD>-T_GATE_CHILDS with key TABLE_LINE = LR_GATE
                                                       transporting no fields.
              if SY-SUBRC is not initial.
                append LR_GATE to <S_SPVRE_CHILD>-T_GATE_CHILDS.
              endif.

          endcase.

        endloop.
      endloop.

    endif.
    sort LT_SPVRE_CHILD by R_GATE_PARENT.
    delete adjacent duplicates from LT_SPVRE_CHILD comparing R_GATE_PARENT.

    sort LT_GATE_DEL by TABLE_LINE.
    delete adjacent duplicates from LT_GATE_DEL comparing TABLE_LINE.

***--------------------------------------------------------------------------------------
*** Get All Supervised Runtime Elements
    LT_SPVRE = IR_GATE_SOV->GET_SPVRE( ).

    loop at LT_SPVRE_CHILD assigning <S_SPVRE_CHILD> where R_GATE_PARENT is bound.
***   Get Supervised Runtime Element
      <S_SPVRE_CHILD>-R_SPVRE_PARENT = ME->GET_SPVRE_BY_GATE( IR_GATE  = <S_SPVRE_CHILD>-R_GATE_PARENT
                                                              IT_SPVRE = LT_SPVRE ).
    endloop.

***--------------------------------------------------------------------------------------
*** Analyze all supervised elements
    loop at LT_SPVRE into LR_SPVRE.
      read table LT_SPVRE_CHILD into LS_SPVRE_CHILD with key R_SPVRE_PARENT = LR_SPVRE.
      if SY-SUBRC is initial.
***     Collect the Parent also
        append LR_SPVRE to LT_SPVRE_NEW.

        loop at LS_SPVRE_CHILD-T_GATE_CHILDS into LR_GATE.
***       Copy based on existing Gate
          ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                           IR_SPVRE_PARENT  = LS_SPVRE_CHILD-R_SPVRE_PARENT
                                           IF_COPY_CHILDREN = LS_SPVRE_CHILD-COPY_CHILDREN
                                 changing  CT_SPVRE         = LT_SPVRE_NEW ).
        endloop.
        continue.
      endif.

      append LR_SPVRE to LT_SPVRE_NEW.
    endloop.

*** Free the unwanted Gates
    loop at LT_GATE_DEL into LR_GATE.
      LR_GATE->DO_FREE( ).
    endloop.

***--------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    IR_GATE_SOV->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

  endmethod.
  method SPLIT.

    data: LS_SPVRE_CHILD type        ZVCXI_F0SS_S_SPVRE_CHILD,
          LS_XCONA       type        ZVCXI_F0SS_S_XCONA,
          LS_LEOKY       type        /VCXI/VKSR_S_LEOKY.
    data: LT_SPVRE       type        /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_CHILD type        ZVCXI_F0SS_TT_SPVRE_CHILD,
          LT_SPVRE_NEW   type        /VCXI/VKSR_TT_SPVRE.
    data: LR_PR_SOV       type ref to ZCL_VCXI_F0SS_PR_SOV,
          LR_GATE_SOV     type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
          LR_XCOMP_SOURCE type ref to /VCXI/CL_VKSR_GATE,
          LR_SPVRE        type ref to /VCXI/CL_VKSR_SPVRE,
          LR_PR_XCONI     type ref to ZCL_VCXI_F0SS_PR_XCONI.


*** Get Specification Overview
    LR_PR_SOV = ME->GET_PRVDR_SOV( importing ER_GATE = LR_GATE_SOV ).
    check LR_GATE_SOV is bound.

*** Get Supervised Customizing Elements if not already buffered
    if ME->T_SPVCE is initial.
      ME->T_SPVCE = LR_GATE_SOV->GET_SPVCE( ).
    endif.

***--------------------------------------------------------------------------------------
*** Create the Destination X-component
    ER_GATE_DEST = LR_GATE_SOV->CREATE_ELEMENT( IF_ID = ME->R_GATE->F_ID ).

    if ER_GATE_DEST is bound.
***   Set in Use
      if ER_GATE_DEST->GET_USYNC( ) eq ABAP_FALSE.
        ER_GATE_DEST->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      endif.

***   Get Anchorage Out
      try.
          move ER_GATE_DEST->R_CLSPR ?to LS_XCONA-R_ANCHO.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LS_XCONA-R_ANCHO.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Gather all Elements that needs to be transferred
    ME->DET_SPVRE_CHILDREN( exporting IR_PR_SOV        = LR_PR_SOV
                                      IR_GATE_SOV      = LR_GATE_SOV
                                      IR_GATE_SOURCE   = IR_GATE_SOURCE
                                      IR_XCOMP_DEST    = ER_GATE_DEST
                            importing ET_SPVRE_CHILD   = LT_SPVRE_CHILD
                                      ET_SPVRE         = LT_SPVRE
                                      ET_XCONA         = ET_XCONA
                                      ER_XCOMP_SOURCE  = LR_XCOMP_SOURCE ).

*** Analyze all supervised elements
    loop at LT_SPVRE into LR_SPVRE.
      read table LT_SPVRE_CHILD into LS_SPVRE_CHILD with key R_SPVRE_PARENT = LR_SPVRE.
      if SY-SUBRC is initial.
***     Collect the Parent and copy values from Source Gate
        append LR_SPVRE to LT_SPVRE_NEW.
        if LS_SPVRE_CHILD-R_GATE_SOURCE is bound.
          ME->COPY_FROM_GATE( IR_GATE  = LS_SPVRE_CHILD-R_GATE_SOURCE
                              IR_SPVRE = LR_SPVRE ).
          try.
              move LS_SPVRE_CHILD-R_GATE_SOURCE->R_CLSPR ?to LR_PR_XCONI.
              if LR_PR_XCONI is bound.
                clear LS_LEOKY.
                LR_SPVRE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).
              endif.
            catch CX_SY_MOVE_CAST_ERROR.
              clear LR_PR_XCONI.
          endtry.
        endif.

        loop at LS_SPVRE_CHILD-T_GATE_CHILDS into LR_GATE.
***       Copy based on existing Gate
          ME->ADD_SPVRE_BY_GATE( exporting IR_GATE          = LR_GATE
                                           IR_SPVRE_PARENT  = LS_SPVRE_CHILD-R_SPVRE_PARENT
                                           IF_COPY_CHILDREN = LS_SPVRE_CHILD-COPY_CHILDREN
                                 changing  CT_SPVRE         = LT_SPVRE_NEW ).
        endloop.

***     Clear Source Gates if any
        if LS_SPVRE_CHILD-R_GATE_SOURCE is bound.
          LS_SPVRE_CHILD-R_GATE_SOURCE->DO_FREE( ).
        endif.

        continue.
      endif.

      append LR_SPVRE to LT_SPVRE_NEW.
    endloop.

*** Free the old Gates
    loop at LT_SPVRE_CHILD into LS_SPVRE_CHILD.
      loop at LS_SPVRE_CHILD-T_GATE_CHILDS into LR_GATE.
        LR_GATE->DO_FREE( ).
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    LR_GATE_SOV->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

***--------------------------------------------------------------------------------------
*** Get Anchorage for Connection In
    if LR_XCOMP_SOURCE is bound.
      try .
          move LR_XCOMP_SOURCE->R_CLSPR ?to LS_XCONA-R_ANCHI.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LS_XCONA-R_ANCHI.
      endtry.
    endif.

*** Connect the new components
    if LS_XCONA-R_ANCHI is bound and
       LS_XCONA-R_ANCHO is bound.
      append LS_XCONA to ET_XCONA.
      LR_PR_SOV->CONNECT_BY_XCON( IR_XCON_IN  = LS_XCONA-R_ANCHI
                                  IR_XCON_OUT = LS_XCONA-R_ANCHO ).
    endif.
    LR_GATE_SOV->RAISE_EVENTS( ).

  endmethod.
  method ZIF_VCXI_F0SS_ANCHI~ADD_XCON.

    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_ANCHI type ref to ZIF_VCXI_F0SS_ANCHI.
    data: LT_GATE type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get Gates for anchorages ingoing (Input)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHI=>C_IPRVT_ANCHI
                                     IF_INUSE  = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.

    check SY-SUBRC eq 0
      and LR_GATE  is bound.

    try.
        move LR_GATE->R_CLSPR ?to LR_ANCHI.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_ANCHI.
    endtry.

    check LR_ANCHI is bound.

*** Forward call to anchorage and return result gate
    RR_GATE = LR_ANCHI->ADD_XCON( ).

  endmethod.
  method ZIF_VCXI_F0SS_ANCHO~ADD_XCON.

    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_ANCHO type ref to ZIF_VCXI_F0SS_ANCHO.
    data: LT_GATE type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Get Gates for anchorages outgoing (Output)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_ANCHO=>C_IPRVT_ANCHO
                                     IF_INUSE  = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.

    check SY-SUBRC eq 0
      and LR_GATE  is bound.

    try.
        move LR_GATE->R_CLSPR ?to LR_ANCHO.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_ANCHO.
    endtry.

    check LR_ANCHO is bound.

*** Forward call to anchorage and return result gate
    RR_GATE = LR_ANCHO->ADD_XCON( ).

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE.


    check CR_NETGRAPH_JSON is bound.

*** Get Specification
    data(LR_PR_SPEC) = ME->GET_PR_SPEC( ).

*** Get sequence of Gates inside the Specification
    data(LT_SEQUENCE) = LR_PR_SPEC->GET_SEQUENCE( ).

***--------------------------------------------------------------------------------------
*** Collect relevant Gates inside Component
    loop at LT_SEQUENCE into data(LS_SEQUENCE).
      loop at LS_SEQUENCE-T_GATE_NEXT into LR_GATE.
        collect LR_GATE into LT_GATE.
      endloop.
      loop at LS_SEQUENCE-T_GATE_PREV into LR_GATE.
        collect LR_GATE into LT_GATE.
      endloop.
    endloop.

*** Delegate creation of Net Graphic Elements
    loop at LT_GATE into LR_GATE where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
***   Check if already represented
      check CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE ) is initial.

***   Fill
      cast ZIF_VCXI_XCS_NGREP( LR_GATE->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                         changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
    endloop.

***--------------------------------------------------------------------------------------
*** Assign unrepresented Gates to existing representation (forward)
    loop at LT_SEQUENCE into LS_SEQUENCE.
      check LS_SEQUENCE-T_GATE_NEXT is not initial and
            LS_SEQUENCE-T_GATE_PREV is not initial.

      loop at LS_SEQUENCE-T_GATE_NEXT into LR_GATE_NEXT.
***     Check if already represented
        check CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_NEXT ) is initial.
***     Register Gate to Node
        CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_NEXT
                                            IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_SEQUENCE-T_GATE_PREV[ 1 ] ) ).
      endloop.
      loop at LS_SEQUENCE-T_GATE_PREV into LR_GATE_PREV.
***     Check if already represented
        check CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_PREV ) is initial.
***     Register Gate to Node
        CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_PREV
                                            IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_SEQUENCE-T_GATE_NEXT[ 1 ] ) ).
      endloop.
    endloop.

*** Assign unrepresented Gates to existing representation (backward)
    do LINES( LT_SEQUENCE ) times.
      LS_SEQUENCE = LT_SEQUENCE[ LINES( LT_SEQUENCE ) - SY-INDEX + 1 ].
      check LS_SEQUENCE-T_GATE_NEXT is not initial and
            LS_SEQUENCE-T_GATE_PREV is not initial.

      loop at LS_SEQUENCE-T_GATE_NEXT into LR_GATE_NEXT.
***     Check if already represented
        check CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_NEXT ) is initial.
***     Register Gate to Node
        CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_NEXT
                                            IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_SEQUENCE-T_GATE_PREV[ 1 ] ) ).
      endloop.
      loop at LS_SEQUENCE-T_GATE_PREV into LR_GATE_PREV.
***     Check if already represented
        check CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_PREV ) is initial.
***     Register Gate to Node
        CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_PREV
                                            IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_SEQUENCE-T_GATE_NEXT[ 1 ] ) ).
      endloop.
    enddo.

***--------------------------------------------------------------------------------------
*** Create Lines
    loop at LT_SEQUENCE into LS_SEQUENCE.
      loop at LS_SEQUENCE-T_GATE_NEXT into LR_GATE_NEXT.
        loop at LS_SEQUENCE-T_GATE_PREV into LR_GATE_PREV.
          CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_NEXT )
                                      IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_PREV ) ).
        endloop.
      endloop.
    endloop.

  endmethod.
