
class ZCL_VCXI_FFSR_BL_PSTEP_EXTR definition
  public
  inheriting from ZCL_VCXI_FFSR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_FFSR_CONV_WTL .
  interfaces ZIF_VCXI_FFSR_ADJ_FIDIM .
  interfaces ZIF_VCXI_FFSR_RHNDL .

  constants C_IPSTP_EXTR type /VCXI/VSMC_IPSTP value 'FF_PS_EXTR' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_EXTR
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .
  methods OPTIMIZE
    importing
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  data R_ARBPL type ref to /VCXI/CL_VSMC_ARBPL .
  data S_FIDIM_OUT type ZVCXI_FFSP_S_FIDIM .
  data S_MS_RECI type ZVCXI_FFSR_S_MS_RECI .
  data T_FIDIM_IN type ZVCXI_FFSP_TT_FIDIM .
  data F_FOPEX type ZVCXI_FFS_FOPEX .
  data S_TRWID type ZVCXI_F0S_S_TRWID .
  data F_NOOMI type ZVCXI_FFS_NOOMI .
  data F_NOOMA type ZVCXI_FFS_NOOMA .
  data S_WIDIM_OUT type ZVCXI_FFSR_S_WIDIM .

  methods ADD_SPVRE_MFMI_W
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_EXTR
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_EXTR
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RR_PR_EXTR) type ref to ZCL_VCXI_FFSS_PR_EXTR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_RECI
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RR_PR_MS_RECI) type ref to ZCL_VCXI_FFSS_PR_MS_RECI
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_FIDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_EXTR_RECI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods ADD_SPVRE_MFSI_L
    redefinition .
  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PSTEP_EXTR definition
class ZCL_VCXI_FFSR_BL_PSTEP_EXTR implementation.
  method ADD_ASPECTS_TO_RTE_PSTEP.

    data:           LS_RTE_SAREC type        /VCXI/VSMR_S_RTE_SAREC.
    field-symbols: <S_ARECN>     type        /VCXI/VSMR_S_RTE_RANGE_ARECN.

*** Get Super
    SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

*** Aspect - Internal Film Thickness
    try.
        clear LS_RTE_SAREC.
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move ME->S_MS_RECI-FITIN    to <S_ARECN>-LOW.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_IAATY_FITIN
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT ).

      catch /VCXI/CX_CKX.
    endtry.

*** Aspect - Extrusion Width
    try.
        clear LS_RTE_SAREC.
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move ME->S_MS_RECI-EXWID    to <S_ARECN>-LOW.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_IAATY_EXWID
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT ).

      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type        /VCXI/VSMC_LDUOM,
          LF_LDVAL type        /VCXI/VSMR_LDVAL.
    data:           LI_LVVAL  type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data:           LT_LTYPE  type        /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols:  <S_LVVAL> type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).

*** Add Limits
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Number of Films (Inbound)
        when 'FF_LT_DI_NOFIL'.
          move LINES( ME->T_FIDIM_IN )        to LF_LDVAL.
          move 'ST'                           to LF_LDUOM.


***     Internal Film Thickness
        when 'FF_LT_DP_FITIN'.
          move ME->S_MS_RECI-FITIN               to LF_LDVAL.
          move ME->S_MS_RECI-FITIN_UOM           to LF_LDUOM.

***     Extrusion Type
        when 'FF_LT_VP_TEXTR'.
          append initial line to LI_LVVAL assigning <S_LVVAL>.
          move 'I'                               to <S_LVVAL>-SIGN.
          move 'EQ'                              to <S_LVVAL>-OPTION.
          move ME->S_MS_RECI-TEXTR               to <S_LVVAL>-LOW.

***     Extrusion Width
        when 'FF_LT_DP_EXWID'.
          if ME->F_FOPEX ne ABAP_TRUE or
             ME->R_ARBPL is bound.
            move ME->S_MS_RECI-S_EXWID-EXWID       to LF_LDVAL.
            move ME->S_MS_RECI-S_EXWID-EXWID_UOM   to LF_LDUOM.
          else.
            IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
            continue.
          endif.

***     Number of Layer
        when 'FF_LT_DI_NOLAY'.
          move ME->S_MS_RECI-NOLAY               to LF_LDVAL.
          move 'ST'                              to LF_LDUOM.

***     Winding Width
        when 'FF_LT_DO_WIWID'.
          move ME->S_WIDIM_OUT-WIWID             to LF_LDVAL.
          move ME->S_WIDIM_OUT-WIWID_UOM         to LF_LDUOM.

***     Number of Outs
        when 'F0_LT_DO_NOOUT'.
          if ME->F_FOPEX ne ABAP_TRUE or
             ME->R_ARBPL is bound.
            move ME->S_FIDIM_OUT-NOOUT           to LF_LDVAL.
            move 'ST'                            to LF_LDUOM.
          else.
            IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
            continue.
          endif.

        when others.
          continue.

      endcase.

***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.

    endloop.

  endmethod.
  method ADD_SPVRE_MFMI_W.

    data: LS_LEOKY        type        /VCXI/VKSR_S_LEOKY,
          LS_PARAM        type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMI_W type ref to /VCXI/CL_VKSR_SPVRE.

*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_W'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFMI_W
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFMI_W to CT_SPVRE.

**** Force Recipie to lead Material Flow In
*    LR_SPVRE_MFMI_W->SET_POSID( IF_POSID = 5 ).

*** Set In Use
    LR_SPVRE_MFMI_W->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Material Number
    clear LS_LEOKY.
    move ME->S_MS_RECI-MATNR                          to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
    LR_SPVRE_MFMI_W->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***------------------------------------------------------------------------------------------------
*** Set Text
    if ME->S_MS_RECI-TEXT is not initial.
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MFMI_W=>C_PARID_TEXT       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move  ME->S_MS_RECI-TEXT                         to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MFMI_W->SET_PARAM( IS_PARAM = LS_PARAM ).
    endif.

  endmethod.
  method ADD_SPVRE_MFSI_L.

*** Don't create MFSI in Length w/o Cross Connection Information
    check ME->T_IMFXC_IN is not initial.

    SUPER->ADD_SPVRE_MFSI_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                             changing  CT_SPVRE       = CT_SPVRE ).

  endmethod.
  method COMPARE.

    data: LR_BL_PSTEP_EXTR type ref to ZCL_VCXI_FFSR_BL_PSTEP_EXTR.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_EXTR.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    if ME->T_FIDIM_IN  eq LR_BL_PSTEP_EXTR->T_FIDIM_IN and
       ME->S_FIDIM_OUT eq LR_BL_PSTEP_EXTR->S_FIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Winding Dimensions
    if ME->S_WIDIM_OUT eq LR_BL_PSTEP_EXTR->S_WIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Extrusion Recipe
    if ME->S_MS_RECI eq LR_BL_PSTEP_EXTR->S_MS_RECI.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Optimized Extrusion Width Flag and Trim
    if ME->F_FOPEX eq LR_BL_PSTEP_EXTR->F_FOPEX and
       ME->F_NOOMI eq LR_BL_PSTEP_EXTR->F_NOOMI and
       ME->F_NOOMA eq LR_BL_PSTEP_EXTR->F_NOOMA and
       ME->S_TRWID eq LR_BL_PSTEP_EXTR->S_TRWID.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_EXTR type ref to ZCL_VCXI_FFSR_BL_PSTEP_EXTR.

*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_EXTR.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    move ME->T_FIDIM_IN    to LR_BL_PSTEP_EXTR->T_FIDIM_IN.
    move ME->S_FIDIM_OUT   to LR_BL_PSTEP_EXTR->S_FIDIM_OUT.

*** Winding Dimensions
    move ME->S_WIDIM_OUT   to LR_BL_PSTEP_EXTR->S_WIDIM_OUT.

***--------------------------------------------------------------------------------------
*** Extrusion Recipe
    move ME->S_MS_RECI    to LR_BL_PSTEP_EXTR->S_MS_RECI.

*** Optimized Extrusion Width Flag and Trim
    move ME->F_FOPEX      to LR_BL_PSTEP_EXTR->F_FOPEX.
    move ME->F_NOOMI      to LR_BL_PSTEP_EXTR->F_NOOMI.
    move ME->F_NOOMA      to LR_BL_PSTEP_EXTR->F_NOOMA.

    move ME->S_TRWID      to LR_BL_PSTEP_EXTR->S_TRWID.

    move ME->R_ARBPL      to LR_BL_PSTEP_EXTR->R_ARBPL.

  endmethod.
  method DESERIALIZE.

    data: LF_XML        type STRING.


    check IF_XML is not initial.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML   = LF_XML

                T_FIDIM_IN  = ME->T_FIDIM_IN
                S_FIDIM_OUT = ME->S_FIDIM_OUT
                S_WIDIM_OUT = ME->S_WIDIM_OUT

                S_MS_RECI   = ME->S_MS_RECI
                F_FOPEX     = ME->F_FOPEX
                F_NOOMI     = ME->F_NOOMI
                F_NOOMA     = ME->F_NOOMA
                S_TRWID     = ME->S_TRWID.

*** Super Deserialize
    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when 'FF_AT_EXTR'.
        ME->FILL_SPVRE_ADDON_EXTR( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                             IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                             IR_ARBPL       = IR_ARBPL
                                   changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_EXTR.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Set Average Consumption
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_AVGCO_W  to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_MS_RECI-S_AVGCO-AVGCO                   to LS_PARAM-ATFLV.
    move ME->S_MS_RECI-S_AVGCO-AVGCO_UOM               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Average Consumption Per
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_AVGCP_A  to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_MS_RECI-S_AVGCP-AVGCP                   to LS_PARAM-ATFLV.
    move ME->S_MS_RECI-S_AVGCP-AVGCP_UOM               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Internal Film Thickness
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_FITIN    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_MS_RECI-FITIN                           to LS_PARAM-ATFLV.
    move ME->S_MS_RECI-FITIN_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Exernal Film Thickness
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_FITEX    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_MS_RECI-FITEX                           to LS_PARAM-ATFLV.
    move ME->S_MS_RECI-FITEX_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Extrusion Width
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_EXWID    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_MS_RECI-S_EXWID-EXWID                   to LS_PARAM-ATFLV.
    move ME->S_MS_RECI-S_EXWID-EXWID_UOM               to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Blocked Film
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_FBLOF    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR             to LS_PARAM-PARTY.
    move ME->S_MS_RECI-FBLOF                           to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).


***--------------------------------------------------------------------------------------
*** Set Film Width
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_FIWID    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_FIDIM_OUT-FIWID                         to LS_PARAM-ATFLV.
    move ME->S_FIDIM_OUT-FIWID_UOM                     to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Film Length
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_RELEN    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_FIDIM_OUT-RELEN                         to LS_PARAM-ATFLV.
    move ME->S_FIDIM_OUT-RELEN_UOM                     to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number Ups
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_NOUPS    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_FIDIM_OUT-NOUPS                         to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Number Outs
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EXTR=>C_PARID_NOOUT    to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC             to LS_PARAM-PARTY.
    move ME->S_FIDIM_OUT-NOOUT                         to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC              to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method GET_ARBPL_INFO.

***------------------------------------------------------------------
*** Standard
    move 'ARBPL_EXTR' to CF_ID_ARBPL.

  endmethod.
  method GET_PRVDR_EXTR.

    data:  LR_GATE   type ref to /VCXI/CL_VKSR_GATE.

*** Get Reference
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_EXTR.
          if RR_PR_EXTR is bound.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_MS_RECI.

    data:  LR_GATE   type ref to /VCXI/CL_VKSR_GATE.

*** Get Reference
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_MS_RECI.
          if RR_PR_MS_RECI is bound.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_SPVRE_MF.

***------------------------------------------------------------------------------------------------
*** Always Try to add MFSI (after Route has added MFMI)
    if ME->T_IMFXC_IN is not initial.
      move ABAP_FALSE to CF_MFI.
    endif.

*** Add MFSI Length
    if CF_MFI ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSI_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFI.
    endif.

*** Add Recipe
    ME->ADD_SPVRE_MFMI_W( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                    IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                          changing  CT_SPVRE       = CT_SPVRE ).
    move ABAP_TRUE to CF_MFI.

***------------------------------------------------------------------------------------------------
*** Add MFSO Length
    if CF_MFO ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSO_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFO.
    endif.

  endmethod.
  method INIT_BY_SPEC.

    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

*** Initialize Film Dimensions
    ME->INIT_BY_SPEC_FIDIM( IT_PRVDR = IT_PRVDR ).

*** Initialize Extrusion Recipe Data
    ME->INIT_BY_SPEC_EXTR_RECI( IR_GATE  = IR_GATE
                                IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_SPEC_EXTR_RECI.

    data: LS_SURWT type        ZVCXI_F0S_S_SURWT.
    data: LR_PR_EXTR    type ref to ZCL_VCXI_FFSS_PR_EXTR,
          LR_PR_MS_RECI type ref to ZCL_VCXI_FFSS_PR_MS_RECI,
          LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

*** Get Provider - Extrusion
    move ME->GET_PRVDR_EXTR( IT_PRVDR = IT_PRVDR ) to LR_PR_EXTR.
    check LR_PR_EXTR is bound.

*** Get Provider - Recipe
    move ME->GET_PRVDR_MS_RECI( IT_PRVDR = IT_PRVDR ) to LR_PR_MS_RECI.
    check LR_PR_MS_RECI is bound.

*** Basic Info
    move LR_PR_MS_RECI->GET_MATNR( ) to ME->S_MS_RECI-MATNR.
*    move LR_PR_MS_RECI->GET_TEXT( )  to ME->S_MS_RECI-TEXT.

*** Purchasing Info
    move LR_PR_MS_RECI->GET_PURCH( )   to ME->S_MS_RECI-PURCH.
*    move LR_PR_MS_RECI->GET_LIFNR( )   to ME->S_MS_RECI-LIFNR.
    move LR_PR_MS_RECI->GET_PRICE( )   to ME->S_MS_RECI-S_PRICE.
    move LR_PR_MS_RECI->GET_PRICP( )   to ME->S_MS_RECI-S_PRICP.

*** Extrusion Type
    LR_PR_EXTR->GET_TEXTR( importing EF_TEXTR = ME->S_MS_RECI-TEXTR ).

*** Number of Layer
    LR_PR_MS_RECI->GET_NOLAY( importing EF_NOLAY = ME->S_MS_RECI-NOLAY ).

*** Optimized Extrusion Width Flag
    move LR_PR_EXTR->GET_FOPEX( ) to ME->F_FOPEX.

*** Get Number of Outs - Minimum/Maximum
    LR_PR_EXTR->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
      LR_BL_FIFPROP->GET_NOOMI_NOOMA( importing EF_NOOMI = ME->F_NOOMI
                                                EF_NOOMA = ME->F_NOOMA ).
    endif.

*** Trim
    LR_PR_EXTR->GET_TRWID( importing ES_TRWID = ME->S_TRWID ).

***--------------------------------------------------------------------------------------
*** Surface Weight (Inbound)
    LR_PR_EXTR->GET_SURWT( importing ES_SURWT = LS_SURWT ).

*** Fixed Average Consumption Per as base for Average Consumption
    move 1000 to ME->S_MS_RECI-S_AVGCP-AVGCP.
    move 'M2' to ME->S_MS_RECI-S_AVGCP-AVGCP_UOM.

*** Calculate Average Consumption by Application Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                        IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                        IF_CALCV_2     = ME->S_MS_RECI-S_AVGCP-AVGCP
                                                        IF_CALCV_UOM_2 = ME->S_MS_RECI-S_AVGCP-AVGCP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = ME->S_MS_RECI-S_AVGCO-AVGCO
                                                        EF_CALCV_UOM   = ME->S_MS_RECI-S_AVGCO-AVGCO_UOM ).


***--------------------------------------------------------------------------------------
*** Film Width (Inbound)
    LR_PR_EXTR->GET_FIWID( importing ES_FIWID = ME->S_MS_RECI-S_FIWID ).

*** Blocked Film
    LR_PR_EXTR->GET_FISTY( importing EF_FBLOF = ME->S_MS_RECI-FBLOF ).

*** Internal/External Thickness (Inbound)
    LR_PR_EXTR->GET_FITIN( importing ES_FITIN = ME->S_MS_RECI-S_FITIN ).
    LR_PR_EXTR->GET_FITEX( importing ES_FITEX = ME->S_MS_RECI-S_FITEX ).

    if ME->F_FOPEX ne ABAP_TRUE.
      LR_PR_EXTR->GET_NOOUT( importing EF_NOOUT = ME->S_FIDIM_OUT-NOOUT ).
      LR_PR_EXTR->GET_EXWID( importing ES_EXWID = ME->S_MS_RECI-S_EXWID ).
    endif.

  endmethod.
  method INIT_BY_SPEC_FIDIM.

    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_FCONI    type ref to ZCL_VCXI_FFSS_PR_FCONI,
          LR_PR_MS_FPROC type ref to ZCL_VCXI_FFSS_PR_MS_FPROC,
          LR_PR_MS_EMAT  type ref to ZCL_VCXI_FFSS_PR_MS_EMAT,
          LR_PR_INPUT    type ref to ZCL_VCXI_FFSS_PR_INPUT,
          LR_BL_FIFPROP  type ref to ZCL_VCXI_FFSS_BL_FIFPROP.
    field-symbols: <S_FIDIM_IN>      type       ZVCXI_FFSP_S_FIDIM.

***--------------------------------------------------------------------------------------
*** Get Inbound Dimensions
    loop at IT_PRVDR into LR_GATE.

***   By Connector In
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_FCONI.
          if LR_PR_FCONI is bound.
            append initial line to ME->T_FIDIM_IN assigning <S_FIDIM_IN>.
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = <S_FIDIM_IN>-S_FIWID ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN( importing ES_RELEN = <S_FIDIM_IN>-S_RELEN ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = <S_FIDIM_IN>-S_FITIN ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = <S_FIDIM_IN>-S_FITEX ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = <S_FIDIM_IN>-S_SURWT ).
            LR_PR_FCONI->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = <S_FIDIM_IN>-NOUPS ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_FCONI.
      endtry.

***   By MS Film Procurement
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_FPROC.
          if LR_PR_MS_FPROC is bound.
            append initial line to ME->T_FIDIM_IN assigning <S_FIDIM_IN>.
            LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = <S_FIDIM_IN>-S_FIWID ).
            LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN( importing ES_RELEN = <S_FIDIM_IN>-S_RELEN ).
            LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = <S_FIDIM_IN>-S_FITIN ).
            LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = <S_FIDIM_IN>-S_FITEX ).
            LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = <S_FIDIM_IN>-S_SURWT ).
            LR_PR_MS_FPROC->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = <S_FIDIM_IN>-NOUPS ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MS_FPROC.
      endtry.

***   By MS Estimation Material
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_EMAT.
          if LR_PR_MS_EMAT is bound.
            append initial line to ME->T_FIDIM_IN assigning <S_FIDIM_IN>.
            LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = <S_FIDIM_IN>-S_FIWID ).
            LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN( importing ES_RELEN = <S_FIDIM_IN>-S_RELEN ).
            LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = <S_FIDIM_IN>-S_FITIN ).
            LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = <S_FIDIM_IN>-S_FITEX ).
            LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = <S_FIDIM_IN>-S_SURWT ).
            LR_PR_MS_EMAT->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = <S_FIDIM_IN>-NOUPS ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_MS_EMAT.
      endtry.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Outbound Dimensions from Input Element
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_INPUT.
          if LR_PR_INPUT is bound.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_INPUT.
          continue.
      endtry.
    endloop.

    check LR_PR_INPUT is bound.
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN( importing ES_RELEN = ME->S_FIDIM_OUT-S_RELEN ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_OUT-S_FITEX ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_OUT-S_SURWT ).
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_OUT-NOUPS ).

***--------------------------------------------------------------------------------------
*** Get Winding Dimension
    LR_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
***   Get Winding Width
      ME->S_WIDIM_OUT-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
***   Get Winding Thickness
      ME->S_WIDIM_OUT-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_OUT-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_OUT-S_SURWT
                                                          IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_WIWID = ME->S_WIDIM_OUT-S_WIWID ).
    endif.

  endmethod.
  method OPTIMIZE.

    data: LF_GLDIK type        /VCXI/VSMC_GLDIK,
          LF_GLTYP type        /VCXI/VSMC_GLTYP.
    data: LS_LDIM  type        /VCXI/VSMC_S_LDIM,
          LS_EXWID type        ZVCXI_FFS_S_EXWID.
    data: LT_ATYPE type        /VCXI/CKX_TT_OBJECT,
          LT_LTYPE type        /VCXI/CKX_TT_OBJECT.
    data: LR_MGRP        type ref to /VCXI/CL_VSMC_MGRP,
          LR_MGRPV_LIMIT type ref to /VCXI/CL_VSMC_MGRPV_LIMIT,
          LR_ATYPE       type ref to /VCXI/CL_VSMC_ATYPE,
          LR_LTYPE       type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT.

*** Optimization needed and allowed
    check ME->R_ARBPL ne IR_ARBPL and
          ME->F_FOPEX eq ABAP_TRUE.
    move IR_ARBPL  to ME->R_ARBPL.
    move ABAP_TRUE to RF_RECHECK.

*** Always start with 0
    move 0 to ME->S_FIDIM_OUT-NOOUT.

***----------------------------------------------------------------------------
*** Get Limit Machine Group
    if ME->R_ARBPL is bound.
      LR_MGRP = ME->R_ARBPL->GET_MGRP_BY_DATE( IF_DATE  = ME->F_DATE
                                               IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).
      if LR_MGRP is bound.
***     Get Limit Machine Group Version
        LR_MGRPV_LIMIT ?= LR_MGRP->GET_MGRPV_BY_DATE( IF_DATE = ME->F_DATE ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get Add-on Extrusion
    move ME->R_PSTEP->/VCXI/IF_VSMC_LINK_ATYPE~GET_LINKED_ATYPE( ) to LT_ATYPE.
    loop at LT_ATYPE into LR_OBJECT.
      check LR_OBJECT->GET_ID( ) eq 'FF_AT_EXTR'.
      move LR_OBJECT ?to LR_ATYPE.
      exit.
    endloop.
    if LR_MGRPV_LIMIT is bound and
       LR_ATYPE       is bound.
      LF_GLDIK = LR_MGRPV_LIMIT->GET_GLDIK_BY_ATYPE( IR_ATYPE = LR_ATYPE ).
    endif.

*** Get Limit for Extrusion Width
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      check LR_OBJECT->GET_ID( ) eq 'FF_LT_DP_EXWID'.
      move LR_OBJECT ?to LR_LTYPE.
      exit.
    endloop.
    if LR_LTYPE is bound.
      LF_GLTYP = LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
    endif.

*** Get defined Limit
    if LR_MGRPV_LIMIT is bound and
       LF_GLDIK is not initial and
       LF_GLTYP is not initial.
      read table LR_MGRPV_LIMIT->T_LDIM into LS_LDIM
                                        with key GLDIK = LF_GLDIK
                                                 GLTYP = LF_GLTYP.
      if SY-SUBRC eq 0.
        move LS_LDIM-LDMAX   to LS_EXWID-EXWID.
        move LS_LDIM-LDUOM   to LS_EXWID-EXWID_UOM.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Reduce allowed Extrusion width by Trim (and convert to unit of Film Width)
    if LS_EXWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
        exporting
          IF_CALCV_1     = LS_EXWID-EXWID
          IF_CALCV_UOM_1 = LS_EXWID-EXWID_UOM
          IF_CALCV_2     = ME->S_TRWID-TRWID
          IF_CALCV_UOM_2 = ME->S_TRWID-TRWID_UOM
          IF_UOM         = ME->S_MS_RECI-S_FIWID-FIWID_UOM
          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
        importing
          EF_CALCV       = LS_EXWID-EXWID
          EF_CALCV_UOM   = LS_EXWID-EXWID_UOM ).

***   Calculate optimum Number of Outs
      if ME->S_MS_RECI-S_FIWID-FIWID ne 0.
        ME->S_FIDIM_OUT-NOOUT = FLOOR( LS_EXWID-EXWID / ME->S_MS_RECI-S_FIWID-FIWID ).

***     Check against Minimum and Maximum and adjust
        if ME->S_FIDIM_OUT-NOOUT lt ME->F_NOOMI.
          move 0 to ME->S_FIDIM_OUT-NOOUT.
        endif.

        if ME->F_NOOMA ne 0 and
           ME->S_FIDIM_OUT-NOOUT gt ME->F_NOOMA.
          move ME->F_NOOMA to ME->S_FIDIM_OUT-NOOUT.
        endif.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Get Limit for Number of Outs
    clear LR_LTYPE.
    loop at LT_LTYPE into LR_OBJECT.
      check LR_OBJECT->GET_ID( ) eq 'F0_LT_DO_NOOUT'.
      move LR_OBJECT ?to LR_LTYPE.
      exit.
    endloop.
    if LR_LTYPE is bound.
      LF_GLTYP = LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).
    else.
      clear LF_GLTYP.
    endif.

*** Ajdust Number of Outs by defined Limit
    if LR_MGRPV_LIMIT is bound and
       LF_GLTYP is not initial.
      read table LR_MGRPV_LIMIT->T_LDIM into LS_LDIM
                                        with key GLDIK = LR_MGRPV_LIMIT->F_GLDIK
                                                 GLTYP = LF_GLTYP.
      if SY-SUBRC eq 0.
        if ME->S_FIDIM_OUT-NOOUT gt LS_LDIM-LDMAX.
          move LS_LDIM-LDMAX to ME->S_FIDIM_OUT-NOOUT.
        elseif ME->S_FIDIM_OUT-NOOUT lt LS_LDIM-LDMIN.
          move 0 to ME->S_FIDIM_OUT-NOOUT.
        endif.
      else.
***     No Outs
        move 0 to ME->S_FIDIM_OUT-NOOUT.
      endif.
    else.
***   No Outs
      move 0 to ME->S_FIDIM_OUT-NOOUT.
    endif.

***--------------------------------------------------------------------------------------
*** The optimization should never return 0 so "Technical Checks" can be turned off
*** Limit checks are in place to ensure valid routes
    if ME->S_FIDIM_OUT-NOOUT eq 0.
      move 1 to ME->S_FIDIM_OUT-NOOUT.
    endif.

***--------------------------------------------------------------------------------------
*** Calculate Extrusion Width
    ME->S_MS_RECI-S_EXWID-EXWID     = ME->S_MS_RECI-S_FIWID-FIWID *  ME->S_FIDIM_OUT-NOOUT.
    ME->S_MS_RECI-S_EXWID-EXWID_UOM = ME->S_MS_RECI-S_FIWID-FIWID_UOM.

*** Add Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting
        IF_CALCV_1     = ME->S_MS_RECI-S_EXWID-EXWID
        IF_CALCV_UOM_1 = ME->S_MS_RECI-S_EXWID-EXWID_UOM
        IF_CALCV_2     = ME->S_TRWID-TRWID
        IF_CALCV_UOM_2 = ME->S_TRWID-TRWID_UOM
        IF_UOM         = ME->S_MS_RECI-S_EXWID-EXWID_UOM
        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
      importing
        EF_CALCV       = ME->S_MS_RECI-S_EXWID-EXWID
        EF_CALCV_UOM   = ME->S_MS_RECI-S_EXWID-EXWID_UOM ).

  endmethod.
  method SERIALIZE.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).

*** Serialize
    call transformation ID
         source SUPER_XML    = RF_XML

                T_FIDIM_IN   = ME->T_FIDIM_IN
                S_FIDIM_OUT  = ME->S_FIDIM_OUT
                S_WIDIM_OUT  = ME->S_WIDIM_OUT

                S_MS_RECI    = ME->S_MS_RECI
                F_FOPEX      = ME->F_FOPEX
                F_NOOMI      = ME->F_NOOMI
                F_NOOMA      = ME->F_NOOMA

                S_TRWID      = ME->S_TRWID

         result xml RF_XML.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_IN.

    refresh: CT_FIDIM.
    append lines of ME->T_FIDIM_IN to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_OUT.

    refresh: CT_FIDIM.
    append ME->S_FIDIM_OUT to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_CONV_WTL~CONV_LENGTH_TO_WEIGHT.

*** Calculate Weight
    if ME->S_MS_RECI-S_AVGCP-AVGCP is not initial and
       ME->S_MS_RECI-S_EXWID-EXWID is not initial.

***   Calculate Area
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = CS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = ME->S_MS_RECI-S_EXWID-EXWID
                                                          IF_CALCV_UOM_2 = ME->S_MS_RECI-S_EXWID-EXWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = ME->S_MS_RECI-S_AVGCP-AVGCP_UOM
                                                importing EF_CALCV       = CS_CALCV-CALCV
                                                          EF_CALCV_UOM   = CS_CALCV-CALCV_UOM ).

***   Consider Consumption Per
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = CS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = ME->S_MS_RECI-S_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = ME->S_MS_RECI-S_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = CS_CALCV-CALCV
                                                          EF_CALCV_UOM   = CS_CALCV-CALCV_UOM ).

      CS_CALCV-CALCV   =  CS_CALCV-CALCV * ME->S_MS_RECI-S_AVGCO-AVGCO.
    else.
      CS_CALCV-CALCV   = 0.
    endif.
    CS_CALCV-CALCV_UOM = ME->S_MS_RECI-S_AVGCO-AVGCO_UOM.


*** No division by Number Number of outs needed, as they are already considered by CONV_MQTYO_TO_MQTYI (ZCL_VCXI_FFSR_BL_PRTE)

  endmethod.
method ZIF_VCXI_FFSR_CONV_WTL~CONV_WEIGHT_TO_LENGTH.

  data: LS_CALCV type ZVCXI_XCS_S_CALCV.

***--------------------------------------------------------------------------------------
*** Calculate Area
  if ME->S_MS_RECI-S_AVGCO is not initial and
     ME->S_MS_RECI-S_AVGCP is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = CS_CALCV-CALCV
                                                        IF_CALCV_UOM_1 = CS_CALCV-CALCV_UOM
                                                        IF_CALCV_2     = ME->S_MS_RECI-S_AVGCO-AVGCO
                                                        IF_CALCV_UOM_2 = ME->S_MS_RECI-S_AVGCO-AVGCO_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LS_CALCV-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
*** Consider Average Consumption Per
    LS_CALCV-CALCV   =  LS_CALCV-CALCV * ME->S_MS_RECI-S_AVGCP-AVGCP.
  else.
    LS_CALCV-CALCV   = 0.
  endif.
  LS_CALCV-CALCV_UOM = ME->S_MS_RECI-S_AVGCP-AVGCP_UOM.

*** Calculate Length
  if ME->S_MS_RECI-S_EXWID-EXWID is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                        IF_CALCV_2     = ME->S_MS_RECI-S_EXWID-EXWID
                                                        IF_CALCV_UOM_2 = ME->S_MS_RECI-S_EXWID-EXWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = CS_CALCV-CALCV
                                                        EF_CALCV_UOM   = CS_CALCV-CALCV_UOM ).
  endif.

*** Consider Number of Outs
  CS_CALCV-CALCV = CS_CALCV-CALCV * ME->S_FIDIM_OUT-NOOUT.

endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_RDIM.

*** Inbound Roll Dimensions
    ET_RDIM_IN = ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN.

*** Outbound Roll Dimensions
    ET_RDIM_OUT = value #( for LS_RHNDL in ZIF_VCXI_FFSR_RHNDL~T_RHNDL ( S_RDITA = LS_RHNDL-S_RDITA ) ).

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_WIDIM.

    append ME->S_WIDIM_OUT to RT_WIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RDIM_IN.

*** Set Inbound Roll Dimensions as provided
    ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN = IT_RDIM_IN.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RHNDL.

    ME->SET_RHNDL( IT_RHNDL     = IT_RHNDL
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Update Target Roll Length
    if ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL is not initial.
      ME->S_FIDIM_OUT-S_RLETA = ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL[ 1 ]-S_RLETA.
    endif.

  endmethod.
