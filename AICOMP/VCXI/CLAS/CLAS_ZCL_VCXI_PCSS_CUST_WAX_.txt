
class ZCL_VCXI_PCSS_CUST_WAX definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data S_AVGCO type ZVCXI_XCS_S_AVGCO read-only .
  data S_AVGCP type ZVCXI_XCS_S_AVGCP read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_WAX
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PCSS_CUST_WAX
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_SETID_PCS_WAX type /VCXI/CKXC_SETID value 'ZVCXI_PCS_WAX'. "#EC NOTEXT
private section.
endclass. "ZCL_VCXI_PCSS_CUST_WAX definition
class ZCL_VCXI_PCSS_CUST_WAX implementation.
method CONSTRUCTOR.

  data:  LF_OBJNUM    type        OBJNUM.
  data:  LS_SETVA     type        /VCXI/CKXC_S_SETVA,
         LS_MAPVN     type        /VCXI/CKXC_S_MAPVN.
  data:  LT_SETVA     type        /VCXI/CKXC_TT_SETVA.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Get Wax Info
      move ME->F_MATNR to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_PCS_WAX
                                               IF_OBJNUM = LF_OBJNUM ).

      loop at LT_SETVA into LS_SETVA.
        clear: LS_MAPVN.

        case LS_SETVA-MAPID.
          when 'AVGCO'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_AVGCO-AVGCO.
            move LS_MAPVN-ATFLV_UOM to ME->S_AVGCO-AVGCO_UOM.

          when 'AVGCP'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_AVGCP-AVGCP.
            move LS_MAPVN-ATFLV_UOM to ME->S_AVGCP-AVGCP_UOM.

        endcase.
      endloop.

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
method GET_INSTANCE_WAX.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
