
class ZCL_VCXI_FFSS_BL_FISTRUCT definition
  public
  create protected .

public section.

  types:
    begin of YS_FSREF,
        TFSDA  type ZVCXI_FFSS_TFSDA,
        R_DATA type ref to DATA,
      end of YS_FSREF .

  constants C_TFSDA_FILM type ZVCXI_FFSS_TFSDA value 'FILM' ##NO_TEXT.
  constants C_TFSDA_GLUE type ZVCXI_FFSS_TFSDA value 'GLUE' ##NO_TEXT.
  constants C_TFSDA_PRINT type ZVCXI_FFSS_TFSDA value 'PRINT' ##NO_TEXT.

  methods GET_TFILM
    exporting
      !EF_TFILM type ZVCXI_F0S_TFILM
    raising
      /VCXI/CX_CKX .
  methods DELETE_ENTRY
    importing
      !IF_INDEX type I
    raising
      /VCXI/CX_CKX .
  methods SET_ENTRY
    importing
      !IF_INDEX type I
      !IS_FSREF type YS_FSREF
    raising
      /VCXI/CX_CKX .
  methods GET_FISTX
    exporting
      !EF_FISTX type ZVCXI_FFS_FISTX
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
    raising
      /VCXI/CX_CKX .
  methods ADD_ENTRY
    importing
      !IS_FISTRUCT type ANY
      !IF_TFSDA type ZVCXI_FFSS_TFSDA
      !IF_INDEX type I optional
    raising
      /VCXI/CX_CKX .
  methods GET_ENTRY
    importing
      !IF_INDEX type I
    exporting
      !EF_TFSDA type ZVCXI_FFSS_TFSDA
      !ER_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX optional
    returning
      value(RR_BL_FISTRUCT) type ref to ZCL_VCXI_FFSS_BL_FISTRUCT
    raising
      /VCXI/CX_CKX .
  methods MOVE_ENTRY
    importing
      !IF_INDEX1 type I
      !IF_INDEX2 type I
    raising
      /VCXI/CX_CKX .
  methods SWITCH_ENTRY
    importing
      !IF_INDEX1 type I
      !IF_INDEX2 type I
    raising
      /VCXI/CX_CKX .
  methods DEL_FILM_LAYER
    importing
      !IF_INDEX_FISTRUCT type I
      !IF_INDEX_LAYER type I
    raising
      /VCXI/CX_CKX .
  methods SWITCH_FILM_LAYER
    importing
      !IF_INDEX_FSTRC type I
      !IF_INDEX_LAYER1 type I
      !IF_INDEX_LAYER2 type I
    raising
      /VCXI/CX_CKX .
  methods MOVE_FILM_LAYER
    importing
      !IF_INDEX_FISTRUCT1 type I
      !IF_INDEX_FISTRUCT2 type I
      !IF_INDEX_LAYER1 type I
      !IF_INDEX_LAYER2 type I
    raising
      /VCXI/CX_CKX .
  methods TURN
    raising
      /VCXI/CX_CKX .
  methods ADD_BL_FISTRUCT
    importing
      !IR_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT
    raising
      /VCXI/CX_CKX .
  methods APPLY_TREAT
    importing
      !IF_TTREA type ZVCXI_FFS_TTREA
      !IF_TRESI type ZVCXI_FFS_TRESI
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    YT_FSREF type standard table of YS_FSREF .
  types:
    begin of YS_FSXML,
      TFSDA type  ZVCXI_FFSS_TFSDA,
      DDOBJ type  DDOBJNAME,
      XML   type  STRING,
    end of YS_FSXML .
  types:
    YT_FSXML type standard table of YS_FSXML .

  data T_FSREF type YT_FSREF .
  data F_FISTX type ZVCXI_FFS_FISTX .

  methods TURN_FILM
    changing
      !CS_FSFILM type ZVCXI_FFSS_S_FSFILM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_BL_FISTRUCT definition
class ZCL_VCXI_FFSS_BL_FISTRUCT implementation.
  method ADD_BL_FISTRUCT.

    data:          LS_FSREF    type        YS_FSREF.
    field-symbols: <S_FSFILM>  type        ZVCXI_FFSS_S_FSFILM,
                   <S_FSGLUE>  type        ZVCXI_FFSS_S_FSGLUE,
                   <S_FSPRINT> type        ZVCXI_FFSS_S_FSPRINT.

    check IR_BL_FISTRUCT is bound.

*** Process single entries
    loop at IR_BL_FISTRUCT->T_FSREF into LS_FSREF.
      case LS_FSREF-TFSDA.
***     Film
        when C_TFSDA_FILM.
          assign LS_FSREF-R_DATA->* to <S_FSFILM>.
          ME->ADD_ENTRY( IS_FISTRUCT = <S_FSFILM>
                         IF_TFSDA    = LS_FSREF-TFSDA ).

***     Glue
        when C_TFSDA_GLUE.
          assign LS_FSREF-R_DATA->* to <S_FSGLUE>.
          ME->ADD_ENTRY( IS_FISTRUCT = <S_FSGLUE>
                         IF_TFSDA    = LS_FSREF-TFSDA ).

***     Print
        when C_TFSDA_PRINT.
          assign LS_FSREF-R_DATA->* to <S_FSPRINT>.
          ME->ADD_ENTRY( IS_FISTRUCT = <S_FSPRINT>
                         IF_TFSDA    = LS_FSREF-TFSDA ).
      endcase.
    endloop.

  endmethod.
  method ADD_ENTRY.

    data:          LF_INDEX     type        I.
    data:          LR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR.
    data:          LR_DATA      type ref to DATA.
    field-symbols: <S_FSREF>    type        YS_FSREF,
                   <S_DATA>     type        ANY.

***--------------------------------------------------------------------------------------
*** Add Structure entry by index or append it at the end of the table
    if IF_INDEX is not initial.
      move IF_INDEX to LF_INDEX.
      insert initial line into ME->T_FSREF assigning <S_FSREF> index LF_INDEX.
    else.
      append initial line to ME->T_FSREF assigning <S_FSREF>.
    endif.

    LR_TYPEDESCR = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( IS_FISTRUCT ).
    create data LR_DATA type (LR_TYPEDESCR->ABSOLUTE_NAME+6).

    if SY-SUBRC eq 0.
      assign LR_DATA->* to <S_DATA>.
      move IF_TFSDA to <S_FSREF>-TFSDA.
      move-corresponding IS_FISTRUCT to <S_DATA>.
      get reference of <S_DATA> into <S_FSREF>-R_DATA.
    endif.

  endmethod.
  method APPLY_TREAT.

    data:          LF_INDEX       type        I.
    field-symbols: <S_FSTRC_REF>  type        YS_FSREF,
                   <S_FSTRC_FILM> type        ZVCXI_FFSS_S_FSFILM.

***--------------------------------------------------------------------------------------
*** Find First Film
    if IF_TRESI eq ZCL_VCXI_FFSS_PR_CSTEP_TREAT=>C_TRESI_SIDEA or
       IF_TRESI eq ZCL_VCXI_FFSS_PR_CSTEP_TREAT=>C_TRESI_SIDEAB.
      read table ME->T_FSREF assigning <S_FSTRC_REF> with key TFSDA = C_TFSDA_FILM.
      if SY-SUBRC is initial.
        assign <S_FSTRC_REF>-R_DATA->* to <S_FSTRC_FILM>.

***     Set Treatment
        move IF_TTREA to <S_FSTRC_FILM>-S_SIDEA-TTREA.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Last First Film
    if IF_TRESI eq ZCL_VCXI_FFSS_PR_CSTEP_TREAT=>C_TRESI_SIDEB or
       IF_TRESI eq ZCL_VCXI_FFSS_PR_CSTEP_TREAT=>C_TRESI_SIDEAB.

      loop at ME->T_FSREF assigning <S_FSTRC_REF> where TFSDA = C_TFSDA_FILM.
        move SY-TABIX to LF_INDEX.
      endloop.
      if LF_INDEX ne 0.
        read table ME->T_FSREF assigning <S_FSTRC_REF> index LF_INDEX.
        if SY-SUBRC is initial.
          assign <S_FSTRC_REF>-R_DATA->* to <S_FSTRC_FILM>.

***       Set Treatment
          move IF_TTREA to <S_FSTRC_FILM>-S_SIDEB-TTREA.
        endif.
      endif.
    endif.

  endmethod.
  method DEL_FILM_LAYER.

    data: LS_FSREF  type  YS_FSREF.
    field-symbols: <S_FSFILM>  type ZVCXI_FFSS_S_FSFILM.


***--------------------------------------------------------------------------------------
*** Find Entry by Index
    read table ME->T_FSREF into LS_FSREF index IF_INDEX_FISTRUCT.
    check SY-SUBRC eq 0.

*** Check Type
    check LS_FSREF-TFSDA eq C_TFSDA_FILM.

***--------------------------------------------------------------------------------------
*** Delete
    assign LS_FSREF-R_DATA->* to <S_FSFILM>.
    delete <S_FSFILM>-T_LAYER index IF_INDEX_LAYER.

  endmethod.
  method DELETE_ENTRY.

***--------------------------------------------------------------------------------------
*** Delete Structure Entry by Index
    check IF_INDEX is not initial.
    delete ME->T_FSREF index IF_INDEX.

  endmethod.
  method FACTORY.

*** Create BL Reference
enhancement-section FACTORY spots ZVCXI_FFSS_ES_BL_FISTRUCT .
    create object RR_BL_FISTRUCT.
end-enhancement-section.

*** Set Film Structure XML
    RR_BL_FISTRUCT->SET_FISTX( IF_FISTX = IF_FISTX ).

  endmethod.
  method GET_ENTRY.

    field-symbols: <S_FSREF> type  YS_FSREF.


    check IF_INDEX is not initial.

***--------------------------------------------------------------------------------------
*** Get Table Entry by Index
    read table ME->T_FSREF assigning <S_FSREF> index IF_INDEX.

    if SY-SUBRC eq 0.
      move <S_FSREF>-TFSDA  to EF_TFSDA.
      move <S_FSREF>-R_DATA to ER_DATA.
    else.
      clear: EF_TFSDA,
             ER_DATA.
    endif.

  endmethod.
  method GET_FISTX.

    data:          LR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR.
    data:          LT_FSXML     type        YT_FSXML.
    field-symbols: <S_FSREF>    type        YS_FSREF,
                   <S_FSXML>    type        YS_FSXML,
                   <S_DATA>     type        ANY.

***--------------------------------------------------------------------------------------
*** Read table with film structure
    loop at ME->T_FSREF assigning <S_FSREF>.
      assign <S_FSREF>-R_DATA->* to <S_DATA>.
      if SY-SUBRC = 0.

        append initial line to LT_FSXML assigning <S_FSXML>.

        call transformation ID
              source DATA = <S_DATA>
              result xml <S_FSXML>-XML.

        move <S_FSREF>-TFSDA to <S_FSXML>-TFSDA.

        LR_TYPEDESCR = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( <S_DATA> ).

        if LR_TYPEDESCR is bound.
          move LR_TYPEDESCR->ABSOLUTE_NAME+6 to <S_FSXML>-DDOBJ.
        endif.

      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Create XML file
    if LT_FSXML is not initial.
      call transformation ID
        source T_FSXML = LT_FSXML
        result xml EF_FISTX.
    endif.

  endmethod.
  method GET_TFILM.

    data:          LF_TFSDA    type          ZVCXI_FFSS_TFSDA,
                   LF_TLAYR    type          ZVCXI_FRS_TLAYR,
                   LF_TFILM    type          ZVCXI_F0S_TFILM.
    data:          LS_FSFILM   type          ZVCXI_FFSS_S_FSFILM,
                   LS_FSFLAYER type          ZVCXI_FFSS_S_FSFLAYER.
    data:          LT_TLAYR    type table of ZVCXI_FRS_TLAYR.
    data:          LR_DATA     type ref to   DATA.
    field-symbols: <S_DATA>    type          ANY.


    clear EF_TFILM.

    do.
***   Process all Entries
      ME->GET_ENTRY( exporting IF_INDEX = SY-INDEX
                     importing EF_TFSDA = LF_TFSDA
                               ER_DATA  = LR_DATA ).
      if LF_TFSDA is initial.
        exit.
      endif.

***   Only consider Films
      check LF_TFSDA eq C_TFSDA_FILM.

      assign LR_DATA->* to <S_DATA>.
      check <S_DATA> is assigned.
      move-corresponding <S_DATA> to LS_FSFILM.

***   Collect all Layer Types of Film Entry
      clear: LT_TLAYR.
      loop at LS_FSFILM-T_LAYER into LS_FSFLAYER.
        append LS_FSFLAYER-TLAYR to LT_TLAYR.
      endloop.

***   Remove adjacent Duplicates and combine as String
      delete adjacent duplicates from LT_TLAYR.
      clear LF_TFILM.
      loop at LT_TLAYR into LF_TLAYR.
        concatenate LF_TFILM LF_TLAYR into LF_TFILM separated by '-'.
      endloop.
      shift LF_TFILM left deleting leading '-'.

***   Add Film Type of Film Structure Entry to overall Film Type
      concatenate EF_TFILM LF_TFILM into EF_TFILM separated by '/'.
    enddo.
    shift EF_TFILM left deleting leading '/'.

  endmethod.
  method MOVE_ENTRY.

    data: LS_FSREF type YS_FSREF.


***--------------------------------------------------------------------------------------
*** Find Entry by Index 1
    read table ME->T_FSREF into LS_FSREF index IF_INDEX1.
    check SY-SUBRC eq 0.

*** Remove from Table
    delete ME->T_FSREF index IF_INDEX1.

*** Insert in Table
    insert LS_FSREF into ME->T_FSREF index IF_INDEX2.

  endmethod.
  method MOVE_FILM_LAYER.

    data: LF_INDEX    type I,
          LS_FSREF1   type YS_FSREF,
          LS_FSREF2   type YS_FSREF,
          LS_FSFLAYER type ZVCXI_FFSS_S_FSFLAYER.
    field-symbols: <S_FSFILM1> type ZVCXI_FFSS_S_FSFILM,
                   <S_FSFILM2> type ZVCXI_FFSS_S_FSFILM.


***--------------------------------------------------------------------------------------
*** Find Source Root Entry by Index
    read table ME->T_FSREF into LS_FSREF1 index IF_INDEX_FISTRUCT1.
    check SY-SUBRC eq 0.

*** Check Type
    check LS_FSREF1-TFSDA eq C_TFSDA_FILM.

***--------------------------------------------------------------------------------------
*** Find Destination Root Entry by Index
    read table ME->T_FSREF into LS_FSREF2 index IF_INDEX_FISTRUCT2.
    check SY-SUBRC eq 0.

*** Check Type
    check LS_FSREF2-TFSDA eq C_TFSDA_FILM.

    assign LS_FSREF1-R_DATA->* to <S_FSFILM1>.
    assign LS_FSREF2-R_DATA->* to <S_FSFILM2>.

*** Find Source Layer
    read table <S_FSFILM1>-T_LAYER into LS_FSFLAYER index IF_INDEX_LAYER1.
    check SY-SUBRC eq 0.

*** Remove Layer
    delete <S_FSFILM1>-T_LAYER index IF_INDEX_LAYER1.

    move IF_INDEX_LAYER2 to LF_INDEX.
    if LF_INDEX eq 0.
      LF_INDEX = LINES( <S_FSFILM2>-T_LAYER ) + 1.
    endif.

    insert LS_FSFLAYER into <S_FSFILM2>-T_LAYER index LF_INDEX.

  endmethod.
  method SET_ENTRY.

***--------------------------------------------------------------------------------------
*** Update Table by Index
    check IF_INDEX is not initial.
    modify ME->T_FSREF from IS_FSREF index IF_INDEX.

  endmethod.
  method SET_FISTX.

    data:          LT_FSXML  type        YT_FSXML.
    data:          LR_REF    type ref to DATA.
    field-symbols: <S_FSXML> type        YS_FSXML,
                   <S_DATA>  type        ANY.


    free: ME->T_FSREF.

    check IF_FISTX is not initial.
***--------------------------------------------------------------------------------------
*** Deserialize XML
    call transformation ID
     source xml IF_FISTX
     result T_FSXML = LT_FSXML.

    loop at LT_FSXML assigning <S_FSXML>.
      create data LR_REF type (<S_FSXML>-DDOBJ).
      if LR_REF is bound.

        assign LR_REF->* to <S_DATA>.

        if SY-SUBRC = 0.

          call transformation ID
           source xml <S_FSXML>-XML
           result DATA = <S_DATA>.

          if <S_DATA> is assigned.
            ME->ADD_ENTRY( exporting IS_FISTRUCT = <S_DATA>
                                     IF_TFSDA = <S_FSXML>-TFSDA ).
          endif.
          free LR_REF.
        endif.

      endif.
    endloop.

  endmethod.
  method SWITCH_ENTRY.

    data: LS_FSREF1 type  YS_FSREF,
          LS_FSREF2 type  YS_FSREF.


***--------------------------------------------------------------------------------------
*** Find Entry by Index 1
    read table ME->T_FSREF into LS_FSREF1 index IF_INDEX1.
    check SY-SUBRC eq 0.

*** Find Entry by Index 2
    read table ME->T_FSREF into LS_FSREF2 index IF_INDEX2.
    check SY-SUBRC eq 0.

*** Update Table
    modify ME->T_FSREF from LS_FSREF2 index IF_INDEX1.
    modify ME->T_FSREF from LS_FSREF1 index IF_INDEX2.

  endmethod.
  method SWITCH_FILM_LAYER.

    data: LS_FSREF     type  YS_FSREF,
          LS_FSFLAYER1 type ZVCXI_FFSS_S_FSFLAYER,
          LS_FSFLAYER2 type ZVCXI_FFSS_S_FSFLAYER.
    field-symbols: <S_FSFILM>  type ZVCXI_FFSS_S_FSFILM.


***--------------------------------------------------------------------------------------
*** Find Entry by Index
    read table ME->T_FSREF into LS_FSREF index IF_INDEX_FSTRC.
    check SY-SUBRC eq 0.

*** Check Type
    check LS_FSREF-TFSDA eq C_TFSDA_FILM.

***--------------------------------------------------------------------------------------
*** Switch
    assign LS_FSREF-R_DATA->* to <S_FSFILM>.

*** Find Entry by Index 1
    read table <S_FSFILM>-T_LAYER into LS_FSFLAYER1 index IF_INDEX_LAYER1.
    check SY-SUBRC eq 0.

*** Find Entry by Index 2
    read table <S_FSFILM>-T_LAYER into LS_FSFLAYER2 index IF_INDEX_LAYER2.
    check SY-SUBRC eq 0.

*** Update Table
    modify <S_FSFILM>-T_LAYER from LS_FSFLAYER2 index IF_INDEX_LAYER1.
    modify <S_FSFILM>-T_LAYER from LS_FSFLAYER1 index IF_INDEX_LAYER2.

  endmethod.
  method TURN.

    data: LS_FSREF    type        YS_FSREF.
    data: LT_FSREF    type        YT_FSREF.
    field-symbols: <S_FSFILM>  type    ZVCXI_FFSS_S_FSFILM.

***--------------------------------------------------------------------------------------
    loop at ME->T_FSREF into LS_FSREF.
      case LS_FSREF-TFSDA.
***     Film
        when C_TFSDA_FILM.
          assign LS_FSREF-R_DATA->* to <S_FSFILM>.

          ME->TURN_FILM( changing CS_FSFILM = <S_FSFILM> ).

      endcase.

***   Insert always as first entry to turn the table around
      insert LS_FSREF into LT_FSREF index 1.
    endloop.

***--------------------------------------------------------------------------------------
*** Set new Sequence
    move LT_FSREF to ME->T_FSREF.

  endmethod.
  method TURN_FILM.

    data: LS_FSFILM   type ZVCXI_FFSS_S_FSFILM,
          LS_FSFLAYER type ZVCXI_FFSS_S_FSFLAYER.


*** Switch Side A <> Side B
    move CS_FSFILM-S_SIDEA to LS_FSFILM-S_SIDEB.
    move CS_FSFILM-S_SIDEB to LS_FSFILM-S_SIDEA.

*** Switch Layer
    loop at CS_FSFILM-T_LAYER into LS_FSFLAYER.
      insert LS_FSFLAYER into LS_FSFILM-T_LAYER index 1.
    endloop.

*** Return
    move LS_FSFILM to CS_FSFILM.

  endmethod.
