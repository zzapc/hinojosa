
class ZCL_VCXI_XCS_SERVICE_UNIT definition
  public
  create private .

public section.

  class-methods IS_MATNR_UNIT
    importing
      !IF_MATNR type MATNR
      !IF_UOM type /VCXI/CKX_UOM
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods CONVERT_MATNR_UNIT
    importing
      !IF_UOM_OUT type UNIT optional
      !IF_UOM_IN type UNIT
      !IF_VALUE_IN type ANY
      !IF_MATNR type MATNR
    exporting
      !EF_VALUE_OUT type ANY
      !EF_UOM_OUT type UNIT
    raising
      /VCXI/CX_CKX .
  class-methods CONVERT_UNIT
    importing
      !IF_UOM_OUT type UNIT
      !IF_UOM_IN type UNIT
      !IF_VALUE_IN type ANY
    exporting
      !EF_VALUE_OUT type ANY
      !EF_UOM_OUT type UNIT
    raising
      /VCXI/CX_CKX .
  class-methods GET_DIMID
    importing
      !IF_UOM type UNIT
    returning
      value(RF_DIMID) type DIMID
    raising
      /VCXI/CX_CKX .
  class-methods CALC_UMREZ_UMREN
    importing
      !IS_CALCV_BASE type ZVCXI_XCS_S_CALCV
      !IS_CALCV_ALT type ZVCXI_XCS_S_CALCV
    exporting
      !EF_UMREZ type UMREZ
      !EF_UMREN type UMREN
    raising
      /VCXI/CX_CKX .
  class-methods ROUND_UNIT
    importing
      !IF_UOM type /VCXI/CKX_UOM
      !IF_OPROU type ZVCXI_XCS_OPROU default ZCL_VCXI_XCS_SERVICE_CALC=>C_OPROU_COMM
    changing
      !CF_VALUE type ANY
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_XCS_SERVICE_UNIT definition
class ZCL_VCXI_XCS_SERVICE_UNIT implementation.
  method CALC_UMREZ_UMREN.

    data: LF_Z_NEW type F,
          LF_N_NEW type F.


*** Early exit if values are the same
    if IS_CALCV_BASE-CALCV eq IS_CALCV_ALT-CALCV.
      move 1 to EF_UMREN.
      move 1 to EF_UMREZ.
      return.
    endif.

*** Get 5-digit values with the same relation
    call function 'CONVERT_TO_FRACT5'
      exporting
        NOMIN               = IS_CALCV_BASE-CALCV
        DENOMIN             = IS_CALCV_ALT-CALCV
      importing
        NOMOUT              = EF_UMREZ
        DENOMOUT            = EF_UMREN
      exceptions
        CONVERSION_OVERFLOW = 1
        others              = 2.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Find smallest possible 5-digit values
    call function 'GGT'
      exporting
        Z                         = conv F( EF_UMREZ )
        N                         = conv F( EF_UMREN )
      importing
        Z_NEU                     = LF_Z_NEW
        N_NEU                     = LF_N_NEW
      exceptions
        KEINE_NEGAT_WERTE_ERLAUBT = 1
        NULL_NICHT_ERLAUBT        = 2
        others                    = 3.
    if SY-SUBRC eq 0.
      move LF_Z_NEW to EF_UMREZ.
      move LF_N_NEW to EF_UMREN.
    endif.

  endmethod.
method CONVERT_MATNR_UNIT.

  data: LF_VALUE_IN  type F,
        LF_VALUE_OUT type F,
        LF_UOM_OUT   type UNIT.

***--------------------------------------------------------------------------------------
*** Convert to Base UOM
  move IF_VALUE_IN to LF_VALUE_IN.

  call function 'MATERIAL_UNIT_CONVERSION'
    exporting
      INPUT                = LF_VALUE_IN
      KZMEINH              = 'X'
      MATNR                = IF_MATNR
      MEINH                = IF_UOM_IN
    importing
      MEINS                = LF_UOM_OUT
      OUTPUT               = LF_VALUE_OUT
    exceptions
      CONVERSION_NOT_FOUND = 1
      INPUT_INVALID        = 2
      MATERIAL_NOT_FOUND   = 3
      MEINH_NOT_FOUND      = 4
      MEINS_MISSING        = 5
      NO_MEINH             = 6
      OUTPUT_INVALID       = 7
      OVERFLOW             = 8
      others               = 9.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***--------------------------------------------------------------------------------------
*** Convert to Alternate UOM
  if IF_UOM_OUT is supplied and
     IF_UOM_OUT ne LF_UOM_OUT.
    call function 'MATERIAL_UNIT_CONVERSION'
      exporting
        INPUT                = LF_VALUE_OUT
        KZMEINH              = ' '
        MATNR                = IF_MATNR
        MEINH                = IF_UOM_OUT
      importing
        OUTPUT               = LF_VALUE_OUT
      exceptions
        CONVERSION_NOT_FOUND = 1
        INPUT_INVALID        = 2
        MATERIAL_NOT_FOUND   = 3
        MEINH_NOT_FOUND      = 4
        MEINS_MISSING        = 5
        NO_MEINH             = 6
        OUTPUT_INVALID       = 7
        OVERFLOW             = 8
        others               = 9.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    LF_UOM_OUT = IF_UOM_OUT.
  endif.

*** Return result
  move LF_VALUE_OUT to EF_VALUE_OUT.
  move LF_UOM_OUT   to EF_UOM_OUT.

endmethod.
method CONVERT_UNIT.

  data: LF_VALUE_IN  type        FLOAT,
        LF_VALUE_OUT type        FLOAT.
  data: LR_CX        type ref to CX_SY_CONVERSION_OVERFLOW.

  try.

      move IF_VALUE_IN to LF_VALUE_IN.

***   Conversion is only needed if we have different one!
      if IF_UOM_OUT ne IF_UOM_IN.

***     Convert Value
        call function 'UNIT_CONVERSION_SIMPLE'
          exporting
            INPUT                = LF_VALUE_IN
            UNIT_IN              = IF_UOM_IN
            UNIT_OUT             = IF_UOM_OUT
          importing
            OUTPUT               = LF_VALUE_OUT
          exceptions
            CONVERSION_NOT_FOUND = 1
            DIVISION_BY_ZERO     = 2
            INPUT_INVALID        = 3
            OUTPUT_INVALID       = 4
            OVERFLOW             = 5
            TYPE_INVALID         = 6
            UNITS_MISSING        = 7
            UNIT_IN_NOT_FOUND    = 8
            UNIT_OUT_NOT_FOUND   = 9
            others               = 10.
        if SY-SUBRC <> 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

        move LF_VALUE_OUT to EF_VALUE_OUT.

      else.
        move IF_VALUE_IN to EF_VALUE_OUT.
      endif.

      if EF_UOM_OUT is requested.
        EF_UOM_OUT = IF_UOM_OUT.
      endif.

    catch CX_SY_CONVERSION_OVERFLOW into LR_CX.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX ).
  endtry.

endmethod.
method GET_DIMID.

*** Get Dimensions of Unit
  call function 'DIMENSION_GET_FOR_UNIT'
    exporting
      UNIT           = IF_UOM
    importing
      DIMENSION      = RF_DIMID
    exceptions
      UNIT_NOT_FOUND = 1
      others         = 2.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
  method IS_MATNR_UNIT.

    types: begin of YS_BUFFER,
             MATNR   type MATNR,
             UOM     type /VCXI/CKX_UOM,
             ALLOWED type ABAP_BOOL,
           end of YS_BUFFER.
    data: LT_RMMME type table of RMMME.
    statics: LT_BUFFER type sorted table of YS_BUFFER with unique key MATNR UOM.


    if LINE_EXISTS( LT_BUFFER[ MATNR = IF_MATNR UOM = IF_UOM ] ).
      RF_ALLOWED = LT_BUFFER[ MATNR = IF_MATNR UOM = IF_UOM ]-ALLOWED.
    else.
      call function 'MATERIAL_UNIT_FIND'
        exporting
          KZALL              = 'X'
          MATNR              = IF_MATNR
          MEINH              = IF_UOM
        importing
          KZEXI              = RF_ALLOWED
        tables
          RMMME_ITAB         = LT_RMMME
        exceptions
          MATERIAL_NOT_FOUND = 1.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Add to Buffer
      insert value #( MATNR = IF_MATNR
                      UOM = IF_UOM
                      ALLOWED = RF_ALLOWED ) into table LT_BUFFER.
    endif.

  endmethod.
method ROUND_UNIT.

  data: LF_ANDEC type ANDEC,
        LF_DECIP type ZVCXI_XCS_DECIP.
  data: LS_CALCV type ZVCXI_XCS_S_CALCV.


*** Get defined Decimal Places of Unit
  select single ANDEC
         into LF_ANDEC
         from T006
        where MSEHI eq IF_UOM.
  check SY-SUBRC eq 0.

  move CF_VALUE to LS_CALCV-CALCV.
  move IF_UOM   to LS_CALCV-CALCV_UOM.
  move LF_ANDEC to LF_DECIP.

  ZCL_VCXI_XCS_SERVICE_CALC=>ROUND( exporting IF_OPROU = IF_OPROU
                                              IF_DECIP = LF_DECIP
                                    changing  CS_CALCV = LS_CALCV ).

  move LS_CALCV-CALCV to CF_VALUE.

endmethod.
