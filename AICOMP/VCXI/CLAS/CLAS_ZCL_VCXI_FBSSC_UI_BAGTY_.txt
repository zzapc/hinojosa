
class ZCL_VCXI_FBSSC_UI_BAGTY definition
  public
  create public .

public section.

  data F_ACTIVE_TAB type STRING .
  data F_CURSOR type SCRFNAME .
  data R_BAGTY type ref to ZCL_VCXI_FBSSC_BAGTY .
  data S_BAGTY_VIS type ZVCXI_FBSSC_S_BAGTY_VIS .
  data S_DYNP type /VCXI/CKX_S_DYNP_KEY .

  methods CONSTRUCTOR
    importing
      !IF_CHANGE type ABAP_BOOL default ABAP_FALSE
      !IF_IBAGT type ZVCXI_FBS_IBAGT
    raising
      /VCXI/CX_CKX .
  methods DO_MODIFY_SCREEN
    importing
      !IF_REPID type SYREPID
      !IF_DYNNR type SYDYNNR
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_BAGTY_VIS
    importing
      !IS_BAGTY_VIS type ZVCXI_FBSSC_S_BAGTY_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods REOPEN_BAGTY
    importing
      !IF_CHANGE type ABAP_BOOL default 'X'
      !IF_IBAGT type ZVCXI_FBS_IBAGT
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .
  class-methods START_UI
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
      !IF_CHANGE type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UCOMM_BACK type SYUCOMM value 'BACK' ##NO_TEXT.
  constants C_UCOMM_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UCOMM_CHECK type SYUCOMM value 'CHECK' ##NO_TEXT.
  constants C_UCOMM_EXIT type SYUCOMM value 'EXIT' ##NO_TEXT.
  constants C_UCOMM_SAVE type SYUCOMM value 'SAVE' ##NO_TEXT.
  constants C_UCOMM_TOGGLE type SYUCOMM value 'TOGGLE' ##NO_TEXT.
  data R_UIF_BGDIM type ref to ZCL_VCXI_FBSSC_UIF_BGDIM .
  data R_UIF_BGHDC type ref to ZCL_VCXI_FBSSC_UIF_BGHDC .
  data R_UIF_BPART type ref to ZCL_VCXI_FBSSC_UIF_BPART .
  data R_UIF_CSTEP type ref to ZCL_VCXI_FBSSC_UIF_CSTEP .
  data R_UIF_HANDL type ref to ZCL_VCXI_FBSSC_UIF_HANDL .
  data R_UIF_RECLO type ref to ZCL_VCXI_FBSSC_UIF_RECLO .

  methods CHECK_FOR_CHANGES
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SAVE
    raising
      /VCXI/CX_CKX .
  methods INIT_BGDIM
    raising
      /VCXI/CX_CKX .
  methods INIT_BGHDC
    raising
      /VCXI/CX_CKX .
  methods INIT_BPART
    raising
      /VCXI/CX_CKX .
  methods INIT_CSTEP
    raising
      /VCXI/CX_CKX .
  methods INIT_HANDL
    raising
      /VCXI/CX_CKX .
  methods INIT_RECLO
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_PFSTATUS
    raising
      /VCXI/CX_CKX .
  methods SET_TITLE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSSC_UI_BAGTY definition
class ZCL_VCXI_FBSSC_UI_BAGTY implementation.
  method CHECK_FOR_CHANGES.

    data:  LF_ANSWER          type C.

*** If Changes are allowed
    if ME->R_BAGTY->F_CHANGED eq ABAP_TRUE.
      call function 'POPUP_TO_CONFIRM'
        exporting
          TEXT_QUESTION  = text-Q01
        importing
          ANSWER         = LF_ANSWER
        exceptions
          TEXT_NOT_FOUND = 1
          others         = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      case LF_ANSWER.
        when '1'.
***       Save and than go on
          ME->HANDLE_UC_SAVE( ).
          move ABAP_FALSE to RF_CANCELED.
        when '2'.
***       Do nothing but go on
          move ABAP_FALSE to RF_CANCELED.
        when 'A'.
***       Cancel
          move ABAP_TRUE to RF_CANCELED.
      endcase.
    endif.

  endmethod.
  method CONSTRUCTOR.

    data:  LF_GUID    type        /VCXI/CKX_GUID.
    data:  LR_CX_CKX  type ref to /VCXI/CX_CKX.

***--------------------------------------------------------------------------------------
*** Check Authorization
    ZCL_VCXI_FBSSC_BAGTY=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_FBSSC_BAGTY=>C_ACTVT_DISPLAY
                                      IF_ID    = IF_IBAGT ).

***--------------------------------------------------------------------------------------
*** Get Instance
    LF_GUID = ZCL_VCXI_FBSSC_BAGTY=>ENCRYPT_GUID( IF_IBAGT = IF_IBAGT ).

    ME->R_BAGTY ?= ZCL_VCXI_FBSSC_BAGTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    check ME->R_BAGTY is bound.

*** Change Mode -> Lock Instance
    if IF_CHANGE eq ABAP_TRUE.
      try.
          ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
        catch /VCXI/CX_CKX into LR_CX_CKX.
          LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
      endtry.
    endif.

*** Bind UI Customizing
    call function 'ZVCXI_FBSSC_UI_BAGTY_BIND'
      exporting
        IR_UI_BAGTY = ME
      importing
        ES_DYNP     = ME->S_DYNP.

    ME->INIT_BGDIM( ).
    ME->INIT_BPART( ).
    ME->INIT_BGHDC( ).
    ME->INIT_HANDL( ).
    ME->INIT_CSTEP( ).
    ME->INIT_RECLO( ).

  endmethod.
  method DO_FREE.

    ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_FREE ).
    free: ME->R_BAGTY.

***--------------------------------------------------------------------------------------
*** Free Dimension Element
    if ME->R_UIF_BGDIM is bound.
      ME->R_UIF_BGDIM->DO_FREE( ).
      free: ME->R_UIF_BGDIM.
    endif.

*** Free Bag Part
    if ME->R_UIF_BPART is bound.
      ME->R_UIF_BPART->DO_FREE( ).
      free: ME->R_UIF_BPART.
    endif.

*** Free Handling Dimension
    if ME->R_UIF_BGHDC is bound.
      ME->R_UIF_BGHDC->DO_FREE( ).
      free: ME->R_UIF_BGHDC.
    endif.

*** Free Handles
    if ME->R_UIF_HANDL is bound.
      ME->R_UIF_HANDL->DO_FREE( ).
      free: ME->R_UIF_HANDL.
    endif.

*** Free Conversion Step
    if ME->R_UIF_CSTEP is bound.
      ME->R_UIF_CSTEP->DO_FREE( ).
      free: ME->R_UIF_CSTEP.
    endif.

*** Free Reclosing
    if ME->R_UIF_RECLO is bound.
      ME->R_UIF_RECLO->DO_FREE( ).
      free: ME->R_UIF_RECLO.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_RECLO type ABAP_BOOL.

    LF_RECLO = ME->R_BAGTY->CHECK_CSTEP( ZCL_VCXI_FBSSC_BAGTY=>C_CSTEP_RECLO ).

***--------------------------------------------------------------------------------------
*** Modify Screen
    loop at screen.
      if ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
        move 0 to SCREEN-INPUT.
        move 0 to SCREEN-REQUIRED.
      endif.

***   Hide Dimension Element Tab when not bound
      if SCREEN-NAME eq 'ZVCXI_FBSSC_S_BAGTY_VIS-STRIPDESCR_BGDIM'.
        if ME->R_UIF_BGDIM is not bound.
          move 1 to SCREEN-INVISIBLE.
        endif.
        move 1 to SCREEN-INPUT.
      endif.

***   Hide Bag Part Tab when not bound
      if SCREEN-NAME eq 'ZVCXI_FBSSC_S_BAGTY_VIS-STRIPDESCR_BPART'.
        if ME->R_UIF_BPART is not bound.
          move 1 to SCREEN-INVISIBLE.
        endif.
        move 1 to SCREEN-INPUT.
      endif.

***   Hide Handling Dimension Tab when not bound
      if SCREEN-NAME eq 'ZVCXI_FBSSC_S_BAGTY_VIS-STRIPDESCR_BGHDC'.
        if ME->R_UIF_BGHDC is not bound.
          move 1 to SCREEN-INVISIBLE.
        endif.
        move 1 to SCREEN-INPUT.
      endif.

***   Hide Handles Tab when not bound
      if SCREEN-NAME eq 'ZVCXI_FBSSC_S_BAGTY_VIS-STRIPDESCR_HANDL'.
        if ME->R_UIF_HANDL is not bound.
          move 1 to SCREEN-INVISIBLE.
        endif.
        move 1 to SCREEN-INPUT.
      endif.

***   Hide Conversion Step Tab when not bound
      if SCREEN-NAME eq 'ZVCXI_FBSSC_S_BAGTY_VIS-STRIPDESCR_CSTEP'.
        if ME->R_UIF_CSTEP is not bound.
          move 1 to SCREEN-INVISIBLE.
        endif.
        move 1 to SCREEN-INPUT.
      endif.

***   Hide Reclosing Tab when: Conv. Step - Reclosing not found or Reclosing tab not bound
      if SCREEN-NAME eq 'ZVCXI_FBSSC_S_BAGTY_VIS-STRIPDESCR_RECLO'.
        if LF_RECLO ne ABAP_TRUE or ME->R_UIF_RECLO is not bound.
          move 1 to SCREEN-INVISIBLE.
        endif.
        move 1 to SCREEN-INPUT.
      endif.

      modify screen.
    endloop.

  endmethod.
  method DO_PBO.

    ME->SET_PFSTATUS( ).
    ME->SET_TITLE( ).

*** Check if Bag Type Object is bound
    check ME->R_BAGTY is bound.

    ME->INIT_VIS( ).
    ME->INIT_TAB_LIST( ).

***--------------------------------------------------------------------------------------
*** Active Tab
    if ( ME->R_UIF_BGDIM is not bound and ME->F_ACTIVE_TAB eq '0100STRIP_BGDIM' ) or
       ( ME->R_UIF_BPART is not bound and ME->F_ACTIVE_TAB eq '0100STRIP_BPART' ) or
       ( ME->R_UIF_BGHDC is not bound and ME->F_ACTIVE_TAB eq '0100STRIP_BGHDC' ) or
       ( ME->R_UIF_HANDL is not bound and ME->F_ACTIVE_TAB eq '0100STRIP_HANDL' ) or
       ( ME->R_UIF_CSTEP is not bound and ME->F_ACTIVE_TAB eq '0100STRIP_CSTEP' ) or
       ( ME->R_UIF_RECLO is not bound and ME->F_ACTIVE_TAB eq '0100STRIP_RECLO' ).
      clear ME->F_ACTIVE_TAB.
    endif.

    set cursor field ME->F_CURSOR.
    clear ME->F_CURSOR.

  endmethod.
  method DO_UPDATE_BAGTY_VIS.

*** Set Bag Type Data
    if ME->S_BAGTY_VIS-IBAGT_DESCR ne IS_BAGTY_VIS-IBAGT_DESCR.
      ME->R_BAGTY->SET_DESCR( IF_DESCR = IS_BAGTY_VIS-IBAGT_DESCR ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    data: LF_VCLNAME type        VCL_NAME.

    case IF_UCOMM.
      when C_UCOMM_BACK or C_UCOMM_CANCEL.
        if ME->CHECK_FOR_CHANGES( ) eq ABAP_FALSE.
          ME->DO_FREE( ).
          leave to screen 0.
        endif.

      when C_UCOMM_EXIT.
        if ME->CHECK_FOR_CHANGES( ) eq ABAP_FALSE.
          ME->DO_FREE( ).
          leave program.
        endif.

      when C_UCOMM_SAVE.
        ME->HANDLE_UC_SAVE( ).

      when C_UCOMM_TOGGLE.
        if ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
***       Check for changes and ask user to save them
          check ME->CHECK_FOR_CHANGES( ) ne ABAP_TRUE.
          ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
          ME->REOPEN_BAGTY( IF_IBAGT  = ME->S_BAGTY_VIS-IBAGT
                            IF_CHANGE = ABAP_FALSE ).
        else.
          ME->REOPEN_BAGTY( IF_IBAGT  = ME->S_BAGTY_VIS-IBAGT
                            IF_CHANGE = ABAP_TRUE ).
        endif.

      when C_UCOMM_CHECK.
        ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = IF_UCOMM ).

      when '0100STRIP_BGDIM' or
           '0100STRIP_BPART' or
           '0100STRIP_BGHDC' or
           '0100STRIP_HANDL' or
           '0100STRIP_CSTEP' or
           '0100STRIP_RECLO'.
        move IF_UCOMM to ME->F_ACTIVE_TAB.

      when others.

        if ME->R_UIF_BGDIM is bound.
          ME->R_UIF_BGDIM->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
        endif.

        if ME->R_UIF_BPART is bound.
          ME->R_UIF_BPART->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
        endif.

        if ME->R_UIF_BGHDC is bound.
          ME->R_UIF_BGHDC->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
        endif.

        if ME->R_UIF_HANDL is bound.
          ME->R_UIF_HANDL->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
        endif.

        if ME->R_UIF_CSTEP is bound.
          ME->R_UIF_CSTEP->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
        endif.

        if ME->R_UIF_RECLO is bound.
          ME->R_UIF_RECLO->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).
        endif.

        if IF_UCOMM cs ZCL_VCXI_FBSSC_UIC_BAGTY=>C_UCOMM_FBS or
           IF_UCOMM cs ZCL_VCXI_FBSSC_UIC_BAGTY=>C_UCOMM_F0S.
          concatenate ZCL_VCXI_FBSSC_UIC_BAGTY=>C_VIEW_PREFIX IF_UCOMM into LF_VCLNAME.

          ZCL_VCXI_FBSSC_UIC_BAGTY=>CALL_CUST( IF_VCLNAME = LF_VCLNAME ).

***       Refresh Grids
          ME->R_UIF_BGDIM->SET_GRID_REFRESH( ).
          ME->R_UIF_BPART->SET_GRID_REFRESH( ).
          ME->R_UIF_BGHDC->SET_GRID_REFRESH( ).
          ME->R_UIF_HANDL->SET_GRID_REFRESH( ).
          ME->R_UIF_CSTEP->SET_GRID_REFRESH( ).
          ME->R_UIF_RECLO->SET_GRID_REFRESH( ).

        endif.

    endcase.

  endmethod.
  method HANDLE_UC_SAVE.

    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

*** Do Save
    try.
        ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_CHECK ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
*        LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CKX ).
    endtry.
    ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_FBSSC_BAGTY=>C_FCODE_BAGTY_SAVE ).

  endmethod.
  method INIT_BGDIM.

    try.
        create object ME->R_UIF_BGDIM
          exporting
            IR_BAGTY = ME->R_BAGTY.

      catch CX_SY_MOVE_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method INIT_BGHDC.

    try.
        create object ME->R_UIF_BGHDC
          exporting
            IR_BAGTY = ME->R_BAGTY.

      catch CX_SY_MOVE_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method INIT_BPART.

    try.
        create object ME->R_UIF_BPART
          exporting
            IR_BAGTY = ME->R_BAGTY.

      catch CX_SY_MOVE_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method INIT_CSTEP.

    try.
        create object ME->R_UIF_CSTEP
          exporting
            IR_BAGTY = ME->R_BAGTY.

      catch CX_SY_MOVE_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method INIT_HANDL.

    try.
        create object ME->R_UIF_HANDL
          exporting
            IR_BAGTY = ME->R_BAGTY.

      catch CX_SY_MOVE_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method INIT_RECLO.

    try.
        create object ME->R_UIF_RECLO
          exporting
            IR_BAGTY = ME->R_BAGTY.

      catch CX_SY_MOVE_CAST_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endtry.

  endmethod.
  method INIT_TAB_LIST.

***--------------------------------------------------------------------------------------
*** Initialize TabStrip Description and Refresh
    if ME->R_UIF_BGDIM is bound.
      ME->S_BAGTY_VIS-STRIPDESCR_BGDIM = ME->R_UIF_BGDIM->GET_STRIPDESCR( ).
      move ABAP_TRUE to ME->R_UIF_BGDIM->F_REFRESH_REQUESTED.
    endif.

    if ME->R_UIF_BPART is bound.
      ME->S_BAGTY_VIS-STRIPDESCR_BPART = ME->R_UIF_BPART->GET_STRIPDESCR( ).
      move ABAP_TRUE to ME->R_UIF_BPART->F_REFRESH_REQUESTED.
      ME->R_UIF_BPART->SET_GRID_REFRESH( ).
    endif.

    if ME->R_UIF_BGHDC is bound.
      ME->S_BAGTY_VIS-STRIPDESCR_BGHDC = ME->R_UIF_BGHDC->GET_STRIPDESCR( ).
      move ABAP_TRUE to ME->R_UIF_BGHDC->F_REFRESH_REQUESTED.
    endif.

    if ME->R_UIF_HANDL is bound.
      ME->S_BAGTY_VIS-STRIPDESCR_HANDL = ME->R_UIF_HANDL->GET_STRIPDESCR( ).
      move ABAP_TRUE to ME->R_UIF_HANDL->F_REFRESH_REQUESTED.
    endif.

    if ME->R_UIF_CSTEP is bound.
      ME->S_BAGTY_VIS-STRIPDESCR_CSTEP = ME->R_UIF_CSTEP->GET_STRIPDESCR( ).
      move ABAP_TRUE to ME->R_UIF_CSTEP->F_REFRESH_REQUESTED.
    endif.

    if ME->R_UIF_RECLO is bound.
      ME->S_BAGTY_VIS-STRIPDESCR_RECLO = ME->R_UIF_RECLO->GET_STRIPDESCR( ).
      move ABAP_TRUE to ME->R_UIF_RECLO->F_REFRESH_REQUESTED.
      ME->R_UIF_RECLO->SET_GRID_REFRESH( ).
    endif.

  endmethod.
  method INIT_VIS.

    data: LS_DESCR   type /VCXI/CKX_S_DESCR.

***--------------------------------------------------------------------------------------
*** Get Header Information
    move ME->R_BAGTY->F_IBAGT to ME->S_BAGTY_VIS-IBAGT.

    read table ME->R_BAGTY->T_DESCR
      into LS_DESCR
      with key LANGU = SY-LANGU.

    if SY-SUBRC is initial.
      move LS_DESCR-DESCR to ME->S_BAGTY_VIS-IBAGT_DESCR.
    endif.

***--------------------------------------------------------------------------------------
*** Get Log Information
    ME->S_BAGTY_VIS-S_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = ME->R_BAGTY->/VCXI/IF_CKX_OBJECT~GET_LOG( ) ).

  endmethod.
  method REOPEN_BAGTY.

    data:  LF_GUID     type        /VCXI/CKX_GUID.
    data:  LR_CX_CKX   type ref to /VCXI/CX_CKX.

*** Do Free
    ME->DO_FREE( ).

*** Get Instance
    LF_GUID = ZCL_VCXI_FBSSC_BAGTY=>ENCRYPT_GUID( IF_IBAGT = IF_IBAGT ).
    ME->R_BAGTY ?= ZCL_VCXI_FBSSC_BAGTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    check ME->R_BAGTY is bound.

*** Change Mode -> Lock Instance
    if IF_CHANGE eq ABAP_TRUE.
      try.
          ME->R_BAGTY->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
        catch /VCXI/CX_CKX into LR_CX_CKX.
          LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'I' ).
      endtry.
    endif.

    ME->INIT_BGDIM( ).
    ME->INIT_BPART( ).
    ME->INIT_BGHDC( ).
    ME->INIT_HANDL( ).
    ME->INIT_CSTEP( ).
    ME->INIT_RECLO( ).

  endmethod.
  method SET_CURSOR.

    data:  LF_CURSOR type SCRFNAME.

    get cursor field LF_CURSOR.
    if LF_CURSOR is not initial.
      move LF_CURSOR to ME->F_CURSOR.
    endif.

  endmethod.
  method SET_PFSTATUS.

    data:  LT_EXCLUDE type standard table of SYUCOMM.

***--------------------------------------------------------------------------------------
*** Exclude SAVE and When no Detail screen or nor changes
    if ME->R_BAGTY            is not bound  or
     ( ME->R_BAGTY            is bound      and
       ME->R_BAGTY->F_CHANGED ne ABAP_TRUE ).
      append C_UCOMM_SAVE to LT_EXCLUDE.
    endif.

*** If no Object, don't allow toggle (not changeable)
    if ME->R_BAGTY     is not bound   or
       ME->R_BAGTY->F_CCCORACTIV eq 2.
      append C_UCOMM_TOGGLE to LT_EXCLUDE.
    endif.

***--------------------------------------------------------------------------------------
*** Set PF-Status
    set pf-status '0100' of program ME->S_DYNP-REPID excluding LT_EXCLUDE.

  endmethod.
  method SET_TITLE.

    data:  LR_OBJECT_LOCKING type ref to /VCXI/IF_CKX_OBJECT_LOCKING.

    move ME->R_BAGTY ?to LR_OBJECT_LOCKING.

    if LR_OBJECT_LOCKING->IS_LOCKED( ) eq ABAP_TRUE.
      set titlebar '0100_EDIT' of program ME->S_DYNP-REPID.
    else.
      set titlebar '0100_DISP' of program ME->S_DYNP-REPID.
    endif.

  endmethod.
  method START_UI.

    data:  LR_UI_BAGTY type ref to ZCL_VCXI_FBSSC_UI_BAGTY.

*** Create Instance of Bag Type Customizing
    create object LR_UI_BAGTY
      exporting
        IF_IBAGT  = IF_IBAGT
        IF_CHANGE = IF_CHANGE.

    call function 'ZVCXI_FBSSC_UI_BAGTY_START'.

  endmethod.
