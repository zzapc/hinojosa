
class ZCL_VCXI_XCUR_POPUP_MURDE definition
  public
  final
  create protected .

public section.

  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_MURGR_ADD type SYUCOMM value 'ADD' ##NO_TEXT.
  constants C_UC_MURGR_COPY type SYUCOMM value 'COPY' ##NO_TEXT.
  constants C_UC_MURGR_DELETE type SYUCOMM value 'DELETE' ##NO_TEXT.
  constants C_UC_START type SYUCOMM value 'START' ##NO_TEXT.
  data S_MURDE_VIS type ZVCXI_XCUR_S_MURDE_VIS .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_MURDE_VIS type ZVCXI_XCUR_S_MURDE_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_DYNP_SMDCNTRL
    returning
      value(RS_DYNP_KEY) type /VCXI/CKX_S_DYNP_KEY
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_MURDE type ref to ZCL_VCXI_XCUR_MURDE
      !IF_OSTAR type ZVCXI_XCUR_OSTAR default 'I'
    exporting
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    returning
      value(RR_RECORD) type ref to /VCXI/CL_CKMR_RECORD
    raising
      /VCXI/CX_CKX .
protected section.

  data F_DESCR type /VCXI/CKX_DESCR .
  data F_ID type /VCXI/CKX_ID .
  data F_OSTAR type ZVCXI_XCUR_OSTAR .
  data R_CONTAINER_MURGR type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_MURDE type ref to ZCL_VCXI_XCUR_MURDE .
  data R_RECORD type ref to /VCXI/CL_CKMR_RECORD .
  data R_SALV_MURGR type ref to CL_SALV_TABLE .
  data R_UI_SMDCNTRL type ref to ZCL_VCXI_XCUR_UI_SMDCNTRL .
  data T_MURGR_GRID type ZVCXI_XCUR_TT_MURGR_GRID .

  methods CONSTRUCTOR
    importing
      !IR_MURDE type ref to ZCL_VCXI_XCUR_MURDE
      !IF_OSTAR type ZVCXI_XCUR_OSTAR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADDED_FUNCTION
    for event ADDED_FUNCTION of CL_SALV_EVENTS
    importing
      !E_SALV_FUNCTION .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_COPY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_START
    raising
      /VCXI/CX_CKX .
  methods INIT_SALV_MURGR
    raising
      /VCXI/CX_CKX .
  methods INIT_SALV_MURGR_DATA
    raising
      /VCXI/CX_CKX .
  methods INIT_UI_SMDCNTRL
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_ICMDL
    importing
      !IT_CMODEL type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCUR_POPUP_MURDE definition
class ZCL_VCXI_XCUR_POPUP_MURDE implementation.
  method CONSTRUCTOR.

    ME->R_MURDE = IR_MURDE.
    ME->F_OSTAR = IF_OSTAR.

*** Initialize UI Instance for SmartMD Control Settings
    ME->INIT_UI_SMDCNTRL( ).

  endmethod.
  method DO_PBO.

*** Set PF-Status
    ME->SET_PF_STATUS( ).

*** Initialize Visualization
    ME->INIT_VIS( ).

*** Initialize/Refresh ALV Data
    ME->INIT_SALV_MURGR_DATA( ).

*** Initialize/Refresh ALV Grid
    ME->INIT_SALV_MURGR( ).

*** Initialize UI Instance for SmartMD Control Settings
    ME->INIT_UI_SMDCNTRL( ).

  endmethod.
  method DO_UPDATE_VIS.

***--------------------------------------------------------------------------------------
*** Update ID and Description
    ME->F_ID    = IS_MURDE_VIS-ID.
    ME->F_DESCR = IS_MURDE_VIS-DESCR.

***--------------------------------------------------------------------------------------
*** Set SmartMD Customizing Profile
    if IS_MURDE_VIS-ICMDL ne ME->S_MURDE_VIS-ICMDL.
      ME->R_MURDE->SET_CMODEL( IF_ICMDL = IS_MURDE_VIS-ICMDL ).
    endif.

*** Update Starting Option
    ME->F_OSTAR = IS_MURDE_VIS-OSTAR.

  endmethod.
  method DO_USER_COMMAND.

    case IF_UCOMM.
      when C_UC_START.
***     User Command Start
        ME->HANDLE_UC_START( ).
      when C_UC_CANCEL.
***     User Command Cancel
        ME->HANDLE_UC_CANCEL( ).
      when others.
***     Forward User Command to SmartMD Control Settings
        if ME->R_UI_SMDCNTRL is bound.
          ME->R_UI_SMDCNTRL->HANDLE_UCOMM( IF_UCOMM = IF_UCOMM ).
        endif.
    endcase.

  endmethod.
  method GET_DYNP_SMDCNTRL.

*** Get Subscreen via SmartMD Control Instance
    if ME->R_UI_SMDCNTRL is bound.
      RS_DYNP_KEY = ME->R_UI_SMDCNTRL->GET_DYNP( ).
    endif.

    if RS_DYNP_KEY is initial.
***   Fallback to Emtpy Subscreen
      RS_DYNP_KEY = value #( REPID = 'SAPLZVCXI_XCUR_POPUP_MURDE'
                             DYNNR = '9999' ).
    endif.

  endmethod.
method HANDLE_ADDED_FUNCTION.

  try.

      case E_SALV_FUNCTION.
        when C_UC_MURGR_ADD.
***       User Command Add
          ME->HANDLE_UC_ADD( ).

        when C_UC_MURGR_DELETE.
***       User Command Delete
          ME->HANDLE_UC_DELETE( ).

        when C_UC_MURGR_COPY.
***       User Command Copy
          ME->HANDLE_UC_COPY( ).

      endcase.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
  method HANDLE_DOUBLE_CLICK.

    data: LS_MURGR type ZVCXI_XCUR_S_MURGR.


    try.
***     Get select Update Group
        check LINE_EXISTS( ME->R_MURDE->T_MURGR[ ROW ] ).
        LS_MURGR = ME->R_MURDE->T_MURGR[ ROW ].

        case COLUMN.
          when 'NOOBJ'.
***         Call Popup for Objects
            ZCL_VCXI_XCUR_POPUP_MUROB=>START( changing CT_MUROB = LS_MURGR-T_MUROB ).
            ME->R_MURDE->UPDATE_MURGR( IS_MURGR = LS_MURGR ).

          when others.
***         Call Popup for Update Group
            ZCL_VCXI_XCUR_POPUP_MURGR=>START( IR_MURDE = ME->R_MURDE
                                              IS_MURGR = LS_MURGR ).

        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

*** Refresh ALV - Set New Ok Code to force PBO
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'REFRESH' ).

  endmethod.
  method HANDLE_UC_ADD.

*** Call Popup for Update Group
    ZCL_VCXI_XCUR_POPUP_MURGR=>START( IR_MURDE = ME->R_MURDE ).

*** Refresh ALV - Set New Ok Code to force PBO
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'REFRESH' ).

  endmethod.
  method HANDLE_UC_CANCEL.

*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_COPY.

    data: LF_INDEX type I.
    data: LS_MURGR type ZVCXI_XCUR_S_MURGR.
    data: LT_SALV_ROW type SALV_T_ROW.


*** Get Selected Rows
    LT_SALV_ROW = ME->R_SALV_MURGR->GET_SELECTIONS( )->GET_SELECTED_ROWS( ).

*** Copy Update Group for Selected Rows
    if LINES( LT_SALV_ROW ) eq 1.
***   Call Update Group Popup (only if 1 is selected)
      LS_MURGR = ME->R_MURDE->T_MURGR[ LT_SALV_ROW[ 1 ] ].
      clear LS_MURGR-CMURG.  "Force new Group
      ZCL_VCXI_XCUR_POPUP_MURGR=>START( IR_MURDE = ME->R_MURDE
                                        IS_MURGR = LS_MURGR ).
    else.
***   Background Copy
      loop at LT_SALV_ROW into LF_INDEX.
        ME->R_MURDE->COPY_MURGR( IF_CMURG = ME->R_MURDE->T_MURGR[ LF_INDEX ]-CMURG ).
      endloop.
    endif.

*** Refresh ALV - Set New Ok Code to force PBO
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'REFRESH' ).

  endmethod.
  method HANDLE_UC_DELETE.

    data: LF_INDEX    type I.
    data: LT_SALV_ROW type SALV_T_ROW.


*** Get Selected Rows
    LT_SALV_ROW = ME->R_SALV_MURGR->GET_SELECTIONS( )->GET_SELECTED_ROWS( ).

*** Delete Update Group for Selected Rows
    sort LT_SALV_ROW descending.

    loop at LT_SALV_ROW into LF_INDEX.
      ME->R_MURDE->DELETE_MURGR( IF_CMURG = ME->R_MURDE->T_MURGR[ LF_INDEX ]-CMURG ).
    endloop.

*** Refresh ALV - Set New Ok Code to force PBO
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'REFRESH' ).

  endmethod.
  method HANDLE_UC_START.

***--------------------------------------------------------------------------------------
*** Create SmartMD Record
    ME->R_RECORD = ME->R_MURDE->CREATE_RECORD( IF_ID    = ME->F_ID
                                               IF_DESCR = ME->F_DESCR ).
    check ME->R_RECORD is bound.

*** Start SmartMD Process based on Starting Option
    ZCL_VCXI_XCUR_MURDE=>START_PROCESS( IR_RECORD = ME->R_RECORD
                                        IF_OSTAR  = ME->S_MURDE_VIS-OSTAR ).

***--------------------------------------------------------------------------------------
*** Leave Popup
    leave to screen 0.

  endmethod.
  method INIT_SALV_MURGR.

***--------------------------------------------------------------------------------------
*** Initialize Container
    if ME->R_CONTAINER_MURGR is not bound.
      create object ME->R_CONTAINER_MURGR
        exporting
          CONTAINER_NAME              = '0100CC_MURGR'
          LIFETIME                    = CL_GUI_CUSTOM_CONTAINER=>LIFETIME_DYNPRO
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Initialize SALV
    try.

        if ME->R_SALV_MURGR is not bound.
          CL_SALV_TABLE=>FACTORY( exporting R_CONTAINER  = ME->R_CONTAINER_MURGR
                                  importing R_SALV_TABLE = ME->R_SALV_MURGR
                                  changing  T_TABLE      = ME->T_MURGR_GRID ).

          ME->R_SALV_MURGR->GET_COLUMNS( )->SET_OPTIMIZE( ABAP_TRUE ).

          ME->R_SALV_MURGR->GET_SELECTIONS( )->SET_SELECTION_MODE( IF_SALV_C_SELECTION_MODE=>ROW_COLUMN ).

          set handler ME->HANDLE_DOUBLE_CLICK   for ME->R_SALV_MURGR->GET_EVENT( ).
          set handler ME->HANDLE_ADDED_FUNCTION for ME->R_SALV_MURGR->GET_EVENT( ).

***       Add Function
          ME->R_SALV_MURGR->GET_FUNCTIONS( )->ADD_FUNCTION( NAME     = C_UC_MURGR_ADD
                                                            ICON     = |{ ICON_INSERT_ROW }|
                                                            TEXT     = conv #( 'Add'(F01) )
                                                            TOOLTIP  = conv #( 'Add Update Group'(T01) )
                                                            POSITION = IF_SALV_C_FUNCTION_POSITION=>RIGHT_OF_SALV_FUNCTIONS ).

          ME->R_SALV_MURGR->GET_FUNCTIONS( )->ADD_FUNCTION( NAME     = C_UC_MURGR_DELETE
                                                            ICON     = |{ ICON_DELETE_ROW }|
                                                            TEXT     = conv #( 'Delete'(F02) )
                                                            TOOLTIP  = conv #( 'Delete Update Group'(T02) )
                                                            POSITION = IF_SALV_C_FUNCTION_POSITION=>RIGHT_OF_SALV_FUNCTIONS ).

          ME->R_SALV_MURGR->GET_FUNCTIONS( )->ADD_FUNCTION( NAME     = C_UC_MURGR_COPY
                                                            ICON     = |{ ICON_COPY_OBJECT }|
                                                            TEXT     = conv #( 'Copy'(F03) )
                                                            TOOLTIP  = conv #( 'Copy Update Group'(T03) )
                                                            POSITION = IF_SALV_C_FUNCTION_POSITION=>RIGHT_OF_SALV_FUNCTIONS ).

***       Display Simple ALV
          ME->R_SALV_MURGR->DISPLAY( ).

        else.
***       Refresh Grid Content
          ME->R_SALV_MURGR->REFRESH( ).
        endif.

      catch CX_SALV_ERROR into data(LR_CX_SALV_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SALV_ERROR ).
    endtry.

  endmethod.
  method INIT_SALV_MURGR_DATA.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    field-symbols: <S_MURGR>      type ZVCXI_XCUR_S_MURGR,
                   <S_MURGR_GRID> type ZVCXI_XCUR_S_MURGR_GRID,
                   <S_MUREL>      type ZVCXI_XCUR_S_MUREL.


    refresh ME->T_MURGR_GRID.
    check ME->R_MURDE is bound.

*** Fill ALV Data
    loop at ME->R_MURDE->T_MURGR assigning <S_MURGR>.
      append initial line to ME->T_MURGR_GRID assigning <S_MURGR_GRID>.

***   Fill ALV Data - Counter for Update Group and System of Measurement
      move-corresponding <S_MURGR> to <S_MURGR_GRID>.

***   Fill ALV Data - Number of Objects
      <S_MURGR_GRID>-NOOBJ = LINES( <S_MURGR>-T_MUROB ).

***   Fill ALV Data - Update Elements
      loop at <S_MURGR>-T_MUREL assigning <S_MUREL>.
        if <S_MURGR_GRID>-DESCR is not initial.
          <S_MURGR_GRID>-DESCR = <S_MURGR_GRID>-DESCR && ','.
        endif.

        LF_DESCR = <S_MUREL>-R_MUCEL->/VCXI/IF_CKX_OBJECT~GET_DESCR( ).
        if LF_DESCR is initial.
          LF_DESCR = <S_MUREL>-R_MUCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        endif.

        <S_MURGR_GRID>-DESCR = |{ <S_MURGR_GRID>-DESCR } { LF_DESCR }|.
      endloop.
    endloop.

  endmethod.
  method INIT_UI_SMDCNTRL.

    data: LF_CLSNA type SEOCLSNAME.


*** No Changes
    if ME->R_UI_SMDCNTRL is bound and
       ME->R_UI_SMDCNTRL->R_SMDCNTRL eq ME->R_MURDE->R_SMDCNTRL.
      exit.
    endif.

*** Create New
    free ME->R_UI_SMDCNTRL.

*** Get Class Names for UI of SmartMD Control Settings
    ZCL_VCXI_XCUC_MUCEL=>GET_CLSNA_SMDCNTRL( exporting IR_CMODEL = ME->R_MURDE->GET_CMODEL( )
                                             importing EF_CLSNA_UI = LF_CLSNA ).
    check LF_CLSNA is not initial.

***--------------------------------------------------------------------------------------
*** Create Instance
    try.
        create object ME->R_UI_SMDCNTRL
               type (LF_CLSNA)
               exporting
                 IF_LOCKED   = ABAP_TRUE
                 IR_SMDCNTRL = ME->R_MURDE->R_SMDCNTRL.

***   Catch Creation Errors
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

  endmethod.
  method INIT_VIS.

    data: LT_CMODEL type /VCXI/CKX_TT_OBJECT.
    data: LR_CMODEL type ref to /VCXI/CL_CKMC_CMODEL.


    clear: ME->S_MURDE_VIS.


***--------------------------------------------------------------------------------------
*** ID and Description
    ME->S_MURDE_VIS-ID    = ME->F_ID.
    ME->S_MURDE_VIS-DESCR = ME->F_DESCR.

***--------------------------------------------------------------------------------------
*** Get SmartMD Model
    LR_CMODEL = ME->R_MURDE->GET_CMODEL( importing ET_CMODEL = LT_CMODEL ).

*** Selected SmartMD Model
    if LR_CMODEL is bound.
      ME->S_MURDE_VIS-ICMDL = LR_CMODEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
    endif.

*** Define DropDown Values for Customizing Model
    ME->SET_DDVAL_ICMDL( IT_CMODEL = LT_CMODEL ).

***--------------------------------------------------------------------------------------
*** Starting Option
    ME->S_MURDE_VIS-OSTAR = ME->F_OSTAR.


  endmethod.
  method SET_DDVAL_ICMDL.

    data: LF_ID     type VRM_ID.
    data: LT_CMODEL type /VCXI/CKX_TT_OBJECT,
          LT_VALUES type VRM_VALUES.
    data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


*** Get allowed SmartMD Models
    ME->R_MURDE->GET_CMODEL( importing ET_CMODEL = LT_CMODEL ).
    loop at LT_CMODEL into LR_OBJECT.
      append value #( KEY = LR_OBJECT->GET_ID( )
                      TEXT = LR_OBJECT->GET_DESCR( )
                    ) to LT_VALUES.
    endloop.

*** Set to DropDown List
    move 'ZVCXI_XCUR_S_MURDE_VIS-ICMDL' to LF_ID.

*** Initialize listbox content
    call function 'VRM_REFRESH_VALUES'.

    call function 'VRM_SET_VALUES'
      exporting
        ID     = LF_ID
        VALUES = LT_VALUES.

  endmethod.
  method SET_PF_STATUS.

*** Set GUI Status for screen 100
    set pf-status '0100' of program 'SAPLZVCXI_XCUR_POPUP_MURDE'.

  endmethod.
  method START.

    data: LF_MUROB type I.
    data: LR_POPUP_MURDE type ref to ZCL_VCXI_XCUR_POPUP_MURDE.


*** Create Instance
    create object LR_POPUP_MURDE
      exporting
        IR_MURDE = IR_MURDE
        IF_OSTAR = IF_OSTAR.

*** Call Popup
    call function 'ZVCXI_XCUR_POPUP_MURDE_START'
      exporting
        IR_POPUP_MURDE = LR_POPUP_MURDE.

*** Return record if created
    RR_RECORD = LR_POPUP_MURDE->R_RECORD.

    if RR_RECORD is bound.
      if ER_MSG is not bound.
        ER_MSG = new #( ).
      endif.

***   Count Objects
      loop at IR_MURDE->T_MURGR into data(LS_MURGR).
        LF_MUROB += lines( LS_MURGR-T_MUROB ).
      endloop.

***   Record &1 - &2 has been created with &3 objects (Processing Mode &4)
      ER_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCUR'
                           IF_MSGNO = '121'
                           IF_MSGTY = 'S'
                           IF_MSGV1 = RR_RECORD->R_CMODEL->/VCXI/IF_CKX_OBJECT~GET_DESCR( ) && ': ' && ' ' &&
                                      RR_RECORD->/VCXI/IF_CKX_OBJECT~GET_ID( )
                           IF_MSGV2 = RR_RECORD->/VCXI/IF_CKX_OBJECT~GET_DESCR( )
                           IF_MSGV3 = |{ LF_MUROB }|
                           IF_MSGV4 = IF_OSTAR ).
    endif.

  endmethod.
