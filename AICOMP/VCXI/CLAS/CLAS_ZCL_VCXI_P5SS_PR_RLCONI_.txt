
class ZCL_VCXI_P5SS_PR_RLCONI definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XCONI
  create public .

public section.

  interfaces ZIF_VCXI_P5SS_COMM_PREV .
  interfaces ZIF_VCXI_P5SS_COMM_NEXT .

  constants C_IPRVT_P5_FCCONI type /VCXI/VKSC_IPRVT value 'ZVCXI_P5SS_FCCONI' ##NO_TEXT.

  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods IS_XCONO_COMPATIBLE
    redefinition .
protected section.

  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WEBWI_CHANGED type /VCXI/VKSC_IEVNT value 'WEBWI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLBPX_CHANGED type /VCXI/VKSC_IEVNT value 'RLBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLFPX_CHANGED type /VCXI/VKSC_IEVNT value 'RLFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.
  constants C_PARID_WEBWI type /VCXI/VKS_PARID value 'ZVCXI_PX_WEBWI' ##NO_TEXT.
  constants C_PARID_RLBPX type /VCXI/VKS_PARID value 'ZVCXI_P5_RLBPX' ##NO_TEXT.
  constants C_PARID_RLFPX type /VCXI/VKS_PARID value 'ZVCXI_P5_RLFPX' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.

  methods SET_RLBPX
    importing
      !IF_RLBPX type ZVCXI_P5S_RLBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLFPX
    importing
      !IF_RLFPX type ZVCXI_P5S_RLFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WEBWI
    importing
      !IS_WEBWI type ZVCXI_PXS_S_WEBWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P5SS_PR_RLCONI definition
class ZCL_VCXI_P5SS_PR_RLCONI implementation.
  method IS_XCONO_COMPATIBLE.

    check SUPER->IS_XCONO_COMPATIBLE( IR_GATE_XCONO = IR_GATE_XCONO ).

    if IR_GATE_XCONO is bound and
       IR_GATE_XCONO->R_CLSPR is instance of ZIF_VCXI_P5SS_COMM_NEXT.
      RF_COMPATIBLE = ABAP_TRUE.
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_RLBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLBPX ).

    move IF_RLBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLBPX_CHANGED ).
    endif.

  endmethod.
  method SET_RLFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLFPX ).

    move IF_RLFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLFPX_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_WEBWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).

    LS_PARAM-ATFLV = IS_WEBWI-WEBWI.
    LS_PARAM-UNIT  = IS_WEBWI-WEBWI_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEBWI_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLBPX ).
    move LS_PARAM-STRNG to EF_RLBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property Instance
    if RR_BL_RLBPROP is requested.
      RR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( IF_RLBPX = EF_RLBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX.

*** Get Roll Forward Property (Inbound)
    RR_BL_RLFPROP = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get new Roll Forward Property XML
    if EF_RLFPX is requested.
      EF_RLFPX = RR_BL_RLFPROP->GET_RLFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    RS_SURWT = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).
    RS_WEBWI-WEBWI     = LS_PARAM-ATFLV.
    RS_WEBWI-WEBWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_RLBPX.

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property (Outbound)
    ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX( importing EF_RLBPX = EF_RLBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property Instance
    if RR_BL_RLBPROP is requested.
      RR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( IF_RLBPX = EF_RLBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLFPX ).
    move LS_PARAM-STRNG to EF_RLFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Roll Forward Property Instance
    if RR_BL_RLFPROP is requested.
      RR_BL_RLFPROP = ZCL_VCXI_P5SS_BL_RLFPROP=>FACTORY( IF_RLFPX = EF_RLFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI.

*** Get Web Width (Outbound)
    RS_WEBWI = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LS_WEBWI      type ZVCXI_PXS_S_WEBWI,
          LS_WEBWI_PREV type ZVCXI_PXS_S_WEBWI.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P5SS_COMM_PREV,
          LR_BL_RLBPROP type ref to ZCL_VCXI_P5SS_BL_RLBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Backward Property Instance
    LR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Sum of Web Width
      LS_WEBWI_PREV = LR_COMM_PREV->GET_WEBWI( ).
      if LS_WEBWI is initial.
        move LS_WEBWI_PREV to LS_WEBWI.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WEBWI_PREV-WEBWI
                                                            IF_CALCV_UOM_1 = LS_WEBWI_PREV-WEBWI_UOM
                                                            IF_CALCV_2     = LS_WEBWI-WEBWI
                                                            IF_CALCV_UOM_2 = LS_WEBWI-WEBWI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_WEBWI-WEBWI_UOM
                                                  importing EF_CALCV       = LS_WEBWI-WEBWI
                                                            EF_CALCV_UOM   = LS_WEBWI-WEBWI_UOM ).
      endif.

***   Get Sum of Number of Ups
      LF_NOUPS += LR_COMM_PREV->GET_NOUPS( ).

***   Combine Backward Property
      LR_BL_RLBPROP->MERGE( IR_BL_RLBPROP = LR_COMM_PREV->GET_RLBPX( ) ).
    endloop.

***------------------------------------------------------------------------------------------------
*** Backward Web Width
    ME->SET_WEBWI( IS_WEBWI = LS_WEBWI ).

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Backward Property XML
    ME->SET_RLBPX( IF_RLBPX = LR_BL_RLBPROP->GET_RLBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LS_SURWT      type ZVCXI_PXS_S_SURWT,
          LS_SURWT_NEXT type ZVCXI_PXS_S_SURWT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P5SS_COMM_NEXT,
          LR_BL_RLFPROP      type ref to ZCL_VCXI_P5SS_BL_RLFPROP,
          LR_BL_RLFPROP_NEXT type ref to ZCL_VCXI_P5SS_BL_RLFPROP.

*** Super
    SUPER->ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD( IT_GATE = IT_GATE ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***   Get Sum of Surface Weight
      LS_SURWT_NEXT = LR_COMM_NEXT->GET_SURWT( ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Combine Roll Forward Property
      LR_BL_RLFPROP_NEXT = LR_COMM_NEXT->GET_RLFPX( ).
      if LR_BL_RLFPROP is not bound.
        move LR_BL_RLFPROP_NEXT to LR_BL_RLFPROP.
      else.
        LR_BL_RLFPROP->MERGE( IR_BL_RLFPROP = LR_BL_RLFPROP_NEXT ).
      endif.

    endloop.

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Roll Forward Property XML
    if LR_BL_RLFPROP is bound.
      ME->SET_RLFPX( IF_RLFPX = LR_BL_RLFPROP->GET_RLFPX( ) ).
    else.
      ME->SET_RLFPX( IF_RLFPX = SPACE ).
    endif.

  endmethod.
