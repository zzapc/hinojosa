
class ZCL_VCXI_P2SR_BL_PRTE definition
  public
  inheriting from ZCL_VCXI_PXSR_BL_PRTE
  create public .

public section.

  class-methods IS_SKIPFEED_ACTIVE
    importing
      !IR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RR_ATYPE) type ref to /VCXI/CL_VSMC_ATYPE
    raising
      /VCXI/CX_CKX .

  methods GET_SPVRE_MFMI
    redefinition .
protected section.

  constants C_IMATY_QUANTIY type /VCXI/VSMC_IMATY value 'PC_MA_QUANTITY' ##NO_TEXT.

  methods GET_RTE_ATYPE
    redefinition .
private section.
endclass. "ZCL_VCXI_P2SR_BL_PRTE definition
class ZCL_VCXI_P2SR_BL_PRTE implementation.
  method GET_RTE_ATYPE.

    data:          LR_ATYPE       type ref to /VCXI/CL_VSMC_ATYPE.
    field-symbols: <S_RTE_ATYPE>  type        /VCXI/VSMR_S_RTE_ATYPE.

    RT_RTE_ATYPE = SUPER->GET_RTE_ATYPE( IR_RTE_CMACH = IR_RTE_CMACH
                                         IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Special handling for Skipfeed
    LR_ATYPE = ME->IS_SKIPFEED_ACTIVE( IR_RTE_CMACH = IR_RTE_CMACH
                                       IR_RTE_ARBPL = IR_RTE_ARBPL ).
    if LR_ATYPE is bound.
      append initial line to RT_RTE_ATYPE assigning <S_RTE_ATYPE>.
      move LR_ATYPE to <S_RTE_ATYPE>-R_ATYPE.
    endif.

  endmethod.
  method GET_SPVRE_MFMI.

    data: LS_MFMI_P type          ZVCXI_P0SR_S_MFMI_P,
          LS_LEOKY  type          /VCXI/VKSR_S_LEOKY,
          LS_PARAM  type          /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE      type ref to   /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMI type ref to   /VCXI/CL_VKSR_SPVRE.
    field-symbols: <T_MFMI> type standard table,
                   <S_MFMI> type          ANY.

    check ME->R_MFMI is bound.
    assign ME->R_MFMI->* to <T_MFMI>.

    loop at <T_MFMI> assigning <S_MFMI>.
      move-corresponding <S_MFMI> to LS_MFMI_P.

***--------------------------------------------------------------------------------------
***   Get Customizing Element
      LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMI_P'
                                          IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFMI
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFMI to CT_SPVRE.
      move   ABAP_TRUE     to CF_MFI.

***   Set In Use
      LR_SPVRE_MFMI->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Leading Object
      move LS_MFMI_P-MATNR                                   to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_LEOKY-SETBY.
      LR_SPVRE_MFMI->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***   Set Component Scrap
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_KAUSF              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-KAUSF                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-KAUSF_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Setup Percentage for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFISP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-MFISP                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-MFISP_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICF              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-MFICF                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Consumption Factor Per for Material Flow In
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_MFICP              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-MFICP                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Purchase Flag
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PURCH              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PURCH                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Costing Relevant
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_SANKA              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-SANKA                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Text
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_TEXT               to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-TEXT                                    to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Vendor Number
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_LIFNR              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-LIFNR                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Price
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICE              to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PRICE                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PRICE_CURR                              to LS_PARAM-CURKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Price Unit
      clear LS_PARAM.
      move ZCL_VCXI_XCSP_PR_MFMI=>C_PARID_PRICP_P            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PRICP                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PRICP_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Base Weight
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_BAWGT            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-BAWGT                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-BAWGT_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Base Weight Per
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_BAWGP_A          to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-BAWGP                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-BAWGP_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Fill MFMI PC

***   Set PC Type
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCTYP            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCTYP                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Length
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCLEN            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCLEN                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PCLEN_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Width
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCWID            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCWID                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PCWID_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Height
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCHEI            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCHEI                                   to LS_PARAM-ATFLV.
      move LS_MFMI_P-PCHEI_UOM                               to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Ups
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCUPS            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCUPS                                   to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set PC Direction
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_MFMI_P=>C_PARID_PCDIR            to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR                 to LS_PARAM-PARTY.
      move LS_MFMI_P-PCDIR                                   to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC                  to LS_PARAM-SETBY.
      LR_SPVRE_MFMI->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Add Price Scale Manager
      IR_BL_RTESPV->ADD_PSCALE_MGR( exporting IR_SPVRE_PARENT = LR_SPVRE_MFMI
                                              IT_PSCALE       = LS_MFMI_P-T_PSCALE
                                    changing  CT_SPVRE        = CT_SPVRE ).
    endloop.

  endmethod.
  method IS_SKIPFEED_ACTIVE.

    data: LF_GLDIK type        /VCXI/VSMC_GLDIK,
          LF_GLTYP type        /VCXI/VSMC_GLTYP.
    data: LS_RTE_LDIM type        /VCXI/VSMR_S_RTE_LDIM,
          LS_LDIM     type        /VCXI/VSMC_S_LDIM.
    data: LT_ATYPE type        /VCXI/CKX_TT_OBJECT,
          LT_LTYPE type        /VCXI/CKX_TT_OBJECT.
    data: LR_ATYPE     type ref to /VCXI/CL_VSMC_ATYPE,
          LR_LTYPE     type ref to /VCXI/CL_VSMC_LTYPE,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.


    LT_ATYPE = IR_RTE_CMACH->R_MGRPV_LIMIT->/VCXI/IF_VSMC_USER_ATYPE~GET_ATYPE( ).
    loop at LT_ATYPE into LR_OBJECT.
      try.
          move LR_OBJECT ?to LR_ATYPE.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      check LR_ATYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq 'P0_AT_SKIPFEED'.

***   Get Guid for Limit Dimension Key
      move IR_RTE_CMACH->R_MGRPV_LIMIT->GET_GLDIK_BY_ATYPE( IR_ATYPE = LR_ATYPE ) to LF_GLDIK.

      LT_LTYPE = LR_ATYPE->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
      loop at LT_LTYPE into LR_OBJECT.
        move LR_OBJECT ?to LR_LTYPE.

        move LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GLTYP.

        loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
          loop at LR_RTE_PSTEP->T_RTE_LDIM into LS_RTE_LDIM
                                          where R_LTYPE eq LR_LTYPE.
            read table IR_RTE_CMACH->R_MGRPV_LIMIT->T_LDIM into LS_LDIM
                                                           with key GLDIK = LF_GLDIK
                                                                    GLTYP = LF_GLTYP.
            if SY-SUBRC eq 0.
              if LS_RTE_LDIM-LDVAL between LS_LDIM-LDMIN and LS_LDIM-LDMAX.
                move LR_ATYPE to RR_ATYPE.
                exit.
              else.
                clear RR_ATYPE.
              endif.
            endif.
          endloop.
        endloop.
      endloop.

    endloop.

  endmethod.
