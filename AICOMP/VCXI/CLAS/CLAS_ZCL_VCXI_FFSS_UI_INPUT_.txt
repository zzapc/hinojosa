
class ZCL_VCXI_FFSS_UI_INPUT definition
  public
  inheriting from ZCL_VCXI_F0S_UI_TAB
  create public .

public section.

  types:
    YT_TC330T type standard table of ZVCXI_FFS_TC330T .

  data S_INPUT_VIS type ZVCXI_FFSS_S_INPUT_VIS read-only .
  class-data T_TC330T type YT_TC330T read-only .

  class-methods CLASS_CONSTRUCTOR .
  methods DO_UPDATE_INPUT_VIS
    importing
      !IS_INPUT_VIS type ZVCXI_FFSS_S_INPUT_VIS
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_F0S_TABPT default '0100S_IN_TAB-TAB'
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_TOOLBAR type ref to ZCL_VCXI_F0S_TOOLBAR_PRVDR .
  data R_PR_INPUT type ref to ZCL_VCXI_FFSS_PR_INPUT .
  constants C_UC_FSTRC type SYUCOMM value 'INPUT_FSTRC' ##NO_TEXT.
  constants C_UC_FPROP type SYUCOMM value 'INPUT_FPROP' ##NO_TEXT.

  methods HANDLE_UC_FPROP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FSTRC
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_DDVAL_TPROC
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_UI_INPUT definition
class ZCL_VCXI_FFSS_UI_INPUT implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FFSS_UI_INPUT_BIND'
      exporting
        IR_UI_INPUT   = ME
      importing
        ES_DYNP       = ME->S_DYNP
        EF_ACTIVE_TAB = ME->F_ACTIVE_TAB.


*** Create Toolbar for Provider
    create object ME->R_TOOLBAR
      exporting
        IR_GATE           = ME->R_GATE
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_TOOLBAR'.

  endmethod.
  method CLASS_CONSTRUCTOR.

    select * from ZVCXI_FFS_TC330T
      into table T_TC330T
      where LANGU eq SY-LANGU.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE
                        IF_TABPT  = IF_TABPT ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_INPUT.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      ME->R_TOOLBAR->DO_FREE( ).
      clear ME->R_TOOLBAR.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

        loop at screen.

***       Check if Process Type is allowed
          if SCREEN-GROUP1 eq 'TPR'.
            if ME->R_PR_INPUT->IS_TPROC_ALLOWED( ) ne ABAP_TRUE.
              move 1 to SCREEN-INVISIBLE.
              move 0 to SCREEN-ACTIVE.
            else.
              move 1 to SCREEN-ACTIVE.
              move 1 to SCREEN-INPUT.
            endif.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    data: LT_PRVDR_SELECTED type /VCXI/VKSR_TT_GATE.

    SUPER->DO_PBO( ).

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

***--------------------------------------------------------------------------------------
*** Initialize Toolbar and provide active tab as Selected Provider (for inserting/deletion)
    append ME->R_OLD_GATE to LT_PRVDR_SELECTED.
    ME->R_TOOLBAR->REFRESH_TOOLBAR( IT_PRVDR_SELECTED = LT_PRVDR_SELECTED ).

***--------------------------------------------------------------------------------------
*** Define DropDown Values for Process Type
    ME->SET_DDVAL_TPROC( ).

  endmethod.
  method DO_UPDATE_INPUT_VIS.

    check ME->R_PR_INPUT is bound.

***--------------------------------------------------------------------------------------
*** Set Process Type
    if ME->S_INPUT_VIS-TPROC ne IS_INPUT_VIS-TPROC.
      ME->R_PR_INPUT->SET_TPROC( IF_TPROC = IS_INPUT_VIS-TPROC
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    data:  LF_UCOMM type SYUCOMM.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_FSTRC.
        ME->HANDLE_UC_FSTRC( ).

      when C_UC_FPROP.
        ME->HANDLE_UC_FPROP( ).

    endcase.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_INPUT.

  endmethod.
  method HANDLE_UC_FPROP.

    data: LR_BL_FIBPROP    type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIFPROP    type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

*** Get Film Property
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP ).
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).

*** Start Popup
    ZCL_VCXI_FFSS_POPUP_FIPROP=>START( IR_BL_FIBPROP = LR_BL_FIBPROP
                                       IR_BL_FIFPROP = LR_BL_FIFPROP
                                       IS_FIWID      = ME->S_INPUT_VIS-S_FIWID
                                       IS_FITIN      = ME->S_INPUT_VIS-S_FITIN  ).

  endmethod.
  method HANDLE_UC_FSTRC.

    data: LR_BL_FISTRUCT    type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

*** Get Film Structure
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

*** Start Popup
    check LR_BL_FISTRUCT is bound.
    ZCL_VCXI_FFSS_POPUP_FISTRUCT=>START( IR_BL_FISTRUCT = LR_BL_FISTRUCT ).

  endmethod.
  method INIT_VIS.

    free: ME->S_INPUT_VIS.
    check ME->R_PR_INPUT is bound.

***--------------------------------------------------------------------------------------
*** Film Width (Outbound)
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = ME->S_INPUT_VIS-S_FIWID ).

*** Trim Requirement on Width (Outbound)
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_TREQW( importing ES_TREQW = ME->S_INPUT_VIS-S_TREQW ).

*** Number of Ups (Outbound)
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = ME->S_INPUT_VIS-NOUPS ).

*** Internal Film Thickness (Outbound)
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ME->S_INPUT_VIS-S_FITIN ).

*** Film Thickness External (Outbound)
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ME->S_INPUT_VIS-S_FITEX ).

*** Surface Weight (Outbound)
    ME->R_PR_INPUT->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ME->S_INPUT_VIS-S_SURWT ).
    move ME->S_INPUT_VIS-S_SURWT-SURWT_UOM to ME->S_INPUT_VIS-SURWT_UOMC6.

*** Process Type
    ME->R_PR_INPUT->GET_TPROC( importing EF_TPROC = ME->S_INPUT_VIS-TPROC ).

  endmethod.
  method SET_DDVAL_TPROC.

    data: LF_ID     type       VRM_ID.
    data: LS_TC330T type       ZVCXI_FFS_TC330T.
    data: LT_VALUE  type       VRM_VALUES.
    field-symbols: <S_VALUE>  type        VRM_VALUE.

*** Add to search help structure
    loop at T_TC330T into LS_TC330T.
      insert initial line into table LT_VALUE assigning <S_VALUE>.

      move: LS_TC330T-TPROC to <S_VALUE>-KEY,
            LS_TC330T-DESCR to <S_VALUE>-TEXT.
    endloop.

***--------------------------------------------------------------------------------------
*** Set to DropDown List
    move 'ZVCXI_FFSS_S_INPUT_VIS-TPROC' to LF_ID.

*** Initialize listbox content
    call function 'VRM_REFRESH_VALUES'.

    call function 'VRM_SET_VALUES'
      exporting
        ID     = LF_ID
        VALUES = LT_VALUE.

  endmethod.
