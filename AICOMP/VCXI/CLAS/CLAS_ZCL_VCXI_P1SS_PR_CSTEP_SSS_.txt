
class ZCL_VCXI_P1SS_PR_CSTEP_SSS definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_SCORES_AP .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_PXSS_SSS .

  constants C_PARID_NOUTT type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTT' ##NO_TEXT.

  methods GET_CADLS
    returning
      value(RF_CADLS) type ZVCXI_PXS_CADLS
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_NOUTL type ZVCXI_PXS_NOUTL
      !EF_NOUTW type ZVCXI_PXS_NOUTW
    returning
      value(RF_NOUTT) type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
  methods SET_DIMEN
    importing
      !IF_DIMEN type ZVCXI_PXS_DIMEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTT
    importing
      !IF_NOUTT type ZVCXI_PXS_NOUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRBOT
    importing
      !IS_TRBOT type ZVCXI_PXS_S_TRBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRLEF
    importing
      !IS_TRLEF type ZVCXI_PXS_S_TRLEF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRRIG
    importing
      !IS_TRRIG type ZVCXI_PXS_S_TRRIG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRSLI
    importing
      !IS_TRSLI type ZVCXI_PXS_S_TRSLI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRSLO
    importing
      !IS_TRSLO type ZVCXI_PXS_S_TRSLO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRTOP
    importing
      !IS_TRTOP type ZVCXI_PXS_S_TRTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX
    redefinition .
  methods ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_ADJUST_ISCAP type /VCXI/VKSC_IEVNT value 'ADJUST_ISCAP' ##NO_TEXT.
  constants C_IEVNT_I_INIT_CADIF_MLTUP type /VCXI/VKSC_IEVNT value 'INIT_CADIF_MLTUP' ##NO_TEXT.
  constants C_IEVNT_O_ISCAP_CHANGED type /VCXI/VKSC_IEVNT value 'ISCAP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUTT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUTT_CHANGED' ##NO_TEXT.
  constants C_PARID_ISCAP type /VCXI/VKS_PARID value 'ZVCXI_PX_ISCAP' ##NO_TEXT.

  methods CHECK_ACTIVITIES
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIMEN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUTT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRSLI
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRSLO
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_DIMEN_DESCR
    importing
      !IF_DIMEN type ZVCXI_PXS_DIMEN
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_ISCAP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ISCAP type ZVCXI_PXS_ISCAP
      !EF_FAALL type ZVCXI_PXSS_FAALL
    returning
      value(RT_ISCOR) type ZVCXI_PXS_TT_ISCOR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CADIF_MLTUP
    exporting
      !EF_ID type /VCXI/CKX_ID
      !ER_GATE_CADIF_MLTUP type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CADIF_MLTUP) type ref to ZCL_VCXI_PXSS_PR_CADIF_MLTUP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_ISCAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CADIF_MLTUP
    raising
      /VCXI/CX_CKX .
  methods SET_ISCAP
    importing
      !IF_ISCAP type ZVCXI_PXS_ISCAP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IT_ISCOR type ZVCXI_PXS_TT_ISCOR optional
      !IF_FAALL type ZVCXI_PXSS_FAALL optional
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CSTEP_SSS definition
class ZCL_VCXI_P1SS_PR_CSTEP_SSS implementation.
  method CHECK_ACTIVITIES.

*** Check Activities
    if ME->ZIF_VCXI_PXSS_SSS~IS_SLOT_ACTIVE( )  eq ABAP_TRUE or
       ME->ZIF_VCXI_PXSS_SSS~IS_SLIT_ACTIVE( )  eq ABAP_TRUE or
       ME->ZIF_VCXI_PXSS_SSS~IS_SCORE_ACTIVE( ) eq ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Activities applied.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '307' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     No Activities applied.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '308' ).
      endif.
    endif.

  endmethod.
  method CHECK_DIMEN.

*** Check Dimension
    if ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Dimension is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '301' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Dimension is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '302' ).
      endif.
    endif.

  endmethod.
  method CHECK_NOUTT.

*** Check Number of Outs
    if ME->GET_NOUTT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Outs is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '309' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Number of Outs is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '310' ).
      endif.
    endif.

  endmethod.
  method CHECK_TRSLI.

    data: LS_TRSLI     type ZVCXI_PXS_S_TRSLI,
          LS_TRSLI_SUM type ZVCXI_PXS_S_TRSLI,
          LS_TRLEF     type ZVCXI_PXS_S_TRLEF,
          LS_TRRIG     type ZVCXI_PXS_S_TRRIG.

***----------------------------------------------------------------------------
*** Get defined Trims
    LS_TRSLI = ME->ZIF_VCXI_PXSS_SSS~GET_TRSLI( ).
    LS_TRLEF = ME->ZIF_VCXI_PXSS_SSS~GET_TRLEF( ).
    LS_TRRIG = ME->ZIF_VCXI_PXSS_SSS~GET_TRRIG( ).

*** Sum Trim and use Unit of defined Total Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TRLEF-TRLEF
                                                        IF_CALCV_UOM_1 = LS_TRLEF-TRLEF_UOM
                                                        IF_CALCV_2     = LS_TRRIG-TRRIG
                                                        IF_CALCV_UOM_2 = LS_TRRIG-TRRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRSLI-TRSLI_UOM
                                              importing EF_CALCV       = LS_TRSLI_SUM-TRSLI
                                                        EF_CALCV_UOM   = LS_TRSLI_SUM-TRSLI_UOM ).

***----------------------------------------------------------------------------
*** Check Trim Sum
    if LS_TRSLI-TRSLI eq LS_TRSLI_SUM-TRSLI.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Trim on Slitting correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '305' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Trim on Slitting not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '306' ).
      endif.
    endif.

  endmethod.
  method CHECK_TRSLO.

    data: LS_TRSLO     type ZVCXI_PXS_S_TRSLO,
          LS_TRSLO_SUM type ZVCXI_PXS_S_TRSLO,
          LS_TRTOP     type ZVCXI_PXS_S_TRTOP,
          LS_TRBOT     type ZVCXI_PXS_S_TRBOT.


***----------------------------------------------------------------------------
*** Get defined Trims
    LS_TRSLO = ME->ZIF_VCXI_PXSS_SSS~GET_TRSLO( ).
    LS_TRTOP = ME->ZIF_VCXI_PXSS_SSS~GET_TRTOP( ).
    LS_TRBOT = ME->ZIF_VCXI_PXSS_SSS~GET_TRBOT( ).

*** Sum Trim and use Unit of defined Total Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TRTOP-TRTOP
                                                        IF_CALCV_UOM_1 = LS_TRTOP-TRTOP_UOM
                                                        IF_CALCV_2     = LS_TRBOT-TRBOT
                                                        IF_CALCV_UOM_2 = LS_TRBOT-TRBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRSLO-TRSLO_UOM
                                              importing EF_CALCV       = LS_TRSLO_SUM-TRSLO
                                                        EF_CALCV_UOM   = LS_TRSLO_SUM-TRSLO_UOM ).


***----------------------------------------------------------------------------
*** Check Trim Sum
    if LS_TRSLO-TRSLO eq LS_TRSLO_SUM-TRSLO.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Trim on Slotting correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '303' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Trim on Slotting not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '304' ).
      endif.
    endif.

  endmethod.
  method GET_CADLS.

    data(LR_PR_CADIF_MLTUP) = ME->GET_PRVDR_CADIF_MLTUP( ).
    check LR_PR_CADIF_MLTUP is bound.
    RF_CADLS = LR_PR_CADIF_MLTUP->GET_CADLS( ).

  endmethod.
  method GET_DIMEN_DESCR.

    data:      LT_D07V    type standard table of DD07V.

*** Identify Description
    call function 'DD_DOMVALUES_GET'
      exporting
        DOMNAME   = 'ZVCXI_PXS_DIMEN'
        TEXT      = 'X'
        LANGU     = SY-LANGU
      tables
        DD07V_TAB = LT_D07V.
    RF_DESCR = value #( LT_D07V[ DOMVALUE_L = IF_DIMEN ]-DDTEXT optional ).

  endmethod.
  method GET_ISCAP.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).
    move LS_PARAM-STRNG to EF_ISCAP.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_ISCAP is not initial.

***----------------------------------------------------------------------------
*** Apply All
    EF_FAALL = switch #( EF_ISCAP when '*'   then ABAP_TRUE
                                  when SPACE then ABAP_FALSE
                                             else ABAP_UNDEFINED ).

*** Separate Score IDs
    if RT_ISCOR is requested.
      split EF_ISCAP at ',' into table RT_ISCOR.
    endif.

  endmethod.
  method GET_NOUTT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).
    move LS_PARAM-ATFLV to RF_NOUTT.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_NOUTL is requested or
       EF_NOUTW is requested.
***   Get Division
      case ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( ).
        when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH.
          EF_NOUTL = ME->GET_NOUTT( ).
          EF_NOUTW = 1.
        when ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH.
          EF_NOUTL = 1.
          EF_NOUTW = ME->GET_NOUTT( ).
      endcase.
    endif.

  endmethod.
  method GET_PRVDR_CADIF_MLTUP.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


*** Check if Provider exists
    data(LT_PRVDR_DEF) = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_MLTUP=>C_IPRVT_PX_CADIF_MLTUP ).
    EF_ID = value #( LT_PRVDR_DEF[ 1 ]-ID optional ).
    check EF_ID is not initial.

***--------------------------------------------------------------------------------------
*** Get CAD Integration provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_CADIF_MLTUP=>C_IPRVT_PX_CADIF_MLTUP
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get CAD Integration Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_CADIF_MLTUP.
          check RR_PR_CADIF_MLTUP is bound.
          move LR_GATE to ER_GATE_CADIF_MLTUP.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_CADIF_MLTUP, ER_GATE_CADIF_MLTUP.
      endtry.
    endloop.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Dimension
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DIMEN( ) ).

*** Check Number of Outs
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOUTT( ) ).

*** Check Trim Slitting
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TRSLI( ) ).

*** Check Trim Slotting
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TRSLO( ) ).


***--------------------------------------------------------------------------------------
*** Check Activities
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_ACTIVITIES( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Dimension
    ME->CHECK_DIMEN( IR_MESSAGE = IR_MESSAGE ).

*** Check Number of Outs
    ME->CHECK_NOUTT( IR_MESSAGE = IR_MESSAGE ).

*** Check Trim Slitting
    ME->CHECK_TRSLI( IR_MESSAGE = IR_MESSAGE ).

*** Check Trim Slotting
    ME->CHECK_TRSLO( IR_MESSAGE = IR_MESSAGE ).

*** Check Activities
    ME->CHECK_ACTIVITIES( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_ADJUST_ISCAP.

    data: LF_FAALL    type ZVCXI_PXSS_FAALL.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_ISCOR    type ZVCXI_PXS_TT_ISCOR.

*** Process other Events first, to ensure Scores have been backwarded correctly
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

*** Don't adjust if all Scores are applied
    ME->GET_ISCAP( importing EF_FAALL = LF_FAALL ).
    check LF_FAALL ne ABAP_TRUE.

*** Get currently applied Scores (scores that are no longer available wouldn't be in the list)
    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP ).
    LT_ISCOR = value #( for S_SCORE_AP in LT_SCORE_AP where ( FAPPL = ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).

*** Update list of applied scores
    ME->SET_ISCAP( IT_ISCOR = LT_ISCOR  ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_ADJUST_ISCAP.
        ME->HANDLE_ADJUST_ISCAP( ).

      when C_IEVNT_I_INIT_CADIF_MLTUP.
        ME->HANDLE_INIT_CADIF_MLTUP( ).
    endcase.

  endmethod.
  method HANDLE_INIT_CADIF_MLTUP.

    data: LF_ID type /VCXI/CKX_ID.
    data: LR_GATE_CADIF_MLTUP type ref to /VCXI/CL_VKSR_GATE.


*** Get Provider MultiUp CAD Integration
    ME->GET_PRVDR_CADIF_MLTUP( importing EF_ID               = LF_ID
                                         ER_GATE_CADIF_MLTUP = LR_GATE_CADIF_MLTUP ).
    check LF_ID is not initial.

*** Check OneUp GUID in Backward Property (Inbound/Outbound)
    if ME->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( )->F_GCADO is initial and
       ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->F_GCADO is not initial.
***   Create MultiUp if needed
      if LR_GATE_CADIF_MLTUP is not bound.
        ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
      endif.
    else.
***   Remove MultiUp
      if LR_GATE_CADIF_MLTUP is bound.
        LR_GATE_CADIF_MLTUP->DO_FREE( ).
      endif.
    endif.

  endmethod.
  method SET_DIMEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_DIMEN ).

    move IF_DIMEN           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_SSS~C_IEVNT_O_DIMEN_CHANGED ).
    endif.

  endmethod.
  method SET_ISCAP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).

    if IT_ISCOR is supplied.
      concatenate lines of IT_ISCOR into LS_PARAM-STRNG separated by ','.
    endif.
    if IF_ISCAP is supplied.
      LS_PARAM-STRNG = IF_ISCAP.
    endif.
    if IF_FAALL is supplied and
       IF_FAALL ne ABAP_UNDEFINED.
      LS_PARAM-STRNG = switch #( IF_FAALL when ABAP_TRUE then '*' ).
    endif.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ISCAP_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).

    move IF_NOUTT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUTT_CHANGED ).
    endif.

  endmethod.
  method SET_TRBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRBOT ).

    move IS_TRBOT-TRBOT     to LS_PARAM-ATFLV.
    move IS_TRBOT-TRBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_SSS~C_IEVNT_O_TRBOT_CHANGED ).
    endif.

  endmethod.
  method SET_TRLEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRLEF ).

    move IS_TRLEF-TRLEF     to LS_PARAM-ATFLV.
    move IS_TRLEF-TRLEF_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_SSS~C_IEVNT_O_TRLEF_CHANGED ).
    endif.

  endmethod.
  method SET_TRRIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRRIG ).

    move IS_TRRIG-TRRIG     to LS_PARAM-ATFLV.
    move IS_TRRIG-TRRIG_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_SSS~C_IEVNT_O_TRRIG_CHANGED ).
    endif.

  endmethod.
  method SET_TRSLI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRSLI ).

    move IS_TRSLI-TRSLI     to LS_PARAM-ATFLV.
    move IS_TRSLI-TRSLI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_SSS~C_IEVNT_O_TRSLI_CHANGED ).
    endif.

  endmethod.
  method SET_TRSLO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRSLO ).

    move IS_TRSLO-TRSLO     to LS_PARAM-ATFLV.
    move IS_TRSLO-TRSLO_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_SSS~C_IEVNT_O_TRSLO_CHANGED ).
    endif.

  endmethod.
  method SET_TRTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRTOP ).

    move IS_TRTOP-TRTOP     to LS_PARAM-ATFLV.
    move IS_TRTOP-TRTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_SSS~C_IEVNT_O_TRTOP_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


*** Super
    RR_BL_CRFPROP = SUPER->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRFPX( importing EF_SETBY = EF_SETBY ).
    check RR_BL_CRFPROP is bound.

***--------------------------------------------------------------------------------------
*** Set Slot Activity
    if ME->ZIF_VCXI_PXSS_SSS~IS_SLOT_ACTIVE( ).
      RR_BL_CRFPROP->SET_FASLO( ABAP_TRUE ).
    endif.

*** Use Sheet Dimension as Handling Dimension
    ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).
    RR_BL_CRFPROP->SET_HNDDIM( IS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                                                    HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                                                    HNDWI     = LS_SHTWI-SHTWI
                                                    HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                                                    HNDHE     = RR_BL_CRFPROP->S_CALIP-CALIP
                                                    HNDHE_UOM = RR_BL_CRFPROP->S_CALIP-CALIP_UOM ) ).

*** Consider Outs in Forward Properties
    RR_BL_CRFPROP->APPLY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Get new Corrugator Forward Property XML
    if EF_CRFPX is requested.
      EF_CRFPX = RR_BL_CRFPROP->GET_CRFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX.

    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.


*** Call SUPER
    RR_BL_CRBPROP = SUPER->ZIF_VCXI_P1SS_COMM_PREV~GET_CRBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Update Scores/Tapes
    try.
        ZCL_VCXI_PXSS_BL_SCORE=>GET_COM_BY_AP( exporting IR_SCORES_AP = ME
                                               importing ET_SCORE_COM = LT_SCORE_COM
                                                         ET_TAPE_COM  = LT_TAPE_COM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
        clear: LT_SCORE_COM, LT_TAPE_COM.
    endtry.
    RR_BL_CRBPROP->SET_SCORE( IT_SCORE = LT_SCORE_COM ).
    RR_BL_CRBPROP->SET_TAPE_COM( IT_TAPE_COM = LT_TAPE_COM ).

*** Consider Outs in Cut Out Area
    RR_BL_CRBPROP->SET_COUAR( IS_COUAR = value #( COUAR     = RR_BL_CRBPROP->S_COUAR-COUAR * ME->GET_NOUTT( )
                                                  COUAR_UOM = RR_BL_CRBPROP->S_COUAR-COUAR_UOM ) ).

    if ME->ZIF_VCXI_PXSS_SSS~IS_SCORE_ACTIVE( ).
***   Set Sheet FEFCO for further backwarding
      RR_BL_CRBPROP->SET_FEFCO_SHEET( ).
    endif.

*** Apply Number of Outs to Cost Split
    RR_BL_CRBPROP->ADJ_CSPLIT_BY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Return XML
    if EF_CRBPX is requested.
      move RR_BL_CRBPROP->GET_CRBPX( ) to EF_CRBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS.

*** Call SUPER
    RF_NOUPS = SUPER->ZIF_VCXI_P1SS_COMM_PREV~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number Outs (total)
    RF_NOUPS = RF_NOUPS * ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_CSTEP_SSS> type ZVCXI_P1SS_S_FDI_CSTEP_SSS.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P1SS_S_FDI_CSTEP_SSS.
    assign RR_DATA->* to <S_FDI_CSTEP_SSS>.


***--------------------------------------------------------------------------------------
*** Dimension
    <S_FDI_CSTEP_SSS>-DIMEN = ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( ).

*** Number of Outs
    <S_FDI_CSTEP_SSS>-NOUTT = ME->GET_NOUTT( ).

*** Score Application
    ME->GET_ISCAP( importing EF_FAALL = <S_FDI_CSTEP_SSS>-SCORE_FAALL ).

*** Ignore all values for Mapping
    append 'DIMEN'       to ET_FDMEX.
    append 'NOUTT'       to ET_FDMEX.
    append 'SCORE_FAALL' to ET_FDMEX.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_CSTEP_SSS_OLD type ZVCXI_P1SS_S_FDI_CSTEP_SSS,
          LS_FDI_CSTEP_SSS_NEW type ZVCXI_P1SS_S_FDI_CSTEP_SSS.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_CSTEP_SSS_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_CSTEP_SSS_NEW = corresponding #( <S_DATA> ).
    endif.

*** General Check for Changes
    check LS_FDI_CSTEP_SSS_OLD ne LS_FDI_CSTEP_SSS_NEW.

***--------------------------------------------------------------------------------------
*** Set Dimension
    if LS_FDI_CSTEP_SSS_OLD-DIMEN ne LS_FDI_CSTEP_SSS_NEW-DIMEN and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'DIMEN' ] ).
      ME->SET_DIMEN( IF_DIMEN = LS_FDI_CSTEP_SSS_NEW-DIMEN
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Number of Outs
    if LS_FDI_CSTEP_SSS_OLD-NOUTT ne LS_FDI_CSTEP_SSS_NEW-NOUTT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'NOUTT' ] ).
      ME->SET_NOUTT( IF_NOUTT = LS_FDI_CSTEP_SSS_NEW-NOUTT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Score Application
    if LS_FDI_CSTEP_SSS_OLD-SCORE_FAALL ne LS_FDI_CSTEP_SSS_NEW-SCORE_FAALL and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'SCORE_FAALL' ] ).
      ME->SET_ISCAP( IF_FAALL = LS_FDI_CSTEP_SSS_NEW-SCORE_FAALL
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP.

    data: LF_NOUTL type ZVCXI_PXS_NOUTL,
          LF_NOUTW type ZVCXI_PXS_NOUTW.


***--------------------------------------------------------------------------------------
*** Get Number of Outs
    ME->GET_NOUTT( importing EF_NOUTL = LF_NOUTL
                             EF_NOUTW = LF_NOUTW ).

*** Get applied Scores table based on Score Communication (Outbound)
    ZCL_VCXI_PXSS_BL_SCORE=>GET_AP_BY_COM( exporting IT_SCORE_COM      = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_SCORE
                                                     IT_TAPE_COM       = ME->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->T_TAPE_COM
                                                     IF_NOUPL          = LF_NOUTL
                                                     IF_NOUPW          = LF_NOUTW
                                                     IF_DIMEN_TRIM     = ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( )
                                                     IS_TRLEF          = ME->ZIF_VCXI_PXSS_SSS~GET_TRLEF( )
                                                     IS_TRRIG          = ME->ZIF_VCXI_PXSS_SSS~GET_TRRIG( )
                                                     IS_TRTOP          = ME->ZIF_VCXI_PXSS_SSS~GET_TRTOP( )
                                                     IS_TRBOT          = ME->ZIF_VCXI_PXSS_SSS~GET_TRBOT( )
                                                     IF_DIMEN_SCORE    = ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( )
                                                     IT_ISCOR          = ME->GET_ISCAP( )
                                           importing ET_SCORE_AP       = ET_SCORE_AP
                                                     ET_TAPE_AP        = ET_TAPE_AP
                                                     ET_ISCOR_DISABLED = ET_ISCOR_DISABLED ).

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCSTR.

    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP.


    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP
                                                        ET_TAPE_AP  = LT_TAPE_AP ).

*** Score String Length
    if EF_SSTRL is requested.
      EF_SSTRL = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).
    endif.

*** Score String Cross
    if EF_SSTRC is requested.
      EF_SSTRC = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SSCOR.

    RF_SSCOR = 'A'.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~SET_SCORE_AP.

    data: LT_ISCOR  type ZVCXI_PXS_TT_ISCOR.


*** Set IDs to Parameter
    if IT_SCORE_AP is supplied.
      LT_ISCOR = value #( for S_SCORE_AP in IT_SCORE_AP where ( FAPPL eq ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).
      ME->SET_ISCAP( IT_ISCOR = LT_ISCOR ).
    endif.

*** Apply all Scores
    if IF_SCORE_FAALL is supplied.
      ME->SET_ISCAP( IF_FAALL = IF_SCORE_FAALL ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_DIMEN.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_DIMEN ).
    move LS_PARAM-ATWRT to RF_DIMEN.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_DIMEN is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ME->GET_DIMEN_DESCR( IF_DIMEN = RF_DIMEN ).
    endif.

    if EF_CSCOR is requested.
***   Get related Score Category
      EF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = RF_DIMEN ).
    endif.

    if EF_SHTDI is requested.
***   Sheet Direction
      EF_SHTDI = switch #( RF_DIMEN when ZIF_VCXI_PXSS_SSS=>C_DIMEN_LENGTH then 'B'
                                    when ZIF_VCXI_PXSS_SSS=>C_DIMEN_WIDTH  then 'A' ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_GCADM.

    data: LR_PR_CADIF_MLTUP type ref to ZCL_VCXI_PXSS_PR_CADIF_MLTUP.

    LR_PR_CADIF_MLTUP = ME->GET_PRVDR_CADIF_MLTUP( ).
    check LR_PR_CADIF_MLTUP is bound.
    RF_GCADM = LR_PR_CADIF_MLTUP->GET_GCADM( ).

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_TRBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRBOT ).
    move LS_PARAM-ATFLV to RS_TRBOT-TRBOT.
    move LS_PARAM-UNIT  to RS_TRBOT-TRBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_TRLEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRLEF ).
    move LS_PARAM-ATFLV to RS_TRLEF-TRLEF.
    move LS_PARAM-UNIT  to RS_TRLEF-TRLEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_TRRIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRRIG ).
    move LS_PARAM-ATFLV to RS_TRRIG-TRRIG.
    move LS_PARAM-UNIT  to RS_TRRIG-TRRIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_TRSLI.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRSLI ).
    move LS_PARAM-ATFLV to RS_TRSLI-TRSLI.
    move LS_PARAM-UNIT  to RS_TRSLI-TRSLI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = 'Trim on & (Slitting)'(001).
      ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( importing EF_DESCR = LF_DESCR ).
      replace '&' in EF_DESCR with LF_DESCR.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_TRSLO.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRSLO ).
    move LS_PARAM-ATFLV to RS_TRSLO-TRSLO.
    move LS_PARAM-UNIT  to RS_TRSLO-TRSLO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = 'Trim on & (Slotting)'(002).
      case ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( ).  "Get Description of Counter-Dimension
        when ZIF_VCXI_PXSS_SSS=>C_DIMEN_WIDTH.
          LF_DESCR = ME->GET_DIMEN_DESCR( IF_DIMEN = ZIF_VCXI_PXSS_SSS=>C_DIMEN_LENGTH ).
        when ZIF_VCXI_PXSS_SSS=>C_DIMEN_LENGTH.
          LF_DESCR = ME->GET_DIMEN_DESCR( IF_DIMEN = ZIF_VCXI_PXSS_SSS=>C_DIMEN_WIDTH ).
      endcase.
      replace '&' in EF_DESCR with LF_DESCR.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~GET_TRTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_SSS~C_PARID_TRTOP ).
    move LS_PARAM-ATFLV to RS_TRTOP-TRTOP.
    move LS_PARAM-UNIT  to RS_TRTOP-TRTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~IS_SCORE_ACTIVE.

    data: LS_SCORE_AP       type ZVCXI_PXSS_S_SCORE_AP.
    data: LT_SCORE_AP       type ZVCXI_PXSS_TT_SCORE_AP,
          LT_ISCOR_DISABLED type ZVCXI_PXS_TT_ISCOR.


*** Start negative
    move ABAP_FALSE to RF_FASCO .

***--------------------------------------------------------------------------------------
*** Get current Scores table
    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP       = LT_SCORE_AP
                                                        ET_ISCOR_DISABLED = LT_ISCOR_DISABLED ).

*** Check at least one score is applied
    loop at LT_SCORE_AP into LS_SCORE_AP where FAPPL = ABAP_TRUE.
      check not LINE_EXISTS( LT_ISCOR_DISABLED[ TABLE_LINE = LS_SCORE_AP-ISCOR ] ).
      move ABAP_TRUE to RF_FASCO.
      exit.
    endloop.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~IS_SLIT_ACTIVE.

*** Start negative
    move ABAP_FALSE to RF_FASLI .

***--------------------------------------------------------------------------------------
*** Check Trim Slitting
    if ME->ZIF_VCXI_PXSS_SSS~GET_TRSLI( )-TRSLI is not initial .
      move ABAP_TRUE to RF_FASLI.
    endif.
    check RF_FASLI eq ABAP_FALSE.

***--------------------------------------------------------------------------------------
*** Check Number of Outs is higher than 1
    check ME->GET_NOUTT( ) gt 1.
    move ABAP_TRUE to RF_FASLI.

  endmethod.
  method ZIF_VCXI_PXSS_SSS~IS_SLOT_ACTIVE.

    data: LS_SCORE_AP  type ZVCXI_PXSS_S_SCORE_AP.
    data: LT_SCORE_AP  type ZVCXI_PXSS_TT_SCORE_AP.


*** Start negative
    move ABAP_FALSE to RF_FASLO .

***--------------------------------------------------------------------------------------
*** Check Trim Slotting
    if ME->ZIF_VCXI_PXSS_SSS~GET_TRSLO( )-TRSLO is not initial .
      move ABAP_TRUE to RF_FASLO.
    endif.
    check RF_FASLO eq ABAP_FALSE.

***--------------------------------------------------------------------------------------
*** Get current Scores table
    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP ).

*** Check score is applied, which requires a slot
    loop at LT_SCORE_AP into LS_SCORE_AP where FAPPL eq ABAP_TRUE.
      check LS_SCORE_AP-FSLIN eq ABAP_TRUE.
      move ABAP_TRUE to RF_FASLO.
      exit.
    endloop.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LF_ACTIV type STRING.
    data: LT_ACTIV type standard table of STRING.
    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Activities String
    if ME->ZIF_VCXI_PXSS_SSS~IS_SLIT_ACTIVE( ).  append 'Slit'  to LT_ACTIV. endif.
    if ME->ZIF_VCXI_PXSS_SSS~IS_SLOT_ACTIVE( ).  append 'Slot'  to LT_ACTIV. endif.
    if ME->ZIF_VCXI_PXSS_SSS~IS_SCORE_ACTIVE( ). append 'Score' to LT_ACTIV. endif.
    concatenate lines of LT_ACTIV into LF_ACTIV separated by '/'.

*** Get Attribute Data
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = ME->ZIF_VCXI_PXSS_SSS~GET_DIMEN( )  "Dimension
                                changing  CT_ATTR  = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_LABEL = 'Activities'
                                          IF_VALUE = LF_ACTIV
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://scissors'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
