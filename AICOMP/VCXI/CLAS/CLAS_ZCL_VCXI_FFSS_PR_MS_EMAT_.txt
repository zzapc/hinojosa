
class ZCL_VCXI_FFSS_PR_MS_EMAT definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  interfaces ZIF_VCXI_F0SS_COMM_NEXT .
  interfaces ZIF_VCXI_FFSS_COMM_NEXT .
  interfaces ZIF_VCXI_FFSS_GLUE_CARRIER .
  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IPRVT_MS_EMAT type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSS_MS_EMAT' ##NO_TEXT.
  constants C_PARID_AMAT type /VCXI/VKS_PARID value 'ZVCXI_FF_AMAT' ##NO_TEXT.
  constants C_PARID_FITRW type /VCXI/VKS_PARID value 'ZVCXI_FF_FITRW' ##NO_TEXT.
  constants C_PARID_FRFST type /VCXI/VKS_PARID value 'ZVCXI_FF_FRFST' ##NO_TEXT.
  constants C_PARID_REDUW type /VCXI/VKS_PARID value 'ZVCXI_FF_REDUW' ##NO_TEXT.
  data T_AMAT type ZVCXI_FFSS_TT_AMAT read-only .

  methods GET_FIBPX
    exporting
      !EF_FIBPX type ZVCXI_FFS_FIBPX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_BL_FIBPROP type ref to ZCL_VCXI_FFSS_BL_FIBPROP
    raising
      /VCXI/CX_CKX .
  methods GET_AMAT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_AMAT) type ZVCXI_FFS_AMAT
    raising
      /VCXI/CX_CKX .
  methods GET_FIFPX
    exporting
      !EF_FIFPX type ZVCXI_FFS_FIFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_AMAT_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_FIDEN
    exporting
      !ES_FIDEN type ZVCXI_FFS_S_FIDEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FIRNG
    exporting
      !ET_FIRNG type ZVCXI_FFSS_TT_FIRNG
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FISTX
    exporting
      !EF_FISTX type ZVCXI_FFS_FISTX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_BL_FISTRUCT type ref to ZCL_VCXI_FFSS_BL_FISTRUCT
    raising
      /VCXI/CX_CKX .
  methods GET_FISTY
    exporting
      !EF_FISTY type ZVCXI_FFS_FISTY
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FISTY_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_FITEX
    exporting
      !ES_FITEX type ZVCXI_FFS_S_FITEX
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITHI
    exporting
      !ES_FITHI type ZVCXI_F0S_S_FITHI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITIN
    exporting
      !ES_FITIN type ZVCXI_FFS_S_FITIN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FITRW
    exporting
      !EF_FITRW type ZVCXI_FFS_FITRW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FIWID
    exporting
      !ES_FIWID type ZVCXI_F0S_S_FIWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FRFST
    exporting
      !EF_FRFST type ZVCXI_FFS_FRFST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GULEF
    exporting
      !ES_GULEF type ZVCXI_F0S_S_GULEF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GURIG
    exporting
      !ES_GURIG type ZVCXI_F0S_S_GURIG
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_LOTMI
    exporting
      !ES_LOTMI type ZVCXI_F0S_S_LOTMI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOLAY
    exporting
      !EF_NOLAY type ZVCXI_F0S_NOLAY
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_NOUPS type ZVCXI_F0S_NOUPS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PFWID
    exporting
      !ES_PFWID type ZVCXI_FFS_S_PFWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PTRQW
    exporting
      !ES_PTRQW type ZVCXI_FFS_S_PTRQW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_REDUW
    exporting
      !ES_REDUW type ZVCXI_FFS_S_REDUW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_RELEN
    exporting
      !ES_RELEN type ZVCXI_FFS_S_RELEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !ES_SURWT type ZVCXI_F0S_S_SURWT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TFILM
    exporting
      !EF_TFILM type ZVCXI_F0S_TFILM
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TFOLD
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_TFOLD type ZVCXI_FFS_TFOLD
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TREQW
    exporting
      !ES_TREQW type ZVCXI_FFS_S_TREQW
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods IS_GUSSET_ALLOWED
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_ONLY_ONE_IN
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_OPENSPV_ALLOWED
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods OPEN
    exporting
      !ER_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE
      !ER_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_AMAT
    importing
      !IF_AMAT type ZVCXI_FFS_AMAT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIDEN
    importing
      !IS_FIDEN type ZVCXI_FFS_S_FIDEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITRW
    importing
      !IF_FITRW type ZVCXI_FFS_FITRW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FRFST
    importing
      !IF_FRFST type ZVCXI_FFS_FRFST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_REDUW
    importing
      !IS_REDUW type ZVCXI_FFS_S_REDUW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_CMATN type /VCXI/VKS_ATTID value 'ALLOWED_CMATN' ##NO_TEXT.
  constants C_IEVNT_I_INIT_CUST_AMAT type /VCXI/VKSC_IEVNT value 'INIT_CUST_AMAT' ##NO_TEXT.
  constants C_IEVNT_I_INIT_GUFOL type /VCXI/VKSC_IEVNT value 'INIT_GUFOL' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_AMAT type /VCXI/VKSC_IEVNT value 'RECALC_AMAT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FIDEN type /VCXI/VKSC_IEVNT value 'RECALC_FIDEN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_FISTX type /VCXI/VKSC_IEVNT value 'RECALC_FISTX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_TREQW type /VCXI/VKSC_IEVNT value 'RECALC_TREQW' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_AMAT_CHANGED type /VCXI/VKSC_IEVNT value 'AMAT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_AMAT_LIST_CHANGED type /VCXI/VKSC_IEVNT value 'AMAT_LIST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIBPX_CHANGED type /VCXI/VKSC_IEVNT value 'FIBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIDEN_CHANGED type /VCXI/VKSC_IEVNT value 'FIDEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIRNG_CHANGED type /VCXI/VKSC_IEVNT value 'FIRNG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTX_CHANGED type /VCXI/VKSC_IEVNT value 'FISTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FISTY_CHANGED type /VCXI/VKSC_IEVNT value 'FISTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITHI_CHANGED type /VCXI/VKSC_IEVNT value 'FITHI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITRW_CHANGED type /VCXI/VKSC_IEVNT value 'FITRW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FIWID_CHANGED type /VCXI/VKSC_IEVNT value 'FIWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FRFST_CHANGED type /VCXI/VKSC_IEVNT value 'FRFST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GULEF_CHANGED type /VCXI/VKSC_IEVNT value 'GULEF_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GURIG_CHANGED type /VCXI/VKSC_IEVNT value 'GURIG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LOTMI_CHANGED type /VCXI/VKSC_IEVNT value 'LOTMI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PFWID_CHANGED type /VCXI/VKSC_IEVNT value 'PFWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PTRQW_CHANGED type /VCXI/VKSC_IEVNT value 'PTRQW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_REDUW_CHANGED type /VCXI/VKSC_IEVNT value 'REDUW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RELEN_CHANGED type /VCXI/VKSC_IEVNT value 'RELEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TFOLD_CHANGED type /VCXI/VKSC_IEVNT value 'TFOLD_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TREQW_CHANGED type /VCXI/VKSC_IEVNT value 'TREQW_CHANGED' ##NO_TEXT.
  constants C_PARID_FIBPX type /VCXI/VKS_PARID value 'ZVCXI_FF_FIBPX' ##NO_TEXT.
  constants C_PARID_FIDEN type /VCXI/VKS_PARID value 'ZVCXI_FF_FIDEN' ##NO_TEXT.
  constants C_PARID_FIRNG type /VCXI/VKS_PARID value 'ZVCXI_FF_FIRNG' ##NO_TEXT.
  constants C_PARID_FISTX type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTX' ##NO_TEXT.
  constants C_PARID_FISTY type /VCXI/VKS_PARID value 'ZVCXI_FF_FISTY' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.
  constants C_PARID_FITHI type /VCXI/VKS_PARID value 'ZVCXI_F0_FITHI' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FIWID type /VCXI/VKS_PARID value 'ZVCXI_F0_FIWID' ##NO_TEXT.
  constants C_PARID_GULEF type /VCXI/VKS_PARID value 'ZVCXI_F0_GULEF' ##NO_TEXT.
  constants C_PARID_GURIG type /VCXI/VKS_PARID value 'ZVCXI_F0_GURIG' ##NO_TEXT.
  constants C_PARID_LOTMI type /VCXI/VKS_PARID value 'ZVCXI_F0_LOTMI_L' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_PFWID type /VCXI/VKS_PARID value 'ZVCXI_FF_PFWID' ##NO_TEXT.
  constants C_PARID_PTRQW type /VCXI/VKS_PARID value 'ZVCXI_FF_PTRQW' ##NO_TEXT.
  constants C_PARID_RELEN type /VCXI/VKS_PARID value 'ZVCXI_FF_RELEN' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.
  constants C_PARID_TFOLD type /VCXI/VKS_PARID value 'ZVCXI_FF_TFOLD' ##NO_TEXT.
  constants C_PARID_TREQW type /VCXI/VKS_PARID value 'ZVCXI_FF_TREQW' ##NO_TEXT.
  data R_CUST_AMAT type ref to ZCL_VCXI_FFSS_CUST_FPROC .
  data R_CUST_EMAT type ref to ZCL_VCXI_FFSS_CUST_EMAT .

  methods CHECK_AMAT
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_FGUAL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_FIDEN
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_FISTY
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_FITEX
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_FITIN
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PFWID
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TFILM
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_AMAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_GUFOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_AMAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FIDEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_FISTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_TREQW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_FIBPX
    importing
      !IF_FIBPX type ZVCXI_FFS_FIBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIRNG
    importing
      !IT_FIRNG type ZVCXI_FFSS_TT_FIRNG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FISTX
    importing
      !IF_FISTX type ZVCXI_FFS_FISTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FISTY
    importing
      !IF_FISTY type ZVCXI_FFS_FISTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITHI
    importing
      !IS_FITHI type ZVCXI_F0S_S_FITHI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GULEF
    importing
      !IS_GULEF type ZVCXI_F0S_S_GULEF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GURIG
    importing
      !IS_GURIG type ZVCXI_F0S_S_GURIG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LOTMI
    importing
      !IS_LOTMI type ZVCXI_F0S_S_LOTMI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PFWID
    importing
      !IS_PFWID type ZVCXI_FFS_S_PFWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PTRQW
    importing
      !IS_PTRQW type ZVCXI_FFS_S_PTRQW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RELEN
    importing
      !IS_RELEN type ZVCXI_FFS_S_RELEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TFOLD
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_TFOLD type ZVCXI_FFS_TFOLD
    raising
      /VCXI/CX_CKX .
  methods SET_TREQW
    importing
      !IS_TREQW type ZVCXI_FFS_S_TREQW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_PR_MS_EMAT definition
class ZCL_VCXI_FFSS_PR_MS_EMAT implementation.
  method CHECK_AMAT.

*** 1 - Check Assigned Material Number is maintained.
*** 2 - Check Assigned Material Instance was created
*** 3 - Check Assigned Material Number is valid
*** 4 - Check Assigned Material Number is valid in Plant

    if ME->GET_AMAT( ) is initial.
      move 1 to RF_RESULT.
      exit.
    endif.

    if ME->R_CUST_AMAT is not bound.
      move 2 to RF_RESULT.
      exit.
    endif.

    if ME->R_CUST_AMAT->F_CHECK_MATNR ne ABAP_TRUE.
      move 3 to RF_RESULT.
      exit.
    endif.

    if ME->R_CUST_AMAT->F_CHECK_MAT_MARC ne ABAP_TRUE.
      move 4 to RF_RESULT.
      exit.
    endif.

  endmethod.
  method CHECK_FGUAL.
*** 0 Gusset Is Allowed.
*** 1 Gusset Is Not Allowed.

    data: LR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

    move 0 to RF_RETURN.

***--------------------------------------------------------------------------------------
*** Get Customizing Data
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).

    if LR_BL_FIFPROP->IS_FGUAL( ) eq ABAP_FALSE.
      move 1 to RF_RETURN.
    endif.

  endmethod.
method CHECK_FIDEN.

*** 0 - Film Density is maintained.
*** 1 - Film Density is not maintained.

  data:  LS_FIDEN type ZVCXI_FFS_S_FIDEN.

  ME->GET_FIDEN( importing ES_FIDEN = LS_FIDEN ).

  if LS_FIDEN-FIDEN is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_FISTY.

*** 0 - Film Style is maintained.
*** 1 - Film Style is not maintained.

  data:  LF_FISTY type ZVCXI_FFS_FISTY.

  move 0 to RF_RETURN.
  ME->GET_FISTY( importing EF_FISTY = LF_FISTY ).

  if LF_FISTY is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_FITEX.

*** 0 - Film Thickness (Ext) is maintained.
*** 1 - Film Thickness (Ext) is not maintained.

  data:  LS_FITEX type ZVCXI_FFS_S_FITEX.

  ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = LS_FITEX ).

  if LS_FITEX-FITEX is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_FITIN.

*** 0 - Film Thickness(Int) is maintained.
*** 1 - Film Thickness(Int) is not maintained.

  data:  LS_FITIN type ZVCXI_FFS_S_FITIN.

  ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = LS_FITIN ).

  if LS_FITIN-FITIN is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
method CHECK_PFWID.
*** 0 - Procurement Film Width is maintained.
*** 1 - Procurement Film Width is not maintained.
*** 2 - Procurement Film Width is maintained but not valid.

  data: LS_FIWID type ZVCXI_F0S_S_FIWID,
        LS_PFWID type ZVCXI_FFS_S_PFWID.

***--------------------------------------------------------------------------------------
*** Start positive
  move 0 to RF_RETURN.

*** Get Procurement Film Width
  ME->GET_PFWID( importing ES_PFWID = LS_PFWID ).

  if LS_PFWID-PFWID is initial.
    move 1 to RF_RETURN.
    return.
  endif.

*** Get Film Width (Inbound)
  ME->GET_FIWID( importing ES_FIWID = LS_FIWID ).


***--------------------------------------------------------------------------------------
*** Film Width and Procurement Width need to be the same
  if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FIWID-FIWID
                                                  IF_CALCV_UOM_1 = LS_FIWID-FIWID_UOM
                                                  IF_CALCV_2     = LS_PFWID-PFWID
                                                  IF_CALCV_UOM_2 = LS_PFWID-PFWID_UOM
                                                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_NE ) eq ABAP_TRUE.
*** Procurement Film Width is maintained but not valid.
    move 2 to RF_RETURN.
    return.
  endif.

endmethod.
method CHECK_TFILM.

*** 0 - Film Type is maintained.
*** 1 - Film Type is not maintained.

  data:  LF_TFILM type ZVCXI_F0S_TFILM.

  ME->GET_TFILM( importing EF_TFILM = LF_TFILM ).

  if LF_TFILM is initial.
    move 1 to RF_RETURN.
  endif.

endmethod.
  method GET_AMAT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AMAT ).
    move LS_PARAM-ATWRT to RF_AMAT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_AMAT_DESCR.

    data:  LF_MATNR type MATNR.
    data:  LS_MAKT  type MAKT.

    LF_MATNR = ME->GET_AMAT( ).

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = LF_MATNR
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    if SY-SUBRC ne 0.
      clear RF_DESCR.
    else.
      move LS_MAKT-MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_FIBPX.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX( importing EF_FIBPX = EF_FIBPX
                                                     EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method GET_FIDEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIDEN ).
    move LS_PARAM-ATFLV to ES_FIDEN-FIDEN.
    move LS_PARAM-UNIT  to ES_FIDEN-FIDEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIFPX.

    data: LF_FISTY type        ZVCXI_FFS_FISTY,
          LF_TFOLD type        ZVCXI_FFS_TFOLD,
          LF_NOLAY type        ZVCXI_F0S_NOLAY.
    data: LS_GULEF type        ZVCXI_F0S_S_GULEF,
          LS_GURIG type        ZVCXI_F0S_S_GURIG.
    data: LT_FIRNG type        ZVCXI_FFSS_TT_FIRNG.

***--------------------------------------------------------------------------------------
*** Get Film Property
    ER_BL_FIFPROP = ZCL_VCXI_FFSS_BL_FIFPROP=>FACTORY( ).
    check ER_BL_FIFPROP is bound.

***--------------------------------------------------------------------------------------
*** Film Style
    ME->GET_FISTY( importing EF_FISTY = LF_FISTY ).
    ER_BL_FIFPROP->SET_FISTY( IF_FISTY = LF_FISTY ).

*** Left Gusset
    ME->GET_GULEF( importing ES_GULEF = LS_GULEF ).
    ER_BL_FIFPROP->SET_GULEF( IS_GULEF = LS_GULEF ).

*** Right Gusset
    ME->GET_GURIG( importing ES_GURIG = LS_GURIG ).
    ER_BL_FIFPROP->SET_GURIG( IS_GURIG = LS_GURIG ).

*** Folding Type
    ME->GET_TFOLD( importing EF_TFOLD = LF_TFOLD ).
    ER_BL_FIFPROP->SET_TFOLD( IF_TFOLD = LF_TFOLD ).

*** Number of Layers
    ME->GET_NOLAY( importing EF_NOLAY = LF_NOLAY ).
    ER_BL_FIFPROP->SET_NOLAY_FOLD( IF_NOLAY = LF_NOLAY ).

*** Get Film Ranges
    ME->GET_FIRNG( importing ET_FIRNG = LT_FIRNG ).
    ER_BL_FIFPROP->SET_FIRNG( IT_FIRNG = LT_FIRNG ).

***--------------------------------------------------------------------------------------
*** Return Film Property
    if EF_FIFPX is requested.
      EF_FIFPX = ER_BL_FIFPROP->GET_FIFPX( ).
    endif.

  endmethod.
  method GET_FIRNG.

    data:  LF_FIRNG   type STRING.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIRNG ).
    move LS_PARAM-STRNG to LF_FIRNG.
    move LS_PARAM-SETBY to EF_SETBY.

    clear: ET_FIRNG.

*** Deserialize XML
    if LF_FIRNG is not initial.
      call transformation ID
           source xml LF_FIRNG
           result T_FIRNG   = ET_FIRNG.
    endif.

  endmethod.
  method GET_FISTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).
    move LS_PARAM-STRNG to EF_FISTX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method GET_FISTY.

    data: LS_PARAM     type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTY ).
    move LS_PARAM-ATWRT to EF_FISTY.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Style Description
    if EF_FISTY_DESCR is requested.
      ZCL_VCXI_FFSS_BL_FIFPROP=>GET_FISTY_DESCR( exporting IF_FISTY       = EF_FISTY
                                                 importing EF_FISTY_DESCR = EF_FISTY_DESCR ).
    endif.

  endmethod.
  method GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to ES_FITEX-FITEX.
    move LS_PARAM-UNIT  to ES_FITEX-FITEX_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITHI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITHI ).
    move LS_PARAM-ATFLV to ES_FITHI-FITHI.
    move LS_PARAM-UNIT  to ES_FITHI-FITHI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to ES_FITIN-FITIN.
    move LS_PARAM-UNIT  to ES_FITIN-FITIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITRW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITRW ).
    move LS_PARAM-ATWRT to EF_FITRW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FIWID.

    data: LS_REDUW   type        ZVCXI_FFS_S_REDUW.
    data: LR_CX_CKX  type ref to /VCXI/CX_CKX.

***------------------------------------------------------------------------------------------------
*** Get Film Width (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ES_FIWID
                                                     EF_SETBY = EF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Substract Reduction Width
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    try.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_FIWID-FIWID
                                                            IF_CALCV_UOM_1 = ES_FIWID-FIWID_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                  importing EF_CALCV       = ES_FIWID-FIWID
                                                            EF_CALCV_UOM   = ES_FIWID-FIWID_UOM ).
      catch /VCXI/CX_CKX into LR_CX_CKX.
        clear ES_FIWID-FIWID.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.
    if ES_FIWID-FIWID lt 0.
      move 0 to ES_FIWID-FIWID.
    endif.

  endmethod.
  method GET_FRFST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FRFST ).
    move LS_PARAM-ATWRT to EF_FRFST.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GULEF.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GULEF ).

    move LS_PARAM-ATFLV to ES_GULEF-GULEF.
    move LS_PARAM-UNIT  to ES_GULEF-GULEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GURIG.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GURIG ).

    move LS_PARAM-ATFLV to ES_GURIG-GURIG.
    move LS_PARAM-UNIT  to ES_GURIG-GURIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_LOTMI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LOTMI ).
    move LS_PARAM-ATFLV to ES_LOTMI-LOTMI.
    move LS_PARAM-UNIT  to ES_LOTMI-LOTMI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOLAY.

    data: LF_TFOLD type ZVCXI_FFS_TFOLD.

*** Get Folding Type
    ME->GET_TFOLD( importing EF_TFOLD = LF_TFOLD ).

*** Get Number of Base Layers from Customizing
    select single NOLAY
             from ZVCXI_FFS_TC140
             into EF_NOLAY
            where TFOLD = LF_TFOLD.

  endmethod.
  method GET_NOUPS.

*** Get Number of Ups (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = EF_NOUPS
                                                     EF_SETBY = EF_SETBY ).

  endmethod.
  method GET_PFWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PFWID ).
    move LS_PARAM-ATFLV to ES_PFWID-PFWID.
    move LS_PARAM-UNIT  to ES_PFWID-PFWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PTRQW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PTRQW ).
    move LS_PARAM-ATFLV to ES_PTRQW-PTRQW.
    move LS_PARAM-UNIT  to ES_PTRQW-PTRQW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_REDUW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REDUW ).
    move LS_PARAM-ATFLV to ES_REDUW-REDUW.
    move LS_PARAM-UNIT  to ES_REDUW-REDUW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_RELEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).
    move LS_PARAM-ATFLV to ES_RELEN-RELEN.
    move LS_PARAM-UNIT  to ES_RELEN-RELEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

*** Check Assigned Material
    if ME->CHECK_AMAT( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Procurement Film Width
    if ME->CHECK_PFWID( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Film Density
    if ME->CHECK_FIDEN( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Film Thickness (Int)
    if ME->CHECK_FITIN( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Film Thickness (Ext)
    if ME->CHECK_FITEX( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Film Type
    if ME->CHECK_TFILM( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Film Style
    if ME->CHECK_FISTY( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    data: LF_WERKS type WERKS_D.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

*** Check Assigned Material
    case ME->CHECK_AMAT( ).
      when 1.
***     Assigned Material Number is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '251' ).
      when 2.
***     Assigned Material Instance was not created.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '252' ).
      when 3.
***     Assigned Material Number is not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '253' ).
      when 4.
***     Assigned Material Number is not valid in Plant.
        LF_WERKS = ME->GET_WERKS( ).
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '254'
                                 IF_MSGV1 = LF_WERKS ).
      when others.
***     Assigned Material is maintained and valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '255' ).
    endcase.

*** Check Procurement Film Width
    case ME->CHECK_PFWID( ).
      when 0.
***     Procurement Film Width is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '301' ).

      when 1.
***     Procurement Film Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '302' ).

      when 2.
***     Procurement Film Width is maintained but not valid.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '303' ).
    endcase.

*** Check Film Density
    case ME->CHECK_FIDEN( ).
      when 0.
***     Film Density is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '313' ).

      when 1.
***     Film Density is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '314' ).
    endcase.

*** Check Film Thickness (Int)
    case ME->CHECK_FITIN( ).
      when 0.
***     Film Thickness(Int) is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '305' ).

      when 1.
***     Film Thickness(Int) is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '306' ).
    endcase.

*** Check Film Thickness (Ext)
    case ME->CHECK_FITEX( ).
      when 0.
***     Film Thickness(Ext) is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '307' ).

      when 1.
***     Film Thickness(Ext) is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '308' ).
    endcase.

*** Check Film Type
    case ME->CHECK_TFILM( ).
      when 0.
***     Film Type is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '309' ).

      when 1.
***     Film Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '310' ).
    endcase.

*** Check Film Style
    case ME->CHECK_FISTY( ).
      when 0.
***     Film Style is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '311' ).

      when 1.
***     Film Style is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '312' ).
    endcase.

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TFILM.

    data:  LR_BL_FISTRUCT  type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

*** Get Film Structure (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

*** Get Film Type of Film Structure
    LR_BL_FISTRUCT->GET_TFILM( importing EF_TFILM = EF_TFILM ).

  endmethod.
  method GET_TFOLD.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TFOLD ).
    move LS_PARAM-ATWRT to EF_TFOLD.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
    check EF_TFOLD is not initial.

*** Get Description
    if EF_DESCR is requested.
      select single DESCR
             from ZVCXI_FFS_TC140T
             into EF_DESCR
            where TFOLD eq EF_TFOLD
             and  LANGU eq SY-LANGU.                                   "#EC CI_SUBRC
    endif.

  endmethod.
  method GET_TREQW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).
    move LS_PARAM-ATFLV to ES_TREQW-TREQW.
    move LS_PARAM-UNIT  to ES_TREQW-TREQW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      LR_PR_SPEC->GET_WERKS( importing EF_WERKS = RF_WERKS ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

      when C_IEVNT_I_RECALC_AMAT.
        ME->HANDLE_RECALC_AMAT( ).

      when C_IEVNT_I_INIT_CUST_AMAT.
        ME->HANDLE_INIT_CUST_AMAT( ).

      when C_IEVNT_I_RECALC_FIDEN.
        ME->HANDLE_RECALC_FIDEN( ).

      when C_IEVNT_I_RECALC_TREQW.
        ME->HANDLE_RECALC_TREQW( ).

      when C_IEVNT_I_RECALC_FISTX.
        ME->HANDLE_RECALC_FISTX( ).

      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_INIT_GUFOL.
        ME->HANDLE_INIT_GUFOL( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_AMAT.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type DATS,
          LF_FISTX type ZVCXI_FFS_FISTX,
          LF_FISTY type ZVCXI_FFS_FISTY,
          LF_TFOLD type ZVCXI_FFS_TFOLD,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LS_FITIN type ZVCXI_FFS_S_FITIN,
          LS_FITEX type ZVCXI_FFS_S_FITEX,
          LS_SURWT type ZVCXI_F0S_S_SURWT,
          LS_RELEN type ZVCXI_FFS_S_RELEN,
          LS_PTRQW type ZVCXI_FFS_S_PTRQW,
          LS_PFWID type ZVCXI_FFS_S_PFWID,
          LS_FITHI type ZVCXI_F0S_S_FITHI,
          LS_GULEF type ZVCXI_F0S_S_GULEF,
          LS_GURIG type ZVCXI_F0S_S_GURIG,
          LS_LOTMI type ZVCXI_F0S_S_LOTMI.

*** Get Assigned Material Number
    move ME->GET_AMAT( )   to LF_MATNR.

    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_AMAT          is bound    and
       ME->R_CUST_AMAT->F_MATNR eq LF_MATNR and
       ME->R_CUST_AMAT->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_AMAT.

*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_AMAT = ZCL_VCXI_FFSS_CUST_FPROC=>GET_INSTANCE_FPROC( IF_MATNR = LF_MATNR
                                                                          IF_WERKS = LF_WERKS
                                                                          IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Set Values for Real Assigned Film
    if ME->R_CUST_AMAT is bound.
      move: ME->R_CUST_AMAT->F_FISTX to LF_FISTX,
            ME->R_CUST_AMAT->S_FITIN to LS_FITIN,
            ME->R_CUST_AMAT->S_FITEX to LS_FITEX,
            ME->R_CUST_AMAT->S_SURWT to LS_SURWT,
            ME->R_CUST_AMAT->S_RELEN to LS_RELEN,
            ME->R_CUST_AMAT->S_PTRQW to LS_PTRQW,
            ME->R_CUST_AMAT->S_PFWID to LS_PFWID,
            ME->R_CUST_AMAT->S_FITHI to LS_FITHI,
            ME->R_CUST_AMAT->S_GULEF to LS_GULEF,
            ME->R_CUST_AMAT->S_GURIG to LS_GURIG,
            ME->R_CUST_AMAT->F_FISTY to LF_FISTY,
            ME->R_CUST_AMAT->F_TFOLD to LF_TFOLD,
            ME->R_CUST_AMAT->S_LOTMI to LS_LOTMI.
    endif.

*** If Material Number is initial, fully reset parameters
    if LF_MATNR is not initial.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    else.
      clear LF_SETBY.
    endif.

    ME->SET_FISTX( IF_FISTX = LF_FISTX
                   IF_SETBY = LF_SETBY ).
    ME->SET_FITIN( IS_FITIN = LS_FITIN
                   IF_SETBY = LF_SETBY ).
    ME->SET_FITEX( IS_FITEX = LS_FITEX
                   IF_SETBY = LF_SETBY ).
    ME->SET_SURWT( IS_SURWT = LS_SURWT
                   IF_SETBY = LF_SETBY ).
    ME->SET_RELEN( IS_RELEN = LS_RELEN
                   IF_SETBY = LF_SETBY ).
    ME->SET_PTRQW( IS_PTRQW = LS_PTRQW
                   IF_SETBY = LF_SETBY ).
    ME->SET_PFWID( IS_PFWID = LS_PFWID
                   IF_SETBY = LF_SETBY ).
    ME->SET_FITHI( IS_FITHI = LS_FITHI
                   IF_SETBY = LF_SETBY ).
    ME->SET_GULEF( IS_GULEF = LS_GULEF
                   IF_SETBY = LF_SETBY ).
    ME->SET_GURIG( IS_GURIG = LS_GURIG
                   IF_SETBY = LF_SETBY ).
    ME->SET_FISTY( IF_FISTY = LF_FISTY
                   IF_SETBY = LF_SETBY ).
    ME->SET_TFOLD( IF_TFOLD = LF_TFOLD
                   IF_SETBY = LF_SETBY ).
    ME->SET_LOTMI( IS_LOTMI = LS_LOTMI
                   IF_SETBY = LF_SETBY ).

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type        MATNR,
          LF_WERKS type        WERKS_D,
          LF_DCONF type        DATS.
    data:          LT_FIRNG      type        ZVCXI_FFSS_TT_FIRNG.
    field-symbols: <S_AMAT>  type        ZVCXI_FFSS_S_AMAT,
                   <S_FIRNG> type        ZVCXI_FFSS_S_FIRNG.

***--------------------------------------------------------------------------------------
    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_EMAT          is bound    and
       ME->R_CUST_EMAT->F_MATNR eq LF_MATNR and
       ME->R_CUST_EMAT->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.

    clear:  ME->R_CUST_MATNR, ME->R_CUST_EMAT.

    refresh ME->T_AMAT.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AMAT_LIST_CHANGED ).

***--------------------------------------------------------------------------------------
*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_EMAT = ZCL_VCXI_FFSS_CUST_EMAT=>GET_INSTANCE_EMAT( IF_MATNR = LF_MATNR
                                                                        IF_WERKS = LF_WERKS
                                                                        IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          exit.
      endtry.
    endif.
    check ME->R_CUST_EMAT is bound.

    move ME->R_CUST_EMAT to ME->R_CUST_MATNR.

***--------------------------------------------------------------------------------------
*** Get Assigned Material List
    move ME->R_CUST_EMAT->GET_AMAT( ) to ME->T_AMAT.

    loop at ME->T_AMAT assigning <S_AMAT>.

***   Define Film Range based possible assigned materials
      append initial line to LT_FIRNG assigning <S_FIRNG>.
      move <S_AMAT>-FIWID     to <S_FIRNG>-FIWMI.
      move <S_AMAT>-FIWID_UOM to <S_FIRNG>-FIWMI_UOM.
      move <S_AMAT>-FIWID     to <S_FIRNG>-FIWMA.
      move <S_AMAT>-FIWID_UOM to <S_FIRNG>-FIWMA_UOM.
      move <S_AMAT>-LOTMI     to <S_FIRNG>-LOTMI.
      move <S_AMAT>-LOTMI_UOM to <S_FIRNG>-LOTMI_UOM.
    endloop.

    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AMAT_LIST_CHANGED ).

    ME->SET_FIRNG( IT_FIRNG = LT_FIRNG ).

  endmethod.
  method HANDLE_INIT_GUFOL.

    data: LS_GULEF type ZVCXI_F0S_S_GULEF,
          LS_GURIG type ZVCXI_F0S_S_GURIG.

*** Check if Gusset is not allowed
    check ME->CHECK_FGUAL( ) = 1.

*** Initialize Gusset Left
    ME->SET_GULEF( IS_GULEF = LS_GULEF ).

*** Initialize Gusset Right
    ME->SET_GURIG( IS_GURIG = LS_GURIG ).

  endmethod.
  method HANDLE_RECALC_AMAT.

    data: LF_MATNR  type MATNR.
    data: LS_FIWID type ZVCXI_F0S_S_FIWID,
          LS_AMAT  type ZVCXI_FFSS_S_AMAT.

***--------------------------------------------------------------------------------------
*** Get Film Width
    ME->GET_FIWID( importing ES_FIWID = LS_FIWID ).

    loop at ME->T_AMAT into LS_AMAT .

      check ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( exporting  IF_CALCV_1     = LS_AMAT-FIWID
                                                                    IF_CALCV_UOM_1 = LS_AMAT-FIWID_UOM
                                                                    IF_CALCV_2     = LS_FIWID-FIWID
                                                                    IF_CALCV_UOM_2 = LS_FIWID-FIWID_UOM
                                                                    IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_EQ ) eq ABAP_TRUE.
      move LS_AMAT-AMAT to LF_MATNR.

      exit.
    endloop.

***--------------------------------------------------------------------------------------
*** Set Assigned Material
    ME->SET_AMAT( exporting IF_AMAT = LF_MATNR ).

  endmethod.
  method HANDLE_RECALC_FIDEN.

    data: LS_FIDEN type ZVCXI_FFS_S_FIDEN,
          LS_FITEX type ZVCXI_FFS_S_FITEX,
          LS_SURWT type ZVCXI_F0S_S_SURWT.

***--------------------------------------------------------------------------------------
*** Get current Film Density
    ME->GET_FIDEN( importing ES_FIDEN = LS_FIDEN ).
    CLEAR LS_FIDEN-FIDEN.

***--------------------------------------------------------------------------------------
*** Get External Film Thickness (Outbound)
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = LS_FITEX ).

***--------------------------------------------------------------------------------------
*** Get Film Surface Weight
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = LS_SURWT ).

    if LS_FITEX-FITEX is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                          IF_CALCV_2     = LS_FITEX-FITEX
                                                          IF_CALCV_UOM_2 = LS_FITEX-FITEX_UOM
                                                          IF_UOM         = LS_FIDEN-FIDEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LS_FIDEN-FIDEN
                                                          EF_CALCV_UOM   = LS_FIDEN-FIDEN_UOM ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Film Density
    ME->SET_FIDEN( IS_FIDEN = LS_FIDEN ).

  endmethod.
  method HANDLE_RECALC_FISTX.

    data: LF_FISTX        type ZVCXI_FFS_FISTX,
          LF_FRFST        type ZVCXI_FFS_FRFST,
          LF_SETBY        type /VCXI/VKSR_SETBY.
    data: LR_BL_FISTRUCT  type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

***--------------------------------------------------------------------------------------
*** Get actual Film Structure
    ME->ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX( importing EF_FISTX       = LF_FISTX
                                                     ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

***--------------------------------------------------------------------------------------
*** Reverse Film Structure
    ME->GET_FRFST( importing EF_FRFST = LF_FRFST
                             EF_SETBY = LF_SETBY ).
    if LF_FRFST eq ABAP_TRUE or
       ( LF_FRFST eq ABAP_FALSE and LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      LR_BL_FISTRUCT->TURN( ).
    endif.

***--------------------------------------------------------------------------------------
*** create XML and set to parameter
    LR_BL_FISTRUCT->GET_FISTX( importing EF_FISTX = LF_FISTX ).
    ME->SET_FISTX( IF_FISTX = LF_FISTX ).

  endmethod.
  method HANDLE_RECALC_TREQW.

    data: LS_TREQW type        ZVCXI_FFS_S_TREQW,
          LS_PTRQW type        ZVCXI_FFS_S_PTRQW.

*** Only use Procurement Trim Requirement on Width as Trim Requirement
    ME->GET_PTRQW( importing ES_PTRQW = LS_PTRQW ).
    move LS_PTRQW-PTRQW     to LS_TREQW-TREQW.
    move LS_PTRQW-PTRQW_UOM to LS_TREQW-TREQW_UOM.

*** Set Required Trim on Width (Inbound)
    ME->SET_TREQW( IS_TREQW = LS_TREQW ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method IS_GUSSET_ALLOWED.

*** Check if Gusset is allowed for Film Style
    if ME->CHECK_FGUAL( ) = 1.
      RF_ALLOWED = ABAP_FALSE.
    else.
      RF_ALLOWED = ABAP_TRUE.
    endif.

  endmethod.
  method IS_ONLY_ONE_IN.

    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type        /VCXI/VKSR_TT_GATE.

    move ABAP_TRUE to RF_RETURN.

*** Get Sibling Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.

***   Get Siblings of a specific Provider Type
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

****  Ignore myself
      delete LT_GATE where TABLE_LINE eq ME->R_GATE.

      if LT_GATE is not initial.
        move ABAP_FALSE to RF_RETURN.
        exit.
      endif.
    endloop.

  endmethod.
  method IS_OPENSPV_ALLOWED.

    data: LS_ATTRI type /VCXI/VKS_S_ATTRI.

*** Validate Assigned Material Number using
    check ME->R_CUST_AMAT is bound and
          ME->R_CUST_AMAT->F_CHECK_MATNR    eq ABAP_TRUE and
          ME->R_CUST_AMAT->F_CHECK_MAT_MARC eq ABAP_TRUE.

*** Check against allowed Configurable Materials
    LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CMATN ).
    check LS_ATTRI-ATTVA eq ME->R_CUST_AMAT->S_CMPRK-CMATN.

*** Open Supervisor is allowed
    move ABAP_TRUE to RF_ALLOWED.

  endmethod.
  method OPEN.

    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_OPENSPV type ref to ZCL_VCXI_F0S_PR_OPENSPV.

    if ME->IS_OPENSPV_ALLOWED( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
***   Get Open Supervisor
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0S_PR_OPENSPV=>C_IPRVT_OPENSPV
                                       IF_INUSE  = ABAP_TRUE ).
      read table LT_GATE into LR_GATE index 1.
      check SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_OPENSPV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_OPENSPV.
      endtry.
      check LR_PR_OPENSPV is bound.

***-------------------------------------------------------------------------------------
***   Open Assigned Material Configuration
      LR_PR_OPENSPV->OPEN_MS_PROC( exporting IR_GATE_MS_PROC = ME->R_GATE
                                   importing ER_GATE_XCONI   = ER_GATE_XCONI
                                             ER_GATE_XCONO   = ER_GATE_XCONO ).

    endif.

  endmethod.
  method SET_AMAT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AMAT ).
    move IF_AMAT            to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AMAT_CHANGED ).

    endif.

  endmethod.
  method SET_FIBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).

    move IF_FIBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIBPX_CHANGED ).
    endif.

  endmethod.
  method SET_FIDEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIDEN ).

    move IS_FIDEN-FIDEN     to LS_PARAM-ATFLV.
    move IS_FIDEN-FIDEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIDEN_CHANGED ).
    endif.

  endmethod.
  method SET_FIRNG.

    data: LF_CHANGED type       ABAP_BOOL,
          LF_FIRNG   type       STRING.
    data: LS_PARAM   type       /VCXI/VKSR_S_PARAM.

*** Transform Table into XML
    call transformation ID
         source T_FIRNG = IT_FIRNG
         result xml LF_FIRNG.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIRNG ).

    move LF_FIRNG           to LS_PARAM-STRNG.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIRNG_CHANGED ).
    endif.

  endmethod.
  method SET_FISTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTX ).

    move IF_FISTX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTX_CHANGED ).
    endif.

  endmethod.
  method SET_FISTY.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FISTY ).

    move IF_FISTY to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FISTY_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX     to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
    endif.

  endmethod.
  method SET_FITHI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITHI ).

    move IS_FITHI-FITHI     to LS_PARAM-ATFLV.
    move IS_FITHI-FITHI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITHI_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN     to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
    endif.

  endmethod.
  method SET_FITRW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITRW ).

    move IF_FITRW to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITRW_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_FIWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).

    move IS_FIWID-FIWID     to LS_PARAM-ATFLV.
    move IS_FIWID-FIWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIWID_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_FRFST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FRFST ).
    move IF_FRFST           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FRFST_CHANGED ).
    endif.

  endmethod.
  method SET_GULEF.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GULEF ).

    move IS_GULEF-GULEF      to LS_PARAM-ATFLV.
    move IS_GULEF-GULEF_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GULEF_CHANGED ).
    endif.

  endmethod.
  method SET_GURIG.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GURIG ).

    move IS_GURIG-GURIG      to LS_PARAM-ATFLV.
    move IS_GURIG-GURIG_UOM  to LS_PARAM-UNIT.
    move IF_SETBY            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GURIG_CHANGED ).
    endif.

  endmethod.
  method SET_LOTMI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LOTMI ).

    move IS_LOTMI-LOTMI     to LS_PARAM-ATFLV.
    move IS_LOTMI-LOTMI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LOTMI_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_PFWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PFWID ).

    move IS_PFWID-PFWID     to LS_PARAM-ATFLV.
    move IS_PFWID-PFWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PFWID_CHANGED ).
    endif.

  endmethod.
  method SET_PTRQW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PTRQW ).

    move IS_PTRQW-PTRQW     to LS_PARAM-ATFLV.
    move IS_PTRQW-PTRQW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PTRQW_CHANGED ).
    endif.

  endmethod.
  method SET_REDUW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REDUW ).

    move IS_REDUW-REDUW     to LS_PARAM-ATFLV.
    move IS_REDUW-REDUW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REDUW_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_FFSS_GLUE_CARRIER~C_IEVNT_O_CARRIER_CHANGED ).
    endif.

  endmethod.
  method SET_RELEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RELEN ).

    move IS_RELEN-RELEN     to LS_PARAM-ATFLV.
    move IS_RELEN-RELEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RELEN_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method SET_TFOLD.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TFOLD ).

    move IF_TFOLD to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TFOLD_CHANGED ).
    endif.

  endmethod.
  method SET_TREQW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TREQW ).

    move IS_TREQW-TREQW     to LS_PARAM-ATFLV.
    move IS_TREQW-TREQW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TREQW_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LS_FIWID      type        ZVCXI_F0S_S_FIWID,
          LS_FIWID_PREV type        ZVCXI_F0S_S_FIWID,
          LF_NOUPS      type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_PREV type        ZVCXI_F0S_NOUPS.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FFSS_COMM_PREV,
          LR_BL_FIBPROP      type ref to ZCL_VCXI_FFSS_BL_FIBPROP,
          LR_BL_FIBPROP_NEXT type ref to ZCL_VCXI_FFSS_BL_FIBPROP.


***------------------------------------------------------------------------------------------------
*** Create new Film Backward Property Instance
    LR_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***------------------------------------------------------------------------------------------------
***   Get Sum of Film Width
      LR_COMM_PREV->GET_FIWID( importing ES_FIWID = LS_FIWID_PREV ).
      if LS_FIWID is initial.
        move LS_FIWID_PREV to LS_FIWID.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_FIWID_PREV-FIWID
                                                            IF_CALCV_UOM_1 = LS_FIWID_PREV-FIWID_UOM
                                                            IF_CALCV_2     = LS_FIWID-FIWID
                                                            IF_CALCV_UOM_2 = LS_FIWID-FIWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_FIWID-FIWID_UOM
                                                  importing EF_CALCV       = LS_FIWID-FIWID
                                                            EF_CALCV_UOM   = LS_FIWID-FIWID_UOM ).
      endif.

***   Get Sum of No of Ups
      LR_COMM_PREV->GET_NOUPS( importing EF_NOUPS = LF_NOUPS_PREV ).
      add LF_NOUPS_PREV to LF_NOUPS.

***   Combine Film Forward Property
      LR_COMM_PREV->GET_FIBPX( importing ER_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
      LR_BL_FIBPROP->MERGE( IR_BL_FIBPROP = LR_BL_FIBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Film Width
    ME->SET_FIWID( IS_FIWID = LS_FIWID ).

*** Backward No of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Film Backward Property XML
    ME->SET_FIBPX( IF_FIBPX = LR_BL_FIBPROP->GET_FIBPX( ) ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIBPX ).
    move LS_PARAM-STRNG to EF_FIBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Film Backward Property Instance
    if ER_BL_FIBPROP is requested.
      ER_BL_FIBPROP = ZCL_VCXI_FFSS_BL_FIBPROP=>FACTORY( IF_FIBPX = EF_FIBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX.

    data: LS_REDUW  type ZVCXI_FFS_S_REDUW.
    data: LT_FIRNG  type ZVCXI_FFSS_TT_FIRNG.
    field-symbols: <S_FIRNG>  type ZVCXI_FFSS_S_FIRNG.

***--------------------------------------------------------------------------------------
*** Get Film Forward Property (Inbound)
    ME->GET_FIFPX( importing ER_BL_FIFPROP = ER_BL_FIFPROP
                             EF_SETBY      = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Reduction On Width
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    if LS_REDUW-REDUW ne 0.
      move ER_BL_FIFPROP->T_FIRNG to LT_FIRNG.
      loop at LT_FIRNG assigning <S_FIRNG>.
***     Increase Film Width Minimum by Reduction on Width
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMI
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMI_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_FIRNG>-FIWMI_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMI
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMI_UOM ).

***     Increase Film Width Maximum by Reduction on Width
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_FIRNG>-FIWMA
                                                            IF_CALCV_UOM_1 = <S_FIRNG>-FIWMA_UOM
                                                            IF_CALCV_2     = LS_REDUW-REDUW
                                                            IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_FIRNG>-FIWMA_UOM
                                                  importing EF_CALCV       = <S_FIRNG>-FIWMA
                                                            EF_CALCV_UOM   = <S_FIRNG>-FIWMA_UOM ).
      endloop.
      ER_BL_FIFPROP->SET_FIRNG( IT_FIRNG = LT_FIRNG ).
    endif.

***--------------------------------------------------------------------------------------
*** Get new Film Forward Property XML
    if EF_FIFPX is requested.
      EF_FIFPX = ER_BL_FIFPROP->GET_FIFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FISTX.

***--------------------------------------------------------------------------------------
*** Get Film Structure (Inbound)
    ME->GET_FISTX( importing EF_FISTX = EF_FISTX
                             EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Film Structure Instance
    if ER_BL_FISTRUCT is requested.
      ER_BL_FISTRUCT = ZCL_VCXI_FFSS_BL_FISTRUCT=>FACTORY( IF_FISTX = EF_FISTX ).
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX.

*** Get External Film Thickness (Inbound)
    ME->GET_FITEX( importing ES_FITEX = ES_FITEX
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN.

*** Get Internal Film Thickness (Inbound)
    ME->GET_FITIN( importing ES_FITIN = ES_FITIN
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIWID ).
    move LS_PARAM-ATFLV to ES_FIWID-FIWID.
    move LS_PARAM-UNIT  to ES_FIWID-FIWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_RELEN.

*** Get Repeat Length (Inbound)
    ME->GET_RELEN( importing ES_RELEN = ES_RELEN
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    ME->GET_SURWT( importing ES_SURWT = ES_SURWT
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FFSS_COMM_NEXT~GET_TREQW.

    data: LF_FITRW type ZVCXI_FFS_FITRW.
    data: LS_REDUW type ZVCXI_FFS_S_REDUW.

***--------------------------------------------------------------------------------------
*** Get Flag if Trim Requirement on Width should be ignored
    ME->GET_FITRW( importing EF_FITRW = LF_FITRW ).

*** Get Trim Requirement on the Width
    ME->GET_TREQW( importing ES_TREQW = ES_TREQW ).

*** Get Reduction on Width
    ME->GET_REDUW( importing ES_REDUW = LS_REDUW ).

    if LF_FITRW is initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_TREQW-TREQW
                                                          IF_CALCV_UOM_1 = ES_TREQW-TREQW_UOM
                                                          IF_CALCV_2     = LS_REDUW-REDUW
                                                          IF_CALCV_UOM_2 = LS_REDUW-REDUW_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                importing EF_CALCV       = ES_TREQW-TREQW
                                                          EF_CALCV_UOM   = ES_TREQW-TREQW_UOM ).
    else.
***   Set to 0 if not ignored (FITRW)
      clear ES_TREQW-TREQW.
    endif.

  endmethod.
  method ZIF_VCXI_FFSS_GLUE_CARRIER~GET_FITRW.

*** Get Flag - Ignore Trim Requirement on Width
    ME->GET_FITRW( importing EF_FITRW = RF_FITRW ).

  endmethod.
  method ZIF_VCXI_FFSS_GLUE_CARRIER~GET_FIWID.

*** Get Film Width (Inbound)
    ME->GET_FIWID( importing ES_FIWID = RS_FIWID ).

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

*** Add Node for Procurement
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = ME->GET_DESCR( )
                                                    IF_DESCR      = ME->GET_DESCR( )
                                                    IF_ICON       = 'sap-icon://tag'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
