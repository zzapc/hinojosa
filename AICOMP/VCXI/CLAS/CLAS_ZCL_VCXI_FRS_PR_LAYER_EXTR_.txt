
class ZCL_VCXI_FRS_PR_LAYER_EXTR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_F0S_COPY .

  types:
    begin of YS_LAYCO,
        LRCOL type ZVCXI_FRS_LRCOL,
        FTRCO type ZVCXI_FRS_FTRCO,
        DESCR type /VCXI/CKX_DESCR,
      end of YS_LAYCO .
  types:
    YT_LAYCO type table of YS_LAYCO .

  constants C_IPRVT_LAYER_EXTR type /VCXI/VKSC_IPRVT value 'ZVCXI_FRS_LAYER_EXTR' ##NO_TEXT.
  constants C_PARID_LRCOL type /VCXI/VKS_PARID value 'ZVCXI_FR_LRCOL' ##NO_TEXT.
  constants C_PARID_LRDEN type /VCXI/VKS_PARID value 'ZVCXI_FR_LRDEN' ##NO_TEXT.
  constants C_PARID_LRTHI type /VCXI/VKS_PARID value 'ZVCXI_FR_LRTHI' ##NO_TEXT.
  constants C_PARID_TLAYR type /VCXI/VKS_PARID value 'ZVCXI_FR_TLAYR' ##NO_TEXT.
  class-data T_LAYCO type YT_LAYCO .

  class-methods CLASS_CONSTRUCTOR .
  methods GET_LRCOL
    exporting
      !EF_LRCOL type ZVCXI_FRS_LRCOL
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_LRCOL_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_LRDEN
    exporting
      !ES_LRDEN type ZVCXI_FRS_S_LRDEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_LRFAC
    returning
      value(RF_LRFAC) type ZVCXI_FRS_LRFAC
    raising
      /VCXI/CX_CKX .
  methods GET_LRTHI
    exporting
      !ES_LRTHI type ZVCXI_FRS_S_LRTHI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TLAYR
    exporting
      !EF_TLAYR type ZVCXI_FRS_TLAYR
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_TLAYR_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_LRCOL
    importing
      !IF_LRCOL type ZVCXI_FRS_LRCOL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LRTHI
    importing
      !IS_LRTHI type ZVCXI_FRS_S_LRTHI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLAYR
    importing
      !IF_TLAYR type ZVCXI_FRS_TLAYR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_LRDEN type /VCXI/VKSC_IEVNT value 'RECALC_LRDEN' ##NO_TEXT.
  constants C_IEVNT_O_LRCOL_CHANGED type /VCXI/VKSC_IEVNT value 'LRCOL_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LRDEN_CHANGED type /VCXI/VKSC_IEVNT value 'LRDEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LRTHI_CHANGED type /VCXI/VKSC_IEVNT value 'LRTHI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLAYR_CHANGED type /VCXI/VKSC_IEVNT value 'TLAYR_CHANGED' ##NO_TEXT.

  methods CHECK_INRAT
    returning
      value(RF_RESULT) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_LRCOL
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_LRTHI
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLAYR
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_LRDEN
    raising
      /VCXI/CX_CKX .
  methods SET_LRDEN
    importing
      !IS_LRDEN type ZVCXI_FRS_S_LRDEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FRS_PR_LAYER_EXTR definition
class ZCL_VCXI_FRS_PR_LAYER_EXTR implementation.
  method CHECK_INRAT.

*** 0 - Sum of Ingredient Ratio matches 100%.
*** 1 - Sum of Ingredient Ratio below 100%.
*** 2 - Sum of Ingredient Ratio above 100%.

    data: LF_INRAT_SUM  type    ZVCXI_FRS_INRAT.
    data: LS_INRAT      type    ZVCXI_FRS_S_INRAT.
    data: LT_GATE_INRAT type    /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INRAT type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_INRAT   type ref to ZCL_VCXI_FRS_PR_INGR.


***----------------------------------------------------------------------------
*** Find Provider for Ingredients
    LT_GATE_INRAT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FRS_PR_INGR=>C_IPRVT_INGR
                                          IF_INUSE  = ABAP_TRUE
                                          IF_SORTED = ABAP_TRUE ).
    check LT_GATE_INRAT is not initial.

*** Check each Ingredient
    loop at LT_GATE_INRAT into LR_GATE_INRAT.

      try.
          move LR_GATE_INRAT->R_CLSPR ?to LR_PR_INRAT.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      check LR_PR_INRAT is bound.

      LR_PR_INRAT->GET_INRAT( importing ES_INRAT = LS_INRAT ).
      add LS_INRAT-INRAT to LF_INRAT_SUM.

    endloop.

***----------------------------------------------------------------------------
*** Check if sum of all layer ingredients is 100
    if LF_INRAT_SUM eq 100.
      move 0 to RF_RESULT.
    elseif LF_INRAT_SUM lt 100.
      move 1 to RF_RESULT.
    else.
      move 2 to RF_RESULT.
    endif.

  endmethod.
  method CHECK_LRCOL.

    data: LF_LRCOL type ZVCXI_FRS_LRCOL.

    move ABAP_TRUE to RF_RESULT.

    ME->GET_LRCOL( importing EF_LRCOL = LF_LRCOL ).

    if LF_LRCOL is initial.
      move ABAP_FALSE to RF_RESULT.
    endif.

  endmethod.
  method CHECK_LRTHI.

    data: LS_LRTHI type ZVCXI_FRS_S_LRTHI.

    move ABAP_TRUE to RF_RESULT.

    ME->GET_LRTHI( importing ES_LRTHI = LS_LRTHI ).

    if LS_LRTHI-LRTHI is initial.
      move ABAP_FALSE to RF_RESULT.
    endif.

  endmethod.
  method CHECK_TLAYR.

    data: LF_TLAYR type ZVCXI_FRS_TLAYR.

    move ABAP_TRUE to RF_RESULT.

    ME->GET_TLAYR( importing EF_TLAYR = LF_TLAYR ).

    if LF_TLAYR is initial.
      move ABAP_FALSE to RF_RESULT.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Buffer Layer Color
    select A~LRCOL, A~FTRCO, B~DESCR
           into table @T_LAYCO
           from ( ZVCXI_FRS_TC120 as A
           left outer join ZVCXI_FRS_TC120T as B
            on A~LRCOL eq B~LRCOL )
          where B~LANGU eq @SY-LANGU.

  endmethod.
  method GET_LRCOL.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_LAYCO type YS_LAYCO.

*** Get Parameter Values
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRCOL ).
    move LS_PARAM-ATWRT to EF_LRCOL.
    move LS_PARAM-SETBY to EF_SETBY.

*** Get Description of Layer Color
    if EF_LRCOL_DESCR is requested.
      read table ME->T_LAYCO into LS_LAYCO with key LRCOL = EF_LRCOL.
      check SY-SUBRC is initial.

      move LS_LAYCO-DESCR to EF_LRCOL_DESCR.
    endif.

  endmethod.
  method GET_LRDEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRDEN ).
    move LS_PARAM-ATFLV to ES_LRDEN-LRDEN.
    move LS_PARAM-UNIT  to ES_LRDEN-LRDEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_LRFAC.

    data: LS_LRDEN type        ZVCXI_FRS_S_LRDEN,
          LS_LRTHI type        ZVCXI_FRS_S_LRTHI.

***----------------------------------------------------------------------------
*** Calcuate Layer Factor based on Layer Density and Layer Thichness
    ME->GET_LRDEN( importing ES_LRDEN = LS_LRDEN ).
    ME->GET_LRTHI( importing ES_LRTHI = LS_LRTHI ).
    RF_LRFAC = LS_LRDEN-LRDEN * LS_LRTHI-LRTHI.

  endmethod.
  method GET_LRTHI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRTHI ).
    move LS_PARAM-ATFLV to ES_LRTHI-LRTHI.
    move LS_PARAM-UNIT  to ES_LRTHI-LRTHI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Sum of Ingredient Ratio
    if ME->CHECK_INRAT( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Layer Thickness
    if ME->CHECK_LRTHI( ) eq ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Layer Type
    if ME->CHECK_TLAYR( ) eq ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Layer Color
    if ME->CHECK_LRCOL( ) eq ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Ingredient Ratio

    case ME->CHECK_INRAT( ).
      when 0.
***     Sum of Ingredient Ratio matches 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '307' ).
      when 1.
***     Sum of Ingredient Ratio below 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '308' ).
      when 2.
***     Sum of Ingredient Ratio above 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '309' ).
    endcase.

***--------------------------------------------------------------------------------------
*** Check Layer Thickness
    if ME->CHECK_LRTHI( ) eq ABAP_TRUE.
***   Layer Thickness is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '301' ).
    else.
***   Layer Thickness is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '302' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Layer Type
    if ME->CHECK_TLAYR( ) eq ABAP_TRUE.
***   Layer Type is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '303' ).
    else.
***   Layer Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '304' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Layer Color
    if ME->CHECK_LRCOL( ) eq ABAP_TRUE.
***   Layer Color is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '305' ).
    else.
***   Layer Color is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FRS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '306' ).
    endif.

  endmethod.
  method GET_TLAYR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

*** Get Parameter Values
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLAYR ).
    move LS_PARAM-ATWRT to EF_TLAYR.
    move LS_PARAM-SETBY to EF_SETBY.

*** Get Description of Layer Color
    if EF_TLAYR_DESCR is requested.
      select single DESCR from ZVCXI_FRS_TC110T
             into EF_TLAYR_DESCR
            where LANGU eq SY-LANGU
             and  TLAYR eq EF_TLAYR.
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

      when C_IEVNT_I_RECALC_LRDEN.
        ME->HANDLE_RECALC_LRDEN( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_LRDEN.
*** The calculation Formula to calculate Layer Density is mass-base not volume-based
***     Density of Layer = 1 / ( (Ingredient Ratio 1 / Ingredient Density 1)
***                            + (Ingredient Ratio 2 / Ingredient Density 2)
***                            + (Ingredient Ratio 3 / Ingredient Density 3) ) * 100

    data: LS_INRAT      type        ZVCXI_FRS_S_INRAT,
          LS_INDEN      type        ZVCXI_FRS_S_INDEN,
          LS_LRDEN      type        ZVCXI_FRS_S_LRDEN,
          LS_CALCV_INGR type        ZVCXI_XCS_S_CALCV,
          LS_CALCV      type        ZVCXI_XCS_S_CALCV.
    data: LT_GATE_INGR  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_INGR  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_INGR    type ref to ZCL_VCXI_FRS_PR_INGR.

***----------------------------------------------------------------------------
*** Get Layer Density (for Unit)
    ME->GET_LRDEN( importing ES_LRDEN = LS_LRDEN ).
    move LS_LRDEN-LRDEN_UOM to LS_CALCV-CALCV_UOM.

***----------------------------------------------------------------------------
*** Find Provider for Ingredients
    LT_GATE_INGR = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FRS_PR_INGR=>C_IPRVT_INGR
                                          IF_INUSE  = ABAP_TRUE
                                          IF_SORTED = ABAP_TRUE ).
    check LT_GATE_INGR is not initial.

*** Check each Ingredient
    loop at LT_GATE_INGR into LR_GATE_INGR.

      try.
          move LR_GATE_INGR->R_CLSPR ?to LR_PR_INGR.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      check LR_PR_INGR is bound.

      clear: LS_INDEN,
             LS_INRAT,
             LS_CALCV_INGR.

***   Get Ingredient Ratio
      LR_PR_INGR->GET_INRAT( importing ES_INRAT = LS_INRAT ).

***   Get Density
      LR_PR_INGR->GET_INDEN( importing ES_INDEN = LS_INDEN ).

***   Check Ingredient Density and Ratio are filled
      check LS_INRAT-INRAT is not initial and
            LS_INDEN-INDEN is not initial.

      LS_CALCV_INGR-CALCV     = LS_INRAT-INRAT / LS_INDEN-INDEN.
      LS_CALCV_INGR-CALCV_UOM = LS_INDEN-INDEN_UOM.

***   Calculate temporary sum
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
        exporting
          IF_CALCV_1     = LS_CALCV_INGR-CALCV
          IF_CALCV_UOM_1 = LS_CALCV_INGR-CALCV_UOM
          IF_CALCV_2     = LS_CALCV-CALCV
          IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
          IF_UOM         = LS_LRDEN-LRDEN_UOM
          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
        importing
          EF_CALCV       = LS_CALCV-CALCV
          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

    endloop.

    check LS_CALCV-CALCV is not initial.

*** Calculate Layer Density
    LS_CALCV-CALCV = 1 / LS_CALCV-CALCV * 100.

***----------------------------------------------------------------------------
*** Set Layer Density
    move LS_CALCV-CALCV     to LS_LRDEN-LRDEN.
    move LS_CALCV-CALCV_UOM to LS_LRDEN-LRDEN_UOM.
    ME->SET_LRDEN( IS_LRDEN = LS_LRDEN ).

  endmethod.
  method SET_LRCOL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRCOL ).

    move IF_LRCOL     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Layer Color Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LRCOL_CHANGED ).
    endif.

  endmethod.
  method SET_LRDEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRDEN ).

    move IS_LRDEN-LRDEN       to LS_PARAM-ATFLV.
    move IS_LRDEN-LRDEN_UOM   to LS_PARAM-UNIT.

    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Layer Density Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LRDEN_CHANGED ).
    endif.

  endmethod.
  method SET_LRTHI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LRTHI ).

    move IS_LRTHI-LRTHI     to LS_PARAM-ATFLV.
    move IS_LRTHI-LRTHI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Layer Thickness Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LRTHI_CHANGED ).
    endif.

  endmethod.
  method SET_TLAYR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLAYR ).

    move IF_TLAYR     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event Layer Type Changed
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLAYR_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0S_COPY~COPY_FROM_GATE.

    data:  LF_TLAYR          type        ZVCXI_FRS_TLAYR,
           LF_LRCOL          type        ZVCXI_FRS_LRCOL,
           LF_POSID          type        /VCXI/VKSR_POSID,
           LF_INUSE          type        /VCXI/VKSR_INUSE.
    data:  LS_LRTHI          type        ZVCXI_FRS_S_LRTHI,
           LS_PRVDR_DEF      type        /VCXI/VKSR_S_PRVDR_DEF.
    data:  LT_PRVDR_DEF      type        /VCXI/VKSR_TT_PRVDR_DEF,
           LT_GATE           type        /VCXI/VKSR_TT_GATE,
           LT_GATE_ALL       type        /VCXI/VKSR_TT_GATE.
    data:  LR_PR_LAYER_EXTR  type ref to ZCL_VCXI_FRS_PR_LAYER_EXTR,
           LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
           LR_GATE_NEW       type ref to /VCXI/CL_VKSR_GATE,
           LR_COPY           type ref to ZIF_VCXI_F0S_COPY.


    check IR_GATE          is bound and
          IR_GATE->R_CLSPR is bound.

***--------------------------------------------------------------------------------------
*** Cast to own class-type
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_LAYER_EXTR.
      catch CX_SY_MOVE_CAST_ERROR.
        return.
    endtry.

*** Copy Layer Thickness
    LR_PR_LAYER_EXTR->GET_LRTHI( importing ES_LRTHI = LS_LRTHI ).
    ME->SET_LRTHI( IS_LRTHI = LS_LRTHI ).

*** Copy Layer Type
    LR_PR_LAYER_EXTR->GET_TLAYR( importing EF_TLAYR = LF_TLAYR ).
    ME->SET_TLAYR( IF_TLAYR = LF_TLAYR ).

*** Copy Layer Color
    LR_PR_LAYER_EXTR->GET_LRCOL( importing EF_LRCOL = LF_LRCOL ).
    ME->SET_LRCOL( IF_LRCOL = LF_LRCOL ).


***--------------------------------------------------------------------------------------
*** Free all Children
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT ).
      loop at LT_GATE into LR_GATE.
        LR_GATE->DO_FREE( ).
      endloop.
    endloop.

*** Get all Children of Source
    LT_PRVDR_DEF = IR_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT ).
      append lines of LT_GATE to LT_GATE_ALL.
    endloop.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_ALL ).

*** Copy Source Children
    loop at LT_GATE_ALL into LR_GATE.
***   Create new Child
      LR_GATE_NEW = ME->R_GATE->CREATE_ELEMENT( IF_ID = LR_GATE->F_ID ).

***   Copy InUse if needed
      if LR_GATE_NEW->GET_USYNC( ) ne ABAP_TRUE.
        move LR_GATE->IS_INUSE( ) to LF_INUSE.
        LR_GATE_NEW->SET_INUSE( IF_INUSE = LF_INUSE ).
      endif.

***   Copy Position
      move LR_GATE->GET_POSID( ) to LF_POSID.
      LR_GATE_NEW->SET_POSID( IF_POSID = LF_POSID ).

***   Copy Values though COPY Interface
      try.
          move LR_GATE_NEW->R_CLSPR ?to LR_COPY.
          if LR_COPY is bound.
            LR_COPY->COPY_FROM_GATE( IR_GATE = LR_GATE ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
