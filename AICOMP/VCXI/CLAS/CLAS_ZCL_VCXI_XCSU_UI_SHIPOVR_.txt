
class ZCL_VCXI_XCSU_UI_SHIPOVR definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_SHIPOVR_VIS type ZVCXI_XCSU_S_SHIPOVR_VIS .
  data F_CURSOR type SCRFNAME .
  data F_DYNNR_SUBSC_HU type DYNNR .
  data F_DYNNR_SUBSC_TRUCK type DYNNR .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
protected section.

  data R_PR_SHIPOVR type ref to ZCL_VCXI_XCSU_PR_SHIPOVR .
  constants C_DYNNR_INITIAL type DYNNR value '9999'. "#EC NOTEXT
  constants C_DYNNR_HU type DYNNR value '0110'. "#EC NOTEXT
  constants C_DYNNR_TRUCK type DYNNR value '0120'. "#EC NOTEXT
  data R_GRID_LIMIT_HU type ref to ZCL_VCXI_XCSU_GRID_SU_LIMIT .
  data R_GRID_DIMEN_HU type ref to ZCL_VCXI_XCSU_GRID_SU_DIMEN .
  data R_GRID_LIMIT_TRUCK type ref to ZCL_VCXI_XCSU_GRID_SU_LIMIT .
  data R_GRID_DIMEN_TRUCK type ref to ZCL_VCXI_XCSU_GRID_SU_DIMEN .

  methods SET_SUBSC
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSU_UI_SHIPOVR definition
class ZCL_VCXI_XCSU_UI_SHIPOVR implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_XCSU_UI_SHIPOVR_BIND'
    exporting
      IR_UI_SHIPOVR = ME
    importing
      ES_DYNP       = ME->S_DYNP.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SHIPOVR.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_GRID_DIMEN_HU is bound.
    ME->R_GRID_DIMEN_HU->DO_FREE( ).
    clear ME->R_GRID_DIMEN_HU.
  endif.

  if ME->R_GRID_LIMIT_HU is bound.
    ME->R_GRID_LIMIT_HU->DO_FREE( ).
    clear ME->R_GRID_LIMIT_HU.
  endif.

  if ME->R_GRID_DIMEN_TRUCK is bound.
    ME->R_GRID_DIMEN_TRUCK->DO_FREE( ).
    clear ME->R_GRID_DIMEN_TRUCK.
  endif.

  if ME->R_GRID_LIMIT_TRUCK is bound.
    ME->R_GRID_LIMIT_TRUCK->DO_FREE( ).
    clear ME->R_GRID_LIMIT_TRUCK.
  endif.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED    type        /VCXI/CKX_LOCKED,
         LF_INUSE     type        /VCXI/VKSR_INUSE,
         LF_ACTIV_STA type        ABAP_BOOL,
         LF_ACTIV_HU  type        ABAP_BOOL,
         LF_ACTIV_PAL type        ABAP_BOOL,
         LF_ACTIV_TRU type        ABAP_BOOL.
  data:  LR_CX_CKX    type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      LF_INUSE  = ME->R_GATE->IS_INUSE( ).
      ME->R_PR_SHIPOVR->GET_HU_INFO( importing EF_HU_ACTIV     = LF_ACTIV_HU
                                               EF_PALLET_ACTIV = LF_ACTIV_PAL ).
      ME->R_PR_SHIPOVR->GET_STACK_INFO( importing EF_ACTIV = LF_ACTIV_STA ).
      ME->R_PR_SHIPOVR->GET_TRUCK_INFO( importing EF_ACTIV = LF_ACTIV_TRU ).


***   Modify Scree using DynamicVC
      ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

      loop at screen.
        if LF_LOCKED ne ABAP_TRUE or
           LF_INUSE  ne ABAP_TRUE.
          move 0 to SCREEN-INPUT.
        endif.

        if SCREEN-GROUP1 eq 'STA' and
           LF_ACTIV_STA  eq ABAP_FALSE.
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'TRU' and
               LF_ACTIV_TRU  eq ABAP_FALSE.
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.

        elseif SCREEN-GROUP1 eq 'PAL' and
               LF_ACTIV_PAL  eq ABAP_FALSE.
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.
        elseif SCREEN-GROUP2 eq 'NO'  and
               LF_ACTIV_STA eq ABAP_FALSE and
               LF_ACTIV_PAL eq ABAP_FALSE and
               LF_ACTIV_HU  eq ABAP_FALSE and
               LF_ACTIV_TRU eq ABAP_FALSE.
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.

        endif.
        modify screen.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

*** Check if the PR Class is bound
  check ME->R_PR_SHIPOVR is bound.

  ME->INIT_VIS( ).
  ME->SET_SUBSC( ).

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_SHIPOVR.

endmethod.
method INIT_VIS.

  data: LS_OTRUT type ZVCXI_XCSU_S_OTRUT,
        LS_TRUUT type ZVCXI_XCSU_S_TRUUT,
        LS_WPUNT type ZVCXI_XCSU_S_WPUNT,
        LS_WPORD type ZVCXI_XCSU_S_WPORD.

  free: ME->S_SHIPOVR_VIS.

***
  move ME->R_PR_SHIPOVR->GET_UPORD( )       to ME->S_SHIPOVR_VIS-UPORD.
  move ME->R_PR_SHIPOVR->GET_TPORD( )       to ME->S_SHIPOVR_VIS-TPORD.
  move ME->R_PR_SHIPOVR->GET_FGPHU( )       to ME->S_SHIPOVR_VIS-FGPHU.

*** Get Weights.
  move ME->R_PR_SHIPOVR->GET_WPUNT( )       to LS_WPUNT.
  move-corresponding LS_WPUNT               to ME->S_SHIPOVR_VIS.
  move ME->R_PR_SHIPOVR->GET_WPORD( )       to LS_WPORD.
  move-corresponding LS_WPORD               to ME->S_SHIPOVR_VIS.

*** Get Truck Util.
  move ME->R_PR_SHIPOVR->GET_OTRUT( )       to LS_OTRUT.
  move-corresponding LS_OTRUT               to ME->S_SHIPOVR_VIS.
  move ME->R_PR_SHIPOVR->GET_TRUUT( )       to LS_TRUUT.
  move-corresponding LS_TRUUT               to ME->S_SHIPOVR_VIS.

*** Get Stack Informations
  ME->R_PR_SHIPOVR->GET_STACK_INFO( importing EF_FGPST = ME->S_SHIPOVR_VIS-FGPST ).

*** Get HU Informations
  ME->R_PR_SHIPOVR->GET_HU_INFO( importing EF_STPHU = ME->S_SHIPOVR_VIS-STPHU
                                           EF_SPATT = ME->S_SHIPOVR_VIS-SPATT
                                           EF_PPMAT = ME->S_SHIPOVR_VIS-PPMAT
                                           EF_PPATT = ME->S_SHIPOVR_VIS-PPATT ).

*** Get Truck Info
  ME->R_PR_SHIPOVR->GET_TRUCK_INFO( importing EF_HUPTR = ME->S_SHIPOVR_VIS-HUPTR
                                              EF_HUPLA = ME->S_SHIPOVR_VIS-HUPLA
                                              EF_LAPTR = ME->S_SHIPOVR_VIS-LAPTR
                                              EF_FGPTR = ME->S_SHIPOVR_VIS-FGPTR
                                              EF_TTRUC = ME->S_SHIPOVR_VIS-TTRUC ).

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
method SET_SUBSC.

  data: LF_HU_ACTIV    type ABAP_BOOL,
        LF_TRUCK_ACTIV type ABAP_BOOL.
  data: LT_DIMEN_HU    type ZVCXI_XCSU_TT_DIMEN,
        LT_LIMIT_HU    type ZVCXI_XCSU_TT_LIMIT,
        LT_DIMEN_TRUCK type ZVCXI_XCSU_TT_DIMEN,
        LT_LIMIT_TRUCK type ZVCXI_XCSU_TT_LIMIT.

*** Get HU and Truck Informations
  ME->R_PR_SHIPOVR->GET_HU_INFO( importing EF_HU_ACTIV = LF_HU_ACTIV
                                           ET_DIMEN    = LT_DIMEN_HU
                                           ET_LIMIT    = LT_LIMIT_HU ).

  ME->R_PR_SHIPOVR->GET_TRUCK_INFO( importing EF_ACTIV = LF_TRUCK_ACTIV
                                              ET_DIMEN = LT_DIMEN_TRUCK
                                              ET_LIMIT = LT_LIMIT_TRUCK ).

***------------------------------------------------------------------
*** Set Screen for HU Active
  if LF_HU_ACTIV eq ABAP_TRUE.
    move C_DYNNR_HU to ME->F_DYNNR_SUBSC_HU.

*** Dimensions of HU
    if ME->R_GRID_DIMEN_HU is not bound.
*** Create Grid
      create object ME->R_GRID_DIMEN_HU
        exporting
          IF_CONTAINER_NAME = '0110CC_DIMEN_HU'
          IT_DIMEN          = LT_DIMEN_HU.
    else.
      ME->R_GRID_DIMEN_HU->SET_DIMEN( IT_DIMEN = LT_DIMEN_HU ).
    endif.
*** Refresh
    ME->R_GRID_DIMEN_HU->REFRESH_GRID( ).

*** Limits of HU
    if ME->R_GRID_LIMIT_HU is not bound.
*** Create Grid
      create object ME->R_GRID_LIMIT_HU
        exporting
          IF_CONTAINER_NAME = '0110CC_LIMIT_HU'
          IT_LIMIT          = LT_LIMIT_HU.
    else.
      ME->R_GRID_LIMIT_HU->SET_LIMIT( IT_LIMIT = LT_LIMIT_HU ).
    endif.
*** Refresh
    ME->R_GRID_LIMIT_HU->REFRESH_GRID( ).

  else.
    move C_DYNNR_INITIAL to ME->F_DYNNR_SUBSC_HU.
  endif.

***------------------------------------------------------------------
*** Set Screen for Truck Active
  if LF_TRUCK_ACTIV eq ABAP_TRUE.
    move C_DYNNR_TRUCK to ME->F_DYNNR_SUBSC_TRUCK.

*** Dimensions of TRUCK
    if ME->R_GRID_DIMEN_TRUCK is not bound.
*** Create Grid
      create object ME->R_GRID_DIMEN_TRUCK
        exporting
          IF_CONTAINER_NAME = '0110CC_DIMEN_TRUCK'
          IT_DIMEN          = LT_DIMEN_TRUCK.
    else.
      ME->R_GRID_DIMEN_TRUCK->SET_DIMEN( IT_DIMEN = LT_DIMEN_TRUCK ).
    endif.
*** Refresh
    ME->R_GRID_DIMEN_TRUCK->REFRESH_GRID( ).

*** Limits of HU
    if ME->R_GRID_LIMIT_TRUCK is not bound.
*** Create Grid
      create object ME->R_GRID_LIMIT_TRUCK
        exporting
          IF_CONTAINER_NAME = '0110CC_LIMIT_TRUCK'
          IT_LIMIT          = LT_LIMIT_TRUCK.
    else.
      ME->R_GRID_LIMIT_TRUCK->SET_LIMIT( IT_LIMIT = LT_LIMIT_TRUCK ).
    endif.
*** Refresh
    ME->R_GRID_LIMIT_TRUCK->REFRESH_GRID( ).

  else.
    move C_DYNNR_INITIAL to ME->F_DYNNR_SUBSC_TRUCK.
  endif.

endmethod.
