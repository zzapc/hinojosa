
class ZCL_VCXI_F0SS_PR_ALTUOM definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCSS_OPQTY .

  constants C_IPRVT_F0_ALTUOM type /VCXI/VKSC_IPRVT value 'ZVCXI_F0SS_ALTUOM' ##NO_TEXT.
  data R_BL_ALTUOM type ref to ZCL_VCXI_F0SS_BL_ALTUOM read-only .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_QITEM_AS_ALTUOM
    importing
      !IF_UOM type /VCXI/CKX_UOM
    returning
      value(RS_QITEM) type ZVCXI_XCSS_S_QITEM
    raising
      /VCXI/CX_CKX .
  methods GET_UMREZ_UMREN
    importing
      !IF_UOM type /VCXI/CKX_UOM
    exporting
      !EF_UMREZ type UMREZ
      !EF_UMREN type UMREN
      !EF_UOM type /VCXI/CKX_UOM
    raising
      /VCXI/CX_CKX .
  methods GET_UMREZ_UMREN_BASE
    returning
      value(RS_UMREZ_UMREN_BASE) type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  methods GET_COMPR
    returning
      value(RF_COMPR) type ZVCXI_F0SS_COMPR
    raising
      /VCXI/CX_CKX .
  methods GET_KAUSF
    returning
      value(RS_KAUSF) type ZVCXI_XCSP_S_KAUSF
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0SS_PR_ALTUOM definition
class ZCL_VCXI_F0SS_PR_ALTUOM implementation.
  method CONSTRUCTOR.

    data: LS_CMPRK type /VCXI/VKC_S_CMPRK.


*** Super Constructor
    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

***--------------------------------------------------------------------------------------
*** Get Configuration Info
    ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).

*** Get Alternate Unit
    create object ME->R_BL_ALTUOM
      exporting
        IS_CMPRK      = LS_CMPRK
        IF_WERKS      = ME->R_GATE->GET_APPDATA( )->F_WERKS
        IS_CALCV_BASE = ME->GET_UMREZ_UMREN_BASE( ).

  endmethod.
  method GET_COMPR.

    move 1 to RF_COMPR.

  endmethod.
  method GET_KAUSF.

    move 0    to RS_KAUSF-KAUSF.
    move '%'  to RS_KAUSF-KAUSF_UOM.

  endmethod.
  method GET_QITEM_AS_ALTUOM.

    data: LF_UMREN type UMREN,
          LF_UMREZ type UMREZ.
    data: LS_QITEM_BASE type ZVCXI_XCSS_S_QITEM.

***--------------------------------------------------------------------------------------
*** Get QITEM
    ME->ZIF_VCXI_XCSS_OPQTY~GET_QITEM( importing ES_QITEM_BASE = LS_QITEM_BASE ).

*** Check if conversion is needed
    if LS_QITEM_BASE-QITEM_UOM eq IF_UOM.
      RS_QITEM-QITEM     = LS_QITEM_BASE-QITEM.
      RS_QITEM-QITEM_UOM = LS_QITEM_BASE-QITEM_UOM.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Calculate UMREZ/UMREN
    ME->GET_UMREZ_UMREN( exporting IF_UOM   = IF_UOM
                         importing EF_UMREN = LF_UMREN
                                   EF_UMREZ = LF_UMREZ ).

***--------------------------------------------------------------------------------------
*** Apply UMREZ/UMREN
    if LF_UMREZ ne 0.
      RS_QITEM-QITEM     = LS_QITEM_BASE-QITEM * ( LF_UMREN / LF_UMREZ ).
***   Add Core Weight for MASS alternate units
      break ADD_CORE_WEIGHT_FOR_MASS_RELATED_UNITS.
      RS_QITEM-QITEM_UOM = IF_UOM.
    else.
      clear RS_QITEM-QITEM.
    endif.

  endmethod.
  method GET_STATUS.

    data:  LS_QITEM_BASE  type ZVCXI_XCSS_S_QITEM.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Item Quantity
    ME->ZIF_VCXI_XCSS_OPQTY~GET_QITEM( importing ES_QITEM_BASE = LS_QITEM_BASE ).
    if LS_QITEM_BASE-QITEM     is not initial and
       LS_QITEM_BASE-QITEM_UOM is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    data:  LS_QITEM_BASE  type ZVCXI_XCSS_S_QITEM.

***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Item Quantity
    ME->ZIF_VCXI_XCSS_OPQTY~GET_QITEM( importing ES_QITEM_BASE = LS_QITEM_BASE ).
    if LS_QITEM_BASE-QITEM     is not initial and
       LS_QITEM_BASE-QITEM_UOM is not initial.

***   Item Quantity can be determined.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '201' ).
    else.

***   Item Quantity can't be determined.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '202' ).
    endif.

  endmethod.
  method GET_UMREZ_UMREN.

    check ME->R_BL_ALTUOM is bound and
          IF_UOM is not initial.
    ME->R_BL_ALTUOM->GET_UMREZ_UMREN( exporting IR_GATE  = ME->R_GATE
                                                IF_UOM   = IF_UOM
                                      importing EF_UMREZ = EF_UMREZ
                                                EF_UMREN = EF_UMREN
                                                EF_UOM   = EF_UOM ).

  endmethod.
  method GET_UMREZ_UMREN_BASE.

    data: LR_APPDATA      type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Application Data
    move ME->R_GATE->GET_APPDATA( ) ?to LR_APPDATA.
    check LR_APPDATA is bound.

***--------------------------------------------------------------------------------------
*** Get Base Quantity
*** use a fix value to avoid deviations of conversion factors for different Quantities (SD/MM)
    move 10000                         to RS_UMREZ_UMREN_BASE-CALCV.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to RS_UMREZ_UMREN_BASE-CALCV_UOM.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

***   Calculation Quantity Changed
      when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QITEM.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QITEM_CHANGED ).

***   Item Quantity Changed
      when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QCALC.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QCALC_CHANGED ).

    endcase.

  endmethod.
  method ZIF_VCXI_XCSS_OPQTY~GET_QCALC.

    data: LS_QITEM_BASE type ZVCXI_XCSS_S_QITEM,
          LS_QITEM_SELF type ZVCXI_XCSS_S_QITEM.

    ME->ZIF_VCXI_XCSS_OPQTY~GET_QITEM( importing ES_QITEM_BASE = LS_QITEM_BASE     "Qty in Base UOM (incl. possible Comp Ratio)
                                                 EF_UMREZ      = EF_UMREZ
                                                 EF_UMREN      = EF_UMREN
                                                 ES_QITEM_SELF = LS_QITEM_SELF ).  "Qty in Alt. UOM (incl. possible Comp Ratio)

*** Add Component Scrap in Percentage, if exists
    LS_QITEM_BASE-QITEM     = LS_QITEM_BASE-QITEM + LS_QITEM_BASE-QITEM * ME->GET_KAUSF( )-KAUSF / 100.

*** Qty in Base UoM w/o Comp Ratio (Header Quantity)
    ES_QCALC_BASE-QCALC     = LS_QITEM_BASE-QITEM / ME->GET_COMPR( ).
    ES_QCALC_BASE-QCALC_UOM = LS_QITEM_BASE-QITEM_UOM.

*** Qty in Base UoM with Comp Ratio (Item Quantity)
    ES_QCALC_SELF-QCALC     = LS_QITEM_BASE-QITEM.
    ES_QCALC_SELF-QCALC_UOM = LS_QITEM_BASE-QITEM_UOM.

  endmethod.
  method ZIF_VCXI_XCSS_OPQTY~GET_QITEM.

    data: LF_BASE_UOM    type        /VCXI/CKX_UOM.
    data: LS_OPQTY       type        /VCXI/VSMR_S_OPQTY.
    data: LR_APPDATA     type ref to ZCL_VCXI_XCS_APPDATA.

    clear: ES_QITEM_BASE,
           EF_UMREZ,
           EF_UMREN,
           ES_QITEM_SELF.

***--------------------------------------------------------------------------------------
*** Get Application Data
    move ME->R_GATE->GET_APPDATA( ) ?to LR_APPDATA.
    check LR_APPDATA is bound.

***--------------------------------------------------------------------------------------
*** Get Self Item Quantity
    if LR_APPDATA->S_AUQTY-AUQTY_UOM is initial.

***   No Alternate Unit found
      move LR_APPDATA->S_OPQTY-OPQTY     to ES_QITEM_SELF-QITEM.
      move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QITEM_SELF-QITEM_UOM.

    else.

***   Get Quantity with Alternate Unit
      move LR_APPDATA->S_AUQTY-AUQTY     to ES_QITEM_SELF-QITEM.
      move LR_APPDATA->S_AUQTY-AUQTY_UOM to ES_QITEM_SELF-QITEM_UOM.

    endif.

*** Mutiply by Component Ratio
    ES_QITEM_SELF-QITEM = ES_QITEM_SELF-QITEM * ME->GET_COMPR( ).

***--------------------------------------------------------------------------------------
*** Calculate UMREZ/UMREN
    ME->GET_UMREZ_UMREN( exporting IF_UOM   = ES_QITEM_SELF-QITEM_UOM
                         importing EF_UMREN = EF_UMREN
                                   EF_UMREZ = EF_UMREZ
                                   EF_UOM   = LF_BASE_UOM ).

***--------------------------------------------------------------------------------------
*** Apply UMREZ/UMREN
    if EF_UMREN ne 0.

***   Use SAP Logic with max. 3 decimals
      LS_OPQTY-OPQTY      = ES_QITEM_SELF-QITEM * ( EF_UMREZ / EF_UMREN ).

***   Set Quantity with possible shortened value like SAP Logic
      move LS_OPQTY-OPQTY to ES_QITEM_BASE-QITEM.
      move LF_BASE_UOM    to ES_QITEM_BASE-QITEM_UOM.

    else.
      clear ES_QITEM_BASE-QITEM.
    endif.

*** The conversion has already been applied. Therefore no furter conversion is required.
    move 1 to EF_UMREN.
    move 1 to EF_UMREZ.

  endmethod.
