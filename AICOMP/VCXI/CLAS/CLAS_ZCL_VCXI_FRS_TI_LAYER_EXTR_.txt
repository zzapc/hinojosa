
class ZCL_VCXI_FRS_TI_LAYER_EXTR definition
  public
  inheriting from ZCL_VCXI_XCS_TI
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
    raising
      /VCXI/CX_CKX .

  methods /VCXI/IF_VKSU_TI_EVENT~HANDLE_CONTEXT_REQ
    redefinition .
  methods /VCXI/IF_VKSU_TI_EVENT~HANDLE_CONTEXT_SEL
    redefinition .
protected section.

  data R_PR_VERS_EXTR type ref to ZCL_VCXI_FRS_PR_VERS_EXTR .
  constants C_UC_DELETE_LAYER type UI_FUNC value 'DELETE_LAYER' ##NO_TEXT.

  methods ADD_UC_DELETE_LAYER
    importing
      !IR_MENU type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .
  methods DELETE_LAYER
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FRS_TI_LAYER_EXTR definition
class ZCL_VCXI_FRS_TI_LAYER_EXTR implementation.
  method /VCXI/IF_VKSU_TI_EVENT~HANDLE_CONTEXT_REQ.

    data: LT_FCODES  type  UI_FUNCTIONS.

    SUPER->/VCXI/IF_VKSU_TI_EVENT~HANDLE_CONTEXT_REQ( IR_MENU = IR_MENU ).

*** Add User Command for Delete Layer
    ME->ADD_UC_DELETE_LAYER( exporting IR_MENU = IR_MENU ).

    check R_PR_VERS_EXTR is bound and
          R_PR_VERS_EXTR->IS_RELEASED( ) eq ABAP_TRUE.

*** No RECURRENCY add POSSIBLE
    append 'ADD_RECUR'    to LT_FCODES.
    append C_UC_DELETE_LAYER to LT_FCODES.

*** No move POSSIBLE
    append 'MOVE_TOP '    to LT_FCODES.
    append 'MOVE_BOTTOM ' to LT_FCODES.
    append 'MOVE_DOWN '   to LT_FCODES.
    append 'MOVE_UP '     to LT_FCODES.

    IR_MENU->DISABLE_FUNCTIONS( FCODES = LT_FCODES ).

  endmethod.
  method /VCXI/IF_VKSU_TI_EVENT~HANDLE_CONTEXT_SEL.

    SUPER->/VCXI/IF_VKSU_TI_EVENT~HANDLE_CONTEXT_SEL( IF_FCODE = IF_FCODE ).

    case IF_FCODE.
      when C_UC_DELETE_LAYER.
        ME->DELETE_LAYER( ).
    endcase.

  endmethod.
  method ADD_UC_DELETE_LAYER.

    data: LF_DISABLED type        CUA_ACTIVE,
          LF_TEXT     type        GUI_TEXT.

*** Disable in Display Mode
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      move ABAP_TRUE to LF_DISABLED.
    else.
      move ABAP_FALSE to LF_DISABLED.
    endif.

    move text-T01 to LF_TEXT.
    IR_MENU->ADD_FUNCTION( FCODE    = C_UC_DELETE_LAYER
                           DISABLED = LF_DISABLED
                           TEXT     = LF_TEXT ).

  endmethod.
  method CONSTRUCTOR.

    data: LS_PRVDR_DEF type         /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_GATE      type         /VCXI/VKSR_TT_GATE,
          LT_PRVDR     type         /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type         /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_GATE      type ref to  /VCXI/CL_VKSR_GATE.

    SUPER->CONSTRUCTOR( IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

***--------------------------------------------------------------------------------------
*** Get Parent
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_PARENT ).

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

      append lines of LT_GATE to LT_PRVDR.
    endloop.

    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_PRVDR ).

    loop at LT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to R_PR_VERS_EXTR.
        catch CX_SY_MOVE_CAST_ERROR.
***   TI ABAP Class is not compatible with PR ABAP Class.
          raise exception type /VCXI/CX_CKX
            exporting
              F_MSGTY = 'E'
              F_MSGID = '/VCXI/VKSR'
              F_MSGNO = '802'.
      endtry.
    endloop.

  endmethod.
  method DELETE_LAYER.

    check ME->R_GATE is bound.
    ME->R_GATE->DO_FREE( ).
    CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = '_REFRESH' ).

  endmethod.
