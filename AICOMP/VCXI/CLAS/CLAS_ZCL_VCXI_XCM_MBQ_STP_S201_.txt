
class ZCL_VCXI_XCM_MBQ_STP_S201 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S000
  create public .

public section.

  types:
    YT_T320 type standard table of T320 .

  methods EXECUTE
    redefinition .
protected section.

  methods CREATE_BASIC
    importing
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods CREATE_MRP_AREA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods CREATE_PLANNINGDATA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods CREATE_PLANTDATA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods CREATE_PRTDATA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods CREATE_SALESDATA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods CREATE_STORAGELOCATIONDATA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods CREATE_STORAGETYPEDATA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods CREATE_WAREHOUSENUMBERDATA
    importing
      !IF_MATNR type MATNR
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
    raising
      /VCXI/CX_CKX .
  methods TRANS_BASIC
    importing
      !IS_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
    raising
      /VCXI/CX_CKX .
  methods TRANS_MRP_AREA
    importing
      !IS_SOURCE_MDMA type CMD_BS_MAT_S_MDMA
      !IF_MATNR type MATNR
      !IS_MATDAT_MDMA type ZVCXI_XCM_MBQ_S_MATDAT_MDMA
    exporting
      !ES_TARGET_MDMA type CMD_BS_MAT_S_MDMA
      !ES_TARGET_MDMA_X type CMD_BS_MAT_S_MDMA_X
    raising
      /VCXI/CX_CKX .
  methods TRANS_PLANNINGDATA
    importing
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
      !IS_MATDAT_MPGD type ZVCXI_XCM_MBQ_S_MATDAT_MPGD
    raising
      /VCXI/CX_CKX .
  methods TRANS_PLANTDATA
    importing
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
      !IS_MATDAT_MARC type ZVCXI_XCM_MBQ_S_MATDAT_MARC
      !IS_MATDAT_MBEW type ZVCXI_XCM_MBQ_S_MATDAT_MBEW
    raising
      /VCXI/CX_CKX .
  methods TRANS_PRTDATA
    importing
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
      !IS_MATDAT_MFHM type ZVCXI_XCM_MBQ_S_MATDAT_MFHM
    raising
      /VCXI/CX_CKX .
  methods TRANS_SALESDATA
    importing
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
      !IS_MATDAT_MVKE type ZVCXI_XCM_MBQ_S_MATDAT_MVKE
    raising
      /VCXI/CX_CKX .
  methods TRANS_STORAGELOCATIONDATA
    importing
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
      !IS_MATDAT_MARD type ZVCXI_XCM_MBQ_S_MATDAT_MARD
    raising
      /VCXI/CX_CKX .
  methods TRANS_STORAGETYPEDATA
    importing
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
      !IS_MATDAT_MLGT type ZVCXI_XCM_MBQ_S_MATDAT_MLGT
    raising
      /VCXI/CX_CKX .
  methods TRANS_WAREHOUSENUMBERDATA
    importing
      !IR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT
      !IR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT
      !IS_MATDAT_MLGN type ZVCXI_XCM_MBQ_S_MATDAT_MLGN
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCM_MBQ_STP_S201 definition
class ZCL_VCXI_XCM_MBQ_STP_S201 implementation.
  method CREATE_BASIC.

    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


***--------------------------------------------------------------------------------------
*** Load Basic Data of Template Material
    create object LR_BOB_MAT_SOURCE.
    LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                     importing ET_BAPIRET2 = LT_BAPIRET2 ).

*** Ensure Tamplate has requested Data defined
    check LR_BOB_MAT_SOURCE->S_CLIENTDATA-MATERIAL eq IS_ACTDAT_MAT-TMATN.

*** Load Basic Data of new Material (based on Template)
    create object LR_BOB_MAT_TARGET.
    LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                     importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
*** Transfer Basic Data of Material
    ME->TRANS_BASIC( IS_ACTDAT_MAT     = IS_ACTDAT_MAT
                     IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                     IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET ).

***--------------------------------------------------------------------------------------
*** Get new Material Number
    LR_BOB_MAT_TARGET->RENEW_MATNR( ).

*** Create Material Master
    LR_BOB_MAT_TARGET->SAVE( ).

*** Return Material Number
    RF_MATNR = LR_BOB_MAT_TARGET->S_CLIENTDATA-MATERIAL_LONG.

  endmethod.
  method CREATE_MRP_AREA.

    data: LS_MATDAT_MDMA   type ZVCXI_XCM_MBQ_S_MATDAT_MDMA,
          LS_TARGET_MDMA   type CMD_BS_MAT_S_MDMA,
          LS_TARGET_MDMA_X type CMD_BS_MAT_S_MDMA_X.
    data: LT_BAPIRET2      type table of BAPIRET2,
          LT_TARGET_MDMA   type CMD_BS_MAT_T_MDMA,
          LT_TARGET_MDMA_X type CMD_BS_MAT_T_MDMA_X.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


***--------------------------------------------------------------------------------------
*** Process MRP Area by Plant
    loop at IS_ACTDAT_MAT-T_MATDAT_MARC into data(LS_MATDAT_MARC).

***   Load Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_WERKS    = LS_MATDAT_MARC-PLANT
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).
      check LR_BOB_MAT_SOURCE->S_PLANTDATA-MRP_AREA_EXISTS eq ABAP_TRUE.

***   Load new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_WERKS    = LS_MATDAT_MARC-PLANT
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Process each defined MRP Area of Plant
      clear: LT_TARGET_MDMA, LT_TARGET_MDMA_X.
      loop at IS_ACTDAT_MAT-T_MATDAT_MDMA into LS_MATDAT_MDMA
                                         where WERKS eq LS_MATDAT_MARC-PLANT.

***     Load MRP Area Data of Template Material
        data(LT_MDMA) = LR_BOB_MAT_SOURCE->GET_MRP_AREA( II_BERID = value #( ( SIGN = 'I' OPTION = 'EQ' LOW = LS_MATDAT_MDMA-BERID ) ) ).

***     Ensure Tamplate has requested Data defined
        check LT_MDMA is not initial.

***     Transfer MRP Area Data of Material
        ME->TRANS_MRP_AREA( exporting IF_MATNR         = IF_MATNR
                                      IS_SOURCE_MDMA   = LT_MDMA[ 1 ]
                                      IS_MATDAT_MDMA   = LS_MATDAT_MDMA
                            importing ES_TARGET_MDMA   = LS_TARGET_MDMA
                                      ES_TARGET_MDMA_X = LS_TARGET_MDMA_X ).
        append LS_TARGET_MDMA   to LT_TARGET_MDMA.
        append LS_TARGET_MDMA_X to LT_TARGET_MDMA_X.
      endloop.

***--------------------------------------------------------------------------------------
***   Create new MRP Areas in Plant
      LR_BOB_MAT_TARGET->SAVE_MRP_AREA( exporting IT_MDMA     = LT_TARGET_MDMA
                                                  IT_MDMA_X   = LT_TARGET_MDMA_X
                                        importing ET_BAPIRET2 = LT_BAPIRET2 ).
    endloop.

  endmethod.
  method CREATE_PLANNINGDATA.

    data: LS_MATDAT_MPGD type ZVCXI_XCM_MBQ_S_MATDAT_MPGD.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


*** Process each defined Plant
    loop at IS_ACTDAT_MAT-T_MATDAT_MPGD into LS_MATDAT_MPGD.

***--------------------------------------------------------------------------------------
***   Load Planning Data of Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_WERKS    = LS_MATDAT_MPGD-PLANT
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***   Ensure Tamplate has requested Data defined
      check LR_BOB_MAT_SOURCE->S_PLANNINGDATA-PLANT eq LS_MATDAT_MPGD-PLANT.

***   Load Planning Data of new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_WERKS    = LS_MATDAT_MPGD-PLANT
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Transfer Planning Data of Material
      ME->TRANS_PLANNINGDATA( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                              IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                              IS_MATDAT_MPGD    = LS_MATDAT_MPGD ).

***--------------------------------------------------------------------------------------
***   Create new Material Views
      LR_BOB_MAT_TARGET->SAVE( ).

    endloop.

  endmethod.
  method CREATE_PLANTDATA.

    data: LF_BWKEY    type BWKEY.
    data: LS_MATDAT_MARC type ZVCXI_XCM_MBQ_S_MATDAT_MARC,
          LS_MATDAT_MBEW type ZVCXI_XCM_MBQ_S_MATDAT_MBEW.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


*** Process each defined Plant
    loop at IS_ACTDAT_MAT-T_MATDAT_MARC into LS_MATDAT_MARC.

***   Get related Valuation area
      select single BWKEY into LF_BWKEY from T001W where WERKS eq LS_MATDAT_MARC-PLANT.

***   Get defiend Valuation Area Infos
      LS_MATDAT_MBEW = value #( IS_ACTDAT_MAT-T_MATDAT_MBEW[ VAL_AREA = LF_BWKEY ] optional ).

***--------------------------------------------------------------------------------------
***   Load Plant Data of Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_WERKS    = LS_MATDAT_MARC-PLANT
                                                 IF_BWKEY    = LS_MATDAT_MBEW-VAL_AREA
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***   Ensure Tamplate has requested Data defined
      check LR_BOB_MAT_SOURCE->S_PLANTDATA-PLANT        eq LS_MATDAT_MARC-PLANT and
            LR_BOB_MAT_SOURCE->S_VALUATIONDATA-VAL_AREA eq LS_MATDAT_MBEW-VAL_AREA.

***   Load Plant Data of new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_WERKS    = LS_MATDAT_MARC-PLANT
                                                 IF_BWKEY    = LS_MATDAT_MBEW-VAL_AREA
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Transfer Plant and Valuation Data of Material
      ME->TRANS_PLANTDATA( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                           IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                           IS_MATDAT_MARC    = LS_MATDAT_MARC
                           IS_MATDAT_MBEW    = LS_MATDAT_MBEW ).

***--------------------------------------------------------------------------------------
***   Create new Material Views
      LR_BOB_MAT_TARGET->SAVE( ).

    endloop.

  endmethod.
  method CREATE_PRTDATA.

    data: LS_MATDAT_MFHM type ZVCXI_XCM_MBQ_S_MATDAT_MFHM.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


*** Process each defined Plant
    loop at IS_ACTDAT_MAT-T_MATDAT_MFHM into LS_MATDAT_MFHM.

***--------------------------------------------------------------------------------------
***   Load PRT Data of Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_WERKS    = LS_MATDAT_MFHM-PLANT
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***   Ensure Tamplate has requested Data defined
      check LR_BOB_MAT_SOURCE->S_PRTDATA-PLANT eq LS_MATDAT_MFHM-PLANT.

***   Load PRT Data of new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_WERKS    = LS_MATDAT_MFHM-PLANT
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Transfer PRT Data of Material
      ME->TRANS_PRTDATA( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                         IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                         IS_MATDAT_MFHM    = LS_MATDAT_MFHM ).

***--------------------------------------------------------------------------------------
***   Create new Material Views
      LR_BOB_MAT_TARGET->SAVE( ).

    endloop.

  endmethod.
  method CREATE_SALESDATA.

    data: LS_MATDAT_MVKE type ZVCXI_XCM_MBQ_S_MATDAT_MVKE.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


*** Process each defined Sales Area
    loop at IS_ACTDAT_MAT-T_MATDAT_MVKE into LS_MATDAT_MVKE.

***--------------------------------------------------------------------------------------
***   Load Sales Data of Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_VKORG    = LS_MATDAT_MVKE-SALES_ORG
                                                 IF_VTWEG    = LS_MATDAT_MVKE-DISTR_CHAN
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***   Ensure Tamplate has requested Data defined
      check LR_BOB_MAT_SOURCE->S_SALESDATA-SALES_ORG  eq LS_MATDAT_MVKE-SALES_ORG and
            LR_BOB_MAT_SOURCE->S_SALESDATA-DISTR_CHAN eq LS_MATDAT_MVKE-DISTR_CHAN.

***   Load Sales Data of new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_VKORG    = LS_MATDAT_MVKE-SALES_ORG
                                                 IF_VTWEG    = LS_MATDAT_MVKE-DISTR_CHAN
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Transfer Sales Data of Material
      ME->TRANS_SALESDATA( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                           IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                           IS_MATDAT_MVKE    = LS_MATDAT_MVKE ).

***--------------------------------------------------------------------------------------
***   Create new Material Views
      LR_BOB_MAT_TARGET->SAVE( ).

    endloop.

  endmethod.
  method CREATE_STORAGELOCATIONDATA.

    data: LS_MATDAT_MARD type ZVCXI_XCM_MBQ_S_MATDAT_MARD.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


*** Process each defined Storage Location
    loop at IS_ACTDAT_MAT-T_MATDAT_MARD into LS_MATDAT_MARD.

***--------------------------------------------------------------------------------------
***   Load Storage Location Data of Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_WERKS    = LS_MATDAT_MARD-PLANT
                                                 IF_LGORT    = LS_MATDAT_MARD-STGE_LOC
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***   Ensure Tamplate has requested Data defined
      check LR_BOB_MAT_SOURCE->S_STORAGELOCATIONDATA-PLANT    eq LS_MATDAT_MARD-PLANT and
            LR_BOB_MAT_SOURCE->S_STORAGELOCATIONDATA-STGE_LOC eq LS_MATDAT_MARD-STGE_LOC.

***   Load Storage Location Data of new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_WERKS    = LS_MATDAT_MARD-PLANT
                                                 IF_LGORT    = LS_MATDAT_MARD-STGE_LOC
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Transfer Storage Location Data of Material
      ME->TRANS_STORAGELOCATIONDATA( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                                     IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                                     IS_MATDAT_MARD    = LS_MATDAT_MARD ).

***   Transfer Basic Data again, as some MARA fields are only stored with respective view
      ME->TRANS_BASIC( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                       IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                       IS_ACTDAT_MAT     = IS_ACTDAT_MAT ).

***--------------------------------------------------------------------------------------
***   Create new Material Views
      LR_BOB_MAT_TARGET->SAVE( ).

    endloop.

  endmethod.
  method CREATE_STORAGETYPEDATA.

    data: LS_MATDAT_MLGT type ZVCXI_XCM_MBQ_S_MATDAT_MLGT.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


*** Process each defined Storage Type
    loop at IS_ACTDAT_MAT-T_MATDAT_MLGT into LS_MATDAT_MLGT.

***--------------------------------------------------------------------------------------
***   Load Storage Type Data of Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_LGNUM    = LS_MATDAT_MLGT-WHSE_NO
                                                 IF_LGTYP    = LS_MATDAT_MLGT-STGE_TYPE
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***   Ensure Tamplate has requested Data defined
      check LR_BOB_MAT_SOURCE->S_STORAGETYPEDATA-WHSE_NO   eq LS_MATDAT_MLGT-WHSE_NO and
            LR_BOB_MAT_SOURCE->S_STORAGETYPEDATA-STGE_TYPE eq LS_MATDAT_MLGT-STGE_TYPE.

***   Load Storage Type Data of new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_LGNUM    = LS_MATDAT_MLGT-WHSE_NO
                                                 IF_LGTYP    = LS_MATDAT_MLGT-STGE_TYPE
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Transfer Storage Type Data of Material
      ME->TRANS_STORAGETYPEDATA( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                                 IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                                 IS_MATDAT_MLGT    = LS_MATDAT_MLGT ).

***--------------------------------------------------------------------------------------
***   Create new Material Views
      LR_BOB_MAT_TARGET->SAVE( ).

    endloop.

  endmethod.
  method CREATE_WAREHOUSENUMBERDATA.

    data: LS_MATDAT_MLGN type ZVCXI_XCM_MBQ_S_MATDAT_MLGN.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_BOB_MAT_SOURCE type ref to ZCL_VCXI_XCI_BOB_MAT,
          LR_BOB_MAT_TARGET type ref to ZCL_VCXI_XCI_BOB_MAT.


*** Process each defined Warehouse Number
    loop at IS_ACTDAT_MAT-T_MATDAT_MLGN into LS_MATDAT_MLGN.

***--------------------------------------------------------------------------------------
***   Load Warehouse Number Data of Template Material
      create object LR_BOB_MAT_SOURCE.
      LR_BOB_MAT_SOURCE->INIT_FROM_DB( exporting IF_MATNR    = IS_ACTDAT_MAT-TMATN
                                                 IF_LGNUM    = LS_MATDAT_MLGN-WHSE_NO
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***   Ensure Tamplate has requested Data defined
      check LR_BOB_MAT_SOURCE->S_WAREHOUSENUMBERDATA-WHSE_NO eq LS_MATDAT_MLGN-WHSE_NO.

***   Load Warehouse Number Data of new Material
      create object LR_BOB_MAT_TARGET.
      LR_BOB_MAT_TARGET->INIT_FROM_DB( exporting IF_MATNR    = IF_MATNR
                                                 IF_LGNUM    = LS_MATDAT_MLGN-WHSE_NO
                                       importing ET_BAPIRET2 = LT_BAPIRET2 ).

***--------------------------------------------------------------------------------------
***   Transfer Warehouse Number Data of Material
      ME->TRANS_WAREHOUSENUMBERDATA( IR_BOB_MAT_SOURCE = LR_BOB_MAT_SOURCE
                                     IR_BOB_MAT_TARGET = LR_BOB_MAT_TARGET
                                     IS_MATDAT_MLGN    = LS_MATDAT_MLGN ).

***--------------------------------------------------------------------------------------
***   Create new Material Views
      LR_BOB_MAT_TARGET->SAVE( ).

    endloop.

  endmethod.
  method EXECUTE.

    data: LF_WERKS type WERKS_D.
    data: LS_MATLI type ZVCXI_XCM_MBQ_S_MATLI,
          LS_T320  type T320.
    data: LT_BAPIRET2 type table of BAPIRET2.
    data: LR_ACTDAT type ref to DATA.
    field-symbols: <S_ACTDAT_MAT> type ZVCXI_XCM_MBQ_S_ACTDAT_MAT.


    try.
***     Get Material List Entry of active Material List Entry
        LS_MATLI = ME->R_DCO_INPUT->T_MATLI[ MLCNT = ME->R_DCO_INPUT->F_MLCNT ].

***     Check Activity - Material Creation
        if not LINE_EXISTS( LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_MAT ] ).
***       Set Status to CANCELED
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
          return.
        endif.

***     Load Activity Control Data
        LR_ACTDAT = LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_MAT ]-R_ACTDAT.
        assign LR_ACTDAT->* to <S_ACTDAT_MAT>.

***--------------------------------------------------------------------------------------
***     Create Basic Data of Material
        LS_MATLI-MATNR = ME->CREATE_BASIC( IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Update Material List in DCO
        ME->R_DCO_OUTPUT->UPDATE_MATLI( IS_MATLI = LS_MATLI ).
        ME->R_RPSEG->SAVE_AND_COMMIT( ).

***     Create Sales Data of Material
        ME->CREATE_SALESDATA( IF_MATNR      = LS_MATLI-MATNR
                              IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Create Plant Data of Material
        ME->CREATE_PLANTDATA( IF_MATNR      = LS_MATLI-MATNR
                              IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Create Planning Data of Material
        ME->CREATE_PLANNINGDATA( IF_MATNR      = LS_MATLI-MATNR
                                 IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Create PRT Data of Material
        ME->CREATE_PRTDATA( IF_MATNR      = LS_MATLI-MATNR
                            IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Create MRP Area Data of Material
        ME->CREATE_MRP_AREA( IF_MATNR      = LS_MATLI-MATNR
                             IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Create Storage Location Data of Material
        ME->CREATE_STORAGELOCATIONDATA( IF_MATNR      = LS_MATLI-MATNR
                                        IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Create Storage Type Data of Material
        ME->CREATE_STORAGETYPEDATA( IF_MATNR      = LS_MATLI-MATNR
                                    IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***     Create Warehouse Number Data of Material
        ME->CREATE_WAREHOUSENUMBERDATA( IF_MATNR      = LS_MATLI-MATNR
                                        IS_ACTDAT_MAT = <S_ACTDAT_MAT> ).

***--------------------------------------------------------------------------------------
***     Update MATLI in DCO
        ME->R_DCO_OUTPUT->UPDATE_MATLI( IS_MATLI = LS_MATLI ).

***     Set Status to Complete
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).

***     Material &1 was successfully created based on template &2.
        ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                         IF_MSGTY = 'S'
                                         IF_MSGNO = '201'
                                         IF_MSGV1 = LS_MATLI-MATNR
                                         IF_MSGV2 = <S_ACTDAT_MAT>-TMATN ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Perform Save and Commit
    ME->R_RPSEG->SAVE_AND_COMMIT( ).

  endmethod.
  method TRANS_BASIC.

    field-symbols: <S_MATERIALDESCRIPTION> type BAPI_MAKT_GA,
                   <S_UNITSOFMEASURE>      type BAPI_MARM_GA.


***--------------------------------------------------------------------------------------
*** Copy Basic Data from Source to Target (keep Material Number)
    IR_BOB_MAT_TARGET->S_CLIENTDATA = corresponding #( base ( IR_BOB_MAT_TARGET->S_CLIENTDATA ) IR_BOB_MAT_SOURCE->S_CLIENTDATA except MATERIAL ).


***--------------------------------------------------------------------------------------
*** Set Client Data
    IR_BOB_MAT_TARGET->S_CLIENTDATA = corresponding #( base ( IR_BOB_MAT_TARGET->S_CLIENTDATA ) IS_ACTDAT_MAT-S_MATDAT_MARA ).

*** MARA Extensions
    break TBD.

*** Material Description
    if IS_ACTDAT_MAT-T_MATDAT_MAKT is not initial.
      if LINE_EXISTS( IS_ACTDAT_MAT-T_MATDAT_MAKT[ LANGU = SPACE ] ).
***     Update all defined languages
        loop at IR_BOB_MAT_TARGET->T_MATERIALDESCRIPTION assigning <S_MATERIALDESCRIPTION>.
          <S_MATERIALDESCRIPTION>-MATL_DESC = IS_ACTDAT_MAT-T_MATDAT_MAKT[ LANGU = SPACE ]-MAKTX.
        endloop.
      else.
***     Set specific Languages
        IR_BOB_MAT_TARGET->T_MATERIALDESCRIPTION = value #( for LS_MATDAT_MAKT in IS_ACTDAT_MAT-T_MATDAT_MAKT
                                                              ( LANGU     = LS_MATDAT_MAKT-LANGU
                                                                MATL_DESC = LS_MATDAT_MAKT-MAKTX ) ).
      endif.
    endif.

*** Units of Measure for Material
    if IS_ACTDAT_MAT-T_MATDAT_MARM is not initial.
***   Set specific Units
      IR_BOB_MAT_TARGET->T_UNITSOFMEASURE = value #( for LS_MATDAT_MARM in IS_ACTDAT_MAT-T_MATDAT_MARM
                                                       ( ALT_UNIT   = LS_MATDAT_MARM-MEINH
                                                         NUMERATOR  = LS_MATDAT_MARM-UMREZ
                                                         DENOMINATR = LS_MATDAT_MARM-UMREN
                                                         LENGTH     = LS_MATDAT_MARM-LAENG
                                                         WIDTH      = LS_MATDAT_MARM-BREIT
                                                         HEIGHT     = LS_MATDAT_MARM-HOEHE
                                                         UNIT_DIM   = LS_MATDAT_MARM-MEABM
                                                         GROSS_WT   = LS_MATDAT_MARM-BRGEW
                                                         UNIT_OF_WT = IR_BOB_MAT_TARGET->S_CLIENTDATA-UNIT_OF_WT ) ).
    endif.

  endmethod.
  method TRANS_MRP_AREA.

***--------------------------------------------------------------------------------------
*** Copy MRP Area Data from Source to Target (incl. adjustments)
    ES_TARGET_MDMA = corresponding #( base ( IS_SOURCE_MDMA ) IS_MATDAT_MDMA ).

***--------------------------------------------------------------------------------------
*** Adjust Material
    ES_TARGET_MDMA-MATNR = IF_MATNR.

*** Build X-Structure
    /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA    = ES_TARGET_MDMA
                                         changing  CS_X_STRUC = ES_TARGET_MDMA_X ).
    ES_TARGET_MDMA_X-MATNR = ES_TARGET_MDMA-MATNR.
    ES_TARGET_MDMA_X-BERID = ES_TARGET_MDMA-BERID.
    ES_TARGET_MDMA_X-WERKS = ES_TARGET_MDMA-WERKS.

  endmethod.
  method TRANS_PLANNINGDATA.

***--------------------------------------------------------------------------------------
*** Copy Planning Data from Source to Target (incl. adjustments)
    IR_BOB_MAT_TARGET->S_PLANNINGDATA = corresponding #( base ( IR_BOB_MAT_SOURCE->S_PLANNINGDATA ) IS_MATDAT_MPGD ).

  endmethod.
  method TRANS_PLANTDATA.

***--------------------------------------------------------------------------------------
*** Copy Plant Data from Source to Target (incl. adjustments)
    IR_BOB_MAT_TARGET->S_PLANTDATA     = corresponding #( base ( IR_BOB_MAT_SOURCE->S_PLANTDATA     ) IS_MATDAT_MARC ).
    IR_BOB_MAT_TARGET->S_VALUATIONDATA = corresponding #( base ( IR_BOB_MAT_SOURCE->S_VALUATIONDATA ) IS_MATDAT_MBEW ).

*** MARC Extensions
    break TBD.

*** MBEW Extensions
    break TBD.

***--------------------------------------------------------------------------------------
*** Reduce Price Unit (per xxx PC) to Costing Lot Size if needed
    if IR_BOB_MAT_TARGET->S_VALUATIONDATA-PRICE_UNIT gt IR_BOB_MAT_TARGET->S_PLANTDATA-LOT_SIZE.
      IR_BOB_MAT_TARGET->S_VALUATIONDATA-PRICE_UNIT = FLOOR( IR_BOB_MAT_TARGET->S_PLANTDATA-LOT_SIZE ).
    endif.

*** Igonre Previous Period Information for new Material
    clear: IR_BOB_MAT_TARGET->S_VALUATIONDATA-PR_CTRL_PP,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-MOV_PR_PP,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-STD_PR_PP,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-PR_UNIT_PP,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-VCLASS_PP.
*** Igonre Previous Year Information for new Material
    clear: IR_BOB_MAT_TARGET->S_VALUATIONDATA-PR_CTRL_PY,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-MOV_PR_PY,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-STD_PR_PY,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-VCLASS_PY,
           IR_BOB_MAT_TARGET->S_VALUATIONDATA-PR_UNIT_PY.

  endmethod.
  method TRANS_PRTDATA.

***--------------------------------------------------------------------------------------
*** Copy PRT Data from Source to Target (incl. adjustments)
    IR_BOB_MAT_TARGET->S_PRTDATA = corresponding #( base ( IR_BOB_MAT_SOURCE->S_PRTDATA ) IS_MATDAT_MFHM ).

*** MFHM Extensions
    break TBD.

  endmethod.
  method TRANS_SALESDATA.

***--------------------------------------------------------------------------------------
*** Copy Sales Data from Source to Target (incl. adjustments)
    IR_BOB_MAT_TARGET->S_SALESDATA = corresponding #( base ( IR_BOB_MAT_SOURCE->S_SALESDATA ) IS_MATDAT_MVKE ).

*** Copy Tax Classifications
    IR_BOB_MAT_TARGET->T_TAXCLASSIFICATIONS = IR_BOB_MAT_SOURCE->T_TAXCLASSIFICATIONS.

*** MVKE Extensions
    break TBD.

*** Sales Text
    break TBD.

  endmethod.
  method TRANS_STORAGELOCATIONDATA.

***--------------------------------------------------------------------------------------
*** Copy Storage Location Data from Source to Target (incl. adjustments)
    IR_BOB_MAT_TARGET->S_STORAGELOCATIONDATA = corresponding #( base ( IR_BOB_MAT_SOURCE->S_STORAGELOCATIONDATA ) IS_MATDAT_MARD ).

*** MARD Extensions
    break TBD.

  endmethod.
  method TRANS_STORAGETYPEDATA.

***--------------------------------------------------------------------------------------
*** Copy Storage Type Data from Source to Target (incl. adjustments)
    IR_BOB_MAT_TARGET->S_STORAGETYPEDATA = corresponding #( base ( IR_BOB_MAT_SOURCE->S_STORAGETYPEDATA ) IS_MATDAT_MLGT ).

  endmethod.
  method TRANS_WAREHOUSENUMBERDATA.

***--------------------------------------------------------------------------------------
*** Copy Warehouse Number Data from Source to Target (incl. adjustments)
    IR_BOB_MAT_TARGET->S_WAREHOUSENUMBERDATA = corresponding #( base ( IR_BOB_MAT_SOURCE->S_WAREHOUSENUMBERDATA ) IS_MATDAT_MLGN ).

  endmethod.
