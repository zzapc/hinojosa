
class ZCL_VCXI_FFSS_GRID_FASTD_PRINT definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  data F_SFDAT type ZVCXI_F0SS_SFDAT .
  data R_GATE_OUT type ref to /VCXI/CL_VKSR_GATE .
  data T_FASTD_INP type ZVCXI_FFSS_TT_FASTD_INP .
  data T_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_FFSS_S_FASTD_PRINT_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
      !IR_BL_FASTD type ref to ZCL_VCXI_FFSS_BL_FASTD
    raising
      /VCXI/CX_CKX .

  methods CHECK_CHANGED_DATA
    redefinition .
  methods REFRESH_GRID
    redefinition .
protected section.

  constants C_FIELDNAME_PRDOC type FIELDNAME value 'PRDOC' ##NO_TEXT.
  data R_BL_FASTD type ref to ZCL_VCXI_FFSS_BL_FASTD .
  data:
    T_TINK type table of ZVCXI_FFS_TINK with default key .

  methods CHANGE_STYLE_FASTD_PRINT
    importing
      !IS_FASTD_CSTEP type ZVCXI_FFSS_S_FASTD_CSTEP
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods IS_PRMUT_ALLOWED
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_REBUILD_REQUIRED
    importing
      !IT_GOOD_CELLS type LVC_T_MODI
    returning
      value(RF_REGENERATE) type ABAP_BOOL .
  methods REBUILD_FASTD
    raising
      /VCXI/CX_CKX .
  methods GET_FASTD_TINK_VIS
    importing
      !IS_FASTD_CSTEP type ZVCXI_FFSS_S_FASTD_CSTEP
      !IT_GATE_INK type /VCXI/VKSR_TT_GATE
      !IF_TINK type ZVCXI_FFS_TINK
    changing
      value(CS_DATA) type ANY
    raising
      /VCXI/CX_CKX .
  methods GET_FASTD_PRINT_VIS
    importing
      !IS_FASTD_CSTEP type ZVCXI_FFSS_S_FASTD_CSTEP
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods GET_CSTEP_PRINT
    returning
      value(RT_FASTD_CSTEP) type ZVCXI_FFSS_TT_FASTD_CSTEP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID .
  methods SET_FASTD_PRINT_VIS
    importing
      !IS_FASTD_CSTEP type ZVCXI_FFSS_S_FASTD_CSTEP
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_FASTD_TINK_VIS
    importing
      !IS_FASTD_CSTEP type ZVCXI_FFSS_S_FASTD_CSTEP
      !IT_GATE_INK type /VCXI/VKSR_TT_GATE
      !IF_TINK type ZVCXI_FFS_TINK
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_DOUBLE_CLICK
    redefinition .
  methods SET_EVENT
    redefinition .
private section.

  methods BUILD_DYN_TABLE
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_FFSS_GRID_FASTD_PRINT definition
class ZCL_VCXI_FFSS_GRID_FASTD_PRINT implementation.
  method BUILD_DYN_TABLE.

    data: LT_TINK_INFO type ZVCXI_FFSS_TT_TINK_INFO,
          LT_COMPONENT type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
    data: LR_TABLEDESCR type ref to CL_ABAP_TABLEDESCR,
          LR_TYPEDESCR  type ref to CL_ABAP_TYPEDESCR.


***--------------------------------------------------------------------------------------
*** Collect relevant Ink Types
    loop at ME->GET_CSTEP_PRINT( ) into data(LS_FASTD_CSTEP).
      data(LF_TPRIN) = cast ZCL_VCXI_FFSS_PR_CSTEP_PRINT( LS_FASTD_CSTEP-R_GATE->R_CLSPR )->GET_TPRIN( ).
      append lines of ZCL_VCXI_FFSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = LF_TPRIN ) to LT_TINK_INFO.
    endloop.
    sort LT_TINK_INFO by TINK POSID.
    delete adjacent duplicates from LT_TINK_INFO comparing TINK.
    sort LT_TINK_INFO by POSID.

***--------------------------------------------------------------------------------------
*** Get Fixed Columns
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = ME->F_TABNAME
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    check SY-SUBRC is initial.
    LT_COMPONENT = cast CL_ABAP_STRUCTDESCR( LR_TYPEDESCR )->GET_COMPONENTS( ).

***--------------------------------------------------------------------------------------
*** Get Fast Data relevant Ink Types
    CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = 'ZVCXI_FFSS_S_FASTD_TINK_VIS'
                                         receiving  P_DESCR_REF    = LR_TYPEDESCR
                                         exceptions TYPE_NOT_FOUND = 1              ).
    check SY-SUBRC is initial.
    free ME->T_TINK.
    loop at LT_TINK_INFO into data(LS_TINK_INFO) where FRLFD eq ABAP_TRUE.
      append value #( NAME       = LS_TINK_INFO-TINK
                      TYPE       = cast #( LR_TYPEDESCR )
                      AS_INCLUDE = ABAP_TRUE
                      SUFFIX     = LS_TINK_INFO-TINK ) to LT_COMPONENT.
      append LS_TINK_INFO-TINK to ME->T_TINK.
    endloop.

***--------------------------------------------------------------------------------------
*** Create data type for table
    try.
        LR_TABLEDESCR = CL_ABAP_TABLEDESCR=>CREATE( P_LINE_TYPE = CL_ABAP_STRUCTDESCR=>CREATE( P_COMPONENTS = LT_COMPONENT ) ).
      catch CX_SY_TYPE_CREATION into data(LR_CX_SY_TYPE_CREATION).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_TYPE_CREATION ).
    endtry.

    create data ME->R_DATA type handle LR_TABLEDESCR.

  endmethod.
  method CHANGE_STYLE_FASTD_PRINT.

    data: LF_RELEA type ABAP_BOOL.
    data: LS_FASTD_PRINT_VIS type ZVCXI_FFSS_S_FASTD_PRINT_VIS.
    field-symbols:  <S_FASTD_TINK_VIS>  type ZVCXI_FFSS_S_FASTD_TINK_VIS.


    free CT_STYL.

*** "Cast" generic structure to Vis Structure
    move-corresponding IS_DATA to LS_FASTD_PRINT_VIS.

*** Get Design Document Status
    check IS_FASTD_CSTEP-R_GATE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_CSTEP_PRINT.
    cast ZCL_VCXI_FFSS_PR_CSTEP_PRINT( IS_FASTD_CSTEP-R_GATE->R_CLSPR )->GET_DESDO( importing EF_RELEA = LF_RELEA ).

***----------------------------------------------------------------------------
*** If Design Document is released disable field
    if LF_RELEA is not initial.
***   Print Type = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TPRIN'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Print Category = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRCAT'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    else.
***   Print Type = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TPRIN'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
***   Print Category = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRCAT'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

***----------------------------------------------------------------------------
    if LS_FASTD_PRINT_VIS-FIBCS eq ABAP_UNDEFINED or
       ME->F_SFDAT ne ZCL_VCXI_FFSS_BL_FASTD=>C_SFDAT_STANDARD.
***   Set Inbound Conversion Step = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FIBCS'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    else.
***   Set Inbound Conversion Step = Enable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FIBCS'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

***----------------------------------------------------------------------------
*** Set Number of Different Designs = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NODDG'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

    case ZCL_VCXI_FFSS_CUST_PRINT=>GET_TPRIN_PRTEC( IF_TPRIN = LS_FASTD_PRINT_VIS-TPRIN ).
***   Traditional Printing
      when ZCL_VCXI_FFSS_CUST_PRINT=>C_PRTEC_ANALOG.
***     Set Number of Additional Color Changes = Enable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOACC'
                                    IF_STYLE     = ME->F_STYLE_ENABLED
                          changing  CT_STYL      = CT_STYL ).
***     Set Number of Additional Ink Tool Changes = Enable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOATC'
                                    IF_STYLE     = ME->F_STYLE_ENABLED
                          changing  CT_STYL      = CT_STYL ).

      when others.
***     Set Number of Additional Color Changes = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOACC'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Set Number of Additional Ink Tool Changes = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOATC'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
    endcase.

***----------------------------------------------------------------------------
*** Ink Type Based Settings
    data(LT_TINK_INFO) = ZCL_VCXI_FFSS_CUST_PRINT=>GET_TPRIN_TINK( IF_TPRIN = LS_FASTD_PRINT_VIS-TPRIN ).
    loop at ME->T_TINK into data(LF_TINK).
      assign component LF_TINK of structure IS_DATA to <S_FASTD_TINK_VIS>.
      check SY-SUBRC eq 0.

***   Disable all fields if not relevant to Print Type
      if not LINE_EXISTS( LT_TINK_INFO[ TINK = LF_TINK ] ).
***     Number of Colors = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOCOL' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Coverage = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Application Weight = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Application Volume = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL' && LF_TINK
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).

      else.
        data(LS_TINK_INFO) = LT_TINK_INFO[ TINK = LF_TINK ].
        if <S_FASTD_TINK_VIS>-NOCOL_HIDE eq ABAP_TRUE or
           ( LS_TINK_INFO-QTYMI ne 0 and
             LS_TINK_INFO-QTYMI eq LS_TINK_INFO-QTYMA ).
***       Number of Colors = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOCOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.

***     If Design Document is released disable field
        if LF_RELEA is not initial.
***       Set Number of Color = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOCOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Coverage = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Application Weight = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Application Volume = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.

***     No Colors defined
        if <S_FASTD_TINK_VIS>-NOCOL eq 0.
***       Coverage = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Application Weight = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
***       Application Volume = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.

        if <S_FASTD_TINK_VIS>-COVRG_VARY eq ABAP_TRUE.
***       Coverage = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COVRG' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.
        if <S_FASTD_TINK_VIS>-APWGT_VARY eq ABAP_TRUE.
***       Application Weight = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APWGT' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.
        if <S_FASTD_TINK_VIS>-APVOL_VARY eq ABAP_TRUE.
***       Application Volume = Disable
          ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'APVOL' && LF_TINK
                                      IF_STYLE     = ME->F_STYLE_DISABLED
                            changing  CT_STYL      = CT_STYL ).
        endif.
      endif.

    endloop.

  endmethod.
  method CHECK_CHANGED_DATA.

    SUPER->CHECK_CHANGED_DATA( ).

    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Store BL Instance
    move IR_BL_FASTD to ME->R_BL_FASTD.

  endmethod.
  method GET_CSTEP_PRINT.

    data: LT_GATE        type /VCXI/VKSR_TT_GATE,
          LT_FASTD_CSTEP type ZVCXI_FFSS_TT_FASTD_CSTEP.


***--------------------------------------------------------------------------------------
*** Get Printing Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_CSTEP_PRINT=>C_IPRVT_CSTEP_PRINT ).

*** Collect all Conversion Steps Gates
    loop at ME->T_FASTD_INP into data(LS_FASTD_INP).
      append lines of LS_FASTD_INP-T_FASTD_CSTEP to LT_FASTD_CSTEP.
    endloop.
    loop at ME->T_FASTD_LAMI into data(LS_FASTD_LAMI).
      append lines of LS_FASTD_LAMI-T_FASTD_CSTEP to LT_FASTD_CSTEP.
    endloop.

***--------------------------------------------------------------------------------------
*** Collect relevant Printing Conversion Steps
    loop at LT_FASTD_CSTEP into data(LS_FASTD_CSTEP).
      check LINE_EXISTS( LT_GATE[ TABLE_LINE = LS_FASTD_CSTEP-R_GATE ] ).
      append LS_FASTD_CSTEP to RT_FASTD_CSTEP.
    endloop.

  endmethod.
  method GET_FASTD_PRINT_VIS.

    data: LF_GUID  type /VCXI/CKX_GUID,
          LF_DOKAR type DOKAR,
          LF_DOKNR type DOKNR,
          LF_DOKTL type DOKTL_D,
          LF_DOKVR type DOKVR,
          LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_FASTD_PRINT_VIS type ZVCXI_FFSS_S_FASTD_PRINT_VIS.
    data: LR_PR_CSTEP_PRINT type ref to ZCL_VCXI_FFSS_PR_CSTEP_PRINT.

    try.
        move IS_FASTD_CSTEP-R_GATE->R_CLSPR ?to LR_PR_CSTEP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        return.
    endtry.
    check LR_PR_CSTEP_PRINT is bound.

*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_FASTD_PRINT_VIS.

***--------------------------------------------------------------------------------------
*** Inbound Conversion Step
    LS_FASTD_PRINT_VIS-FIBCS = IS_FASTD_CSTEP-FIBCS.

*** Print Type
    LS_FASTD_PRINT_VIS-TPRIN = LR_PR_CSTEP_PRINT->GET_TPRIN( ).

*** Print Category
    LS_FASTD_PRINT_VIS-PRCAT = LR_PR_CSTEP_PRINT->GET_PRCAT( ).

*** Number of Colors
    LS_FASTD_PRINT_VIS-NOCOL = LR_PR_CSTEP_PRINT->GET_NOCOL( ).

*** Additional Number of Color Changes
    LR_PR_CSTEP_PRINT->GET_NOACC( importing EF_NOACC = LS_FASTD_PRINT_VIS-NOACC ).

*** Additional Number of Ink Tool Changes
    LR_PR_CSTEP_PRINT->GET_NOATC( importing EF_NOATC = LS_FASTD_PRINT_VIS-NOATC ).

*** Number of different Designs
    LR_PR_CSTEP_PRINT->GET_NODDG( importing EF_NODDG = LS_FASTD_PRINT_VIS-NODDG ).

*** Set Traffic Light
    case IS_FASTD_CSTEP-R_GATE->GET_STATUS( ).
      when /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        move ICON_GREEN_LIGHT    to LS_FASTD_PRINT_VIS-FSICO.
      when /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y or
           /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        move ICON_RED_LIGHT      to LS_FASTD_PRINT_VIS-FSICO.
      when /VCXI/CL_VKSR_SERVICE=>C_ELMST_E.
        move ICON_FAILURE        to LS_FASTD_PRINT_VIS-FSICO.
    endcase.

*** Get Design Document
    LS_FASTD_PRINT_VIS-DESDO = LR_PR_CSTEP_PRINT->GET_DESDO( importing EF_LINK_ICON = LS_FASTD_PRINT_VIS-DESDO_LINK_ICON ).
    move LS_FASTD_PRINT_VIS-DESDO to LS_FASTD_PRINT_VIS-DESDO_ORG.

*** Get Formatted Design Document to be cosistent
    move LS_FASTD_PRINT_VIS-DESDO to LF_GUID.
    ZCL_VCXI_XCSS_BL_DOC=>DECRYPT_GUID( exporting IF_GUID  = LF_GUID
                                        importing EF_DOKAR = LF_DOKAR
                                                  EF_DOKNR = LF_DOKNR
                                                  EF_DOKTL = LF_DOKTL
                                                  EF_DOKVR = LF_DOKVR ).
    if LF_DOKNR is not initial and
       LF_DOKTL is not initial and
       LF_DOKVR is not initial.
      clear LF_DESCR.
      concatenate LF_DOKNR LF_DOKTL LF_DOKVR into LF_DESCR separated by '/'.
      concatenate LF_DOKAR '-' LF_DESCR into LS_FASTD_PRINT_VIS-DESDO separated by SPACE.
    else.
      clear LS_FASTD_PRINT_VIS-DESDO.
    endif.

*** Document Manager Icon
    move ICON_DOCUMENT_REVISION to LS_FASTD_PRINT_VIS-DMICO.

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    CS_DATA = corresponding #( base ( CS_DATA ) LS_FASTD_PRINT_VIS ).

  endmethod.
  method GET_FASTD_TINK_VIS.

    data: LS_COVRG type ZVCXI_FFS_S_COVRG,
          LS_APWGT type ZVCXI_FFS_S_APWGT,
          LS_APVOL type ZVCXI_FFS_S_APVOL.
    field-symbols: <S_FASTD_TINK_VIS> type ZVCXI_FFSS_S_FASTD_TINK_VIS.


*** Assign Ink Type Information
    assign component IF_TINK of structure CS_DATA to <S_FASTD_TINK_VIS>.
    check SY-SUBRC eq 0.

*** Run through each Gate
    loop at IT_GATE_INK into data(LR_GATE)
                       where TABLE_LINE->F_FREED ne ABAP_TRUE.
      case type of LR_GATE->R_CLSPR.
***--------------------------------------------------------------------------------------
***     Collect Analog/Traditional Inks Information
        when type ZCL_VCXI_FFSS_PR_MS_INK into data(LR_PR_MS_INK).

***       Check Ink Type
          check LR_PR_MS_INK->GET_TINK( ) eq IF_TINK.

***       Count Inks
          <S_FASTD_TINK_VIS>-NOCOL += 1.

***       Get Coverage
          LS_COVRG = LR_PR_MS_INK->GET_COVRG( ).
          if <S_FASTD_TINK_VIS>-S_COVRG is initial and
             <S_FASTD_TINK_VIS>-COVRG_VARY eq ABAP_FALSE.
            <S_FASTD_TINK_VIS>-S_COVRG = LS_COVRG.
          else.
***         Check for common Coverage
            if LS_COVRG ne <S_FASTD_TINK_VIS>-S_COVRG.
              clear <S_FASTD_TINK_VIS>-S_COVRG.
              <S_FASTD_TINK_VIS>-COVRG_VARY = ABAP_TRUE.
            endif.
          endif.

***       Get Application Weight
          LS_APWGT = LR_PR_MS_INK->GET_APWGT( ).
          if <S_FASTD_TINK_VIS>-S_APWGT is initial and
             <S_FASTD_TINK_VIS>-APWGT_VARY eq ABAP_FALSE.
            <S_FASTD_TINK_VIS>-S_APWGT = LS_APWGT.
          else.
***         Check for common Application Weight
            if LS_APWGT ne <S_FASTD_TINK_VIS>-S_APWGT.
              clear <S_FASTD_TINK_VIS>-S_APWGT.
              <S_FASTD_TINK_VIS>-APWGT_VARY = ABAP_TRUE.
            endif.
          endif.

          if LR_PR_MS_INK->GET_ANITN( ) is not initial.
            <S_FASTD_TINK_VIS>-APWGT_VARY = ABAP_TRUE.
          endif.

***--------------------------------------------------------------------------------------
***     Collect Digital Inks Information
        when type ZCL_VCXI_FFSS_PR_MS_DINK into data(LR_PR_MS_DINK).

***       Check Ink Type
          check LR_PR_MS_DINK->GET_TINK( ) eq IF_TINK.

***       Count Inks but hide Number of Colors
          <S_FASTD_TINK_VIS>-NOCOL += 1.
          <S_FASTD_TINK_VIS>-NOCOL_HIDE = ABAP_TRUE.

***       Get Coverage
          LS_COVRG = LR_PR_MS_DINK->GET_COVRG( ).
          if <S_FASTD_TINK_VIS>-S_COVRG is initial and
             <S_FASTD_TINK_VIS>-COVRG_VARY eq ABAP_FALSE.
            <S_FASTD_TINK_VIS>-S_COVRG = LS_COVRG.
          else.
***         Check for common Coverage
            if LS_COVRG ne <S_FASTD_TINK_VIS>-S_COVRG.
              clear <S_FASTD_TINK_VIS>-S_COVRG.
              <S_FASTD_TINK_VIS>-COVRG_VARY = ABAP_TRUE.
            endif.
          endif.

***       Get Application Weight
          LS_APWGT = LR_PR_MS_DINK->GET_APWGT( ).
          if <S_FASTD_TINK_VIS>-S_APWGT is initial and
             <S_FASTD_TINK_VIS>-APWGT_VARY eq ABAP_FALSE.
            <S_FASTD_TINK_VIS>-S_APWGT = LS_APWGT.
          else.
***         Check for common Application Weight
            if LS_APWGT ne <S_FASTD_TINK_VIS>-S_APWGT.
              clear <S_FASTD_TINK_VIS>-S_APWGT.
              <S_FASTD_TINK_VIS>-APWGT_VARY = ABAP_TRUE.
            endif.
          endif.

***       Get Application Volume
          LS_APVOL = LR_PR_MS_DINK->GET_APVOL( ).
          if <S_FASTD_TINK_VIS>-S_APVOL is initial and
             <S_FASTD_TINK_VIS>-APVOL_VARY eq ABAP_FALSE.
            <S_FASTD_TINK_VIS>-S_APVOL = LS_APVOL.
          else.
***         Check for common Application Volume
            if LS_APVOL ne <S_FASTD_TINK_VIS>-S_APVOL.
              clear <S_FASTD_TINK_VIS>-S_APVOL.
              <S_FASTD_TINK_VIS>-APVOL_VARY = ABAP_TRUE.
            endif.
          endif.

***       Hide based on Application Dimension (Weight/Volumn)
          case LR_PR_MS_DINK->GET_APDIM( ).
            when 'VOLUME'.
              <S_FASTD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
            when 'MASS'.
              <S_FASTD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
            when others.
              <S_FASTD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
              <S_FASTD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
          endcase.
      endcase.
    endloop.

*** Update Long Units
    <S_FASTD_TINK_VIS>-APWGT_UOMC6 = <S_FASTD_TINK_VIS>-APWGT_UOM.
    <S_FASTD_TINK_VIS>-APVOL_UOMC6 = <S_FASTD_TINK_VIS>-APVOL_UOM.

*** Hide even if no Ink has been created
    case ZCL_VCXI_PXSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = IF_TINK ).
      when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
        <S_FASTD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
        <S_FASTD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
      when ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_DIGITAL.
        <S_FASTD_TINK_VIS>-NOCOL_HIDE = ABAP_TRUE.
      when others.
        <S_FASTD_TINK_VIS>-APWGT_HIDE = ABAP_TRUE.
        <S_FASTD_TINK_VIS>-APVOL_HIDE = ABAP_TRUE.
    endcase.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED     type /VCXI/CKX_LOCKED,
          LF_INUSE      type /VCXI/VKSR_INUSE,
          LF_TINK       type ZVCXI_FFS_TINK,
          LF_DESCR      type /VCXI/CKX_DESCR,
          LF_COLPOS     type I.
    data: LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR.
    field-symbols: <T_DATA>  type standard table,
                   <S_DATA>  type ANY,
                   <S_FCAT>  type LVC_S_FCAT,
                   <F_FIELD> type ANY.


*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

*** Get Standard Fieldcat
    data(LT_FCAT) = SUPER->GET_FIELDCAT( ).

*** Is Print Mutation allowed
    data(LF_PRMUT) = ME->IS_PRMUT_ALLOWED( ).


***----------------------------------------------------------------------------
*** Dynamic Field Catalog
    check ME->R_DATA is bound.
    LR_STRUCTDESCR ?= cast CL_ABAP_TABLEDESCR( CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_DATA ) )->GET_TABLE_LINE_TYPE( ).

    loop at LR_STRUCTDESCR->GET_INCLUDED_VIEW( ) into data(LS_INCLUDED_VIEW).
      try.
          data(LS_DFIES) = cast CL_ABAP_ELEMDESCR( LS_INCLUDED_VIEW-TYPE )->GET_DDIC_FIELD( ).

          append corresponding #( LS_DFIES ) to RT_FCAT assigning <S_FCAT>.
          <S_FCAT>-FIELDNAME = LS_INCLUDED_VIEW-NAME.
          if LINE_EXISTS( LT_FCAT[ FIELDNAME = LS_INCLUDED_VIEW-NAME ] ).
            <S_FCAT>-REF_TABLE = ME->F_TABNAME.
          endif.
          <S_FCAT>-COL_POS = SY-TABIX.

          case <S_FCAT>-DATATYPE.
***         Set Quantity Unit Reference
            when 'QUAN'.
              <S_FCAT>-QFIELDNAME = LS_DFIES-REFFIELD.
***         Set Currency Key Reference
            when 'CURR'.
              <S_FCAT>-CFIELDNAME = LS_DFIES-REFFIELD.

***         Mark Technical Columns
            when 'TTYP' or 'REF'.
              <S_FCAT>-TECH = ABAP_TRUE.
          endcase.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.


***----------------------------------------------------------------------------
***   Adjust Field Catalog
      case <S_FCAT>-FIELDNAME.
        when 'R_GATE_CSTEP_PRINT' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

        when 'FSICO'.
          move ABAP_TRUE       to <S_FCAT>-ICON.
          move ABAP_TRUE       to <S_FCAT>-FIX_COLUMN.
          move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
          move 'Status'(C01)   to <S_FCAT>-REPTEXT.
          move 'Status'(C01)   to <S_FCAT>-SCRTEXT_L.
          move 'Status'(C01)   to <S_FCAT>-SCRTEXT_M.
          move 'Status'(C01)   to <S_FCAT>-SCRTEXT_S.

        when 'FIBCS'.
          move ABAP_TRUE to <S_FCAT>-CHECKBOX.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE and
             ME->F_SFDAT eq ZCL_VCXI_FFSS_BL_FASTD=>C_SFDAT_STANDARD.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'TPRIN'.
          <S_FCAT>-F4AVAILABL = ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.

        when 'PRCAT'.
          <S_FCAT>-F4AVAILABL = ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.

        when 'DESDO_LINK_ICON'.
          <S_FCAT>-ICON       = ABAP_TRUE.
          <S_FCAT>-FIX_COLUMN = ABAP_TRUE.
          <S_FCAT>-REPTEXT    = text-C01.

        when 'DESDO_ORG'.
          move ABAP_TRUE       to <S_FCAT>-TECH.

        when 'DMICO'.
          <S_FCAT>-ICON       = ABAP_TRUE.
          <S_FCAT>-FIX_COLUMN = ABAP_TRUE.
          <S_FCAT>-HOTSPOT    = ABAP_TRUE.

        when 'NOACC' or 'NOATC' or 'NODDG'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.
          if LF_PRMUT ne ABAP_TRUE.
            <S_FCAT>-NO_OUT = ABAP_TRUE.
          endif.
      endcase.

***----------------------------------------------------------------------------
***   Number of Colors per Ink Type
      if <S_FCAT>-FIELDNAME ne 'NOCOL'  and
         <S_FCAT>-FIELDNAME cp 'NOCOL*' and
         <S_FCAT>-FIELDNAME ns 'NOCOL_HIDE'.
        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_FFSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate 'Number of'(C02) LF_DESCR into <S_FCAT>-SCRTEXT_L separated by SPACE.
        concatenate 'Number of'(C02) LF_DESCR into <S_FCAT>-SCRTEXT_M separated by SPACE.
        concatenate '#' LF_TINK               into <S_FCAT>-SCRTEXT_S separated by SPACE.
        concatenate '#' LF_TINK               into <S_FCAT>-REPTEXT   separated by SPACE.

***     Dynamic Hide of Number #Colors
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'NOCOL_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE  to <S_FCAT>-EDIT.
        endif.
      endif.

***   Coverage per Ink Type
      if <S_FCAT>-FIELDNAME ne 'COVRG'      and
         <S_FCAT>-FIELDNAME cp 'COVRG*'     and
         <S_FCAT>-FIELDNAME ns 'COVRG_UOM'  and
         <S_FCAT>-FIELDNAME ns 'COVRG_VARY' and
         <S_FCAT>-FIELDNAME ns 'COVRG_HIDE'.

        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_FFSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-TOOLTIP   separated by SPACE.
        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-SCRTEXT_L separated by SPACE.
        concatenate <S_FCAT>-SCRTEXT_M LF_DESCR into <S_FCAT>-SCRTEXT_M separated by SPACE.
        concatenate '%' LF_TINK                 into <S_FCAT>-SCRTEXT_S separated by SPACE.
        concatenate '%' LF_TINK                 into <S_FCAT>-REPTEXT   separated by SPACE.

***     Dynamic Hide of Coverage
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'COVRG_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          <S_FCAT>-EDIT = ABAP_TRUE.
        endif.
      endif.

***   Coverage Unit per Ink Type
      if <S_FCAT>-FIELDNAME cs 'COVRG_UOM'.
        LF_TINK = <S_FCAT>-FIELDNAME+9.
***     Dynamic Hide of Coverage Unit
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'COVRG_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.
      endif.

***   Application Weight per Ink Type
      if <S_FCAT>-FIELDNAME ne 'APWGT'      and
         <S_FCAT>-FIELDNAME cp 'APWGT*'     and
         <S_FCAT>-FIELDNAME ns 'APWGT_UOM'  and
         <S_FCAT>-FIELDNAME ns 'APWGT_VARY' and
         <S_FCAT>-FIELDNAME ns 'APWGT_HIDE'.

        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_FFSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-TOOLTIP   separated by SPACE.

***     Dynamic Hide of Application Weight
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APWGT_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          <S_FCAT>-EDIT = ABAP_TRUE.
        endif.
      endif.

***   Application Weight Unit per Ink Type
      if <S_FCAT>-FIELDNAME cs 'APWGT_UOMC6'.
        LF_TINK = <S_FCAT>-FIELDNAME+11.
***     Dynamic Hide of Application Weight Unit
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APWGT_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.
      endif.

***   Application Volume per Ink Type
      if <S_FCAT>-FIELDNAME ne 'APVOL'      and
         <S_FCAT>-FIELDNAME cp 'APVOL*'     and
         <S_FCAT>-FIELDNAME ns 'APVOL_UOM'  and
         <S_FCAT>-FIELDNAME ns 'APVOL_VARY' and
         <S_FCAT>-FIELDNAME ns 'APVOL_HIDE'.

        LF_TINK = <S_FCAT>-FIELDNAME+5.
        LF_DESCR = ZCL_VCXI_FFSS_CUST_PRINT=>GET_TINK_DESCR( IF_TINK = LF_TINK ).

        concatenate <S_FCAT>-SCRTEXT_L LF_DESCR into <S_FCAT>-TOOLTIP   separated by SPACE.

***     Dynamic Hide of Application Volume
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APVOL_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.

        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          <S_FCAT>-EDIT = ABAP_TRUE.
        endif.
      endif.

***   Application Volume Unit per Ink Type
      if <S_FCAT>-FIELDNAME cs 'APVOL_UOMC6'.
        LF_TINK = <S_FCAT>-FIELDNAME+11.
***     Dynamic Hide of Application Volume Unit
        <S_FCAT>-NO_OUT = ABAP_TRUE.
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'APVOL_HIDE' && LF_TINK of structure <S_DATA> to <F_FIELD>.
          if <F_FIELD> eq ABAP_FALSE.
            <S_FCAT>-NO_OUT = ABAP_FALSE.
          endif.
        endloop.
      endif.

***   Hide Ink Info Field
      if <S_FCAT>-FIELDNAME cs 'NOCOL_HIDE' or
         <S_FCAT>-FIELDNAME cs 'COVRG_VARY' or
         <S_FCAT>-FIELDNAME cs 'COVRG_HIDE' or
         <S_FCAT>-FIELDNAME cs 'APWGT_VARY' or
         <S_FCAT>-FIELDNAME cs 'APWGT_HIDE' or
         <S_FCAT>-FIELDNAME cs 'APVOL_VARY' or
         <S_FCAT>-FIELDNAME cs 'APVOL_HIDE'.
        move ABAP_TRUE  to <S_FCAT>-NO_OUT.
      endif.
***   Hide short Unit
      if ( <S_FCAT>-FIELDNAME cs 'APWGT_UOM' and
           <S_FCAT>-FIELDNAME ns 'APWGT_UOMC6' ) or
         ( <S_FCAT>-FIELDNAME cs 'APVOL_UOM' and
           <S_FCAT>-FIELDNAME ns 'APVOL_UOMC6' ).
        move ABAP_TRUE  to <S_FCAT>-NO_OUT.
      endif.

***----------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FSICO'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
       add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FIBCS'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TPRIN'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TPRIN_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PRCAT'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'NOCOL'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.

***   Dynamic Columns are sorted and added at the end - so we don't need to move them

***----------------------------------------------------------------------------
***   Fix Columns after Dynamic
      move 1000 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DESDO'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DESDO_LINK_ICON'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DESDO_ORG'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'DMICO'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'NODDG'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'NOACC'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'NOATC'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.

    endloop.

    sort RT_FCAT by COL_POS.

  endmethod.
  method GET_GRID_DATA.

    data: LS_LAYOUT   type LVC_S_LAYO.
    data: LT_GATE_INK type /VCXI/VKSR_TT_GATE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY,
                   <T_STYL> type LVC_T_STYL.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Layout
    LS_LAYOUT = ME->GET_LAYOUT( ).

***--------------------------------------------------------------------------------------
    loop at ME->GET_CSTEP_PRINT( ) into data(LS_FASTD_CSTEP).
***   Add Line with Gate Key Data
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding value ZVCXI_FFSS_S_FASTD_PRINT_GRID( R_GATE = LS_FASTD_CSTEP-R_GATE
                                                            ) to <S_DATA>.
***   Get Visualization Structure
      ME->GET_FASTD_PRINT_VIS( exporting IS_FASTD_CSTEP = LS_FASTD_CSTEP
                               changing  CS_DATA        = <S_DATA> ).

***   Get Gates of Provider
      clear LT_GATE_INK.
      append lines of LS_FASTD_CSTEP-R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_DINK=>C_IPRVT_MS_DINK
                                                        IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
      append lines of LS_FASTD_CSTEP-R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_INK=>C_IPRVT_MS_INK
                                                        IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_INK ).

***   Dynamic Information per Ink Type
      loop at ME->T_TINK into data(LF_TINK).
        ME->GET_FASTD_TINK_VIS( exporting IS_FASTD_CSTEP = LS_FASTD_CSTEP
                                          IT_GATE_INK    = LT_GATE_INK
                                          IF_TINK        = LF_TINK
                                changing  CS_DATA        = <S_DATA>  ).
      endloop.

***   Change Style
      if LS_LAYOUT-STYLEFNAME is not initial.
        assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
        if SY-SUBRC eq 0.
          ME->CHANGE_STYLE_FASTD_PRINT( exporting IS_FASTD_CSTEP = LS_FASTD_CSTEP
                                                  IS_DATA        = <S_DATA>
                                        changing  CT_STYL        = <T_STYL> ).
***       Call DVC Service - Modify Style
          ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LS_FASTD_CSTEP-R_GATE
                                               changing  CT_STYL = <T_STYL> ).
        endif.
      endif.
    endloop.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_FASTD_PRINT_GRID type ZVCXI_FFSS_S_FASTD_PRINT_GRID.
    data: LT_GATE_INK type /VCXI/VKSR_TT_GATE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY.


    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
***     Simple Update
        loop at <T_DATA> assigning <S_DATA>.
          LS_FASTD_PRINT_GRID = corresponding #( <S_DATA> ).

          check LS_FASTD_PRINT_GRID-R_GATE is bound and
                LS_FASTD_PRINT_GRID-R_GATE->F_FREED is initial.

***       Set Print Structure
          ME->SET_FASTD_PRINT_VIS( IS_FASTD_CSTEP = value #( R_GATE = LS_FASTD_PRINT_GRID-R_GATE )
                                   IS_DATA        = <S_DATA> ).

***       Get Gates of Provider
          clear LT_GATE_INK.
          append lines of LS_FASTD_PRINT_GRID-R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_DINK=>C_IPRVT_MS_DINK
                                                                 IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
          append lines of LS_FASTD_PRINT_GRID-R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FFSS_PR_MS_INK=>C_IPRVT_MS_INK
                                                                 IF_INUSE  = ABAP_TRUE ) to LT_GATE_INK.
          ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_INK ).

***       Set Dynamic Information per Ink Type
          loop at ME->T_TINK into data(LF_TINK).
            ME->SET_FASTD_TINK_VIS( IS_FASTD_CSTEP = value #( R_GATE = LS_FASTD_PRINT_GRID-R_GATE )
                                    IT_GATE_INK    = LT_GATE_INK
                                    IF_TINK        = LF_TINK
                                    IS_DATA        = <S_DATA> ).
          endloop.
        endloop.

***--------------------------------------------------------------------------------------
***     Build new Structure
        if ME->IS_REBUILD_REQUIRED( IT_GOOD_CELLS = ET_GOOD_CELLS ).
          ME->REBUILD_FASTD( ).
        endif.

***--------------------------------------------------------------------------------------
***     Process the events
        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_DOUBLE_CLICK.

    data: LS_FASTD_PRINT_GRID type ZVCXI_FFSS_S_FASTD_PRINT_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY.

    try.
        SUPER->HANDLE_DOUBLE_CLICK( ).

        check ME->F_APPL_EVENTS eq ABAP_TRUE.

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        check LINE_EXISTS( <T_DATA>[ E_ROW-INDEX ] ).
        LS_FASTD_PRINT_GRID = corresponding #( <T_DATA>[ E_ROW-INDEX ] ).

***     Check Gate is bound and Provider has an own UI
        check LS_FASTD_PRINT_GRID-R_GATE is bound and
              LS_FASTD_PRINT_GRID-R_GATE->F_FREED is initial and
              LS_FASTD_PRINT_GRID-R_GATE->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LS_FASTD_PRINT_GRID-R_GATE ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LS_FASTD_PRINT_GRID-R_GATE->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LS_FASTD_PRINT_GRID-R_GATE->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_HOTSPOT_CLICK.

    data: LS_FASTD_PRINT_GRID type        ZVCXI_FFSS_S_FASTD_PRINT_GRID,
          LS_PRVDR_DEF        type        /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_MSG              type        /VCXI/CKXM_TT_MSG,
          LT_PRVDR_DEF        type        /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE             type        /VCXI/VKSR_TT_GATE,
          LT_PRVDR            type        /VCXI/VKSR_TT_GATE.
    data: LR_MESSAGE          type ref to /VCXI/CL_CKXM_MESSAGE,
          LR_CX_CKX           type ref to /VCXI/CX_CKX.
    field-symbols: <T_DATA> type standard table,
                   <R_GATE> type ref to /VCXI/CL_VKSR_GATE,
                   <S_DATA> type ANY.

    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***     Read selected entry
        read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
        check SY-SUBRC is initial.

        move-corresponding <S_DATA> to LS_FASTD_PRINT_GRID.
        if LS_FASTD_PRINT_GRID-R_GATE is bound.

          case E_COLUMN_ID-FIELDNAME.
            when 'FSICO'.
***           Get messages of Gate
              LR_MESSAGE = LS_FASTD_PRINT_GRID-R_GATE->GET_STATUS_MSG( ).
              append lines of LR_MESSAGE->T_MSG to LT_MSG.

***           Get children
              LT_PRVDR_DEF = LS_FASTD_PRINT_GRID-R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
              loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
                LT_GATE = LS_FASTD_PRINT_GRID-R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT ).
                append lines of LT_GATE to LT_PRVDR.
              endloop.

***           Remove duplicates
              sort LT_PRVDR.
              delete adjacent duplicates from LT_PRVDR.

***           Get messages of children
              loop at LT_PRVDR assigning <R_GATE>.
                LR_MESSAGE = <R_GATE>->GET_STATUS_MSG( ).
                append lines of LR_MESSAGE->T_MSG to LT_MSG.
              endloop.

***           Display Messages
              check LR_MESSAGE is bound.
              LR_MESSAGE->T_MSG = LT_MSG.
              LR_MESSAGE->DISPLAY_MSG( IF_SHOW_INITIAL = ABAP_TRUE ).

            when 'DMICO'.
              ZCL_VCXI_XCSS_POPUP_DOC_MGR=>START( exporting IF_LOCKED      = ME->R_GATE->IS_LOCKED( )
                                                            IR_GATE        = LS_FASTD_PRINT_GRID-R_GATE
                                                            IR_UIGATE      = ME->R_UIGATE
                                                            IF_APPL_EVENTS = ME->F_APPL_EVENTS ).
              ME->CHECK_CHANGED_DATA( ).
          endcase.
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method IS_PRMUT_ALLOWED.

    data: LS_FASTD_PRINT_GRID type          ZVCXI_FFSS_S_FASTD_PRINT_GRID,
          LS_STYL             type          LVC_S_STYL.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

    loop at <T_DATA> assigning <S_DATA>.
      move-corresponding <S_DATA> to LS_FASTD_PRINT_GRID.

***   Check for values
      if LS_FASTD_PRINT_GRID-NOACC is not initial or
         LS_FASTD_PRINT_GRID-NOATC is not initial.
        move ABAP_TRUE to RF_ALLOWED.
        exit.
      endif.

***   Check Style
      loop at LS_FASTD_PRINT_GRID-T_STYL into LS_STYL
                                        where FIELDNAME eq 'NOACC'
                                         or   FIELDNAME eq 'NOATC'
                                         or   FIELDNAME eq 'NODDG'.
        if LS_STYL-STYLE eq ME->F_STYLE_ENABLED.
          move ABAP_TRUE to RF_ALLOWED.
          exit.
        endif.
      endloop.
      if RF_ALLOWED eq ABAP_TRUE.
        exit.
      endif.

    endloop.

  endmethod.
  method IS_REBUILD_REQUIRED.

    if LINE_EXISTS( IT_GOOD_CELLS[ FIELDNAME = 'FIBCS' ] ).
      RF_REGENERATE = ABAP_TRUE.
    endif.

  endmethod.
  method REBUILD_FASTD.

    data: LF_NOOUT       type ZVCXI_XCS_NOOUT,
          LF_SETBY_NOOUT type /VCXI/VKSR_SETBY,
          LF_SETBY_TRWID type /VCXI/VKSR_SETBY.
    data: LS_FASTD_PRINT_GRID type ZVCXI_FFSS_S_FASTD_PRINT_GRID,
          LS_TRWID            type ZVCXI_F0S_S_TRWID.
    data: LT_FASTD_INP   type ZVCXI_FFSS_TT_FASTD_INP,
          LT_FASTD_LAMI  type ZVCXI_FFSS_TT_FASTD_LAMI,
          LT_SPVRE_FCOMP type /VCXI/VKSR_TT_SPVRE.
    field-symbols: <T_DATA>        type standard table,
                   <S_DATA>        type ANY,
                   <S_FASTD_INP>   type ZVCXI_FFSS_S_FASTD_INP,
                   <S_FASTD_LAMI>  type ZVCXI_FFSS_S_FASTD_LAMI,
                   <F_FASTD_CSTEP> type ZVCXI_FFSS_S_FASTD_CSTEP.


    check ME->R_GATE_OUT is bound.

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get current Structure
    ME->R_BL_FASTD->GET_FASTD_BY_OUT( exporting IR_GATE_OUT    = ME->R_GATE_OUT
                                      importing ET_FASTD_INP   = LT_FASTD_INP
                                                ET_FASTD_LAMI  = LT_FASTD_LAMI
                                                ET_SPVRE_FCOMP = LT_SPVRE_FCOMP
                                                EF_NOOUT       = LF_NOOUT
                                                EF_SETBY_NOOUT = LF_SETBY_NOOUT
                                                ES_TRWID       = LS_TRWID
                                                EF_SETBY_TRWID = LF_SETBY_TRWID ).

***--------------------------------------------------------------------------------------
*** Change of Inbound Flag
    loop at <T_DATA> assigning <S_DATA>.
      move-corresponding <S_DATA> to LS_FASTD_PRINT_GRID.

***   Look for it in Input
      loop at LT_FASTD_INP assigning <S_FASTD_INP>.
        read table <S_FASTD_INP>-T_FASTD_CSTEP assigning <F_FASTD_CSTEP>
                                              with key R_GATE = LS_FASTD_PRINT_GRID-R_GATE.
        if SY-SUBRC eq 0.
          <F_FASTD_CSTEP>-FIBCS = LS_FASTD_PRINT_GRID-FIBCS.
        endif.
      endloop.

***   Look for it in Lamination
      loop at LT_FASTD_LAMI assigning <S_FASTD_LAMI>.
        read table <S_FASTD_LAMI>-T_FASTD_CSTEP assigning <F_FASTD_CSTEP>
                                              with key R_GATE = LS_FASTD_PRINT_GRID-R_GATE.
        if SY-SUBRC eq 0.
          <F_FASTD_CSTEP>-FIBCS = LS_FASTD_PRINT_GRID-FIBCS.
        endif.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Set the new Structure
    ME->R_BL_FASTD->SET_FASTD_BY_OUT( IR_GATE_OUT    = ME->R_GATE_OUT
                                      IF_NOOUT       = LF_NOOUT
                                      IF_SETBY_NOOUT = LF_SETBY_NOOUT
                                      IS_TRWID       = LS_TRWID
                                      IF_SETBY_TRWID = LF_SETBY_TRWID
                                      IT_FASTD_INP   = LT_FASTD_INP
                                      IT_FASTD_LAMI  = LT_FASTD_LAMI
                                      IT_SPVRE_FCOMP = LT_SPVRE_FCOMP ).

  endmethod.
  method REFRESH_GRID.

    check ME->F_FREED       ne ABAP_TRUE and
          ME->F_REFRESH_REQ eq ABAP_TRUE.

*** Create Data Reference
    ME->BUILD_DYN_TABLE( ).

    SUPER->REFRESH_GRID( ).

  endmethod.
  method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Register Event Handler
  set handler ME->HANDLE_HOTSPOT_CLICK  for ME->R_GRID.

  endmethod.
  method SET_FASTD_PRINT_VIS.

    data: LS_FASTD_PRINT_VIS_NEW type        ZVCXI_FFSS_S_FASTD_PRINT_VIS,
          LS_FASTD_PRINT_VIS_OLD type        ZVCXI_FFSS_S_FASTD_PRINT_VIS.
    data: LR_PR_CSTEP_PRINT      type ref to ZCL_VCXI_FFSS_PR_CSTEP_PRINT.

***--------------------------------------------------------------------------------------
*** Get old Values for Print
    ME->GET_FASTD_PRINT_VIS( exporting IS_FASTD_CSTEP = IS_FASTD_CSTEP
                             changing  CS_DATA        = LS_FASTD_PRINT_VIS_OLD ).

*** Get new Values
    move-corresponding IS_DATA to LS_FASTD_PRINT_VIS_NEW.

***--------------------------------------------------------------------------------------
*** Print Step
    try.
        move IS_FASTD_CSTEP-R_GATE->R_CLSPR ?to LR_PR_CSTEP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_CSTEP_PRINT.
    endtry.
    check LR_PR_CSTEP_PRINT is bound.

*** Print Type
    if LS_FASTD_PRINT_VIS_NEW-TPRIN ne LS_FASTD_PRINT_VIS_OLD-TPRIN.
      LR_PR_CSTEP_PRINT->SET_TPRIN( IF_TPRIN = LS_FASTD_PRINT_VIS_NEW-TPRIN
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Application Weight
    if LS_FASTD_PRINT_VIS_NEW-PRCAT ne LS_FASTD_PRINT_VIS_OLD-PRCAT.
      LR_PR_CSTEP_PRINT->SET_PRCAT( IF_PRCAT = LS_FASTD_PRINT_VIS_NEW-PRCAT
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Design Document
    if LS_FASTD_PRINT_VIS_NEW-DESDO ne LS_FASTD_PRINT_VIS_OLD-DESDO.
      LR_PR_CSTEP_PRINT->SET_DESDO( IF_DESDO = LS_FASTD_PRINT_VIS_NEW-DESDO
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Additional Number of Color Changes
    if LS_FASTD_PRINT_VIS_NEW-NOACC ne LS_FASTD_PRINT_VIS_OLD-NOACC.
      LR_PR_CSTEP_PRINT->SET_NOACC( IF_NOACC = LS_FASTD_PRINT_VIS_NEW-NOACC
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Additional Number of Ink Tool Changes
    if LS_FASTD_PRINT_VIS_NEW-NOATC ne LS_FASTD_PRINT_VIS_OLD-NOATC.
      LR_PR_CSTEP_PRINT->SET_NOATC( IF_NOATC = LS_FASTD_PRINT_VIS_NEW-NOATC
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Number of different Designs
    if LS_FASTD_PRINT_VIS_NEW-NODDG ne LS_FASTD_PRINT_VIS_OLD-NODDG.
      LR_PR_CSTEP_PRINT->SET_NODDG( IF_NODDG = LS_FASTD_PRINT_VIS_NEW-NODDG
                                    IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method SET_FASTD_TINK_VIS.

    data: LS_FASTD_TINK_VIS_OLD type ZVCXI_FFSS_S_FASTD_TINK_VIS.
    data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_PR_CSTEP_PRINT type ref to ZCL_VCXI_FFSS_PR_CSTEP_PRINT,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_INK      type ref to ZCL_VCXI_FFSS_PR_MS_INK,
          LR_PR_MS_DINK     type ref to ZCL_VCXI_FFSS_PR_MS_DINK.
    field-symbols: <S_FASTD_TINK_VIS_NEW> type ZVCXI_FFSS_S_FASTD_TINK_VIS.


*** Get old Values for Ink Type
    ME->GET_FASTD_TINK_VIS( exporting IS_FASTD_CSTEP = IS_FASTD_CSTEP
                                      IT_GATE_INK    = IT_GATE_INK
                                      IF_TINK        = IF_TINK
                            changing  CS_DATA        = LS_FASTD_TINK_VIS_OLD ).

*** Print Step
    try.
        move IS_FASTD_CSTEP-R_GATE->R_CLSPR ?to LR_PR_CSTEP_PRINT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_CSTEP_PRINT.
    endtry.
    check LR_PR_CSTEP_PRINT is bound.

*** Assign Ink Type Information
    assign component IF_TINK of structure IS_DATA to <S_FASTD_TINK_VIS_NEW>.
    check SY-SUBRC eq 0.

***--------------------------------------------------------------------------------------
*** Ensure Ink Type information has changed
    check <S_FASTD_TINK_VIS_NEW> ne LS_FASTD_TINK_VIS_OLD.

*** Number of Colors
    LT_GATE = LR_PR_CSTEP_PRINT->SET_NOCOL( IF_NOCOL = <S_FASTD_TINK_VIS_NEW>-NOCOL
                                            IF_TINK  = IF_TINK ).

***--------------------------------------------------------------------------------------
*** Coverage
    if <S_FASTD_TINK_VIS_NEW>-COVRG_VARY ne ABAP_TRUE and
       <S_FASTD_TINK_VIS_NEW>-S_COVRG ne LS_FASTD_TINK_VIS_OLD-S_COVRG.
      loop at LT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_FFSS_PR_MS_INK into LR_PR_MS_INK.
            LR_PR_MS_INK->SET_COVRG( IS_COVRG = <S_FASTD_TINK_VIS_NEW>-S_COVRG
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
          when type ZCL_VCXI_FFSS_PR_MS_DINK into LR_PR_MS_DINK.
            LR_PR_MS_DINK->SET_COVRG( IS_COVRG = <S_FASTD_TINK_VIS_NEW>-S_COVRG
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        endcase.
      endloop.
    endif.

*** Application Weight
    if <S_FASTD_TINK_VIS_NEW>-APWGT_VARY ne ABAP_TRUE and
       <S_FASTD_TINK_VIS_NEW>-S_APWGT ne LS_FASTD_TINK_VIS_OLD-S_APWGT.
      loop at LT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_FFSS_PR_MS_INK into LR_PR_MS_INK.
            LR_PR_MS_INK->SET_APWGT( IS_APWGT = <S_FASTD_TINK_VIS_NEW>-S_APWGT
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
          when type ZCL_VCXI_FFSS_PR_MS_DINK into LR_PR_MS_DINK.
            LR_PR_MS_DINK->SET_APWGT( IS_APWGT = <S_FASTD_TINK_VIS_NEW>-S_APWGT
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        endcase.
      endloop.
    endif.

*** Application Volume
    if <S_FASTD_TINK_VIS_NEW>-APVOL_VARY ne ABAP_TRUE and
       <S_FASTD_TINK_VIS_NEW>-S_APVOL ne LS_FASTD_TINK_VIS_OLD-S_APVOL.
      loop at LT_GATE into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_FFSS_PR_MS_DINK into LR_PR_MS_DINK.
            LR_PR_MS_DINK->SET_APVOL( IS_APVOL = <S_FASTD_TINK_VIS_NEW>-S_APVOL
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        endcase.
      endloop.
    endif.

  endmethod.
