
class ZCL_VCXI_FFSS_BL_FIFPROP definition
  public
  create protected .

public section.

  data F_FISTY type ZVCXI_FFS_FISTY read-only .
  data F_NOLAY_F type ZVCXI_F0S_NOLAY read-only .
  data F_TFOLD type ZVCXI_FFS_TFOLD read-only .
  data S_GULEF type ZVCXI_F0S_S_GULEF read-only .
  data S_GURIG type ZVCXI_F0S_S_GURIG read-only .
  data T_FIRNG type ZVCXI_FFSS_TT_FIRNG read-only .

  methods GET_LOTMI
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
    returning
      value(RS_LOTMI) type ZVCXI_F0S_S_LOTMI
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods FACTORY
    importing
      !IF_FIFPX type ZVCXI_FFS_FIFPX optional
    returning
      value(RR_BL_FIFPROP) type ref to ZCL_VCXI_FFSS_BL_FIFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_FIFPX
    returning
      value(RF_FIFPX) type ZVCXI_FFS_FIFPX
    raising
      /VCXI/CX_CKX .
  class-methods GET_FISTY_DESCR
    importing
      !IF_FISTY type ZVCXI_FFS_FISTY
    exporting
      !EF_FISTY_DESCR type /VCXI/CKX_DESCR .
  methods GET_NOOMI_NOOMA
    exporting
      !EF_NOOMI type ZVCXI_FFS_NOOMI
      !EF_NOOMA type ZVCXI_FFS_NOOMA .
  class-methods GET_TFOLD_DESCR
    importing
      !IF_TFOLD type ZVCXI_FFS_TFOLD
    exporting
      !EF_TFOLD_DESCR type /VCXI/CKX_DESCR .
  methods GET_WISWG
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IS_WIWID type ZVCXI_FFS_S_WIWID
    returning
      value(RS_WISWG) type ZVCXI_FFS_S_WISWG
    raising
      /VCXI/CX_CKX .
  methods GET_WITHI
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IS_FITIN type ZVCXI_FFS_S_FITIN
    returning
      value(RS_WITHI) type ZVCXI_FFS_S_WITHI
    raising
      /VCXI/CX_CKX .
  methods GET_WIWID
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
    returning
      value(RS_WIWID) type ZVCXI_FFS_S_WIWID
    raising
      /VCXI/CX_CKX .
  methods IS_FGUAL
    returning
      value(RF_FGUAL) type ZVCXI_FFS_FGUAL .
  methods IS_FSLAL
    returning
      value(RF_FSLAL) type ZVCXI_FFS_FSLAL
    exceptions
      /VCXI/CX_CKX .
  methods IS_FTRAL
    returning
      value(RF_FTRAL) type ZVCXI_FFS_FTRAL .
  methods MERGE
    importing
      !IR_BL_FIFPROP type ref to ZCL_VCXI_FFSS_BL_FIFPROP
    raising
      /VCXI/CX_CKX .
  methods SET_FIFPX
    importing
      !IF_FIFPX type ZVCXI_FFS_FIFPX
    raising
      /VCXI/CX_CKX .
  methods SET_FIRNG
    importing
      !IT_FIRNG type ZVCXI_FFSS_TT_FIRNG
    raising
      /VCXI/CX_CKX .
  methods SET_FISTY
    importing
      !IF_FISTY type ZVCXI_FFS_FISTY
    raising
      /VCXI/CX_CKX .
  methods SET_GULEF
    importing
      !IS_GULEF type ZVCXI_F0S_S_GULEF
    raising
      /VCXI/CX_CKX .
  methods SET_GURIG
    importing
      !IS_GURIG type ZVCXI_F0S_S_GURIG
    raising
      /VCXI/CX_CKX .
  methods SET_NOLAY_FOLD
    importing
      !IF_NOLAY type ZVCXI_F0S_NOLAY
    raising
      /VCXI/CX_CKX .
  methods SET_TFOLD
    importing
      !IF_TFOLD type ZVCXI_FFS_TFOLD .
protected section.

  types:
    YT_TC120T type standard table of ZVCXI_FFS_TC120T .
  types:
    YT_TC110 type standard table of ZVCXI_FFS_TC110 .
  types:
    YT_TC120 type standard table of ZVCXI_FFS_TC120 .
  types:
    YT_TC140 type standard table of ZVCXI_FFS_TC140 .
  types:
    YT_TC140T type standard table of ZVCXI_FFS_TC140T .

  class-data T_TC110 type YT_TC110 .
  class-data T_TC120 type YT_TC120 .
  class-data T_TC120T type YT_TC120T .
  class-data T_TC140 type YT_TC140 .
  class-data T_TC140T type YT_TC140T .

  class-methods DETERMINE_FIRNG
    importing
      !IT_FIRNG1 type ZVCXI_FFSS_TT_FIRNG
      !IT_FIRNG2 type ZVCXI_FFSS_TT_FIRNG
    returning
      value(RT_FIRNG) type ZVCXI_FFSS_TT_FIRNG
    raising
      /VCXI/CX_CKX .
  methods MERGE_FIRNG
    importing
      !IT_FIRNG type ZVCXI_FFSS_TT_FIRNG
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_BL_FIFPROP definition
class ZCL_VCXI_FFSS_BL_FIFPROP implementation.
  method CLASS_CONSTRUCTOR.

    select * from ZVCXI_FFS_TC120
             into table T_TC120.

    select * from ZVCXI_FFS_TC120T
             into table T_TC120T
            where LANGU eq SY-LANGU.

    select * from ZVCXI_FFS_TC110
             into table T_TC110.

    select * from ZVCXI_FFS_TC140
             into table T_TC140.

    select * from ZVCXI_FFS_TC140T
             into table T_TC140T
            where LANGU eq SY-LANGU.

  endmethod.
  method DETERMINE_FIRNG.

    data: LS_FIRNG1 type ZVCXI_FFSS_S_FIRNG,
          LS_FIRNG2 type ZVCXI_FFSS_S_FIRNG.
    field-symbols: <S_FIRNG_NEW>   type ZVCXI_FFSS_S_FIRNG.


    loop at IT_FIRNG1 into LS_FIRNG1.
***--------------------------------------------------------------------------------------
***   Look for matches where own Minimum is between Minimum and Maximum
      loop at IT_FIRNG2 into LS_FIRNG2 where FIWMI le LS_FIRNG1-FIWMI
                                        and  FIWMA ge LS_FIRNG1-FIWMI.
        append initial line to RT_FIRNG assigning <S_FIRNG_NEW>.
***     Take own Minimum as new Minimum
        move LS_FIRNG1-S_FIWMI to <S_FIRNG_NEW>-S_FIWMI.
***     Take lower Maximum as new Maximum
        if LS_FIRNG1-FIWMA le LS_FIRNG2-FIWMA.
          move LS_FIRNG1-S_FIWMA to <S_FIRNG_NEW>-S_FIWMA.
        else.
          move LS_FIRNG2-S_FIWMA to <S_FIRNG_NEW>-S_FIWMA.
        endif.
***     Take higher Lot Size as new Lot Size
        if LS_FIRNG1-LOTMI ge LS_FIRNG2-LOTMI.
          move LS_FIRNG1-S_LOTMI to <S_FIRNG_NEW>-S_LOTMI.
        else.
          move LS_FIRNG2-S_LOTMI to <S_FIRNG_NEW>-S_LOTMI.
        endif.
      endloop.

***--------------------------------------------------------------------------------------
***   Look for matches where own Maximum is between Minimum and Maximum
      loop at IT_FIRNG2 into LS_FIRNG2 where FIWMI le LS_FIRNG1-FIWMA
                                        and  FIWMA ge LS_FIRNG1-FIWMA.
        append initial line to RT_FIRNG assigning <S_FIRNG_NEW>.
***     Take own Maximum as new Maximum
        move LS_FIRNG1-S_FIWMA to <S_FIRNG_NEW>-S_FIWMA.
***     Take higher Minimum as new Minimum
        if LS_FIRNG1-FIWMI ge LS_FIRNG2-FIWMI.
          move LS_FIRNG1-S_FIWMI to <S_FIRNG_NEW>-S_FIWMI.
        else.
          move LS_FIRNG2-S_FIWMI to <S_FIRNG_NEW>-S_FIWMI.
        endif.
***     Take higher Lot Size as new Lot Size
        if LS_FIRNG1-LOTMI ge LS_FIRNG2-LOTMI.
          move LS_FIRNG1-S_LOTMI to <S_FIRNG_NEW>-S_LOTMI.
        else.
          move LS_FIRNG2-S_LOTMI to <S_FIRNG_NEW>-S_LOTMI.
        endif.
      endloop.
    endloop.

  endmethod.
  method FACTORY.

*** Create BL Reference
enhancement-section FACTORY spots ZVCXI_FFSS_ES_BL_FIFPROP .
    create object RR_BL_FIFPROP.
end-enhancement-section.

*** Set Film Property XML
    RR_BL_FIFPROP->SET_FIFPX( IF_FIFPX = IF_FIFPX ).

  endmethod.
  method GET_FIFPX.

***--------------------------------------------------------------------------------------
*** Serialize to XML
    call transformation ID
         source FISTY     = ME->F_FISTY
                S_GULEF   = ME->S_GULEF
                S_GURIG   = ME->S_GURIG
                F_TFOLD   = ME->F_TFOLD
                F_NOLAY_F = ME->F_NOLAY_F
                T_FIRNG   = ME->T_FIRNG
         result xml RF_FIFPX.

  endmethod.
  method GET_FISTY_DESCR.

    data: LS_TC120T type ZVCXI_FFS_TC120T.

    read table T_TC120T into LS_TC120T with key FISTY = IF_FISTY.
    check SY-SUBRC is initial.

    move LS_TC120T-DESCR to EF_FISTY_DESCR.

  endmethod.
  method GET_LOTMI.

    data: LS_FIRNG  type ZVCXI_FFSS_S_FIRNG.

    loop at ME->T_FIRNG into LS_FIRNG.
***   Film Width must be in Range
      check ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FIRNG-FIWMI
                                                         IF_CALCV_UOM_1 = LS_FIRNG-FIWMI_UOM
                                                         IF_CALCV_2     = IS_FIWID-FIWID
                                                         IF_CALCV_UOM_2 = IS_FIWID-FIWID_UOM
                                                         IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LE ).
      check ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FIRNG-FIWMA
                                                         IF_CALCV_UOM_1 = LS_FIRNG-FIWMA_UOM
                                                         IF_CALCV_2     = IS_FIWID-FIWID
                                                         IF_CALCV_UOM_2 = IS_FIWID-FIWID_UOM
                                                         IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GE ).


***   Take higher Lot Size as new Lot Size
      if RS_LOTMI is initial.
        move LS_FIRNG-S_LOTMI to RS_LOTMI.
      else.
        if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_FIRNG-LOTMI
                                                         IF_CALCV_UOM_1 = LS_FIRNG-LOTMI_UOM
                                                         IF_CALCV_2     = RS_LOTMI-LOTMI
                                                         IF_CALCV_UOM_2 = RS_LOTMI-LOTMI_UOM
                                                         IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ).
          move LS_FIRNG-S_LOTMI to RS_LOTMI.
        endif.
      endif.
    endloop.

  endmethod.
  method GET_NOOMI_NOOMA.

    data: LS_TC120 type ZVCXI_FFS_TC120.

*** Get Film Category based on Film Style
    read table ME->T_TC120 into LS_TC120 with key FISTY = ME->F_FISTY.
    if SY-SUBRC is initial.

      move LS_TC120-NOOMI to EF_NOOMI.
      move LS_TC120-NOOMA to EF_NOOMA.

    endif.

  endmethod.
  method GET_TFOLD_DESCR.

    data: LS_TC140T type ZVCXI_FFS_TC140T.

    read table T_TC140T into LS_TC140T with key TFOLD = IF_TFOLD.
    check SY-SUBRC is initial.

    move LS_TC140T-DESCR to EF_TFOLD_DESCR.

  endmethod.
  method GET_WISWG.

    data: LF_FACTOR type F.


    check IS_WIWID-WIWID ne 0.

*** Calculate Winding Factor
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_FIWID-FIWID
                                                        IF_CALCV_UOM_1 = IS_FIWID-FIWID_UOM
                                                        IF_CALCV_2     = IS_WIWID-WIWID
                                                        IF_CALCV_UOM_2 = IS_WIWID-WIWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LF_FACTOR ).

*** Calculate Winding Surface Weight based on Factor
    RS_WISWG-WISWG     = IS_SURWT-SURWT * LF_FACTOR.
    RS_WISWG-WISWG_UOM = IS_SURWT-SURWT_UOM.

  endmethod.
  method GET_WITHI.

    data: LF_NOLAY_B type        I,
          LF_NOLAY_G type        I,
          LF_NOLAY_T type        I.
    data: LS_TC120       type        ZVCXI_FFS_TC120,
          LS_TC110       type        ZVCXI_FFS_TC110,
          LS_WIWID       type        ZVCXI_FFS_S_WIWID,
          LS_CALCV_GUTOT type        ZVCXI_XCS_S_CALCV.

*** At least return a Unit
    RS_WITHI-WITHI_UOM = IS_FITIN-FITIN_UOM.

***------------------------------------------------------------------------------------------------
*** Get Winding Factor by Film Style and Film Category
    read table ME->T_TC120 with key FISTY = ME->F_FISTY into LS_TC120.
    check SY-SUBRC eq 0.
    read table ME->T_TC110 with key FICAT = LS_TC120-FICAT into LS_TC110.
    check SY-SUBRC eq 0.

***------------------------------------------------------------------------------------------------
*** Get number of base layers
    move LS_TC110-NOLAY to LF_NOLAY_B.

***------------------------------------------------------------------------------------------------
*** Get number of layers from gusset
    if ME->S_GULEF-GULEF ne 0 or
       ME->S_GURIG-GURIG ne 0.

***   Get Winding Width
      LS_WIWID = ME->GET_WIWID( IS_FIWID = IS_FIWID ).

***   Calculate total Gusset Value
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_GULEF-GULEF
                                                          IF_CALCV_UOM_1 = ME->S_GULEF-GULEF_UOM
                                                          IF_CALCV_2     = ME->S_GURIG-GURIG
                                                          IF_CALCV_UOM_2 = ME->S_GURIG-GURIG_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                importing EF_CALCV       = LS_CALCV_GUTOT-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV_GUTOT-CALCV_UOM ).

***   Check for overlapping Gussets
      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_CALCV_GUTOT-CALCV
                                                      IF_CALCV_UOM_1 = LS_CALCV_GUTOT-CALCV_UOM
                                                      IF_CALCV_2     = LS_WIWID-WIWID
                                                      IF_CALCV_UOM_2 = LS_WIWID-WIWID_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_GT ) eq ABAP_TRUE.
***     4 additional layers in case of overlapping
        add 4 to LF_NOLAY_G.
      else.
***     Otherwise only 2
        add 2 to LF_NOLAY_G.
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** Get Total number of layers
    if F_NOLAY_F > 0.
      LF_NOLAY_T = ( LF_NOLAY_G + F_NOLAY_F ) * LF_NOLAY_B.
    else.
      LF_NOLAY_T = LF_NOLAY_G + LF_NOLAY_B.
    endif.

***------------------------------------------------------------------------------------------------
*** Calculate Winding Thickness based on Number of Layers
    RS_WITHI-WITHI     = IS_FITIN-FITIN * LF_NOLAY_T.
    RS_WITHI-WITHI_UOM = IS_FITIN-FITIN_UOM.

  endmethod.
  method GET_WIWID.

    data: LS_TC120 type        ZVCXI_FFS_TC120,
          LS_TC110 type        ZVCXI_FFS_TC110.

***------------------------------------------------------------------------------------------------
*** Start Winding Width with Film Width
    RS_WIWID-WIWID     = IS_FIWID-FIWID.
    RS_WIWID-WIWID_UOM = IS_FIWID-FIWID_UOM.

***------------------------------------------------------------------------------------------------
*** Reduce by Left Gusset * 2
    if ME->S_GULEF-GULEF is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WIWID-WIWID
                                                          IF_CALCV_UOM_1 = RS_WIWID-WIWID_UOM
                                                          IF_CALCV_2     = ( ME->S_GULEF-GULEF * 2 )
                                                          IF_CALCV_UOM_2 = ME->S_GULEF-GULEF_UOM
                                                          IF_UOM         = RS_WIWID-WIWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                importing EF_CALCV       = RS_WIWID-WIWID
                                                          EF_CALCV_UOM   = RS_WIWID-WIWID_UOM ).
    endif.

*** Reduce by Right Gusset * 2
    if ME->S_GURIG-GURIG is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WIWID-WIWID
                                                          IF_CALCV_UOM_1 = RS_WIWID-WIWID_UOM
                                                          IF_CALCV_2     = ( ME->S_GURIG-GURIG * 2 )
                                                          IF_CALCV_UOM_2 = ME->S_GURIG-GURIG_UOM
                                                          IF_UOM         = RS_WIWID-WIWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                importing EF_CALCV       = RS_WIWID-WIWID
                                                          EF_CALCV_UOM   = RS_WIWID-WIWID_UOM ).
    endif.


***------------------------------------------------------------------------------------------------
*** Get Winding Factor by Film Style and Film Category
    read table ME->T_TC120 with key FISTY = ME->F_FISTY into LS_TC120.
    check SY-SUBRC eq 0.
    read table ME->T_TC110 with key FICAT = LS_TC120-FICAT into LS_TC110.
    check SY-SUBRC eq 0.

*** Calculate Winding Width Winding Factor
    if LS_TC110-NOLAY ne 0.
      if F_NOLAY_F > 0.
        RS_WIWID-WIWID   = RS_WIWID-WIWID / ( LS_TC110-NOLAY * F_NOLAY_F ).
      else.
        RS_WIWID-WIWID   = RS_WIWID-WIWID / LS_TC110-NOLAY.
      endif.
    else.
      RS_WIWID-WIWID   = 0.
    endif.

***------------------------------------------------------------------------------------------------
*** Not smaller than 0
    if RS_WIWID-WIWID lt 0.
      move 0 to RS_WIWID-WIWID.
    endif.

  endmethod.
  method IS_FGUAL.

    data: LS_TC120 type ZVCXI_FFS_TC120,
          LS_TC110 type ZVCXI_FFS_TC110,
          LS_TC140 type ZVCXI_FFS_TC140.

*** Get Gusset Allowed based on Folding Type Customizing
    if ME->F_TFOLD is not initial.
      read table ME->T_TC140 into LS_TC140 with key TFOLD = ME->F_TFOLD.
      if SY-SUBRC is initial.
***     Get Gusset Allowed for Folding Type
        move LS_TC140-FGUAL to RF_FGUAL.
      endif.

    else.
***   Get Film Category based on Film Style
      read table ME->T_TC120 into LS_TC120 with key FISTY = ME->F_FISTY.
      if SY-SUBRC is initial.
***     Get Gusset Allowed for Film Category
        read table ME->T_TC110 into LS_TC110 with key FICAT = LS_TC120-FICAT.
        if SY-SUBRC is initial.
          move LS_TC110-FGUAL to RF_FGUAL.
        endif.
      endif.
    endif.

  endmethod.
  method IS_FSLAL.

    data: LS_TC110 type ZVCXI_FFS_TC110,
          LS_TC120 type ZVCXI_FFS_TC120,
          LS_TC140 type ZVCXI_FFS_TC140.

***--------------------------------------------------------------------------------------
*** Start positive
    move ABAP_TRUE to RF_FSLAL.
    check ME->F_FISTY is not initial.

***--------------------------------------------------------------------------------------
*** Get Slitting allowed based on Folding Type Customizing
    if ME->F_TFOLD is not initial.
      read table ME->T_TC140 into LS_TC140 with key TFOLD = ME->F_TFOLD.
      if SY-SUBRC is initial.
***     Get Slitting allowed for Folding Type
        move LS_TC140-FSLAL to RF_FSLAL.
        return.
      endif.
    else.
***   Get Film Category based on Film Style
      read table ME->T_TC120 into LS_TC120 with key FISTY = ME->F_FISTY.
      if SY-SUBRC is initial.
***     Get Slitting allowed for Film Category
        read table ME->T_TC110 into LS_TC110 with key FICAT = LS_TC120-FICAT.
        if SY-SUBRC is initial.
          move LS_TC110-FSLAL to RF_FSLAL.
        endif.
      endif.
    endif.

  endmethod.
  method IS_FTRAL.

    data: LS_TC120 type ZVCXI_FFS_TC120,
          LS_TC110 type ZVCXI_FFS_TC110,
          LS_TC140 type ZVCXI_FFS_TC140.

***--------------------------------------------------------------------------------------
*** Get Trim Allowed based on Folding Type Customizing
    if ME->F_TFOLD is not initial.
      read table ME->T_TC140 into LS_TC140 with key TFOLD = ME->F_TFOLD.
      if SY-SUBRC is initial.
***     Get Trim Allowed for Folding Type
        move LS_TC140-FSLAL to RF_FTRAL.
      endif.
    else.
      if ME->F_FISTY is not initial.
***     Get Film Category based on Film Style
        read table ME->T_TC120 into LS_TC120 with key FISTY = ME->F_FISTY.
        if SY-SUBRC is initial.
***       Get Trim Allowed for Film Category
          read table ME->T_TC110 into LS_TC110 with key FICAT = LS_TC120-FICAT.
          if SY-SUBRC is initial.
            move LS_TC110-FSLAL to RF_FTRAL.
          endif.
        endif.
      else.
***     In case of no Film Style we go ahead with trim allowed
        move ABAP_TRUE to RF_FTRAL.
      endif.
    endif.

  endmethod.
  method MERGE.

    check IR_BL_FIFPROP is bound.

*** Set Film Style
    ME->SET_FISTY( IF_FISTY = IR_BL_FIFPROP->F_FISTY ).

*** Left Gusset
    ME->SET_GULEF( IS_GULEF = IR_BL_FIFPROP->S_GULEF ).

*** Right Gusset
    ME->SET_GURIG( IS_GURIG = IR_BL_FIFPROP->S_GURIG ).

*** Set Folding Type
    ME->SET_TFOLD( IF_TFOLD = IR_BL_FIFPROP->F_TFOLD ).

*** Set Number of Layers from Folding
    ME->SET_NOLAY_FOLD( IF_NOLAY = IR_BL_FIFPROP->F_NOLAY_F ).

*** Merge of Film Ranges
    ME->MERGE_FIRNG( IT_FIRNG = IR_BL_FIFPROP->T_FIRNG ).

  endmethod.
  method MERGE_FIRNG.

    data: LF_TABIX       type I.
    data: LS_FIRNG_NEW   type ZVCXI_FFSS_S_FIRNG.
    data: LT_FIRNG_NEW   type ZVCXI_FFSS_TT_FIRNG.

***--------------------------------------------------------------------------------------
*** Perform MainLoop at own Ranges
    append lines of ZCL_VCXI_FFSS_BL_FIFPROP=>DETERMINE_FIRNG( IT_FIRNG1 = ME->T_FIRNG
                                                               IT_FIRNG2 = IT_FIRNG )   to LT_FIRNG_NEW.
*** Perform MainLoop at other Ranges
    append lines of ZCL_VCXI_FFSS_BL_FIFPROP=>DETERMINE_FIRNG( IT_FIRNG1 = IT_FIRNG
                                                               IT_FIRNG2 = ME->T_FIRNG ) to LT_FIRNG_NEW.

***--------------------------------------------------------------------------------------
*** Remove duplicate Ranges
    sort LT_FIRNG_NEW.
    delete adjacent duplicates from LT_FIRNG_NEW comparing all fields.

*** Remove ranges which are fully covered by another range
    loop at LT_FIRNG_NEW into LS_FIRNG_NEW.
      move SY-TABIX to LF_TABIX.
      loop at LT_FIRNG_NEW transporting no fields
                           where FIWMI le LS_FIRNG_NEW-FIWMI
                            and  FIWMA ge LS_FIRNG_NEW-FIWMA.
        if SY-TABIX ne LF_TABIX.
***       Match found
          clear LF_TABIX.
          exit.
        endif.
      endloop.
      if LF_TABIX is initial.
***     Delete once a match was found
        delete LT_FIRNG_NEW.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Set new Film Ranges
    ME->SET_FIRNG( IT_FIRNG = LT_FIRNG_NEW ).

  endmethod.
  method SET_FIFPX.

***--------------------------------------------------------------------------------------
*** Deserialize XML
    if IF_FIFPX is not initial.
      call transformation ID
           source xml IF_FIFPX
           result FISTY     = ME->F_FISTY
                  S_GULEF   = ME->S_GULEF
                  S_GURIG   = ME->S_GURIG
                  F_TFOLD   = ME->F_TFOLD
                  F_NOLAY_F = ME->F_NOLAY_F
                  T_FIRNG   = ME->T_FIRNG.
    endif.

  endmethod.
  method SET_FIRNG.

    move IT_FIRNG to ME->T_FIRNG.
    sort ME->T_FIRNG by FIWMI FIWMA LOTMI.

  endmethod.
  method SET_FISTY.

    move IF_FISTY to ME->F_FISTY.

  endmethod.
  method SET_GULEF.

    move IS_GULEF to ME->S_GULEF.

  endmethod.
  method SET_GURIG.

    move IS_GURIG to ME->S_GURIG.

  endmethod.
  method SET_NOLAY_FOLD.

    move IF_NOLAY to ME->F_NOLAY_F.

  endmethod.
  method SET_TFOLD.

    move IF_TFOLD to ME->F_TFOLD.

  endmethod.
