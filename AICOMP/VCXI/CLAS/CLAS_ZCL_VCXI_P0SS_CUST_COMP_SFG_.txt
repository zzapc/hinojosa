
class ZCL_VCXI_P0SS_CUST_COMP_SFG definition
  public
  inheriting from ZCL_VCXI_P0SS_CUST_SFG
  create protected .

public section.

  data F_BOXPA type ZVCXI_P0SS_BOXPA read-only .
  data F_COMPP type ZVCXI_P0SS_COMPP read-only .
  data F_PRSTY type ZVCXI_P0SS_PRSTY read-only .
  data S_FOLHE type ZVCXI_P0SS_S_FOLHE read-only .
  data S_FOLLE type ZVCXI_P0SS_S_FOLLE read-only .
  data S_FOLWI type ZVCXI_P0SS_S_FOLWI read-only .
  data S_PROHE type ZVCXI_P0S_S_PROHE read-only .
  data S_PROLE type ZVCXI_P0S_S_PROLE read-only .
  data S_PROWI type ZVCXI_P0S_S_PROWI read-only .
  data S_ABLAN type ZVCXI_P0SS_S_ABLAN read-only .
  data S_WNEPP type ZVCXI_P0SS_S_WNEPP read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_P0_COMP_SFG
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_P0SS_CUST_COMP_SFG
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_SETID_P0S_COMP_SFG type /VCXI/CKXC_SETID value 'ZVCXI_P0S_C_SFG'. "#EC NOTEXT
private section.
endclass. "ZCL_VCXI_P0SS_CUST_COMP_SFG definition
class ZCL_VCXI_P0SS_CUST_COMP_SFG implementation.
method CONSTRUCTOR.

  data:  LF_OBJNUM    type        OBJNUM.
  data:  LS_SETVA     type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC     type        /VCXI/CKXC_S_MAPVC,
         LS_MAPVN     type        /VCXI/CKXC_S_MAPVN.
  data:  LT_SETVA     type        /VCXI/CKXC_TT_SETVA.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Get Component SFG Info
      move ME->F_MATNR to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_P0S_COMP_SFG
                                               IF_OBJNUM = LF_OBJNUM ).
***   Check if Classification is active
      read table LT_SETVA into LS_SETVA index 1.
      if  LS_SETVA-ATNAM is initial.
        clear: LF_OBJNUM.
        concatenate ME->F_MATNR ME->F_WERKS into LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_P0S_COMP_SFG
                                                 IF_OBJNUM = LF_OBJNUM ).
      endif.

      loop at LT_SETVA into LS_SETVA.
        clear: LS_MAPVC,
               LS_MAPVN.

        case LS_SETVA-MAPID.
***       Basic Informations
          when 'COMPP'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_COMPP.

          when 'PRSTY'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_PRSTY.

          when 'BOXPA'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_BOXPA.

          when 'PROLE'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_PROLE-PROLE.
            move LS_MAPVN-ATFLV_UOM to ME->S_PROLE-PROLE_UOM.

          when 'PROWI'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_PROWI-PROWI.
            move LS_MAPVN-ATFLV_UOM to ME->S_PROWI-PROWI_UOM.

          when 'PROHE'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_PROHE-PROHE.
            move LS_MAPVN-ATFLV_UOM to ME->S_PROHE-PROHE_UOM.

          when 'FOLLE'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_FOLLE-FOLLE.
            move LS_MAPVN-ATFLV_UOM to ME->S_FOLLE-FOLLE_UOM.

          when 'FOLWI'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_FOLWI-FOLWI.
            move LS_MAPVN-ATFLV_UOM to ME->S_FOLWI-FOLWI_UOM.

          when 'FOLHE'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_FOLHE-FOLHE.
            move LS_MAPVN-ATFLV_UOM to ME->S_FOLHE-FOLHE_UOM.

          when 'ABLAN'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_ABLAN-ABLAN.
            move LS_MAPVN-ATFLV_UOM to ME->S_ABLAN-ABLAN_UOM.

          when 'WNEPP'.
            read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
            move LS_MAPVN-ATFLV     to ME->S_WNEPP-WNEPP.
            move LS_MAPVN-ATFLV_UOM to ME->S_WNEPP-WNEPP_UOM.
        endcase.
      endloop.

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
method GET_INSTANCE_P0_COMP_SFG.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
