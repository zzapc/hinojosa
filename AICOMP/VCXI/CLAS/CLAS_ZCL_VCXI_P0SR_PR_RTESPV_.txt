
class ZCL_VCXI_P0SR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_XCSR_PR_RTESPV
  create public .

public section.

  constants C_IPRVT_P0_RTESPV type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SR_RTESPV'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .
  methods GET_CPM_RTESEL
    returning
      value(RT_CPM_RTESEL) type ZVCXI_P0SR_TT_CPM_RTESEL
    raising
      /VCXI/CX_CKX .
  methods GET_LAMI_RTESEL
    returning
      value(RT_LAMI_RTESEL) type ZVCXI_P0SR_TT_LAMI_RTESEL
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods CREATE_BL_PSTEP_MANU
    redefinition .
  methods CREATE_BL_PSTEP_OUTSO
    redefinition .
  methods FILL_PROD
    redefinition .
  methods IS_FILL_PROD_ALLOWED
    redefinition .
  methods GET_EXQTY
    redefinition .
protected section.

  data R_PR_RTESPV_HL type ref to ZCL_VCXI_XCSR_PR_RTESPV .

  methods GET_BL_PSTEP_CHOP
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CLOS
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_CUT
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_GRP
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_LAMI
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_PRINT
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_SAW
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_TAPE
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_BL_PSTEP_UNIT
    changing
      !CT_BL_PSTEP type ZVCXI_XCSR_TT_BL_PSTEP
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_BASE
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_BASE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_DCT
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_DCT) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRODDIM
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_PRODDIM) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SCSTR
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
      !IT_GATE_TAPE type /VCXI/VKSR_TT_GATE optional
      !IF_CSCOR type ZVCXI_P0SS_CSCOR optional
      !IF_SCSOP type ZVCXI_P0S_SCSOP optional
    returning
      value(RT_GATE_SCSTR) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SCSTR_MGR
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_SCSTR_MGR) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SHTDIM
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_SHTDIM) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods RERUN_PSTEP_PRINT
    importing
      !IR_RTE_PRTE type ref to /VCXI/CL_VSMR_RTE_PRTE
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods TURN_PCDIR
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IF_PCDIR_PREV type ZVCXI_P0SP_PCDIR
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods VALIDATE_PCDIR
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    returning
      value(RF_RECHECK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_COMP_SE
    importing
      !IR_GATE_SPEC type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_COMP_SE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods BUILD_RTE_COMBI_PSTEP
    redefinition .
  methods BUILD_RTE_PSTEP
    redefinition .
  methods GET_BL_PSTEP
    redefinition .
  methods GET_CSPLIT
    redefinition .
  methods GET_MFMI
    redefinition .
  methods GET_MFSI
    redefinition .
  methods HANDLE_GATE_FREED
    redefinition .
  methods HANDLE_INIT_REFERENCES
    redefinition .
  methods HANDLE_PROD_FILLED
    redefinition .
  methods VALIDATE
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SR_PR_RTESPV definition
class ZCL_VCXI_P0SR_PR_RTESPV implementation.
method BUILD_RTE_COMBI_PSTEP.

  data:  LF_INDEX                  type        I.
  data:  LS_RTE_COMBI_PSTEP_GRP    type        /VCXI/VSMR_S_RTE_COMBI_PSTEP.
  data:  LR_RTE_PSTEP              type ref to /VCXI/CL_VSMR_RTE_PSTEP.

  RT_RTE_COMBI_PSTEP = SUPER->BUILD_RTE_COMBI_PSTEP( IR_PRTE      = IR_PRTE
                                                     IT_RTE_PSTEP = IT_RTE_PSTEP ).

***------------------------------------------------------------------
*** Define Combinations
  loop at IT_RTE_PSTEP into LR_RTE_PSTEP.
    move SY-TABIX to LF_INDEX.

    case LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Grouping
      when ZCL_VCXI_P0SR_BL_PSTEP_GRP=>C_IPSTP_GRP.
        check LS_RTE_COMBI_PSTEP_GRP is initial.
***     done in Filter
        append LR_RTE_PSTEP to LS_RTE_COMBI_PSTEP_GRP-T_RTE_PSTEP.

        LF_INDEX =  LF_INDEX - 1.
        read table IT_RTE_PSTEP into LR_RTE_PSTEP index LF_INDEX.
        if SY-SUBRC eq 0.
          insert LR_RTE_PSTEP into LS_RTE_COMBI_PSTEP_GRP-T_RTE_PSTEP index 1.
        endif.
    endcase.
  endloop.

***------------------------------------------------------------------
*** Set Combination
  if lines( LS_RTE_COMBI_PSTEP_GRP-T_RTE_PSTEP ) gt 1.
    append LS_RTE_COMBI_PSTEP_GRP to RT_RTE_COMBI_PSTEP.
  endif.

endmethod.
method BUILD_RTE_PSTEP.

  data:  LT_BL_PSTEP        type        ZVCXI_XCSR_TT_BL_PSTEP.
  data:  LR_BL_PSTEP_ORG    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_BL_PSTEP_NEW    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSTEP       type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR_CURR      type ref to ZIF_VCXI_P0SR_PCDIR,
         LR_PCDIR_PREV      type ref to ZIF_VCXI_P0SR_PCDIR.

***----------------------------------------------------------------------------
  if IR_RTE_PSEQ is not bound.
*** Copy BL PStep due to Sequence Specific Values
    loop at IT_BL_PSTEP into LR_BL_PSTEP_ORG.
      move LR_BL_PSTEP_ORG->COPY( ) to LR_BL_PSTEP_NEW.
      append LR_BL_PSTEP_NEW to LT_BL_PSTEP.
    endloop.

*** Create Routing Production Steps
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = LT_BL_PSTEP ).

*** Process Sequence Dependent BL PStep Settings
    loop at RT_RTE_PSTEP into LR_RTE_PSTEP.

***   Get PC Direction
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
          check LR_PCDIR_CURR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Forward PC Direction
      if LR_PCDIR_PREV is bound and
         LR_PCDIR_CURR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
        LR_PCDIR_CURR->SET_PCDIR( IF_PCDIR = LR_PCDIR_PREV->F_PCDIR ).
      endif.

***   Keep Curr as Previous
      move LR_PCDIR_CURR to LR_PCDIR_PREV.
    endloop.

***----------------------------------------------------------------------------
*** Cascading Method Call (Keep everything as is)
  else.
    RT_RTE_PSTEP = SUPER->BUILD_RTE_PSTEP( IR_PRTE     = IR_PRTE
                                           IT_BL_PSTEP = IT_BL_PSTEP
                                           IR_RTE_PSEQ = IR_RTE_PSEQ ).
  endif.

endmethod.
method CONSTRUCTOR.

  data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
  if IR_BL_RTESPV is bound.
    move IR_BL_RTESPV to LR_BL_RTESPV.
  else.
    create object LR_BL_RTESPV
      type
        ZCL_VCXI_P0SR_BL_RTESPV
      exporting
        IR_GATE                    = IR_GATE.
  endif.

*** Call Super
  call method SUPER->CONSTRUCTOR
    exporting
      IR_GATE      = IR_GATE
      IR_BL_RTESPV = LR_BL_RTESPV.

endmethod.
method CREATE_BL_PRTE.

  data:  LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

  if IR_RTE_PRTE is bound.
    move IR_RTE_PRTE to LR_RTE_PRTE.
  else.
    create object LR_RTE_PRTE.
  endif.

  create object RR_BL_PRTE
    type
      ZCL_VCXI_P0SR_BL_PRTE
    exporting
      IR_RTE_PRTE           = LR_RTE_PRTE
      IR_MFMI               = ME->R_MFMI
      IR_MFSI               = ME->R_MFSI
      IT_CSPLIT             = ME->T_CSPLIT
      IF_DATE               = ME->F_DATE
      IF_LIFNR_REQ          = ME->F_LIFNR_REQ.

endmethod.
method CREATE_BL_PSTEP_MANU.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_MANU      type ref to ZCL_VCXI_P0SR_BL_PSTEP_MANU,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_MANU
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Manual
  move ABAP_TRUE to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~F_MANWC.

*** Default Machine Speed Rate
  move '60'      to LR_BL_PSTEP_MANU->ZIF_VCXI_XCSR_BL_MANU~S_MSRS-MSRST.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_MANU->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_MANU->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_MANU to RR_BL_PSTEP.

endmethod.
method CREATE_BL_PSTEP_OUTSO.

  data:  LF_PCDIR              type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PSTEP_OUTSO     type ref to ZCL_VCXI_P0SR_BL_PSTEP_OUTSO,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

*** Create BL PStep
  create object LR_BL_PSTEP_OUTSO
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.

*** Mark as Outsourcing
  move ABAP_TRUE to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO.

*** Default Price Per
  move '1000'    to LR_BL_PSTEP_OUTSO->ZIF_VCXI_XCSR_BL_OUTSO~S_PRICP-PRICP.

*** Get Direction and Handling Option
  ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LR_BL_PSTEP_OUTSO->F_IPSTP
                                            importing EF_PCDIR = LF_PCDIR
                                                      EF_PCDOP = LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~F_PCDOP ).
  LR_BL_PSTEP_OUTSO->ZIF_VCXI_P0SR_PCDIR~SET_PCDIR( IF_PCDIR = LF_PCDIR ).

*** Return
  move LR_BL_PSTEP_OUTSO to RR_BL_PSTEP.

endmethod.
method FILL_PROD.

  data:  LS_EXQTY        type        /VCXI/VKCR_S_EXQTY.
  data:  LT_LAMI_RTESEL  type        ZVCXI_P0SR_TT_LAMI_RTESEL,
         LT_CPM_RTESEL   type        ZVCXI_P0SR_TT_CPM_RTESEL.
  data:  LR_BL_RTESPV    type ref to ZCL_VCXI_P0SR_BL_RTESPV,
         LR_RTEFIL       type ref to ZCL_VCXI_XCSR_BL_PRTE.

  check ME->R_BL_RTESPV is bound.

  if ME->R_PR_RTESPV_HL is not bound.
*** Get Explosion Quantity
    move ME->GET_EXQTY( )   to LS_EXQTY.

***----------------------------------------------------------------------------
*** Refresh Auto
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

    if ME->R_RTESEL is not bound.
***   No Selected Route defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSR'
                                            IF_MSGNO = '310' ).
    endif.

*** Get Selected Route of Laminating
    LT_LAMI_RTESEL = ME->GET_LAMI_RTESEL( ).

*** Get Selected Route of Configured Packaging Material
    LT_CPM_RTESEL = ME->GET_CPM_RTESEL( ).


***----------------------------------------------------------------------------
*** Copy Selected Route to Filled Route
    move ME->R_RTESEL->COPY( ) to LR_RTEFIL.

    move ME->R_BL_RTESPV ?to LR_BL_RTESPV.
    LR_BL_RTESPV->SET_P0_BL_PRTE( IR_BL_PRTE     = LR_RTEFIL
                                  IT_LAMI_RTESEL = LT_LAMI_RTESEL
                                  IT_CPM_RTESEL  = LT_CPM_RTESEL
                                  IS_EXQTY       = LS_EXQTY ).

    raise event PROD_FILLED exporting IR_BL_PRTE = LR_RTEFIL.

  else.
***----------------------------------------------------------------------------
*** Use Higher Level
    ME->R_PR_RTESPV_HL->FILL_PROD( ).
  endif.

endmethod.
method GET_BL_PSTEP.

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Chopping
  ME->GET_BL_PSTEP_CHOP(  changing CT_BL_PSTEP = RT_BL_PSTEP ).

*** BL PSTEP - Sawing
  ME->GET_BL_PSTEP_SAW(   changing CT_BL_PSTEP = RT_BL_PSTEP ).

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Lamination
  ME->GET_BL_PSTEP_LAMI(  changing CT_BL_PSTEP = RT_BL_PSTEP ).

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Printing
  ME->GET_BL_PSTEP_PRINT( changing CT_BL_PSTEP = RT_BL_PSTEP ).

*** BL PSTEP - Cutting
  ME->GET_BL_PSTEP_CUT(   changing CT_BL_PSTEP = RT_BL_PSTEP ).

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Closing
  ME->GET_BL_PSTEP_CLOS(  changing CT_BL_PSTEP = RT_BL_PSTEP ).

***------------------------------------------------------------------------------------------------
*** BL PSTEP - Grouping
  ME->GET_BL_PSTEP_GRP(   changing CT_BL_PSTEP = RT_BL_PSTEP ).

*** BL PSTEP - Unitizing
  ME->GET_BL_PSTEP_UNIT(  changing CT_BL_PSTEP = RT_BL_PSTEP ).

endmethod.
method GET_BL_PSTEP_CHOP.

  data:  LF_SHTDI          type          ZVCXI_P0SS_SHTDI.
  data:  LT_PRVDR_CHOP     type          /VCXI/VKSR_TT_GATE,
         LT_SHTDI          type table of ZVCXI_P0SS_SHTDI.
  data:  LR_GATE_SPEC      type ref to   /VCXI/CL_VKSR_GATE,
         LR_GATE_SHTDIM    type ref to   /VCXI/CL_VKSR_GATE,
         LR_SHTDIM         type ref to   ZIF_VCXI_P0SS_SHTDIM,
         LR_BL_PSTEP_CHOP  type ref to   ZCL_VCXI_P0SR_BL_PSTEP_CHOP,
         LR_APPDATA        type ref to   /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for Sheet Dimension
  LR_GATE_SHTDIM = ME->GET_PRVDR_SHTDIM( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_SHTDIM is bound.

  try.
      move LR_GATE_SHTDIM->R_CLSPR ?to LR_SHTDIM.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.
  check LR_SHTDIM is bound.

*** Check Division is Chopping
  check LR_SHTDIM->GET_TDIVI( ) eq ZIF_VCXI_P0SS_SHTDIM=>C_TDIVI_CHOP.

*** Get Sequence
  case LR_SHTDIM->GET_SDIVI( ).
    when 'L'.
      append 'A' to LT_SHTDI. "Lengthwise in to chop the Length first
      append 'B' to LT_SHTDI. "Width
    when 'W'.
      append 'B' to LT_SHTDI. "Widthwise in to chop the Width first
      append 'A' to LT_SHTDI. "Length
  endcase.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep for each Direction if needed
  loop at LT_SHTDI into LF_SHTDI.
    case LF_SHTDI.
      when 'A'. "PC Direction Length / Chop Length
        check LR_SHTDIM->GET_DUPSL( ) gt 1.
      when 'B'. "PC Direction Width / Chop Width
        check LR_SHTDIM->GET_DUPSW( ) gt 1.
    endcase.

*** Collect all Provider
    free: LT_PRVDR_CHOP.
    append LR_GATE_SPEC   to LT_PRVDR_CHOP.
    append LR_GATE_SHTDIM to LT_PRVDR_CHOP.

*** Create BL PStep
    create object LR_BL_PSTEP_CHOP
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_CHOP to CT_BL_PSTEP.
    move LF_SHTDI to LR_BL_PSTEP_CHOP->F_SHTDI.
    LR_BL_PSTEP_CHOP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR_CHOP ).
  endloop.

endmethod.
method GET_BL_PSTEP_CLOS.

  types:         begin of YS_PPASS,
                   R_GATE_CLOS      type ref to /VCXI/CL_VKSR_GATE,
                   PPASS            type        ZVCXI_P0SS_PPASS,
                   R_GATE_JOINT     type ref to /VCXI/CL_VKSR_GATE,
                 end   of YS_PPASS.
  types:         YT_PPASS           type standard table of YS_PPASS.


  data:          LT_GATE_CLOS       type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_JOINT      type        /VCXI/VKSR_TT_GATE,
                 LT_PPASS           type        YT_PPASS,
                 LT_PRVDR_CLOS      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_SPEC       type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_PRODDIM    type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_CLOS       type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_JOINT      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_JOINT        type ref to ZCL_VCXI_P0SS_PR_JOINT,
                 LR_BL_PSTEP_CLOS   type ref to ZCL_VCXI_P0SR_BL_PSTEP_CLOS,
                 LR_APPDATA         type ref to /VCXI/CL_VKSR_APPDATA.
  field-symbols: <S_PPASS>          type        YS_PPASS.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for Product Dimensions
  LR_GATE_PRODDIM = ME->GET_PRVDR_PRODDIM( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_PRODDIM is bound.

*** Find Provider for Closing
  LT_GATE_CLOS = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_CLOS=>C_IPRVT_P0_CLOS
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).
  check LT_GATE_CLOS is not initial.

*** Find Provider for Joint
  LT_GATE_JOINT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_JOINT=>C_IPRVT_P0_JOINT
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).
  check LT_GATE_JOINT is not initial.


***------------------------------------------------------------------------------------------------
*** Build Production Passes
  loop at LT_GATE_CLOS into LR_GATE_CLOS.
*** Check is child of Specification
    check LR_GATE_CLOS->GET_PARENT( ) eq LR_GATE_SPEC.

    loop at LT_GATE_JOINT into LR_GATE_JOINT.
      check LR_GATE_JOINT->IS_IN_LINE( IR_GATE = LR_GATE_CLOS ) eq ABAP_TRUE.

      try.
          move LR_GATE_JOINT->R_CLSPR ?to LR_PR_JOINT.
          check LR_PR_JOINT is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Add only Production Pass if we have closed Joint Types
      check LR_PR_JOINT->IS_CLOSED( ) eq ABAP_TRUE.

      append initial line to LT_PPASS assigning <S_PPASS>.
      move LR_GATE_CLOS              to <S_PPASS>-R_GATE_CLOS.
      move LR_GATE_JOINT             to <S_PPASS>-R_GATE_JOINT.
      move LR_PR_JOINT->GET_PPASS( ) to <S_PPASS>-PPASS.
    endloop.
  endloop.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL Production Step for each Production Pass
  loop at LT_PPASS assigning <S_PPASS>.
    collect <S_PPASS>-R_GATE_CLOS  into LT_PRVDR_CLOS.
    collect <S_PPASS>-R_GATE_JOINT into LT_PRVDR_CLOS.

    at end of PPASS.
      append LR_GATE_SPEC    to LT_PRVDR_CLOS.
      append LR_GATE_PRODDIM to LT_PRVDR_CLOS.
***   Create BL PStep
      create object LR_BL_PSTEP_CLOS
        exporting
          IF_DATE    = ME->F_DATE
          IR_APPDATA = LR_APPDATA.
      append LR_BL_PSTEP_CLOS to CT_BL_PSTEP.
      LR_BL_PSTEP_CLOS->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                      IT_PRVDR = LT_PRVDR_CLOS ).
      free LT_PRVDR_CLOS.
    endat.
  endloop.

endmethod.
method GET_BL_PSTEP_CUT.

  data: LT_GATE_MS_SHTPR type        /VCXI/VKSR_TT_GATE,
        LT_GATE_PRODDIM  type        /VCXI/VKSR_TT_GATE,
        LT_PRVDR         type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE_SPEC    type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_DCT     type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_SHTDIM  type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_BASE    type ref to /VCXI/CL_VKSR_GATE,
        LR_GATE_PRODDIM type ref to /VCXI/CL_VKSR_GATE,
        LR_DCT          type ref to ZIF_VCXI_P0SS_DCT,
        LR_BL_PSTEP_CUT type ref to ZCL_VCXI_P0SR_BL_PSTEP_CUT,
        LR_PR_MS_SHTPR  type ref to ZCL_VCXI_P0SS_PR_MS_SHTPR,
        LR_APPDATA      type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for DieCut
  LR_GATE_DCT = ME->GET_PRVDR_DCT( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_DCT is bound.
  collect LR_GATE_DCT into LT_PRVDR.

  try.
      move LR_GATE_DCT->R_CLSPR ?to LR_DCT.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

*** Check if Die Cut Type is defined
  check LR_DCT->GET_TDCUT( ) is not initial.

***------------------------------------------------------------------------------------------------
*** Find Provider for Sheet Dimension
  LR_GATE_SHTDIM = ME->GET_PRVDR_SHTDIM( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_SHTDIM is bound.
  collect LR_GATE_SHTDIM into LT_PRVDR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Base (e.g. Sheet Procurement or Board)
  LR_GATE_BASE = ME->GET_PRVDR_BASE( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_BASE is bound.
  append LR_GATE_BASE to LT_PRVDR.

*** Check if Cutting was already done by Sheet Procurement
  if LR_GATE_BASE->R_CLSPR is instance of ZCL_VCXI_P0SS_PR_MS_SHTPR.
    LR_PR_MS_SHTPR ?= LR_GATE_BASE->R_CLSPR.
    check LR_PR_MS_SHTPR               is bound      and
          LR_PR_MS_SHTPR->GET_FLCUT( ) eq ABAP_FALSE.
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Components Product Dimensions - Product Dimensions
  LT_GATE_PRODDIM = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_P0SS_PRODDIM=>C_IPRVT_P0_PRODDIM
                                           IF_INUSE  = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

  if LT_GATE_PRODDIM is not initial.
    loop at LT_GATE_PRODDIM into LR_GATE_PRODDIM.
      if LR_GATE_PRODDIM->GET_PARENT( ) eq LR_GATE_SPEC.
        collect LR_GATE_PRODDIM into LT_PRVDR.
      endif.
    endloop.
  endif.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  create object LR_BL_PSTEP_CUT
    exporting
      IF_DATE    = ME->F_DATE
      IR_APPDATA = LR_APPDATA.
  append LR_BL_PSTEP_CUT to CT_BL_PSTEP.
  LR_BL_PSTEP_CUT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                 IT_PRVDR = LT_PRVDR ).

endmethod.
method GET_BL_PSTEP_GRP.

  data:  LT_GATE_SHIPMGR         type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SHIPUNIT        type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PACKMAT         type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PSCALE          type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PSCALE_TMP      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_CPM             type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR                type        /VCXI/VKSR_TT_GATE.
  data:  LR_BL_PSTEP_GRP         type ref to ZCL_VCXI_P0SR_BL_PSTEP_GRP,
         LR_PR_SHIPMGR           type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
         LR_GATE_SHIPMGR         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHIPUNIT        type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PACKMAT         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PSCALE          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_CPM             type ref to /VCXI/CL_VKSR_GATE,
         LR_APPDATA              type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                           IF_INUSE = ABAP_TRUE ).
  check LT_GATE_SHIPMGR is not initial.

  read table LT_GATE_SHIPMGR into LR_GATE_SHIPMGR index 1.
  check LR_GATE_SHIPMGR is bound.
  try.
      move LR_GATE_SHIPMGR->R_CLSPR ?to LR_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SHIPMGR.
  endtry.
  check LR_PR_SHIPMGR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_SHIPUNIT.
    endif.
  endloop.

  check LT_GATE_SHIPUNIT is not initial.

*** Filter Shipping Units
  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP
                                  changing  CT_GATE        = LT_GATE_SHIPUNIT ).

  check LT_GATE_SHIPUNIT is not initial.

*** Sort Shipping Units
  if lines( LT_GATE_SHIPUNIT ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_SHIPUNIT ).
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Packaging Materials
  LT_GATE_PACKMAT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                           IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
    if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_PACKMAT.
      continue.
    endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Price Scales
    LT_GATE_PSCALE_TMP = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                                IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE_PSCALE_TMP into LR_GATE_PSCALE.
      if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE_PACKMAT ) ne ABAP_TRUE.
        delete LT_GATE_PSCALE_TMP.
      endif.
    endloop.
    append lines of LT_GATE_PSCALE_TMP to LT_GATE_PSCALE.
  endloop.

*** Sort Packaging Materials
  if lines( LT_GATE_PACKMAT ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_PACKMAT ).
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Configured Packaging Materials
  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_CPM into LR_GATE_CPM.
    if LR_GATE_CPM->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_CPM.
      continue.
    endif.
  endloop.

*** Sort Configured Packaging Materials
  if lines( LT_GATE_CPM ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CPM ).
  endif.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    clear: LT_PRVDR.

*** Get Shipping Manager as Provider.
    append LR_GATE_SHIPMGR to LT_PRVDR.

*** Get Shipping Unit as Provider.
    append LR_GATE_SHIPUNIT to LT_PRVDR.

*** Get Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
      if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_PACKMAT to LT_PRVDR.
      endif.

***   Get Price Scales which are in line with Packaging Material
      loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
        if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE_PACKMAT ) eq ABAP_TRUE.
          append LR_GATE_PSCALE to LT_PRVDR.
        endif.
      endloop.
    endloop.

*** Get Configured Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_CPM into LR_GATE_CPM.
      if LR_GATE_CPM->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_CPM to LT_PRVDR.
      endif.
    endloop.

    create object LR_BL_PSTEP_GRP
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_GRP to CT_BL_PSTEP.
    LR_BL_PSTEP_GRP->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                   IT_PRVDR = LT_PRVDR ).

  endloop.

endmethod.
method GET_BL_PSTEP_LAMI.

  data:  LF_IPSTP              type        /VCXI/VSMC_IPSTP.
  data:  LT_GATE_LAMI          type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MS_SHTPR      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PSCALE        type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR              type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SPEC          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_LAMI          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHTDIM        type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_BASE          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MS_SHTPR      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PSCALE        type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI            type ref to ZCL_VCXI_P0SS_PR_LAMI,
         LR_BL_PSTEP_LAMI      type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI,
         LR_APPDATA            type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Lamination
  LT_GATE_LAMI = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE_LAMI into LR_GATE_LAMI.
*** Check is child of Specification
    if LR_GATE_LAMI->GET_PARENT( ) ne LR_GATE_SPEC.
      delete LT_GATE_LAMI.
    endif.
  endloop.
  check LT_GATE_LAMI is not initial.

***------------------------------------------------------------------------------------------------
*** Find Provider for Sheet Dimension
  LR_GATE_SHTDIM = ME->GET_PRVDR_SHTDIM( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_SHTDIM is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Base
  LR_GATE_BASE = ME->GET_PRVDR_BASE( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_BASE is bound.

***------------------------------------------------------------------------------------------------
*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
  loop at LT_GATE_LAMI into LR_GATE_LAMI.
*** Collect Provider
    free LT_PRVDR.
    collect LR_GATE_SPEC   into LT_PRVDR.
    collect LR_GATE_LAMI   into LT_PRVDR.
    collect LR_GATE_SHTDIM into LT_PRVDR.
    collect LR_GATE_BASE   into LT_PRVDR.


*** Find Provider for Purchase Sheet
    LT_GATE_MS_SHTPR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                              IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE_MS_SHTPR into LR_GATE_MS_SHTPR.
***   Check is child of Lamination
      if LR_GATE_MS_SHTPR->GET_PARENT( ) eq LR_GATE_LAMI.
        collect LR_GATE_MS_SHTPR into LT_PRVDR.
        exit.
      else.
        clear LR_GATE_MS_SHTPR.
      endif.
    endloop.

*** Find Provider for Price Scale
    if LR_GATE_MS_SHTPR is bound.
      LT_GATE_PSCALE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                              IF_INUSE  = ABAP_TRUE
                                              IF_SORTED = ABAP_TRUE ).
      loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
***     Check is child of Lamination
        if LR_GATE_PSCALE->GET_PARENT( ) eq LR_GATE_MS_SHTPR.
          collect LR_GATE_PSCALE into LT_PRVDR.
        endif.
      endloop.
    endif.


*** Get Reference to Lamination
    try.
        clear LR_PR_LAMI.
        move LR_GATE_LAMI->R_CLSPR ?to LR_PR_LAMI.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_LAMI.
    endtry.
    check LR_PR_LAMI is bound.

*** Identify PStep ID
    case LR_PR_LAMI->GET_TLAMI( ).
      when ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_RTS. "Inline
        move ZCL_VCXI_P0SR_BL_PSTEP_LAMI=>C_IPSTP_P0_LAMI_RTS to LF_IPSTP.
      when ZCL_VCXI_P0SS_CUST_LAMI=>C_TLAMI_STS. "Sheet
        move ZCL_VCXI_P0SR_BL_PSTEP_LAMI=>C_IPSTP_P0_LAMI_STS to LF_IPSTP.
    endcase.

*** Create BL PStep
    create object LR_BL_PSTEP_LAMI
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA
        IF_IPSTP   = LF_IPSTP.
    append LR_BL_PSTEP_LAMI to CT_BL_PSTEP.
    LR_BL_PSTEP_LAMI->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR ).
  endloop.

endmethod.
method GET_BL_PSTEP_PRINT.

  data:  LT_GATE_PRINT     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MS_INK    type        /VCXI/VKSR_TT_GATE,
         LT_GATE_MARK      type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_PRINT    type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SPEC      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHTDIM    type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PRINT     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MS_INK    type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_MARK      type ref to /VCXI/CL_VKSR_GATE,
         LR_BL_PSTEP_PRINT type ref to ZCL_VCXI_P0SR_BL_PSTEP_PRINT,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for Sheet Dimension
  LR_GATE_SHTDIM = ME->GET_PRVDR_SHTDIM( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_SHTDIM is bound.

*** Find Provider for Printing
  LT_GATE_PRINT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_PRINT=>C_IPRVT_P0_PRINT
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).
  check LT_GATE_PRINT is not initial.

*** Find Provider for MS Ink
  LT_GATE_MS_INK = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MS_INK=>C_IPRVT_P0_MS_INK
                                          IF_INUSE  = ABAP_TRUE
                                          IF_SORTED = ABAP_TRUE ).

*** Find Provider for Markings
  LT_GATE_MARK = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
  loop at LT_GATE_PRINT into LR_GATE_PRINT.
*** Check is child of Specification
    check LR_GATE_PRINT->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) eq ABAP_TRUE.

*** Collect all Provider
    free LT_PRVDR_PRINT.
    append LR_GATE_SHTDIM to LT_PRVDR_PRINT.
    append LR_GATE_PRINT  to LT_PRVDR_PRINT.

*** Get MS Inks which are in line with Printing
    loop at LT_GATE_MS_INK into LR_GATE_MS_INK.
      if LR_GATE_MS_INK->IS_IN_LINE( IR_GATE = LR_GATE_PRINT ) eq ABAP_TRUE.
        append LR_GATE_MS_INK to LT_PRVDR_PRINT.
      endif.
    endloop.

*** Get Markings which are in line with Printing
    loop at LT_GATE_MARK into LR_GATE_MARK.
      if LR_GATE_MARK->IS_IN_LINE( IR_GATE = LR_GATE_PRINT ) eq ABAP_TRUE.
        append LR_GATE_MARK to LT_PRVDR_PRINT.
      endif.
    endloop.

*** Create BL PStep
    create object LR_BL_PSTEP_PRINT
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_PRINT to CT_BL_PSTEP.
    LR_BL_PSTEP_PRINT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                     IT_PRVDR = LT_PRVDR_PRINT ).

  endloop.

endmethod.
method GET_BL_PSTEP_SAW.

  data:  LT_PRVDR_SAW      type          /VCXI/VKSR_TT_GATE,
         LT_GATE_SCSTR     type          /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SPEC      type ref to   /VCXI/CL_VKSR_GATE,
         LR_GATE_SHTDIM    type ref to   /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR_MGR type ref to   /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR     type ref to   /VCXI/CL_VKSR_GATE,
         LR_PR_SCSTR       type ref to   ZCL_VCXI_P0SS_PR_SCSTR,
         LR_BL_PSTEP_SAW   type ref to   ZCL_VCXI_P0SR_BL_PSTEP_SAW,
         LR_APPDATA        type ref to   /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for Sheet Dimension
  LR_GATE_SHTDIM = ME->GET_PRVDR_SHTDIM( IR_GATE_SPEC = LR_GATE_SPEC ).

***------------------------------------------------------------------------------------------------
*** Find Provider for Score string Manager
  LR_GATE_SCSTR_MGR = ME->GET_PRVDR_SCSTR_MGR( IR_GATE_SPEC = LR_GATE_SPEC ).

*** Find Provider for Score Strings
  LT_GATE_SCSTR = ME->GET_PRVDR_SCSTR( IR_GATE_SPEC  = LR_GATE_SPEC
                                       IF_SCSOP      = ZCL_VCXI_P0SS_BL_SCSOP_SLIT=>C_SCSOP_SLIT_SCORE ).

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep for each Direction if needed
  loop at LT_GATE_SCSTR into LR_GATE_SCSTR.

    try.
        move LR_GATE_SCSTR->R_CLSPR ?to LR_PR_SCSTR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SCSTR.
    endtry.

    check   LR_PR_SCSTR               is bound        and
          ( LR_PR_SCSTR->GET_CSCOR( ) is not initial  or
            LR_PR_SCSTR->GET_DIVDI( ) is not initial ).

*** Collect all Provider
    free: LT_PRVDR_SAW.
    append LR_GATE_SHTDIM      to LT_PRVDR_SAW.
    append LR_GATE_SCSTR       to LT_PRVDR_SAW.
    if LR_GATE_SCSTR_MGR is bound.
      append LR_GATE_SCSTR_MGR to LT_PRVDR_SAW.
    endif.

*** Create BL PStep
    create object LR_BL_PSTEP_SAW
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_SAW to CT_BL_PSTEP.
    move LR_PR_SCSTR->GET_SHTDI( ) to LR_BL_PSTEP_SAW->F_SHTDI.
    LR_BL_PSTEP_SAW->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                   IT_PRVDR = LT_PRVDR_SAW ).
  endloop.

endmethod.
method GET_BL_PSTEP_TAPE.

  data:  LT_GATE_TAPE      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SCSTR     type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_TAPE     type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SPEC      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_TAPE      type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SCSTR_MGR type ref to /VCXI/CL_VKSR_GATE,
         LR_BL_PSTEP_TAPE  type ref to ZCL_VCXI_P0SR_BL_PSTEP_TAPE,
         LR_APPDATA        type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

*** Find Provider for Tape
  LT_GATE_TAPE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MS_TAPE=>C_IPRVT_P0_MS_TAPE
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).
  check LT_GATE_TAPE is not initial.
  loop at LT_GATE_TAPE into LR_GATE_TAPE.
    if LR_GATE_TAPE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) ne ABAP_TRUE.
      delete LT_GATE_TAPE.
    endif.
  endloop.
  check LT_GATE_TAPE is not initial.

***------------------------------------------------------------------------------------------------
*** Get Provider for Score String Manager
  LR_GATE_SCSTR_MGR = ME->GET_PRVDR_SCSTR_MGR( IR_GATE_SPEC = LR_GATE_SPEC ).
  check LR_GATE_SCSTR_MGR is bound.

*** Find Provider for Score Strings
  LT_GATE_SCSTR = ME->GET_PRVDR_SCSTR( IR_GATE_SPEC = LR_GATE_SPEC
                                       IT_GATE_TAPE = LT_GATE_TAPE ).

*** Add all needed Operations with Tape Definition
  loop at LT_GATE_SCSTR into LR_GATE_SCSTR.
    check LR_GATE_SCSTR is bound.

    clear: LT_PRVDR_TAPE.

*** Get Application Data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Collect all Provider
    append          LR_GATE_SCSTR     to LT_PRVDR_TAPE.
    append          LR_GATE_SCSTR_MGR to LT_PRVDR_TAPE.
    append lines of LT_GATE_TAPE      to LT_PRVDR_TAPE.

*** Create BL PStep
    create object LR_BL_PSTEP_TAPE
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_TAPE to CT_BL_PSTEP.
    LR_BL_PSTEP_TAPE->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR_TAPE ).
  endloop.

endmethod.
method GET_BL_PSTEP_UNIT.

  data:  LT_GATE_SHIPMGR         type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SHIPUNIT        type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PACKMAT         type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PSCALE          type        /VCXI/VKSR_TT_GATE,
         LT_GATE_PSCALE_TMP      type        /VCXI/VKSR_TT_GATE,
         LT_GATE_CPM             type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR                type        /VCXI/VKSR_TT_GATE.
  data:  LR_BL_PSTEP_UNIT        type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT,
         LR_PR_SHIPMGR           type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
         LR_GATE_SHIPMGR         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHIPUNIT        type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PACKMAT         type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_PSCALE          type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_CPM             type ref to /VCXI/CL_VKSR_GATE,
         LR_APPDATA              type ref to /VCXI/CL_VKSR_APPDATA.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                           IF_INUSE = ABAP_TRUE ).
  check LT_GATE_SHIPMGR is not initial.

  read table LT_GATE_SHIPMGR into LR_GATE_SHIPMGR index 1.
  check LR_GATE_SHIPMGR is bound.
  try.
      move LR_GATE_SHIPMGR->R_CLSPR ?to LR_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SHIPMGR.
  endtry.
  check LR_PR_SHIPMGR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_SHIPUNIT.
    endif.
  endloop.

  check LT_GATE_SHIPUNIT is not initial.

*** Filter Shipping Units
  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                  changing  CT_GATE        = LT_GATE_SHIPUNIT ).

  check LT_GATE_SHIPUNIT is not initial.

*** Sort Shipping Units
  if lines( LT_GATE_SHIPUNIT ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_SHIPUNIT ).
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Packaging Materials
  LT_GATE_PACKMAT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                           IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
    if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_PACKMAT.
      continue.
    endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Price Scales
    LT_GATE_PSCALE_TMP = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                                IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE_PSCALE_TMP into LR_GATE_PSCALE.
      if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE_PACKMAT ) ne ABAP_TRUE.
        delete LT_GATE_PSCALE_TMP.
      endif.
    endloop.
    append lines of LT_GATE_PSCALE_TMP to LT_GATE_PSCALE.
  endloop.

*** Sort Packaging Materials
  if lines( LT_GATE_PACKMAT ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_PACKMAT ).
  endif.

***------------------------------------------------------------------------------------------------
*** Find Provider for Configured Packaging Materials
  LT_GATE_CPM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_CPM=>C_IPRVT_XCS_CPM
                                       IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_CPM into LR_GATE_CPM.
    if LR_GATE_CPM->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_CPM.
      continue.
    endif.
  endloop.

*** Sort Configured Packaging Materials
  if lines( LT_GATE_CPM ) gt 1.
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CPM ).
  endif.

*** Get Application Data
  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***------------------------------------------------------------------------------------------------
*** Create BL PStep
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    clear: LT_PRVDR.

*** Get Shipping Manager as Provider.
    append LR_GATE_SHIPMGR to LT_PRVDR.

*** Get Shipping Unit as Provider.
    append LR_GATE_SHIPUNIT to LT_PRVDR.

*** Get Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_PACKMAT into LR_GATE_PACKMAT.
      if LR_GATE_PACKMAT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_PACKMAT to LT_PRVDR.
      endif.

***   Get Price Scales which are in line with Packaging Material
      loop at LT_GATE_PSCALE into LR_GATE_PSCALE.
        if LR_GATE_PSCALE->IS_IN_LINE( IR_GATE = LR_GATE_PACKMAT ) eq ABAP_TRUE.
          append LR_GATE_PSCALE to LT_PRVDR.
        endif.
      endloop.
    endloop.

*** Get Configured Packaging Materials which are in line with Shipping Unit
    loop at LT_GATE_CPM into LR_GATE_CPM.
      if LR_GATE_CPM->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.
        append LR_GATE_CPM to LT_PRVDR.
      endif.
    endloop.

    create object LR_BL_PSTEP_UNIT
      exporting
        IF_DATE    = ME->F_DATE
        IR_APPDATA = LR_APPDATA.
    append LR_BL_PSTEP_UNIT to CT_BL_PSTEP.
    LR_BL_PSTEP_UNIT->INIT_BY_SPEC( IR_GATE  = ME->R_GATE
                                    IT_PRVDR = LT_PRVDR ).

  endloop.

endmethod.
method GET_CPM_RTESEL.

  data:          LF_INDEX_SHUNT_UNIT type        N length 3,
                 LF_INDEX_SHUNT_GRP  type        N length 3,
                 LF_INDEX_SHUNT      type        N length 3,
                 LF_INDEX_CPM        type        N length 3.
  data:          LT_GATE_SHIPMGR     type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_SHIPUNIT    type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_RTESPV      type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_UNIT        type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_GROUP       type        /VCXI/VKSR_TT_GATE.
  data:          LR_PR_SHIPMGR       type ref to ZCL_VCXI_XCSU_PR_SHIPMGR,
                 LR_PR_SHIPUNIT      type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT,
                 LR_GATE_SHIPMGR     type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_SHIPUNIT    type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_RTESPV      type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_RTESPV_BOX    type ref to ZCL_VCXI_P0SR_PR_RTESPV,
                 LR_PR_RTESPV_AS     type ref to ZCL_VCXI_P0SR_PR_RTESPV_AS.
  field-symbols: <S_CPM_RTESEL>      type        ZVCXI_P0SR_S_CPM_RTESEL,
                 <S_COMP_RTESEL>     type        ZVCXI_P0SR_S_COMP_RTESEL.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Manager
  LT_GATE_SHIPMGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                           IF_INUSE = ABAP_TRUE ).
  check LT_GATE_SHIPMGR is not initial.

  read table LT_GATE_SHIPMGR into LR_GATE_SHIPMGR index 1.
  check LR_GATE_SHIPMGR is bound.
  try.
      move LR_GATE_SHIPMGR->R_CLSPR ?to LR_PR_SHIPMGR.
    catch CX_SY_MOVE_CAST_ERROR.
      clear:  LR_PR_SHIPMGR.
  endtry.
  check LR_PR_SHIPMGR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Shipping Units
  LT_GATE_SHIPUNIT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                            IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.
    if LR_GATE_SHIPUNIT->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR ) ne ABAP_TRUE.
      delete LT_GATE_SHIPUNIT.
    endif.
  endloop.

  move LT_GATE_SHIPUNIT to: LT_GATE_UNIT, LT_GATE_GROUP.

*** Filter Shipping Units ( Grouping and Unit )
  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_UNIT
                                  changing  CT_GATE        = LT_GATE_UNIT ).

  LR_PR_SHIPMGR->FILTER_BY_SHUTY( exporting IF_ATTID_SHUTY = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_ATTID_SHUTY_GROUP
                                  changing  CT_GATE        = LT_GATE_GROUP ).

  clear: LT_GATE_SHIPUNIT.
  append lines of LT_GATE_UNIT  to LT_GATE_SHIPUNIT.
  append lines of LT_GATE_GROUP to LT_GATE_SHIPUNIT.

  check LT_GATE_SHIPUNIT is not initial.

*** Find Provider for Routing Supervisor of Configured Packaging Material
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                          IF_INUSE = ABAP_TRUE ).
  check LT_GATE_RTESPV is not initial.

***------------------------------------------------------------------------------------------------
*** Loop at Shipping Units
  loop at LT_GATE_SHIPUNIT into LR_GATE_SHIPUNIT.

    clear: LF_INDEX_CPM.
*** Check if its UNIT or Group
    read table LT_GATE_UNIT from LR_GATE_SHIPUNIT transporting no fields.
    if SY-SUBRC = 0.
      add 1 to LF_INDEX_SHUNT_UNIT.
      move LF_INDEX_SHUNT_UNIT to LF_INDEX_SHUNT.
    endif.
    read table LT_GATE_GROUP from LR_GATE_SHIPUNIT transporting no fields.
    if SY-SUBRC = 0.
      add 1 to LF_INDEX_SHUNT_GRP.
      move LF_INDEX_SHUNT_GRP to LF_INDEX_SHUNT.
    endif.

*** Get Routing Supervisor Configured Packaging Material
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_SHIPUNIT ) eq ABAP_TRUE.

***  Get Shipping Unit Element
      try.
          move LR_GATE_SHIPUNIT->R_CLSPR ?to LR_PR_SHIPUNIT.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
      check LR_PR_SHIPUNIT is bound.

***   Add new Entry
      append initial line to RT_CPM_RTESEL assigning <S_CPM_RTESEL>.
      move LR_PR_SHIPUNIT->GET_SHUNT( )  to <S_CPM_RTESEL>-SHUNT.

***   Set MF X-Connect
      add 1 to LF_INDEX_CPM.
      concatenate 'CPM' LF_INDEX_SHUNT LF_INDEX_CPM into <S_CPM_RTESEL>-IMFXC separated by SPACE.

***------------------------------------------------------------------------------------------------
***   First try standard Box
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV_BOX.
          check LR_PR_RTESPV_BOX is bound.

***       Refresh Auto and get Selected Route
          LR_PR_RTESPV_BOX->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).
          move LR_PR_RTESPV_BOX->R_RTESEL to <S_CPM_RTESEL>-R_RTESEL.
          move 'PC_BOX'                   to <S_CPM_RTESEL>-SPVCE_ID.
          if <S_CPM_RTESEL>-R_RTESEL is not bound.
***         No Selected Route defined.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSR'
                                                  IF_MSGNO = '310' ).
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_RTESPV_BOX.
      endtry.


***------------------------------------------------------------------------------------------------
***   Second try AS
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV_AS.
          check LR_PR_RTESPV_AS is bound.

***       Refresh Auto and get Selected Route
          LR_PR_RTESPV_AS->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).
          move LR_PR_RTESPV_AS->R_RTESEL to <S_CPM_RTESEL>-R_RTESEL.
          move 'PC_AS'                   to <S_CPM_RTESEL>-SPVCE_ID.
          if <S_CPM_RTESEL>-R_RTESEL is not bound.
***         No Selected Route defined.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSR'
                                                  IF_MSGNO = '310' ).
          endif.

***       Find Components
          <S_CPM_RTESEL>-T_COMP_RTESEL = LR_PR_RTESPV_AS->GET_CPM_COMP_RTESEL( ).

          loop at <S_CPM_RTESEL>-T_COMP_RTESEL assigning <S_COMP_RTESEL>.
            concatenate <S_CPM_RTESEL>-IMFXC '_' <S_COMP_RTESEL>-IMFXC into <S_COMP_RTESEL>-IMFXC.
          endloop.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_RTESPV_BOX.
      endtry.

    endloop.
  endloop.

endmethod.
method GET_CSPLIT.

  data:          LF_INLINE      type        ABAP_BOOL.
  data:          LS_DIKEY       type        ZVCXI_P0SS_S_DIKEY.
  data:          LT_GATE        type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_COMP   type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SE  type ref to ZCL_VCXI_P0SS_PR_COMP_SE,
                 LR_PR_COMP_FG  type ref to ZCL_VCXI_P0SS_PR_COMP_FG.
  field-symbols: <S_CSPLIT>     type        ZVCXI_XCSR_S_CSPLIT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Component SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_COMP.

*** Find Provider for Component FG
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                   IF_INUSE  = ABAP_TRUE ).
  append lines of LT_GATE to LT_GATE_COMP.
  check LT_GATE_COMP is not initial.

*** Sort Components
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_COMP ).

***------------------------------------------------------------------------------------------------
*** Is inline with any Component
  loop at LT_GATE_COMP into LR_GATE.
    if ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
      move ABAP_TRUE to LF_INLINE.
      exit.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Build Cost Split
  loop at LT_GATE_COMP into LR_GATE.
*** If Routing Supervisor is Inline with Component only process this Component
    if LF_INLINE eq ABAP_TRUE.
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    endif.

*** Get PR Reference of Component
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
    endtry.
    if LR_PR_COMP_SE is bound.
***   Get Distribution Key of Component
      move LR_PR_COMP_SE->GET_DIKEY( ) to LS_DIKEY.

***   Add Component Cost Split
      append initial line to RT_CSPLIT assigning <S_CSPLIT>.
      <S_CSPLIT>-ICSPL = LR_PR_COMP_SE->GET_COMPN( ).
      shift <S_CSPLIT>-ICSPL left deleting leading SPACE.
      move LS_DIKEY-DIKEY              to <S_CSPLIT>-DCSPL.
      move LS_DIKEY-DIKEY_UOM          to <S_CSPLIT>-DCSPL_UOM.
      move LR_PR_COMP_SE->GET_COMPR( ) to <S_CSPLIT>-COMPR.
      move <S_CSPLIT>-COMPR            to <S_CSPLIT>-QFACT.

    else.

***   Get PR Reference of Component
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_COMP_FG.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_COMP_FG.
      endtry.
      if LR_PR_COMP_FG is bound.
***     Get Distribution Key of Component
        move LR_PR_COMP_FG->GET_DIKEY( ) to LS_DIKEY.

***     Add Component Cost Split
        append initial line to RT_CSPLIT assigning <S_CSPLIT>.
        <S_CSPLIT>-ICSPL = LR_PR_COMP_FG->GET_COMPN( ).
        shift <S_CSPLIT>-ICSPL left deleting leading SPACE.
        move LS_DIKEY-DIKEY              to <S_CSPLIT>-DCSPL.
        move LS_DIKEY-DIKEY_UOM          to <S_CSPLIT>-DCSPL_UOM.
        move LR_PR_COMP_FG->GET_COMPR( ) to <S_CSPLIT>-COMPR.
        move <S_CSPLIT>-COMPR            to <S_CSPLIT>-QFACT.
      else.
        continue.
      endif.
    endif.

***------------------------------------------------------------------------------------------------
*** If the Routing Supervisor is in line with the Component
    if LF_INLINE eq ABAP_TRUE.
***   Adjust Distribution Key of Cost Split to 100%
      move 100 to <S_CSPLIT>-DCSPL.
    endif.
  endloop.

endmethod.
method GET_EXQTY.

  if ME->R_PR_RTESPV_HL is not bound.
*** Get own Explosion Quantity
    move SUPER->GET_EXQTY( )              to RS_EXQTY.
  else.
*** Get Higher-Level Explosion Quantity
    move ME->R_PR_RTESPV_HL->GET_EXQTY( ) to RS_EXQTY.
  endif.

endmethod.
method GET_LAMI_RTESEL.

  data:          LR_PRVDR_SPEC        type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_LAMI         type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_LAMI           type ref to ZCL_VCXI_P0SS_PR_LAMI,
                 LR_GATE_RTESPV       type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_RTESPV_CB      type ref to ZCL_VCXI_PFSR_PR_RTESPV,
                 LR_PR_RTESPV_UCB     type ref to ZCL_VCXI_PFSR_PR_RTESPV_UCB.
  data:          LT_GATE_LAMI         type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_RTESPV       type        /VCXI/VKSR_TT_GATE.
  field-symbols: <S_LAMI_RTESEL>      type        ZVCXI_P0SR_S_LAMI_RTESEL.

***------------------------------------------------------------------------------------------------
*** Get Provider Specification
  LR_PRVDR_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_PRVDR_SPEC is bound.

*** Find Provider for Laminating
  LT_GATE_LAMI = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).
  check LT_GATE_LAMI is not initial.

*** Find Provider for Routing Supervisor of Lamination
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                          IF_INUSE = ABAP_TRUE ).
  check LT_GATE_RTESPV is not initial.

***------------------------------------------------------------------------------------------------
*** Loop at Laminating
  loop at LT_GATE_LAMI into LR_GATE_LAMI.
    check LR_GATE_LAMI->IS_IN_LINE( IR_GATE = LR_PRVDR_SPEC ) eq ABAP_TRUE.

*** Get Lamination Element
    try.
        move LR_GATE_LAMI->R_CLSPR ?to LR_PR_LAMI.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
    check LR_PR_LAMI is bound.

*** Add new Entry
    append initial line to RT_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
    move LR_PR_LAMI->GET_LASID( )  to <S_LAMI_RTESEL>-LASID.

*** Set MF X-Connect
    move <S_LAMI_RTESEL>-LASID to <S_LAMI_RTESEL>-IMFXC.

*** Get Routing Supervisor Laminating
    loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
      check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_LAMI ) eq ABAP_TRUE.

***------------------------------------------------------------------------------------------------
***   Try as Converted Board
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV_CB.
          check LR_PR_RTESPV_CB is bound.

***       Refresh Auto and get Selected Route
          LR_PR_RTESPV_CB->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).
          move LR_PR_RTESPV_CB->R_RTESEL to <S_LAMI_RTESEL>-R_RTESEL_CB.
          if <S_LAMI_RTESEL>-R_RTESEL_CB is not bound.
***         No Selected Route defined.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSR'
                                                  IF_MSGNO = '310' ).
          endif.

***       Get UCB of CB
          move LR_PR_RTESPV_CB->GET_UCB_RTESEL( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_RTESPV_CB.
      endtry.

***------------------------------------------------------------------------------------------------
***   Try as Unconverted Board
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to LR_PR_RTESPV_UCB.
          check LR_PR_RTESPV_UCB is bound.

***       Refresh Auto and get Selected Route
          LR_PR_RTESPV_UCB->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).
          move LR_PR_RTESPV_UCB->R_RTESEL to <S_LAMI_RTESEL>-R_RTESEL_UCB.
          if <S_LAMI_RTESEL>-R_RTESEL_UCB is not bound.
***         No Selected Route defined.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSR'
                                                  IF_MSGNO = '310' ).
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_RTESPV_UCB.
      endtry.

    endloop.
  endloop.

endmethod.
method GET_MFMI.

  data: LS_MFMI_P type          ZVCXI_P0SR_S_MFMI_P,
        LS_PCDIM  type          ZVCXI_P0SP_S_PCDIM,
        LS_CALIP  type          ZVCXI_P0SS_S_CALIP,
        LS_BAWGT  type          ZVCXI_P0S_S_BAWGT,
        LS_BAWGP  type          ZVCXI_P0S_S_BAWGP.
  data: LT_GATE        type          /VCXI/VKSR_TT_GATE,
        LT_GATE_SPEC   type          /VCXI/VKSR_TT_GATE,
        LT_GATE_SHTDIM type          /VCXI/VKSR_TT_GATE.
  data: LR_GATE        type ref to   /VCXI/CL_VKSR_GATE,
        LR_GATE_SHTPR  type ref to   /VCXI/CL_VKSR_GATE,
        LR_GATE_SPEC   type ref to   /VCXI/CL_VKSR_GATE,
        LR_GATE_SHTDIM type ref to   /VCXI/CL_VKSR_GATE,
        LR_PR_MS_SHTPR type ref to   ZCL_VCXI_P0SS_PR_MS_SHTPR,
        LR_SHTDIM      type ref to   ZIF_VCXI_P0SS_SHTDIM,
        LR_PR_PSCALE   type ref to   ZCL_VCXI_XCS_PR_PSCALE.
  field-symbols: <T_MFMI>   type standard table.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LT_GATE_SPEC = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                        IF_INUSE  = ABAP_TRUE
                                        IF_SORTED = ABAP_TRUE ).

  read table LT_GATE_SPEC into LR_GATE_SPEC index 1.
  check LR_GATE_SPEC is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Sheet Procurement
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MS_SHTPR=>C_IPRVT_P0_MS_SHTPR
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  loop at LT_GATE into LR_GATE_SHTPR.
*** Check is child of Specification
    check LR_GATE_SHTPR->GET_PARENT( ) eq LR_GATE_SPEC.
    try.
        move LR_GATE_SHTPR->R_CLSPR ?to LR_PR_MS_SHTPR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_SHTPR.
    endtry.
    exit.
  endloop.

  check LR_PR_MS_SHTPR is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Sheet Dimension
  LT_GATE_SHTDIM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
                                          IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SHTDIM into LR_GATE_SHTDIM.
*** Check is child of Specification
    check LR_GATE_SHTDIM->GET_PARENT( ) eq LR_GATE_SPEC.
    try.
        move LR_GATE_SHTDIM->R_CLSPR ?to LR_SHTDIM.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_SHTDIM.
    endtry.
    exit.
  endloop.

  check LR_SHTDIM is bound.

*** Create Data Reference
  create data RR_MFMI type table of ZVCXI_P0SR_S_MFMI_P.
  assign RR_MFMI->* to <T_MFMI>.

  move LR_PR_MS_SHTPR->GET_MATNR( ) to LS_MFMI_P-MATNR.
  move LR_PR_MS_SHTPR->GET_PURCH( ) to LS_MFMI_P-PURCH.

  move 100                          to LS_MFMI_P-MFISP.
  move '%'                          to LS_MFMI_P-MFISP_UOM.

  move 1                            to LS_MFMI_P-MFICF.
  move 1                            to LS_MFMI_P-MFICP.

  move LR_PR_MS_SHTPR->GET_SANKA( ) to LS_MFMI_P-SANKA.

  LS_PCDIM = LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_BFDIV ).

  move LS_PCDIM-PCLEN               to LS_MFMI_P-PCLEN.
  move LS_PCDIM-PCLEN_UOM           to LS_MFMI_P-PCLEN_UOM.

  move LS_PCDIM-PCWID               to LS_MFMI_P-PCWID.
  move LS_PCDIM-PCWID_UOM           to LS_MFMI_P-PCWID_UOM.

  LS_CALIP = LR_PR_MS_SHTPR->GET_CALIP( ).
  move LS_CALIP-CALIP               to LS_MFMI_P-PCHEI.
  move LS_CALIP-CALIP_UOM           to LS_MFMI_P-PCHEI_UOM.

  LS_BAWGT = LR_PR_MS_SHTPR->GET_BAWGT( ).
  move LS_BAWGT-BAWGT               to LS_MFMI_P-BAWGT.
  move LS_BAWGT-BAWGT_UOM           to LS_MFMI_P-BAWGT_UOM.

  LS_BAWGP = LR_PR_MS_SHTPR->GET_BAWGP( ).
  move LS_BAWGP-BAWGP               to LS_MFMI_P-BAWGP.
  move LS_BAWGP-BAWGP_UOM           to LS_MFMI_P-BAWGP_UOM.

  move LS_PCDIM-PCUPS               to LS_MFMI_P-PCUPS.

  move 'A'                          to LS_MFMI_P-PCDIR.

  move 'ZVCXI_P0_SHEET'             to LS_MFMI_P-PCTYP.

  move LR_PR_MS_SHTPR->GET_LIFNR( ) to LS_MFMI_P-LIFNR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Price Scale
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
***     Check Scale is part of Sheet Procurement
        check LR_GATE->GET_PARENT( ) eq LR_GATE_SHTPR.
        move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_PSCALE.
    endtry.
    check LR_PR_PSCALE is bound.

*** Add Price Scales
    append value #( ISVCE   = LR_GATE->F_ID
                    S_PSQTY = LR_PR_PSCALE->GET_PSQTY( )
                    S_PRICE = LR_PR_PSCALE->GET_PRICE( )
                    S_PRICP = LR_PR_PSCALE->GET_PRICP( )
                  ) to LS_MFMI_P-T_PSCALE.
  endloop.

*** Append Material Flow Material to Data Reference
  append LS_MFMI_P to <T_MFMI>.

endmethod.
method GET_MFSI.

  data:          LS_MFSI_P             type          ZVCXI_P0SR_S_MFSI_P,
                 LS_PCDIM              type          ZVCXI_P0SP_S_PCDIM.
  data:          LT_GATE_COMP_SE       type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_SPEC          type ref to   /VCXI/CL_VKSR_GATE,
                 LR_GATE_COMP_SE       type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SE         type ref to   ZCL_VCXI_P0SS_PR_COMP_SE.
  field-symbols: <T_MFSI>              type standard table.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LR_GATE_SPEC = ME->GET_PRVDR_SPEC( ).
  check LR_GATE_SPEC is bound.

***------------------------------------------------------------------------------------------------
*** Find Components SE as Parent of Specification
  LT_GATE_COMP_SE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                           IF_INUSE  = ABAP_TRUE ).

  loop at LT_GATE_COMP_SE into LR_GATE_COMP_SE.
    check LR_GATE_COMP_SE eq LR_GATE_SPEC->GET_PARENT( ).
    try.
        move LR_GATE_COMP_SE->R_CLSPR ?to LR_PR_COMP_SE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
    endtry.
  endloop.
  check LR_PR_COMP_SE is bound.

***------------------------------------------------------------------------------------------------
*** Create Data Reference
  create data RR_MFSI type table of ZVCXI_P0SR_S_MFSI_P.
  assign RR_MFSI->* to <T_MFSI>.

*** Get PC Dimensions
  LS_PCDIM = LR_PR_COMP_SE->ZIF_VCXI_P0SS_PRODDIM~GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_PRODDIM=>C_POOTI_PRODUCT ).
  move-corresponding LS_PCDIM to LS_MFSI_P.

*** Append Material Flow SFG to Data Reference
  append LS_MFSI_P to <T_MFSI>.

endmethod.
method GET_PRVDR_BASE.
endmethod.
method GET_PRVDR_COMP_SE.

  data:  LT_GATE_COMP_SE  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_COMP_SE  type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Component SE
  LT_GATE_COMP_SE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                           IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_COMP_SE into LR_GATE_COMP_SE.
*** Check is parent of Specification
    check LR_GATE_COMP_SE eq IR_GATE_SPEC->GET_PARENT( ).
    move LR_GATE_COMP_SE to RR_GATE_COMP_SE.
    exit.
  endloop.

endmethod.
method GET_PRVDR_DCT.

  data:  LT_GATE_DCT  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_DCT  type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Sheet
  LT_GATE_DCT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_DCT=>C_IPRVT_P0_DCT
                                       IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_DCT into LR_GATE_DCT.
*** Check is child of Specification
    check LR_GATE_DCT->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_DCT to RR_GATE_DCT.
    exit.
  endloop.

endmethod.
method GET_PRVDR_PRODDIM.

  data:  LT_GATE_PRODDIM  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_PRODDIM  type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Product Dimensions
  LT_GATE_PRODDIM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_PRODDIM=>C_IPRVT_P0_PRODDIM
                                           IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_PRODDIM into LR_GATE_PRODDIM.
*** Check is child of Specification
    check LR_GATE_PRODDIM->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_PRODDIM to RR_GATE_PRODDIM.
    exit.
  endloop.

endmethod.
method GET_PRVDR_SCSTR.

  data:  LR_GATE_SCSTR  type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SCSTR    type ref to ZCL_VCXI_P0SS_PR_SCSTR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Score Strings
  RT_GATE_SCSTR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SCSTR=>C_IPRVT_P0_SCSTR
                                         IF_INUSE = ABAP_TRUE ).


  loop at RT_GATE_SCSTR into LR_GATE_SCSTR.
*** Check is child of Specification
    if LR_GATE_SCSTR->IS_IN_LINE( IR_GATE = IR_GATE_SPEC ) eq ABAP_FALSE.
      delete RT_GATE_SCSTR.
      continue.
    endif.

    if IF_SCSOP is supplied or
       IF_CSCOR is supplied.
      try.
          move LR_GATE_SCSTR->R_CLSPR ?to LR_PR_SCSTR.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SCSTR.
      endtry.

      if LR_PR_SCSTR is not bound.
        delete RT_GATE_SCSTR.
        continue.
      endif.

***   Collect Score String with Operation and/or Score Category
      if IF_SCSOP                  is supplied and
         LR_PR_SCSTR->GET_SCSOP( ) ne IF_SCSOP.
        delete RT_GATE_SCSTR.
        continue.
      endif.

      if IF_CSCOR                  is supplied and
         LR_PR_SCSTR->GET_CSCOR( ) ne IF_CSCOR.
        delete RT_GATE_SCSTR.
        continue.
      endif.
    endif.

  endloop.

*** Collect all Tape Types to return only Score Strings with Tapes
  if IT_GATE_TAPE is supplied.
    ZCL_VCXI_P0SS_CUST_SCSTR=>FILTER_TAPE_SCSTR( exporting IT_GATE_TAPE  = IT_GATE_TAPE
                                                 changing  CT_GATE_SCSTR = RT_GATE_SCSTR ).
  endif.

endmethod.
method GET_PRVDR_SCSTR_MGR.

  data:  LT_GATE_SCSTR_MGR  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SCSTR_MGR  type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Find Provider for Score String Maager
  LT_GATE_SCSTR_MGR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_IPRVT_P0_SCSTR_MGR
                                             IF_INUSE = ABAP_TRUE ).


  loop at LT_GATE_SCSTR_MGR into LR_GATE_SCSTR_MGR.
*** Check is child of Specification
    check LR_GATE_SCSTR_MGR->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_SCSTR_MGR to RR_GATE_SCSTR_MGR.
  endloop.

endmethod.
method GET_PRVDR_SHTDIM.

  data:  LT_GATE_SHTDIM  type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_SHTDIM  type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Sheet
  LT_GATE_SHTDIM = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
                                          IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_SHTDIM into LR_GATE_SHTDIM.
*** Check is child of Specification
    check LR_GATE_SHTDIM->GET_PARENT( ) eq IR_GATE_SPEC.
    move LR_GATE_SHTDIM to RR_GATE_SHTDIM.
    exit.
  endloop.

endmethod.
method GET_PRVDR_SPEC.

  data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

  read table LT_GATE into RR_GATE index 1.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  if ME->R_PR_RTESPV_HL is bound.
    set handler ME->HANDLE_PROD_FILLED for ME->R_PR_RTESPV_HL activation ABAP_FALSE.
    clear ME->R_PR_RTESPV_HL.
  endif.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE_RTESPV     type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SPEC_HL    type        /VCXI/VKSR_TT_GATE,
         LT_GATE_SHIPMGR_HL type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE_RTESPV     type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC       type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC_HL    type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SHIPMGR_HL type ref to /VCXI/CL_VKSR_GATE.

  SUPER->HANDLE_INIT_REFERENCES( ).

*** Get Specification
  move ME->GET_PRVDR_SPEC( ) to LR_GATE_SPEC.
  check LR_GATE_SPEC is bound.

***------------------------------------------------------------------------------------------------
*** Get Routing Supervisors for Higher Level
  LT_GATE_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                          IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE_RTESPV into LR_GATE_RTESPV.
    check LR_GATE_RTESPV          is bound and
          LR_GATE_RTESPV->R_CLSPR is bound.

*** HigherLevel Supervisors shouldn't be InLine with my Specification
    check LR_GATE_RTESPV->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) ne ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** First Try with Specification
*** Get Specification of potential HL Supervisor
    LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                                 IF_INUSE = ABAP_TRUE ).
    if LT_GATE_SPEC_HL is initial.
      LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_AS=>C_IPRVT_P0_SPEC_AS
                                                   IF_INUSE = ABAP_TRUE ).
      if LT_GATE_SPEC_HL is initial.
        LT_GATE_SPEC_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC_SE=>C_IPRVT_P0_SPEC_SE
                                                     IF_INUSE = ABAP_TRUE ).
      endif.
    endif.

    loop at LT_GATE_SPEC_HL into LR_GATE_SPEC_HL.
***   Specification of HigherLevel Supervisors should be InLine me
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC_HL ) eq ABAP_TRUE.


***   Get PR Reference
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to ME->R_PR_RTESPV_HL.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** Second Try with Shipping Manager
*** Get Shipping Manager of potential HL Supervisor
    LT_GATE_SHIPMGR_HL = LR_GATE_RTESPV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                                    IF_INUSE = ABAP_TRUE ).


    loop at LT_GATE_SHIPMGR_HL into LR_GATE_SHIPMGR_HL.
***   Shipping Manager of HigherLevel Supervisors should be InLine me
      check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SHIPMGR_HL ) eq ABAP_TRUE.

***   Get PR Reference
      try.
          move LR_GATE_RTESPV->R_CLSPR ?to ME->R_PR_RTESPV_HL.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endloop.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  if ME->R_PR_RTESPV_HL is bound.
    set handler ME->HANDLE_PROD_FILLED for ME->R_PR_RTESPV_HL.
  endif.

endmethod.
method HANDLE_PROD_FILLED.

  data:  LR_BL_PRTE    type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
      if ME->R_PR_RTESPV_HL is not bound.
        SUPER->HANDLE_PROD_FILLED( IR_BL_PRTE = IR_BL_PRTE ).
      else.
***     If it is me
        if IR_BL_PRTE eq ME->R_RTESEL.
***       Copy and process
          if ME->R_RTESEL is bound.
            move ME->R_RTESEL->COPY( ) to LR_BL_PRTE.
          endif.
          SUPER->HANDLE_PROD_FILLED( IR_BL_PRTE = LR_BL_PRTE ).
        else.
***       Trigger for Selected
          raise event PROD_FILLED exporting IR_BL_PRTE = ME->R_RTESEL.
        endif.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method IS_FILL_PROD_ALLOWED.

  data:  LR_PRVDR         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_RTESPV     type ref to ZCL_VCXI_XCSR_PR_RTESPV.
  data:  LT_PRVDR_RTESPV  type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_COMP_SE type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_OPQTY   type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR         type        /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Refresh Auto and get Selected Route
    ME->REFRESH_AUTO( ).
    ME->R_GATE->RAISE_EVENTS( ).

***--------------------------------------------------------------------------------------
  read table ME->T_RTEALT with key TABLE_LINE = ME->R_RTESEL
                          transporting no fields.
  if SY-SUBRC eq 0.
*** Be positive
    move ABAP_TRUE to EF_ALLOWED.

*** Ignore own Element for Routing Supervisor check
    append ME->R_GATE to CT_GATE_IGNORE.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor
    LT_PRVDR_RTESPV = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                             IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR_RTESPV into LR_PRVDR.
***   Check Routing Supervisor is not ignored
      read table CT_GATE_IGNORE with key TABLE_LINE = LR_PRVDR transporting no fields.
      check SY-SUBRC ne 0.

***   Get PR Reference
      try.
          move LR_PRVDR->R_CLSPR ?to LR_PR_RTESPV.
          check LR_PR_RTESPV is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Refresh Auto and get Selected Route
      LR_PR_RTESPV->REFRESH_AUTO( ).
      ME->R_GATE->RAISE_EVENTS( ).

***   Check if Fill is allowed
      LR_PR_RTESPV->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = EF_ALLOWED
                                          changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).
      if EF_ALLOWED ne ABAP_TRUE.
        exit.
      endif.
    endloop.
    check EF_ALLOWED eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Find Provider for Component SE
    LT_PRVDR_COMP_SE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                              IF_INUSE  = ABAP_TRUE ).

*** Find Provider for Operation Quantity
    LT_PRVDR_OPQTY = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                            IF_INUSE  = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Check Status of all Provider
    check EF_ALLOWED eq ABAP_TRUE.
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE ).
    loop at LT_PRVDR into LR_PRVDR.
***   Don't check other Routing Supervisors
      read table LT_PRVDR_RTESPV with key TABLE_LINE = LR_PRVDR
                                 transporting no fields.
      check SY-SUBRC ne 0.

      if ME->R_PR_RTESPV_HL is bound.
        if LR_PRVDR->R_CLSPR eq ME->R_PR_RTESPV_HL.

***       Check Routing Supervisor is not ignored
          read table CT_GATE_IGNORE with key TABLE_LINE = LR_PRVDR transporting no fields.
          check SY-SUBRC ne 0.

***       Refresh Auto and get Selected Route
          ME->R_PR_RTESPV_HL->REFRESH_AUTO( ).
          ME->R_GATE->RAISE_EVENTS( ).

          ME->R_PR_RTESPV_HL->IS_FILL_PROD_ALLOWED( importing EF_ALLOWED     = EF_ALLOWED
                                                    changing  CT_GATE_IGNORE = CT_GATE_IGNORE ).
          if EF_ALLOWED ne ABAP_TRUE.
            exit.
          else.
            continue.
          endif.
        endif.
      endif.

***   Only check PR Class Status if Provider is in line to me or my Lamination Routing Supervisors
      if LR_PRVDR->IS_IN_LINE( IR_GATE = ME->R_GATE ) eq ABAP_TRUE or
         ME->IS_IN_LINE_RTESPV( IR_PRVDR        = LR_PRVDR
                                IT_PRVDR_RTESPV = LT_PRVDR_RTESPV ) eq ABAP_TRUE.
        if LR_PRVDR->R_CLSPR is bound and
           LR_PRVDR->R_CLSPR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      else.
***     Skip Component SE
        read table LT_PRVDR_COMP_SE with key TABLE_LINE = LR_PRVDR
                                    transporting no fields.
        check SY-SUBRC ne 0.

***     Skip Operation Quantity
        read table LT_PRVDR_OPQTY with key TABLE_LINE = LR_PRVDR
                                  transporting no fields.
        check SY-SUBRC ne 0.

***     Check Status
        if LR_PRVDR->GET_STATUS( ) ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ABAP_FALSE to EF_ALLOWED.
          exit.
        endif.
      endif.
    endloop.
  endif.

endmethod.
method RERUN_PSTEP_PRINT.

  data:  LF_INDEX            type        I.
  data:  LT_MSG              type        /VCXI/CKXM_TT_MSG,
         LT_BL_PSTEP         type        ZVCXI_XCSR_TT_BL_PSTEP,
         LT_RTE_ARBPL        type        /VCXI/VSMR_TT_RTE_ARBPL.
  data:  LR_RTE_ARBPL        type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP        type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_PRINT   type ref to ZCL_VCXI_P0SR_BL_PSTEP_PRINT.

***----------------------------------------------------------------------------
*** Get Error Messages
  LT_MSG = IR_RTE_PRTE->GET_MSG( IF_MSGTY_S = ABAP_FALSE
                                 IF_MSGTY_I = ABAP_FALSE
                                 IF_MSGTY_W = ABAP_FALSE ).

*** Ignore Messages that can be resolved by Rerun
  delete LT_MSG where MSGV2 eq 'P0_LT_DP_COLOR_NUM_TOTAL'
                 or   MSGV2 eq 'P0_LT_DP_COLOR_NUM_STANDARD'.

*** Check no other Error Message exists...
  check LT_MSG is initial.

***----------------------------------------------------------------------------
*** Build Rerun Route
  loop at IR_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    move SY-TABIX to LF_INDEX.

*** Rerun needed?
    loop at LR_RTE_ARBPL->T_MSG transporting no fields
                                where   MSGTY eq 'E'
                                  and ( MSGV2 eq 'P0_LT_DP_COLOR_NUM_TOTAL'
                                   or   MSGV2 eq 'P0_LT_DP_COLOR_NUM_STANDARD' ).
      exit.
    endloop.
    check SY-SUBRC eq 0.

*** Find Printing Step
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      if LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ZCL_VCXI_P0SR_BL_PSTEP_PRINT=>C_IPSTP_PRINT.
        exit.
      else.
        clear LR_RTE_PSTEP.
      endif.
    endloop.
    check LR_RTE_PSTEP is bound.

*** Split BL PStep
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_PRINT.
        check LR_BL_PSTEP_PRINT is bound.
        LT_BL_PSTEP = LR_BL_PSTEP_PRINT->SPLIT_FOR_RERUN( IR_ARBPL = LR_RTE_ARBPL->R_ARBPL
                                                          IF_LCVAL = LR_RTE_ARBPL->F_LCVAL ).
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Split Work Center
    LT_RTE_ARBPL = ME->SPLIT_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL
                                        IR_RTE_PSTEP = LR_RTE_PSTEP
                                        IT_BL_PSTEP  = LT_BL_PSTEP ).

*** Replace Work Center
    delete IR_RTE_PRTE->T_RTE_ARBPL index LF_INDEX.
    insert lines of LT_RTE_ARBPL into IR_RTE_PRTE->T_RTE_ARBPL index LF_INDEX.

*** Mark for Recheck
    move ABAP_TRUE to RF_RECHECK.

  endloop.

endmethod.
method TURN_PCDIR.

  data: LF_PCDIR     type        ZVCXI_P0SP_PCDIR,
        LF_PREVIOUS  type        ABAP_BOOL,
        LF_MANDATORY type        ABAP_BOOL,
        LF_IPSTP     type        /VCXI/VSMC_IPSTP,
        LF_ILTYP     type        /VCXI/VSMC_ILTYP.
  data: LT_ILTYP_PSTEP   type        /VCXI/CKX_TT_ID,
        LT_ILTYP_ARBPL   type        /VCXI/CKX_TT_ID,
        LT_MSG           type        /VCXI/CKXM_TT_MSG,
        LT_RTE_PSTEP_ORG type        /VCXI/VSMR_TT_RTE_PSTEP,
        LT_RTE_PSTEP_NEW type        /VCXI/VSMR_TT_RTE_PSTEP,
        LT_MSG_ORG       type        /VCXI/CKXM_TT_MSG.
  data: LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_PCDIR         type ref to ZIF_VCXI_P0SR_PCDIR,
        LR_RTE_PSTEP_ORG type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP_ORG  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_RTE_PSEQ_NEW  type ref to /VCXI/CL_VSMR_RTE_PSEQ,
        LR_RTE_PSTEP_NEW type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP_NEW  type ref to ZCL_VCXI_XCSR_BL_PSTEP.

  check IR_RTE_ARBPL->R_ARBPL is bound.

*** Get current Direction
  if IF_PCDIR_PREV is not initial.
    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.

          move LR_PCDIR->F_PCDIR to LF_PCDIR.

          if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_PREVIOUS.
            move ABAP_TRUE to LF_PREVIOUS.
          endif.
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.
  endif.

  if not ( LF_PREVIOUS   eq ABAP_TRUE and
           IF_PCDIR_PREV is not initial and
           IF_PCDIR_PREV ne LF_PCDIR ).
*** Turn not because of prefere previous
    clear LF_PREVIOUS.

    check IR_RTE_ARBPL->T_MSG is not initial.
*** Get Error Messages
    move IR_RTE_ARBPL->T_MSG  to LT_MSG.
    delete LT_MSG where MSGTY eq 'S'
                   or   MSGTY eq 'I'
                   or   MSGTY eq 'W'.
    check LT_MSG is not initial.
  endif.

***----------------------------------------------------------------------------
*** Identify Limits that allow turning
  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
    try.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
        check LR_PCDIR is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    if LR_PCDIR->F_PCDOP eq ZIF_VCXI_P0SR_PCDIR=>C_PCDOP_MANDATORY.
      move ABAP_TRUE to LF_MANDATORY.
      exit.
    endif.

    move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_IPSTP.
    ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = LF_IPSTP
                                              importing ET_ILTYP = LT_ILTYP_PSTEP ).
    append lines of LT_ILTYP_PSTEP to LT_ILTYP_ARBPL.
  endloop.

  check LF_MANDATORY ne ABAP_TRUE.

  sort LT_ILTYP_ARBPL.
  delete adjacent duplicates from LT_ILTYP_ARBPL.

***----------------------------------------------------------------------------
  if LF_PREVIOUS ne ABAP_TRUE.
*** Ignore Messages that can be resolved by Turn
    loop at LT_ILTYP_ARBPL into LF_ILTYP.
      delete LT_MSG where MSGV2 eq LF_ILTYP.
    endloop.

*** Check no other Error Message exists...
    check LT_MSG is initial.
  endif.

***----------------------------------------------------------------------------
*** Buffer to be able to turn it back
  move IR_RTE_ARBPL->T_RTE_PSTEP to LT_RTE_PSTEP_ORG.
  move IR_RTE_ARBPL->T_MSG       to LT_MSG_ORG.


  loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP_ORG.
*** Create new Production Steps
    if LR_RTE_PSTEP_ORG->R_RTE_PSEQ is bound.
      create object LR_RTE_PSEQ_NEW
        exporting
          IR_PSEQ     = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_PSEQ
          IR_RTE_PSEQ = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_RTE_PSEQ.
      move LR_RTE_PSEQ_NEW->R_RTE_PSTEP to LR_RTE_PSTEP_NEW.
    else.
      create object LR_RTE_PSTEP_NEW
        exporting
          IR_PSTEP = LR_RTE_PSTEP_ORG->R_PSTEP.
    endif.
    append LR_RTE_PSTEP_NEW to LT_RTE_PSTEP_NEW.

*** Copy Link Context Value
    move LR_RTE_PSTEP_ORG->F_LCVAL to LR_RTE_PSTEP_NEW->F_LCVAL.

*** Create Copy of BL Production Steps
    try.
        move LR_RTE_PSTEP_ORG->R_BLOBJ ?to LR_BL_PSTEP_ORG.
        if LR_BL_PSTEP_ORG is bound.
          LR_BL_PSTEP_NEW = LR_BL_PSTEP_ORG->COPY( ).
          move LR_BL_PSTEP_NEW to LR_RTE_PSTEP_NEW->R_BLOBJ.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

*** Turn
    try.
        move LR_RTE_PSTEP_NEW->R_BLOBJ ?to LR_PCDIR.
        if LR_PCDIR is bound.
          case LR_PCDIR->F_PCDIR.
            when 'A'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'B' ).
            when 'B'.
              LR_PCDIR->SET_PCDIR( IF_PCDIR = 'A' ).
          endcase.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

*** Add new Limits
    LR_BL_PSTEP_NEW->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = LR_RTE_PSTEP_NEW ).
  endloop.

*** Set new Production Steps
  move LT_RTE_PSTEP_NEW to IR_RTE_ARBPL->T_RTE_PSTEP.

***----------------------------------------------------------------------------
*** Check Limits on Work Center Level
  IR_RTE_ARBPL->CHECK_LIMITS( ).

*** Get Error Messages
  move IR_RTE_ARBPL->T_MSG  to LT_MSG.
  delete LT_MSG where MSGTY eq 'S'
                 or   MSGTY eq 'I'
                 or   MSGTY eq 'W'.
  if LT_MSG is not initial.
*** Return to Original Direction
    move LT_RTE_PSTEP_ORG to IR_RTE_ARBPL->T_RTE_PSTEP.
    move LT_MSG_ORG       to IR_RTE_ARBPL->T_MSG.
  else.
*** Recheck complete Route
    move ABAP_TRUE to RF_RECHECK.
  endif.

endmethod.
method VALIDATE.

  data:  LF_PRINT    type        ABAP_BOOL,
         LF_RECHECK  type        ABAP_BOOL.
  data:  LR_BL_PRTE  type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_BL_PSTEP type ref to ZCL_VCXI_XCSR_BL_PSTEP.

  SUPER->VALIDATE( changing CT_BL_PRTE = CT_BL_PRTE ).

***------------------------------------------------------------------------------------------------
*** Search for Printing PStep
  loop at ME->T_BL_PSTEP into LR_BL_PSTEP.
    if LR_BL_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq ZCL_VCXI_P0SR_BL_PSTEP_PRINT=>C_IPSTP_PRINT.
      move ABAP_TRUE to LF_PRINT.
      exit.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Process Routes
  loop at CT_BL_PRTE into LR_BL_PRTE.
    clear LF_RECHECK.

***------------------------------------------------------------------------------------------------
*** Sheet Rotation
    if ME->VALIDATE_PCDIR( IR_BL_PRTE = LR_BL_PRTE ) eq ABAP_TRUE.
      move ABAP_TRUE to LF_RECHECK.
    endif.

*** Check for Reruns if Printing is active
    if LF_PRINT eq ABAP_TRUE.
      if ME->RERUN_PSTEP_PRINT( IR_RTE_PRTE = LR_BL_PRTE->R_RTE_PRTE ) eq ABAP_TRUE.
        move ABAP_TRUE to LF_RECHECK.
      endif.
    endif.

*** Recheck
    if LF_RECHECK eq ABAP_TRUE.
      LR_BL_PRTE->CHECK( ).
      LR_BL_PRTE->INIT_RELPO( ).
    endif.
  endloop.

endmethod.
method VALIDATE_PCDIR.

  data:  LF_PCDIR      type        ZVCXI_P0SP_PCDIR.
  data:  LR_BL_PRTE    type ref to ZCL_VCXI_P0SR_BL_PRTE,
         LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PCDIR      type ref to ZIF_VCXI_P0SR_PCDIR.

  try.
      move IR_BL_PRTE ?to LR_BL_PRTE.
      check LR_BL_PRTE is bound.
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***--------------------------------------------------------------------------------------
*** Check Mandetory Directions missmatch will not be fixed automatically
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
      catch /VCXI/CX_CKX.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Update Direction
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

      if LR_PCDIR->F_PCDIR ne LF_PCDIR.
***     Set Direction
        LR_PCDIR->SET_PCDIR( IF_PCDIR = LF_PCDIR ).
        move ABAP_TRUE to RF_RECHECK.
      endif.
    endloop.
  endloop.

*** Check
  if RF_RECHECK eq ABAP_TRUE.
    IR_BL_PRTE->CHECK( ).
  endif.

***--------------------------------------------------------------------------------------
*** Automatic Turn of Route
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    if ME->TURN_PCDIR( IR_RTE_ARBPL  = LR_RTE_ARBPL
                       IF_PCDIR_PREV = LF_PCDIR ) eq ABAP_TRUE.
      move ABAP_TRUE to RF_RECHECK.
    endif.

    if LR_BL_PRTE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_P0SR_BL_PRTE=>C_RSRCE_USER.
      try.
***       Get PC Direction of Work Center
          LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        catch /VCXI/CX_CKX.
          clear LF_PCDIR.
      endtry.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Adjust PC Direction of Material Flow In
  clear LF_PCDIR.
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    try.
***     Get PC Direction of Work Center
        LF_PCDIR = LR_BL_PRTE->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        exit.
      catch /VCXI/CX_CKX.
        clear LF_PCDIR.
    endtry.
  endloop.
  LR_BL_PRTE->SET_PCDIR_OF_MFI( IF_PCDIR = LF_PCDIR ).

endmethod.
