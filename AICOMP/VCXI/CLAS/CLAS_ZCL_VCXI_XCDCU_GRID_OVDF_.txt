
class ZCL_VCXI_XCDCU_GRID_OVDF definition
  public
  inheriting from ZCL_VCXI_XCDCU_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_POPUP_OVDF type ref to ZCL_VCXI_XCDCU_POPUP_OVDF .

  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods ADD_DVCFILTER
    raising
      /VCXI/CX_CKX .
  methods DELETE_DVCFILTER
    importing
      !IT_GDVCF type ZVCXI_XCD_TT_GDVCF
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_GRID_OVDF definition
class ZCL_VCXI_XCDCU_GRID_OVDF implementation.
method ADD_DVCFILTER.

  data: LF_RETURN           type                   ABAP_BOOL,
        LF_EXIT             type                   ABAP_BOOL,
        LF_IDVCF            type                   /VCXI/CKX_ID.
  data: LT_SVAL             type standard table of SVAL.
  field-symbols: <S_FIELD>  type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_DVCFILTER'.
  <S_FIELD>-FIELDNAME = 'IDVCF'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add DVC Filter'(A20)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'IDVCF'.
          move <S_FIELD>-VALUE to LF_IDVCF.
      endcase.
    endloop.

*** Check if ID of Filter is Specified
    check LF_IDVCF is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

*** Add Condition Validation
  ME->R_POPUP_OVDF->ADD_DVCFILTER( IF_IDVCF = LF_IDVCF ).

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCDCU_S_DVCFILTER_GRID'
                      IF_CONTAINER_NAME = '0100CC_GRID_OVDF'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).


*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_POPUP_OVDF.
    catch CX_SY_MOVE_CAST_ERROR.
***   Overview PopUp Instance Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCDCU'
          IF_MSGNO = '051' ).
 endtry.

endmethod.
method DELETE_DVCFILTER.

  data: LF_GDVCF type ZVCXI_XCD_GDVCF.

  loop at IT_GDVCF into LF_GDVCF.
*** Delete by Guid
    ME->R_POPUP_OVDF->DELETE_DVCFILTER( IF_GDVCF = LF_GDVCF ).

  endloop.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'GDVCF'.
        move ABAP_TRUE    to <S_FCAT>-TECH.
    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LF_GDVCF             type          ZVCXI_XCD_GDVCF,
                 LF_GUID              type          /VCXI/CKX_GUID.
  data:          LS_DVCFILTER_GRID    type          ZVCXI_XCDCU_S_DVCFILTER_GRID.
  data:          LR_DVCFILTER         type ref to   ZCL_VCXI_XCDC_DVCFILTER.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all DVC Filter
  loop at ME->R_POPUP_OVDF->R_UIFW->T_GDVCF into LF_GDVCF.
    clear: LS_DVCFILTER_GRID.

*** Get instance of DVC Filter
    try.
        move LF_GDVCF to LF_GUID.
        LR_DVCFILTER ?= ZCL_VCXI_XCDC_DVCFILTER=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_DVCFILTER.
    endtry.
    check LR_DVCFILTER is bound.

    LS_DVCFILTER_GRID-GDVCF = LF_GDVCF.
    LS_DVCFILTER_GRID-IDVCF = LR_DVCFILTER->/VCXI/IF_CKX_OBJECT~GET_ID( ).

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_DVCFILTER_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LF_GDVCF        type          ZVCXI_XCD_GDVCF.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any,
                 <F_FIELD>       type          any.

  try.

***   Get VALID Data
      assign ME->R_DATA->* to <T_DATA>.


***   Get Selected Filter
      read table <T_DATA> assigning <S_DATA> index E_ROW-INDEX.
      assign component 'GDVCF' of structure <S_DATA> to <F_FIELD>.
      check SY-SUBRC = 0.

      move <F_FIELD> to LF_GDVCF.


***   Open Filter
      ZCL_VCXI_XCDCU_POPUP_DVCFILTER=>CALL_POPUP( IF_GDVCF = LF_GDVCF ).

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_GDVCF        type          ZVCXI_XCD_TT_GDVCF.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any,
                 <F_GDVCF>       type          ZVCXI_XCD_GDVCF,
                 <F_FIELD>       type          any.

  try.

***   Get VALID Data
      assign ME->R_DATA->* to <T_DATA>.

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***     Add new Condition Validation
          ME->ADD_DVCFILTER( ).

        when C_FUNC_DEL.
***     Delete Condition Validation
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '301'.
          endif.

***       Get Selected Condition Validation's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            assign component 'GDVCF' of structure <S_DATA> to <F_FIELD>.
            check SY-SUBRC = 0.

            append initial line to LT_GDVCF assigning <F_GDVCF>.
            move <F_FIELD> to <F_GDVCF>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            assign component 'GDVCF' of structure <S_DATA> to <F_FIELD>.
            check SY-SUBRC = 0.

            append initial line to LT_GDVCF assigning <F_GDVCF>.
            move <F_FIELD> to <F_GDVCF>.
          endloop.

***       Delete Condition Validation's
          ME->DELETE_DVCFILTER( IT_GDVCF = LT_GDVCF ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

*** Not needed!

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
