
class ZCL_VCXI_XCM_MBQ_STP_S501 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S000
  create public .

public section.

  methods EXECUTE
    redefinition .
protected section.
private section.
endclass. "ZCL_VCXI_XCM_MBQ_STP_S501 definition
class ZCL_VCXI_XCM_MBQ_STP_S501 implementation.
  method EXECUTE.

*{   REPLACE        SBXK900074                                        1
*\    data: LF_ERROR type ABAP_BOOL.
*\    data: LS_MATLI    type ZVCXI_XCM_MBQ_S_MATLI,
*\          LS_BAPIRET2 type BAPIRET2.
*\    data: LT_BAPIRET2  type BAPIRETTAB.
*\    data: LR_BOB_PCR type ref to ZCL_VCXI_XCI_BOB_PCR,
*\          LR_ACTDAT  type ref to DATA.
*\    field-symbols: <S_ACTDAT_PCR> type ZVCXI_XCM_MBQ_S_ACTDAT_PCR.
*\
*\
*\    try.
*\***     Get Material List Entry of active Material List Entry
*\        LS_MATLI = ME->R_DCO_INPUT->T_MATLI[ MLCNT = ME->R_DCO_INPUT->F_MLCNT ].
*\
*\***     Check Activity - Create Pricing Condition Record
*\        if not LINE_EXISTS( LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PCR ] ).
*\***       Set Status to CANCELED
*\          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
*\          return.
*\        endif.
*\
*\***     Load Activity Control Data
*\        LR_ACTDAT = LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PCR ]-R_ACTDAT.
*\        assign LR_ACTDAT->* to <S_ACTDAT_PCR>.
*\
*\
*\***--------------------------------------------------------------------------------------
*\***     Start undefined
*\        LF_ERROR = ABAP_UNDEFINED.
*\
*\***     Process all Condition Records
*\        loop at <S_ACTDAT_PCR>-T_PCR into data(LS_PCR).
*\
*\***       Get Instance
*\          create object LR_BOB_PCR
*\            exporting
*\              IF_KVEWE = LS_PCR-KVEWE
*\              IF_KAPPL = LS_PCR-KAPPL
*\              IF_KSCHL = LS_PCR-KSCHL.
*\
*\***       Update Material Number in Allowed Fields for Condition Structures
*\          LS_PCR-S_KOMG-MATNR = LS_MATLI-MATNR.
*\
*\***       Create new Pricing Condition Record
*\          LR_BOB_PCR->CREATE( exporting IF_KOTABNR   = LS_PCR-KOTABNR
*\                                        IS_KOMG      = LS_PCR-S_KOMG
*\                                        IF_DATAB     = <S_ACTDAT_PCR>-VALID_FROM
*\                                        IF_DATBI     = <S_ACTDAT_PCR>-VALID_TO
*\                                        IF_KONWA     = LS_PCR-KONWA
*\                                        IF_KPEIN     = LS_PCR-KPEIN
*\                                        IF_KMEIN     = LS_PCR-KMEIN
*\                                        IF_STFKZ     = LS_PCR-STFKZ
*\                                        IT_CONDSCALE = LS_PCR-T_CONDSCALE
*\                              importing ET_BAPIRET2  = LT_BAPIRET2 ).
*\          loop at LT_BAPIRET2 into LS_BAPIRET2.
*\***         Add Message to Message Log
*\            ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
*\            if LS_BAPIRET2-TYPE eq 'E'.
*\              LF_ERROR = ABAP_TRUE.
*\            endif.
*\          endloop.
*\
*\***       Set as successful if not marked as error
*\          LF_ERROR = switch #( LF_ERROR when ABAP_TRUE then ABAP_TRUE
*\                                                       else ABAP_FALSE ).
*\        endloop.
*\
*\***     Set Status
*\        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = switch #( LF_ERROR when ABAP_FALSE     then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED
*\                                                              when ABAP_TRUE      then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR
*\                                                              when ABAP_UNDEFINED then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ) ).
*\
*\***--------------------------------------------------------------------------------------
*\      catch /VCXI/CX_CKX into data(LR_CX_CKX).
*\***     Set Status to Error
*\        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).
*\
*\***     Add Message to Message Log
*\        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
*\
*\    endtry.
*\
*\*** Perform Save and Commit
*\    ME->R_RPSEG->SAVE_AND_COMMIT( ).

    data: LF_ERROR type ABAP_BOOL.
    data: LS_MATLI    type ZVCXI_XCM_MBQ_S_MATLI,
          LS_COND     type ZVCXI_XCI_S_COND,
          LS_BAPIRET2 type BAPIRET2.
    data: LT_BAPIRET2  type BAPIRETTAB.
    data: LR_BOB_PCR type ref to ZCL_VCXI_XCI_BOB_PCR,
          LR_ACTDAT  type ref to DATA.
    field-symbols: <S_ACTDAT_PCR> type ZVCXI_XCM_MBQ_S_ACTDAT_PCR.


    try.
***     Get Material List Entry of active Material List Entry
        LS_MATLI = ME->R_DCO_INPUT->T_MATLI[ MLCNT = ME->R_DCO_INPUT->F_MLCNT ].

***     Check Activity - Create Pricing Condition Record
        if not LINE_EXISTS( LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PCR ] ).
***       Set Status to CANCELED
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
          return.
        endif.

***     Load Activity Control Data
        LR_ACTDAT = LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_PCR ]-R_ACTDAT.
        assign LR_ACTDAT->* to <S_ACTDAT_PCR>.


***--------------------------------------------------------------------------------------
***     Start undefined
        LF_ERROR = ABAP_UNDEFINED.

***     Process all Condition Records
        loop at <S_ACTDAT_PCR>-T_PCR into data(LS_PCR).

***       Get Instance
          create object LR_BOB_PCR
            exporting
              IF_KVEWE = LS_PCR-KVEWE
              IF_KAPPL = LS_PCR-KAPPL
              IF_KSCHL = LS_PCR-KSCHL.

***       Update Material Number in Allowed Fields for Condition Structures
          LS_PCR-S_KOMG-MATNR = LS_MATLI-MATNR.

          LS_COND = corresponding #( <S_ACTDAT_PCR> ).
          LS_COND = corresponding #( base ( LS_COND ) LS_PCR ).

***       Create new Pricing Condition Record
          LR_BOB_PCR->CREATE( exporting IF_KOTABNR   = LS_PCR-KOTABNR
                                        IS_KOMG      = LS_PCR-S_KOMG
                                        IS_COND      = LS_COND
                                        IF_SCALETYPE = LS_PCR-SCALETYPE
                                        IT_CONDSCALE = LS_PCR-T_CONDSCALE
                              importing ET_BAPIRET2  = LT_BAPIRET2 ).
          loop at LT_BAPIRET2 into LS_BAPIRET2.
***         Add Message to Message Log
            ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
            if LS_BAPIRET2-TYPE eq 'E'.
              LF_ERROR = ABAP_TRUE.
            endif.
          endloop.

***       Set as successful if not marked as error
          LF_ERROR = switch #( LF_ERROR when ABAP_TRUE then ABAP_TRUE
                                                       else ABAP_FALSE ).
        endloop.

***     Set Status
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = switch #( LF_ERROR when ABAP_FALSE     then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED
                                                              when ABAP_TRUE      then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR
                                                              when ABAP_UNDEFINED then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ) ).

***--------------------------------------------------------------------------------------
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

    endtry.

*** Perform Save and Commit
    ME->R_RPSEG->SAVE_AND_COMMIT( ).
*}   REPLACE

  endmethod.
endclass. "ZCL_VCXI_XCM_MBQ_STP_S501 definition
endclass. "ZCL_VCXI_XCM_MBQ_STP_S501 implementation
