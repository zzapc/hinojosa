
class ZCL_VCXI_XCSR_SHLP_ARBPL definition
  public
  create public .

public section.

  type-pools ABAP .
  class-methods CALL_SHLP
    importing
      !IF_WERKS type WERKS_D
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
      !IF_TWOCE type ZVCXI_XCS_TWOCE
      !IT_PSTEP type /VCXI/CKX_TT_OBJECT optional
      !IF_FAST_ENTRY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RR_ARBPL) type ref to /VCXI/CL_VSMC_ARBPL
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_XCSR_SHLP_ARBPL definition
class ZCL_VCXI_XCSR_SHLP_ARBPL implementation.
method CALL_SHLP.

  data:          LF_GUID          type          /VCXI/CKX_GUID.
  data:          LS_RETURN        type          DDSHRETVAL.
  data:          LT_ARBPL         type          /VCXI/CKX_TT_OBJECT,
                 LT_SHLP_ARBPL    type          ZVCXI_XCSR_TT_SHLP_ARBPL,
                 LT_MAP           type table of DSELC,
                 LT_RETURN        type table of DDSHRETVAL.
  data:          LR_ARBPL         type ref to   /VCXI/CL_VSMC_ARBPL,
                 LR_OBJECT        type ref to   /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_SHLP_ARBPL>   type          ZVCXI_XCSR_S_SHLP_ARBPL,
                 <S_MAP>          type          DSELC,
                 <FIELD>          type          any.

***----------------------------------------------------------------------------
*** Get allowed Work Center
  LT_ARBPL = ZCL_VCXI_XCSR_BL_PRTE=>GET_ALLOWED_ARBPL( IF_TWOCE = IF_TWOCE
                                                       IF_WERKS = IF_WERKS
                                                       IT_PSTEP = IT_PSTEP ).

*** Fast Entry and one Workcenter -> Return and exit
  if lines( LT_ARBPL ) eq 1 and
     IF_FAST_ENTRY     eq ABAP_TRUE.
    read table LT_ARBPL into LR_OBJECT index 1.
    move LR_OBJECT ?to RR_ARBPL.
    exit.
  endif.

***----------------------------------------------------------------------------
*** Get all allowed Workcenter
  loop at LT_ARBPL into LR_OBJECT.
    move LR_OBJECT ?to LR_ARBPL.

    append initial line to LT_SHLP_ARBPL assigning <S_SHLP_ARBPL>.
    move LR_ARBPL->F_ARBPL                                  to <S_SHLP_ARBPL>-ARBPL.
    move LR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_SHLP_ARBPL>-WERKS.
    move LR_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( )         to <S_SHLP_ARBPL>-DESCR.
  endloop.


*** Build Mapping
  append initial line to LT_MAP assigning <S_MAP>.
  <S_MAP>-FLDNAME   = 'F0001'. "Field for Position 1
  <S_MAP>-DYFLDNAME = 'ARBPL'.

  append initial line to LT_MAP assigning <S_MAP>.
  <S_MAP>-FLDNAME   = 'F0002'. "Field for Position 2
  <S_MAP>-DYFLDNAME = 'WERKS'.

***----------------------------------------------------------------------------
*** Call Searchhelp
  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      RETFIELD        = 'ARBPL'
      VALUE_ORG       = 'S'
      DISPLAY         = IF_DISPLAY
    tables
      VALUE_TAB       = LT_SHLP_ARBPL
      DYNPFLD_MAPPING = LT_MAP
      RETURN_TAB      = LT_RETURN
    exceptions
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      others          = 3.

  if SY-SUBRC eq 0.
*** Build Result
    clear LT_SHLP_ARBPL.
    sort LT_RETURN by RECORDPOS.
    loop at LT_RETURN into LS_RETURN.
      read table LT_SHLP_ARBPL assigning <S_SHLP_ARBPL> index LS_RETURN-RECORDPOS.
      if SY-SUBRC ne 0.
        append initial line to LT_SHLP_ARBPL assigning <S_SHLP_ARBPL>.
      endif.
      assign component LS_RETURN-RETFIELD of structure <S_SHLP_ARBPL> to <FIELD>.
      check SY-SUBRC = 0.
      move LS_RETURN-FIELDVAL to <FIELD>.
      unassign <FIELD>.
    endloop.

    loop at LT_SHLP_ARBPL assigning <S_SHLP_ARBPL>.
      LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = <S_SHLP_ARBPL>-WERKS
                                                   IF_ARBPL = <S_SHLP_ARBPL>-ARBPL ).
      RR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    endloop.
  endif.

endmethod.
endclass. "ZCL_VCXI_XCSR_SHLP_ARBPL implementation
