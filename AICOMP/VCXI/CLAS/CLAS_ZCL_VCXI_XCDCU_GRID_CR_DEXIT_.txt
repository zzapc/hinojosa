
class ZCL_VCXI_XCDCU_GRID_CR_DEXIT definition
  public
  inheriting from ZCL_VCXI_XCDCU_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME optional
      !IF_CONTAINER_NAME type SCRFNAME optional
      !IR_CUSTOMIZING type ref to OBJECT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FUNC_ADD type UI_FUNC value 'ADD'. "#EC NOTEXT
  constants C_FUNC_DEL type UI_FUNC value 'DELETE'. "#EC NOTEXT
  data R_CONDREC type ref to ZCL_VCXI_XCDC_CONDREC .
  data R_PART_DEFAU type ref to ZCL_VCXI_XCDCU_CR_PART_DEFAU .

  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods ADD_DEXIT
    raising
      /VCXI/CX_CKX .
  methods DELETE_DEXIT
    importing
      !IT_CR_DEXIT type ZVCXI_XCDC_TT_CR_DEXIT
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL_DELETE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods INIT_LOCKED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCDCU_GRID_CR_DEXIT definition
class ZCL_VCXI_XCDCU_GRID_CR_DEXIT implementation.
method ADD_DEXIT.

  data:          LS_RETURN         type                   DDSHRETVAL,
                 LS_CD_DEXIT       type                   ZVCXI_XCDC_S_REGDVC_DEFAUEX,
                 LS_CR_DEXIT       type                   ZVCXI_XCDC_S_CR_DEXIT.
  data:          LT_RETURN         type table of          DDSHRETVAL,
                 LT_CD_DEXIT_SHLP  type standard table of ZVCXI_XCDCU_S_CD_DEXIT_SHLP.
  field-symbols: <S_CD_DEXIT_SHLP> type                   ZVCXI_XCDCU_S_CD_DEXIT_SHLP.


  check ME->R_CONDREC                      is bound and
        ME->R_CONDREC->R_CONDDEF           is bound and
        ME->R_CONDREC->R_CONDDEF->R_REGDVC is bound.
  loop at ME->R_CONDREC->R_CONDDEF->R_REGDVC->ZIF_VCXI_XCDC_REGDVC_DEFAU~T_REGDVC_DEFAUEX into LS_CD_DEXIT.
*** Show only Default Exitss which are not already used.
    read table ME->R_CONDREC->T_CR_DEXIT
    with key IEXIT = LS_CD_DEXIT-IEXIT
    transporting no fields.
    check SY-SUBRC ne 0.

    append initial line to LT_CD_DEXIT_SHLP assigning <S_CD_DEXIT_SHLP>.
    move LS_CD_DEXIT-IEXIT to <S_CD_DEXIT_SHLP>-IEXIT.
    move LS_CD_DEXIT-FNAME to <S_CD_DEXIT_SHLP>-FNAME.

  endloop.

  call function 'F4IF_INT_TABLE_VALUE_REQUEST'
    exporting
      DDIC_STRUCTURE   = 'ZVCXI_XCDCU_S_CD_DEXIT_SHLP'
      RETFIELD         = 'IEXIT'
      VALUE_ORG        = 'S'
      MULTIPLE_CHOICE  = 'X'
    tables
      VALUE_TAB        = LT_CD_DEXIT_SHLP
      RETURN_TAB       = LT_RETURN
    exceptions
      PARAMETER_ERROR  = 1
      NO_VALUES_FOUND = 2
      others           = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Process Result
  loop at LT_RETURN into LS_RETURN.
    clear: LS_CR_DEXIT-IEXIT.
    move  LS_RETURN-FIELDVAL to LS_CR_DEXIT-IEXIT.

*** Add Default Element
    ME->R_CONDREC->ADD_CR_DEXIT( IS_CR_DEXIT = LS_CR_DEXIT ).

  endloop.

endmethod.
method CHECK_SEL_DELETE.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TABNAME        = 'ZVCXI_XCDCU_S_CR_DEXIT_GRID'
                      IF_CONTAINER_NAME = '0130CC_GRID_DEXIT'
                      IR_CUSTOMIZING    = IR_CUSTOMIZING ).

*** Try to Assign Customizing Reference
  try.
      move IR_CUSTOMIZING ?to ME->R_CONDREC.
    catch CX_SY_MOVE_CAST_ERROR.
***   Condition Record Customizing Reference can't be assigned.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCDC'
          IF_MSGNO = '252' ).
  endtry.

  check ME->R_CONDREC is bound.
  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method DELETE_DEXIT.

  data: LS_CR_DEXIT type ZVCXI_XCDC_S_CR_DEXIT.

  loop at IT_CR_DEXIT into LS_CR_DEXIT.
*** Delete by ID
    ME->R_CONDREC->DELETE_CR_DEXIT( IS_CR_DEXIT = LS_CR_DEXIT ).

  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LS_CR_DEXIT_GRID    type          ZVCXI_XCDCU_S_CR_DEXIT_GRID,
                 LS_CR_DEXIT         type          ZVCXI_XCDC_S_CR_DEXIT.
  field-symbols: <T_DATA>            type standard table,
                 <S_DATA>            type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

*** --------------------------------------------------------------------------------------------
*** Get all Condition Values
  loop at ME->R_CONDREC->T_CR_DEXIT into LS_CR_DEXIT.
    clear: LS_CR_DEXIT_GRID.

    move-corresponding LS_CR_DEXIT to LS_CR_DEXIT_GRID.

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CR_DEXIT_GRID to <S_DATA>.

  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LF_GREGE             type          /VCXI/CKR_GREGE.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.

  try.

***   Handle Double Click
      case E_COLUMN-FIELDNAME.
        when 'IEXIT'.

          check ME->R_CONDREC->R_CONDDEF->R_REGDVC is bound.

          LF_GREGE = ME->R_CONDREC->R_CONDDEF->R_REGDVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

***       Call Registry UI
          call function '/VCXI/CKRU_REGISTRY_START'
            starting new task 'REG'
            exporting
              IF_GREGE = LF_GREGE.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

      if ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_FALSE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD                 to LS_TOOLBAR-FUNCTION.
      move 'Add'(002)                 to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL                 to LS_TOOLBAR-FUNCTION.
      move 'Delete'(003)              to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON             to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW            to LS_TOOLBAR-ICON.
      move LF_DISABLED                to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR               to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_CR_DEXIT     type          ZVCXI_XCDC_TT_CR_DEXIT.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_CR_DEXIT>    type          ZVCXI_XCDC_S_CR_DEXIT,
                 <S_DATA>        type          any.

  try.

***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

      case E_UCOMM.

        when C_FUNC_ADD.
***       Add new Condition Default Exit
          ME->ADD_DEXIT( ).

        when C_FUNC_DEL.
***       Delete Condition Exit
          if ME->CHECK_SEL_DELETE( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '301'.
          endif.

***       Get Selected Condition Exit's
          loop at LT_CELL into LS_CELL.
            read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_DEXIT assigning <S_CR_DEXIT>.
            move-corresponding <S_DATA> to <S_CR_DEXIT>.
          endloop.

          loop at LT_ROW into LS_ROW.
            read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
            check SY-SUBRC = 0.

            append initial line to LT_CR_DEXIT assigning <S_CR_DEXIT>.
            move-corresponding <S_DATA> to <S_CR_DEXIT>.
          endloop.

***       Delete Condition Default Exit's
          ME->DELETE_DEXIT( IT_CR_DEXIT = LT_CR_DEXIT ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_LOCKED.

  ME->F_LOCKED = ME->R_CONDREC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ).

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.
  set handler ME->HANDLE_DOUBLE_CLICK for ME->R_GRID.

endmethod.
