
class ZCL_VCXI_P5M_MBQ_BL_RLCOMP definition
  public
  inheriting from ZCL_VCXI_PXM_MBQ_BL_XCOMP
  create public .

public section.

  constants C_ISVCE_COMP_P5 type ZVCXI_XCS_ISVCE value 'COMP_P5' ##NO_TEXT.
  constants C_ISVCE_CSTEP_PRINT type ZVCXI_XCS_ISVCE value 'CSTEP_PRINT' ##NO_TEXT.
  constants C_ISVCE_MS_RLPROC type ZVCXI_XCS_ISVCE value 'MS_RLPROC' ##NO_TEXT.
  constants C_ISVCE_RLCONI type ZVCXI_XCS_ISVCE value 'RLCONI' ##NO_TEXT.
  constants C_ISVCE_RLCONO type ZVCXI_XCS_ISVCE value 'RLCONO' ##NO_TEXT.
  constants C_ISVCE_RLFG type ZVCXI_XCS_ISVCE value 'RLFG' ##NO_TEXT.
  constants C_SOKEY_RLFG type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLFG' ##NO_TEXT.
  constants C_SOKEY_RLFG_CO type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLFG_CO' ##NO_TEXT.
  constants C_SOKEY_RLFG_CO_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLFG_CO_MTS' ##NO_TEXT.
  constants C_SOKEY_RLFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLFG_MTS' ##NO_TEXT.
  constants C_SOKEY_RLPROC type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLPROC' ##NO_TEXT.
  constants C_SOKEY_RLPROC_UV type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLPROC_UV' ##NO_TEXT.
  constants C_SOKEY_RLSFG type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLSFG' ##NO_TEXT.
  constants C_SOKEY_RLSFG_CO type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLSFG_CO' ##NO_TEXT.
  constants C_SOKEY_RLSFG_CO_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLSFG_CO_MTS' ##NO_TEXT.
  constants C_SOKEY_RLSFG_MTS type ZVCXI_XCM_MBQ_SOKEY value 'P5_RLSFG_MTS' ##NO_TEXT.

  methods ADJUST_SVCEL_MS_RLPROC
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_MS_RLPROC
    importing
      !IR_SVCEL_RLPROC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .

  methods ANALYZE
    redefinition .
protected section.

  methods ADJUST_SVCEL_RLFG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ADJUST_SVCEL_CSTEP_PRINT
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
      !IT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !IT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    exporting
      !EF_SKIP_CHILDREN type ABAP_BOOL
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_CSTEP_PRINT
    importing
      !IR_SVCEL_CSTEP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_DISST type /VCXI/VKC_DISST
    changing
      !CT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI
      !CT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .

  methods ADJUST_ID
    redefinition .
  methods ADJUST_SVCEL
    redefinition .
  methods ANALYZE_CSTEP
    redefinition .
  methods ANALYZE_MS_INK
    redefinition .
  methods GET_ACTDAT_DMS
    redefinition .
  methods GET_ACTDAT_DMSEXT
    redefinition .
  methods GET_ACTDAT_MMEXT
    redefinition .
  methods GET_ACTDAT_PURIR
    redefinition .
  methods GET_DMSEXT_PD
    redefinition .
  methods GET_EXQTY
    redefinition .
  methods GET_KMPMG
    redefinition .
  methods GET_MATDAT_MAKT
    redefinition .
  methods GET_MATDAT_MARM
    redefinition .
  methods GET_SOKEY_OUT
    redefinition .
private section.
endclass. "ZCL_VCXI_P5M_MBQ_BL_RLCOMP definition
class ZCL_VCXI_P5M_MBQ_BL_RLCOMP implementation.
  method ADJUST_ID.

*** Call SUPER
    SUPER->ADJUST_ID( exporting IR_SVCEL = IR_SVCEL
                      changing  CF_ID    = CF_ID ).

    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***   Connection Out is replaced by a Finished Good
      when C_ISVCE_RLCONO.
        CF_ID = C_ISVCE_RLFG.

***   SFG Shipping Manger is replaced by FG Shipping Manager
      when 'SHIPMGR_RLCONO'.
        CF_ID = 'SHIPMGR'.

    endcase.

  endmethod.
  method ADJUST_SVCEL.

*** Call SUPER
    SUPER->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
                                   IR_IDAT_SVC      = IR_IDAT_SVC
                                   IT_MATLI         = IT_MATLI
                                   IT_DMSLI         = IT_DMSLI
                         importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                         changing  CS_SVCEL         = CS_SVCEL ).

    case CS_SVCEL-ISELF.
***-------------------------------------------------------------------------------------
***   Conversion Steps
***-------------------------------------------------------------------------------------
      when C_ISVCE_CSTEP_PRINT.
***     Adjust CStep Printing
        ME->ADJUST_SVCEL_CSTEP_PRINT( exporting IR_SVCEL         = IR_SVCEL
                                                IR_IDAT_SVC      = IR_IDAT_SVC
                                                IT_MATLI         = IT_MATLI
                                                IT_DMSLI         = IT_DMSLI
                                      importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                                      changing  CS_SVCEL         = CS_SVCEL ).

***--------------------------------------------------------------------------------------
***   Output
***-------------------------------------------------------------------------------------
      when C_ISVCE_RLFG.
***     Adjust Finished Good
        ME->ADJUST_SVCEL_RLFG( exporting IR_SVCEL         = IR_SVCEL
                                         IR_IDAT_SVC      = IR_IDAT_SVC
                                         IT_MATLI         = IT_MATLI
                                         IT_DMSLI         = IT_DMSLI
                               importing EF_SKIP_CHILDREN = EF_SKIP_CHILDREN
                               changing  CS_SVCEL         = CS_SVCEL ).

    endcase.

  endmethod.
  method ADJUST_SVCEL_CSTEP_PRINT.

    data: LS_DOC_KEY type ZVCXI_XCS_S_DOC_KEY.
    data: LR_EA_CSTEP_PRINT type ref to ZCL_VCXI_P5SS_EA_CSTEP_PRINT.


*** Check if Die Cut Tool has not been specified
    LR_EA_CSTEP_PRINT ?= IR_SVCEL->GET_CLSEA( ).
    check LR_EA_CSTEP_PRINT is bound and
          LR_EA_CSTEP_PRINT->GET_DESDO( ) is initial.

*** Get DMS Document Key of created DMS Document
    LS_DOC_KEY = ME->GET_DOC_KEY_BY_SOURCE( IT_DMSLI        = IT_DMSLI
                                            IR_SVCEL_SOURCE = IR_SVCEL ).
    check LS_DOC_KEY is not initial.

*** Fill Design Document
    delete CS_SVCEL-T_SVCPA where PARID = ZIF_VCXI_PXSS_PRINT=>C_PARID_DESDO.
    append value #( PARID = ZIF_VCXI_PXSS_PRINT=>C_PARID_DESDO
                    STRNG = conv #( ZCL_VCXI_XCSS_BL_DOC=>ENCRYPT_GUID( IF_DOKAR = LS_DOC_KEY-DOKAR
                                                                        IF_DOKNR = LS_DOC_KEY-DOKNR
                                                                        IF_DOKTL = LS_DOC_KEY-DOKTL
                                                                        IF_DOKVR = LS_DOC_KEY-DOKVR ) )
                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                  ) to CS_SVCEL-T_SVCPA.
    append value #( IEVNT = ZIF_VCXI_PXSS_PRINT=>C_IEVNT_O_DESDO_CHANGED ) to CS_SVCEL-T_SVCEV.

  endmethod.
  method ADJUST_SVCEL_MS_RLPROC.

    data: LF_MATNR type MATNR.
    data: LS_KAUSF type ZVCXI_XCSP_S_KAUSF.
    data: LR_SVCEL_SOURCE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.
    field-symbols: <S_PARAM> type ZVCXI_XCI_S_SVCPA.

***--------------------------------------------------------------------------------------
*** Get correct Source Element
    case IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_RLPROC.
        LR_SVCEL_SOURCE = IR_SVCEL.

****    No adjustments for "non-dummies"
        if not cast ZCL_VCXI_PXSS_EA_MS_XPROC( IR_SVCEL->GET_CLSEA( ) )->IS_DUMMY( ).
          return.
        endif.

      when C_ISVCE_RLCONI.
***     Get related Connection Out
        LR_SVCEL_SOURCE = cast ZCL_VCXI_PXSS_EA_XCONI( IR_SVCEL->GET_CLSEA( ) )->GET_XCONO( ).
        check LR_SVCEL_SOURCE is bound.

***     Get Component Scrap of Connection Out
        LS_KAUSF = cast ZCL_VCXI_PXSS_EA_XCONO( LR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_KAUSF( ).

***     Substitute Component with Dummy Route if needed
        if not LINE_EXISTS( IT_MATLI[ LEVEL_SOURCE = LR_SVCEL_SOURCE->GET_LEVEL( ) ] ).
          LR_SVCEL_SOURCE = ME->GET_INP_BY_XCONO( IR_SVCEL_XCONO = LR_SVCEL_SOURCE ).

          if LR_SVCEL_SOURCE is bound.
***         Copy supervised Parameter of input
            CS_SVCEL-T_SVCPA = corresponding #( LR_SVCEL_SOURCE->GET_PARAM_ALL( IF_PARSP = ABAP_TRUE ) ).
***         Copy children of e.g. Procurement
            ME->COPY_SVCEL_CHILDREN( IF_ISELF    = CS_SVCEL-ISELF
                                     IF_CSELF    = CS_SVCEL-CSELF
                                     IR_SVCEL    = LR_SVCEL_SOURCE
                                     IR_IDAT_SVC = IR_IDAT_SVC
                                     IT_MATLI    = IT_MATLI
                                     IT_DMSLI    = IT_DMSLI ).
          endif.
        endif.
    endcase.
    check LR_SVCEL_SOURCE is bound.

***--------------------------------------------------------------------------------------
    case LR_SVCEL_SOURCE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_MS_RLPROC.
***     Use existing Material for "non-dummies"
        if not cast ZCL_VCXI_PXSS_EA_MS_XPROC( LR_SVCEL_SOURCE->GET_CLSEA( ) )->IS_DUMMY( ).
          LF_MATNR = LR_SVCEL_SOURCE->GET_LEOKY( )-LEOKY.
        endif.
    endcase.

*** Get Material Number of created Material
    if LF_MATNR is initial.
      LF_MATNR = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                          IR_SVCEL_SOURCE = LR_SVCEL_SOURCE ).
    endif.

*** Set Material Number as Leading Object
    CS_SVCEL-LEOKY = LF_MATNR.
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Set Component Scrap
    if LS_KAUSF is not initial.
      if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_KAUSF ] ).
        assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_KAUSF ] to <S_PARAM>.
      else.
        append value #( PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_KAUSF ) to CS_SVCEL-T_SVCPA assigning <S_PARAM>.
      endif.
      <S_PARAM>-ATFLV = LS_KAUSF-KAUSF.
      <S_PARAM>-UNIT  = LS_KAUSF-KAUSF_UOM.
      <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.

*** Switch Procurement Option to "Direct Procurement"/"Stock"
    if LINE_EXISTS( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ] ).
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ] to <S_PARAM>.

      if <S_PARAM>-ATWRT eq ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
         LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_LIFNR )-ATWRT is not initial.
        <S_PARAM>-ATWRT = switch #( LR_SVCEL_SOURCE->GET_PARAM( IF_PARID = ZCL_VCXI_XCSS_PR_MS=>C_PARID_FPTOS )-ATWRT when ABAP_TRUE then ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK
                                                                                                                                     else ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT ).
        <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

***     Skip processing of Children
        EF_SKIP_CHILDREN = ABAP_TRUE.
      endif.
    endif.

*** Ensure loaded dummy price scales remain after material creation
    if value #( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_PURCH ]-ATWRT optional ) eq ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PURCH_DIRECT_PRICE and
       value #( CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_FPSMO ]-ATWRT optional ) is initial.
      assign CS_SVCEL-T_SVCPA[ PARID = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_PARID_FPSMO ] to <S_PARAM>.
      <S_PARAM>-ATWRT = ABAP_TRUE.
      <S_PARAM>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.

  endmethod.
  method ADJUST_SVCEL_RLFG.

    data: LR_EA_RLCONO  type ref to ZCL_VCXI_P5SS_EA_RLCONO,
          LR_BL_RLBPROP type ref to ZCL_VCXI_P5SS_BL_RLBPROP.


***--------------------------------------------------------------------------------------
*** Add Material Number to Finished Good as Leading Object Key
    CS_SVCEL-LEOKY = ME->GET_MATNR_BY_SOURCE( IT_MATLI        = IT_MATLI
                                              IR_SVCEL_SOURCE = IR_SVCEL ).
    CS_SVCEL-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

*** Remove Customer Material Info
    delete CS_SVCEL-T_SVCPA where PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDMAT
                             or   PARID eq ZIF_VCXI_PXSS_FG=>C_PARID_KDPTX.

***--------------------------------------------------------------------------------------
*** Transfer Information of Connection Out to Finished Good
    if IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq C_ISVCE_RLCONO.
      LR_EA_RLCONO ?= IR_SVCEL->GET_CLSEA( ).

      break TBD. "Mapping of Roll Handling

    endif.

  endmethod.
  method ANALYZE.

    data: LF_WERKS type WERKS_D,
          LF_SOKEY type ZVCXI_XCM_MBQ_SOKEY,
          LF_COUNT type I.
    data: LT_CHILDREN type /VCXI/CKX_TT_OBJECT.
    data: LR_EA_SPEC      type ref to ZCL_VCXI_PXSS_EA_SPEC,
          LR_SVCEL_INPUT  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_CONV   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


    free: ET_MATLI,
          ET_DMSLI.

***--------------------------------------------------------------------------------------
*** Get Specification and Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_EA_SPEC      = LR_EA_SPEC
                                  ER_SVCEL_INPUT  = LR_SVCEL_INPUT
                                  ER_SVCEL_CONV   = LR_SVCEL_CONV
                                  ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_EA_SPEC      is bound and
          LR_SVCEL_INPUT  is bound and
          LR_SVCEL_CONV   is bound and
          LR_SVCEL_OUTPUT is bound.

*** Get Plant
    LF_WERKS = LR_EA_SPEC->GET_WERKS( ).

***--------------------------------------------------------------------------------------
*** Ignore Dummy Routes
    if ME->HAS_ARBPL( IR_SVCEL_XCOMP = ME->R_SVCEL_XCOMP ).
***   Analyze Output for FG / SFG
      LT_CHILDREN = LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
      LR_SVCEL_OUTPUT->SORT_SVC_ELEMENTS( changing CT_SVC_ELEMENT = LT_CHILDREN ).
      loop at LT_CHILDREN into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.

        if LR_SVCEL->GET_CLSEA( ) is instance of ZCL_VCXI_PXSS_EA_SSTEP.
***       Analyze Separation Steps
          ME->ANALYZE_SSTEP( exporting IR_SVCEL_SSTEP = LR_SVCEL
                                       IF_DISST       = conv #( IF_DISST + 1 )
                             changing  CT_MATLI       = ET_MATLI
                                       CT_DMSLI       = ET_DMSLI ).
        else.
***       Define Source Key
          LF_SOKEY = ME->GET_SOKEY_OUT( IR_SVCEL = LR_SVCEL
                                        IF_KZKUP = cond #( when LINES( LT_CHILDREN ) gt 1 and LF_COUNT ne 0 then ABAP_TRUE ) ).
          check LF_SOKEY is not initial.
          LF_COUNT += 1.

***       Add Material with Activities based on Source Key
          ME->ADD_MATLI( exporting IF_SOKEY        = LF_SOKEY
                                   IF_DISST        = IF_DISST
                                   IR_SVCEL_SOURCE = LR_SVCEL
                                   IF_WERKS        = LF_WERKS
                         changing  CT_MATLI        = ET_MATLI ).

***       Analyze Children (eg. Shipping Manager for Configured Packaging Material)
          data(LT_CHILDREN_OUT) = LR_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
          loop at LT_CHILDREN_OUT into LR_OBJECT.
            move LR_OBJECT ?to LR_SVCEL.
            if LR_SVCEL->GET_CLSEA( ) is instance of ZCL_VCXI_XCSU_EA_SHIPMGR.
              ME->ANALYZE_SHIPMGR( exporting IR_SVCEL_SHIPMGR = LR_SVCEL
                                             IF_DISST         = conv #( IF_DISST + 1 )
                                   changing  CT_MATLI         = ET_MATLI
                                             CT_DMSLI         = ET_DMSLI ).
            endif.
          endloop.
        endif.
      endloop.

***--------------------------------------------------------------------------------------
***   Analyze Conversion Steps
      loop at LR_SVCEL_CONV->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
        move LR_OBJECT ?to LR_SVCEL.
        ME->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = LR_SVCEL
                                     IF_DISST       = conv #( IF_DISST + 1 )
                           changing  CT_MATLI       = ET_MATLI
                                     CT_DMSLI       = ET_DMSLI ).
      endloop.

    endif.

***--------------------------------------------------------------------------------------
*** Analyze Input for Sheet Procurement Dummy
    loop at LR_SVCEL_INPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        when C_ISVCE_MS_RLPROC.
          ME->ANALYZE_MS_RLPROC( exporting IR_SVCEL_RLPROC = LR_SVCEL
                                           IF_DISST        = conv #( IF_DISST + 1 )
                                 changing  CT_MATLI        = ET_MATLI
                                           CT_DMSLI        = ET_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_CSTEP.

    SUPER->ANALYZE_CSTEP( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                    IF_DISST       = IF_DISST
                          changing  CT_MATLI       = CT_MATLI
                                    CT_DMSLI       = CT_DMSLI ).

    case IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      when C_ISVCE_CSTEP_PRINT.
        ME->ANALYZE_CSTEP_PRINT( exporting IR_SVCEL_CSTEP = IR_SVCEL_CSTEP
                                           IF_DISST       = IF_DISST
                                 changing  CT_MATLI       = CT_MATLI
                                           CT_DMSLI       = CT_DMSLI ).
    endcase.

  endmethod.
  method ANALYZE_CSTEP_PRINT.

    data: LF_PRTEC type ZVCXI_PXS_PRTEC.
    data: LR_EA_CSTEP_PRINT type ref to ZCL_VCXI_P5SS_EA_CSTEP_PRINT,
          LR_BL_DOC         type ref to ZCL_VCXI_XCSS_BL_DOC,
          LR_SVCEL          type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT.


    LR_EA_CSTEP_PRINT ?= IR_SVCEL_CSTEP->GET_CLSEA( ).
    check LR_EA_CSTEP_PRINT is bound.

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = IR_SVCEL_CSTEP
                         importing ER_EA_TINFO     = data(LR_EA_TINFO) ).
    if LR_EA_TINFO is bound.
      data(LF_FOTUT) = LR_EA_TINFO->GET_FOTUT( ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if DMS Design Document has not been specified
    if LR_EA_CSTEP_PRINT->GET_DESDO( importing ER_BL_DOC = LR_BL_DOC ) is initial.
***   Add DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                               IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                               IS_DOC_KEY      = value #( DOKAR = LR_EA_CSTEP_PRINT->GET_DOKAR( ) )
                     changing  CT_DMSLI        = CT_DMSLI ).

***   Add Material with Activities based on Source Key (Print Tool Set for analog printing)
      LR_EA_CSTEP_PRINT->GET_TPRIN( importing EF_PRTEC = LF_PRTEC ).
      if LF_PRTEC eq ZCL_VCXI_PXSS_CUST_PRINT=>C_PRTEC_ANALOG.
        ME->ADD_MATLI( exporting IF_SOKEY        = switch #( LF_FOTUT when ABAP_TRUE then C_SOKEY_TOOL_SET_PRINT_OTU
                                                                                     else C_SOKEY_TOOL_SET_PRINT )
                                 IF_DISST        = IF_DISST
                                 IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                                 IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                       changing  CT_MATLI        = CT_MATLI ).
      endif.
    else.
***   Add existing DMS Document with Activities based on Source Key
      ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_PRINT
                               IR_SVCEL_SOURCE = IR_SVCEL_CSTEP
                               IF_WERKS        = LR_EA_CSTEP_PRINT->GET_WERKS( )
                               IS_DOC_KEY      = LR_BL_DOC->GET_DOC_KEY( )
                     changing  CT_DMSLI        = CT_DMSLI ).
    endif.


***--------------------------------------------------------------------------------------
    loop at IR_SVCEL_CSTEP->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

      case LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Analyze Inks
        when ZCL_VCXI_PXM_MBQ_BL_XCOMP=>C_ISVCE_MS_INK.
          ME->ANALYZE_MS_INK( exporting IR_SVCEL_MS_INK = LR_SVCEL
                                        IF_DISST        = IF_DISST
                              changing  CT_MATLI        = CT_MATLI
                                        CT_DMSLI        = CT_DMSLI ).
      endcase.
    endloop.

  endmethod.
  method ANALYZE_MS_INK.

    data: LR_EA_MS_INK type ref to ZCL_VCXI_PXSS_EA_MS_INK.


*** Check if Ink Tool has not been specified
    check IR_SVCEL_MS_INK is bound.
    LR_EA_MS_INK ?= IR_SVCEL_MS_INK->GET_CLSEA( ).
    check LR_EA_MS_INK->GET_INKTN( ) is initial.

*** Get Tooling Information
    ME->GET_SVCEL_TINFO( exporting IR_SVCEL_PARENT = cast #( IR_SVCEL_MS_INK->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) )
                         importing ER_EA_TINFO     = data(LR_EA_TINFO) ).
    if LR_EA_TINFO is bound.
      data(LF_FOTUT) = LR_EA_TINFO->GET_FOTUT( ).
    endif.

*** No Ink Tools for One-Time Usage
    check LF_FOTUT ne ABAP_TRUE.

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = C_SOKEY_TOOL_INK_L
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_MS_INK
                             IF_WERKS        = LR_EA_MS_INK->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method ANALYZE_MS_RLPROC.

    data: LF_WERTU type WERTU.
    data: LR_EA_MS_RLPROC type ref to ZCL_VCXI_P5SS_EA_MS_RLPROC.


    check IR_SVCEL_RLPROC is bound.
    LR_EA_MS_RLPROC ?= IR_SVCEL_RLPROC->GET_CLSEA( ).
    check LR_EA_MS_RLPROC->IS_DUMMY( ).

    LR_EA_MS_RLPROC->GET_MATNR( importing EF_WERTU = LF_WERTU ).

*** Add Material with Activities based on Source Key
    ME->ADD_MATLI( exporting IF_SOKEY        = switch #( LF_WERTU when ABAP_TRUE  then C_SOKEY_RLPROC
                                                                  when ABAP_FALSE then C_SOKEY_RLPROC_UV )
                             IF_DISST        = IF_DISST
                             IR_SVCEL_SOURCE = IR_SVCEL_RLPROC
                             IF_WERKS        = LR_EA_MS_RLPROC->GET_WERKS( )
                   changing  CT_MATLI        = CT_MATLI ).

  endmethod.
  method GET_ACTDAT_DMS.

    field-symbols: <S_ACTDAT_DMS> type ZVCXI_XCM_MBQ_S_ACTDAT_DMS.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_DMS( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                       importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_DMS>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Printing
      when C_SOKEY_DMS_PRINT.
        if cast ZCL_VCXI_P5SS_EA_CSTEP_PRINT( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_DESDO( ) is initial.
***       Create a new Design Document
          cast ZCL_VCXI_P5SS_EA_CSTEP_PRINT( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_DESDD( importing ET_DKTXT = data(LT_DXTXT) ).
          <S_ACTDAT_DMS>-T_DMSDAT_DRAT = corresponding #( LT_DXTXT ).
        else.
***       Design Document already exists - no creation needed
          EF_SKIP = ABAP_TRUE.
        endif.

    endcase.

  endmethod.
  method GET_ACTDAT_DMSEXT.

***--------------------------------------------------------------------------------------
    case IF_SOKEY.
***   Printing
      when C_SOKEY_DMS_PRINT.
        if cast ZCL_VCXI_P5SS_EA_CSTEP_PRINT( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_DESDO( ) is not initial.
***       Design Document already exists - no update of Data Extension
          EF_SKIP = ABAP_TRUE.
          exit.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_DMSEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                    IF_SOKEY        = IF_SOKEY
                                                    IF_WERKS        = IF_WERKS
                                          importing EF_SKIP         = EF_SKIP ).

  endmethod.
  method GET_ACTDAT_MMEXT.

    data: LR_EA_MS_RLPROC type ref to ZCL_VCXI_P5SS_EA_MS_RLPROC,
          LR_BL_RLFPROP   type ref to ZCL_VCXI_P5SS_BL_RLFPROP,
          LR_BL_RLBPROP   type ref to ZCL_VCXI_P5SS_BL_RLBPROP.
    field-symbols: <S_ACTDAT_MMEXT> type ZVCXI_PXM_MBQ_S_ACTDAT_MMEXT.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_MMEXT( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_MMEXT>.


    case IF_SOKEY.
***--------------------------------------------------------------------------------------
***   Roll Procurement
      when C_SOKEY_RLPROC or
           C_SOKEY_RLPROC_UV.
        LR_EA_MS_RLPROC ?= IR_SVCEL_SOURCE->GET_CLSEA( ).

***     Get Roll Forward and Backward Property XML (Outbound)
        LR_BL_RLFPROP = LR_EA_MS_RLPROC->GET_RLFPX( ).
        LR_BL_RLBPROP = LR_EA_MS_RLPROC->GET_RLBPX( ).

***     Set Extension Values
        <S_ACTDAT_MMEXT>-CNTXT       = ZCL_VCXI_P5E_MM_MMEXT=>C_CNTXT_P5.    "Roll
        <S_ACTDAT_MMEXT>-S_P5_EXTVAL = value #( CCBGN       = LR_BL_RLFPROP->F_CCBGN
                                                S_GRAMM     = LR_BL_RLFPROP->S_GRAMM
                                                T_PRINT_COM = LR_BL_RLFPROP->T_PRINT ).
    endcase.

  endmethod.
  method GET_ACTDAT_PURIR.

    field-symbols: <S_ACTDAT_PURIR> type ZVCXI_XCM_MBQ_S_ACTDAT_PURIR.


*** Call SUPER to create Data Reference
    RR_ACTDAT = SUPER->GET_ACTDAT_PURIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                   IF_SOKEY        = IF_SOKEY
                                                   IF_WERKS        = IF_WERKS
                                                   IF_DISST        = IF_DISST
                                         importing EF_SKIP         = EF_SKIP ).
    check RR_ACTDAT is bound.
    assign RR_ACTDAT->* to <S_ACTDAT_PURIR>.

***--------------------------------------------------------------------------------------
    case IF_SOKEY.
***   Roll Procurement
      when C_SOKEY_RLPROC or
           C_SOKEY_RLPROC_UV.
        <S_ACTDAT_PURIR> = ME->GET_PURIR_XPROC( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                          IF_SOKEY        = IF_SOKEY
                                                          IF_WERKS        = IF_WERKS
                                                changing  CF_SKIP         = EF_SKIP ).
    endcase.

  endmethod.
  method GET_DMSEXT_PD.

*** Call SUPER
    RS_DMSEXT_PD = SUPER->GET_DMSEXT_PD( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE ).

*** Get Print Design Header Information
    RS_DMSEXT_PD-S_PD = cast ZCL_VCXI_P5SS_EA_CSTEP_PRINT( IR_SVCEL_SOURCE->GET_CLSEA( ) )->GET_PD( ).

  endmethod.
  method GET_EXQTY.

    data: LS_WEBWI type ZVCXI_PXS_S_WEBWI.
    data: LR_SVCEL_OUTPUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.


*** Get Explosion Quantity (in Length)
    RS_EXQTY = SUPER->GET_EXQTY( ).

*** Get Output
    ME->GET_SVCEL_SPEC( exporting IR_SVCEL_XCOMP  = ME->R_SVCEL_XCOMP
                        importing ER_SVCEL_OUTPUT = LR_SVCEL_OUTPUT ).
    check LR_SVCEL_OUTPUT is bound.

*** Get Web Width of first RLCONOs or RLFG
    loop at LR_SVCEL_OUTPUT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.
      check LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.

      case type of LR_SVCEL->GET_CLSEA( ).
        when type ZCL_VCXI_P5SS_EA_RLCONO into data(LR_EA_RLCONO). " Connection Out
          LS_WEBWI  = LR_EA_RLCONO->GET_WEBWI( ).
        when type ZCL_VCXI_P5SS_EA_RLFG into data(LR_EA_RLFG).     " Finished Good
          LS_WEBWI  = LR_EA_RLFG->GET_WEBWI( ).
        when others.
          continue.
      endcase.
      exit.
    endloop.

*** Convert Length to Area based on Web Width
    RS_EXQTY = corresponding #( ZCL_VCXI_P5SP_SERVICE=>CONV_L_TO_A( IS_CALCV = value #( CALCV     = RS_EXQTY-EXQTY
                                                                                        CALCV_UOM = RS_EXQTY-EXQTY_UOM )
                                                                    IS_RLDIM = value #( S_WEBWI = LS_WEBWI ) )
                                mapping EXQTY     = CALCV
                                        EXQTY_UOM = CALCV_UOM ).

  endmethod.
  method GET_KMPMG.

    data: LR_CLSEA type ref to /VCXI/CL_VKSR_CLSEA.


    LR_CLSEA ?= IR_SVCEL->GET_CLSEA( ).
    check LR_CLSEA is instance of ZCL_VCXI_P5SS_EA_RLFG.

*** Web Width and Component Ratio
    data(LS_WEBWI) = cast ZCL_VCXI_P5SS_EA_RLFG( LR_CLSEA )->GET_WEBWI( ).
    data(LF_COMPR) = cast ZCL_VCXI_P5SS_EA_RLFG( LR_CLSEA )->GET_COMPR( ).

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting
        IF_CALCV_1     = LS_WEBWI-WEBWI * LF_COMPR
        IF_CALCV_UOM_1 = LS_WEBWI-WEBWI_UOM
        IF_CALCV_2     = 1
        IF_CALCV_UOM_2 = 'M'
        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
      importing
        EF_CALCV       = RF_KMPMG ).

    EF_KMPME = SPACE. "Determined autmatically by Base UoM

  endmethod.
  method GET_MATDAT_MAKT.

    RT_MATDAT_MAKT = SUPER->GET_MATDAT_MAKT( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_TMATN        = IF_TMATN ).

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Print Tool Set of Conversion Step
      when type ZCL_VCXI_P5SS_EA_CSTEP_PRINT into data(LR_EA_CSTEP_PRINT).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_CSTEP_PRINT->GET_DESDD( ) ) ).

    endcase.

  endmethod.
  method GET_MATDAT_MARM.

    data: LS_CALCV_BASE   type ZVCXI_XCS_S_CALCV,
          LS_SURWT        type ZVCXI_PXS_S_SURWT,
          LS_CALCV_WEIGHT type ZVCXI_XCS_S_CALCV.
    field-symbols: <S_MATDAT_MARM> type ZVCXI_XCM_MBQ_S_MATDAT_MARM.


*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   MS Procurement
      when type ZCL_VCXI_P5SS_EA_MS_RLPROC into data(LR_EA_MS_RLPROC).

***     Base Dimensions
        append value #( MEINH = 'M2' ) to RT_MATDAT_MARM assigning <S_MATDAT_MARM>.
***     Use Procurement Web Width as Material Width
        data(LS_PRWWI) = LR_EA_MS_RLPROC->GET_PRWWI( ).
        <S_MATDAT_MARM>-BREIT = LS_PRWWI-PRWWI.
        <S_MATDAT_MARM>-MEABM = LS_PRWWI-PRWWI_UOM.
***     Use Caliper as Height
        data(LS_CALIP) = LR_EA_MS_RLPROC->GET_RLFPX( )->S_CALIP.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_CALIP-CALIP
                                                           IF_UOM_IN    = LS_CALIP-CALIP_UOM
                                                           IF_UOM_OUT   = <S_MATDAT_MARM>-MEABM
                                                 importing EF_VALUE_OUT = <S_MATDAT_MARM>-HOEHE ).

***     Calculate Weight
        LS_CALCV_BASE = value #( CALCV     = 1000
                                 CALCV_UOM = 'M2' ).
        LS_SURWT = LR_EA_MS_RLPROC->GET_SURWT( ).
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_BASE-CALCV
                                                            IF_CALCV_UOM_1 = LS_CALCV_BASE-CALCV_UOM
                                                            IF_CALCV_2     = LS_SURWT-SURWT
                                                            IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                  importing EF_CALCV       = LS_CALCV_WEIGHT-CALCV
                                                            EF_CALCV_UOM   = LS_CALCV_WEIGHT-CALCV_UOM ).
***     Add Conversion for Weight
        append value #( MEINH = LS_CALCV_WEIGHT-CALCV_UOM ) to RT_MATDAT_MARM assigning <S_MATDAT_MARM>.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CALC_UMREZ_UMREN( exporting IS_CALCV_BASE = LS_CALCV_BASE
                                                               IS_CALCV_ALT  = LS_CALCV_WEIGHT
                                                     importing EF_UMREZ      = <S_MATDAT_MARM>-UMREZ
                                                               EF_UMREN      = <S_MATDAT_MARM>-UMREN ).
    endcase.

  endmethod.
  method GET_SOKEY_OUT.

*** Get Make-to-Stock Flag of Element
    data(LF_FMTSA) = ME->GET_FMTSA( IR_SVCEL = IR_SVCEL ).

*** Define Source Key based on FG/SFG > Co-Product > MTO/MTS
    RF_SOKEY = switch #( IR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( )
                         when C_ISVCE_RLFG   then switch #( IF_KZKUP                                  "Finished Good
                                                            when ABAP_FALSE then switch #( LF_FMTSA     "Normal
                                                                                           when ABAP_FALSE then C_SOKEY_RLFG
                                                                                           when ABAP_TRUE  then C_SOKEY_RLFG_MTS
                                                                                         )
                                                             when ABAP_TRUE then switch #( LF_FMTSA      "Co-Product
                                                                                            when ABAP_FALSE then C_SOKEY_RLFG_CO
                                                                                            when ABAP_TRUE  then C_SOKEY_RLFG_CO_MTS
                                                                                          )
                                                          )
                         when C_ISVCE_RLCONO then switch #( IF_KZKUP                                  "Semi-Finished Good
                                                            when ABAP_FALSE then switch #( LF_FMTSA     "Normal
                                                                                           when ABAP_FALSE then C_SOKEY_RLSFG
                                                                                           when ABAP_TRUE  then C_SOKEY_RLSFG_MTS
                                                                                         )
                                                            when ABAP_TRUE then switch #( LF_FMTSA      "Co-Product
                                                                                           when ABAP_FALSE then C_SOKEY_RLSFG_CO
                                                                                           when ABAP_TRUE  then C_SOKEY_RLSFG_CO_MTS
                                                                                         )
                                                          )
                       ).

  endmethod.
