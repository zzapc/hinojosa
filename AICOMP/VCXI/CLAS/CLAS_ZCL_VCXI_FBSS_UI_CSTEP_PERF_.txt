
class ZCL_VCXI_FBSS_UI_CSTEP_PERF definition
  public
  inheriting from ZCL_VCXI_FBSS_UI_CSTEP
  create public .

public section.

  data S_CSTEP_PERF_VIS type ZVCXI_FBSS_S_CSTEP_PERF_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_UPDATE_VIS
    redefinition .
protected section.

  data R_PR_CSTEP_PERF type ref to ZCL_VCXI_FBSS_PR_CSTEP_PERF .

  methods SET_DDVAL_LCOUT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
  methods INIT_VIS
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_UI_CSTEP_PERF definition
class ZCL_VCXI_FBSS_UI_CSTEP_PERF implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FBSS_UI_CSTEP_PERF_BIND'
      exporting
        IR_UI_CSTEP_PERF = ME
      importing
        ES_DYNP          = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_CSTEP_PERF.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_FLASR  type ZVCXI_F0S_FLASR,
          LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.


    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

***     Get Perforation Type Flag - Laser
        LF_FLASR = ZCL_VCXI_F0S_CUST_PERF=>GET_FLASR( IF_TPERF = ME->S_CSTEP_PERF_VIS-TPERF ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

        loop at screen.

          if LF_LOCKED eq ABAP_TRUE or
             LF_INUSE  eq ABAP_TRUE.

            case SCREEN-GROUP1.

***           Check if Cutout Area is Mandatory
              when 'COA'.
                if ME->R_PR_CSTEP_PERF->CHECK_COARE( ) eq 1.
                  move 2 to SCREEN-REQUIRED.
                endif.

***           Check if Cutout Location is Mandatory
              when 'LCO'.
                if ME->R_PR_CSTEP_PERF->CHECK_LCOUT( ) eq 1.
                  move 2 to SCREEN-REQUIRED.
                endif.

***           Check Number of Laser Lines
              when 'NLA'.
                if ME->S_CSTEP_PERF_VIS-TPERF is initial .
                  move 1 to SCREEN-INVISIBLE.
                  move 0 to SCREEN-ACTIVE.
                else.
                  if LF_FLASR eq ABAP_TRUE.
                    move 2 to SCREEN-REQUIRED.
                  else.
                    move 1 to SCREEN-INVISIBLE.
                    move 0 to SCREEN-ACTIVE.
                  endif.
                endif.

***           Check Die Cut Tool Number
              when 'DCU'.
                if ME->S_CSTEP_PERF_VIS-TPERF is initial.
                  move 1 to SCREEN-INVISIBLE.
                  move 0 to SCREEN-ACTIVE.
                else.
                  if LF_FLASR eq ABAP_FALSE.
                    if SCREEN-INPUT eq 1.
                      move 2 to SCREEN-REQUIRED.
                    endif.
                  else.
                    move 1 to SCREEN-INVISIBLE.
                    move 0 to SCREEN-ACTIVE.
                  endif.
                endif.
            endcase.

          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Super
    SUPER->DO_PBO( ).

***--------------------------------------------------------------------------------------
*** Define DropDown Values for Cutout Location
    ME->SET_DDVAL_LCOUT( ).

  endmethod.
  method DO_UPDATE_VIS.

    data: LF_NOLAS type  ZVCXI_F0S_NOLAS,
          LF_DCUTT type  ZVCXI_F0S_DCUTT.
    data: LS_CSTEP_PERF_VIS type ZVCXI_FBSS_S_CSTEP_PERF_VIS.


*** Call SUPER
    SUPER->DO_UPDATE_VIS( IS_VIS = IS_VIS ).

    check ME->R_PR_CSTEP_PERF is bound.

*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_CSTEP_PERF_VIS.

***--------------------------------------------------------------------------------------
*** Perforation Type
    if ME->S_CSTEP_PERF_VIS-TPERF ne LS_CSTEP_PERF_VIS-TPERF.
      ME->R_PR_CSTEP_PERF->SET_TPERF( exporting IF_TPERF = LS_CSTEP_PERF_VIS-TPERF
                                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

    move LS_CSTEP_PERF_VIS-NOLAS to LF_NOLAS.
    move LS_CSTEP_PERF_VIS-DCUTT to LF_DCUTT.
    case ME->R_PR_CSTEP_PERF->GET_TPERF_FLASR( ).
      when ABAP_TRUE.
        clear LF_DCUTT.
      when ABAP_FALSE.
        clear LF_NOLAS.
    endcase.

*** Number of Laser Lines
    if ME->S_CSTEP_PERF_VIS-NOLAS ne LF_NOLAS.
      ME->R_PR_CSTEP_PERF->SET_NOLAS( IF_NOLAS = LF_NOLAS
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Die Cut Tool Number
    if ME->S_CSTEP_PERF_VIS-DCUTT ne LF_DCUTT.
      ME->R_PR_CSTEP_PERF->SET_DCUTT( IF_DCUTT = LF_DCUTT
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Cutout Location
    if ME->S_CSTEP_PERF_VIS-LCOUT ne LS_CSTEP_PERF_VIS-LCOUT.
      ME->R_PR_CSTEP_PERF->SET_LCOUT( IF_LCOUT = LS_CSTEP_PERF_VIS-LCOUT
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Cutout Area
    if ME->S_CSTEP_PERF_VIS-S_COARE ne LS_CSTEP_PERF_VIS-S_COARE.
      ME->R_PR_CSTEP_PERF->SET_COARE( IS_COARE = LS_CSTEP_PERF_VIS-S_COARE
                                      IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_CSTEP_PERF.

  endmethod.
  method INIT_VIS.

    SUPER->INIT_VIS( ).
    move ME->S_CSTEP_VIS to ME->S_CSTEP_PERF_VIS-S_CSTEP_VIS.

    check ME->R_PR_CSTEP_PERF is bound.

*** Perforation Type
    ME->R_PR_CSTEP_PERF->GET_TPERF( importing EF_TPERF = ME->S_CSTEP_PERF_VIS-TPERF ).

*** Number of Laser Lines
    ME->R_PR_CSTEP_PERF->GET_NOLAS( importing EF_NOLAS = ME->S_CSTEP_PERF_VIS-NOLAS ).

*** Die Cut Tool Number
    ME->R_PR_CSTEP_PERF->GET_DCUTT( importing EF_DCUTT = ME->S_CSTEP_PERF_VIS-DCUTT
                                              EF_DESCR = ME->S_CSTEP_PERF_VIS-DCUTT_DESCR ).

*** Cutout Location
    ME->R_PR_CSTEP_PERF->GET_LCOUT( importing EF_LCOUT = ME->S_CSTEP_PERF_VIS-LCOUT ).

*** Cutout Area
    ME->R_PR_CSTEP_PERF->GET_COARE( importing ES_COARE = ME->S_CSTEP_PERF_VIS-S_COARE ).

  endmethod.
  method SET_DDVAL_LCOUT.

    data:           LF_ID         type        VRM_ID.
    data:           LS_BPINFO     type        ZVCXI_FBSS_S_BPINFO.
    data:           LT_VALUE      type        VRM_VALUES.
    data:           LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.
    field-symbols:  <S_VALUE>     type        VRM_VALUE.

    ME->R_PR_CSTEP_PERF->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
    loop at LR_BL_BGFPROP->T_BPINFO into LS_BPINFO.
      append initial line to LT_VALUE assigning <S_VALUE>.

      move LS_BPINFO-IBPAR                                          to <S_VALUE>-KEY.
      move ZCL_VCXI_FBSSC_BAGTY=>GET_IBPAR_DESCR( LS_BPINFO-IBPAR ) to <S_VALUE>-TEXT.
    endloop.

***------------------------------------------------------------------------------------------------
*** Set to DropDown List
    move 'ZVCXI_FBSS_S_CSTEP_PERF_VIS-LCOUT' to LF_ID.

*** Initialize listbox content
    call function 'VRM_REFRESH_VALUES'.

    call function 'VRM_SET_VALUES'
      exporting
        ID     = LF_ID
        VALUES = LT_VALUE.

  endmethod.
