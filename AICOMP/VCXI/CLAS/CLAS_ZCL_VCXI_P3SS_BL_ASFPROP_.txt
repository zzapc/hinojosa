
class ZCL_VCXI_P3SS_BL_ASFPROP definition
  public
  create protected .

public section.

  data F_PRODH type PRODH_D read-only .
  data S_ADDWT type ZVCXI_PXS_S_ADDWT read-only .
  data S_HNDDIM type ZVCXI_PXS_S_HNDDIM read-only .
  data T_APINFO type ZVCXI_P3SS_TT_APINFO read-only .
  data T_JOITY type ZVCXI_PXS_TT_JOITY read-only .

  methods DET_PRODH
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_ASFPX type ZVCXI_P3S_ASFPX optional
    returning
      value(RR_BL_ASFPROP) type ref to ZCL_VCXI_P3SS_BL_ASFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_ASFPX
    returning
      value(RF_ASFPX) type ZVCXI_P3S_ASFPX
    raising
      /VCXI/CX_CKX .
  methods GET_COUAR
    returning
      value(RS_COUAR) type ZVCXI_PXS_S_COUAR
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_COUWT
    returning
      value(RS_COUWT) type ZVCXI_PXS_S_COUWT
    raising
      /VCXI/CX_CKX .
  methods GET_SBLAR
    returning
      value(RS_SBLAR) type ZVCXI_PXS_S_SBLAR
    raising
      /VCXI/CX_CKX .
  methods GET_SBLWT
    returning
      value(RS_SBLWT) type ZVCXI_PXS_S_SBLWT
    raising
      /VCXI/CX_CKX .
  methods MERGE
    importing
      !IR_BL_ASFPROP type ref to ZCL_VCXI_P3SS_BL_ASFPROP
    raising
      /VCXI/CX_CKX .
  methods MERGE_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods MERGE_PRODH
    importing
      !IF_PRODH type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods SET_APINFO
    importing
      !IT_APINFO type ZVCXI_P3SS_TT_APINFO
    raising
      /VCXI/CX_CKX .
  methods SET_ASFPX
    importing
      !IF_ASFPX type ZVCXI_P3S_ASFPX
    raising
      /VCXI/CX_CKX .
  methods SET_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY
    importing
      !IT_JOITY type ZVCXI_PXS_TT_JOITY
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D
    raising
      /VCXI/CX_CKX .
protected section.

  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P3SS_BL_ASFPROP definition
class ZCL_VCXI_P3SS_BL_ASFPROP implementation.
  method DET_PRODH.

    data: LS_PRODHS type PRODHS.


    check IR_GATE          is bound and
          IR_GATE->R_CLSPR is bound.

*** Convert previous Production Hierarchy to Structure
    LS_PRODHS = ME->F_PRODH.

*** Determine adjusted Hierarchy based on provided Gate (e.g. CStep)
ENHANCEMENT-SECTION DET_PRODH SPOTS ZVCXI_P3SS_ES_BL_ASFPROP .
*    case type of IR_GATE->R_CLSPR.
*      when type ZCL_VCXI_P3SS_PR_CSTEP_ASMBL into data(LR_PR_CSTEP_ASMBL).
*        "Custom-Specific
*    endcase.
END-ENHANCEMENT-SECTION.

*** Return Production Hierarchy based on Structure
    RF_PRODH = LS_PRODHS.

  endmethod.
  method FACTORY.

*** Create BL Reference
ENHANCEMENT-SECTION FACTORY SPOTS ZVCXI_P3SS_ES_BL_ASFPROP .
    create object RR_BL_ASFPROP.
end-enhancement-section.

*** Set Corrugator Forward Property XML
    RR_BL_ASFPROP->SET_ASFPX( IF_ASFPX = IF_ASFPX ).

  endmethod.
  method GET_ADDWT.

*** Additional Weight on Assembly
    RS_ADDWT = ME->S_ADDWT.

*** Collect and add Assembly Part Information
    loop at ME->T_APINFO into data(LS_APINFO)
                        where ADDWT_UOM is not initial.
***   Apply Part Ratio
      LS_APINFO-S_ADDWT-ADDWT = LS_APINFO-S_ADDWT-ADDWT * LS_APINFO-PARAT.

      if RS_ADDWT is initial.
        RS_ADDWT = LS_APINFO-S_ADDWT.
      else.
***     Create Sum
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_ADDWT-ADDWT
                                                            IF_CALCV_UOM_1 = RS_ADDWT-ADDWT_UOM
                                                            IF_CALCV_2     = LS_APINFO-S_ADDWT-ADDWT
                                                            IF_CALCV_UOM_2 = LS_APINFO-S_ADDWT-ADDWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_ADDWT-ADDWT_UOM
                                                  importing EF_CALCV       = RS_ADDWT-ADDWT
                                                            EF_CALCV_UOM   = RS_ADDWT-ADDWT_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_ASFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).
    check LT_DATA is not initial.

*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_ASFPX.

  endmethod.
  method GET_COUAR.

    data: LS_APINFO type ZVCXI_P3SS_S_APINFO.


*** Collect Assembly Part Information
    loop at ME->T_APINFO into LS_APINFO
                        where COUAR_UOM is not initial.
***   Apply Part Ratio
      LS_APINFO-S_COUAR-COUAR = LS_APINFO-S_COUAR-COUAR * LS_APINFO-PARAT.

      if RS_COUAR is initial.
        RS_COUAR = LS_APINFO-S_COUAR.
      else.
***     Create Sum
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_COUAR-COUAR
                                                            IF_CALCV_UOM_1 = RS_COUAR-COUAR_UOM
                                                            IF_CALCV_2     = LS_APINFO-S_COUAR-COUAR
                                                            IF_CALCV_UOM_2 = LS_APINFO-S_COUAR-COUAR_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_COUAR-COUAR_UOM
                                                  importing EF_CALCV       = RS_COUAR-COUAR
                                                            EF_CALCV_UOM   = RS_COUAR-COUAR_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_COUWT.

    data: LS_APINFO type ZVCXI_P3SS_S_APINFO.


*** Collect Assembly Part Information
    loop at ME->T_APINFO into LS_APINFO
                        where COUWT_UOM is not initial.
***   Apply Part Ratio
      LS_APINFO-S_COUWT-COUWT = LS_APINFO-S_COUWT-COUWT * LS_APINFO-PARAT.

      if RS_COUWT is initial.
        RS_COUWT = LS_APINFO-S_COUWT.
      else.
***     Create Sum
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_COUWT-COUWT
                                                            IF_CALCV_UOM_1 = RS_COUWT-COUWT_UOM
                                                            IF_CALCV_2     = LS_APINFO-S_COUWT-COUWT
                                                            IF_CALCV_UOM_2 = LS_APINFO-S_COUWT-COUWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_COUWT-COUWT_UOM
                                                  importing EF_CALCV       = RS_COUWT-COUWT
                                                            EF_CALCV_UOM   = RS_COUWT-COUWT_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_SBLAR.

    data: LS_APINFO type ZVCXI_P3SS_S_APINFO.


*** Collect Assembly Part Information
    loop at ME->T_APINFO into LS_APINFO
                        where SBLAR_UOM is not initial.
***   Apply Part Ratio
      LS_APINFO-S_SBLAR-SBLAR = LS_APINFO-S_SBLAR-SBLAR * LS_APINFO-PARAT.

      if RS_SBLAR is initial.
        RS_SBLAR = LS_APINFO-S_SBLAR.
      else.
***     Create Sum
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SBLAR-SBLAR
                                                            IF_CALCV_UOM_1 = RS_SBLAR-SBLAR_UOM
                                                            IF_CALCV_2     = LS_APINFO-S_SBLAR-SBLAR
                                                            IF_CALCV_UOM_2 = LS_APINFO-S_SBLAR-SBLAR_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SBLAR-SBLAR_UOM
                                                  importing EF_CALCV       = RS_SBLAR-SBLAR
                                                            EF_CALCV_UOM   = RS_SBLAR-SBLAR_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_SBLWT.

    data: LS_APINFO type ZVCXI_P3SS_S_APINFO.


*** Collect Assembly Part Information
    loop at ME->T_APINFO into LS_APINFO
                        where SBLWT_UOM is not initial.
***   Apply Part Ratio
      LS_APINFO-S_SBLWT-SBLWT = LS_APINFO-S_SBLWT-SBLWT * LS_APINFO-PARAT.

      if RS_SBLWT is initial.
        RS_SBLWT = LS_APINFO-S_SBLWT.
      else.
***     Create Sum
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SBLWT-SBLWT
                                                            IF_CALCV_UOM_1 = RS_SBLWT-SBLWT_UOM
                                                            IF_CALCV_2     = LS_APINFO-S_SBLWT-SBLWT
                                                            IF_CALCV_UOM_2 = LS_APINFO-S_SBLWT-SBLWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_SBLWT-SBLWT_UOM
                                                  importing EF_CALCV       = RS_SBLWT-SBLWT
                                                            EF_CALCV_UOM   = RS_SBLWT-SBLWT_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'S_HNDDIM'  VALUE = ref #( ME->S_HNDDIM ) )
                       ( NAME = 'S_ADDWT'   VALUE = ref #( ME->S_ADDWT  ) )
                       ( NAME = 'T_JOITY'   VALUE = ref #( ME->T_JOITY  ) )
                       ( NAME = 'T_APINFO'  VALUE = ref #( ME->T_APINFO ) )
                       ( NAME = 'F_PRODH'   VALUE = ref #( ME->F_PRODH  ) )
                     ).

  endmethod.
  method MERGE.

    check IR_BL_ASFPROP is bound.

*** Assembly Part Information and Joint Types
    ME->SET_HNDDIM( IS_HNDDIM = IR_BL_ASFPROP->S_HNDDIM ).

*** Additional Weight
    ME->MERGE_ADDWT( IS_ADDWT = IR_BL_ASFPROP->S_ADDWT ).

*** Assembly Part Information and Joint Types
    ME->SET_APINFO( IT_APINFO = IR_BL_ASFPROP->T_APINFO ).
    ME->SET_JOITY(  IT_JOITY  = IR_BL_ASFPROP->T_JOITY ).

*** Product Hierarchy
    ME->MERGE_PRODH( IF_PRODH = IR_BL_ASFPROP->F_PRODH ).

  endmethod.
  method MERGE_ADDWT.

    data: LS_ADDWT type ZVCXI_PXS_S_ADDWT.


    check IS_ADDWT is not initial.

***----------------------------------------------------------------------------
    if ME->S_ADDWT is not initial.
***   Summarize Additional Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_ADDWT-ADDWT
                                                          IF_CALCV_UOM_1 = ME->S_ADDWT-ADDWT_UOM
                                                          IF_CALCV_2     = IS_ADDWT-ADDWT
                                                          IF_CALCV_UOM_2 = IS_ADDWT-ADDWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = ME->S_ADDWT-ADDWT_UOM
                                                importing EF_CALCV       = LS_ADDWT-ADDWT
                                                          EF_CALCV_UOM   = LS_ADDWT-ADDWT_UOM ).
    else.
***   Use provided Additional Weight
      LS_ADDWT = IS_ADDWT.
    endif.

***----------------------------------------------------------------------------
*** Set new Additional Weight
    ME->SET_ADDWT( IS_ADDWT = LS_ADDWT ).

  endmethod.
  method MERGE_PRODH.

    data: LF_PRODH type PRODH_D.


    check IF_PRODH is not initial.

***----------------------------------------------------------------------------
    if ME->F_PRODH is not initial.
***   Summarize Product Hierarchy
ENHANCEMENT-SECTION MERGE_PRODH SPOTS ZVCXI_P3SS_ES_BL_ASFPROP .
      LF_PRODH = ME->F_PRODH.
END-ENHANCEMENT-SECTION.
    else.
***   Use provided Product Hierarchy
      LF_PRODH = IF_PRODH.
    endif.

***----------------------------------------------------------------------------
*** Set new Product Hierarchy
    ME->SET_PRODH( IF_PRODH = LF_PRODH ).

  endmethod.
  method SET_ADDWT.

    move IS_ADDWT to ME->S_ADDWT.

  endmethod.
  method SET_APINFO.

    ME->T_APINFO = IT_APINFO.

  endmethod.
  method SET_ASFPX.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


***--------------------------------------------------------------------------------------
*** Deserialize XML
    if IF_ASFPX is not initial.

***   Get Data References for XML Serialize/Deserialize
      LT_DATA = ME->GET_XML_DREF( ).
      check LT_DATA is not initial.

***   Open XML
      call transformation ID
           source xml IF_ASFPX
           result (LT_DATA).

    endif.

  endmethod.
  method SET_HNDDIM.

    move IS_HNDDIM to ME->S_HNDDIM.

  endmethod.
  method SET_JOITY.

    ME->T_JOITY = IT_JOITY.

  endmethod.
  method SET_PRODH.

    ME->F_PRODH = IF_PRODH.

  endmethod.
