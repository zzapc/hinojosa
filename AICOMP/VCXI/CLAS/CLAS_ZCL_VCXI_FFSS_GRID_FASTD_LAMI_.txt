
class ZCL_VCXI_FFSS_GRID_FASTD_LAMI definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  data F_SFDAT type ZVCXI_F0SS_SFDAT .
  data R_GATE_OUT type ref to /VCXI/CL_VKSR_GATE .
  data R_GATE_FFG type ref to /VCXI/CL_VKSR_GATE .
  data T_FASTD_LAMI type ZVCXI_FFSS_TT_FASTD_LAMI .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_FFSS_S_FASTD_LAMI_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
      !IR_BL_FASTD type ref to ZCL_VCXI_FFSS_BL_FASTD
    raising
      /VCXI/CX_CKX .
protected section.

  data R_BL_FASTD type ref to ZCL_VCXI_FFSS_BL_FASTD .

  methods GET_FASTD_LAMI_VIS
    importing
      !IS_FASTD_LAMI type ZVCXI_FFSS_S_FASTD_LAMI
      !IR_GATE_INP type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods GET_FASTD_LAMI_VIS_BY_INP
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_FASTD_LAMI_VIS
    importing
      !IS_DATA type ANY
      !IR_GATE_INP type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_FASTD_LAMI_VIS_BY_CSTEP
    importing
      !IS_FASTD_CSTEP type ZVCXI_FFSS_S_FASTD_CSTEP
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID .
  methods CHANGE_STYLE_FASTD_LAMI
    importing
      !IS_FASTD_LAMI type ZVCXI_FFSS_S_FASTD_LAMI
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_DOUBLE_CLICK
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_GRID_FASTD_LAMI definition
class ZCL_VCXI_FFSS_GRID_FASTD_LAMI implementation.
  method CHANGE_STYLE_FASTD_LAMI.

    data: LR_PR_EXTR    type ref to ZCL_VCXI_FFSS_PR_EXTR,
          LR_PR_MS_GLUE type ref to ZCL_VCXI_FFSS_PR_MS_GLUE,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

    free CT_STYL.

***--------------------------------------------------------------------------------------
*** Process Inputs
    loop at IS_FASTD_LAMI-T_GATE_INP into LR_GATE.
***   Try to get Extrusion
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_GLUE.
        catch CX_SY_MOVE_CAST_ERROR.
          free LR_PR_MS_GLUE.
      endtry.
    endloop.

    check LR_PR_MS_GLUE is bound.

***--------------------------------------------------------------------------------------
*** Procurement Option
    case LR_PR_MS_GLUE->GET_PURCH( ).
      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
***     Set Vendor = Enable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                    IF_STYLE     = ME->F_STYLE_ENABLED
                          changing  CT_STYL      = CT_STYL ).
***     Set Button Price Scale = Enable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PSICO'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON
                          changing  CT_STYL      = CT_STYL ).

      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
***     Set Vendor = Enable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                    IF_STYLE     = ME->F_STYLE_ENABLED
                          changing  CT_STYL      = CT_STYL ).
***     Set Button Price Scale = Disabled
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PSICO'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).

      when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
***     Set Vendor = Disable
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'LIFNR'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
***     Set Button Price Scale = Disabled
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PSICO'
                                    IF_STYLE     = ME->F_STYLE_DISABLED
                          changing  CT_STYL      = CT_STYL ).
    endcase.

***--------------------------------------------------------------------------------------
*** Glue Type
    if LR_PR_MS_GLUE->IS_DUMMY( ) ne ABAP_TRUE.
***   Set Glue Type Disabled
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TGLUE'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Material Description = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNR_GLUE_DESCR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
***   Set Solid Content = Disable
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SLDCO'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Store BL Instance
    move IR_BL_FASTD to ME->R_BL_FASTD.

  endmethod.
  method GET_FASTD_LAMI_VIS.

    data: LS_FASTD_LAMI_VIS type ZVCXI_FFSS_S_FASTD_LAMI_VIS,
          LS_FASTD_CSTEP    type ZVCXI_FFSS_S_FASTD_CSTEP.


***--------------------------------------------------------------------------------------
*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_FASTD_LAMI_VIS.

*** Lamination Step
    move IS_FASTD_LAMI-LASTP to LS_FASTD_LAMI_VIS-LASTP.

    if IR_GATE_INP is bound.
***   Set Traffic Light
      case IR_GATE_INP->GET_STATUS( ).
        when /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          move ICON_GREEN_LIGHT    to LS_FASTD_LAMI_VIS-FSICO.
        when /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y or
             /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
          move ICON_RED_LIGHT      to LS_FASTD_LAMI_VIS-FSICO.
        when /VCXI/CL_VKSR_SERVICE=>C_ELMST_E.
          move ICON_FAILURE        to LS_FASTD_LAMI_VIS-FSICO.
      endcase.
    endif.

*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_FASTD_LAMI_VIS to CS_DATA.

***--------------------------------------------------------------------------------------
    if IR_GATE_INP is bound.
***   Fill Values by Input
      ME->GET_FASTD_LAMI_VIS_BY_INP( exporting IR_GATE = IR_GATE_INP
                                     changing  CS_DATA = CS_DATA ).
    endif.

*** Process Conversion Steps
    loop at IS_FASTD_LAMI-T_FASTD_CSTEP into LS_FASTD_CSTEP.
      ME->GET_FASTD_LAMI_VIS_BY_CSTEP( exporting IS_FASTD_CSTEP = LS_FASTD_CSTEP
                                       changing  CS_DATA        = CS_DATA ).
    endloop.

  endmethod.
  method GET_FASTD_LAMI_VIS_BY_CSTEP.

*{   REPLACE        HEDK918175                                        1
*\    data: LS_FASTD_LAMI_VIS type        ZVCXI_FFSS_S_FASTD_LAMI_VIS.
    data: LS_FASTD_LAMI_VIS type        ZVCXI_FFSS_S_FASTD_LAMI_VIS.
    data: LS_PR_CSTEP_PRINT type REF TO ZCL_VCXI_FFSS_PR_CSTEP_PRINT.
*}   REPLACE


    check IS_FASTD_CSTEP-R_GATE is bound and
          IS_FASTD_CSTEP-R_GATE->R_CLSPR is bound.

***--------------------------------------------------------------------------------------
*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_FASTD_LAMI_VIS.

***--------------------------------------------------------------------------------------
*{   REPLACE        HEDK918175                                        2
*\    case type of IS_FASTD_CSTEP-R_GATE->R_CLSPR.
*\***   Printing
*\      when type ZCL_VCXI_FFSS_PR_CSTEP_PRINT.
*\        move ABAP_TRUE to LS_FASTD_LAMI_VIS-FPRIN.
*\    endcase.
try.
  move IS_FASTD_CSTEP-R_GATE->R_CLSPR ?to LS_PR_CSTEP_PRINT.
  if SY-SUBRC eq 0.
    move ABAP_TRUE to LS_FASTD_LAMI_VIS-FPRIN.
  endif.
endtry.
*}   REPLACE

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_FASTD_LAMI_VIS to CS_DATA.

  endmethod.
  method GET_FASTD_LAMI_VIS_BY_INP.

    data: LS_FASTD_LAMI_VIS type        ZVCXI_FFSS_S_FASTD_LAMI_VIS.
    data: LR_PR_MS_GLUE     type ref to ZCL_VCXI_FFSS_PR_MS_GLUE.


***--------------------------------------------------------------------------------------
*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_FASTD_LAMI_VIS.

***--------------------------------------------------------------------------------------
*** Identify Glue
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_MS_GLUE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_GLUE.
    endtry.
    check LR_PR_MS_GLUE is bound.

*** Material
    move LR_PR_MS_GLUE->GET_MATNR( )       to LS_FASTD_LAMI_VIS-MATNR_GLUE.
    move LR_PR_MS_GLUE->GET_MATNR_DESCR( ) to LS_FASTD_LAMI_VIS-MATNR_GLUE_DESCR.

*** Application Weight
    LR_PR_MS_GLUE->GET_APWGT( importing ES_APWGT = LS_FASTD_LAMI_VIS-S_APWGT ).
    move LS_FASTD_LAMI_VIS-S_APWGT-APWGT_UOM to LS_FASTD_LAMI_VIS-APWGT_UOMC6.

*** Glue Type
    LR_PR_MS_GLUE->GET_TGLUE( importing EF_TGLUE = LS_FASTD_LAMI_VIS-TGLUE ).

*** Solid Content
    LR_PR_MS_GLUE->GET_SLDCO( importing ES_SLDCO = LS_FASTD_LAMI_VIS-S_SLDCO ).

*** Set Price Scale Icon based on Procurement Option
    if LR_PR_MS_GLUE->GET_PURCH( ) eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
      move ICON_PRICE to LS_FASTD_LAMI_VIS-PSICO.
    endif.

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_FASTD_LAMI_VIS to CS_DATA.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE,
          LF_COLPOS type I,
          LF_LIFNR  type ABAP_BOOL,
          LF_PRICE  type ABAP_BOOL.
    data: LS_FASTD_LAMI type ZVCXI_FFSS_S_FASTD_LAMI.
    data: LR_GATE_INP   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_GLUE type ref to ZCL_VCXI_FFSS_PR_MS_GLUE.
    field-symbols: <S_FCAT>           type LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***--------------------------------------------------------------------------------------
*** Check if we have purchased glue
    loop at T_FASTD_LAMI into LS_FASTD_LAMI.
      loop at LS_FASTD_LAMI-T_GATE_INP into LR_GATE_INP.
        try.
            move LR_GATE_INP->R_CLSPR ?to LR_PR_MS_GLUE.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_PR_MS_GLUE.
        endtry.
        check LR_PR_MS_GLUE is bound.

        case LR_PR_MS_GLUE->GET_PURCH( ).
          when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
            LF_LIFNR = ABAP_TRUE.
            LF_PRICE = ABAP_TRUE.
          when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
            LF_LIFNR = ABAP_TRUE.
        endcase.
      endloop.
    endloop.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

        when 'FSICO'.
          move ABAP_TRUE       to <S_FCAT>-ICON.
          move ABAP_TRUE       to <S_FCAT>-FIX_COLUMN.
          move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
          move 'Status'(C01)   to <S_FCAT>-REPTEXT.
          move 'Status'(C01)   to <S_FCAT>-SCRTEXT_L.
          move 'Status'(C01)   to <S_FCAT>-SCRTEXT_M.
          move 'Status'(C01)   to <S_FCAT>-SCRTEXT_S.

        when 'FPRIN'.
          move ABAP_TRUE to <S_FCAT>-CHECKBOX.
          if LF_LOCKED   eq ABAP_TRUE and
             LF_INUSE    eq ABAP_TRUE and
             ME->F_SFDAT eq ZCL_VCXI_FFSS_BL_FASTD=>C_SFDAT_STANDARD.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'MATNR_GLUE'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'TGLUE'.
          move ABAP_TRUE to <S_FCAT>-EDIT.
          move ABAP_TRUE to <S_FCAT>-F4AVAILABL.

        when 'MATNR_GLUE_DESCR'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
            move 40         to <S_FCAT>-DD_OUTLEN.
          endif.

        when 'APWGT'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.
        when 'APWGT_UOM'.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        when 'APWGT_UOMC6'.

        when 'SLDCO'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-EDIT.
          endif.

        when 'PSICO'.
          if LF_PRICE eq ABAP_TRUE.
            move ABAP_TRUE  to <S_FCAT>-ICON.
            move ABAP_FALSE to <S_FCAT>-F4AVAILABL.
          else.
            move ABAP_TRUE  to <S_FCAT>-NO_OUT.
          endif.
      endcase.

***----------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ICON'.             <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'LASTP'.            <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FPRIN'.            <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MATNR_GLUE'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'MATNR_GLUE_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TGLUE'.            <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APWGT'.            <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'APWGT_UOMC6'.      <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SLDCO'.            <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SLDCO_UOM'.        <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'PSICO'.            <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    endloop.

    sort RT_FCAT by COL_POS.

  endmethod.
  method GET_GRID_DATA.

    data: LS_LAYOUT     type          LVC_S_LAYO,
          LS_FASTD_LAMI type          ZVCXI_FFSS_S_FASTD_LAMI.
    data: LR_GATE_INP   type ref to   /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA>     type standard table,
                   <S_DATA>     type          ANY,
                   <T_STYL>     type          LVC_T_STYL,
                   <R_GATE_INP> type ref to   /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Layout
    LS_LAYOUT = ME->GET_LAYOUT( ).

***--------------------------------------------------------------------------------------
    loop at ME->T_FASTD_LAMI into LS_FASTD_LAMI.
      loop at LS_FASTD_LAMI-T_GATE_INP into LR_GATE_INP.
        append initial line to <T_DATA> assigning <S_DATA>.

        assign component 'R_GATE_INP' of structure <S_DATA> to <R_GATE_INP>.
        move LR_GATE_INP to <R_GATE_INP>.

***     Get Visualization Structure
        ME->GET_FASTD_LAMI_VIS( exporting IS_FASTD_LAMI = LS_FASTD_LAMI
                                          IR_GATE_INP   = LR_GATE_INP
                                changing  CS_DATA       = <S_DATA> ).

***     Set Style Details
        if LS_LAYOUT-STYLEFNAME is not initial.
          assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
          if SY-SUBRC eq 0.
            ME->CHANGE_STYLE_FASTD_LAMI( exporting IS_FASTD_LAMI = LS_FASTD_LAMI
                                                   IS_DATA       = <S_DATA>
                                          changing CT_STYL       = <T_STYL> ).
***         Call DVC Service - Modify Style
            ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE_INP
                                                 changing  CT_STYL = <T_STYL> ).
          endif.
        endif.
      endloop.
    endloop.

  endmethod.
  method HANDLE_BUTTON_CLICK.

    data: LS_FASTD_LAMI type        ZVCXI_FFSS_S_FASTD_LAMI.
    data: LR_PR_MS_GLUE type ref to ZCL_VCXI_FFSS_PR_MS_GLUE,
          LR_CX_CKX     type ref to /VCXI/CX_CKX,
          LR_GATE       type ref to /VCXI/CL_VKSR_GATE.

    try.
***     Check Column
        case ES_COL_ID-FIELDNAME.

***--------------------------------------------------------------------------------------
***       Price Scale
          when 'PSICO'.
***         Get Row of Button Click
            read table ME->T_FASTD_LAMI into LS_FASTD_LAMI index ES_ROW_NO-ROW_ID.
            check SY-SUBRC eq 0.

            read table LS_FASTD_LAMI-T_GATE_INP into LR_GATE index 1.
            check LR_GATE is bound.
            try.
                move LR_GATE->R_CLSPR ?to LR_PR_MS_GLUE.
              catch CX_SY_MOVE_CAST_ERROR.
                exit.
            endtry.

            check LR_PR_MS_GLUE->GET_PURCH( ) eq ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.

***         Call Price Scale Popup
            ZCL_VCXI_FFSS_POPUP_PSCALE=>START( IR_GATE    = LR_GATE
                                               IR_UIGATE  = ME->R_UIGATE
                                               IF_LOCKED  = ABAP_TRUE ).

***         Request Refresh for ALV
            move ABAP_TRUE to ME->F_REFRESH_REQ.

        endcase.

        if ME->F_REFRESH_REQ eq ABAP_TRUE.
          ME->R_UIGATE->REFRESH_SCREEN( ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LF_NOOUT       type        ZVCXI_XCS_NOOUT,
          LF_SETBY_NOOUT type        /VCXI/VKSR_SETBY,
          LF_SETBY_TRWID type        /VCXI/VKSR_SETBY,
          LF_ID          type          /VCXI/CKX_ID.
    data: LS_TRWID           type        ZVCXI_F0S_S_TRWID.
    data: LT_FASTD_INP   type          ZVCXI_FFSS_TT_FASTD_INP,
          LT_FASTD_LAMI  type          ZVCXI_FFSS_TT_FASTD_LAMI,
          LT_SPVRE_FCOMP type          /VCXI/VKSR_TT_SPVRE.
    data:          LR_CX_CKX          type ref to   /VCXI/CX_CKX.
    field-symbols: <T_DATA>        type standard table,
                   <S_DATA>        type          ANY,
                   <R_GATE_INP>    type ref to   /VCXI/CL_VKSR_GATE,
                   <F_FPRIN>       type          ZVCXI_FFS_FPRIN,
                   <S_FASTD_CSTEP> type          ZVCXI_FFSS_S_FASTD_CSTEP,
                   <S_FASTD_LAMI>  type          ZVCXI_FFSS_S_FASTD_LAMI.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
***     Simple Update
        loop at <T_DATA> assigning <S_DATA>.
          assign component 'R_GATE_INP' of structure <S_DATA> to <R_GATE_INP>.
***       Set Values that don't force a new structure
          ME->SET_FASTD_LAMI_VIS( IS_DATA     = <S_DATA>
                                  IR_GATE_INP = <R_GATE_INP> ).
        endloop.


***--------------------------------------------------------------------------------------
***     Build new Structure
        read table ET_GOOD_CELLS with key FIELDNAME = 'FPRIN'
                                 transporting no fields.
        if SY-SUBRC eq 0.
***       Get current Structure
          if ME->R_GATE_OUT is bound.
            ME->R_BL_FASTD->GET_FASTD_BY_OUT( exporting IR_GATE_OUT    = ME->R_GATE_OUT
                                              importing ET_FASTD_INP   = LT_FASTD_INP
                                                        ET_FASTD_LAMI  = LT_FASTD_LAMI
                                                        ET_SPVRE_FCOMP = LT_SPVRE_FCOMP
                                                        EF_NOOUT       = LF_NOOUT
                                                        EF_SETBY_NOOUT = LF_SETBY_NOOUT
                                                        ES_TRWID       = LS_TRWID
                                                        EF_SETBY_TRWID = LF_SETBY_TRWID ).
          endif.

***       Adjust Structure
          loop at <T_DATA> assigning <S_DATA>.

            read table LT_FASTD_LAMI assigning <S_FASTD_LAMI> index SY-TABIX.
            check SY-SUBRC eq 0.

***         Change of Printed Flag
            move ME->R_BL_FASTD->GET_ID_BY_IPRVT( IF_IPRVT = ZCL_VCXI_FFSS_PR_CSTEP_PRINT=>C_IPRVT_CSTEP_PRINT ) to LF_ID.
            assign component 'FPRIN' of structure <S_DATA> to <F_FPRIN>.
            if <F_FPRIN> eq ABAP_TRUE.
              if not LINE_EXISTS( <S_FASTD_LAMI>-T_FASTD_CSTEP[ ICSTP = LF_ID ] ).
                append initial line to <S_FASTD_LAMI>-T_FASTD_CSTEP assigning <S_FASTD_CSTEP>.
                <S_FASTD_CSTEP>-ICSTP = LF_ID.
                <S_FASTD_CSTEP>-FSPCO = ABAP_UNDEFINED.
              endif.
            else.
              delete <S_FASTD_LAMI>-T_FASTD_CSTEP where ICSTP eq LF_ID.
            endif.
          endloop.

***       Set the new Structure
          if ME->R_GATE_OUT is bound.
            ME->R_BL_FASTD->SET_FASTD_BY_OUT( IR_GATE_OUT    = ME->R_GATE_OUT
                                              IF_NOOUT       = LF_NOOUT
                                              IF_SETBY_NOOUT = LF_SETBY_NOOUT
                                              IS_TRWID       = LS_TRWID
                                              IF_SETBY_TRWID = LF_SETBY_TRWID
                                              IT_FASTD_INP   = LT_FASTD_INP
                                              IT_FASTD_LAMI  = LT_FASTD_LAMI
                                              IT_SPVRE_FCOMP = LT_SPVRE_FCOMP ).
          endif.
        endif.

***--------------------------------------------------------------------------------------
***     Process the events
        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_DOUBLE_CLICK.

    data: LS_FASTD_LAMI type        ZVCXI_FFSS_S_FASTD_LAMI.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.

        SUPER->HANDLE_DOUBLE_CLICK( ).

        if E_COLUMN eq 'MATNR_GLUE' and
           ME->F_APPL_EVENTS eq ABAP_TRUE.

***       Get Selected Line
          read table ME->T_FASTD_LAMI into LS_FASTD_LAMI index ES_ROW_NO-ROW_ID.
          check SY-SUBRC eq 0.
***       Get Gate for Selected Line
          read table LS_FASTD_LAMI-T_GATE_INP into LR_GATE index 1.
***       Check Gate is bound and Provider has an own UI
          check LR_GATE is bound and
                LR_GATE->GET_CLSUI( ) is not initial.
***       Open UI
          ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

***       Expand and select in Tree
          ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE->F_GATKY ).
          ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE->F_GATKY ).

        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

    endtry.

  endmethod.
  method HANDLE_HOTSPOT_CLICK.

    data: LS_ROW             type LVC_S_ROW,
          LS_FASTD_LAMI      type ZVCXI_FFSS_S_FASTD_LAMI,
          LS_FASTD_LAMI_GRID type ZVCXI_FFSS_S_FASTD_LAMI_GRID.
    data: LT_MSG        type        /VCXI/CKXM_TT_MSG.
    data: LR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE,
          LR_CX_CKX  type ref to /VCXI/CX_CKX,
          LR_GATE    type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_DATA> type any table,
                   <S_DATA> type ANY.

    try.

        ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_ROW ).
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          check SY-TABIX eq LS_ROW-INDEX.
          move-corresponding <S_DATA> to LS_FASTD_LAMI_GRID.

***       Get Gate Reference
          read table T_FASTD_LAMI into LS_FASTD_LAMI
                     with key LASTP = LS_FASTD_LAMI_GRID-LASTP.
          if SY-SUBRC is initial.
***         Get Status Messages from Gate
            loop at LS_FASTD_LAMI-T_GATE_INP into LR_GATE.
              if LR_GATE is bound and
                 LR_GATE->F_FREED ne ABAP_TRUE.
                LR_MESSAGE = LR_GATE->GET_STATUS_MSG( ).
                append lines of LR_MESSAGE->T_MSG to LT_MSG.
                exit.
              endif.
            endloop.
          endif.
        endloop.

***     Display Messages
        check LR_MESSAGE is bound.
        LR_MESSAGE->T_MSG = LT_MSG.
        LR_MESSAGE->DISPLAY_MSG( IF_SHOW_INITIAL = ABAP_TRUE ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Register Event Handler
    set handler ME->HANDLE_HOTSPOT_CLICK  for ME->R_GRID.
    set handler ME->HANDLE_BUTTON_CLICK   for ME->R_GRID.

  endmethod.
  method SET_FASTD_LAMI_VIS.

    data: LS_FASTD_LAMI_VIS_OLD type        ZVCXI_FFSS_S_FASTD_LAMI_VIS,
          LS_FASTD_LAMI_VIS_NEW type        ZVCXI_FFSS_S_FASTD_LAMI_VIS.
    data: LR_PR_MS_GLUE         type ref to ZCL_VCXI_FFSS_PR_MS_GLUE.

***--------------------------------------------------------------------------------------
*** Get old Values
    ME->GET_FASTD_LAMI_VIS_BY_INP( exporting IR_GATE = IR_GATE_INP
                                   changing  CS_DATA = LS_FASTD_LAMI_VIS_OLD ).
*** Get new Values
    move-corresponding IS_DATA to LS_FASTD_LAMI_VIS_NEW.

***--------------------------------------------------------------------------------------
*** Identify Glue
    try.
        move IR_GATE_INP->R_CLSPR ?to LR_PR_MS_GLUE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_PR_MS_GLUE.
    endtry.
    check LR_PR_MS_GLUE is bound.

*** Material Number
    if LS_FASTD_LAMI_VIS_NEW-MATNR_GLUE ne LS_FASTD_LAMI_VIS_OLD-MATNR_GLUE.
      LR_PR_MS_GLUE->SET_MATNR( IF_MATNR = LS_FASTD_LAMI_VIS_NEW-MATNR_GLUE
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Material Description
    if LS_FASTD_LAMI_VIS_NEW-MATNR_GLUE_DESCR ne LS_FASTD_LAMI_VIS_OLD-MATNR_GLUE_DESCR.
      LR_PR_MS_GLUE->SET_MAKTX( IF_MAKTX = conv MAKTX( LS_FASTD_LAMI_VIS_NEW-MATNR_GLUE_DESCR )
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Application Weight
    if LS_FASTD_LAMI_VIS_NEW-S_APWGT ne LS_FASTD_LAMI_VIS_OLD-S_APWGT.
      LR_PR_MS_GLUE->SET_APWGT( IS_APWGT = LS_FASTD_LAMI_VIS_NEW-S_APWGT
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Solid Content
    if LS_FASTD_LAMI_VIS_NEW-S_SLDCO ne LS_FASTD_LAMI_VIS_OLD-S_SLDCO.
      LR_PR_MS_GLUE->SET_SLDCO( IS_SLDCO = LS_FASTD_LAMI_VIS_NEW-S_SLDCO
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Glue Type
    if LS_FASTD_LAMI_VIS_NEW-TGLUE ne LS_FASTD_LAMI_VIS_OLD-TGLUE.
      LR_PR_MS_GLUE->SET_TGLUE( IF_TGLUE = LS_FASTD_LAMI_VIS_NEW-TGLUE
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
