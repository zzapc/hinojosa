
class ZCL_VCXI_FFSS_CUST_INKTN definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data F_FSLVE type ZVCXI_FFS_FSLVE read-only .
  data S_APWGT type ZVCXI_FFS_S_APWGT read-only .
  data S_CIRCU type ZVCXI_FFS_S_CIRCU read-only .
  data S_COVRG type ZVCXI_FFS_S_COVRG read-only .
  data S_PRWID type ZVCXI_FFS_S_PRWID read-only .

  class-methods GET_INSTANCE_INKTN
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FFSS_CUST_INKTN
    raising
      /VCXI/CX_CKX .
  methods IS_RELEASED
    returning
      value(RF_RELEASED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_MAPID_APWGT type /VCXI/CKXC_MAPID value 'APWGT' ##NO_TEXT.
  constants C_MAPID_CIRCU type /VCXI/CKXC_MAPID value 'CIRCU' ##NO_TEXT.
  constants C_MAPID_COVRG type /VCXI/CKXC_MAPID value 'COVRG' ##NO_TEXT.
  constants C_MAPID_PRWID type /VCXI/CKXC_MAPID value 'PRWID' ##NO_TEXT.
  constants C_SETID_INKTN type /VCXI/CKXC_SETID value 'ZVCXI_FFSS_INKT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
  methods LOAD_BY_MM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_CUST_INKTN definition
class ZCL_VCXI_FFSS_CUST_INKTN implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                        IF_WERKS = IF_WERKS
                        IF_DATE  = IF_DATE ).

*** Load Ink Tool Number by Cross Classification Mapping
    ME->LOAD_BY_CCM( ).

  endmethod.
  method GET_INSTANCE_INKTN.

    data:  LS_INSTANCE type YS_INSTANCE.


***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
               into LS_INSTANCE
               with key MATNR = IF_MATNR
                        WERKS = IF_WERKS
                        DATE  = IF_DATE.

    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
***       Constructor call of redefined Class
enhancement-section GET_INSTANCE_INKTN spots ZVCXI_FFSS_ES_CUST_INKTN .
          create object RR_INSTANCE
            exporting
              IF_MATNR = IF_MATNR
              IF_WERKS = IF_WERKS
              IF_DATE  = IF_DATE.
end-enhancement-section.

          RR_INSTANCE->LOAD_BY_MM( ).

        cleanup.
          if RR_INSTANCE is bound.
            RR_INSTANCE->DO_FREE( ).
          endif.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method IS_RELEASED.

*** Per default, a tool is released
    move ABAP_TRUE to RF_RELEASED.

  endmethod.
  method LOAD_BY_CCM.

    data: LF_OBJNUM type  OBJNUM.
    data: LS_SETVA type  /VCXI/CKXC_S_SETVA,
          LS_MAPVC type  /VCXI/CKXC_S_MAPVC,
          LS_MAPVN type  /VCXI/CKXC_S_MAPVN.
    data: LT_SETVA type  /VCXI/CKXC_TT_SETVA.

*** get Ink Info
    move ME->F_MATNR to LF_OBJNUM.
    LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_INKTN
                                             IF_OBJNUM = LF_OBJNUM
                                             IF_MCTXT  = 'SVC' ).

    loop at LT_SETVA into LS_SETVA.
      clear: LS_MAPVC,
             LS_MAPVN.

      case LS_SETVA-MAPID.
***     Application Weight
        when C_MAPID_APWGT.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_APWGT-APWGT.
            move LS_MAPVN-ATFLV_UOM to ME->S_APWGT-APWGT_UOM.
          endif.

***     Print Width
        when C_MAPID_PRWID.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_PRWID-PRWID.
            move LS_MAPVN-ATFLV_UOM to ME->S_PRWID-PRWID_UOM.
          endif.

***     Circumference
        when C_MAPID_CIRCU.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_CIRCU-CIRCU.
            move LS_MAPVN-ATFLV_UOM to ME->S_CIRCU-CIRCU_UOM.
          endif.

***     Coverage
        when C_MAPID_COVRG.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_COVRG-COVRG.
            move LS_MAPVN-ATFLV_UOM to ME->S_COVRG-COVRG_UOM.
          endif.

      endcase.
    endloop.

  endmethod.
  method LOAD_BY_MM.
  endmethod.
