
class ZCL_VCXI_F0SS_PR_SPEC definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  types:
    begin of YS_SEQUENCE,
        T_GATE_NEXT type /VCXI/VKSR_TT_GATE,  "Outbound Information
        T_GATE_PREV type /VCXI/VKSR_TT_GATE,  "Inbound Information
      end   of YS_SEQUENCE .
  types:
    begin of YS_MAPPING_SEQ,
        PARENT  type ref to /VCXI/CL_VKSR_GATE,
        GPARENT type ref to /VCXI/CL_VKSR_GATE,
        T_GATES type /VCXI/VKSR_TT_GATE,
      end of YS_MAPPING_SEQ .
  types:
    YT_SEQUENCE type standard table of YS_SEQUENCE with default key .
  types:
    YT_MAPPING_SEQ type standard table of YS_MAPPING_SEQ with default key .

  constants C_IEVNT_O_WERKS_CHANGED type /VCXI/VKSC_IEVNT value 'WERKS_CHANGED' ##NO_TEXT.
  constants C_IPRVT_F0_SPEC type /VCXI/VKSC_IPRVT value 'ZVCXI_F0SS_SPEC' ##NO_TEXT.
  constants C_PARID_WERKS type /VCXI/VKS_PARID value 'ZVCXI_XC_WERKS' ##NO_TEXT.

  methods SPLIT
    importing
      !IR_GATE_SOURCE type ref to /VCXI/CL_VKSR_GATE optional
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    exporting
      !EF_WERKS type WERKS_D
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_WERKS_DESCR type /VCXI/CKX_DESCR
      !EF_LANGU type LANGU
    raising
      /VCXI/CX_CKX .
  methods GET_SEQUENCE
    returning
      value(RT_SEQUENCE) type YT_SEQUENCE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XCOMP
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_XCOMP) type ref to ZCL_VCXI_F0SS_PR_XCOMP
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS
    importing
      !IF_WERKS type WERKS_D
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_CSTEPS_DEF
    importing
      !IF_NOCHECK type ABAP_BOOL default ABAP_FALSE
    exporting
      !ET_PRVDR_CSTEPS type ZVCXI_F0SS_TT_PRVDR_DEF
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_BACKWARD type /VCXI/VKSC_IEVNT value 'BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_FORWARD type /VCXI/VKSC_IEVNT value 'FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods BUILD_HIERARCHY_SEQ
    changing
      !CT_GATE_ALL type /VCXI/VKSR_TT_GATE
      !CT_GATE_NEXT type /VCXI/VKSR_TT_GATE
      !CT_GATE_PREV type /VCXI/VKSR_TT_GATE
      !CT_SEQUENCE type YT_SEQUENCE
    raising
      /VCXI/CX_CKX .
  methods BUILD_LINEAR_SEQ
    importing
      !IT_GATE_ALL type /VCXI/VKSR_TT_GATE
      !IT_GATE_NEXT type /VCXI/VKSR_TT_GATE
      !IT_GATE_PREV type /VCXI/VKSR_TT_GATE
    changing
      !CT_SEQUENCE type YT_SEQUENCE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_GATES
    changing
      !CT_GATE_ALL type /VCXI/VKSR_TT_GATE
      !CT_GATE_NEXT type /VCXI/VKSR_TT_GATE
      !CT_GATE_PREV type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods CHECK_WERKS
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods FIND_SEQUENCE
    importing
      !IT_SEQUENCE type YT_SEQUENCE
      !IR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE optional
      !IR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE optional
    exporting
      !ET_GATE_NEXT type /VCXI/VKSR_TT_GATE
      !ET_GATE_PREV type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BACKWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FORWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SORT_SEQUENCE
    changing
      !CT_SEQUENCE type YT_SEQUENCE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SEQUENCE
    importing
      !IR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE
    changing
      !CT_SEQUENCE type YT_SEQUENCE
    raising
      /VCXI/CX_CKX .
  methods BUILD_INJECTION_SEQ
    changing
      !CT_GATE_PREV type /VCXI/VKSR_TT_GATE
      !CT_GATE_NEXT type /VCXI/VKSR_TT_GATE
      !CT_SEQUENCE type YT_SEQUENCE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0SS_PR_SPEC definition
class ZCL_VCXI_F0SS_PR_SPEC implementation.
  method BUILD_HIERARCHY_SEQ.

    data: LS_SEQUENCE  type        YS_SEQUENCE.
    data: LR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT type ref to ZIF_VCXI_F0SS_COMM_NEXT,
          LR_COMM_PREV type ref to ZIF_VCXI_F0SS_COMM_PREV.

***--------------------------------------------------------------------------------------
*** Build Parent-Child Connections
    loop at CT_GATE_NEXT into LR_GATE_NEXT.
***   Look for Parent to establish Connection
      loop at CT_GATE_PREV into LR_GATE_PREV where TABLE_LINE ne LR_GATE_NEXT.
        if LR_GATE_NEXT->IS_PARENT( IR_GATE_CHILD = LR_GATE_PREV ) eq ABAP_TRUE or
           LR_GATE_PREV->IS_PARENT( IR_GATE_CHILD = LR_GATE_NEXT ) eq ABAP_TRUE.
***       Update/Create Sequence Entry for Communication
          ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE_NEXT
                                         IR_GATE_PREV = LR_GATE_PREV
                               changing  CT_SEQUENCE  = CT_SEQUENCE ).
        endif.
      endloop.
    endloop.

*** Once all Parent-Child realtionships are found remove Children from Next/Prev List
    loop at CT_SEQUENCE into LS_SEQUENCE.
      loop at LS_SEQUENCE-T_GATE_NEXT into LR_GATE_NEXT.
        delete CT_GATE_NEXT where TABLE_LINE eq LR_GATE_NEXT.
      endloop.
      loop at LS_SEQUENCE-T_GATE_PREV into LR_GATE_PREV.
        delete CT_GATE_PREV where TABLE_LINE eq LR_GATE_PREV.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Create unconnected Sequence for NEXT Provider that require child communication
    loop at CT_GATE_NEXT into LR_GATE_NEXT.
      move LR_GATE_NEXT->R_CLSPR ?to LR_COMM_NEXT.
      if LR_COMM_NEXT->F_COMWC eq ABAP_TRUE.
        clear LR_GATE_PREV.
***     Update/Create Sequence Entry for Communication
        ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE_NEXT
                                       IR_GATE_PREV = LR_GATE_PREV
                             changing  CT_SEQUENCE  = CT_SEQUENCE ).
***     Remove from NEXT List
        delete CT_GATE_NEXT.
      endif.
    endloop.

*** Create unconnected Sequence for PREV Provider that require child communication
    loop at CT_GATE_PREV into LR_GATE_PREV.
      move LR_GATE_PREV->R_CLSPR ?to LR_COMM_PREV.
      if LR_COMM_PREV->F_COMWC eq ABAP_TRUE.
        clear LR_GATE_NEXT.
***     Update/Create Sequence Entry for Communication
        ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE_NEXT
                                       IR_GATE_PREV = LR_GATE_PREV
                             changing  CT_SEQUENCE  = CT_SEQUENCE ).
***     Remove from PREV List
        delete CT_GATE_PREV.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Remove those Elements which are fully resolved
    loop at CT_GATE_ALL into LR_GATE_NEXT.
      move LR_GATE_NEXT to LR_GATE_PREV.
      read table CT_GATE_NEXT with key TABLE_LINE = LR_GATE_NEXT
                              transporting no fields.
      if SY-SUBRC ne 0.
        read table CT_GATE_PREV with key TABLE_LINE = LR_GATE_PREV
                                transporting no fields.
        if SY-SUBRC ne 0.
          delete CT_GATE_ALL.
        endif.
      endif.
    endloop.

  endmethod.
  method BUILD_INJECTION_SEQ.

    data: LF_TABIX    type SYTABIX.
    data: LT_MAPP_SEQ type YT_MAPPING_SEQ,
          LT_GATES    type /VCXI/VKSR_TT_GATE.
    data: LR_PARENT    type ref to /VCXI/CL_VKSR_GATE,
          LR_GPARENT   type ref to /VCXI/CL_VKSR_GATE,
          LR_GCHILD    type ref to /VCXI/CL_VKSR_GATE,
          LR_CHILD     type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_MAPP_SEQ> type YS_MAPPING_SEQ.


***--------------------------------------------------------------------------------------
*** Find Injection Sequence
    loop at CT_GATE_PREV into LR_GPARENT.
***   Find Grandparent
      loop at CT_GATE_NEXT into LR_PARENT where TABLE_LINE ne LR_GPARENT.
***     Find Parent
        check LR_GPARENT->IS_PARENT( IR_GATE_CHILD = LR_PARENT ) eq ABAP_TRUE.

        loop at CT_GATE_PREV into LR_GCHILD where TABLE_LINE ne LR_GPARENT.
***       Find Grandchildren
          unassign <S_MAPP_SEQ>.
          check LR_PARENT->IS_PARENT( IR_GATE_CHILD = LR_GCHILD ) eq ABAP_TRUE.

          read table LT_MAPP_SEQ assigning <S_MAPP_SEQ> with key PARENT  = LR_PARENT
                                                                 GPARENT = LR_GPARENT.
          if <S_MAPP_SEQ> is assigned.
            append LR_GCHILD to <S_MAPP_SEQ>-T_GATES.
          else.
            insert initial line into table LT_MAPP_SEQ assigning <S_MAPP_SEQ>.
            move: LR_PARENT to <S_MAPP_SEQ>-PARENT,
                  LR_GPARENT to <S_MAPP_SEQ>-GPARENT.
            append LR_GCHILD to <S_MAPP_SEQ>-T_GATES.
          endif.
        endloop.
      endloop.
    endloop.

*** Start Injection Sequence
    loop at LT_MAPP_SEQ assigning <S_MAPP_SEQ>.
      move <S_MAPP_SEQ>-T_GATES to LT_GATES.
      ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATES ).

      loop at LT_GATES into LR_CHILD.
        move LR_CHILD to LR_GATE.

        at first.
          move SY-TABIX to LF_TABIX.

***       Update/Create Sequence Entry for Communication
          ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = <S_MAPP_SEQ>-PARENT
                                         IR_GATE_PREV = LR_GATE
                               changing  CT_SEQUENCE  = CT_SEQUENCE ).

***       Delete from NEXT and PREV to resolve them
          delete CT_GATE_NEXT where TABLE_LINE eq LR_GATE.
          delete CT_GATE_PREV where TABLE_LINE eq LR_GATE.

          move LR_GATE to LR_GATE_NEXT.
        endat.

        if LINES( LT_GATES ) ge 2.
          add 1 to LF_TABIX.
          read table LT_GATES into LR_GATE_PREV index LF_TABIX.
          if SY-SUBRC is initial.
            ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE_NEXT
                                           IR_GATE_PREV = LR_GATE_PREV
                                 changing  CT_SEQUENCE  = CT_SEQUENCE ).
***         Update Next
            move LR_GATE_PREV to LR_GATE_NEXT.

***         Delete NEXT and PREV from both tables to resolve them
            delete CT_GATE_NEXT where TABLE_LINE eq LR_GATE_NEXT.
            delete CT_GATE_PREV where TABLE_LINE eq LR_GATE_NEXT.
            delete CT_GATE_NEXT where TABLE_LINE eq LR_GATE_PREV.
            delete CT_GATE_PREV where TABLE_LINE eq LR_GATE_PREV.
          endif.
        endif.

        at last.
***       Update/Create Sequence Entry for Communication
          ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE
                                         IR_GATE_PREV = <S_MAPP_SEQ>-GPARENT
                               changing  CT_SEQUENCE  = CT_SEQUENCE ).

***       Delete from NEXT and PREV to resolve them
          delete CT_GATE_NEXT where TABLE_LINE eq LR_GATE.
          delete CT_GATE_PREV where TABLE_LINE eq LR_GATE.
        endat.
      endloop.

***   Delete from NEXT to resolve them
      delete CT_GATE_NEXT where TABLE_LINE eq <S_MAPP_SEQ>-PARENT.
    endloop.

  endmethod.
  method BUILD_LINEAR_SEQ.

    data: LF_INDEX      type I.
    data: LT_GATE_MATCH type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_NEXT type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PREV type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Find Connection by Tree Sequence
    loop at IT_GATE_NEXT into LR_GATE_NEXT.
***   Find Position of current NEXT Provider in Overall List
      read table IT_GATE_ALL with key TABLE_LINE = LR_GATE_NEXT
                             transporting no fields.
      LF_INDEX = SY-TABIX + 1.

***   Get next Gate
      read table IT_GATE_ALL into LR_GATE_PREV index LF_INDEX.
      check SY-SUBRC is initial.

***   Verify Gate as possible PREV Provider
      read table IT_GATE_PREV with key TABLE_LINE = LR_GATE_PREV
                              transporting no fields.
      if SY-SUBRC is initial.
***     Update/Create Sequence Entry for Communication
        ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE_NEXT
                                       IR_GATE_PREV = LR_GATE_PREV
                             changing  CT_SEQUENCE  = CT_SEQUENCE ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Find unconnected NEXT Provider
    loop at IT_GATE_NEXT into LR_GATE_NEXT.
      ME->FIND_SEQUENCE( exporting IT_SEQUENCE  = CT_SEQUENCE
                                   IR_GATE_NEXT = LR_GATE_NEXT
                         importing ET_GATE_NEXT = LT_GATE_MATCH ).
      if LT_GATE_MATCH is initial.
        clear LR_GATE_PREV.
***     Update/Create Sequence Entry for Communication
        ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE_NEXT
                                       IR_GATE_PREV = LR_GATE_PREV
                             changing  CT_SEQUENCE  = CT_SEQUENCE ).
      endif.
    endloop.

*** Find unconnected PREV Provider
    loop at IT_GATE_PREV into LR_GATE_PREV.
      ME->FIND_SEQUENCE( exporting IT_SEQUENCE  = CT_SEQUENCE
                                   IR_GATE_PREV = LR_GATE_PREV
                         importing ET_GATE_PREV = LT_GATE_MATCH ).
      if LT_GATE_MATCH is initial.
        clear LR_GATE_NEXT.
***     Update/Create Sequence Entry for Communication
        ME->UPDATE_SEQUENCE( exporting IR_GATE_NEXT = LR_GATE_NEXT
                                       IR_GATE_PREV = LR_GATE_PREV
                             changing  CT_SEQUENCE  = CT_SEQUENCE ).
      endif.
    endloop.

  endmethod.
  method CHECK_WERKS.
*** 0 = Plant is maintained.
*** 1 = Plant is not maintained.

    data: LF_WERKS  type WERKS_D.

    ME->GET_WERKS( importing EF_WERKS = LF_WERKS ).

    if LF_WERKS is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method FIND_SEQUENCE.

    data: LS_SEQUENCE type YS_SEQUENCE.


    free: ET_GATE_NEXT,
          ET_GATE_PREV.

    check IR_GATE_NEXT is bound or
          IR_GATE_PREV is bound.

    loop at IT_SEQUENCE into LS_SEQUENCE.
***   Verfiy Entry based on NEXT
      if IR_GATE_NEXT is bound.
        read table LS_SEQUENCE-T_GATE_NEXT with key TABLE_LINE = IR_GATE_NEXT
                                           transporting no fields.
        if SY-SUBRC ne 0.
          continue.
        endif.
      endif.

***   Verfiy Entry based on PREV
      if IR_GATE_PREV is bound.
        read table LS_SEQUENCE-T_GATE_PREV with key TABLE_LINE = IR_GATE_PREV
                                           transporting no fields.
        if SY-SUBRC ne 0.
          continue.
        endif.
      endif.

***   Return Entry Information
      move LS_SEQUENCE-T_GATE_NEXT to ET_GATE_NEXT.
      move LS_SEQUENCE-T_GATE_PREV to ET_GATE_PREV.

***   Stop after the first successful Entry
      exit.

    endloop.

  endmethod.
  method GET_CSTEPS_DEF.

    data: LF_ACTIV_PRVDR type NUMC3.
    data: LS_PRVDR     type ZVCXI_F0SS_S_PRVDR_DEF,
          LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data: LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF,
          LT_GATE      type /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PARENT_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Specification
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF with key ID = 'CONV'.
    check LS_PRVDR_DEF-IPRVT is not initial.

*** Get Gates of Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_PARENT_GATE with key TABLE_LINE->F_ID = 'CONV'.
    check LR_PARENT_GATE is bound.

    refresh LT_PRVDR_DEF.
    LT_PRVDR_DEF = LR_PARENT_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

    sort LT_PRVDR_DEF by ID.
    delete adjacent duplicates from LT_PRVDR_DEF comparing ID.

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
      clear: LF_ACTIV_PRVDR, LS_PRVDR.

***   Get Gates of Provider
      LT_GATE = LR_PARENT_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                           IF_INUSE = ABAP_TRUE ).

      if IF_NOCHECK eq ABAP_FALSE.
        loop at LT_GATE into LR_GATE.
***       Get all Active Provider with searched ID
          check LR_GATE->F_ID eq LS_PRVDR_DEF-ID.
          add 1 to LF_ACTIV_PRVDR.
        endloop.

***     Check if there are less then maximal Provider
        check LF_ACTIV_PRVDR < LS_PRVDR_DEF-QTYMA.
      endif.

      move LS_PRVDR_DEF to LS_PRVDR-S_PRVDR_DEF.
      move LT_GATE      to LS_PRVDR-T_GATE_SEQ.
      LR_PARENT_GATE->SORT_GATE( changing CT_GATE = LS_PRVDR-T_GATE_SEQ ).
      move LR_PARENT_GATE  to LS_PRVDR-R_PARENT_GATE.

      append LS_PRVDR to ET_PRVDR_CSTEPS.
    endloop.

  endmethod.
  method GET_PRVDR_GATES.

***--------------------------------------------------------------------------------------
*** Get all "Next" Provider holding Outbound Information
    CT_GATE_NEXT = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_COMM_NEXT=>C_IPRVT_F0_COMM_NEXT
                                          IF_INUSE  = ABAP_TRUE ).
    append lines of CT_GATE_NEXT to CT_GATE_ALL.

*** Get all "Previous" Provider holding Inbound Information
    CT_GATE_PREV = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_F0SS_COMM_PREV=>C_IPRVT_F0_COMM_PREV
                                          IF_INUSE  = ABAP_TRUE ).
    append lines of CT_GATE_PREV to CT_GATE_ALL.

*** Sort all Gates
    ME->R_GATE->SORT_GATE( changing CT_GATE = CT_GATE_ALL ).

  endmethod.
  method GET_PRVDR_XCOMP.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.


    clear: ER_GATE,
           RR_PR_XCOMP.

***------------------------------------------------------------------------------------------------
*** Find Provider for Component
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCOMP=>C_IPRVT_XCOMP
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_XCOMP.

  endmethod.
  method GET_SEQUENCE.

    data: LT_GATE_NEXT type /VCXI/VKSR_TT_GATE,
          LT_GATE_PREV type /VCXI/VKSR_TT_GATE,
          LT_GATE_ALL  type /VCXI/VKSR_TT_GATE.

***--------------------------------------------------------------------------------------
*** Collect Provider Gates
    ME->GET_PRVDR_GATES( changing CT_GATE_ALL  = LT_GATE_ALL
                                  CT_GATE_NEXT = LT_GATE_NEXT
                                  CT_GATE_PREV = LT_GATE_PREV ).

***--------------------------------------------------------------------------------------
*** Build the Injection Sequence
    ME->BUILD_INJECTION_SEQ( changing CT_GATE_PREV = LT_GATE_PREV
                                      CT_GATE_NEXT = LT_GATE_NEXT
                                      CT_SEQUENCE  = RT_SEQUENCE ).

***--------------------------------------------------------------------------------------
*** Build Hierarchy Child-Parent Sequence
    ME->BUILD_HIERARCHY_SEQ( changing CT_GATE_ALL  = LT_GATE_ALL
                                      CT_GATE_PREV = LT_GATE_PREV
                                      CT_GATE_NEXT = LT_GATE_NEXT
                                      CT_SEQUENCE  = RT_SEQUENCE  ).

***--------------------------------------------------------------------------------------
*** Build Linear Sequence
    ME->BUILD_LINEAR_SEQ( exporting IT_GATE_ALL  = LT_GATE_ALL
                                    IT_GATE_NEXT = LT_GATE_NEXT
                                    IT_GATE_PREV = LT_GATE_PREV
                          changing  CT_SEQUENCE  = RT_SEQUENCE ).

***--------------------------------------------------------------------------------------
*** Sort Gates of Sequence
    ME->SORT_SEQUENCE( changing CT_SEQUENCE = RT_SEQUENCE ).

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Plant
    if ME->CHECK_WERKS( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Plant
    case ME->CHECK_WERKS( ).
      when 0.
***     Plant is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '051' ).
      when 1.
***     Plant is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '052' ).
    endcase.

  endmethod.
  method GET_WERKS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).
    move LS_PARAM-ATWRT to EF_WERKS.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_WERKS_DESCR is requested.
***   Identify Description
      select single NAME1
             into EF_WERKS_DESCR
             from T001W
            where WERKS = EF_WERKS.
    endif.

    if EF_LANGU is requested.
***   Identify Language
      select single SPRAS
             into EF_LANGU
             from T001W
            where WERKS = EF_WERKS.
    endif.

  endmethod.
  method HANDLE_BACKWARD.

    data: LF_FOUND     type        ABAP_BOOL.
    data: LS_SEQUENCE  type        YS_SEQUENCE.
    data: LT_SEQUENCE  type        YT_SEQUENCE,
          LT_GATE      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_NEXT type        /VCXI/VKSR_TT_GATE,
          LT_GATE_PREV type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT type ref to ZIF_VCXI_F0SS_COMM_NEXT.

***--------------------------------------------------------------------------------------
*** Get Sequence for Communication
    move ME->GET_SEQUENCE( ) to LT_SEQUENCE.

***--------------------------------------------------------------------------------------
*** Handling of freed Gates
    loop at IT_GATE into LR_GATE.
***   Look for Gate in Sequence
      move ABAP_FALSE to LF_FOUND.
      loop at LT_SEQUENCE into LS_SEQUENCE.
        read table LS_SEQUENCE-T_GATE_NEXT with key TABLE_LINE = LR_GATE
                                           transporting no fields.
        if SY-SUBRC ne 0.
          read table LS_SEQUENCE-T_GATE_PREV with key TABLE_LINE = LR_GATE
                                             transporting no fields.
        endif.

        if SY-SUBRC eq 0.
          move ABAP_TRUE to LF_FOUND.
          exit.
        endif.
      endloop.

***   Found in Sequence
      if LF_FOUND eq ABAP_TRUE.
        append LR_GATE to LT_GATE.

***   Not found
      else.
        free: LT_GATE.
        loop at LT_SEQUENCE into LS_SEQUENCE.
          append lines of LS_SEQUENCE-T_GATE_NEXT to LT_GATE.
          append lines of LS_SEQUENCE-T_GATE_PREV to LT_GATE.
        endloop.
        sort LT_GATE.
        delete adjacent duplicates from LT_GATE.
        exit.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Process all Gats that requested a Backward
    loop at LT_GATE into LR_GATE.

***--------------------------------------------------------------------------------------
***   Process Pull-Request

***   Find Sequence and ensure one was found
      ME->FIND_SEQUENCE( exporting IT_SEQUENCE  = LT_SEQUENCE
                                   IR_GATE_NEXT = LR_GATE
                         importing ET_GATE_NEXT = LT_GATE_NEXT
                                   ET_GATE_PREV = LT_GATE_PREV ).
      if LT_GATE_NEXT is not initial.
        try.
            move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_COMM_NEXT.
        endtry.
        if LR_COMM_NEXT is bound.
***       Perform actual Backwarding
          LR_COMM_NEXT->DO_BACKWARD( IT_GATE = LT_GATE_PREV ).
        endif.
      endif.

***--------------------------------------------------------------------------------------
***   Process Push-Request

***   Find Sequence and ensure one was found
      ME->FIND_SEQUENCE( exporting IT_SEQUENCE  = LT_SEQUENCE
                                   IR_GATE_PREV = LR_GATE
                         importing ET_GATE_NEXT = LT_GATE_NEXT
                                   ET_GATE_PREV = LT_GATE_PREV ).
      if LT_GATE_NEXT is not initial and
         LT_GATE_PREV is not initial.
        loop at LT_GATE_NEXT into LR_GATE.
          try.
              move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
            catch CX_SY_MOVE_CAST_ERROR.
              clear LR_COMM_NEXT.
          endtry.
          if LR_COMM_NEXT is bound.
***         Perform actual Backwarding
            LR_COMM_NEXT->DO_BACKWARD( IT_GATE = LT_GATE_PREV ).
          endif.
        endloop.
      endif.

    endloop.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***   Backward Processing
      when C_IEVNT_I_BACKWARD.
        ME->HANDLE_BACKWARD( IT_GATE = IT_GATE_PROVIDER ).
***   Forward Processing
      when C_IEVNT_I_FORWARD.
        ME->HANDLE_FORWARD( IT_GATE = IT_GATE_PROVIDER ).

    endcase.

  endmethod.
  method HANDLE_FORWARD.

    data: LF_FOUND     type        ABAP_BOOL.
    data: LS_SEQUENCE  type        YS_SEQUENCE.
    data: LT_SEQUENCE  type        YT_SEQUENCE,
          LT_GATE      type        /VCXI/VKSR_TT_GATE,
          LT_GATE_NEXT type        /VCXI/VKSR_TT_GATE,
          LT_GATE_PREV type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV type ref to ZIF_VCXI_F0SS_COMM_PREV.

***--------------------------------------------------------------------------------------
*** Get Sequence for Communication
    move ME->GET_SEQUENCE( ) to LT_SEQUENCE.

***--------------------------------------------------------------------------------------
*** Handling of freed Gates
    loop at IT_GATE into LR_GATE.
***   Look for Gate in Sequence
      move ABAP_FALSE to LF_FOUND.
      loop at LT_SEQUENCE into LS_SEQUENCE.
        read table LS_SEQUENCE-T_GATE_NEXT with key TABLE_LINE = LR_GATE
                                           transporting no fields.
        if SY-SUBRC ne 0.
          read table LS_SEQUENCE-T_GATE_PREV with key TABLE_LINE = LR_GATE
                                             transporting no fields.
        endif.

        if SY-SUBRC eq 0.
          move ABAP_TRUE to LF_FOUND.
          exit.
        endif.
      endloop.

***   Found in Sequence
      if LF_FOUND eq ABAP_TRUE.
        append LR_GATE to LT_GATE.

***   Not found
      else.
        free: LT_GATE.
        loop at LT_SEQUENCE into LS_SEQUENCE.
          append lines of LS_SEQUENCE-T_GATE_NEXT to LT_GATE.
          append lines of LS_SEQUENCE-T_GATE_PREV to LT_GATE.
        endloop.
        sort LT_GATE.
        delete adjacent duplicates from LT_GATE.
        exit.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Process all Gats that requested a Forward
    loop at LT_GATE into LR_GATE.

***--------------------------------------------------------------------------------------
***   Process Pull-Request

***   Find Sequence and ensure one was found
      ME->FIND_SEQUENCE( exporting IT_SEQUENCE  = LT_SEQUENCE
                                   IR_GATE_PREV = LR_GATE
                         importing ET_GATE_NEXT = LT_GATE_NEXT
                                   ET_GATE_PREV = LT_GATE_PREV ).
      if LT_GATE_PREV is not initial.
        try.
            move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_COMM_PREV.
        endtry.
        if LR_COMM_PREV is bound.
***       Perform actual Forwarding
          LR_COMM_PREV->DO_FORWARD( IT_GATE = LT_GATE_NEXT ).
        endif.
      endif.

***--------------------------------------------------------------------------------------
***   Process Push-Request

***   Find Sequence and ensure one was found
      ME->FIND_SEQUENCE( exporting IT_SEQUENCE  = LT_SEQUENCE
                                   IR_GATE_NEXT = LR_GATE
                         importing ET_GATE_NEXT = LT_GATE_NEXT
                                   ET_GATE_PREV = LT_GATE_PREV ).
      if LT_GATE_NEXT is not initial and
         LT_GATE_PREV is not initial.

        loop at LT_GATE_PREV into LR_GATE.
          try.
              move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
            catch CX_SY_MOVE_CAST_ERROR.
              clear LR_COMM_PREV.
          endtry.
          if LR_COMM_PREV is bound.
***         Perform actual Forwarding
            LR_COMM_PREV->DO_FORWARD( IT_GATE = LT_GATE_NEXT ).
          endif.
        endloop.
      endif.

    endloop.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_WERKS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WERKS ).

    move IF_WERKS to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WERKS_CHANGED ).
    endif.

  endmethod.
  method SORT_SEQUENCE.

    field-symbols: <S_SEQUENCE>     type        YS_SEQUENCE.

    loop at CT_SEQUENCE assigning <S_SEQUENCE>.
***   Sort Gates of NEXT
      if LINES( <S_SEQUENCE>-T_GATE_NEXT ) gt 1.
        ME->R_GATE->SORT_GATE( changing CT_GATE = <S_SEQUENCE>-T_GATE_NEXT ).
      endif.

***   Sort Gates of PREV
      if LINES( <S_SEQUENCE>-T_GATE_PREV ) gt 1.
        ME->R_GATE->SORT_GATE( changing CT_GATE = <S_SEQUENCE>-T_GATE_PREV ).
      endif.
    endloop.

  endmethod.
  method SPLIT.

    data: LR_PR_XCOMP type ref to ZCL_VCXI_F0SS_PR_XCOMP.


*** Get Component and split it
    LR_PR_XCOMP = ME->GET_PRVDR_XCOMP( ).
    check LR_PR_XCOMP is bound.
    LR_PR_XCOMP->SPLIT( IR_GATE_SOURCE = IR_GATE_SOURCE ).

  endmethod.
  method UPDATE_SEQUENCE.

    data:          LF_UPDATE        type        ABAP_BOOL.
    field-symbols: <S_SEQUENCE>     type        YS_SEQUENCE.

***------------------------------------------------------------------------------------------------
*** Try to find and update Sequence Entry
    loop at CT_SEQUENCE assigning <S_SEQUENCE>.
***   Find Entry based on NEXT
      read table <S_SEQUENCE>-T_GATE_NEXT with key TABLE_LINE = IR_GATE_NEXT
                                          transporting no fields.
      if SY-SUBRC eq 0.
        if IR_GATE_PREV is bound.
          append IR_GATE_PREV to <S_SEQUENCE>-T_GATE_PREV.
        endif.
        move ABAP_TRUE to LF_UPDATE.
        exit.
      else.
***     Find Entry based on PREV
        read table <S_SEQUENCE>-T_GATE_PREV with key TABLE_LINE = IR_GATE_PREV
                                            transporting no fields.
        if SY-SUBRC eq 0.
          if IR_GATE_NEXT is bound.
            append IR_GATE_NEXT to <S_SEQUENCE>-T_GATE_NEXT.
          endif.
          move ABAP_TRUE to LF_UPDATE.
          exit.
        else.
          move ABAP_FALSE to LF_UPDATE.
        endif.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Create new Entry
    if LF_UPDATE ne ABAP_TRUE.
      append initial line to CT_SEQUENCE assigning <S_SEQUENCE>.
      if IR_GATE_NEXT is bound.
        append IR_GATE_NEXT to <S_SEQUENCE>-T_GATE_NEXT.
      endif.
      if IR_GATE_PREV is bound.
        append IR_GATE_PREV to <S_SEQUENCE>-T_GATE_PREV.
      endif.
    endif.

  endmethod.
