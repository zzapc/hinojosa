
class ZCL_VCXI_FFSS_UI_SOV definition
  public
  inheriting from ZCL_VCXI_F0SS_UI_SOV
  create public .

public section.
protected section.

  constants C_INODE_DUPLEX type NETOBJID value 'DUPLEX' ##NO_TEXT.
  constants C_INODE_MONO type NETOBJID value 'MONO' ##NO_TEXT.
  constants C_INODE_TRIPLEX type NETOBJID value 'TRIPLEX' ##NO_TEXT.

  methods CHECK_ADD_FFG
    importing
      !IR_GATE_PARENT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_GATE_OUTPUT) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods HANDLE_UC_INSERT
    redefinition .
  methods INIT_INODES
    redefinition .
private section.

  methods ADD_DUPLEX
    raising
      /VCXI/CX_CKX .
  methods ADD_GLUE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_MONO
    importing
      !IF_DXCON type ZVCXI_F0SS_DXCON optional
      !IF_ADD_FFG type ABAP_BOOL optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_XCON_ANCHO type ref to ZIF_VCXI_F0SS_ANCHO
      !ER_XCON_ANCHI type ref to ZIF_VCXI_F0SS_ANCHI
    raising
      /VCXI/CX_CKX .
  methods ADD_TRIPLEX
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_FFSS_UI_SOV definition
class ZCL_VCXI_FFSS_UI_SOV implementation.
  method ADD_DUPLEX.

    data: LR_GATE_RC type ref to /VCXI/CL_VKSR_GATE,
          LR_ANCHO1  type ref to ZIF_VCXI_F0SS_ANCHO,
          LR_ANCHO2  type ref to ZIF_VCXI_F0SS_ANCHO,
          LR_ANCHI   type ref to ZIF_VCXI_F0SS_ANCHI.

***--------------------------------------------------------------------------------------
*** Create the first Component
    ME->ADD_MONO( exporting IF_DXCON      = ZIF_VCXI_F0SS_ANCHO=>C_DXCON_OUT
                  importing ER_XCON_ANCHO = LR_ANCHO1 ).

*** Create the second Component
    ME->ADD_MONO( exporting IF_DXCON      = ZIF_VCXI_F0SS_ANCHO=>C_DXCON_OUT
                  importing ER_XCON_ANCHO = LR_ANCHO2 ).

*** Create the Result Component
    ME->ADD_MONO( exporting IF_DXCON      = ZIF_VCXI_F0SS_ANCHI=>C_DXCON_IN
                            IF_ADD_FFG    = ABAP_TRUE
                  importing ER_XCON_ANCHI = LR_ANCHI
                            ER_GATE       = LR_GATE_RC ).

***--------------------------------------------------------------------------------------
*** Connect first Component using the XCON
    ME->CONNECT_BY_XCON( IR_XCON_IN   = LR_ANCHI
                         IR_XCON_OUT  = LR_ANCHO1 ).

*** Add Glue (in between)
    ME->ADD_GLUE( exporting IR_GATE = LR_GATE_RC ).

*** Connect second Component using the XCON
    ME->CONNECT_BY_XCON( IR_XCON_IN   = LR_ANCHI
                         IR_XCON_OUT  = LR_ANCHO2 ).

  endmethod.
  method ADD_GLUE.

    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE_GLUE  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_INPUT type ref to /VCXI/CL_VKSR_GATE.

    LT_GATE = IR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_INPUT=>ZIF_VCXI_F0SS_ANCHI~C_IPRVT_ANCHI
                                  IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE_INPUT index 1.
    if LR_GATE_INPUT is bound.
      LR_GATE_GLUE = LR_GATE_INPUT->CREATE_ELEMENT( IF_ID = 'MS_GLUE' ).

***   Set in Use
      if LR_GATE_GLUE->GET_USYNC( ) eq ABAP_FALSE.
        LR_GATE_GLUE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      endif.
    endif.

  endmethod.
  method ADD_MONO.

    data: LR_GATE_FCOMP  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_FFG    type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_OUTPUT type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Create Film Component
    LR_GATE_FCOMP = ME->R_GATE->CREATE_ELEMENT( IF_ID = ME->GET_ID_BY_IPRVT( ZCL_VCXI_FFSS_PR_FCOMP=>C_IPRVT_FF_FCOMP ) ).

*** Set in Use
    if LR_GATE_FCOMP->GET_USYNC( ) eq ABAP_FALSE.
      LR_GATE_FCOMP->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

    if IF_ADD_FFG eq ABAP_TRUE.
***--------------------------------------------------------------------------------------
***   Check If Film Finished Good needs to be created
      move ME->CHECK_ADD_FFG( IR_GATE_PARENT = LR_GATE_FCOMP ) to LR_GATE_OUTPUT.
      if LR_GATE_OUTPUT is bound.
***     Create Film Finished Good
        LR_GATE_FFG = LR_GATE_OUTPUT->CREATE_ELEMENT( IF_ID = 'FFG' ).

***     Set in Use
        if LR_GATE_FFG->GET_USYNC( ) eq ABAP_FALSE.
          LR_GATE_FFG->SET_INUSE( IF_INUSE = ABAP_TRUE ).
        endif.
      endif.
    endif.

    move LR_GATE_FCOMP to ER_GATE.

    check ER_XCON_ANCHO is requested or
          ER_XCON_ANCHI is requested.

    check ER_GATE is bound.

    try.
        case IF_DXCON.
          when ZIF_VCXI_F0SS_ANCHO=>C_DXCON_OUT.
            move ER_GATE->R_CLSPR ?to ER_XCON_ANCHO.
          when ZIF_VCXI_F0SS_ANCHI=>C_DXCON_IN.
            move ER_GATE->R_CLSPR ?to ER_XCON_ANCHI.
        endcase.

      catch CX_SY_MOVE_CAST_ERROR.
        return.
    endtry.

  endmethod.
  method ADD_TRIPLEX.

    data: LR_GATE_RC type ref to /VCXI/CL_VKSR_GATE,
          LR_ANCHO1  type ref to ZIF_VCXI_F0SS_ANCHO,
          LR_ANCHO2  type ref to ZIF_VCXI_F0SS_ANCHO,
          LR_ANCHO3  type ref to ZIF_VCXI_F0SS_ANCHO,
          LR_ANCHI   type ref to ZIF_VCXI_F0SS_ANCHI.

***--------------------------------------------------------------------------------------
*** Create the first Component
    ME->ADD_MONO( exporting IF_DXCON = ZIF_VCXI_F0SS_ANCHO=>C_DXCON_OUT
                  importing ER_XCON_ANCHO = LR_ANCHO1 ).

*** Create the second Component
    ME->ADD_MONO( exporting IF_DXCON = ZIF_VCXI_F0SS_ANCHO=>C_DXCON_OUT
                  importing ER_XCON_ANCHO = LR_ANCHO2 ).

*** Create the third Component
    ME->ADD_MONO( exporting IF_DXCON = ZIF_VCXI_F0SS_ANCHO=>C_DXCON_OUT
                  importing ER_XCON_ANCHO = LR_ANCHO3 ).

*** Create the Result Component
    ME->ADD_MONO( exporting IF_DXCON = ZIF_VCXI_F0SS_ANCHI=>C_DXCON_IN
                            IF_ADD_FFG    = ABAP_TRUE
                  importing ER_XCON_ANCHI = LR_ANCHI
                            ER_GATE       = LR_GATE_RC ).

***--------------------------------------------------------------------------------------
*** Connect first Component using the XCON
    ME->CONNECT_BY_XCON( IR_XCON_IN   = LR_ANCHI
                         IR_XCON_OUT  = LR_ANCHO1 ).

*** Add Glue (in between)
    ME->ADD_GLUE( exporting IR_GATE = LR_GATE_RC ).

*** Connect second Component using the XCON
    ME->CONNECT_BY_XCON( IR_XCON_IN   = LR_ANCHI
                         IR_XCON_OUT  = LR_ANCHO2 ).

*** Add Glue (in between)
    ME->ADD_GLUE( exporting IR_GATE = LR_GATE_RC ).

*** Connect third Component using the XCON
    ME->CONNECT_BY_XCON( IR_XCON_IN   = LR_ANCHI
                         IR_XCON_OUT  = LR_ANCHO3 ).

  endmethod.
  method CHECK_ADD_FFG.

    data: LS_SEQUENCE   type        ZCL_VCXI_F0SS_PR_SPEC=>YS_SEQUENCE.
    data: LT_GATE_FCOMP type        /VCXI/VKSR_TT_GATE,
          LT_GATE_SPEC  type        /VCXI/VKSR_TT_GATE,
          LT_SEQUENCE   type        ZCL_VCXI_F0SS_PR_SPEC=>YT_SEQUENCE.
    data: LR_GATE_FCOMP type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SPEC  type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC    type ref to ZCL_VCXI_F0SS_PR_SPEC,
          LR_PR_OUTPUT  type ref to ZCL_VCXI_FFSS_PR_OUTPUT,
          LR_PR_FFG     type ref to ZCL_VCXI_FFSS_PR_FFG,
          LR_GATE_NEXT  type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PREV  type ref to /VCXI/CL_VKSR_GATE.

    LT_GATE_FCOMP = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FFSS_PR_FCOMP=>C_IPRVT_FF_FCOMP
                                           IF_INUSE = ABAP_TRUE
                                           IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE_FCOMP into LR_GATE_FCOMP.

      LT_GATE_SPEC = LR_GATE_FCOMP->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC
                                               IF_INUSE = ABAP_TRUE ).
      read table LT_GATE_SPEC into LR_GATE_SPEC index 1.

      try .
          move LR_GATE_SPEC->R_CLSPR ?to LR_PR_SPEC.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_SPEC.
      endtry.

      check LR_PR_SPEC is bound.

***   Get sequence of Gates inside the Specification
      LT_SEQUENCE = LR_PR_SPEC->GET_SEQUENCE( ).

      loop at LT_SEQUENCE into LS_SEQUENCE.

        loop at LS_SEQUENCE-T_GATE_PREV into LR_GATE_PREV.
          try.
              move LR_GATE_PREV->R_CLSPR ?to LR_PR_FFG.
            catch CX_SY_MOVE_CAST_ERROR.
              continue.
          endtry.

          check LR_PR_FFG is bound.
          clear RR_GATE_OUTPUT.

          return.
        endloop.


        check LR_GATE_FCOMP eq IR_GATE_PARENT.
        check RR_GATE_OUTPUT is not bound.

***     Return Output Gate
        loop at LS_SEQUENCE-T_GATE_NEXT into LR_GATE_NEXT.
          try.
              move LR_GATE_NEXT->R_CLSPR ?to LR_PR_OUTPUT.
            catch CX_SY_MOVE_CAST_ERROR.
              continue.
          endtry.

          check LR_PR_OUTPUT is bound.
          move LR_GATE_NEXT to RR_GATE_OUTPUT.
        endloop.

      endloop.

    endloop.

  endmethod.
  method HANDLE_UC_INSERT.

    data: LS_NODE type CNG_NODES.

    SUPER->HANDLE_UC_INSERT( IT_NODE = IT_NODE ).

***--------------------------------------------------------------------------------------
    read table IT_NODE into LS_NODE index 1.

    case LS_NODE-SELID.
      when C_INODE_MONO.
***     Add Mono
        ME->ADD_MONO( IF_ADD_FFG = ABAP_TRUE ).
      when C_INODE_DUPLEX.
***     Add Duplex
        ME->ADD_DUPLEX( ).
      when C_INODE_TRIPLEX.
***     Add Triplex
        ME->ADD_TRIPLEX( ).
    endcase.

***--------------------------------------------------------------------------------------
*** Raise Events
    ME->R_GATE->RAISE_EVENTS( ).

  endmethod.
  method INIT_INODES.

    field-symbols: <S_INODE> type CNG_INODES,
                   <S_NVAL>  type NET_NVALS.

    SUPER->INIT_INODES( ).

***--------------------------------------------------------------------------------------
*** Only add Items if in change mode
    check ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Add Mono Cluster
    append initial line to ME->T_INODE assigning <S_INODE>.
    <S_INODE>-ID   = C_INODE_MONO.
    <S_INODE>-TYPE = 7.

*** Description
    append initial line to ME->T_INVAL assigning <S_NVAL>.
    <S_NVAL>-ID    = <S_INODE>-ID.
    <S_NVAL>-FL    = '0'.
    <S_NVAL>-VAL   = text-D01.

***--------------------------------------------------------------------------------------
*** Add Duplex Cluster
    append initial line to ME->T_INODE assigning <S_INODE>.
    <S_INODE>-ID   = C_INODE_DUPLEX.
    <S_INODE>-TYPE = 8.

*** Description
    append initial line to ME->T_INVAL assigning <S_NVAL>.
    <S_NVAL>-ID    = <S_INODE>-ID.
    <S_NVAL>-FL    = '0'.
    <S_NVAL>-VAL   = text-D02.

***--------------------------------------------------------------------------------------
*** Add Triplex Cluster (3 IN)
    append initial line to ME->T_INODE assigning <S_INODE>.
    <S_INODE>-ID   = C_INODE_TRIPLEX.
    <S_INODE>-TYPE = 8.

*** Description
    append initial line to ME->T_INVAL assigning <S_NVAL>.
    <S_NVAL>-ID    = <S_INODE>-ID.
    <S_NVAL>-FL    = '0'.
    <S_NVAL>-VAL   = text-D03.

  endmethod.
