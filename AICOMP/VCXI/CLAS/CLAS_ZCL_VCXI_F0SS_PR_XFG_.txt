
class ZCL_VCXI_F0SS_PR_XFG definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_F0SS_COMM_PREV
      abstract methods DO_FORWARD .
  interfaces ZIF_VCXI_XCS_NGREP .
  interfaces ZIF_VCXI_XCSS_MTS .

  constants C_IPRVT_XFG type /VCXI/VKSC_IPRVT value 'ZVCXI_F0SS_XFG' ##NO_TEXT.
  constants C_PARID_FDCHK type /VCXI/VKS_PARID value 'ZVCXI_F0_FDCHK' ##NO_TEXT.
  constants C_PARID_KDMAT type /VCXI/VKS_PARID value 'ZVCXI_XC_KDMAT' ##NO_TEXT.
  constants C_PARID_KDPTX type /VCXI/VKS_PARID value 'ZVCXI_XC_KDPTX' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_NOOUT type /VCXI/VKS_PARID value 'ZVCXI_XC_NOOUT' ##NO_TEXT.

  methods GET_COMPR
    exporting
      !EF_COMPR type ZVCXI_F0SS_COMPR
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ALLOWED type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_CSPLIT
    returning
      value(RT_CSPLIT) type ZVCXI_FFSS_TT_CSPLIT
    raising
      /VCXI/CX_CKX .
  methods GET_DIKEY
    exporting
      !ES_DIKEY type ZVCXI_FFS_S_DIKEY
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FDCHK
    exporting
      !EF_FDCHK type ZVCXI_F0S_FDCHK
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_KDMAT
    exporting
      !EF_KDMAT type KDMAT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_KDPTX
    exporting
      !EF_KDPTX type KDPTX
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_MAKTX type MAKTX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR
    exporting
      !EF_MATNR type MATNR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_OUTPUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_OUTPUT) type ref to ZCL_VCXI_F0SS_PR_OUTPUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SHIPMGR
    exporting
      !ER_GATE_SHIPMGR type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SHIPMGR) type ref to ZCL_VCXI_XCSU_PR_SHIPMGR
    raising
      /VCXI/CX_CKX .
  methods GET_NOOUT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ALLOW_MULTI type ABAP_BOOL
      !EF_NOOUT_MULTI type ZVCXI_XCS_NOOUT
    returning
      value(RF_NOOUT) type ZVCXI_XCS_NOOUT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_FDCHK
    importing
      !IF_FDCHK type ZVCXI_F0S_FDCHK
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_KDMAT
    importing
      !IF_KDMAT type KDMAT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_KDPTX
    importing
      !IF_KDPTX type KDPTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_FDCHK_CHANGED type /VCXI/VKSC_IEVNT value 'FDCHK_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_KDMAT_CHANGED type /VCXI/VKSC_IEVNT value 'KDMAT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_KDPTX_CHANGED type /VCXI/VKSC_IEVNT value 'KDPTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MATNR_CHANGED type /VCXI/VKSC_IEVNT value 'MATNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_INIT_MRP type /VCXI/VKSC_IEVNT value 'INIT_MRP' ##NO_TEXT.

  methods CHECK_MAKTX
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_MRP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0SS_PR_XFG definition
class ZCL_VCXI_F0SS_PR_XFG implementation.
  method CHECK_MAKTX.

*** 0 Material Description is maintained.
*** 1 Material Description is not maintained.

    data: LF_MAKTX type MAKTX.

    move 0 to RF_RETURN.
    ME->GET_MAKTX( importing EF_MAKTX = LF_MAKTX ).

    if LF_MAKTX is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method GET_COMPR.

    EF_COMPR = 1.

  endmethod.
  method GET_CSPLIT.


  endmethod.
  method GET_DESCR.

    data: LF_MAKTX type MAKTX.

*** Get Material Description
    ME->GET_MAKTX( importing EF_MAKTX = LF_MAKTX ).

    if LF_MAKTX is initial.
      RF_DESCR = SUPER->GET_DESCR( ).
    else.
      move LF_MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_DIKEY.

    ES_DIKEY-DIKEY     = 100.
    ES_DIKEY-DIKEY_UOM = '%'.

  endmethod.
  method GET_FDCHK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDCHK ).
    move LS_PARAM-ATWRT to EF_FDCHK.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_KDMAT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDMAT ).
    move LS_PARAM-STRNG to EF_KDMAT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_KDPTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDPTX ).
    move LS_PARAM-STRNG to EF_KDPTX.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
    move LS_PARAM-STRNG to EF_MAKTX.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      if ZCL_VCXI_F0S_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial.
        move ABAP_UNDEFINED to EF_FOVRR.
      else.
        if EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
          move ABAP_TRUE to EF_FOVRR.
        else.
          move ABAP_FALSE to EF_FOVRR.
        endif.
      endif.
    endif.

  endmethod.
  method GET_MATNR.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    move LS_LEOKY-LEOKY to EF_MATNR.
    move LS_LEOKY-SETBY to EF_SETBY.

  endmethod.
  method GET_NOOUT.

    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data: LR_PR_OUTPUT type ref to ZCL_VCXI_F0SS_PR_OUTPUT.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOOUT ).
    move LS_PARAM-ATFLV to RF_NOOUT.
    move LS_PARAM-SETBY to EF_SETBY.

*** Are multiple Outs allowed?
    if EF_ALLOW_MULTI is requested or
       EF_NOOUT_MULTI is requested.
      LR_PR_OUTPUT = ME->GET_PRVDR_OUTPUT( ).
      if LR_PR_OUTPUT is bound.
        EF_NOOUT_MULTI = LR_PR_OUTPUT->GET_NOOUT( importing EF_ALLOW_MULTI = EF_ALLOW_MULTI ).
      else.
        EF_ALLOW_MULTI = ABAP_FALSE.
      endif.
    endif.

  endmethod.
  method GET_PRVDR_OUTPUT.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_OUTPUT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Output
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_OUTPUT=>C_IPRVT_F0_OUTPUT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_OUTPUT.

  endmethod.
  method GET_PRVDR_SHIPMGR.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Shipping Manager Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Shipping Manager Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_SHIPMGR.
          check RR_PR_SHIPMGR is bound.
          move LR_GATE to ER_GATE_SHIPMGR.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_SHIPMGR, ER_GATE_SHIPMGR.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Material Description
    if ME->CHECK_MAKTX( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    data: LF_FDCHK type ZVCXI_F0S_FDCHK.


***--------------------------------------------------------------------------------------
*** Super Status Messages
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Material Description
    if ME->CHECK_MAKTX( ) eq 0.
***   Material Description is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '101' ).
    else.
***   Material Description is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FFSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '102' ).
    endif.


***--------------------------------------------------------------------------------------
*** Flag - Disable checks
    ME->GET_FDCHK( importing EF_FDCHK = LF_FDCHK ).
    if LF_FDCHK eq ABAP_TRUE.
***   Flag - Disable checks is Active.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_F0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '057' ).

    endif.

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    LR_PR_SPEC->GET_WERKS( importing EF_WERKS = RF_WERKS ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

      when C_IEVNT_I_INIT_MRP.
        ME->HANDLE_INIT_MRP( ).

***   Event Backarding for Communication
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_PREV~C_IEVNT_O_BACKWARD_REQ ).
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).

    endcase.

  endmethod.
  method HANDLE_INIT_MRP.

*** Get Flag for MRP Settings
    data(LF_FMTSA) = ME->ZIF_VCXI_XCSS_MTS~GET_FMTSA( ).

*** Reset to update Plants if needed
    ME->ZIF_VCXI_XCSS_MTS~SET_FMTSA( IF_FMTSA = LF_FMTSA ).

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.

*** Only calcualate if calculation is active
    ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

*** Get generated Material Description
    LF_MAKTX = ZCL_VCXI_F0S_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

*** Set new Description
    ME->SET_MAKTX( IF_MAKTX = LF_MAKTX ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_FDCHK.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDCHK ).

    move IF_FDCHK   to LS_PARAM-ATWRT.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FDCHK_CHANGED ).

    endif.

  endmethod.
  method SET_KDMAT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDMAT ).

    move IF_KDMAT to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KDMAT_CHANGED ).
    endif.

  endmethod.
  method SET_KDPTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KDPTX ).

    move IF_KDPTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_KDPTX_CHANGED ).
    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_MATNR.

    data:  LF_CHANGED  type ABAP_BOOL.
    data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

    move IF_MATNR to LS_LEOKY-LEOKY.
    move IF_SETBY to LS_LEOKY-SETBY.

    LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATNR_CHANGED ).
    endif.


  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

***------------------------------------------------------------------------------------------------
*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = ME->GET_DESCR( )
                                                    IF_DESCR      = ME->GET_DESCR( )
                                                    IF_ICON       = 'sap-icon://form'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
  method ZIF_VCXI_XCSS_MTS~GET_FMTSA.

*** Get MRP Settings Provider
    ET_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_MRP=>C_IPRVT_XCS_MRP
                                     IF_INUSE = ABAP_TRUE ).

*** Get Material Number
    ME->GET_MATNR( importing EF_MATNR = data(LF_MATNR) ).

*** No MRP allowed in case of existing Material Number (Data managed directly by Material Master)
*** otherwise based on existing provider
    RF_FMTSA = cond #( when LF_MATNR is not initial then ABAP_UNDEFINED
                       when ET_GATE is not initial then ABAP_TRUE
                                                   else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_XCSS_MTS~SET_FMTSA.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE,
          LT_WERKS type T_WERKS.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


*** Get current Status and MRP Settings Gates
    data(LF_FMTSA) = ME->ZIF_VCXI_XCSS_MTS~GET_FMTSA( importing ET_GATE = LT_GATE ).

*** Check if requested status is allowed
    LF_FMTSA = switch #( LF_FMTSA when ABAP_UNDEFINED then ABAP_FALSE      "Not allowed
                                                      else IF_FMTSA ).

    case LF_FMTSA.
      when ABAP_FALSE or ABAP_UNDEFINED.  "Deactivate or not allowed
        loop at LT_GATE into LR_GATE.
          LR_GATE->DO_FREE( ).
        endloop.

      when ABAP_TRUE.  "Activate
***     Collect Specification and Application Data Plant
        collect ME->GET_WERKS( ) into LT_WERKS.
        collect ME->R_GATE->GET_APPDATA( )->F_WERKS into LT_WERKS.

***     Create required Provider
        ZCL_VCXI_XCSS_PR_MRP=>INIT_AS_PRVDR( IR_GATE_PARENT = ME->R_GATE
                                             IT_WERKS       = LT_WERKS ).
    endcase.

  endmethod.
