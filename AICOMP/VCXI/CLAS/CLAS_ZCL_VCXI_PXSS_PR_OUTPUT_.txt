
class ZCL_VCXI_PXSS_PR_OUTPUT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_COMM_NEXT
      abstract methods DO_BACKWARD .
  interfaces ZIF_VCXI_PXSS_COMM_PREV
      abstract methods DO_FORWARD .

  constants C_IPRVT_PX_OUTPUT type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_OUTPUT' ##NO_TEXT.

  methods GET_DIKEY
    returning
      value(RS_DIKEY) type ZVCXI_P0SS_S_DIKEY
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTT
    exporting
      !EF_ALLOW_MULTI type ABAP_BOOL
    returning
      value(RF_NOUTT) type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SSTEP
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SSTEP) type ref to ZCL_VCXI_PXSS_PR_SSTEP
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_MAX_ALLOWED_CHILD type /VCXI/VKS_ATTID value 'MAX_ALLOWED_CHILD' ##NO_TEXT.
  constants C_ATTID_MIN_ALLOWED_CHILD type /VCXI/VKS_ATTID value 'MIN_ALLOWED_CHILD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.

  methods CHECK_DIKEY
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUTT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods CHECK_ALLOWED_CHILDREN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_OUTPUT definition
class ZCL_VCXI_PXSS_PR_OUTPUT implementation.
  method CHECK_ALLOWED_CHILDREN.

    data: LF_MIN   type I,
          LF_MAX   type I,
          LF_COUNT type I.


***--------------------------------------------------------------------------------------
*** Read minimum/maximum number of children from attribute
    LF_MIN = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_MIN_ALLOWED_CHILD )-ATTVA.
    LF_MAX = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_MAX_ALLOWED_CHILD )-ATTVA.

*** Count Children
    LF_COUNT = LINES( ME->R_GATE->GET_PRVDR( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                             IF_INUSE = ABAP_TRUE ) ).

***--------------------------------------------------------------------------------------
*** Check minimum allowed Children
    if LF_COUNT lt LF_MIN.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     At least &1 children are required.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '010'
                                 IF_MSGV1 = |{ LF_MIN number = user }| ).
      endif.
    endif.

*** Check maximum allowed FGs
    if LF_MAX   ne 0 and
       LF_COUNT gt LF_MAX.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Only &1 children allowed.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '011'
                                 IF_MSGV1 = |{ LF_MAX number = user }| ).
      endif.
    endif.

  endmethod.
  method CHECK_DIKEY.

*** Check Distribution Key
    if ME->GET_DIKEY( )-DIKEY eq 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Distribution Key equals 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '032' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Distribution Key not equals 100%.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '033' ).
      endif.
    endif.

  endmethod.
  method CHECK_NOUTT.

*** Check Number of Outs
    if ME->GET_NOUTT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Outs is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '030' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Number of Outs is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '031' ).
      endif.
    endif.

  endmethod.
  method GET_DIKEY.

    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XFG   type ref to ZCL_VCXI_PXSS_PR_XFG,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.


    RS_DIKEY-DIKEY_UOM = '%'.

    loop at ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                   IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ) into LR_GATE.
      case type of LR_GATE->R_CLSPR.
        when type ZCL_VCXI_PXSS_PR_XFG into LR_PR_XFG.
          RS_DIKEY-DIKEY += LR_PR_XFG->GET_DIKEY( )-DIKEY.
        when type ZCL_VCXI_PXSS_PR_XCONO into LR_PR_XCONO.
          RS_DIKEY-DIKEY += LR_PR_XCONO->GET_DIKEY( )-DIKEY.
      endcase.
    endloop.

  endmethod.
  method GET_NOUTT.

    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XFG   type ref to ZCL_VCXI_PXSS_PR_XFG,
          LR_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO.


*** Sum of Number of Outs of children
    if RF_NOUTT is requested.
      loop at ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ) into LR_GATE.
        case type of LR_GATE->R_CLSPR.
          when type ZCL_VCXI_PXSS_PR_XFG into LR_PR_XFG.
            RF_NOUTT += LR_PR_XFG->GET_NOUTT( ).
          when type ZCL_VCXI_PXSS_PR_XCONO into LR_PR_XCONO.
            RF_NOUTT += LR_PR_XCONO->GET_NOUTT( ).
        endcase.
      endloop.
    endif.

*** Are multiple Outs allowed?
    if EF_ALLOW_MULTI is requested.
      EF_ALLOW_MULTI = cond #( when ME->GET_PRVDR_SSTEP( ) is bound then ABAP_TRUE
                                                                    else ABAP_FALSE ).
    endif.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_PRVDR_SSTEP.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_SSTEP.

***------------------------------------------------------------------------------------------------
*** Find Provider for Separation Step
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SSTEP=>C_IPRVT_PX_SSTEP
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_SSTEP.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Number of Children
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_ALLOWED_CHILDREN( ) ).

***--------------------------------------------------------------------------------------
*** Check Number of Outs (total)
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOUTT( ) ).

*** Check Distribution Key
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_DIKEY( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Number of Children
    ME->CHECK_ALLOWED_CHILDREN( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Number of Outs (total)
    ME->CHECK_NOUTT( IR_MESSAGE = IR_MESSAGE ).

*** Check Distribution Key
    ME->CHECK_DIKEY( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).

***   Event Backwarding for Communication
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

    endcase.

  endmethod.
