
class ZCL_VCXI_FFSP_PR_MACHINE_LTL definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MACHINE
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MFI_FIDIM
    returning
      value(RT_FIDIM) type ZVCXI_FFSP_TT_FIDIM
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_FIDIM
    returning
      value(RT_FIDIM) type ZVCXI_FFSP_TT_FIDIM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_FIDIM type /VCXI/VKSC_IEVNT value 'RECALC_FIDIM' ##NO_TEXT.

  methods HANDLE_RECALC_FIDIM
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_FIDIM
    importing
      !IF_NOOUT type ZVCXI_XCS_NOOUT optional
      !IT_FIDIM type ZVCXI_FFSP_TT_FIDIM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSP_PR_MACHINE_LTL definition
class ZCL_VCXI_FFSP_PR_MACHINE_LTL implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter ID's
    move C_PARID_MQTYI_L to ME->F_PARID_MQTYI.
    move C_PARID_MQTYO_L to ME->F_PARID_MQTYO.
    move C_PARID_MSRWA_L to ME->F_PARID_MSRWA.
    move C_PARID_MSSWA_L to ME->F_PARID_MSSWA.

*** Get Inbound Dimension
    call function 'DIMENSION_GET'
      exporting
        LENGTH              = 1
      importing
        DIMID               = ME->F_DIMNI
      exceptions
        DIMENSION_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Outbound Dimension
    call function 'DIMENSION_GET'
      exporting
        LENGTH              = 1
      importing
        DIMID               = ME->F_DIMNO
      exceptions
        DIMENSION_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method GET_MFI_FIDIM.

    data: LT_GATE      type    /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_FIDIM type ref to ZIF_VCXI_FFSP_FIDIM.
    field-symbols: <S_FIDIM>    type ZVCXI_FFSP_S_FIDIM.

    check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Material Flow In
    LT_GATE = ME->R_PR_MFMGR->GET_MFI( ).
    if LINES( LT_GATE ) lt 1.
***   No Material Flow In available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSP'
          IF_MSGNO = '210' ).
    endif.

*** Get Dimensions of all
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_FIDIM.
          check LR_FIDIM is bound.

          insert initial line into table RT_FIDIM assigning <S_FIDIM>.

          LR_FIDIM->GET_FIWID( importing ES_FIWID = <S_FIDIM>-S_FIWID ).
          LR_FIDIM->GET_FITIN( importing ES_FITIN = <S_FIDIM>-S_FITIN ).
          LR_FIDIM->GET_FITEX( importing ES_FITEX = <S_FIDIM>-S_FITEX ).
          LR_FIDIM->GET_SURWT( importing ES_SURWT = <S_FIDIM>-S_SURWT ).
          LR_FIDIM->GET_RELEN( importing ES_RELEN = <S_FIDIM>-S_RELEN ).
          LR_FIDIM->GET_RLETA( receiving RS_RLETA = <S_FIDIM>-S_RLETA ).
          LR_FIDIM->GET_NOUPS( importing EF_NOUPS = <S_FIDIM>-NOUPS ).
          LR_FIDIM->GET_NOOUT( importing EF_NOOUT = <S_FIDIM>-NOOUT ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_MFO_FIDIM.

    data: LT_GATE  type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_FIDIM type ref to ZIF_VCXI_FFSP_FIDIM.
    field-symbols: <S_FIDIM>    type       ZVCXI_FFSP_S_FIDIM.

    check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Material Flow Out
    LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
    if LINES( LT_GATE ) lt 1.
***   No Material Flow Out available.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCSP'
          IF_MSGNO = '209' ).
    endif.

*** Get Dimensions of all
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_FIDIM.
          check LR_FIDIM is bound.

          insert initial line into table RT_FIDIM assigning <S_FIDIM>.

          LR_FIDIM->GET_FIWID( importing ES_FIWID = <S_FIDIM>-S_FIWID ).
          LR_FIDIM->GET_FITIN( importing ES_FITIN = <S_FIDIM>-S_FITIN ).
          LR_FIDIM->GET_FITEX( importing ES_FITEX = <S_FIDIM>-S_FITEX ).
          LR_FIDIM->GET_SURWT( importing ES_SURWT = <S_FIDIM>-S_SURWT ).
          LR_FIDIM->GET_RELEN( importing ES_RELEN = <S_FIDIM>-S_RELEN ).
          LR_FIDIM->GET_RLETA( receiving RS_RLETA = <S_FIDIM>-S_RLETA ).
          LR_FIDIM->GET_NOUPS( importing EF_NOUPS = <S_FIDIM>-NOUPS ).
          LR_FIDIM->GET_NOOUT( importing EF_NOOUT = <S_FIDIM>-NOOUT ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_FIDIM.
        ME->HANDLE_RECALC_FIDIM( ).

    endcase.

  endmethod.
method HANDLE_RECALC_FIDIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LT_FIDIM     type        ZVCXI_FFSP_TT_FIDIM.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_FIDIM type ref to ZIF_VCXI_FFSP_ADJ_FIDIM.

  check ME->R_PR_MFMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Film Dimension of Material Flow In
  move ME->GET_MFI_FIDIM( ) to LT_FIDIM.

***--------------------------------------------------------------------------------------
*** Get all adjusting Addon's and adjust the Film Dimensions
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_FFSP_ADJ_FIDIM=>C_IPRVT_ADJ_FIDIM
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_FIDIM.
        check LR_ADJ_FIDIM is bound.

        LR_ADJ_FIDIM->CALC_FIDIM_OUT( changing CT_FIDIM = LT_FIDIM ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***--------------------------------------------------------------------------------------
*** Set new Film Dimension of Material Flow
  ME->SET_MFO_FIDIM( IT_FIDIM = LT_FIDIM ).

endmethod.
  method SET_MFO_FIDIM.

    data: LS_FIDIM     type        ZVCXI_FFSP_S_FIDIM,
          LS_FIDIM_OLD type        ZVCXI_FFSP_S_FIDIM.
    data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE,
          LR_MFO  type ref to ZIF_VCXI_FFSP_MFO.

    check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
    LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
    ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

*** Set Dimensions to all
    loop at LT_GATE into LR_GATE.
      clear: LS_FIDIM.

      read table IT_FIDIM into LS_FIDIM index SY-TABIX.
      try.
          move LR_GATE->R_CLSPR ?to LR_MFO.
          check LR_MFO is bound.

***       Set new Film Dimensions
          LR_MFO->SET_FIDIM( IS_FIDIM = LS_FIDIM ).

***       Check if Conversion for Machine Quantity changed
          break CHECK_AGAIN. " Checking against empty value in LS_FIDIM_OLD-NOUPS?
          if LS_FIDIM-NOUPS ne LS_FIDIM_OLD-NOUPS.
***         Send Event
            ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

    data: LF_NOOUT     type        ZVCXI_XCS_NOOUT,
          LF_NOUPS_OUT type        ZVCXI_F0S_NOUPS,
          LF_NOUPS_IN  type        ZVCXI_F0S_NOUPS.
    data: LS_FIDIM     type        ZVCXI_FFSP_S_FIDIM.
    data: LT_FIDIM_OUT type        ZVCXI_FFSP_TT_FIDIM,
          LT_FIDIM_IN  type        ZVCXI_FFSP_TT_FIDIM.

***----------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
    move ME->GET_MQTYI( ) to RS_MQTYI.
    clear RS_MQTYI-MQTYI.

***----------------------------------------------------------------------------
    try.
***     Get Film Dimension of Material Flow In and Out
        move ME->GET_MFI_FIDIM( ) to LT_FIDIM_IN.
        move ME->GET_MFO_FIDIM( ) to LT_FIDIM_OUT.
      catch /VCXI/CX_CKX.
        return.
    endtry.

***----------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_FIDIM_OUT ) eq 0.
      return.

***----------------------------------------------------------------------------
*** Logic "Single MFO"
    elseif LINES( LT_FIDIM_OUT ) eq 1.

***   Get No Ups of Flow Out
      read table LT_FIDIM_OUT into LS_FIDIM index 1.
      if SY-SUBRC eq 0.
        move LS_FIDIM-NOUPS to LF_NOUPS_OUT.
      endif.
      check LF_NOUPS_OUT is not initial.

***   Get No Ups of Flow In
      loop at LT_FIDIM_IN into LS_FIDIM.
***     Take maximum No of Ups
        if LS_FIDIM-NOUPS gt LF_NOUPS_IN.
          move LS_FIDIM-NOUPS to LF_NOUPS_IN.
        endif.
      endloop.
      check LF_NOUPS_IN is not initial.

***   Convert it to Machine Quantity In
      RS_MQTYI-MQTYI = IS_QTY-QTY * LF_NOUPS_OUT / LF_NOUPS_IN.

***----------------------------------------------------------------------------
*** Logic "Multiple MFO"
    else.
***   Get Total Number of Out
      loop at LT_FIDIM_OUT into LS_FIDIM.
        LF_NOOUT = LF_NOOUT + LS_FIDIM-NOOUT.
      endloop.
      check LF_NOOUT is not initial.

***   Convert it to Machine Quantity In using the Total Out
      RS_MQTYI-MQTYI = IS_QTY-QTY / LF_NOOUT.
    endif.

  endmethod.
  method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.

    data: LF_NOUPS_IN  type        ZVCXI_F0S_NOUPS.
    data: LS_FIDIM type        ZVCXI_FFSP_S_FIDIM,
          LS_MQTYO type        ZVCXI_XCSP_S_MQTYO.
    data: LT_FIDIM_IN  type        ZVCXI_FFSP_TT_FIDIM,
          LT_FIDIM_OUT type        ZVCXI_FFSP_TT_FIDIM.

***--------------------------------------------------------------------------------------
*** Get Quantity to get the correct Unit
    move ME->GET_MQTYO( ) to RS_MQTYO.
    clear RS_MQTYO-MQTYO.

***--------------------------------------------------------------------------------------
    try.
***     Get Film Dimension of Material Flow In and Out
        move ME->GET_MFI_FIDIM( ) to LT_FIDIM_IN.
        move ME->GET_MFO_FIDIM( ) to LT_FIDIM_OUT.
      catch /VCXI/CX_CKX.
        return.
    endtry.

***--------------------------------------------------------------------------------------
*** Get No Ups of Flow In
    loop at LT_FIDIM_IN into LS_FIDIM.
***   Take maximum No Ups
      if LS_FIDIM-NOUPS gt LF_NOUPS_IN.
        move LS_FIDIM-NOUPS to LF_NOUPS_IN.
      endif.
    endloop.

    check LF_NOUPS_IN is not initial.

***--------------------------------------------------------------------------------------
*** Logic "No MFO"
    if LINES( LT_FIDIM_OUT ) eq 0.
      return.

***--------------------------------------------------------------------------------------
*** Logic "Single MFO"
    elseif LINES( LT_FIDIM_OUT ) eq 1.

***   Get PC Ups of Flow Out
      read table LT_FIDIM_OUT into LS_FIDIM index 1.

      if LS_FIDIM-NOUPS ne 0.
***     Convert it To Machine Quantity Out and Round to PC Type Out
        RS_MQTYO-MQTYO = IS_QTY-QTY * LF_NOUPS_IN / LS_FIDIM-NOUPS.
      else.
        clear RS_MQTYO-MQTYO.
        return.
      endif.

***--------------------------------------------------------------------------------------
*** Logic "Multiple MFO"
    else.
***   Calculate each Output
      loop at LT_FIDIM_OUT into LS_FIDIM.
        if LS_FIDIM-NOUPS ne 0.
***       Convert it to Machine Quantity Out
          LS_MQTYO-MQTYO = IS_QTY-QTY * LS_FIDIM-NOOUT.

***       Add to Total Quantity
          add LS_MQTYO-MQTYO to RS_MQTYO-MQTYO.
        else.
          clear RS_MQTYO-MQTYO.
          exit.
        endif.
      endloop.
    endif.


***----------------------------------------------------------------------------
*** Round by Unit Definition
    ZCL_VCXI_XCS_SERVICE_UNIT=>ROUND_UNIT( exporting IF_UOM   = RS_MQTYO-MQTYO_UOM
                                                     IF_OPROU = '+'
                                           changing  CF_VALUE = RS_MQTYO-MQTYO ).

  endmethod.
