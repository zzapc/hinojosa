
class ZCL_VCXI_PCSP_UI_MFMGR_ATP definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_GRID_MFMI_PAPER type ref to ZCL_VCXI_PCSP_GRID_MFMI_PAPER .
  data R_GRID_MFSO_P type ref to ZCL_VCXI_PCSP_GRID_MFSO_P .
  data R_PR_MFMGR type ref to ZCL_VCXI_XCSP_PR_MFMGR .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSP_UI_MFMGR_ATP definition
class ZCL_VCXI_PCSP_UI_MFMGR_ATP implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_PCSP_UI_MFMGR_ATP_BIND'
    exporting
      IR_UI_MFMGR_ATP = ME
    importing
      ES_DYNP         = ME->S_DYNP.

*** Create Grid for MFMI_PAPER
  create object ME->R_GRID_MFMI_PAPER
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_MFMI_PAPER'.

*** Create Grid for MFSO_P
  create object ME->R_GRID_MFSO_P
    exporting
      IR_GATE           = ME->R_GATE
      IR_UIGATE         = ME->R_UIGATE
      IF_CONTAINER_NAME = '0100CC_MFSO_P'.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_MFMGR.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_GRID_MFMI_PAPER is bound.
    ME->R_GRID_MFMI_PAPER->DO_FREE( ).
    clear ME->R_GRID_MFMI_PAPER.
  endif.

  if ME->R_GRID_MFSO_P is bound.
    ME->R_GRID_MFSO_P->DO_FREE( ).
    clear ME->R_GRID_MFSO_P.
  endif.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  if ME->R_GRID_MFMI_PAPER is bound.
    if ME->R_GRID_MFMI_PAPER->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_MFMI_PAPER->F_REFRESH_REQ.
    endif.
    ME->R_GRID_MFMI_PAPER->REFRESH_GRID( ).
  endif.

  if ME->R_GRID_MFSO_P is bound.
    if ME->R_GRID_MFSO_P->F_REFRESH_REQ eq ABAP_FALSE.
      move ABAP_TRUE to ME->R_GRID_MFSO_P->F_REFRESH_REQ.
    endif.
    ME->R_GRID_MFSO_P->REFRESH_GRID( ).
  endif.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if ME->R_GRID_MFMI_PAPER is bound.
    ME->R_GRID_MFMI_PAPER->CHECK_CHANGED_DATA( ).
  endif.

  if ME->R_GRID_MFSO_P is bound.
    ME->R_GRID_MFSO_P->CHECK_CHANGED_DATA( ).
  endif.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_MFMGR.

endmethod.
