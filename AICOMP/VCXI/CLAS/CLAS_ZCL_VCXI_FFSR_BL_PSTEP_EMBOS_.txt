
class ZCL_VCXI_FFSR_BL_PSTEP_EMBOS definition
  public
  inheriting from ZCL_VCXI_FFSR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSR_BL_OUTSO .
  interfaces ZIF_VCXI_XCSR_BL_MANU .
  interfaces ZIF_VCXI_FFSR_ADJ_FIDIM .
  interfaces ZIF_VCXI_FFSR_RHNDL .

  constants C_IPSTP_EMBOS type /VCXI/VSMC_IPSTP value 'FF_PS_EMBOS' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_EMBOS
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  constants C_IATYP_AT_EMBOS type /VCXI/VSMC_IATYP value 'FF_AT_EMBOS' ##NO_TEXT.
  data F_EMTON type ZVCXI_FFS_EMTON .
  data S_EMTIN type ZVCXI_FFS_S_EMTIN .
  data S_FIDIM_IN type ZVCXI_FFSP_S_FIDIM .
  data S_FIDIM_OUT type ZVCXI_FFSP_S_FIDIM .
  data S_WIDIM_OUT type ZVCXI_FFSR_S_WIDIM .

  methods ADD_SPVRE_MC_TOOL
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_EMBOS
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_EMBOS
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RR_PR_EMBOS) type ref to ZCL_VCXI_FFSS_PR_CSTEP_EMBOS
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_FIDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PSTEP_EMBOS definition
class ZCL_VCXI_FFSR_BL_PSTEP_EMBOS implementation.
  method ADD_SPVRE_MC_TOOL.

    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY,
          LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_TOOL type ref to /VCXI/CL_VKSR_SPVRE.

    check ME->F_EMTON is not initial.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_TOOL'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***--------------------------------------------------------------------------------------
*** Create Supervisor Runtime Element
    create object LR_SPVRE_MC_TOOL
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE_MC_TOOL to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MC_TOOL->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Set Material Number
    clear LS_LEOKY.
    move ME->F_EMTON                                 to LS_LEOKY-LEOKY.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_LEOKY-SETBY.
    LR_SPVRE_MC_TOOL->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***--------------------------------------------------------------------------------------
*** Set Average Consumption
    clear LS_PARAM.
    move ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCO_P   to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move 1                                           to LS_PARAM-ATFLV.
    move 'ST'                                        to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_EMBOS type ref to ZCL_VCXI_FFSR_BL_PSTEP_EMBOS.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_EMBOS.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    if ME->S_FIDIM_IN  eq LR_BL_PSTEP_EMBOS->S_FIDIM_IN and
       ME->S_FIDIM_OUT eq LR_BL_PSTEP_EMBOS->S_FIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Winding Dimensions
    if ME->S_WIDIM_OUT eq LR_BL_PSTEP_EMBOS->S_WIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Embossing Data
    if ME->S_EMTIN eq LR_BL_PSTEP_EMBOS->S_EMTIN and
       ME->F_EMTON eq LR_BL_PSTEP_EMBOS->F_EMTON.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
    move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
    ME->INIT_OUTSO( ).

*** Initialize Manual Work Center Info
    move ZCL_VCXI_XCSP_PR_MANU=>C_PARID_MSRSR_L to ME->ZIF_VCXI_XCSR_BL_MANU~F_PARID_MSRSR.
    ME->INIT_MANU( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_EMBOS type ref to ZCL_VCXI_FFSR_BL_PSTEP_EMBOS.

***--------------------------------------------------------------------------------------
*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_EMBOS.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    move ME->S_FIDIM_IN    to LR_BL_PSTEP_EMBOS->S_FIDIM_IN.
    move ME->S_FIDIM_OUT   to LR_BL_PSTEP_EMBOS->S_FIDIM_OUT.

*** Winding Dimensions
    move ME->S_WIDIM_OUT   to LR_BL_PSTEP_EMBOS->S_WIDIM_OUT.

***--------------------------------------------------------------------------------------
*** Embossing Data
    move ME->S_EMTIN       to LR_BL_PSTEP_EMBOS->S_EMTIN.
    move ME->F_EMTON       to LR_BL_PSTEP_EMBOS->F_EMTON.

  endmethod.
  method DESERIALIZE.

    data:  LF_XML   type STRING.

    check IF_XML is not initial.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML    = LF_XML

                S_FIDIM_IN   = ME->S_FIDIM_IN
                S_FIDIM_OUT  = ME->S_FIDIM_OUT
                S_WIDIM_OUT  = ME->S_WIDIM_OUT

                S_EMTIN      = ME->S_EMTIN
                F_EMTON      = ME->F_EMTON.

    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when C_IATYP_AT_EMBOS.
        ME->FILL_SPVRE_ADDON_EMBOS( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                              IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                              IR_ARBPL       = IR_ARBPL
                                    changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_EMBOS.

    data:  LS_PARAM type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Set Internal Embossing Thickness
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_EMBOS=>C_PARID_EMTIN to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->S_EMTIN-EMTIN                           to LS_PARAM-ATFLV.
    move ME->S_EMTIN-EMTIN_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Tool
    ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = IR_SPVRE_ADDON
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method GET_ARBPL_INFO.

***--------------------------------------------------------------------------------------
*** Don't overrule existing
    check CF_ID_GRP   is initial and
          CF_ID_ARBPL is initial.

***--------------------------------------------------------------------------------------
*** Standard
    move 'GRP_CONV'   to CF_ID_GRP.
    move 'ARBPL_CONV' to CF_ID_ARBPL.

***--------------------------------------------------------------------------------------
*** If Outsourcing
    if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
      move 'GRP_CONV'       to CF_ID_GRP.
      move 'ARBPL_OUTSO'    to CF_ID_ARBPL.
    endif.

***--------------------------------------------------------------------------------------
*** If Manual
    if ME->ZIF_VCXI_XCSR_BL_MANU~F_MANWC eq ABAP_TRUE.
      move 'GRP_CONV'    to CF_ID_GRP.
      move 'ARBPL_MANU'  to CF_ID_ARBPL.
    endif.

  endmethod.
  method GET_PRVDR_EMBOS.

    data:  LR_GATE   type ref to /VCXI/CL_VKSR_GATE.

*** Get Reference
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_EMBOS.
          if RR_PR_EMBOS is bound.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_SPVRE_ACTVY.

    data: LS_PARAM       type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element for Activity
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_EMBOS'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Set Internal Embossing Thickness
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ACTVY_EMBOS=>C_PARID_EMTIN to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->S_EMTIN-EMTIN                           to LS_PARAM-ATFLV.
    move ME->S_EMTIN-EMTIN_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Add Material Consumption for Tool
    ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                           changing  CT_SPVRE        = RT_SPVRE ).

  endmethod.
  method INIT_BY_SPEC.

    data:  LR_PR_CSTEP_EMBOS type ref to ZCL_VCXI_FFSS_PR_CSTEP_EMBOS.

    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Initialize Film Dimensions
    ME->INIT_BY_SPEC_FIDIM( IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Get Embossing Data
    move ME->GET_PRVDR_EMBOS( IT_PRVDR = IT_PRVDR ) to LR_PR_CSTEP_EMBOS.
    check LR_PR_CSTEP_EMBOS is bound.

*** Get Internal Embossing Thickness
    LR_PR_CSTEP_EMBOS->GET_EMTIN( importing ES_EMTIN = ME->S_EMTIN ).

*** Get Embossing Tool Number
    LR_PR_CSTEP_EMBOS->GET_EMTON( importing EF_EMTON = ME->F_EMTON ).

  endmethod.
  method INIT_BY_SPEC_FIDIM.

    data: LR_PR_CSTEP_EMBOS type ref to ZCL_VCXI_FFSS_PR_CSTEP_EMBOS,
          LR_BL_FIFPROP     type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get Provider - Embossing
    move ME->GET_PRVDR_EMBOS( IT_PRVDR = IT_PRVDR ) to LR_PR_CSTEP_EMBOS.
    check LR_PR_CSTEP_EMBOS is bound.

***--------------------------------------------------------------------------------------
*** Inbound Dimensions
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_IN-S_FIWID ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_IN-S_FITIN ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_IN-S_FITEX ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_IN-S_SURWT ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_IN-NOUPS ).

***--------------------------------------------------------------------------------------
*** Outbound Dimensions
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_OUT-S_FITEX ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_OUT-S_SURWT ).
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_OUT-NOUPS ).
    move 1 to ME->S_FIDIM_OUT-NOOUT.

***--------------------------------------------------------------------------------------
*** Get Winding Dimension
    LR_PR_CSTEP_EMBOS->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
***   Get Winding Width
      ME->S_WIDIM_OUT-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
***   Get Winding Thickness
      ME->S_WIDIM_OUT-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_OUT-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_OUT-S_SURWT
                                                          IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_WIWID = ME->S_WIDIM_OUT-S_WIWID ).
    endif.

  endmethod.
  method SERIALIZE.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).

*** Serialize
    call transformation ID
         source SUPER_XML    = RF_XML

                S_FIDIM_IN   = ME->S_FIDIM_IN
                S_FIDIM_OUT  = ME->S_FIDIM_OUT
                S_WIDIM_OUT  = ME->S_WIDIM_OUT

                S_EMTIN      = ME->S_EMTIN
                F_EMTON      = ME->F_EMTON

    result xml RF_XML.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_IN.

    refresh: CT_FIDIM.
    append ME->S_FIDIM_IN to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_OUT.

    refresh: CT_FIDIM.
    append ME->S_FIDIM_OUT to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_RDIM.

*** Inbound Roll Dimensions
    ET_RDIM_IN = ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN.

*** Outbound Roll Dimensions
    ET_RDIM_OUT = value #( for LS_RHNDL in ZIF_VCXI_FFSR_RHNDL~T_RHNDL ( S_RDITA = LS_RHNDL-S_RDITA ) ).

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_WIDIM.

    append ME->S_WIDIM_OUT to RT_WIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RDIM_IN.

*** Set Inbound Roll Dimensions as provided
    ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN = IT_RDIM_IN.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RHNDL.

    ME->SET_RHNDL( IT_RHNDL     = IT_RHNDL
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Update Target Roll Length
    if ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL is not initial.
      ME->S_FIDIM_OUT-S_RLETA = ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL[ 1 ]-S_RLETA.
    endif.

  endmethod.
