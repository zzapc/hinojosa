
class ZCL_VCXI_XCSP_EA_MACHINE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSEA
  create public .

public section.

  interfaces /VCXI/IF_VKCR_EXPL_RTE .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MQTYI
    returning
      value(RS_MQTYI) type ZVCXI_XCSP_S_MQTYI
    raising
      /VCXI/CX_CKX .
  methods GET_MQTYO
    returning
      value(RS_MQTYO) type ZVCXI_XCSP_S_MQTYO
    raising
      /VCXI/CX_CKX .
  methods GET_FEATURE
    exporting
      !ET_FEATURE_ST type /VCXI/CKI_TT_FEATURE
      !ET_FEATURE_RS type /VCXI/CKI_TT_FEATURE
      !ET_FEATURE_TT type /VCXI/CKI_TT_FEATURE
      !ET_FEATURE_WA type /VCXI/CKI_TT_FEATURE
    returning
      value(RT_FEATURE) type /VCXI/CKI_TT_FEATURE
    raising
      /VCXI/CX_CKX .
  methods GET_MSRS
    returning
      value(RS_MSRS) type /VCXI/VSM_S_MSRS
    raising
      /VCXI/CX_CKX .
  methods GET_MSRSF
    returning
      value(RS_MSRSF) type /VCXI/VSM_S_MSRSF
    raising
      /VCXI/CX_CKX .
  methods GET_MSRTI
    returning
      value(RS_MSRTI) type /VCXI/VSM_S_MSRTI
    raising
      /VCXI/CX_CKX .
  methods GET_MSRWA
    returning
      value(RS_MSRWA) type /VCXI/VSM_S_MSRWA
    raising
      /VCXI/CX_CKX .
  methods GET_MSRWF
    returning
      value(RS_MSRWF) type /VCXI/VSM_S_MSRWF
    raising
      /VCXI/CX_CKX .
  methods GET_MSSTI
    returning
      value(RS_MSSTI) type /VCXI/VSM_S_MSSTI
    raising
      /VCXI/CX_CKX .
  methods GET_MSSWA
    returning
      value(RS_MSSWA) type /VCXI/VSM_S_MSSWA
    raising
      /VCXI/CX_CKX .
  methods GET_MSTTI
    returning
      value(RS_MSTTI) type /VCXI/VSM_S_MSTTI
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS_ARBPL
    exporting
      !EF_WERKS type WERKS_D
      !EF_ARBPL type ARBPL
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_MACHINE type ref to ZCL_VCXI_XCSP_PR_MACHINE .

  methods ADJUST_BY_CSPLIT
    changing
      !CS_EXRTE type /VCXI/VKCR_S_EXRTE
    raising
      /VCXI/CX_CKX .
  methods FILTER_CPBRG_BY_ICSPA
    changing
      !CT_CPBRG type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_AUFAK
    exporting
      !EF_AUFAK type AUSCHUFAK
      !EF_AUFAK_X type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_MFRAT
    returning
      value(RF_MFRAT) type ZVCXI_XCSP_MFRAT
    raising
      /VCXI/CX_CKX .
  methods GET_QUANTITY
    importing
      !IF_PLNME type PLNME
    exporting
      !EF_BMSCH type BMSCH
      !EF_BMSCH_X type ABAP_BOOL
      !EF_MGVRG type MGVRG
      !EF_MGVRG_X type ABAP_BOOL
      !EF_MEINH type VORME
      !EF_MEINH_X type ABAP_BOOL
      !EF_UMREN type CP_UMREN
      !EF_UMREN_X type ABAP_BOOL
      !EF_UMREZ type CP_UMREZ
      !EF_UMREZ_X type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_EA_MACHINE definition
class ZCL_VCXI_XCSP_EA_MACHINE implementation.
method /VCXI/IF_VKCR_EXPL_RTE~FILTER_CPBRG.

*** Filter Routing Groups by active Cost Split
  ME->FILTER_CPBRG_BY_ICSPA( changing CT_CPBRG = CT_CPBRG ).

endmethod.
method /VCXI/IF_VKCR_EXPL_RTE~GET_RTE.

  data:  LF_ARBPL     type        ARBPL,
         LF_WERKS     type        WERKS_D,
         LF_OBJTY     type        CR_OBJTY,
         LF_OBJID     type        CR_OBJID,
         LF_STEUS     type        STEUS.
  data:  LS_MSSTI     type        /VCXI/VSM_S_MSSTI,
         LS_MSRTI     type        /VCXI/VSM_S_MSRTI,
         LS_MSTTI     type        /VCXI/VSM_S_MSTTI.

***--------------------------------------------------------------------------------------
*** Work Center and Plant
  ME->R_PR_MACHINE->GET_WERKS_ARBPL( importing EF_WERKS = LF_WERKS
                                               EF_ARBPL = LF_ARBPL ).
  move LF_ARBPL                     to RS_EXRTE-ARBPL.
  move ABAP_TRUE                    to RS_EXRTE-ARBPL_X.
  move LF_WERKS                     to RS_EXRTE-WERKS.
  move ABAP_TRUE                    to RS_EXRTE-WERKS_X.

  select single OBJTY OBJID STEUS
         into (LF_OBJTY, LF_OBJID, LF_STEUS)
         from CRHD
        where ARBPL eq LF_ARBPL
         and  WERKS eq LF_WERKS.
  if SY-SUBRC is initial.
*** Control Key
    if LF_STEUS is not initial.
      move LF_STEUS                   to RS_EXRTE-STEUS.
      move ABAP_TRUE                  to RS_EXRTE-STEUS_X.
    endif.

*** Description
    select single KTEXT             into RS_EXRTE-LTXA1
           from CRHD_V1
          where OBJTY eq LF_OBJTY
           and  OBJID eq LF_OBJID
           and  SPRAS eq SY-LANGU.
    if SY-SUBRC eq 0.
      move ABAP_TRUE                  to RS_EXRTE-LTXA1_X.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Base Quantity
  ME->GET_QUANTITY( exporting IF_PLNME   = IF_PLNME
                    importing EF_BMSCH   = RS_EXRTE-BMSCH
                              EF_BMSCH_X = RS_EXRTE-BMSCH_X
                              EF_MGVRG   = RS_EXRTE-MGVRG
                              EF_MGVRG_X = RS_EXRTE-MGVRG_X
                              EF_MEINH   = RS_EXRTE-MEINH
                              EF_MEINH_X = RS_EXRTE-MEINH_X
                              EF_UMREN   = RS_EXRTE-UMREN
                              EF_UMREN_X = RS_EXRTE-UMREN_X
                              EF_UMREZ   = RS_EXRTE-UMREZ
                              EF_UMREZ_X = RS_EXRTE-UMREZ_X ).

*** Scrap Factor
  ME->GET_AUFAK( importing EF_AUFAK   = RS_EXRTE-AUFAK
                           EF_AUFAK_X = RS_EXRTE-AUFAK_X ).

***--------------------------------------------------------------------------------------
*** Setup Time
  LS_MSSTI = ME->R_PR_MACHINE->GET_MSSTI( ).
  move LS_MSSTI-MSSTI               to RS_EXRTE-VGW01.
  move ABAP_TRUE                    to RS_EXRTE-VGW01_X.
  move LS_MSSTI-MSSTI_UOM           to RS_EXRTE-VGE01.
  move ABAP_TRUE                    to RS_EXRTE-VGE01_X.

*** Run Time
  LS_MSRTI = ME->R_PR_MACHINE->GET_MSRTI( ).
  move LS_MSRTI-MSRTI               to RS_EXRTE-VGW02.
  move ABAP_TRUE                    to RS_EXRTE-VGW02_X.
  move LS_MSRTI-MSRTI_UOM           to RS_EXRTE-VGE02.
  move ABAP_TRUE                    to RS_EXRTE-VGE02_X.

*** Teardown Time
  LS_MSTTI = ME->R_PR_MACHINE->GET_MSTTI( ).
  move LS_MSTTI-MSTTI               to RS_EXRTE-VGW03.
  move ABAP_TRUE                    to RS_EXRTE-VGW03_X.
  move LS_MSTTI-MSTTI_UOM           to RS_EXRTE-VGE03.
  move ABAP_TRUE                    to RS_EXRTE-VGE03_X.


***--------------------------------------------------------------------------------------
*** Adjust by Cost Split
  ME->ADJUST_BY_CSPLIT( changing CS_EXRTE = RS_EXRTE ).

endmethod.
method ADJUST_BY_CSPLIT.

  data:  LF_ICSPA          type        ZVCXI_XCSP_ICSPA,
         LF_COMPF          type        ZVCXI_XCSP_COMPF.
  data:  LS_DCSPL          type        ZVCXI_XCSP_S_DCSPL.

***--------------------------------------------------------------------------------------
*** Get Cost Split
  ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT( importing EF_ICSPA = LF_ICSPA
                                                                  ES_DCSPL = LS_DCSPL
                                                                  EF_COMPF = LF_COMPF ).
  check LF_ICSPA is not initial.

***--------------------------------------------------------------------------------------
*** Conversion Factor
  CS_EXRTE-UMREZ = CS_EXRTE-UMREZ * LF_COMPF.

***--------------------------------------------------------------------------------------
*** Setup Time
  CS_EXRTE-VGW01 = CS_EXRTE-VGW01 * ( LS_DCSPL-DCSPL / 100 ).

*** Run Time
  CS_EXRTE-VGW02 = CS_EXRTE-VGW02 * ( LS_DCSPL-DCSPL / 100 ).

*** Teardown Time
  CS_EXRTE-VGW03 = CS_EXRTE-VGW03 * ( LS_DCSPL-DCSPL / 100 ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Assign the PR Class to the Element API Class
  try.
      move ME->R_GATE->R_CLSPR ?to ME->R_PR_MACHINE.
    catch CX_SY_MOVE_CAST_ERROR.
***   Element API ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '804'.
  endtry.

endmethod.
method FILTER_CPBRG_BY_ICSPA.

  data:  LF_ICSPA     type        ZVCXI_XCSP_ICSPA.
  data:  LS_DCSPL     type        ZVCXI_XCSP_S_DCSPL.

***--------------------------------------------------------------------------------------
*** Get Cost Split
  ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT( importing EF_ICSPA = LF_ICSPA
                                                                  ES_DCSPL = LS_DCSPL ).
  check LF_ICSPA is not initial.

***--------------------------------------------------------------------------------------
*** Do not exploded if Operation is not Costing Relevant
  if LS_DCSPL-DCSPL le 0.
    free: CT_CPBRG.
  endif.

endmethod.
  method GET_AUFAK.

    data: LS_MQTYI      type ZVCXI_XCSP_S_MQTYI,
          LS_MQTYO      type ZVCXI_XCSP_S_MQTYO,
          LS_QTY        type ZVCXI_XCSP_S_QTY,
          LS_MQTYO_AS_I type ZVCXI_XCSP_S_MQTYI.

*** Get Operation Quantity In and Out
    move ME->R_PR_MACHINE->GET_MQTYI( ) to LS_MQTYI.
    move ME->R_PR_MACHINE->GET_MQTYO( ) to LS_MQTYO.

*** Convert Out Qunatity to In
    move LS_MQTYO-MQTYO     to LS_QTY-QTY.
    move LS_MQTYO-MQTYO_UOM to LS_QTY-QTY_UOM.
    LS_MQTYO_AS_I = ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI( IS_QTY = LS_QTY ).

***------------------------------------------------------------------------------------------------
*** Calculate the Scrap Factor based on the difference of In/Out
    try.
        if LS_MQTYI-MQTYI is not initial.
          EF_AUFAK = ( 1 - ( LS_MQTYO_AS_I-MQTYI / LS_MQTYI-MQTYI ) ) * 100.
        else.
          clear EF_AUFAK.
        endif.
        if EF_AUFAK lt 0.
          clear EF_AUFAK.
        endif.
      catch CX_SY_ARITHMETIC_OVERFLOW.
        move '99.999' to EF_AUFAK.
    endtry.

    move ABAP_TRUE to EF_AUFAK_X.

  endmethod.
  method GET_FEATURE.

    check ME->R_PR_MACHINE is bound.
    RT_FEATURE = ME->R_PR_MACHINE->GET_FEATURE( ).

    check ME->R_PR_MACHINE->R_RTE_CMACH is bound.
    if ET_FEATURE_ST is requested.
      ME->R_PR_MACHINE->R_RTE_CMACH->FILTER_FEATURE( exporting IT_FEATURE    = RT_FEATURE
                                                     importing ET_FEATURE_ST = ET_FEATURE_ST ).
    endif.
    if ET_FEATURE_RS is requested.
      ME->R_PR_MACHINE->R_RTE_CMACH->FILTER_FEATURE( exporting IT_FEATURE    = RT_FEATURE
                                                     importing ET_FEATURE_RS = ET_FEATURE_RS ).
    endif.
    if ET_FEATURE_TT is requested.
      ME->R_PR_MACHINE->R_RTE_CMACH->FILTER_FEATURE( exporting IT_FEATURE    = RT_FEATURE
                                                     importing ET_FEATURE_TT = ET_FEATURE_TT ).
    endif.
    if ET_FEATURE_WA is requested.
      ME->R_PR_MACHINE->R_RTE_CMACH->FILTER_FEATURE( exporting IT_FEATURE    = RT_FEATURE
                                                     importing ET_FEATURE_WA = ET_FEATURE_WA ).
    endif.

  endmethod.
method GET_MFRAT.

  data:  LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_MF     type ref to ZCL_VCXI_XCSP_PR_MF.

  check ME->R_PR_MACHINE             is bound and
        ME->R_PR_MACHINE->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow In
  LT_GATE = ME->R_PR_MACHINE->R_PR_MFMGR->GET_MFI( ).
  if lines( LT_GATE ) lt 1.
*** No Material Flow In available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '210' ).
  endif.

*** Get first
  read table LT_GATE into LR_GATE index 1.
  check SY-SUBRC eq 0.
  try.
      move LR_GATE->R_CLSPR ?to LR_PR_MF.
      check LR_PR_MF is bound.
      move LR_PR_MF->GET_MFRAT( ) to RF_MFRAT.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_MF.
  endtry.

endmethod.
  method GET_MQTYI.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~GET_MQTYI( ) to RS_MQTYI.

  endmethod.
  method GET_MQTYO.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->ZIF_VCXI_XCSP_OPERATION~GET_MQTYO( ) to RS_MQTYO.

  endmethod.
  method GET_MSRS.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSRS( ) to RS_MSRS.

  endmethod.
  method GET_MSRSF.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSRSF( ) to RS_MSRSF.

  endmethod.
  method GET_MSRTI.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSRTI( ) to RS_MSRTI.

  endmethod.
  method GET_MSRWA.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSRWA( ) to RS_MSRWA.

  endmethod.
  method GET_MSRWF.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSRWF( ) to RS_MSRWF.

  endmethod.
  method GET_MSSTI.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSSTI( ) to RS_MSSTI.

  endmethod.
  method GET_MSSWA.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSSWA( ) to RS_MSSWA.

  endmethod.
  method GET_MSTTI.

    check ME->R_PR_MACHINE is bound.
    move ME->R_PR_MACHINE->GET_MSTTI( ) to RS_MSTTI.

  endmethod.
  method GET_QUANTITY.

    data: LF_UMREZ type UMREZ,
          LF_UMREN type UMREN.
    data: LS_MQTYI type ZVCXI_XCSP_S_MQTYI.

***--------------------------------------------------------------------------------------
*** Get Base Quantity
    move ME->R_PR_MACHINE->GET_MQTYI( ) to LS_MQTYI.
    move LS_MQTYI-MQTYI                 to EF_BMSCH.
    move ABAP_TRUE                      to EF_BMSCH_X.
    move LS_MQTYI-MQTYI_UOM             to EF_MEINH.
    move ABAP_TRUE                      to EF_MEINH_X.

***--------------------------------------------------------------------------------------
*** Get Conversion
    move 1                to EF_UMREZ.
    move ABAP_TRUE        to EF_UMREZ_X.
    move ME->GET_MFRAT( ) to EF_UMREN.
    move ABAP_TRUE        to EF_UMREN_X.

***--------------------------------------------------------------------------------------
*** Alternate Units
    if EF_MEINH ne IF_PLNME.
      call function 'UNIT_CONVERSION_SIMPLE'
        exporting
          INPUT                = 1
          UNIT_IN              = IF_PLNME
          UNIT_OUT             = EF_MEINH
        importing
          DENOMINATOR          = LF_UMREZ
          NUMERATOR            = LF_UMREN
        exceptions
          CONVERSION_NOT_FOUND = 1
          DIVISION_BY_ZERO     = 2
          INPUT_INVALID        = 3
          OUTPUT_INVALID       = 4
          OVERFLOW             = 5
          TYPE_INVALID         = 6
          UNITS_MISSING        = 7
          UNIT_IN_NOT_FOUND    = 8
          UNIT_OUT_NOT_FOUND   = 9.
      if SY-SUBRC ne 0.
***     Ignore Conversion
        LF_UMREZ = 1.
        LF_UMREN = 1.
      endif.

***   Adjust Conversion based on Unit Conversion
      EF_UMREZ = EF_UMREZ * LF_UMREZ.
      EF_UMREN = EF_UMREN * LF_UMREN.
    endif.

  endmethod.
  method GET_WERKS_ARBPL.

    check ME->R_PR_MACHINE is bound.
    ME->R_PR_MACHINE->GET_WERKS_ARBPL( importing EF_WERKS = EF_WERKS
                                                 EF_ARBPL = EF_ARBPL ).

  endmethod.
