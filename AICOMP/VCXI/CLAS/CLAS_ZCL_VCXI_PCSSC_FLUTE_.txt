
class ZCL_VCXI_PCSSC_FLUTE definition
  public
  final
  create public .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  constants C_ACTVT_CREATE type ACTIV_AUTH value '01'. "#EC NOTEXT
  constants C_ACTVT_DELETE type ACTIV_AUTH value '06'. "#EC NOTEXT
  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03'. "#EC NOTEXT
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02'. "#EC NOTEXT
  constants C_CDOCL_FLUTE type CDOBJECTCL value 'ZVCXI_PCSSC_FL'. "#EC NOTEXT
  constants C_FCODE_FLUTE_CHECK type UI_FUNC value 'FLUTE_CHECK'. "#EC NOTEXT
  constants C_FCODE_FLUTE_DELETE type UI_FUNC value 'FLUTE_DELETE'. "#EC NOTEXT
  constants C_FCODE_FLUTE_FREE type UI_FUNC value 'FLUTE_FREE'. "#EC NOTEXT
  constants C_FCODE_FLUTE_SAVE type UI_FUNC value 'FLUTE_SAVE'. "#EC NOTEXT
  constants C_TOOBJ_FLUTE type /VCXI/CKX_TOOBJ value 'FLUTE'. "#EC NOTEXT
  type-pools ABAP .
  data F_CHANGED type ABAP_BOOL read-only value ABAP_FALSE. "#EC NOTEXT .
  data F_DELETED type ABAP_BOOL read-only value ABAP_FALSE. "#EC NOTEXT .
  data F_FLUTE type ZVCXI_PCS_FLUTE read-only .
  data T_FPAPI type ZVCXI_PCSSC_TT_FPAPI read-only .
  data T_FPLAI type ZVCXI_PCSSC_TT_FPLAI read-only .
  data T_FSTRUCT type ZVCXI_PCSSC_TT_FSTRUCT read-only .

  methods ADD_FPAPI
    importing
      !IS_FPAPI type ZVCXI_PCSSC_S_FPAPI
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
      !IF_WERKS type WERKS_D optional
    raising
      /VCXI/CX_CKX .
  methods ADD_FPLAI
    importing
      !IS_FPLAI type ZVCXI_PCSSC_S_FPLAI
    raising
      /VCXI/CX_CKX .
  methods ADD_FSTRUCT
    importing
      !IS_FSTRUCT type ZVCXI_PCSSC_S_FSTRUCT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
    returning
      value(RR_FLUTE) type ref to ZCL_VCXI_PCSSC_FLUTE
    raising
      /VCXI/CX_CKX .
  methods DELETE_FPAPI
    importing
      !IS_FPAPI type ZVCXI_PCSSC_S_FPAPI
    raising
      /VCXI/CX_CKX .
  methods DELETE_FPLAI
    importing
      !IS_FPLAI type ZVCXI_PCSSC_S_FPLAI
    raising
      /VCXI/CX_CKX .
  methods SORT_PAPER
    changing
      !CT_PAPER type ZVCXI_PCSSC_TT_PAPER
    raising
      /VCXI/CX_CKX .
  methods DELETE_FSTRUCT
    importing
      !IS_FSTRUCT type ZVCXI_PCSSC_S_FSTRUCT
    raising
      /VCXI/CX_CKX .
  methods GET_FPAPI_BY_DATE
    importing
      !IF_WERKS type WERKS_D
      !IF_ARBPL type ARBPL
      !IF_BPAID type ZVCXI_PCS_BPAID
      !IF_DATE type DATS
    returning
      value(RS_FPAPI) type ZVCXI_PCSSC_S_FPAPI
    raising
      /VCXI/CX_CKX .
  methods GET_FPLAI_BY_DATE
    importing
      !IF_WERKS type WERKS_D
      !IF_ARBPL type ARBPL
      !IF_DATE type DATS
    returning
      value(RS_FPLAI) type ZVCXI_PCSSC_S_FPLAI
    raising
      /VCXI/CX_CKX .
  methods SET_DESCR
    importing
      !IF_DESCR type /VCXI/CKX_DESCR
      !IF_LANGU type LANGU default SY-LANGU
    raising
      /VCXI/CX_CKX .
  methods UPDATE_FPAPI
    importing
      !IS_FPAPI type ZVCXI_PCSSC_S_FPAPI
    raising
      /VCXI/CX_CKX .
  methods UPDATE_FPLAI
    importing
      !IS_FPLAI type ZVCXI_PCSSC_S_FPLAI
    raising
      /VCXI/CX_CKX .
  methods UPDATE_FSTRUCT
    importing
      !IS_FSTRUCT type ZVCXI_PCSSC_S_FSTRUCT
    raising
      /VCXI/CX_CKX .
protected section.

  data F_WRITE_TR type ABAP_BOOL .

  methods HANDLE_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
private section.

  data F_LOCKED type ABAP_BOOL value ABAP_FALSE. "#EC NOTEXT .
  data S_LOG type /VCXI/CKX_S_LOG .
  data T_DESCR type /VCXI/CKX_TT_DESCR .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods INIT_AFTER_CREATE
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PCSSC_FLUTE definition
class ZCL_VCXI_PCSSC_FLUTE implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.

  data:  LF_DISABLED         type CUA_ACTIVE.

*** Create Menu
  create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Delete Flute
  RR_MENU->ADD_FUNCTION( FCODE       = ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_DELETE
                         TEXT        = 'Delete Flute'(F01)
                         DISABLED    = LF_DISABLED ).

*** Check Flute
  RR_MENU->ADD_FUNCTION( FCODE       = ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_CHECK
                         TEXT        = 'Check Flute'(F02)
                         DISABLED    = ABAP_FALSE ).

endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_DELETE.
      ME->HANDLE_DELETE( ).
    when ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_FREE.
      ME->HANDLE_FREE( ).
    when ZCL_VCXI_PCSSC_FLUTE=>C_FCODE_FLUTE_CHECK.
      ME->HANDLE_CHECK( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move C_CDOCL_FLUTE                       to EF_CDOCL.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/CKX'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

*** Check if Flute Customizing can be changed
  ZCL_VCXI_PCSSC_FLUTE=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_PCSSC_FLUTE=>C_ACTVT_EDIT ).

***--------------------------------------------------------------------------------------
*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

***--------------------------------------------------------------------------------------
*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  data:  LT_DESCR type /VCXI/CKX_TT_DESCR.

  try.
      LT_DESCR = ME->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ).
      RF_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
    catch /VCXI/CX_CKX.
      clear RF_DESCR.
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

  move ME->T_DESCR to RT_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_FLUTE to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->F_FLUTE to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_FLUTE    type        ZVCXI_PCS_FLUTE.
  data:  LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_FLUTE    type ref to ZCL_VCXI_PCSSC_FLUTE.

  check IF_GUID is not initial.

  read table ZCL_VCXI_PCSSC_FLUTE=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_FLUTE.
*** Get new Instance
    create object LR_FLUTE
      exporting
        IF_FLUTE = LF_FLUTE.

    move LR_FLUTE ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method ADD_FPAPI.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FPAPI with key FLUTE = IS_FPAPI-FLUTE
                                  WERKS = IS_FPAPI-WERKS
                                  ARBPL = IS_FPAPI-ARBPL
                                  BPAID = IS_FPAPI-BPAID
                                  VALFR = IS_FPAPI-VALFR
                         transporting no fields.

  if SY-SUBRC ne 0.
    append IS_FPAPI to ME->T_FPAPI.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_FPLAI.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FPLAI with key FLUTE = IS_FPLAI-FLUTE
                                  WERKS = IS_FPLAI-WERKS
                                  ARBPL = IS_FPLAI-ARBPL
                                  VALFR = IS_FPLAI-VALFR
                         transporting no fields.

  if SY-SUBRC ne 0.
    append IS_FPLAI to ME->T_FPLAI.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_FSTRUCT.

  field-symbols: <S_FSTRUCT> type ZVCXI_PCSSC_S_FSTRUCT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FSTRUCT assigning <S_FSTRUCT> with key FLUTE = IS_FSTRUCT-FLUTE.

  if SY-SUBRC ne 0.
    append initial line to ME->T_FSTRUCT assigning <S_FSTRUCT>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method CHECK_AUTH.

  data:  LF_MSGV1  type SYMSGV,
         LF_MSGV2  type SYMSGV,
         LF_MSGV3  type SYMSGV,
         LF_MSGV4  type SYMSGV.

***--------------------------------------------------------------------------------------
*** Check Authority for Flute Customizing
  if IF_WERKS is supplied.
    if IF_WERKS is initial.
      authority-check object 'Z_PC_FLUTG'
               id 'ACTVT'       field IF_ACTVT.
    else.
      authority-check object 'Z_PC_FLUTP'
               id 'ACTVT'       field IF_ACTVT
               id 'WERKS'       field IF_WERKS.
    endif.


  else.
    authority-check object 'Z_PC_FLUTP'
           id 'ACTVT'       field IF_ACTVT
           id 'WERKS'       dummy.
    if SY-SUBRC ne 0.
      authority-check object 'Z_PC_FLUTG'
               id 'ACTVT'       field IF_ACTVT.
    endif.
  endif.

***--------------------------------------------------------------------------------------
  if SY-SUBRC ne 0.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.
    if IF_WERKS is not supplied.
***   No authorization to &1 Flute Details.
      raise exception type /VCXI/CX_CKX
         exporting
           F_MSGTY = 'E'
           F_MSGID = 'ZVCXI_PCSSC'
           F_MSGNO = '310'
           F_MSGV1 = LF_MSGV1.

    elseif IF_WERKS is supplied.
      if IF_WERKS is not initial.
***     No authorization to &1 Flute Details in Plant &2.
        move IF_WERKS to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
           exporting
             F_MSGTY = 'E'
             F_MSGID = 'ZVCXI_PCSSC'
             F_MSGNO = '311'
             F_MSGV1 = LF_MSGV1
             F_MSGV2 = LF_MSGV2.
      else.
***     No authorization to &1 Flute Details - Global.
        raise exception type /VCXI/CX_CKX
           exporting
             F_MSGTY = 'E'
             F_MSGID = 'ZVCXI_PCSSC'
             F_MSGNO = '312'
             F_MSGV1 = LF_MSGV1.
      endif.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  data:          LR_CX_CKX     type ref to /VCXI/CX_CKX.
  field-symbols: <S_INSTANCE>  type        /VCXI/CKX_S_OBJECT_INSTANCE.

  try.
***------------------------------------------------------------------------------------------------
***   Set Flute and Type of Object
      move IF_FLUTE      to ME->F_FLUTE.
      move C_TOOBJ_FLUTE to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***   Load from DB for existing Flutes
      if IF_NEW eq ABAP_FALSE.
        ME->LOAD_FROM_DB( ).
      endif.

***------------------------------------------------------------------------------------------------
***   Add instance to instance buffer
      append initial line to ZCL_VCXI_PCSSC_FLUTE=>T_INSTANCE assigning <S_INSTANCE>.
      move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
      move ME                                  ?to <S_INSTANCE>-R_OBJECT.

***   Set Event Handler
      set handler ME->HANDLE_CHANGED        for ME.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->HANDLE_FREE( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method CREATE.

  check IF_FLUTE is not initial.

*** Make sure that flute does not exist yet
  read table ZCL_VCXI_PCSSC_FLUTE=>T_INSTANCE with key GUID = IF_FLUTE
                       transporting no fields.

  if SY-SUBRC ne 0.

*** Create new Flute
    create object RR_FLUTE
      exporting
        IF_FLUTE = IF_FLUTE
        IF_NEW   = ABAP_TRUE.
  else.
*** Flute Instance already exists in Buffer.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'W'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '204' ).
  endif.

***----------------------------------------------------------------------------
*** Initialization after creation of new object
  RR_FLUTE->INIT_AFTER_CREATE( ).

endmethod.
method DELETE_FPAPI.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FPAPI with key FLUTE = IS_FPAPI-FLUTE
                                  WERKS = IS_FPAPI-WERKS
                                  ARBPL = IS_FPAPI-ARBPL
                                  BPAID = IS_FPAPI-BPAID
                                  VALFR = IS_FPAPI-VALFR
                         transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_FPAPI where FLUTE = IS_FPAPI-FLUTE
                         and WERKS = IS_FPAPI-WERKS
                         and ARBPL = IS_FPAPI-ARBPL
                         and BPAID = IS_FPAPI-BPAID
                         and VALFR = IS_FPAPI-VALFR.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_FPLAI.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FPLAI with key FLUTE = IS_FPLAI-FLUTE
                                  WERKS = IS_FPLAI-WERKS
                                  ARBPL = IS_FPLAI-ARBPL
                                  VALFR = IS_FPLAI-VALFR
                         transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_FPLAI where FLUTE = IS_FPLAI-FLUTE
                         and WERKS = IS_FPLAI-WERKS
                         and ARBPL = IS_FPLAI-ARBPL
                         and VALFR = IS_FPLAI-VALFR.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_FSTRUCT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FSTRUCT with key FLUTE = IS_FSTRUCT-FLUTE
                         transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_FSTRUCT where FLUTE = IS_FSTRUCT-FLUTE.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method GET_FPAPI_BY_DATE.

 data:  LT_FPAPI   TYPE ZVCXI_PCSSC_TT_FPAPI.

***------------------------------------------------------------------
*** Get Valid Entries by Date and Plant
  move ME->T_FPAPI to LT_FPAPI.
  delete LT_FPAPI where BPAID ne IF_BPAID
                   or   ARBPL ne IF_ARBPL
                   or   WERKS ne IF_WERKS
                   or   VALFR gt IF_DATE.

*** Get Work Center Independent Entiers
  if lines( LT_FPAPI ) lt 1.
    move ME->T_FPAPI to LT_FPAPI.
    delete LT_FPAPI where BPAID ne IF_BPAID
                     or   ARBPL ne SPACE
                     or   WERKS ne IF_WERKS
                     or   VALFR gt IF_DATE.
*** Get Plant Independent Entiers
    if lines( LT_FPAPI ) lt 1.
      move ME->T_FPAPI to LT_FPAPI.
      delete LT_FPAPI where BPAID ne IF_BPAID
                       or   ARBPL ne SPACE
                       or   WERKS ne SPACE
                       or   VALFR gt IF_DATE.
    endif.
  endif.

***------------------------------------------------------------------
*** Get youngest Entry
  sort LT_FPAPI by VALFR descending.
  read table LT_FPAPI into RS_FPAPI index 1.

endmethod.
method GET_FPLAI_BY_DATE.

 data:  LT_FPLAI   TYPE ZVCXI_PCSSC_TT_FPLAI.

***------------------------------------------------------------------
*** Get Valid Entries by Date and Plant
  move ME->T_FPLAI to LT_FPLAI.
  delete LT_FPLAI where ARBPL ne IF_ARBPL
                   or   WERKS ne IF_WERKS
                   or   VALFR gt IF_DATE.

*** Get Work Center Independent Entiers
  if lines( LT_FPLAI ) lt 1.
    move ME->T_FPLAI to LT_FPLAI.
    delete LT_FPLAI where ARBPL ne SPACE
                     or   WERKS ne IF_WERKS
                     or   VALFR gt IF_DATE.
*** Get Plant Independent Entiers
    if lines( LT_FPLAI ) lt 1.
      move ME->T_FPLAI to LT_FPLAI.
      delete LT_FPLAI where ARBPL ne SPACE
                       or   WERKS ne SPACE
                       or   VALFR gt IF_DATE.
    endif.
  endif.

***------------------------------------------------------------------
*** Get youngest Entry
  sort LT_FPLAI by VALFR descending.
  read table LT_FPLAI into RS_FPLAI index 1.

endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CHECK.

***------------------------------------------------------------------
*** Check Structure has at least 2 Papers
  if lines( ME->T_FSTRUCT ) lt 2.

*** Please check the Flute Structure, at least two Papers are required.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_PCSSC'
        IF_MSGNO = '302' ).

  endif.

endmethod.
method HANDLE_DELETE.

*** If not locked try to lock
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).
  endif.

*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE.

*** Remove Instance from Buffer
  delete T_INSTANCE where R_OBJECT eq ME.

*** Unlock
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

*** Mark as Deleted to Hide
  move ABAP_TRUE to ME->F_DELETED.

endmethod.
method HANDLE_SAVE.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
  move SY-UNAME     to ME->S_LOG-CHABY.
  get time stamp field ME->S_LOG-CHAAT.

***----------------------------------------------------------------------------
  if ME->F_DELETED eq ABAP_FALSE.
*** Save Flute
    call function 'ZVCXI_PCSSC_DB_SAVE_FLUTE'
      in update task
      exporting
        IF_FLUTE = ME->F_FLUTE
        IT_FPLAI = ME->T_FPLAI
        IT_FPAPI = ME->T_FPAPI.

  else.
*** Delete Flute
    call function 'ZVCXI_PCSSC_DB_DEL_FLUTE'
      in update task
      exporting
        IF_FLUTE = ME->F_FLUTE.
  endif.

*** Reset Change Indicator
  move ABAP_FALSE to ME->F_CHANGED.

*** Do Commit
  commit work and wait.

*** Relock
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

endmethod.
method INIT_AFTER_CREATE.

*** Set lock for new object
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

  raise event /VCXI/IF_CKX_OBJECT~CREATED.

endmethod.
method LOAD_FROM_DB.

  data:          LS_TC210     type                   ZVCXI_PCS_TC210,
                 LS_TC210T    type                   ZVCXI_PCS_TC210T,
                 LS_TC213     type                   ZVCXI_PCS_TC213,
                 LS_TD211     type                   ZVCXI_PCS_TD211,
                 LS_TD212     type                   ZVCXI_PCS_TD212.
  data:          LT_TC210T    type standard table of ZVCXI_PCS_TC210T,
                 LT_TC213     type standard table of ZVCXI_PCS_TC213,
                 LT_TD211     type standard table of ZVCXI_PCS_TD211,
                 LT_TD212     type standard table of ZVCXI_PCS_TD212.
  field-symbols: <S_DESCR>    type                   /VCXI/CKX_S_DESCR,
                 <S_FSTRUCT>  type                   ZVCXI_PCSSC_S_FSTRUCT,
                 <S_FPLAI>    type                   ZVCXI_PCSSC_S_FPLAI,
                 <S_FPAPI>    type                   ZVCXI_PCSSC_S_FPAPI.

  free: ME->S_LOG,
        ME->T_DESCR,
        ME->F_CHANGED,
        ME->T_FSTRUCT,
        ME->T_FPAPI,
        ME->T_FPLAI.

***----------------------------------------------------------------------------
*** Load Header
  select single *
         into LS_TC210
         from ZVCXI_PCS_TC210
        where FLUTE eq ME->F_FLUTE.
  if SY-SUBRC ne 0.
*** Flute & doesn't exist in DB.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_PCSSC'
                                          IF_MSGNO = '303'
                                          IF_MSGV1 = ME->F_FLUTE ).
  endif.

***----------------------------------------------------------------------------
*** Load Description
  select *
         into table LT_TC210T
         from ZVCXI_PCS_TC210T
        where FLUTE eq ME->F_FLUTE.
  loop at LT_TC210T into LS_TC210T.
    append initial line to ME->T_DESCR assigning <S_DESCR>.
    move-corresponding LS_TC210T to <S_DESCR>.
  endloop.

***----------------------------------------------------------------------------
*** Load Flute Structure
  select *
         into table LT_TC213
         from ZVCXI_PCS_TC213
        where FLUTE eq ME->F_FLUTE.
  loop at LT_TC213 into LS_TC213.
    append initial line to ME->T_FSTRUCT assigning <S_FSTRUCT>.
    move-corresponding LS_TC213 to <S_FSTRUCT>.
  endloop.

***----------------------------------------------------------------------------
*** Load Plant Info
  select *
         into table LT_TD211
         from ZVCXI_PCS_TD211
        where FLUTE eq ME->F_FLUTE.
  loop at LT_TD211 into LS_TD211.
    append initial line to ME->T_FPLAI assigning <S_FPLAI>.
    move-corresponding LS_TD211 to <S_FPLAI>.
  endloop.

***----------------------------------------------------------------------------
*** Load Paper Info
  select *
         into table LT_TD212
         from ZVCXI_PCS_TD212
        where FLUTE eq ME->F_FLUTE.
  loop at LT_TD212 into LS_TD212.
    append initial line to ME->T_FPAPI assigning <S_FPAPI>.
    move-corresponding LS_TD212 to <S_FPAPI>.
  endloop.

endmethod.
method SET_DESCR.

  field-symbols: <S_DESCR> type /VCXI/CKX_S_DESCR.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Description
  read table ME->T_DESCR assigning <S_DESCR> with key LANGU = IF_LANGU.
  if SY-SUBRC ne 0.
    append initial line to ME->T_DESCR assigning <S_DESCR>.
    move IF_LANGU to <S_DESCR>-LANGU.
  endif.
  move IF_DESCR   to <S_DESCR>-DESCR.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Write Lock
        call function 'ENQUEUE_EZVCXI_PCS_C210E'
          exporting
            MODE_ZVCXI_PCS_TC210 = 'E'
            MANDT                = SY-MANDT
            FLUTE                = ME->F_FLUTE
          exceptions
            FOREIGN_LOCK         = 1
            SYSTEM_FAILURE       = 2
            others               = 3.
        if SY-SUBRC <> 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***------------------------------------------------------------------
      else.
***     Remove Write Lock
        call function 'DEQUEUE_EZVCXI_PCS_C210E'
          exporting
            MODE_ZVCXI_PCS_TC210 = 'E'
            MANDT                = SY-MANDT
            FLUTE                = ME->F_FLUTE.

      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method SORT_PAPER.

  data:          LS_FSTRUCT type          ZVCXI_PCSSC_S_FSTRUCT,
                 LS_PAPER   type          ZVCXI_PCSSC_S_PAPER.
  data:          LT_PAPER   type          ZVCXI_PCSSC_TT_PAPER.

*** Buffer current Paper and clear attribute
  move CT_PAPER to LT_PAPER.
  free: CT_PAPER.

*** Get Paper Structure and sort it
  sort ME->T_FSTRUCT by SEQNR.

*** Build Paper based on Structure
  loop at ME->T_FSTRUCT into LS_FSTRUCT.
    clear LS_PAPER.
    read table LT_PAPER into LS_PAPER with key BPAID = LS_FSTRUCT-BPAID.
    if SY-SUBRC ne 0.
      move LS_FSTRUCT-BPAID to LS_PAPER-BPAID.
    endif.
    append LS_PAPER to CT_PAPER.
  endloop.

endmethod.
method UPDATE_FPAPI.

  field-symbols: <S_FPAPI> type ZVCXI_PCSSC_S_FPAPI.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FPAPI assigning <S_FPAPI> with key FLUTE = IS_FPAPI-FLUTE
                                                      WERKS = IS_FPAPI-WERKS
                                                      ARBPL = IS_FPAPI-ARBPL
                                                      BPAID = IS_FPAPI-BPAID
                                                      VALFR = IS_FPAPI-VALFR.

  if SY-SUBRC eq 0.
    if IS_FPAPI-BPFAC is not initial.
      move IS_FPAPI-BPFAC to <S_FPAPI>-BPFAC.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_FPLAI.

  field-symbols: <S_FPLAI> type ZVCXI_PCSSC_S_FPLAI.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FPLAI assigning <S_FPLAI> with key FLUTE = IS_FPLAI-FLUTE
                                                      WERKS = IS_FPLAI-WERKS
                                                      ARBPL = IS_FPLAI-ARBPL
                                                      VALFR = IS_FPLAI-VALFR.

  if SY-SUBRC eq 0.
    if IS_FPLAI-BGWHT is not initial.
      move IS_FPLAI-BGWHT      to <S_FPLAI>-BGWHT.
      move IS_FPLAI-BGWHT_UOM  to <S_FPLAI>-BGWHT_UOM.
    endif.
    if IS_FPLAI-STARF is not initial.
      move IS_FPLAI-STARF  to <S_FPLAI>-STARF.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_FSTRUCT.

  field-symbols: <S_FSTRUCT> type ZVCXI_PCSSC_S_FSTRUCT.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_FSTRUCT assigning <S_FSTRUCT> with key FLUTE = IS_FSTRUCT-FLUTE.

  if SY-SUBRC eq 0.
    if IS_FSTRUCT-BPAID is not initial.
      move IS_FSTRUCT-BPAID      to <S_FSTRUCT>-BPAID.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
