
class ZCL_VCXI_XCI_BOB_PLNDORD definition
  public
  create public .

public section.

  data S_PLAF type PLAF .
  data T_MDPM type BADI_MDPM .

  methods CHANGE
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_PLNUM type PLNUM
    raising
      /VCXI/CX_CKX .
  methods CONV_TO_PRODORD
    importing
      !IF_AUFART type AUFART optional
      !IF_AUFNR type AUFNR optional
      !IS_ORDER_OBJECTS type BAPI_PP_ORDER_OBJECTS
    returning
      value(RR_BOB_PRODORD) type ref to ZCL_VCXI_XCI_BOB_PRODORD
    raising
      /VCXI/CX_CKX .
  methods CONV_TO_PRODORD_PARTIAL
    importing
      !IF_AUFART type AUFART
      !IF_AUFNR type AUFNR
      !IF_GSMNG type GSMNG
      !IS_ORDER_OBJECTS type BAPI_PP_ORDER_OBJECTS
    returning
      value(RR_BOB_PRODORD) type ref to ZCL_VCXI_XCI_BOB_PRODORD
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IF_PASCH type PASCH
      !IS_PLAF type PLAF
      !IF_TERMX type TERMX default ABAP_TRUE
      !IS_MDSCT type MDSCT optional
    returning
      value(RR_BOB_PLNDORD) type ref to ZCL_VCXI_XCI_BOB_PLNDORD
    raising
      /VCXI/CX_CKX .
  class-methods CREATE_SIMPLE
    importing
      !IF_PLMAT type PLMAT
      !IF_PLWRK type PLWRK
      !IF_GSMNG type GSMNG
      !IF_PSTTR type PSTTR
      !IF_KDAUF type KDAUF optional
      !IF_KDPOS type KDPOS optional
    returning
      value(RR_BOB_PLNDORD) type ref to ZCL_VCXI_XCI_BOB_PLNDORD
    raising
      /VCXI/CX_CKX .
  methods DELETE
    raising
      /VCXI/CX_CKX .
  methods DEQUEUE
    raising
      /VCXI/CX_CKX .
  methods DISPLAY
    raising
      /VCXI/CX_CKX .
  methods ENQUEUE
    raising
      /VCXI/CX_CKX .
  methods EXPLODE_BOM
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "ZCL_VCXI_XCI_BOB_PLNDORD definition
class ZCL_VCXI_XCI_BOB_PLNDORD implementation.
  method CHANGE.

    data: LS_BAPIPLAF_E1  type BAPIPLAF_E1,
          LS_BAPIPLAF_I2X type BAPIPLAF_I2X,
          LS_BAPIRETURN1  type BAPIRETURN1.
    data: LT_PLDORDCOMP_E1 type table of BAPI_PLDORDCOMP_E1.


***--------------------------------------------------------------------------------------
*** Convert to BAPI Structure
    call function 'MAP2E_PLAF_TO_BAPIPLAF_E1_SL'
      exporting
        PLAF        = ME->S_PLAF
      importing
        BAPIPLAF_E1 = LS_BAPIPLAF_E1.

    call function 'MAP2E_MDPM_BAPI_PLDORDCOMP_E1'
      tables
        MDPM               = ME->T_MDPM
        BAPI_PLDORDCOMP_E1 = LT_PLDORDCOMP_E1.


***--------------------------------------------------------------------------------------
*** Change Planned Order
    call function 'BAPI_PLANNEDORDER_CHANGE'
      exporting
        PLANNEDORDER   = ME->S_PLAF-PLNUM
        HEADERDATA     = corresponding BAPIPLAF_I2( LS_BAPIPLAF_E1 )
        HEADERDATAX    = LS_BAPIPLAF_I2X
      importing
        RETURN         = LS_BAPIRETURN1
      tables
        COMPONENTSDATA = LT_PLDORDCOMP_E1.

  endmethod.
  method CONSTRUCTOR.

*** Check Existance
    call function 'MD_PLDORD_EXISTENCE_CHECK_BAPI'
      exporting
        IV_PLNUM                    = IF_PLNUM
      exceptions
        PLANNED_ORDER_DOESNOT_EXIST = 1
        ENTRY_NOT_MADE              = 2
        FAILURE_IN_READING_PLANT    = 3
        NO_AUTHORITY                = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Information
    call function 'MD_PLDORD_GETDETAIL_BAPI'
      exporting
        PLANNEDORDER_NUMBER = IF_PLNUM
      importing
        HEADER_DATA         = ME->S_PLAF
      tables
        COMPONENTS_DATA     = ME->T_MDPM
      exceptions
        NO_AUTHORITY        = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method CONV_TO_PRODORD.

    data: LF_AUFNR type AUFNR.
    data: LS_BAPIRET2 type BAPIRET2.


*** Perform Conversion
    call function 'BAPI_PRODORD_CREATE_FROM_PLORD'
      exporting
        PLANNED_ORDER    = ME->S_PLAF-PLNUM
        ORDER_TYPE       = IF_AUFART
        ORDER_NUMBER     = IF_AUFNR
      importing
        PRODUCTION_ORDER = LF_AUFNR
        RETURN           = LS_BAPIRET2.

    if LS_BAPIRET2 is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

*** Commit Work
    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT   = ABAP_TRUE
      importing
        RETURN = LS_BAPIRET2.
    if LS_BAPIRET2 is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

*** Get Production Order
    if LF_AUFNR is not initial.
      RR_BOB_PRODORD = new #( IF_AUFNR         = LF_AUFNR
                              IS_ORDER_OBJECTS = IS_ORDER_OBJECTS
                              IF_WAIT          = 10 ).  "Wait up to 10 seconds for commit to be completed
    endif.

  endmethod.
  method CONV_TO_PRODORD_PARTIAL.

    data: LF_AUFNR type AUFNR.
    data: LS_BAPIRET2 type BAPIRET2.


*{   REPLACE        HEDK927942                                        1
*\    CL_FSH_PP_FA=>CONVERT_PLND_TO_PROD_PARTIAL( exporting IV_PLNUM  = ME->S_PLAF-PLNUM
*\                                                          IV_QTY    = IF_GSMNG
*\                                                          IV_AUFART = IF_AUFART
*\                                                          IV_DEL    = ABAP_FALSE
*\                                                importing EV_AUFNR  = LF_AUFNR ).
       call function 'BAPI_PRODORD_CREATE_FROM_PLORD'
      exporting
        PLANNED_ORDER    = ME->S_PLAF-PLNUM
        ORDER_TYPE       = IF_AUFART
      importing
        PRODUCTION_ORDER = LF_AUFNR
        RETURN           = LS_BAPIRET2.

    if LS_BAPIRET2 is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.
*}   REPLACE

*** Commit Work
    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT   = ABAP_TRUE
      importing
        RETURN = LS_BAPIRET2.
    if LS_BAPIRET2 is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

*** Get Production Order
    if LF_AUFNR is not initial.
      RR_BOB_PRODORD = new #( IF_AUFNR         = LF_AUFNR
                              IS_ORDER_OBJECTS = IS_ORDER_OBJECTS
                              IF_WAIT          = 10 ).  "Wait up to 10 seconds for commit to be completed
    endif.

  endmethod.
  method CREATE.

    data: LF_PLNUM type PLNUM.
    data: LS_CM61O    type CM61O,
          LS_CM61S    type CM61S,
          LS_BAPIRET2 type BAPIRET2.


***--------------------------------------------------------------------------------------
*** Set control parameters
    LS_CM61O = value #( TRTYP = 'H'              "Create planned order
                        DARKX = ABAP_TRUE        "Dark
                        NODIA = ABAP_TRUE        "No dialog
                        AUTHO = ABAP_TRUE        "Authorization check
                        STPRE = 'HC'             "Create without posting
                        LOCKX = ABAP_TRUE        "Enqueue planned order
                        BAPIX = ABAP_TRUE        "Always set to BAPI
                      ).

    LS_CM61S = value #( FLG_SCHED = IF_TERMX     " Lead time scheduling (detailed planning)
                      ).

*** Scheduling of Planned Order using production dates
    if IS_MDSCT is supplied.
      LS_CM61S-PRSCH = ABAP_TRUE.
      LS_CM61S       = corresponding #( base ( LS_CM61S ) IS_MDSCT ).
    endif.

***--------------------------------------------------------------------------------------
*** Create Production Order
    call function 'MD_PLDORD_CREATE_W_COMP_BAPI'
      exporting
        EPLAF         = IS_PLAF
        PASCH         = IF_PASCH
        ECM61O        = LS_CM61O
        ECM61S        = LS_CM61S
      importing
        I_PLNUM       = LF_PLNUM
      exceptions
        ERROR_MESSAGE = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check LF_PLNUM is not initial.

*** Commit Work
    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT   = ABAP_TRUE
      importing
        RETURN = LS_BAPIRET2.
    if LS_BAPIRET2 is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

***--------------------------------------------------------------------------------------
*** Create Instance
    RR_BOB_PLNDORD = new #( IF_PLNUM = LF_PLNUM ).

  endmethod.
  method CREATE_SIMPLE.

    data: LS_PLAF  type PLAF.


*** Define Planned Order Header
    LS_PLAF = value #( MATNR = IF_PLMAT
                       PLWRK = IF_PLWRK
                       GSMNG = IF_GSMNG
                       PSTTR = IF_PSTTR
                       KDAUF = IF_KDAUF
                       KDPOS = IF_KDPOS ).

*** Call standard creation of Planned Order
    RR_BOB_PLNDORD = ZCL_VCXI_XCI_BOB_PLNDORD=>CREATE( IF_PASCH = cond #( when IF_KDAUF is not initial then 'KD'      "Make-to-Order
                                                                                                       else 'LA' )    "Make-to-Stock
                                                       IS_PLAF  = LS_PLAF ).

  endmethod.
  method DELETE.

    data: LS_BAPIRET2 type BAPIRET2.


*** Delete Planned Order
    call function 'MD_PLDORD_DELETE_BAPI'
      exporting
        IV_PLNUM      = ME->S_PLAF-PLNUM
      exceptions
        ERROR_MESSAGE = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Commit Work
    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT   = ABAP_TRUE
      importing
        RETURN = LS_BAPIRET2.
    if LS_BAPIRET2 is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

  endmethod.
  method DEQUEUE.

    call function 'DEQUEUE_EMPLAFE'
      exporting
        MANDT = SY-MANDT
        PLNUM = ME->S_PLAF-PLNUM.

  endmethod.
  method DISPLAY.

    call function 'MD_PLANNED_ORDER_SHOW'
      exporting
        EPLAF         = ME->S_PLAF
      exceptions
        ERROR_MESSAGE = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method ENQUEUE.

*** Lock Planned Order
    call function 'ENQUEUE_EMPLAFE'
      exporting
        MANDT          = SY-MANDT
        PLNUM          = ME->S_PLAF-PLNUM
        _WAIT          = ABAP_TRUE
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        others         = 3.

    if SY-SUBRC is not initial.
***   Planned order & is blocked by user &
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = '61'
                                                      IF_MSGNO = '120'
                                                      IF_MSGV1 = ME->S_PLAF-PLNUM
                                                      IF_MSGV2 = SY-MSGV1
                                                      IF_TEMP  = ABAP_TRUE ).
    endif.

  endmethod.
  method EXPLODE_BOM.

    data: LF_SELID type AF61Z-SELID.
    data: LS_T415S type T415S,
          LS_T399D type T399D,
          LS_CM61M type CM61M,
          LS_MT61D type MT61D.


***--------------------------------------------------------------------------------------
*** Check BOM status
    if ME->S_PLAF-STSTA is not initial.
      call function 'T415S_READ'
        exporting
          STLST    = ME->S_PLAF-STSTA
        importing
          STRUCT   = LS_T415S
        exceptions
          NO_ENTRY = 1.
      if SY-SUBRC ne 0 or
***      BOM explosion not allowed for orders
         LS_T415S-KZAUF is initial or
***      BOM explosion not allowed for planned orders
         LS_T415S-KZBDP is initial.
        exit.
      endif.
    endif.

    if ME->S_PLAF-VERID is not initial and
       ME->S_PLAF-STALT is initial.
***   Planned order was created when BOM status was locked in OS23
      exit.
    endif.

*** Get Control Parameters for MRP
    call function 'CO_TA_T399D_READ'
      exporting
        WERKS_IMP = ME->S_PLAF-PLWRK
      importing
        T399DWA   = LS_T399D.

*** Get MRP Material Master
    call function 'MD_READ_MATERIAL'
      exporting
        EWERKS = ME->S_PLAF-PLWRK
        EMATNR = ME->S_PLAF-MATNR
      importing
        IMT61D = LS_MT61D.

***--------------------------------------------------------------------------------------
*** Explode BOM
    call function 'MD_AUFLOESUNG_PLANAUFTRAG'
      exporting
        ECM61M        = LS_CM61M
        EMT61D        = LS_MT61D
        EPLAF         = ME->S_PLAF
        ESELID        = LF_SELID
      importing
        IPLAF         = ME->S_PLAF
      tables
        MDPMX         = ME->T_MDPM
      exceptions
        ERROR_MESSAGE = 9.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
