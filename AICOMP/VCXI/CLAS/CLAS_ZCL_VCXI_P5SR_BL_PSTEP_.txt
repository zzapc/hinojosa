
class ZCL_VCXI_P5SR_BL_PSTEP definition
  public
  inheriting from ZCL_VCXI_PXSR_BL_PSTEP
  create public .

public section.

  data T_QFACT type ZVCXI_PXSR_TT_QFACT .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
protected section.

  methods GET_CRDII
    returning
      value(RT_CRDII) type ZVCXI_PXS_TT_CRDII
    exceptions
      /VCXI/CX_CKX .
  methods GET_RLDIM_IN
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RT_RLDIM) type ZVCXI_P5SP_TT_RLDIM
    raising
      /VCXI/CX_CKX .
  methods GET_RLDIM_OUT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RT_RLDIM) type ZVCXI_P5SP_TT_RLDIM
    raising
      /VCXI/CX_CKX .
  methods GET_WIDIM_OUT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RT_WIDIM) type ZVCXI_PXS_TT_WIDIM
    raising
      /VCXI/CX_CKX .

  methods GET_XML_DREF
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SR_BL_PSTEP definition
class ZCL_VCXI_P5SR_BL_PSTEP implementation.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type /VCXI/VSMC_LDUOM,
          LF_LDVAL type /VCXI/VSMR_LDVAL.
    data: LI_LVVAL type /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE type /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
*{   INSERT         HEDK927906                                        3
    DATA: LR_RHNDL TYPE REF TO ZIF_VCXI_PXSR_RHNDL.
*}   INSERT


    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***----------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***----------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Roll Target Diameter (Outbound)
        when 'PX_LT_DO_RDITA'.
*{   REPLACE        HEDK927906                                        1
*\          if ME is instance of ZIF_VCXI_PXSR_RHNDL.
         TRY .
            LR_RHNDL ?= ME.
         CATCH CX_SY_MOVE_CAST_ERROR..
         ENDTRY.
          if LR_RHNDL IS BOUND.
*}   REPLACE
***         Sending Multiple Dimension Limit Check
            loop at cast ZIF_VCXI_PXSR_RHNDL( ME )->T_RHNDL into data(LS_RHNDL).
***           Add each value entry as limit value
              IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                          IF_LDVAL = conv #( LS_RHNDL-RDITA )
                                          IF_LDUOM = LS_RHNDL-RDITA_UOM ).
            endloop.
          endif.
          continue.

***     Core Inner Diameter (Outbound)
        when 'PX_LT_DO_CRDII'.
*{   REPLACE        HEDK927906                                        2
*\          if ME is instance of ZIF_VCXI_PXSR_RHNDL.
          TRY .
            LR_RHNDL ?= ME.
         CATCH CX_SY_MOVE_CAST_ERROR..
         ENDTRY.
          if LR_RHNDL IS BOUND..
*}   REPLACE
***         Sending Multiple Dimension Limit Check
            loop at ME->GET_CRDII( ) into data(LS_CRDII).
***           Add each value entry as limit value
              IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                          IF_LDVAL = conv #( LS_CRDII-CRDII )
                                          IF_LDUOM = LS_CRDII-CRDII_UOM ).
            endloop.
          endif.
          continue.

        when others.
          continue.
      endcase.


***----------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method GET_CRDII.

    data: LT_MATNR type table of MATNR.


*** Get used Core Materials
    loop at cast ZIF_VCXI_PXSR_RHNDL( ME )->T_RHNDL into data(LS_RHNDL).
      collect LS_RHNDL-MATNR into LT_MATNR.
    endloop.

*** Get Inner Core Diameter of Core Material
    loop at LT_MATNR into data(LF_MATNR).
      try.
          data(LR_CUST_CORE) = ZCL_VCXI_PXSS_CUST_CORE=>GET_INSTANCE_CORE( IF_MATNR = LF_MATNR
                                                                           IF_WERKS = SPACE
                                                                           IF_DATE  = ME->F_DATE ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          continue.
      endtry.
      check LR_CUST_CORE is bound.

      collect LR_CUST_CORE->S_CRDII into RT_CRDII.
    endloop.

  endmethod.
  method GET_RLDIM_IN.

    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Process Inbound Provider
*{   REPLACE        HEDK927906                                        1
*\    loop at IT_PRVDR into LR_GATE
*\                    where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_P5SS_COMM_PREV.
    DATA LR_COMM TYPE REF TO ZIF_VCXI_P5SS_COMM_PREV.
    loop at IT_PRVDR into LR_GATE.
      TRY .
        LR_COMM ?= LR_GATE.
      catch CX_SY_MOVE_CAST_ERROR.
        CONTINUE.
      ENDTRY.
*}   REPLACE

***   Add Roll Dimension
      append value #( S_WEBWI  = cast ZIF_VCXI_P5SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_WEBWI( )
                      S_SURWT  = cast ZIF_VCXI_P5SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_SURWT( )
                      NOUPS    = cast ZIF_VCXI_P5SS_COMM_PREV( LR_GATE->R_CLSPR )->GET_NOUPS( )
                      NOOUT     = '1'
                    ) to RT_RLDIM.
    endloop.

  endmethod.
  method GET_RLDIM_OUT.

    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Process Outbound Provider
*{   REPLACE        HEDK927906                                        1
*\    loop at IT_PRVDR into LR_GATE
*\                    where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_P5SS_COMM_NEXT.
     DATA LR_COMM TYPE REF TO ZIF_VCXI_P5SS_COMM_NEXT.

    loop at IT_PRVDR into LR_GATE.
      TRY .
        LR_COMM ?= LR_GATE->R_CLSPR.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
      ENDTRY.
*}   REPLACE

***   Add Roll Dimension
      append value #( S_WEBWI  = cast ZIF_VCXI_P5SS_COMM_NEXT( LR_GATE->R_CLSPR )->GET_WEBWI( )
                      S_SURWT  = cast ZIF_VCXI_P5SS_COMM_NEXT( LR_GATE->R_CLSPR )->GET_SURWT( )
                      NOUPS    = cast ZIF_VCXI_P5SS_COMM_NEXT( LR_GATE->R_CLSPR )->GET_NOUPS( )
                      NOOUT     = '1'
                    ) to RT_RLDIM.
    endloop.

  endmethod.
  method GET_SPVRE_MF.

***--------------------------------------------------------------------------------------
*** Add MFSI (Length)
    if CF_MFI ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSI_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFI.
    endif.

***--------------------------------------------------------------------------------------
*** Add MFSO (Length)
    if CF_MFO ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSO_L( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFO.
    endif.

  endmethod.
  method GET_WIDIM_OUT.

    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Process Outbound Provider
*{   REPLACE        HEDK927906                                        1
*\    loop at IT_PRVDR into LR_GATE
*\                    where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_P5SS_COMM_NEXT.
   DATA LR_COMM TYPE REF TO ZIF_VCXI_P5SS_COMM_NEXT.

    loop at IT_PRVDR into LR_GATE.
      TRY .
        LR_COMM ?= LR_GATE->R_CLSPR.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
      ENDTRY.
*}   REPLACE
*{   REPLACE        HEDK927906                                        2
*\      if LR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_WIDIM.
      DATA: LR_WIDIM TYPE REF TO ZIF_VCXI_PXSS_WIDIM.
       TRY.
           LR_WIDIM ?= LR_GATE->R_CLSPR.
       CATCH CX_SY_MOVE_CAST_ERROR.
       ENDTRY.
      if LR_WIDIM IS BOUND.
*}   REPLACE
***     Add Winding Dimension based on winding interface
        append value #( S_WIWID = cast ZIF_VCXI_PXSS_WIDIM( LR_GATE->R_CLSPR )->GET_WIWID( )
                        S_WITHI = cast ZIF_VCXI_PXSS_WIDIM( LR_GATE->R_CLSPR )->GET_WITHI( )
                        S_WISWG = cast ZIF_VCXI_PXSS_WIDIM( LR_GATE->R_CLSPR )->GET_WISWG( )
                      ) to RT_WIDIM.
      else.
***     Add Winding Dimension based on communication interface
        append value #( S_WIWID = corresponding #( cast ZIF_VCXI_P5SS_COMM_NEXT( LR_GATE->R_CLSPR )->GET_WEBWI( )
                                                   mapping WIWID     = WEBWI
                                                           WIWID_UOM = WEBWI_UOM )
                        S_WITHI = corresponding #( cast ZIF_VCXI_P5SS_COMM_NEXT( LR_GATE->R_CLSPR )->GET_RLFPX( )->S_CALIP
                                                   mapping WITHI     = CALIP
                                                           WITHI_UOM = CALIP_UOM )
                        S_WISWG = corresponding #( cast ZIF_VCXI_P5SS_COMM_NEXT( LR_GATE->R_CLSPR )->GET_SURWT( )
                                                   mapping WISWG     = SURWT
                                                           WISWG_UOM = SURWT_UOM )
                      ) to RT_WIDIM.
      endif.
    endloop.

  endmethod.
  method GET_XML_DREF.

*** Super References
    RT_DATA = SUPER->GET_XML_DREF( ).

*** Add additional References
    append value #( NAME = 'T_QFACT'   VALUE = ref #( ME->T_QFACT ) ) to RT_DATA.

  endmethod.
