*&---------------------------------------------------------------------*
*& Report ZVCXI_XCE_MM_TOOL_BLCK_DMG
*&---------------------------------------------------------------------*
*& External/Internal Repair of Tool with or w/o Sales Order
*&---------------------------------------------------------------------*
report ZVCXI_XCE_MM_TOOL_BLCK_DMG.

types:
  begin of YS_COND,
    TPRCE       type KBETR,
    TPRCE_KSTAR type KSCHL,
    TDISC       type KBETR,
    TDISC_KSTAR type KSCHL,
  end of YS_COND .

data: LF_NO_SALES_ORDER_FOUND        type ABAP_BOOL value ABAP_FALSE,
      LF_NO_ENTRY_IN_MANDATORY_FIELD type ABAP_BOOL value ABAP_FALSE,
      LF_XCHPF                       type XCHPF,
      LF_DISCOUNT_CORRECTION         type KBETR value 0.

data: LS_COND type YS_COND.

data: GR_CX_CKX   type ref to /VCXI/CX_CKX.

selection-screen begin of block SEL with frame.
  parameters: PA_MATNR type MATNR   obligatory,
              PA_WERKS type WERKS_D obligatory,
              PA_CHARG type CHARG_D obligatory matchcode object MCH1.
selection-screen end of block SEL.

parameters: PA_VDATU type EDATU_VBAK.

selection-screen begin of block TYP with frame.
  parameters: PA_IREPA type ABAP_BOOL radiobutton group TYP default 'X' user-command TYP,
              PA_EREPA type ABAP_BOOL radiobutton group TYP,
              PA_REORD type ABAP_BOOL radiobutton group TYP,
              PA_SCRAP type ABAP_BOOL radiobutton group TYP.
selection-screen end of block TYP.

selection-screen begin of block SO with frame.
  parameters: PA_WSO type ABAP_BOOL radiobutton group SO default 'X' user-command SO.
  parameters: PA_NSO type ABAP_BOOL radiobutton group SO.
  parameters: PA_TPRCE type ZVCXI_XCS_S_TPRCE-TPRCE,
              PA_YRA1  type KBETR.
selection-screen end of block SO.

selection-screen begin of block PO with frame.
  parameters: PA_EKORG type EKORG modif id PO,
              PA_LIFNR type LIFNR modif id PO,
              PA_NETPR type BPREI modif id PO,
              PA_KOSTL type KOSTL modif id PO.
selection-screen end of block PO.


***----------------------------------------------------------------------------
*** I N I T I A L I Z A T I O N
***----------------------------------------------------------------------------
initialization.
  data(LR_BLCK_DMG) = new ZCL_VCXI_XCE_MM_TOOL_BLCK_DMG( ).
  data(LR_LIFETIME) = new ZCL_VCXI_XCE_MM_TOOL_LIFETIME( ).
  data(LR_MSG) = new /VCXI/CL_CKXM_MESSAGE( ).

***----------------------------------------------------------------------------
*** A T   S E L E C T I O N - S C R E E N   O U T P U T
***----------------------------------------------------------------------------
at selection-screen output.

  try.
      if PA_MATNR is not initial and
         PA_WERKS is not initial and
         PA_REORD eq ABAP_TRUE.
***     Get Last Order
        data(LR_BOB_SDOC_SEL) = LR_LIFETIME->GET_LAST_ORDER( IF_MATNR = PA_MATNR
                                                             IF_WERKS = PA_WERKS ).
***     Load Condition Records
        LS_COND = LR_LIFETIME->GET_COND( IF_MATNR = PA_MATNR
                                         IF_WERKS = PA_WERKS
                                         IR_BOB_SDOC = LR_BOB_SDOC_SEL ).
***     If a discount was found, keep it for correction later
        if PA_YRA1 is not initial.
          LF_DISCOUNT_CORRECTION = LS_COND-TDISC / 10.
        endif.
***     Do not overwrite user input!
        if PA_TPRCE is initial and PA_YRA1 is initial.
          PA_TPRCE = LS_COND-TPRCE.
          PA_YRA1 = LS_COND-TDISC / 10.
        endif.
      endif.

    catch /VCXI/CX_CKX into GR_CX_CKX.
      LF_NO_SALES_ORDER_FOUND = ABAP_TRUE.
  endtry.

  loop at screen.
*** If in Reorder Case then always with Sales Order
    if SCREEN-NAME cs 'PA_NSO'.
      if PA_REORD eq ABAP_TRUE.
        PA_NSO = ABAP_FALSE.
        PA_WSO = ABAP_TRUE.
        SCREEN-ACTIVE = 0.
      endif.
    endif.

*** If in Scrap Case then always w/o Sales Order
    if SCREEN-NAME cs 'PA_WSO'.
      if PA_SCRAP eq ABAP_TRUE.
        PA_WSO = ABAP_FALSE.
        PA_NSO = ABAP_TRUE.
        SCREEN-ACTIVE = 0.
      endif.
    endif.

*** Set Delivery Date as Mandatory if there is a SO or PO
    if SCREEN-NAME cs 'PA_VDATU'.
      if ( PA_WSO eq ABAP_TRUE and PA_SCRAP eq ABAP_FALSE ) or
         ( PA_EREPA eq ABAP_TRUE and PA_SCRAP eq ABAP_FALSE ) or
           PA_REORD eq ABAP_TRUE.
        SCREEN-REQUIRED = '2'.
      else.
        SCREEN-REQUIRED = '0'.
      endif.
    endif.

    if SCREEN-NAME cs 'PA_TPRCE'.
***   Hide if done w/o Sales Order
      if PA_WSO ne ABAP_TRUE.
        SCREEN-ACTIVE = 0.
        SCREEN-REQUIRED = '0'.
      else.
        SCREEN-REQUIRED = '2'.
      endif.
    endif.

    if SCREEN-NAME cs 'PA_YRA1'.
***   Hide if done w/o Sales Order
      if PA_WSO ne ABAP_TRUE.
        SCREEN-ACTIVE = 0.
      endif.
***   Hide also if in external/interal cases
      if PA_IREPA eq ABAP_TRUE or PA_EREPA eq ABAP_TRUE.
        SCREEN-ACTIVE = 0.
      endif.
    endif.

    if SCREEN-GROUP1 = 'PO'.
***   Hide if not done external
      if PA_EREPA ne ABAP_TRUE.
        SCREEN-ACTIVE = 0.
      endif.
    endif.

*** Set Cost Center as Mandatory
    if SCREEN-NAME cs 'PA_KOSTL'.
      SCREEN-REQUIRED = '2'.
    endif.

    modify screen.
  endloop.

at selection-screen.
*** Batch Managed?
  select single XCHPF
         from MARC
         into @LF_XCHPF
        where MATNR eq @PA_MATNR
         and  WERKS eq @PA_WERKS.
*** Define Delivery Date based on Material Master
  select single PLIFZ
     from MARC
    where MATNR eq @PA_MATNR
     and  WERKS eq @PA_WERKS
    into  @data(LF_PLIFZ) .
  if PA_VDATU is initial.
    PA_VDATU = SY-DATUM + LF_PLIFZ.
  endif.

***----------------------------------------------------------------------------
*** S T A R T - O F - S E L E C T I O N
***----------------------------------------------------------------------------
start-of-selection.
  try.
***   Check Mandatory Fields
      LF_NO_ENTRY_IN_MANDATORY_FIELD = ABAP_FALSE.
      if ( PA_WSO eq ABAP_TRUE and PA_VDATU is initial ) or
         ( PA_EREPA eq ABAP_TRUE and PA_VDATU is initial ) .
        LR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                             IF_MSGID = 'ZVCXI_XCE_MM'
                             IF_MSGNO = '21'
                             IF_MSGV1 = 'Requested Delivery Date' ).
        LF_NO_ENTRY_IN_MANDATORY_FIELD = ABAP_TRUE.
      endif.
      if PA_WSO eq ABAP_TRUE and PA_TPRCE is initial.
        LR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                             IF_MSGID = 'ZVCXI_XCE_MM'
                             IF_MSGNO = '21'
                             IF_MSGV1 = 'Tool Price' ).
        LF_NO_ENTRY_IN_MANDATORY_FIELD = ABAP_TRUE.
      endif.
      if PA_KOSTL is initial and PA_EREPA eq ABAP_TRUE.
        LR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                             IF_MSGID = 'ZVCXI_XCE_MM'
                             IF_MSGNO = '21'
                             IF_MSGV1 = 'Cost Center' ).
        LF_NO_ENTRY_IN_MANDATORY_FIELD = ABAP_TRUE.
      endif.
      if LF_XCHPF eq ABAP_FALSE.
        LR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                             IF_MSGID = 'ZVCXI_XCE_MM'
                             IF_MSGNO = '22' ).
        LF_NO_ENTRY_IN_MANDATORY_FIELD = ABAP_TRUE.
      endif.
      if LF_NO_SALES_ORDER_FOUND eq ABAP_TRUE and PA_REORD eq ABAP_TRUE.
***   No Sales Order found for Material &1 in Plant &2
        LR_MSG->ADD_MESSAGE( IF_MSGTY = 'E'
                             IF_MSGID = 'ZVCXI_XCE_MM'
                             IF_MSGNO = '019'
                             IF_MSGV1 = PA_MATNR
                             IF_MSGV2 = PA_WERKS ).
      endif.
      if LF_NO_ENTRY_IN_MANDATORY_FIELD eq ABAP_TRUE or
         LF_NO_SALES_ORDER_FOUND eq ABAP_TRUE.
        LR_MSG->DISPLAY_MSG( ).
        LF_NO_SALES_ORDER_FOUND = ABAP_FALSE.
        LF_NO_ENTRY_IN_MANDATORY_FIELD = ABAP_FALSE.
        exit.
      endif.

***   Type of Service
      case ABAP_TRUE.
        when PA_IREPA. "Int. Repair
          LR_BLCK_DMG->REPAIR_INTERNAL( exporting IT_REPAIR_INT = value #( ( MATNR         = PA_MATNR
                                                                             WERKS         = PA_WERKS
                                                                             CHARG         = PA_CHARG
                                                                             WSO_X         = PA_WSO
                                                                             VDATU         = PA_VDATU
                                                                             S_TPRCE-TPRCE = PA_TPRCE ) )
                                        changing  CR_MSG        = LR_MSG ).
        when PA_EREPA. "Ext. Repair
          LR_BLCK_DMG->REPAIR_EXTERNAL( exporting IT_REPAIR_EXT = value #( ( MATNR         = PA_MATNR
                                                                             WERKS         = PA_WERKS
                                                                             CHARG         = PA_CHARG
                                                                             WSO_X         = PA_WSO
                                                                             S_TPRCE-TPRCE = PA_TPRCE
                                                                             EKORG         = PA_EKORG
                                                                             LIFNR         = PA_LIFNR
                                                                             KOSTL         = PA_KOSTL
                                                                             BPREI         = PA_NETPR
                                                                             VDATU         = PA_VDATU  ) )
                                        changing  CR_MSG        = LR_MSG  ).
        when PA_REORD.
          LR_BLCK_DMG->REORDER( exporting IT_REORDER = value #( ( MATNR = PA_MATNR
                                                                  WERKS = PA_WERKS
                                                                  CHARG   = PA_CHARG
                                                                  VDATU = PA_VDATU
                                                                  TPRCE = PA_TPRCE
                                                                  TPRCE_KSTAR = LS_COND-TPRCE_KSTAR
                                                                  TDISC = PA_YRA1 - LF_DISCOUNT_CORRECTION
                                                                  TDISC_KSTAR = LS_COND-TDISC_KSTAR ) )
                                 changing CR_MSG     = LR_MSG ).
        when PA_SCRAP.
          LR_LIFETIME->SCRAP( exporting IT_SCRAP    = value #( ( MATNR   = PA_MATNR
                                                                 WERKS   = PA_WERKS
                                                                 CHARG   = PA_CHARG ) )
                               changing CR_MSG      = LR_MSG ).
      endcase.

      if LR_MSG is bound.
        LR_MSG->DISPLAY_MSG( ).
      endif.

    catch /VCXI/CX_CKX into GR_CX_CKX.
      GR_CX_CKX->SHOW_MESSAGE( ).
  endtry.
