*&---------------------------------------------------------------------*
*& Report ZVCXI_XCDC_EXTRACT
*&---------------------------------------------------------------------*
*& Create List Output for DVC Condition Definitions and Condition
*& Records, which can be used for a manual comparison with other
*& (remote) systems.
*&---------------------------------------------------------------------*
report ZVCXI_XCDC_EXTRACT line-size 255.

data: GF_ICODE type ZVCXI_XCD_ICODE,
      GF_ICORE type ZVCXI_XCD_ICORE.
data: LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
field-symbols: <I_RANGE> type TABLE.

select-options: SO_ICODE for GF_ICODE,
                SO_ICORE for GF_ICORE.

start-of-selection.
  try.
***   Get DVC Conditions
      data(LR_DVCCOND) = ZCL_VCXI_XCDC_DVCCOND=>GET_INSTANCE( ).

***------------------------------------------------------------------------------------------------
***   Get Condition Definition and Sorte them by ID
      data(LT_CONDDEF) = LR_DVCCOND->GET_CONDDEF( ).
      /VCXI/CL_CKX_SERVICE=>SORT_OBJECTS( exporting IF_SORT_BY_ID = ABAP_TRUE
                                          changing  CT_OBJECT     = LT_CONDDEF ).
      loop at LT_CONDDEF into LR_OBJECT.
        data(LR_CONDDEF) = cast ZCL_VCXI_XCDC_CONDDEF( LR_OBJECT ).

        check LR_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_ID( ) in SO_ICODE.

        format reset.
        data(LF_CONDDEF_ID)    = LR_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        data(LF_CONDDEF_DESCR) = LR_CONDDEF->/VCXI/IF_CKX_OBJECT~GET_DESCR( ).
        write: at / LF_CONDDEF_ID color col_heading intensified on,
                    LF_CONDDEF_DESCR.

        if LR_CONDDEF->R_REGDVC is bound.
          data(LF_REGDVC_ID) = LR_CONDDEF->R_REGDVC->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        endif.
        write: at /10 'Reg Element:', LF_REGDVC_ID intensified on.

        write: at /10 'Validation Criteria'.
        data(LT_CD_VALID) = LR_CONDDEF->T_CD_VALID.
        sort LT_CD_VALID.
        loop at LT_CD_VALID into data(LS_CD_VALID).
          format intensified on.
          write: at /20 LS_CD_VALID-CMATN, LS_CD_VALID-PRFID, LS_CD_VALID-ICELM.
          format reset.
        endloop.

        write: at /10 'Condition Definition Value'.
        data(LT_CD_VALUE) = LR_CONDDEF->T_CD_VALUE.
        sort LT_CD_VALUE.
        loop at LT_CD_VALUE into data(LS_CD_VALUE).
          format intensified on.
          write: at /20 LS_CD_VALUE-ICOVA,
                        LS_CD_VALUE-DATEL,
                        LS_CD_VALUE-PAVAL_UOM,
                        LS_CD_VALUE-IEALI,
                        LS_CD_VALUE-FEXCO,
                        LS_CD_VALUE-PARID.
          format reset.
        endloop.

        write: at /10 'Condition Definition Exit'.
        data(LT_CD_EXIT) = LR_CONDDEF->T_CD_EXIT.
        sort LT_CD_EXIT.
        loop at LT_CD_EXIT into data(LS_CD_EXIT).
          format intensified on.
          write: at /20 LS_CD_EXIT-IEXIT,
                        LS_CD_EXIT-FNAME,
                        LS_CD_EXIT-SEXIT.
          format reset.
        endloop.

***------------------------------------------------------------------------------------------------
***     Condition Records
        data(LT_CONDREC) = LR_DVCCOND->GET_CONDREC( IR_CONDDEF = LR_CONDDEF ).
        /VCXI/CL_CKX_SERVICE=>SORT_OBJECTS( exporting IF_SORT_BY_ID = ABAP_TRUE
                                            changing  CT_OBJECT     = LT_CONDREC ).
        loop at LT_CONDREC into LR_OBJECT.
          data(LR_CONDREC) = cast ZCL_VCXI_XCDC_CONDREC( LR_OBJECT ).

          check LR_CONDREC->/VCXI/IF_CKX_OBJECT~GET_ID( ) in SO_ICORE.


          data(LF_CONDREC_ID)    = LR_CONDREC->/VCXI/IF_CKX_OBJECT~GET_ID( ).
          data(LF_CONDREC_DESCR) = LR_CONDREC->/VCXI/IF_CKX_OBJECT~GET_DESCR( ).
          write: / '------'.
          write: at / LF_CONDREC_ID color col_heading, LF_CONDREC_DESCR.

          write: at /10 'Condition Record Filter'.
          data(LT_CR_FILTER) = LR_CONDREC->T_CR_FILTER.
          sort LT_CR_FILTER.
          loop at LT_CR_FILTER into data(LS_CR_FILTER).
            format intensified on.
            write: at /20 LS_CR_FILTER-GCRFI,
                          LS_CR_FILTER-CMATN,
                          LS_CR_FILTER-PRFID,
                          LS_CR_FILTER-ICELM,
                          LS_CR_FILTER-IEALI.
            format reset.
          endloop.

          write: at /10 'Condition Record Value'.
          data(LT_CR_VALUE) = LR_CONDREC->T_CR_VALUE.
          sort LT_CR_VALUE.
          loop at LT_CR_VALUE into data(LS_CR_VALUE).
            format intensified on.
            write: at /20 LS_CR_VALUE-ICOVA.
            if LS_CR_VALUE-R_RANGE is bound.
              assign LS_CR_VALUE-R_RANGE->* to <I_RANGE>.
              loop at <I_RANGE> assigning field-symbol(<S_RANGE>).
                assign component 'SIGN'   of structure <S_RANGE> to field-symbol(<F_SIGN>).
                assign component 'OPTION' of structure <S_RANGE> to field-symbol(<F_OPTION>).
                assign component 'LOW'    of structure <S_RANGE> to field-symbol(<F_LOW>).
                assign component 'HIGH'   of structure <S_RANGE> to field-symbol(<F_HIGH>).

                format intensified on.
                write: at /30 <F_SIGN>, <F_OPTION>, <F_LOW>, <F_HIGH>.
                format reset.
              endloop.
            endif.
            format reset.
          endloop.

          write: at /10 'Condition Record Exit'.
          loop at LR_CONDREC->T_CR_EXIT into data(LS_CR_EXIT).
            format intensified on.
            write: at /20 LS_CR_EXIT-IEXIT.
            format reset.
          endloop.

***       Tab 'Screen Impact'
          write: at /10 'Screen Impact' color col_normal.
          write: at /20 'Element In Use Option', LR_CONDREC->F_OELIU intensified on.

          write: at /20 'Condition Record Screen Impact'.
          data(LT_CR_SIMPACT) = LR_CONDREC->T_CR_SIMPACT.
          sort LT_CR_SIMPACT.
          loop at LT_CR_SIMPACT into data(LS_CR_SIMPACT).
            format intensified on.
            write: at /30 LS_CR_SIMPACT-ISCGR,
                          LS_CR_SIMPACT-SSCGR,
                          LS_CR_SIMPACT-OSVIS,
                          LS_CR_SIMPACT-OSOBL.
            format reset.
          endloop.


***       Tab 'Functions'
          write: at /10 'Functions' color col_normal.
          write: at /20 'Condition Record Function'.
          data(LT_CR_FUNCT) = LR_CONDREC->T_CR_FUNCT.
          sort LT_CR_FUNCT.
          loop at LT_CR_FUNCT into data(LS_CR_FUNCT).
            format intensified on.
            write: at /30 LS_CR_FUNCT-IFUNC,
                          LS_CR_FUNCT-FUNAC.
            format reset.
          endloop.


***       Tab 'Defaults'
          write: at /10 'Defaults' color col_normal.
          write: at /20 'Condition Record Default Value'.
          data(LT_CR_DVALUE) = LR_CONDREC->T_CR_DVALUE.
          sort LT_CR_DVALUE.
          loop at LT_CR_DVALUE into data(LS_CR_DVALUE).
            format intensified on.
            write: at /30 LS_CR_DVALUE-PARID,
                          LS_CR_DVALUE-PAVAL,
                          LS_CR_DVALUE-IEXIT,
                          LS_CR_DVALUE-OVRRH.
            format reset.
          endloop.

          write: at /20 'Condition Record Default Exit'.
          data(LT_CR_DEXIT) = LR_CONDREC->T_CR_DEXIT.
          sort LT_CR_DEXIT.
          loop at LT_CR_DEXIT into data(LS_CR_DEXIT).
            format intensified on.
            write: at /30 LS_CR_DEXIT-IEXIT.
            format reset.
          endloop.

        endloop.

        write / SY-ULINE.
      endloop.

    catch /VCXI/CX_CKX into data(GR_CX_CKX).
      GR_CX_CKX->SHOW_MESSAGE( ).
  endtry.
