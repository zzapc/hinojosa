FUNCTION zhp_vcxi_p1ss_maktx_crcono.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(IR_GATE) TYPE REF TO  /VCXI/CL_VKSR_GATE
*"  EXPORTING
*"     REFERENCE(EF_MAKTX) TYPE  MAKTX
*"  RAISING
*"      /VCXI/CX_CKX
*"----------------------------------------------------------------------
*{   INSERT         HEDK930081                                        1
  DATA: lf_fefco  TYPE zvcxi_pcs_fefco,
        lf_saboa  TYPE zvcxi_pcss_saboa,
        lf_prodim TYPE string.
  DATA: ls_shtle TYPE zvcxi_p0ss_s_shtle,
        ls_shtwi TYPE zvcxi_p0ss_s_shtwi.
  DATA: lr_pr_crcono  TYPE REF TO zcl_vcxi_p1ss_pr_crcono,
        lr_bl_crbprop TYPE REF TO zcl_vcxi_p1ss_bl_crbprop,
        lr_bl_crfprop TYPE REF TO zcl_vcxi_p1ss_bl_crfprop.


  TRY.
      CHECK ir_gate IS BOUND.
      CAST zcl_vcxi_p1ss_pr_crcono( ir_gate->r_clspr ).
    CATCH cx_sy_move_cast_error.
      EXIT.
  ENDTRY.
  lr_pr_crcono ?= ir_gate->r_clspr.

*** Collect Information
  lr_bl_crbprop = lr_pr_crcono->zif_vcxi_p1ss_comm_next~get_crbpx( ).
  lr_bl_crfprop = lr_pr_crcono->zif_vcxi_p1ss_comm_next~get_crfpx( ).
  lf_fefco = lr_bl_crbprop->f_fefco.
  lf_saboa = lr_bl_crfprop->f_saboa.

*** Build Product Dimension
  CASE lf_fefco.
    WHEN '0110' or '0111' or '0112' or '113'.
      lr_bl_crbprop->get_shtdim( IMPORTING es_shtle = ls_shtle
                                           es_shtwi = ls_shtwi ).
      lf_prodim = |{ ls_shtwi-shtwi NUMBER = ENVIRONMENT DECIMALS = 0 }x| &&
                  |{ ls_shtle-shtle NUMBER = ENVIRONMENT DECIMALS = 0 }|.
    WHEN OTHERS.
      lf_prodim = |{ lr_bl_crbprop->s_prodim-prole NUMBER = ENVIRONMENT DECIMALS = 0 }x| &&
                  |{ lr_bl_crbprop->s_prodim-prowi NUMBER = ENVIRONMENT DECIMALS = 0 }x| &&
                  |{ lr_bl_crbprop->s_prodim-prohe NUMBER = ENVIRONMENT DECIMALS = 0 }|.
  ENDCASE.

*** Build Description e.g  "0201 (300x250x200) B_02455_S"
  ef_maktx = |{ lf_fefco } ({ lf_prodim }) { lf_saboa }|.

* Si miramos transacción SmartVC Customizing (/VCXI/SVCC), como estamos en Specification/Conversión/Printing...
* Navegamos primero al padre (Specification)
  DATA(lt_gate_spec) = ir_gate->get_prvdr( if_iprvt = 'ZVCXI_PXSS_SPEC'
                                if_inuse = abap_true ).
  CHECK lt_gate_spec IS NOT INITIAL.

* De ahi, buscamos los provides que nos permiten navegar al Output
  DATA(lr_gate_spec) = lt_gate_spec[ 1 ].
  DATA(lt_gate_xcomp) = lr_gate_spec->get_prvdr( if_iprvt = 'ZVCXI_PXSS_XCOMP'
                                              if_inuse = abap_true ).
  DATA(lr_gate_xcomp) = lt_gate_xcomp[ 1 ].

  DATA(lt_gate_sov) = lr_gate_xcomp->get_prvdr( if_iprvt = 'ZVCXI_PXSS_SOV'
                                            if_inuse = abap_true ).

  DATA(lr_gate_sov) = lt_gate_sov[ 1 ].

  DATA(lt_gate_fg) = lr_gate_sov->get_prvdr( if_iprvt = 'ZVCXI_PXSS_FG'
                                            if_inuse = abap_true ).

  DATA: l_fg    TYPE REF TO ycl_hp_svcs_pr_cfg,
        l_kdptx TYPE yhp_svcs_s_fdi_cfg-kdptx.
  FIELD-SYMBOLS <fdata> TYPE yhp_svcs_s_fdi_cfg.
  LOOP AT lt_gate_fg ASSIGNING FIELD-SYMBOL(<gate_fg>).
    TRY.
        l_fg ?= <gate_fg>->r_clspr.
        IF sy-subrc = 0.
          DATA(l_fdata) = l_fg->zif_vcxi_pxss_fdi~get_data( ).
          IF sy-subrc = 0.
            ASSIGN l_fdata->* TO <fdata>.
            IF sy-subrc = 0.
              l_kdptx = <fdata>-kdptx.
            ENDIF.
          ENDIF..
        ENDIF.
      CATCH cx_root INTO DATA(o_root).
    ENDTRY.
    IF NOT l_kdptx IS INITIAL.
      EXIT.
    ENDIF.
  ENDLOOP.

  IF NOT l_kdptx IS INITIAL.
    ef_maktx = |{ ef_maktx }/{ l_kdptx }|.
  ENDIF.

*}   INSERT
ENDFUNCTION.
