FUNCTION zhp_vcxi_pxss_altuom_surfac.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(IR_GATE) TYPE REF TO  /VCXI/CL_VKSR_GATE OPTIONAL
*"     REFERENCE(IR_MMEXT) TYPE REF TO  ZCL_VCXI_PXE_MM_MMEXT OPTIONAL
*"     REFERENCE(IF_LRMEI) TYPE  LRMEI
*"     REFERENCE(IS_CALCV_BASE) TYPE  ZVCXI_XCS_S_CALCV
*"  EXPORTING
*"     REFERENCE(ES_ALTUOM) TYPE  ZVCXI_PXSS_S_ALTUOM
*"  RAISING
*"      /VCXI/CX_CKX
*"----------------------------------------------------------------------
  DATA: ls_calcv TYPE zvcxi_xcs_s_calcv.
  DATA: lt_gate TYPE /vcxi/vksr_tt_gate.

  DATA lf_cuobj TYPE cuobj.
  CALL FUNCTION 'CE_I_HAS_ACTUAL_INSTANCE'
    IMPORTING
      instance = lf_cuobj.
  IF NOT lf_cuobj IS INITIAL.
    DATA(l_m2) = NEW zhcl_sd_core( )->get_m2( cuobj = lf_cuobj ).
    IF NOT l_m2 IS INITIAL.
      es_altuom-lrmei = if_lrmei.
*** Consider Base Quantity
      SELECT SINGLE sblar_uom FROM yhp_idx_td100
        INTO @DATA(l_sblar_uom)
       WHERE cuobj = @lf_cuobj.
      zcl_vcxi_xcs_service_unit=>convert_unit( EXPORTING if_value_in  = l_m2 * is_calcv_base-calcv
                                                         if_uom_in    = l_sblar_uom
                                                        "La forzamos siempre a M2 porque la hemos definido como adimensional
                                                         if_uom_out   = 'M2' "ES_ALTUOM-LRMEI
                                               IMPORTING ef_value_out = ls_calcv-calcv
                                                         ef_uom_out   = ls_calcv-calcv_uom ).

*** Calculate UMREZ/UMREN
      zcl_vcxi_pxss_bl_altuom=>calc_umrez_umren( EXPORTING is_calcv_base = is_calcv_base
                                                           is_calcv_self = ls_calcv
                                                 IMPORTING ef_umrez      = es_altuom-umrez
                                                           ef_umren      = es_altuom-umren ).
    ENDIF.
  ENDIF.




****--------------------------------------------------------------------------------------
**** Get Area & Weight Provider
*  CHECK ir_gate IS BOUND.
*  lt_gate = ir_gate->get_prvdr( if_iprvt = zcl_vcxi_pxss_pr_area_wgt=>c_iprvt_px_area_wgt
*                                if_inuse = abap_true ).
*  CHECK lt_gate IS NOT INITIAL.
*  DATA ls_gate LIKE LINE OF lt_gate.
*  READ TABLE lt_gate INTO ls_gate INDEX 1.
*  DATA(lr_pr_area_wgt) = CAST zcl_vcxi_pxss_pr_area_wgt( ls_gate->r_clspr ).
*  CHECK lr_pr_area_wgt IS BOUND.
*
****--------------------------------------------------------------------------------------
*
**** Get Net Blank Area
*  INCLUDE zrvcxiconv_m2.
*
*** Clear Dimensions, so they're not transfered to Material Master
  CLEAR: es_altuom-laeng,
       es_altuom-breit,
       es_altuom-hoehe,
       es_altuom-meabm,
       es_altuom-brgew,
       es_altuom-gewei.

ENDFUNCTION.
