FUNCTION zhp_vcxi_pxss_maktx_desd.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(IR_GATE) TYPE REF TO  /VCXI/CL_VKSR_GATE
*"  EXPORTING
*"     REFERENCE(EF_MAKTX) TYPE  MAKTX
*"  RAISING
*"      /VCXI/CX_CKX
*"----------------------------------------------------------------------
*{   DELETE         HEDK928090                                        1
*\
*\  data: LF_TPRIN type ZVCXI_PXS_TPRIN,
*\        LF_NOCOL type ZVCXI_P0S_NOCOL.
*\  data: LR_PRINT type ref to ZIF_VCXI_PXSS_PRINT.
*\
*\
*\***--------------------------------------------------------------------------------------
*\*** Get Printing Information
*\*{   REPLACE        HEDK918894                                        1
*\*\  check IR_GATE is bound and
*\*\        IR_GATE->R_CLSPR is instance of ZIF_VCXI_PXSS_PRINT.
*\  try.
*\    check IR_GATE is bound.
*\    cast ZIF_VCXI_PXSS_PRINT( IR_GATE->R_CLSPR ).
*\  catch CX_SY_MOVE_CAST_ERROR.
*\    exit.
*\  endtry.
*\*}   REPLACE
*\  LR_PRINT ?= IR_GATE->R_CLSPR.
*\
*\  LF_TPRIN = LR_PRINT->GET_TPRIN( ).
*\  LF_NOCOL = LR_PRINT->GET_NOCOL( ).
*\
*\***--------------------------------------------------------------------------------------
*\*** Build Description e.g  "FLEXO with 3 Inks"
*\  EF_MAKTX = '&1 con &2 Tintas'(001).
*\  replace '&1' with LF_TPRIN into EF_MAKTX.
*\  replace '&2' with LF_NOCOL into EF_MAKTX.
*\  condense EF_MAKTX.
*}   DELETE
*{   INSERT         HEDK928090                                        2

**********************************************************************
* LOCAL PARAMS
**********************************************************************

****** OO

  DATA: lr_bl_crbprop TYPE REF TO zcl_vcxi_p1ss_bl_crbprop,
        lr_bl_crfprop TYPE REF TO zcl_vcxi_p1ss_bl_crfprop.

****** VBLES

  DATA: lv_prsty         TYPE zvcxi_p0ss_prsty,
        lv_prsty_txt(15) TYPE c,
        lv_prole         TYPE zvcxi_p0s_prole,
        lv_prole_txt(15) TYPE c,
        lv_prowi         TYPE zvcxi_p0s_prowi,
        lv_prowi_txt(15) TYPE c,
        lv_prohe         TYPE zvcxi_p0s_prohe,
        lv_prohe_txt(15) TYPE c,
        lv_flute         TYPE zvcxi_pcs_flute,
        lv_flute_txt(15) TYPE c,
        lv_value_e(9)    TYPE c,
        lv_value_d(4)    TYPE c,
        lf_tprin         TYPE zvcxi_pxs_tprin,
        lf_nocol         TYPE zvcxi_p0s_nocol.

**********************************************************************
* CHECKS
**********************************************************************

****** IMPORT DATA

  TRY.
      CHECK ir_gate IS BOUND.
      CAST ycl_hp_svcs_pr_cstep_print( ir_gate->r_clspr ).
    CATCH cx_sy_move_cast_error.
      EXIT.
  ENDTRY.

**********************************************************************
* LOGIC
**********************************************************************

****** GET

***--------------------------------------------------------------------------------------
*** Get Printing Information
  lf_tprin = CAST ycl_hp_svcs_pr_cstep_print( ir_gate->r_clspr )->zif_vcxi_pxss_print~get_tprin( ).
  lf_nocol = CAST ycl_hp_svcs_pr_cstep_print( ir_gate->r_clspr )->zif_vcxi_pxss_print~get_nocol( ).

***--------------------------------------------------------------------------------------
*** Get Backward Properties
  lr_bl_crbprop ?= CAST ycl_hp_svcs_pr_cstep_print( ir_gate->r_clspr )->zif_vcxi_p1ss_comm_next~get_crbpx( ).
  CHECK lr_bl_crbprop IS BOUND.

  lv_prsty = lr_bl_crbprop->f_fefco.
  lv_prole = lr_bl_crbprop->s_prodim-prole.
  lv_prowi = lr_bl_crbprop->s_prodim-prowi.
  lv_prohe = lr_bl_crbprop->s_prodim-prohe.

***--------------------------------------------------------------------------------------
*** Get Forward Properties
  lr_bl_crfprop ?= CAST ycl_hp_svcs_pr_cstep_print( ir_gate->r_clspr )->zif_vcxi_p1ss_comm_next~get_crfpx( ).
  CHECK lr_bl_crfprop IS BOUND.

  lv_flute = lr_bl_crfprop->f_flute.

****--------------------------------------------------------------------------------------
**** Build Description e.g  "0201/325x300x200/BC"

  "FEFCO
  MOVE lv_prsty TO lv_prsty_txt.
  CONDENSE lv_prsty_txt.

  "PROLE
  CLEAR: lv_value_e, lv_value_d.
  MOVE lv_prole TO lv_prole_txt.
  SPLIT lv_prole_txt AT '.' INTO lv_value_e lv_value_d.
  CLEAR lv_prole_txt.
  MOVE lv_value_e TO lv_prole_txt.
  CONDENSE lv_prole_txt.

  "PROWI
  CLEAR: lv_value_e, lv_value_d.
  MOVE lv_prowi TO lv_prowi_txt.
  SPLIT lv_prowi_txt AT '.' INTO lv_value_e lv_value_d.
  CLEAR lv_prowi_txt.
  MOVE lv_value_e TO lv_prowi_txt.
  CONDENSE lv_prowi_txt.

  "PROHE
  CLEAR: lv_value_e, lv_value_d.
  MOVE lv_prohe TO lv_prohe_txt.
  SPLIT lv_prohe_txt AT '.' INTO lv_value_e lv_value_d.
  CLEAR lv_prohe_txt.
  MOVE lv_value_e TO lv_prohe_txt.
  CONDENSE lv_prohe_txt.

  "FLUTE
  MOVE lv_flute TO lv_flute_txt.
  CONDENSE lv_prsty_txt.

  ef_maktx = |{ lf_tprin } { lf_nocol } tintas/{ lv_prsty_txt }/{ lv_prole_txt }x{ lv_prowi_txt }x{ lv_prohe_txt }/{ lv_flute_txt }|.



* Si miramos transacción SmartVC Customizing (/VCXI/SVCC), como estamos en Specification/Conversión/Printing...
* Navegamos primero al padre (Specification)
  DATA(lt_gate_spec) = ir_gate->get_prvdr( if_iprvt = 'ZVCXI_PXSS_SPEC'
                                if_inuse = abap_true ).
  CHECK lt_gate_spec IS NOT INITIAL.

* De ahi, buscamos los provides que nos permiten navegar al Output
  DATA(lr_gate_spec) = lt_gate_spec[ 1 ].
  DATA(lt_gate_ui) = lr_gate_spec->get_prvdr( if_iprvt = 'ZVCXI_XCS_ANY_WITH_UI'
                                              if_inuse = abap_true ).
  CHECK lt_gate_ui IS NOT INITIAL.

  LOOP AT lt_gate_ui ASSIGNING FIELD-SYMBOL(<gate_ui>).
    IF <gate_ui>->get_clsui( ) = 'ZCL_VCXI_P1SS_UI_OUTPUT'.
      DATA(lt_gate_cfg) = <gate_ui>->get_prvdr( if_iprvt = 'ZVCXI_P1SS_CFG'
                                     if_inuse = abap_true ).
      EXIT.
    ENDIF.
  ENDLOOP.
  CHECK lt_gate_cfg IS NOT INITIAL.

* Y aqui ya cogemos el provider que realmente tiene los datos que queremos ver (CFG)
  DATA l_cfg TYPE REF TO ycl_hp_svcs_pr_cfg.
  DATA(lr_gate_cfg) = lt_gate_cfg[ 1 ].
  l_cfg ?= lr_gate_cfg->r_clspr.

* Una vez lo tenemos recuperamos la descripción del material
  FIELD-SYMBOLS <fdata> TYPE yhp_svcs_s_fdi_cfg.
  DATA(l_fdata) = l_cfg->zif_vcxi_pxss_fdi~get_data( ).
  CHECK sy-subrc = 0.
  ASSIGN l_fdata->* TO <fdata>.
  CHECK sy-subrc = 0.
  CHECK <fdata>-kdptx  NE ''.

* En digital no queremos las tintas
  IF lf_tprin = 'DIGITAL'.
    ef_maktx = |{ lf_tprin }/{ lv_prsty_txt }/{ <fdata>-kdptx }|.
  ELSE.
    ef_maktx = |{ lf_tprin } { lf_nocol } tintas/{ lv_prsty_txt }/{ <fdata>-kdptx }|.
  ENDIF.


ENDFUNCTION.
