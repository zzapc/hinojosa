
class ZLE_SHP_WS_MONITOR_OUTP_LIST definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_LE_SHP_WS_MONITOR_OUTP_LIST .
protected section.
private section.
endclass. "ZLE_SHP_WS_MONITOR_OUTP_LIST definition
class ZLE_SHP_WS_MONITOR_OUTP_LIST implementation.
METHOD if_le_shp_ws_monitor_outp_list~output_delivery_list_head.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_shipment_cdata TYPE zshipment_s_data.

**********************************************************************
* Lógica
**********************************************************************

  LOOP AT ct_postab INTO DATA(ls_postab).

    CLEAR: ls_shipment_cdata.


*** Chequeos

    IF ls_postab-vbeln IS NOT INITIAL AND ls_postab-posnr IS INITIAL.

*** Obtenemos datos

      CALL FUNCTION 'ZFM_SD_GET_SHP_CDATA'
        EXPORTING
          i_vbeln           = ls_postab-vbeln
*         I_POSNR           =
        IMPORTING
          e_shipment_s_data = ls_shipment_cdata
        EXCEPTIONS
          no_valid_iparams  = 1
          no_valid_itype    = 2
          OTHERS            = 3.

      IF ( sy-subrc EQ 0 ).
        MOVE-CORRESPONDING ls_shipment_cdata TO ls_postab.
      ENDIF.

    ENDIF.

*** Guardamos cambios en posición

    SELECT SINGLE vgbel, vgpos INTO @DATA(l_pos) FROM lips WHERE vbeln = @ls_postab-vbeln AND posnr = @ls_postab-posnr.

    CASE sy-tcode.
      WHEN 'VL10X'.
*       add jtm 15.11.2022
        SELECT SINGLE lgnum INTO @DATA(lgnum) FROM t320 WHERE werks EQ @ls_postab-werks.
        IF lgnum IS NOT INITIAL.
          CALL FUNCTION 'ZSWM_CALCULO_STOCK_DISPONIBLE'
            EXPORTING
              lgnum         = lgnum
              matnr         = ls_postab-matnr
              werks         = ls_postab-werks
            IMPORTING
              zzlasbt_stock = ls_postab-zzlasbt_stock.

        ELSE.
*       fin de add jtm 11.11.2022
          IF l_pos-vgbel IS INITIAL.
            SELECT SUM( kalab ) INTO @DATA(l_mska) FROM mska WHERE matnr = @ls_postab-matnr AND werks = @ls_postab-werks.
          ELSE.
            SELECT SUM( kalab ) INTO @l_mska FROM mska WHERE matnr = @ls_postab-matnr AND vbeln = @l_pos-vgbel AND posnr = @l_pos-vgpos AND werks = @ls_postab-werks.
          ENDIF.
          IF sy-subrc = 0 AND l_mska IS NOT INITIAL.
            ls_postab-zzlasbt_stock = l_mska.
          ELSE.
            SELECT SINGLE * INTO @DATA(l_mard) FROM mard WHERE matnr = @ls_postab-matnr AND werks = @ls_postab-werks.
            IF sy-subrc = 0.
              ls_postab-zzlasbt_stock = l_mard-labst.
            ENDIF.
          ENDIF.

        ENDIF. " add jtm 15.11.2022
      WHEN OTHERS.
*       add jtm 15.11.2022
        SELECT SINGLE lgnum INTO lgnum FROM t320 WHERE werks EQ ls_postab-werks.
        IF lgnum IS NOT INITIAL.
          CALL FUNCTION 'ZSWM_CALCULO_STOCK_DISPONIBLE'
            EXPORTING
              lgnum         = lgnum
              matnr         = ls_postab-matnr
              werks         = ls_postab-werks
            IMPORTING
              zzlasbt_stock = ls_postab-zzlasbt_stock.

        ELSE.
*       fin de add jtm 11.11.2022

          SELECT SINGLE kalab INTO @l_mska FROM mska WHERE matnr = @ls_postab-matnr AND vbeln = @l_pos-vgbel AND posnr = @l_pos-vgpos AND werks = @ls_postab-werks.
          IF sy-subrc = 0 AND l_mska IS NOT INITIAL.
            ls_postab-zzlasbt_stock = l_mska.
          ELSE.
            SELECT SINGLE * INTO l_mard FROM mard WHERE matnr = ls_postab-matnr AND werks = ls_postab-werks.
            IF sy-subrc = 0.
              ls_postab-zzlasbt_stock = l_mard-labst.
            ENDIF.
          ENDIF.
        ENDIF. " add jtm 15.11.2022
    ENDCASE.

*    IF sy-subrc = 0 AND l_mska IS NOT INITIAL.
*      ls_postab-zzlasbt_stock = l_mska.
*    ELSE.
*      SELECT SINGLE * INTO @DATA(l_mard) FROM mard WHERE matnr = @ls_postab-matnr AND werks = @ls_postab-werks.
*      IF sy-subrc = 0.
*        ls_postab-zzlasbt_stock = l_mard-labst.
*      ENDIF.
*    ENDIF.


    MODIFY ct_postab FROM ls_postab.

  ENDLOOP.




  IF ct_postab IS NOT INITIAL.
    SELECT kunnr, pstlz
      INTO TABLE @DATA(tl_kna1)
      FROM kna1
      FOR ALL ENTRIES IN @ct_postab
      WHERE kunnr = @ct_postab-kunnr.
  ENDIF.

  LOOP AT ct_postab ASSIGNING FIELD-SYMBOL(<fs_postab>).
    IF <fs_postab>-kunnr IS NOT INITIAL.
      READ TABLE tl_kna1 ASSIGNING FIELD-SYMBOL(<fs_kna1>) WITH KEY kunnr = <fs_postab>-kunnr.
      IF sy-subrc = 0.
        <fs_postab>-zzpstlz_dest_merc = <fs_kna1>-pstlz.
      ENDIF.
    ENDIF.
  ENDLOOP.






*  "JCB 15.02.24. GAPSD103 - Añadir campos en pantalla selección VL06O
*  FIELD-SYMBOLS <fs_tdlnr_rg> TYPE STANDARD TABLE.
*  FIELD-SYMBOLS <fs_sttrg_rg> TYPE STANDARD TABLE.
*  FIELD-SYMBOLS <fs_shtyp_rg> TYPE STANDARD TABLE.
*
*  ASSIGN ('(WS_MONITOR_OUTB_DEL_FREE)Z_TDLNR[]') TO <fs_tdlnr_rg>.
*  ASSIGN ('(WS_MONITOR_OUTB_DEL_FREE)Z_STTRG[]') TO <fs_sttrg_rg>.
*  ASSIGN ('(WS_MONITOR_OUTB_DEL_FREE)z_SHTYP[]') TO <fs_shtyp_rg>.
*
*
*
*
*
*  IF <fs_tdlnr_rg> IS ASSIGNED AND <fs_sttrg_rg> IS ASSIGNED AND ct_postab IS NOT INITIAL.
*    IF <fs_tdlnr_rg> IS NOT INITIAL OR <fs_sttrg_rg> IS NOT INITIAL OR <fs_shtyp_rg> IS NOT INITIAL.
*      SELECT vbelv, vbeln
*        INTO TABLE @DATA(tl_vbfa_transporte)
*        FROM vbfa
*        FOR ALL ENTRIES IN @ct_postab
*        WHERE vbelv = @ct_postab-vbeln AND
*              vbtyp_n = '8'            AND
*              vbtyp_v = 'J'.
*      IF tl_vbfa_transporte IS NOT INITIAL.
*        SELECT tknum, tdlnr, sttrg
*          INTO TABLE @DATA(tl_vttk)
*          FROM vttk
*          FOR ALL ENTRIES IN @tl_vbfa_transporte
*          WHERE tknum = @tl_vbfa_transporte-vbeln AND
*                tdlnr IN @<fs_tdlnr_rg>           AND
*                sttrg IN @<fs_sttrg_rg>           AND
*                shtyp IN @<fs_shtyp_rg>.
*      ENDIF.
*
*      LOOP AT ct_postab ASSIGNING FIELD-SYMBOL(<fs_postab>).
*        READ TABLE tl_vbfa_transporte ASSIGNING FIELD-SYMBOL(<fs_vbfa_transporte>) WITH KEY vbelv = <fs_postab>-vbeln.
*        IF sy-subrc = 0.
*          READ TABLE tl_vttk TRANSPORTING NO FIELDS WITH KEY tknum = <fs_vbfa_transporte>-vbeln.
*        ENDIF.
*        IF sy-subrc <> 0.
*          DELETE ct_postab. CONTINUE.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
*  ENDIF.
*
*
*
*
*IF ct_postab IS NOT INITIAL.
*    SELECT kunnr, pstlz
*      INTO TABLE @DATA(tl_kna1)
*      FROM kna1
*      FOR ALL ENTRIES IN @ct_postab
*      WHERE kunnr = @ct_postab-kunnr.
*  ENDIF.
*
*
*  LOOP AT ct_postab INTO DATA(ls_postab).
*
*    CLEAR: ls_shipment_cdata.
*
*
**** Chequeos
*
*    IF ls_postab-vbeln IS NOT INITIAL AND ls_postab-posnr IS INITIAL.
*
**** Obtenemos datos
*
*      CALL FUNCTION 'ZFM_SD_GET_SHP_CDATA'
*        EXPORTING
*          i_vbeln           = ls_postab-vbeln
**         I_POSNR           =
*        IMPORTING
*          e_shipment_s_data = ls_shipment_cdata
*        EXCEPTIONS
*          no_valid_iparams  = 1
*          no_valid_itype    = 2
*          OTHERS            = 3.
*
*      IF ( sy-subrc EQ 0 ).
*        MOVE-CORRESPONDING ls_shipment_cdata TO ls_postab.
*      ENDIF.
*
*    ENDIF.
*
**** Guardamos cambios en posición
*
*    SELECT SINGLE vgbel, vgpos INTO @DATA(l_pos) FROM lips WHERE vbeln = @ls_postab-vbeln AND posnr = @ls_postab-posnr.
*
*    CASE sy-tcode.
*      WHEN 'VL10X'.
**       add jtm 15.11.2022
*        SELECT SINGLE lgnum INTO @DATA(lgnum) FROM t320 WHERE werks EQ @ls_postab-werks.
*        IF lgnum IS NOT INITIAL.
*          CALL FUNCTION 'ZSWM_CALCULO_STOCK_DISPONIBLE'
*            EXPORTING
*              lgnum         = lgnum
*              matnr         = ls_postab-matnr
*              werks         = ls_postab-werks
*            IMPORTING
*              zzlasbt_stock = ls_postab-zzlasbt_stock.
*
*        ELSE.
**       fin de add jtm 11.11.2022
*          IF l_pos-vgbel IS INITIAL.
*            SELECT SUM( kalab ) INTO @DATA(l_mska) FROM mska WHERE matnr = @ls_postab-matnr AND werks = @ls_postab-werks.
*          ELSE.
*            SELECT SUM( kalab ) INTO @l_mska FROM mska WHERE matnr = @ls_postab-matnr AND vbeln = @l_pos-vgbel AND posnr = @l_pos-vgpos AND werks = @ls_postab-werks.
*          ENDIF.
*          IF sy-subrc = 0 AND l_mska IS NOT INITIAL.
*            ls_postab-zzlasbt_stock = l_mska.
*          ELSE.
*            SELECT SINGLE * INTO @DATA(l_mard) FROM mard WHERE matnr = @ls_postab-matnr AND werks = @ls_postab-werks.
*            IF sy-subrc = 0.
*              ls_postab-zzlasbt_stock = l_mard-labst.
*            ENDIF.
*          ENDIF.
*
*        ENDIF. " add jtm 15.11.2022
*      WHEN OTHERS.
**       add jtm 15.11.2022
*        SELECT SINGLE lgnum INTO lgnum FROM t320 WHERE werks EQ ls_postab-werks.
*        IF lgnum IS NOT INITIAL.
*          CALL FUNCTION 'ZSWM_CALCULO_STOCK_DISPONIBLE'
*            EXPORTING
*              lgnum         = lgnum
*              matnr         = ls_postab-matnr
*              werks         = ls_postab-werks
*            IMPORTING
*              zzlasbt_stock = ls_postab-zzlasbt_stock.
*
*        ELSE.
**       fin de add jtm 11.11.2022
*
*          SELECT SINGLE kalab INTO @l_mska FROM mska WHERE matnr = @ls_postab-matnr AND vbeln = @l_pos-vgbel AND posnr = @l_pos-vgpos AND werks = @ls_postab-werks.
*          IF sy-subrc = 0 AND l_mska IS NOT INITIAL.
*            ls_postab-zzlasbt_stock = l_mska.
*          ELSE.
*            SELECT SINGLE * INTO l_mard FROM mard WHERE matnr = ls_postab-matnr AND werks = ls_postab-werks.
*            IF sy-subrc = 0.
*              ls_postab-zzlasbt_stock = l_mard-labst.
*            ENDIF.
*          ENDIF.
*        ENDIF. " add jtm 15.11.2022
*    ENDCASE.
*
**    IF sy-subrc = 0 AND l_mska IS NOT INITIAL.
**      ls_postab-zzlasbt_stock = l_mska.
**    ELSE.
**      SELECT SINGLE * INTO @DATA(l_mard) FROM mard WHERE matnr = @ls_postab-matnr AND werks = @ls_postab-werks.
**      IF sy-subrc = 0.
**        ls_postab-zzlasbt_stock = l_mard-labst.
**      ENDIF.
**    ENDIF.
*
*
*    MODIFY ct_postab FROM ls_postab.
*  ENDLOOP.
*
*
*  LOOP AT ct_postab ASSIGNING <fs_postab>.
*    IF <fs_postab>-kunnr IS NOT INITIAL.
*      READ TABLE tl_kna1 ASSIGNING FIELD-SYMBOL(<fs_kna1>) WITH KEY kunnr = <fs_postab>-kunnr.
*      IF sy-subrc = 0.
*        <fs_postab>-zzpstlz_dest_merc = <fs_kna1>-pstlz.
*      ENDIF.
*    ENDIF.
*  ENDLOOP.

ENDMETHOD.
METHOD if_le_shp_ws_monitor_outp_list~output_delivery_list_item.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_shipment_cdata TYPE zshipment_s_data.

**********************************************************************
* Lógica
**********************************************************************

  LOOP AT ct_postab INTO DATA(ls_postab).

    CLEAR: ls_shipment_cdata.

*** Chequeos

    CHECK ls_postab-posnr IS NOT INITIAL OR ls_postab-posnr NE 0.

*** Obtenemos datos

    CALL FUNCTION 'ZFM_SD_GET_SHP_CDATA'
      EXPORTING
        i_vbeln           = ls_postab-vbeln
        i_posnr           = ls_postab-posnr
      IMPORTING
        e_shipment_s_data = ls_shipment_cdata
      EXCEPTIONS
        no_valid_iparams  = 1
        no_valid_itype    = 2
        OTHERS            = 3.

    IF ( sy-subrc EQ 0 ).
      MOVE-CORRESPONDING ls_shipment_cdata TO ls_postab.
    ENDIF.

*** Guardamos cambios en posición

    MODIFY ct_postab FROM ls_postab.

  ENDLOOP.


  "JCB 27.06.24. 83560 - M2 EXPEDIDOS TIENE QUE SER AREA BRUTA COMO LOS QUE SALEN EN LOS PEDIDOS
  IF ct_postab IS NOT INITIAL.
    SELECT vbeln, posnr, zzmontaje, cuobj
      INTO TABLE @DATA(tl_lips)
      FROM lips
      FOR ALL ENTRIES IN @ct_postab
      WHERE vbeln = @ct_postab-vbeln AND
            posnr = @ct_postab-posnr.

    SELECT marc~matnr, marc~werks, marc~cuobj, yhp_idx_td100~fscty, yhp_idx_td100~prohe, yhp_idx_td100~prohe_uom
      INTO TABLE @DATA(tl_td100_marc)
      FROM yhp_idx_td100 INNER JOIN marc ON marc~cuobj = yhp_idx_td100~cuobj
      FOR ALL ENTRIES IN @ct_postab
      WHERE marc~matnr = @ct_postab-matnr AND
            marc~werks = @ct_postab-werks AND
            marc~cuobj <> '000000000000000000'.

    SELECT kunnr, pstlz
      INTO TABLE @DATA(tl_kna1)
      FROM kna1
      FOR ALL ENTRIES IN @ct_postab
      WHERE kunnr = @ct_postab-kunnr.
  ENDIF.

  IF tl_lips IS NOT INITIAL.
    SELECT yhp_idx_td100~cuobj, yhp_idx_td100~sblar, yhp_idx_td100~ablag, yhp_idx_td100~noupt
      INTO TABLE @DATA(tl_td100_lips)
      FROM yhp_idx_td100
      FOR ALL ENTRIES IN @tl_lips
      WHERE yhp_idx_td100~cuobj = @tl_lips-cuobj.
  ENDIF.





  DATA(o_core_mm) = NEW zhcl_mm_core( ).
  LOOP AT ct_postab ASSIGNING FIELD-SYMBOL(<fs_postab>).
    CLEAR: <fs_postab>-zzlfimg_m2, <fs_postab>-zzm2.
    READ TABLE tl_lips ASSIGNING FIELD-SYMBOL(<fs_lips>) WITH KEY vbeln = <fs_postab>-vbeln
                                                                  posnr = <fs_postab>-posnr.
    IF sy-subrc = 0.
      <fs_postab>-zzmontaje = <fs_lips>-zzmontaje.

      READ TABLE tl_td100_lips ASSIGNING FIELD-SYMBOL(<fs_td100_lips>) WITH KEY cuobj = <fs_lips>-cuobj.
      IF sy-subrc = 0.
*APC20240919 Cambio criterio a conversíón M2
*        <fs_postab>-zzlfimg_m2 = <fs_postab>-lfimg * <fs_td100_lips>-sblar. "/ 1000000.
        IF <fs_td100_lips>-noupt = 0. <fs_td100_lips>-noupt = 1. ENDIF.
        IF <fs_td100_lips>-noupt <> 0.
          <fs_postab>-zzlfimg_m2 = <fs_postab>-lfimg * <fs_td100_lips>-ablag / <fs_td100_lips>-noupt. "FCC Añado round
        ENDIF.
      ELSE.
        SELECT marc~werks, marc~matnr, marc~cuobj, yhp_idx_td100~sblar, yhp_idx_td100~ablag, yhp_idx_td100~noupt
          INTO TABLE @DATA(tl_td100_material)
          FROM marc INNER JOIN yhp_idx_td100 ON yhp_idx_td100~cuobj = marc~cuobj
          WHERE marc~matnr = @<fs_postab>-matnr AND
                marc~cuobj <> '000000000000000000'.
        IF sy-subrc = 0.
          READ TABLE tl_td100_material ASSIGNING FIELD-SYMBOL(<fs_td100_material>) WITH KEY werks = <fs_postab>-werks
                                                                                            matnr = <fs_postab>-matnr.
          IF sy-subrc <> 0.
            READ TABLE tl_td100_material ASSIGNING <fs_td100_material> WITH KEY matnr = <fs_postab>-matnr.
          ENDIF.
          IF sy-subrc = 0.
            <fs_postab>-zzlfimg_m2 = <fs_postab>-lfimg * <fs_td100_material>-sblar. "/ 1000000.
*APC20240919 Cambio criterio a conversíón M2
*        <fs_postab>-zzlfimg_m2 = <fs_postab>-lfimg * <fs_td100_material>-sblar. "/ 1000000.
            IF <fs_td100_material>-noupt = 0. <fs_td100_material>-noupt = 1. ENDIF.
            IF <fs_td100_material>-noupt <> 0.
              <fs_postab>-zzlfimg_m2 = <fs_postab>-lfimg * <fs_td100_material>-ablag / <fs_td100_material>-noupt. "FCC Añado round
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

* APC20240930 Hacemos la conversión al maestro de materiales si no hemos encontrado otra coas
      IF <fs_postab>-zzlfimg_m2 IS INITIAL.
        <fs_postab>-zzlfimg_m2 = o_core_mm->conv_m2( matnr         = <fs_postab>-matnr
                                                     unidad_origen = <fs_postab>-vrkme
                                                     cantidad      = <fs_postab>-lfimg
                                                     transaccion   = 'VL06' ).
      ENDIF.

      IF NOT <fs_postab>-zzlfimg_m2 IS INITIAL.
        <fs_postab>-zzlfimg_m2 = round( val = <fs_postab>-zzlfimg_m2 dec = 0 ). "FCC 19.11.2024 Añado round
        <fs_postab>-zzm2       = 'M2'.
      ENDIF.
    ENDIF.



    IF <fs_postab>-zzfscty IS INITIAL.
      READ TABLE tl_td100_marc ASSIGNING FIELD-SYMBOL(<fs_td100_marc>) WITH KEY matnr = <fs_postab>-matnr
                                                                                werks = <fs_postab>-werks.
      IF sy-subrc = 0.
        <fs_postab>-zzfscty     = <fs_td100_marc>-fscty.
        <fs_postab>-zzprohe     = <fs_td100_marc>-prohe.
        <fs_postab>-zzprohe_uom = <fs_td100_marc>-prohe_uom.
      ENDIF.
    ENDIF.


    IF <fs_postab>-kunnr IS NOT INITIAL.
      READ TABLE tl_kna1 ASSIGNING FIELD-SYMBOL(<fs_kna1>) WITH KEY kunnr = <fs_postab>-kunnr.
      IF sy-subrc = 0.
        <fs_postab>-zzpstlz_dest_merc = <fs_kna1>-pstlz.
      ENDIF.
    ENDIF.
  ENDLOOP.







ENDMETHOD.
endclass. "ZLE_SHP_WS_MONITOR_OUTP_LIST definition
endclass. "ZLE_SHP_WS_MONITOR_OUTP_LIST implementation
