***********************************************************************
* TIPO : LISTADO
* TITULO : Informe de stocks
* DESCRIPCION : Informe de stocks
*
* AUTOR: Andres Picazo                                FECHA: 02/04/2024
* ANALISTA: Alfredo Garcia
*
***********************************************************************
REPORT zstocks.

*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS visualizar_objeto   REDEFINITION.
    METHODS handle_user_command REDEFINITION.

ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check   TYPE xfeld,
             lights  TYPE zico_estado_mensaje,
             clave   TYPE string.
             INCLUDE TYPE zhcl_mm_core=>t_zstocks.
             TYPES:   message TYPE bapi_msg,
             color   TYPE lvc_t_scol,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado WITH NON-UNIQUE SORTED KEY clave_key COMPONENTS clave.

    DATA i_listado TYPE tt_listado.

    TYPES: BEGIN OF t_detalle,
             check  TYPE xfeld,
             clave  TYPE string.
             INCLUDE TYPE zhcl_mm_core=>t_zstocks_detalle.
             TYPES:   color  TYPE lvc_t_scol,
             activo TYPE xfeld.
    TYPES: END OF t_detalle,
    tt_detalle TYPE STANDARD TABLE OF t_detalle WITH NON-UNIQUE SORTED KEY clave_key COMPONENTS clave.

    DATA i_detalle      TYPE tt_detalle.
    DATA i_detalle_todo TYPE tt_detalle.
    DATA semis          TYPE zhcl_mm_core=>tt_semis.

    TYPES: BEGIN OF t_mat_cli,
             matnr        TYPE matnr,
             kunnr        TYPE kunnr,
             kunnr_nombre TYPE zzname1_cliente,
           END OF t_mat_cli.

    DATA i_mat_cli TYPE SORTED TABLE OF t_mat_cli WITH UNIQUE KEY matnr kunnr.

    DATA: o_alv   TYPE REF TO lcl_alv,
          o_alvd  TYPE REF TO lcl_alv,
          o_pp    TYPE REF TO zhcl_pp_core,
          i_zaufk TYPE SORTED TABLE OF zaufk WITH UNIQUE KEY aufnr.

    METHODS  main.

    METHODS: listado,

      listado_detalle IMPORTING clave TYPE string    OPTIONAL
                                campo TYPE fieldname OPTIONAL,

      agrupar_datos,
      seleccionar_datos,
      get_detalle_orden CHANGING det TYPE t_detalle.

ENDCLASS.


*------VARIABLES-------------------------------------------------------*
DATA: o_prog  TYPE REF TO zcl_report,
      r_matnr TYPE RANGE OF matnr.

DATA: mara        TYPE mara,
      mchb        TYPE mchb,
      marc        TYPE marc,
      mard        TYPE mard,
      lqua        TYPE lqua,
      kna1        TYPE kna1,
      lfa1        TYPE lfa1,
      mcha        TYPE mcha,
      vbak        TYPE vbak,
      knmt        TYPE knmt,
      mdfa        TYPE mdfa,
      i_set_ramos TYPE zcl_mm_material_master=>tt_sets.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME TITLE text-mat.
PARAMETERS p_ramo TYPE setid AS LISTBOX VISIBLE LENGTH 40 USER-COMMAND ram.
SELECT-OPTIONS: s_mtart FOR mara-mtart MODIF ID ram,
                s_matnr FOR mara-matnr,
                s_werks FOR marc-werks,
                s_lgort FOR mard-lgort,
                s_matkl FOR mara-matkl,
                s_dispo FOR marc-dispo,
                s_kdmat FOR knmt-kdmat.
SELECTION-SCREEN END OF BLOCK 001.
SELECTION-SCREEN BEGIN OF BLOCK 007 WITH FRAME TITLE text-lot.
SELECT-OPTIONS: s_charg FOR mchb-charg,
                s_ersda FOR mcha-ersda,
                s_hsdat FOR mcha-hsdat,
                s_vfdat FOR mcha-vfdat.
SELECTION-SCREEN END OF BLOCK 007.
SELECTION-SCREEN BEGIN OF BLOCK 008 WITH FRAME TITLE text-cli.
PARAMETERS p_matc TYPE text10 AS LISTBOX VISIBLE LENGTH 40 USER-COMMAND ram.
SELECT-OPTIONS s_kunnv FOR kna1-kunnr MODIF ID mav.
SELECTION-SCREEN END OF BLOCK 008.
SELECTION-SCREEN BEGIN OF BLOCK 002 WITH FRAME TITLE text-otr.
SELECT-OPTIONS: s_lgnum FOR lqua-lgnum,
                s_kunnr FOR kna1-kunnr,
                s_lifnr FOR lfa1-lifnr,
                s_kunwe FOR lfa1-kunnr.
SELECTION-SCREEN END OF BLOCK 002.

SELECTION-SCREEN BEGIN OF BLOCK 006 WITH FRAME TITLE text-tsk.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS p_libre AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN COMMENT 5(23) text-stl FOR FIELD p_libre.
PARAMETERS p_bloque AS CHECKBOX DEFAULT ''.
SELECTION-SCREEN COMMENT 40(23) text-stb FOR FIELD p_bloque.
PARAMETERS p_cali AS CHECKBOX DEFAULT ''.
SELECTION-SCREEN COMMENT 65(23) text-stc FOR FIELD p_cali.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK 006.

SELECTION-SCREEN BEGIN OF BLOCK 003 WITH FRAME TITLE text-otk.
PARAMETERS: p_stkmm AS CHECKBOX DEFAULT 'X',
            p_stkwm AS CHECKBOX DEFAULT 'X',
            p_stktr AS CHECKBOX DEFAULT 'X'. " Stock en transito
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS p_stkcl AS CHECKBOX DEFAULT 'X'. " Stock cliente
SELECTION-SCREEN COMMENT 5(23) text-scl FOR FIELD p_stkcl.
PARAMETERS p_numcl AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN COMMENT 40(23) text-ncl FOR FIELD p_numcl.
SELECTION-SCREEN END OF LINE.
PARAMETERS: p_stkcs AS CHECKBOX DEFAULT 'X', " Stock especial
            p_stkpr AS CHECKBOX. " Subcontratación

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS p_stkro AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN COMMENT 5(10) text-rot FOR FIELD p_stkro.
SELECTION-SCREEN COMMENT 20(12) text-dro FOR FIELD p_diasr.
PARAMETERS p_diasr TYPE int4 DEFAULT 7.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK 003.
SELECTION-SCREEN BEGIN OF BLOCK 004 WITH FRAME TITLE text-doc.
PARAMETERS: p_numpv AS CHECKBOX DEFAULT 'X',
            p_numal AS CHECKBOX DEFAULT 'X',
            p_numor AS CHECKBOX DEFAULT 'X',
            p_numop AS CHECKBOX DEFAULT 'X',
            p_numpc AS CHECKBOX DEFAULT 'X'.
SELECT-OPTIONS: s_fdoc  FOR vbak-audat,
                s_dnrel FOR mdfa-dnrel.
SELECTION-SCREEN END OF BLOCK 004.
SELECTION-SCREEN BEGIN OF BLOCK 009 WITH FRAME TITLE text-ot2.
PARAMETERS: p_semis AS CHECKBOX,
            p_pt    AS CHECKBOX,
            p_subco AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK 009.

SELECTION-SCREEN BEGIN OF BLOCK 005 WITH FRAME TITLE text-opc.
PARAMETERS: p_list RADIOBUTTON GROUP g USER-COMMAND g DEFAULT 'X',
            p_deta RADIOBUTTON GROUP g.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_dec TYPE int1 DEFAULT 0 MODIF ID lis.
SELECTION-SCREEN SKIP 1.
PARAMETERS: p_varil LIKE disvariant-variant MODIF ID lis,
            p_varid LIKE disvariant-variant MODIF ID det.
SELECTION-SCREEN END OF BLOCK 005.
PARAMETERS: p_export NO-DISPLAY, "Exportar salida a memoria
            p_opt    NO-DISPLAY.  "Intentar optimizar todo lo posible

__botones_plantilla.



************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA: l_list TYPE o_prog->t_listado,
          l_deta TYPE o_prog->t_detalle.
    DATA i_mat_cli_l TYPE TABLE OF o_prog->t_mat_cli.

    IF nombre_tabla CS 'LISTADO'.
      l_list = list.
      CASE column.
        WHEN 'MATNR'.
          zcl_ap_material=>visualizar( matnr = l_list-matnr
                                       werks = l_list-werks ).
        WHEN 'NUM_CLI_MAT'.
          IF l_list-num_cli_mat > 0.
            LOOP AT o_prog->i_mat_cli ASSIGNING FIELD-SYMBOL(<mat_cli>) WHERE matnr = l_list-matnr.
              APPEND <mat_cli> TO i_mat_cli_l.
            ENDLOOP.
            IF sy-subrc = 0.
              CALL FUNCTION 'Z_POPUP_ALV_AP'
                EXPORTING
                  titulo       = |Clientes asignados al material { l_list-matnr ALPHA = OUT }|
                  botones      = 'OK'
                  campos_noout = 'MATNR'
                TABLES
                  t_datos      = i_mat_cli_l.
            ENDIF.
          ENDIF.
        WHEN OTHERS.
          PERFORM guardar_botones_v1 IN PROGRAM zap_status.
          o_prog->listado_detalle( clave = l_list-clave campo = column ).
          PERFORM restaurar_botones_v1 IN PROGRAM zap_status.
      ENDCASE.
    ELSE.
      l_deta = list.
      CASE column.
        WHEN 'CHARG'.
          zcl_ap_lote=>ver( matnr = l_deta-matnr charg = l_deta-charg werks = l_deta-werks ).
        WHEN OTHERS. message = 'No implementado'.
      ENDCASE.
    ENDIF.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    DATA: r_matnr TYPE RANGE OF matnr,
          r_semi  TYPE RANGE OF matnr,
          r_werks TYPE RANGE OF werks_d,
          r_lgort TYPE RANGE OF lgort_d.
    DATA: l_mat_cuobj TYPE zhcl_mm_core=>t_mat_cuobj,
          i_mat_cuobj TYPE zhcl_mm_core=>tt_mat_cuobj.

    check_ucomm_sel = 'MD04,Z360,SEMIS,PTS,STOCK_CM,MB51'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'MD04'.
        IF nombre_tabla CS 'LISTADO'.
          LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
            zcl_ap_orden_pp=>ver_md04( matnr = <listado>-matnr werks = <listado>-werks ).
          ENDLOOP.
        ELSE.
          LOOP AT o_prog->i_detalle ASSIGNING FIELD-SYMBOL(<detalle>) WHERE check = 'X'.
            zcl_ap_orden_pp=>ver_md04( matnr = <detalle>-matnr werks = <detalle>-werks ).
          ENDLOOP.
        ENDIF.
      WHEN 'Z360'.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-matnr ) TO r_matnr.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-werks ) TO r_werks.
        ENDLOOP.
        SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD 'X'.

        DATA(l_variante) = o_prog->o_par->get_atr1( campo = 'ZSTOCKS_VAR' ).
        SUBMIT zrsd0041
        USING SELECTION-SET l_variante
        AND RETURN
               WITH s_werks IN r_werks
               WITH s_matnr IN r_matnr
               WITH p_histo = ''.
        SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD ''.

      WHEN 'MB51'.
        DATA i_mchb TYPE TABLE OF mchb.
        TYPES: BEGIN OF t_det_lote,
                 check   TYPE xfeld,
                 charg   TYPE charg_d,
                 ersda   TYPE mcha-ersda,
                 hsdat   TYPE mcha-hsdat,
                 vfdat   TYPE mcha-vfdat,
                 zzkunnr TYPE mch1-zzkunnr,
                 clabs   TYPE mchb-clabs,
               END OF t_det_lote.
        DATA: i_det_lote TYPE TABLE OF t_det_lote,
              l_det_lote TYPE t_det_lote,
              l_ucomm    TYPE sy-ucomm,
              l_fila     TYPE int4.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          CLEAR mchb.
          MOVE-CORRESPONDING <listado> TO mchb.
          IF <listado>-num_lotes > 1.
            CLEAR i_det_lote.
            LOOP AT o_prog->i_detalle ASSIGNING <detalle> WHERE matnr = <listado>-matnr AND werks = <listado>-werks AND lgort = <listado>-lgort AND charg NE ''.
              CLEAR l_det_lote.
              MOVE-CORRESPONDING <detalle> TO l_det_lote.
              COLLECT l_det_lote INTO i_det_lote.
            ENDLOOP.
            CALL FUNCTION 'Z_POPUP_ALV_AP'
              EXPORTING
                titulo  = |Seleccione lote del material { <listado>-matnr ALPHA = OUT }|
                check   = 'X'
                botones = 'OK_CANCEL'
                ancho   = 60
              IMPORTING
                ucomm   = l_ucomm
                fila    = l_fila
              TABLES
                t_datos = i_det_lote.
            IF l_ucomm IS INITIAL AND NOT l_fila IS INITIAL.
              l_ucomm = 'F01'.
              i_det_lote[ l_fila ]-check = 'X'.
            ENDIF.

            IF l_ucomm = 'F01'.
              ASSIGN i_det_lote[ check = 'X' ] TO FIELD-SYMBOL(<det_lote>).
              IF sy-subrc = 0.
                mchb-charg = <det_lote>-charg.
              ELSE.
                RETURN.
              ENDIF.
            ELSE.
              RETURN.
            ENDIF.
          ENDIF.
          IF NOT mchb-charg IS INITIAL.
            CLEAR: mchb-werks, mchb-lgort.
          ENDIF.
          APPEND mchb TO i_mchb.
        ENDLOOP.

        l_variante = o_prog->o_par->get_atr1( campo = 'VAR_MB51' ).
        LOOP AT i_mchb INTO mchb.
          CLEAR: r_werks, r_lgort.
          IF NOT mchb-werks IS INITIAL.
            r_werks = VALUE #( ( option = 'EQ' sign = 'I' low = mchb-werks ) ).
          ELSE.
            SET PARAMETER ID 'WRK' FIELD ''.
          ENDIF.
          IF NOT mchb-lgort IS INITIAL.
            r_lgort = VALUE #( ( option = 'EQ' sign = 'I' low = mchb-lgort ) ).
          ELSE.
            SET PARAMETER ID 'LAG' FIELD ''.
          ENDIF.
          SUBMIT rm07docs
           USING SELECTION-SET l_variante
             AND RETURN
            WITH matnr = mchb-matnr
            WITH charg = mchb-charg
            WITH werks IN r_werks
            WITH lgort IN r_lgort.
        ENDLOOP.

      WHEN 'STOCK_CM'.
        DATA(o_core_mm) = NEW zhcl_mm_core( ).
        DATA(r_mtart_pt) = o_core_mm->get_rango_tipos_mat( zhcl_mm_core=>c_set_tipo_mat_pt_packaging ).
        DATA(r_mtart_semi) = o_core_mm->get_rango_tipos_mat( zhcl_mm_core=>c_set_tipo_mat_semi_packaging ).
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          IF <listado>-mtart IN r_mtart_pt.
            APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-matnr ) TO r_matnr.
          ELSEIF <listado>-mtart IN r_mtart_semi.
            APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-matnr ) TO r_semi.
          ELSE.
            MESSAGE 'Seleccione sólo materiales producto terminado o semis' TYPE 'I'.
            RETURN.
          ENDIF.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-werks ) TO r_werks.
        ENDLOOP.
        IF lines( r_werks ) > 1.
          MESSAGE 'Seleccione un único centro' TYPE 'I'.
        ELSE.
          DATA(l_werks) = r_werks[ 1 ]-low.
        ENDIF.
        SUBMIT zrpp0087
        AND RETURN
               WITH p_werks = l_werks
               WITH s_pterm IN r_matnr
               WITH s_semi  IN r_semi.

      WHEN 'SEMIS' OR 'PTS'.
        IF nombre_tabla CS 'LISTADO'.
          LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
            MOVE-CORRESPONDING <listado> TO l_mat_cuobj.
            COLLECT l_mat_cuobj INTO i_mat_cuobj.
          ENDLOOP.
        ELSE.
          LOOP AT o_prog->i_detalle ASSIGNING <detalle> WHERE check = 'X'.
            MOVE-CORRESPONDING <detalle> TO l_mat_cuobj.
            COLLECT l_mat_cuobj INTO i_mat_cuobj.
          ENDLOOP.
        ENDIF.
        IF ucomm = 'SEMIS'.
          NEW zhcl_mm_core( )->get_semis( i_mat = i_mat_cuobj
                                          popup = 'X' ).
        ELSEIF ucomm = 'PTS'.
          NEW zhcl_mm_core( )->get_semis_pt( i_mat = i_mat_cuobj
                                                    popup = 'X' ).
        ENDIF.

      WHEN 'REFRESCAR'.
        o_prog->seleccionar_datos( ).
        o_prog->agrupar_datos( ).
        refresh( ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    DATA i_zstocks TYPE zhcl_mm_core=>tt_zstocks.

    IF NOT p_export IS INITIAL.
      o_prog->no_sgpi = 'X'.
    ENDIF.

    seleccionar_datos( ).

    IF p_list = 'X'.
      agrupar_datos( ).

      IF p_export = 'X' OR p_export = '*'.
        MOVE-CORRESPONDING i_listado TO i_zstocks.
        EXPORT i_zstocks FROM i_zstocks TO MEMORY ID 'ZSTOCKS'.
        IF p_opt = 'X'.
          o_pp->export_datos_globales( ).
        ENDIF.
        LEAVE PROGRAM.
      ENDIF.

      listado( ).
    ELSE.
      listado_detalle( ).
    ENDIF.
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    TYPES: BEGIN OF xtab6,
             werks TYPE ekpo-werks,
             matnr TYPE ekpo-matnr,
             menge TYPE ekbe-menge,
             meins TYPE ekpo-meins,
             dmbtr TYPE ekbe-dmbtr,
             waers TYPE ekbe-waers,
             netwr TYPE ekpo-netwr,
             bwaer TYPE ekko-waers,
             ebeln TYPE ekbe-ebeln,
             ebelp TYPE ekbe-ebelp,
             sobkz TYPE mdbs-sobkz,
             pstyp TYPE mdbs-pstyp,
             bstmg TYPE ekbe-menge,
             bstme TYPE ekpo-meins,
             reswk TYPE ekko-reswk,
             bsakz TYPE ekko-bsakz,
             lgort TYPE ekpo-lgort,
             reslo TYPE ekpo-reslo,
           END OF xtab6.
    TYPES: BEGIN OF t_semi_stock.
             INCLUDE TYPE zhcl_mm_core=>t_semis.
             TYPES:   stock_mm TYPE p LENGTH 15 DECIMALS 3,
             ctd_ord  TYPE p LENGTH 15 DECIMALS 3,
           END OF t_semi_stock.

    DATA i_mat TYPE TABLE OF tab_matnr.
    DATA: r_matnr_cli TYPE RANGE OF matnr,
          r_bestq     TYPE RANGE OF lqua-bestq,
          l_sql_mchb  TYPE string,
          l_sql_mard  TYPE string,
          l_sql_mska  TYPE string,
          l_sql_msku  TYPE string,
          l_sql_mslb  TYPE string,
          l_ctd       TYPE mard-labst,
          l_detalle   TYPE t_detalle.
    DATA: l_alm_1400 TYPE mchb,
          i_alm_1400 TYPE TABLE OF mchb.
    DATA i_mb5t            TYPE TABLE OF xtab6.
    DATA i_mat_cuobj       TYPE zhcl_mm_core=>tt_mat_cuobj.
    DATA i_zstocks_detalle TYPE zhcl_mm_core=>tt_zstocks_detalle.
* Incluimos los semis asociados
    DATA: i_semi_stock TYPE TABLE OF t_semi_stock,
          l_semi_stock TYPE t_semi_stock.
    DATA l_mat_cli TYPE t_mat_cli.

    CLEAR: i_detalle, i_listado.

    IF o_pp IS INITIAL.
      o_pp = NEW zhcl_pp_core( import_datos_globales = p_opt ).
    ENDIF.

    r_matnr = s_matnr[].

* Si han marcado la opción de buscar subcomponentes relacionados los buscamos en las reservas.
    IF p_subco = 'X'.
      SELECT DISTINCT baugr AS matnr FROM resb
        INTO TABLE @DATA(i_subco)
       WHERE matnr IN @s_matnr
         AND werks IN @s_werks
         AND bdart = 'BB'
         AND xloek = ''.

      SELECT DISTINCT matnr FROM resb
        APPENDING TABLE @i_subco
       WHERE baugr IN @s_matnr
         AND werks IN @s_werks
         AND bdart = 'BB'
         AND xloek = ''.

      LOOP AT i_subco ASSIGNING FIELD-SYMBOL(<subco>).
        IF NOT line_exists( r_matnr[ low = <subco>-matnr ] ).
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <subco>-matnr ) TO r_matnr.
        ENDIF.
      ENDLOOP.
    ENDIF.


    IF NOT p_matc IS INITIAL.
      IF p_matc CS 'C'.
*        SELECT DISTINCT matnr FROM kotg933              "#EC CI_BYPASS.
*          INTO TABLE @DATA(i_mat)
*         WHERE kappl  = 'V'
*           AND kschl  = 'ZA01'
*           AND matnr IN @r_matnr
*           AND kunnr IN @s_kunnv
*           AND datbi >= @sy-datum
*           AND datab <= @sy-datum
*        ORDER BY matnr.
        DATA(i_catalogo) = NEW zhcl_sd_core( )->get_catalogo( r_matnr = r_matnr[]
                                                              r_kunnr = s_kunnv[] ).
        MOVE-CORRESPONDING i_catalogo TO i_mat.
        SORT i_mat.
        DELETE ADJACENT DUPLICATES FROM i_mat.
      ENDIF.
      IF p_matc CS 'G'.
        SELECT DISTINCT matnr FROM mvke
          APPENDING TABLE i_mat
         WHERE mvgr3  = 'GEN'
           AND matnr IN r_matnr
        ORDER BY matnr.
      ENDIF.
      IF i_mat IS INITIAL.
        MESSAGE 'No se han encontrado materiales en base a clientes' TYPE 'S'.
        RETURN.
      ELSE.
        LOOP AT i_mat ASSIGNING FIELD-SYMBOL(<mat>).
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <mat>-matnr ) TO r_matnr_cli.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF NOT r_matnr_cli IS INITIAL.
* Si la tabla tiene más de 500 entradas, las selecciones posteriores van muy lentas,
* por lo que es preferible no filtrar en este momento, si no al final
      IF lines( r_matnr_cli ) < 500.
        DATA(r_matnr_sel) = r_matnr_cli.
      ENDIF.
    ELSE.
      r_matnr_sel = r_matnr[].
    ENDIF.

* Filtro por material de cliente, si lo hay
    IF NOT s_kdmat[] IS INITIAL.
      SELECT DISTINCT matnr FROM knmt
        INTO TABLE i_mat
       WHERE matnr IN r_matnr_sel
         AND kdmat IN s_kdmat
         AND kunnr IN s_kunnr
         AND kunnr IN s_kunnv
       ORDER BY matnr.
      IF i_mat IS INITIAL.
        MESSAGE 'No se han encontrado material de cliente' TYPE 'S'.
        RETURN.
      ELSE.
        CLEAR r_matnr_sel.
        LOOP AT i_mat ASSIGNING <mat>.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <mat>-matnr ) TO r_matnr_sel.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF p_libre = 'X'.
      APPEND VALUE #( option = 'EQ' sign   = 'I' low    = '' ) TO r_bestq.
      l_sql_mchb = '( mchb~clabs <> 0 )'.
    ENDIF.
    IF p_bloque = 'X'.
      APPEND VALUE #( option = 'EQ' sign   = 'I' low    = 'S' ) TO r_bestq.
      IF l_sql_mchb IS INITIAL.
        l_sql_mchb = '( mchb~cspem <> 0 )'.
      ELSE.
        REPLACE ')' IN l_sql_mchb WITH ` or mchb~cspem <> 0 )`.
      ENDIF.
    ENDIF.
    IF p_cali = 'X'.
      APPEND VALUE #( option = 'EQ' sign   = 'I' low    = 'Q' ) TO r_bestq.
      IF l_sql_mchb IS INITIAL.
        l_sql_mchb = '( mchb~cinsm <> 0 )'.
      ELSE.
        REPLACE ')' IN l_sql_mchb WITH ` or mchb~cinsm <> 0 )`.
      ENDIF.
    ENDIF.

    IF p_stkmm = 'X'.
      sgpi_texto( 'Seleccionando stocks MM materiales sujetos a lotes' ).
      SELECT 'MM'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl,
             marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             mchb~lgort, mchb~charg, mchb~clabs, mchb~cinsm, mchb~cspem,
             mchb~zzcm_montaje, mchb~zzcm_defectuosa,
             mcha~ersda, mcha~hsdat, mcha~vfdat,
             mch1~zzkunnr AS kunnr, mch1~zzbstkd AS bstkd
"             , mch1~zzposnr AS posnr
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN mchb ON  marc~matnr = mchb~matnr
                            AND marc~werks = mchb~werks
                  JOIN mcha ON  mchb~matnr = mcha~matnr
                            AND mchb~werks = mcha~werks
                            AND mchb~charg = mcha~charg
                  JOIN mch1 ON  mchb~matnr = mch1~matnr
                            AND mchb~charg = mch1~charg
        INTO CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
          AND mara~matkl IN @s_matkl
          AND marc~werks IN @s_werks
          AND marc~dispo IN @s_dispo
          AND marc~xchpf = 'X'
          AND mchb~lgort IN @s_lgort
          AND mchb~charg IN @s_charg
          AND mcha~ersda IN @s_ersda
          AND mcha~hsdat IN @s_hsdat
          AND mcha~vfdat IN @s_vfdat
          AND (l_sql_mchb).

      LOOP AT i_detalle ASSIGNING FIELD-SYMBOL(<detalle>) WHERE tipo = 'MM' AND NOT kunnr IS INITIAL.
        __poner_ceros <detalle>-kunnr.
        IF NOT <detalle>-kunnr IN s_kunnr.
          DELETE i_detalle.
          CONTINUE.
        ENDIF.

        <detalle>-mska_ersda = <detalle>-ersda.
* Queremos que los lotes en los que se ha informado cliente y pedido, los considemos como stock de cliente, en lugar de stock de MM
        IF NOT <detalle>-bstkd IS INITIAL.
          <detalle>-vbeln = <detalle>-bstkd.
          SELECT SINGLE vbeln vbtyp audat FROM vbak
            INTO CORRESPONDING FIELDS OF <detalle>
           WHERE vbeln = <detalle>-vbeln.
          IF sy-subrc = 0.
            SELECT SINGLE kwmeng vrkme FROM vbap
              INTO (<detalle>-omeng, <detalle>-meins_pv)
             WHERE vbeln = <detalle>-vbeln
               AND posnr = <detalle>-posnr.
            IF <detalle>-omeng IS INITIAL.
              SELECT SINGLE zmeng FROM vbap
                INTO (<detalle>-omeng)
               WHERE vbeln = <detalle>-vbeln
                 AND posnr = <detalle>-posnr.
            ENDIF.
          ELSE.
            <detalle>-bstkd = 'ORIGEN LOTE'.
          ENDIF.
        ENDIF.
        <detalle>-tipo = 'SC'.

      ENDLOOP.

      IF s_charg[] IS INITIAL.
        l_sql_mard = l_sql_mchb.
        REPLACE ALL OCCURRENCES OF 'mchb' IN l_sql_mard WITH 'mard'.
        REPLACE ALL OCCURRENCES OF 'clabs' IN l_sql_mard WITH 'labst'.
        REPLACE ALL OCCURRENCES OF 'cspem' IN l_sql_mard WITH 'speme'.
        REPLACE ALL OCCURRENCES OF 'cinsm' IN l_sql_mard WITH 'insme'.
        sgpi_texto( 'Seleccionando stocks MM materiales no sujetos a lotes' ).
        SELECT 'MM'       AS tipo,
               mara~matnr, mara~mtart, mara~meins, marc~werks, mara~matkl,
               marc~xchpf, mard~lgort, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
               mard~labst AS clabs, mard~insme AS cinsm, mard~speme AS cspem
          FROM mara JOIN marc ON mara~matnr = marc~matnr
                    JOIN mard ON  marc~matnr = mard~matnr
                              AND marc~werks = mard~werks
          APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
          WHERE mara~matnr IN @r_matnr
            AND mara~matnr IN @r_matnr_sel
            AND mara~mtart IN @s_mtart
                    AND mara~matkl IN @s_matkl
            AND marc~werks IN @s_werks
          AND marc~dispo IN @s_dispo
            AND marc~xchpf = ''
            AND mard~lgort IN @s_lgort
           AND (l_sql_mard).
      ENDIF.
    ENDIF.

    IF p_stkwm = 'X'.
      sgpi_texto( 'Seleccionando stocks WM' ).
      SELECT 'WM'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl,
             marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             lqua~lgnum, lqua~lgtyp, lqua~lgpla, lqua~lqnum,
             lqua~gesme, lqua~verme, lqua~einme, lqua~ausme,
             lqua~lgort, lqua~charg, lqua~bestq, lqua~lenum,
             lqua~meins AS meins_wm, lqua~sobkz,
             mcha~ersda, mcha~hsdat, mcha~vfdat
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN lqua ON  marc~matnr = lqua~matnr
                            AND marc~werks = lqua~werks
                  LEFT OUTER JOIN mcha ON  lqua~matnr = mcha~matnr
                                       AND lqua~werks = mcha~werks
                                       AND lqua~charg = mcha~charg
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
          AND mara~matkl IN @s_matkl
          AND marc~werks IN @s_werks
          AND marc~dispo IN @s_dispo
          AND lqua~lgort IN @s_lgort
          AND lqua~charg IN @s_charg
          AND lqua~lgnum IN @s_lgnum
          AND lqua~bestq IN @r_bestq
          AND mcha~ersda IN @s_ersda
          AND mcha~hsdat IN @s_hsdat
          AND mcha~vfdat IN @s_vfdat.

      LOOP AT i_detalle ASSIGNING <detalle> WHERE tipo = 'WM' AND verme <> 0.
        IF <detalle>-meins_wm = <detalle>-meins.
          DATA(l_stock) = <detalle>-verme.
        ELSE.
          l_stock = o_cache->get_mat( matnr          = <detalle>-matnr
                                      cantidad       = <detalle>-verme
                                      unidad_origen  = <detalle>-meins_wm
                                      unidad_destino = <detalle>-meins ).
        ENDIF.

        CASE <detalle>-bestq.
          WHEN ''.
            <detalle>-clabs = l_stock.
          WHEN 'S'.
            <detalle>-cspem = l_stock.
          WHEN 'Q'.
            <detalle>-cinsm = l_stock.
        ENDCASE.


* Algunos tipos de almacén restan de MM
        IF line_exists( o_par->i_par[ campo = 'DIFERENCIAS_WM' valor = <detalle>-lgnum valor2 = <detalle>-lgtyp ] ).
          l_detalle = <detalle>.
          l_detalle-tipo = 'MM'.
          l_detalle-clabs = - l_detalle-clabs.
          l_detalle-cspem = - l_detalle-cspem.
          l_detalle-cinsm = - l_detalle-cinsm.
          l_detalle-situacion_txt = |Viene por diferencias WM|.
          APPEND l_detalle TO i_detalle.
        ENDIF.

      ENDLOOP.
    ENDIF.

    IF p_stkcl = 'X'.
      sgpi_texto( 'Seleccionando stock de cliente ' ).
      l_sql_mska = l_sql_mchb.
      REPLACE ALL OCCURRENCES OF 'mchb' IN l_sql_mska WITH 'mska'.
      REPLACE ALL OCCURRENCES OF 'clabs' IN l_sql_mska WITH 'KALAB'.
      REPLACE ALL OCCURRENCES OF 'cspem' IN l_sql_mska WITH 'KASPE'.
      REPLACE ALL OCCURRENCES OF 'cinsm' IN l_sql_mska WITH 'KAINS'.
      SELECT 'SC'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, marc~werks, mara~matkl,
             marc~xchpf, mska~lgort, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             mska~kalab AS clabs, mska~kains AS cinsm, mska~kaspe AS cspem,
             mska~vbeln, mska~posnr, mska~sobkz,
             vbak~kunnr, vbak~audat, vbkd~bstkd,
             mcha~charg, mcha~ersda, mcha~hsdat, mcha~vfdat,
             mska~ersda AS mska_ersda
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN mska ON  marc~matnr = mska~matnr
                            AND marc~werks = mska~werks
                  JOIN vbak ON mska~vbeln = vbak~vbeln
                  LEFT OUTER JOIN vbkd ON  mska~vbeln = vbkd~vbeln
                                       AND vbkd~posnr = '000000'
                  LEFT OUTER JOIN mcha ON  mska~matnr = mcha~matnr
                                       AND mska~werks = mcha~werks
                                       AND mska~charg = mcha~charg
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
                  AND mara~matkl IN @s_matkl
          AND marc~werks IN @s_werks
        AND marc~dispo IN @s_dispo
          AND mska~lgort IN @s_lgort
          AND mska~charg IN @s_charg
          AND vbak~kunnr IN @s_kunnr
          AND mcha~ersda IN @s_ersda
          AND mcha~hsdat IN @s_hsdat
          AND mcha~vfdat IN @s_vfdat
          AND (l_sql_mska).
    ENDIF.

* En el caso del almacén 1400 de ordenes con pedido de subcontratación queremos cambiar el almacén y origen
    LOOP AT i_detalle ASSIGNING <detalle> WHERE ( tipo = 'MM' OR tipo = 'SC' )
                                                AND werks  = '2000'
                                                AND lgort  = '1400'
                                                AND charg <> ''.
      l_alm_1400-matnr = <detalle>-matnr.
      l_alm_1400-werks = <detalle>-werks.
      l_alm_1400-charg = <detalle>-charg.
      COLLECT l_alm_1400 INTO i_alm_1400.
    ENDLOOP.
    IF sy-subrc = 0.
      SELECT plnbez, charg, caufv~aufnr,caufv~zzsubco_ebeln, caufv~zzsubco_ebelp, ekpo~werks, ekpo~lgort
        FROM caufv JOIN afpo ON afpo~aufnr = caufv~aufnr
        JOIN ekpo ON  ekpo~ebeln = caufv~zzsubco_ebeln
                  AND ekpo~ebelp = caufv~zzsubco_ebelp
        INTO TABLE @DATA(i_ord_subco)
        FOR ALL ENTRIES IN @i_alm_1400
       WHERE plnbez               = @i_alm_1400-matnr
         AND caufv~werks          = @i_alm_1400-werks
         AND charg                = @i_alm_1400-charg
         AND ekpo~lgort          <> '1400'
         AND caufv~loekz          = ''
         AND caufv~zzsubco_ebeln <> ''. " En calidad hay una entrada en EKPO con nº pedido en blanco
      LOOP AT i_detalle ASSIGNING <detalle> WHERE ( tipo = 'MM' OR tipo = 'SC' )
                                                  AND werks  = '2000'
                                                  AND lgort  = '1400'
                                                  AND charg <> ''.
        ASSIGN i_ord_subco[ plnbez = <detalle>-matnr
                            charg  = <detalle>-charg ] TO FIELD-SYMBOL(<ord_subco>).
        IF sy-subrc = 0.
          <detalle>-situacion_txt = |Almacén origen { <detalle>-lgort } cambiado por orden { <ord_subco>-aufnr ALPHA = OUT }|.
          <detalle>-werks         = <ord_subco>-werks.
          <detalle>-lgort         = <ord_subco>-lgort.
          <detalle>-tipo          = 'SE'.
          IF p_stkcs IS INITIAL.
            p_stkcs = 'X'.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF p_stkcs = 'X'.
      sgpi_texto( 'Seleccionando stock especiales ' ).
      l_sql_msku = l_sql_mchb.
      REPLACE ALL OCCURRENCES OF 'mchb' IN l_sql_msku WITH 'msku'.
      REPLACE ALL OCCURRENCES OF 'clabs' IN l_sql_msku WITH 'KULAB'.
      REPLACE ALL OCCURRENCES OF 'cspem' IN l_sql_msku WITH 'KUINS'.
      REPLACE ALL OCCURRENCES OF 'cinsm' IN l_sql_msku WITH 'KUINS'.
      SELECT 'SE'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, marc~werks, mara~matkl,
             marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             msku~kulab AS clabs, msku~kuins AS cinsm,
             msku~kunnr, msku~sobkz,
             mcha~charg, mcha~ersda, mcha~hsdat, mcha~vfdat,
             msku~ersda AS mska_ersda
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN msku ON  marc~matnr = msku~matnr
                            AND marc~werks = msku~werks
                  LEFT OUTER JOIN mcha ON  msku~matnr = mcha~matnr
                                       AND msku~werks = mcha~werks
                                       AND msku~charg = mcha~charg
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
                  AND mara~matkl IN @s_matkl
          AND marc~werks IN @s_werks
        AND marc~dispo IN @s_dispo
          AND msku~charg IN @s_charg
          AND msku~kunnr IN @s_kunnr
          AND mcha~ersda IN @s_ersda
          AND mcha~hsdat IN @s_hsdat
          AND mcha~vfdat IN @s_vfdat
          AND (l_sql_msku).
    ENDIF.

    IF p_stkpr = 'X'.
      sgpi_texto( 'Seleccionando stock de subcontratacion ' ).
      l_sql_mslb = l_sql_mchb.
      REPLACE ALL OCCURRENCES OF 'mchb' IN l_sql_mslb WITH 'mslb'.
      REPLACE ALL OCCURRENCES OF 'clabs' IN l_sql_mslb WITH 'LBLAB'.
      REPLACE ALL OCCURRENCES OF 'cinsm' IN l_sql_mslb WITH 'LBINS'.
      IF l_sql_mslb CS 'or mslb~cspem <> 0'.
* El stock de proveedor no hay stock bloqueado
        REPLACE 'or mslb~cspem <> 0' WITH '' INTO l_sql_mslb.
      ENDIF.
      IF NOT l_sql_mslb CS 'mslb~cspem'.
        SELECT 'SP'       AS tipo,
               mara~matnr, mara~mtart, mara~meins, marc~werks, mara~matkl,
               marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
               mslb~lifnr, mslb~charg, mslb~lblab AS clabs, mslb~lbins AS cinsm, mslb~sobkz,
               mcha~ersda, mcha~hsdat, mcha~vfdat
          FROM mara JOIN marc ON mara~matnr = marc~matnr
                    JOIN mslb ON  marc~matnr = mslb~matnr
                              AND marc~werks = mslb~werks
                  LEFT OUTER JOIN mcha ON  mslb~matnr = mcha~matnr
                                       AND mslb~werks = mcha~werks
                                       AND mslb~charg = mcha~charg
          APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
          WHERE mara~matnr IN @r_matnr
            AND mara~matnr IN @r_matnr_sel
            AND mara~mtart IN @s_mtart
            AND mara~matkl IN @s_matkl
            AND marc~werks IN @s_werks
            AND marc~dispo IN @s_dispo
            AND mslb~lifnr IN @s_lifnr
            AND mslb~charg IN @s_charg
            AND mcha~ersda IN @s_ersda
            AND mcha~hsdat IN @s_hsdat
            AND mcha~vfdat IN @s_vfdat
           AND (l_sql_mslb).

        LOOP AT i_detalle ASSIGNING <detalle> WHERE tipo = 'SP'.
          <detalle>-lgort = o_par->get_atr1( campo = 'PROVEEDOR_ALMACEN' valor = <detalle>-lifnr quitar_ceros = 'X' ).
          IF NOT <detalle>-lgort IN s_lgort.
            DELETE i_detalle.
          ENDIF.

        ENDLOOP.
      ENDIF.
    ENDIF.

* Busco si he de recologar el stock obtenido po diferencias WM
    LOOP AT i_detalle ASSIGNING <detalle> WHERE situacion_txt = |Viene por diferencias WM| AND tipo = 'MM'.
      LOOP AT i_detalle ASSIGNING FIELD-SYMBOL(<det>) WHERE matnr = <detalle>-matnr
                                                        AND werks = <detalle>-werks
                                                        AND charg = <detalle>-charg
                                                        AND situacion_txt = ''
                                                        AND tipo NE 'WM'.
        <detalle>-tipo  = <det>-tipo.
        <detalle>-lgort = <det>-lgort.
        EXIT.
      ENDLOOP.
    ENDLOOP.

    IF p_stkro = 'X'.
      sgpi_texto( 'Seleccionando movimientos rotación de stock' ).

      DATA(r_bwart) = o_par->get_rango_tabla_campo( campo = 'MOVIMIENTOS_SALIDA' campo_rango = 'VALOR' option = '*' ).
      IF r_bwart IS INITIAL.
        MESSAGE 'Debe informar parámetro MOVIMIENTOS_SALIDA para calcular la rotación del stock' TYPE 'I'.
      ELSE.
        fecha = sy-datum - 7.

        SELECT 'RO'       AS tipo,
               mara~matnr, mara~mtart, mara~meins, mara~matkl,
               marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
               mseg~mblnr, mseg~mjahr, mseg~zeile, mseg~shkzg, mseg~bwart,
               mseg~lgort, mseg~charg, mseg~menge, mseg~meins AS meins_po,
               mseg~ebeln, mseg~ebelp, mseg~vbeln_im AS vbeln,
               mseg~budat_mkpf AS budat, mseg~sobkz,
               mcha~ersda, mcha~hsdat, mcha~vfdat
          FROM mara JOIN marc ON mara~matnr = marc~matnr
                    JOIN mseg ON  mseg~matnr = marc~matnr
                              AND mseg~werks = marc~werks
                LEFT OUTER JOIN mcha ON  mseg~matnr = mcha~matnr
                                     AND mseg~werks = mcha~werks
                                     AND mseg~charg = mcha~charg
          APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
          WHERE mara~matnr IN @r_matnr
            AND mara~matnr IN @r_matnr_sel
            AND mara~mtart IN @s_mtart
            AND mara~matkl IN @s_matkl
            AND marc~werks IN @s_werks
            AND marc~dispo IN @s_dispo
            AND mseg~lgort IN @s_lgort
            AND mseg~lgort <> ''
            AND mseg~charg IN @s_charg
            AND mcha~ersda IN @s_ersda
            AND mcha~hsdat IN @s_hsdat
            AND mcha~vfdat IN @s_vfdat
            AND budat_mkpf >= @fecha
            AND bwart      IN @r_bwart.

        LOOP AT i_detalle ASSIGNING <detalle> WHERE tipo = 'RO' AND menge <> 0.
          IF <detalle>-shkzg = 'H'.
            <detalle>-menge = - <detalle>-menge.
          ENDIF.
          IF <detalle>-meins_po = <detalle>-meins.
            <detalle>-clabs = <detalle>-menge.
          ELSE.
            <detalle>-clabs = o_cache->get_mat( matnr          = <detalle>-matnr
                                        cantidad       = <detalle>-menge
                                        unidad_origen  = <detalle>-meins_po
                                        unidad_destino = <detalle>-meins ).
          ENDIF.
        ENDLOOP.

      ENDIF.
    ENDIF.

    IF p_numpv = 'X' OR p_numal = 'X'.
      sgpi_texto( 'Seleccionando pedidos/albaranes' ).
      IF p_numpv = 'X' AND p_numal = ''.
        DATA(r_vbtyp) = VALUE lxhme_range_c1_t( ( option = 'EQ' sign = 'E' low = 'J' ) ).
      ELSEIF p_numpv = '' AND p_numal = 'X'.
        r_vbtyp = VALUE lxhme_range_c1_t( ( option = 'EQ' sign = 'I' low = 'J' ) ).
      ENDIF.

      SELECT 'PV'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             vbbe~werks, vbbe~lgort, vbbe~charg, vbbe~omeng, vbbe~meins AS meins_pv,
             vbbe~vbeln, vbbe~vbtyp, vbbe~posnr, vbbe~etenr, vbbe~mbdat,
             mcha~ersda, mcha~hsdat, mcha~vfdat,
             vbak~audat, vbkd~bstkd, vbak~kunnr,
             knmt~kdmat,
             vbpa_we~kunnr AS kunwe,
             vbap~abgru,
             vbep~lifsp
        FROM mara JOIN vbbe ON mara~matnr = vbbe~matnr
                  JOIN marc ON mara~matnr = marc~matnr
                  LEFT OUTER JOIN vbak ON vbak~vbeln = vbbe~vbeln
                  LEFT OUTER JOIN knmt ON  knmt~vkorg = vbak~vkorg
                                       AND knmt~vtweg = vbak~vtweg
                                       AND knmt~kunnr = vbak~kunnr
                                       AND knmt~matnr = mara~matnr
                  LEFT OUTER JOIN vbkd ON  vbak~vbeln = vbkd~vbeln
                                       AND vbkd~posnr = '000000'
                  LEFT OUTER JOIN mcha ON  vbbe~matnr = mcha~matnr
                                       AND vbbe~werks = mcha~werks
                                       AND vbbe~charg = mcha~charg
                  LEFT OUTER JOIN vbpa AS vbpa_we ON  vbpa_we~vbeln = vbak~vbeln
                                                  AND vbpa_we~parvw = 'WE'
                                                  AND vbpa_we~posnr = '000000'
                  LEFT OUTER JOIN vbap ON  vbap~vbeln = vbak~vbeln
                                       AND vbap~posnr = vbbe~posnr
                  LEFT OUTER JOIN vbep ON  vbep~vbeln = vbak~vbeln
                                       AND vbep~posnr = vbbe~posnr
                                       AND vbep~etenr = vbbe~etenr
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
          AND mara~matkl IN @s_matkl
          AND vbbe~werks IN @s_werks
          AND marc~dispo IN @s_dispo
*          AND vbbe~lgort IN @s_lgort "No podemos hacer el filtro aquí porque es posible que el pedido no tenga almacén
          AND vbbe~charg IN @s_charg
          AND vbbe~vbtyp IN @r_vbtyp
          AND vbbe~omeng <> 0
          AND mcha~ersda IN @s_ersda
          AND mcha~hsdat IN @s_hsdat
          AND mcha~vfdat IN @s_vfdat
          AND vbak~kunnr IN @s_kunnr
          AND vbpa_we~kunnr IN @s_kunwe
          AND vbbe~mbdat IN @s_fdoc.

      DELETE i_detalle WHERE tipo = 'PV' AND ( lifsp NE '' OR abgru NE '' ). "No queremos repartos bloqueados.
      LOOP AT i_detalle ASSIGNING <detalle> WHERE tipo = 'PV'.
        IF <detalle>-audat IS INITIAL. "Es una entrega
          SELECT SINGLE lfdat kunnr FROM likp
          INTO (<detalle>-audat, <detalle>-kunnr)
          WHERE vbeln = <detalle>-vbeln.
          IF NOT <detalle>-kunnr IS INITIAL.
            DATA(l_lgort) = o_par->get_atr1( campo = 'DESTINAT_ALMACEN' valor = <detalle>-kunnr quitar_ceros = 'X' ).
            IF l_lgort IS INITIAL.
              SELECT lgort
                FROM t001l                            "#EC CI_SGLSELECT
                WHERE kunnr = @<detalle>-kunnr
                ORDER BY PRIMARY KEY
                INTO @l_lgort
                UP TO 1 ROWS.
              ENDSELECT.
            ENDIF.
            IF NOT l_lgort IS INITIAL.
              <detalle>-lgort = l_lgort.
            ENDIF.
          ENDIF.
        ELSE. "Es un pedido
        ENDIF.
        IF <detalle>-omeng <> 0.
          IF <detalle>-meins_pv = <detalle>-meins.
            <detalle>-clabs = <detalle>-omeng.
          ELSE.
            <detalle>-clabs = o_cache->get_mat( matnr          = <detalle>-matnr
                                        cantidad       = <detalle>-omeng
                                        unidad_origen  = <detalle>-meins_pv
                                        unidad_destino = <detalle>-meins ).
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF p_numpc = 'X'.
      sgpi_texto( 'Seleccionando pedidos de compra' ).
      SELECT 'PC'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl,
             marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             mdbs~ebeln, mdbs~ebelp, mdbs~etenr,
             mdbs~lgort, mdbs~menge, mdbs~meins AS meins_po,
*             mdbs~bedat, "APC20240910 Alfredo solicita ver esta fecha
             mdbs~eindt AS bedat,
             mdbs~wemng, "Cantidad entrgada
             ekko~lifnr, lfa1~name1 AS name1p
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN mdbs ON  marc~matnr = mdbs~matnr
                            AND marc~werks = mdbs~werks
                  JOIN ekko ON ekko~ebeln = mdbs~ebeln
                  LEFT OUTER JOIN lfa1 ON ekko~lifnr = lfa1~lifnr
                  LEFT OUTER JOIN mcha ON  mdbs~matnr = mcha~matnr
                                       AND mdbs~werks = mcha~werks
                                       AND mdbs~charg = mcha~charg
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
          AND mara~matkl IN @s_matkl
          AND marc~werks IN @s_werks
          AND marc~dispo IN @s_dispo
          AND mdbs~lgort IN @s_lgort
          AND mdbs~loekz  = ''
          AND mdbs~elikz  = ''
          AND mcha~ersda IN @s_ersda
          AND mcha~hsdat IN @s_hsdat
          AND mcha~vfdat IN @s_vfdat
          AND ekko~bedat IN @s_fdoc.

* Stock subco
      SELECT 'NS'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl,
             marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             mdrs~lgort, mdrs~bdmng AS menge, enmng AS wemng, mdrs~meins AS amein,
             mdrs~aufnr, mdrs~bdter AS pedtr, mdrs~charg,
             mdrs~baugr, mdrs~shkzg,
             mdrs~ebeln, mdrs~ebelp
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN mdrs ON  marc~matnr = mdrs~matnr
                            AND marc~werks = mdrs~werks
                  JOIN ekpo ON  ekpo~ebeln = mdrs~ebeln
                            AND ekpo~ebelp = mdrs~ebelp
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr  IN @r_matnr
          AND mara~matnr  IN @r_matnr_sel
          AND mara~mtart  IN @s_mtart
          AND mara~matkl  IN @s_matkl
          AND mdrs~werks  IN @s_werks
          AND marc~dispo  IN @s_dispo
          AND mdrs~lgort  IN @s_lgort
          AND mdrs~xloek   = ''
          AND mdrs~kzear   = ''
          AND mdrs~xwaok   = ''
          AND mdrs~bdart   = 'BB'
          AND mdrs~bdter IN @s_fdoc.

      LOOP AT i_detalle ASSIGNING <detalle> WHERE ( tipo = 'PC' OR tipo = 'NS' ) AND menge <> 0.
        <detalle>-clabs = <detalle>-menge - <detalle>-wemng.
        IF <detalle>-meins_po NE <detalle>-meins.

          <detalle>-clabs = o_cache->get_mat( matnr          = <detalle>-matnr
                                      cantidad       = <detalle>-clabs
                                      unidad_origen  = <detalle>-meins_po
                                      unidad_destino = <detalle>-meins ).

          IF <detalle>-lgort IS INITIAL AND NOT <detalle>-ebeln IS INITIAL.
            SELECT SINGLE lgort FROM ekpo
              INTO <detalle>-lgort
             WHERE ebeln = <detalle>-ebeln
               AND ebelp = <detalle>-ebelp.
          ENDIF.

          IF <detalle>-tipo = 'NS'.
            <detalle>-clabs = - <detalle>-clabs.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF p_numor = 'X'.
      sgpi_texto( 'Seleccionando órdenes de fabricación' ).
      SELECT 'OF'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl,
             marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             mdfa~lgort, mdfa~gsmng, mdfa~wemng, mdfa~amein, mdfa~charg,
             mdfa~aufnr, mdfa~pedtr,
             caufv~auart, caufv~gltrp, caufv~gluzp,
             caufv~zzsubco_ebeln AS ebeln, caufv~zzsubco_ebelp AS ebelp,
             ekpo~lgort AS lgort_p
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN mdfa ON  marc~matnr = mdfa~matnr
                            AND marc~werks = mdfa~plwrk
                  JOIN caufv ON caufv~aufnr = mdfa~aufnr
                  LEFT OUTER JOIN ekpo ON  caufv~zzsubco_ebeln = ekpo~ebeln
                                       AND caufv~zzsubco_ebelp = ekpo~ebelp
                                       AND ekpo~ebeln <> ''
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
          AND marc~dispo IN @s_dispo
          AND mara~matkl IN @s_matkl
          AND (    ( marc~werks IN @s_werks AND mdfa~lgort IN @s_lgort )
                OR ( ekpo~werks IN @s_werks AND ekpo~lgort IN @s_lgort ) )
          AND mdfa~dnrel          IN @s_dnrel  " Relevante para fabricación
          AND caufv~gltrp         IN @s_fdoc
          AND caufv~loekz          = ''.


      SELECT 'RD'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl,
             marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             mdrs~lgort, mdrs~bdmng AS gsmng, enmng AS wemng, mdrs~meins AS amein,
             mdrs~aufnr, mdrs~bdter AS pedtr, mdrs~charg,
             mdrs~baugr, mdrs~shkzg,
             caufv~auart, caufv~gltrp, caufv~gluzp,
             mdrs~ebeln, mdrs~ebelp
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN mdrs ON  marc~matnr = mdrs~matnr
                            AND marc~werks = mdrs~werks
                  LEFT JOIN caufv ON caufv~aufnr = mdrs~aufnr
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr  IN @r_matnr
          AND mara~matnr  IN @r_matnr_sel
          AND mara~mtart  IN @s_mtart
          AND mara~matkl  IN @s_matkl
          AND mdrs~werks  IN @s_werks
          AND marc~dispo  IN @s_dispo
          AND mdrs~lgort  IN @s_lgort
          AND mdrs~xloek   = ''
          AND mdrs~kzear   = ''
          AND mdrs~xwaok   = ''
          AND caufv~gltrp IN @s_fdoc
          AND caufv~loekz          = ''. "No borradas

* Cogemos los datos de situación precalculados
      IF p_opt = 'X'.
        DATA r_aufnr TYPE RANGE OF aufnr.
        LOOP AT i_detalle ASSIGNING <detalle> WHERE tipo = 'OF' OR tipo = 'RD' AND NOT aufnr IS INITIAL.
          IF NOT line_exists( r_aufnr[ low = <detalle>-aufnr ] ).
            APPEND VALUE #( option = 'EQ' sign = 'I' low = <detalle>-aufnr ) TO r_aufnr.
          ENDIF.
        ENDLOOP.
        IF NOT r_aufnr IS INITIAL.
* Por si acaso, sólo cogemos la caché de las ordenes terminadas o con situación modificada en la última hora
          DATA ultima_hora TYPE sy-uzeit.
          IF sy-uzeit > '010000'.
            ultima_hora = sy-uzeit - 3600.
          ENDIF.

          SELECT aufnr, situacion, aedat FROM zaufk
            INTO CORRESPONDING FIELDS OF TABLE @i_zaufk
           WHERE aufnr IN @r_aufnr
             AND ( ( situacion = '02' OR situacion = '06' )
                 OR ( aedat_sc = @sy-datum AND aezet_sc > @ultima_hora )
                 ).
        ENDIF.
      ENDIF.

      LOOP AT i_detalle ASSIGNING <detalle> WHERE tipo = 'OF' OR tipo = 'RD'.

        IF <detalle>-tipo = 'OF'.
* Como necesitamos saber si la orden está terminada para excluirla ahora entramos siempre
*        IF p_deta = 'X'.
          get_detalle_orden( CHANGING det = <detalle> ).
*        ENDIF.
          IF <detalle>-situacion = '02' OR "Terminadas
             <detalle>-situacion = '03' OR "Cerradas sin nada fabricado
             <detalle>-situacion = '06'.   "Cierre administrativo
            DELETE i_detalle. CONTINUE.
          ENDIF.

          IF NOT <detalle>-lgort_p IS INITIAL.
            <detalle>-lgort = <detalle>-lgort_p.
          ENDIF.

          <detalle>-gwemg = zcl_ap_orden_pp=>get_ctd_movs_mm( aufnr = <detalle>-aufnr
                                                              matnr = <detalle>-matnr
                                                              bwart = '101'
                                                              bwart2 = '102'
                                                              meins = <detalle>-amein ).
        ENDIF.

* Las órdenes en que se ha informado pedido de subcontración queremos el almacén del pedido, no el de la orden
        IF NOT <detalle>-ebeln IS INITIAL AND NOT <detalle>-ebelp IS INITIAL.
          DATA(l_alm_inicial) = <detalle>-lgort.
          SELECT SINGLE werks lgort FROM ekpo
            INTO CORRESPONDING FIELDS OF <detalle>
           WHERE ebeln = <detalle>-ebeln
             AND ebelp = <detalle>-ebelp.

          IF l_alm_inicial = '1400' AND <detalle>-lgort <> l_alm_inicial.
            <detalle>-tipo = 'SP'.
          ENDIF.

* En necesidades, a veces viene del pedido de compras y tenemos que buscar la orden a partir de la imputación del pedido.
          IF <detalle>-aufnr IS INITIAL.
            SELECT aufnr
              FROM ekkn
              INTO @<detalle>-aufnr
              UP TO 1 ROWS
              WHERE ebeln  = @<detalle>-ebeln
                AND ebelp  = @<detalle>-ebelp
                AND aufnr <> ''
              ORDER BY PRIMARY KEY.
            ENDSELECT.
            IF sy-subrc = 0.
              SELECT SINGLE auart gltrp gluzp FROM caufv
                INTO CORRESPONDING FIELDS OF <detalle>
               WHERE aufnr = <detalle>-aufnr.
            ENDIF.
          ENDIF.
        ENDIF.

        IF <detalle>-gsmng = 0.
          DELETE i_detalle. CONTINUE.
        ENDIF.

        IF <detalle>-tipo = 'RD'.
          IF <detalle>-wemng >= <detalle>-gsmng.
            DELETE i_detalle.
            CONTINUE.
          ENDIF.
          <detalle>-gsmng = <detalle>-gsmng - <detalle>-wemng.
          IF <detalle>-shkzg = 'H'.
            <detalle>-gsmng = - <detalle>-gsmng.
            <detalle>-wemng = - <detalle>-wemng.
          ENDIF.
        ENDIF.

        l_ctd = <detalle>-gsmng - <detalle>-gwemg.
        IF <detalle>-amein = <detalle>-meins.
          <detalle>-clabs = l_ctd.
        ELSE.
          <detalle>-clabs = o_cache->get_mat( matnr          = <detalle>-matnr
                                      cantidad       = l_ctd
                                      unidad_origen  = <detalle>-amein
                                      unidad_destino = <detalle>-meins ).
        ENDIF.

      ENDLOOP.

    ENDIF.

    IF p_numop = 'X'.
      sgpi_texto( 'Seleccionando órdenes previsionales' ).
      SELECT 'OP'       AS tipo,
             mara~matnr, mara~mtart, mara~meins, mara~matkl,
             marc~werks, marc~xchpf, marc~dispo, marc~dismm, marc~beskz, marc~sobsl,
             plaf~lgort,
             plaf~plnum, plaf~pedtr, plaf~paart AS auart,
             plaf~gsmng, plaf~meins AS amein
        FROM mara JOIN marc ON mara~matnr = marc~matnr
                  JOIN plaf ON  marc~matnr = plaf~matnr
                            AND marc~werks = plaf~plwrk
        APPENDING CORRESPONDING FIELDS OF TABLE @i_detalle
        WHERE mara~matnr IN @r_matnr
          AND mara~matnr IN @r_matnr_sel
          AND mara~mtart IN @s_mtart
          AND mara~matkl IN @s_matkl
          AND plaf~plwrk IN @s_werks
          AND marc~dispo IN @s_dispo
          AND plaf~lgort IN @s_lgort
          AND plaf~pedtr IN @s_fdoc.

      LOOP AT i_detalle ASSIGNING <detalle> WHERE tipo = 'OP'.

        IF <detalle>-gsmng <> 0.
          IF <detalle>-amein = <detalle>-meins.
            <detalle>-clabs = <detalle>-gsmng.
          ELSE.
            <detalle>-clabs = o_cache->get_mat( matnr          = <detalle>-matnr
                                        cantidad       = <detalle>-gsmng
                                        unidad_origen  = <detalle>-amein
                                        unidad_destino = <detalle>-meins ).
          ENDIF.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IF p_stktr = 'X'.
      sgpi_texto( 'Seleccionando stock en transito' ).

* Llamamos a la MB5T para recuperar stock en transito
      FREE MEMORY ID 'ZMB5T'.
      SET PARAMETER ID 'ZMB5T' FIELD 'X'.
      SUBMIT rm07mtrb
        AND RETURN
             WITH matnr IN r_matnr_sel
             WITH werks IN s_werks
             WITH xnlcc = ''.

      IMPORT i_mb5t TO i_mb5t FROM MEMORY ID 'ZMB5T'.
      FREE MEMORY ID 'ZMB5T'.

      LOOP AT i_mb5t ASSIGNING FIELD-SYMBOL(<mb5t>).
        CLEAR l_detalle.
        MOVE-CORRESPONDING <mb5t> TO l_detalle.
        SELECT SINGLE mtart meins matkl FROM mara
          INTO CORRESPONDING FIELDS OF l_detalle
         WHERE matnr  = l_detalle-matnr
           AND mtart IN s_mtart
           AND matkl IN s_matkl.
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.

        SELECT SINGLE dispo dismm beskz sobsl FROM marc
          INTO CORRESPONDING FIELDS OF l_detalle
         WHERE matnr  = l_detalle-matnr
           AND werks  = l_detalle-werks
           AND dispo IN s_dispo.
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.

        IF l_detalle-lgort IS INITIAL.
          SELECT SINGLE lgort FROM ekpo
            INTO l_detalle-lgort
           WHERE ebeln = l_detalle-ebeln
             AND ebelp = l_detalle-ebelp.
        ENDIF.
        IF l_detalle-lgort NOT IN s_lgort.
          CONTINUE.
        ENDIF.

        SELECT  eket~charg FROM eket
          INTO l_detalle-charg
          UP TO 1 ROWS
         WHERE ebeln = l_detalle-ebeln
           AND ebelp = l_detalle-ebelp
         ORDER BY charg.
        ENDSELECT.

        IF NOT l_detalle-charg IS INITIAL.
          SELECT SINGLE ersda hsdat vfdat FROM mch1
            INTO CORRESPONDING FIELDS OF l_detalle
           WHERE matnr = l_detalle-matnr
             AND charg = l_detalle-charg.
        ENDIF.

        IF     l_detalle-charg IN s_charg
           AND l_detalle-ersda IN s_ersda
           AND l_detalle-hsdat IN s_hsdat
           AND l_detalle-vfdat IN s_vfdat.

          SELECT SINGLE bedat FROM ekko
            INTO l_detalle-bedat
           WHERE ebeln = l_detalle-ebeln.

          l_detalle-tipo     = 'TR'.
          l_detalle-meins_po = <mb5t>-meins.
          IF l_detalle-meins_po = l_detalle-meins.
            l_detalle-clabs = l_detalle-menge.
          ELSE.
            l_detalle-clabs = o_cache->get_mat( matnr          = l_detalle-matnr
                                        cantidad       = l_detalle-menge
                                        unidad_origen  = l_detalle-meins_po
                                        unidad_destino = l_detalle-meins ).
          ENDIF.
          APPEND l_detalle TO i_detalle.
        ENDIF.
      ENDLOOP.
    ENDIF.

    DELETE i_detalle WHERE NOT matnr IN r_matnr_cli.

* Verificamos autorización a nivel de almacén
    DATA i_alm TYPE TABLE OF mard.
    LOOP AT i_detalle ASSIGNING <detalle> WHERE NOT lgort IS INITIAL.
      IF NOT line_exists( i_alm[ werks = <detalle>-werks lgort = <detalle>-lgort ] ).
        APPEND VALUE #( werks = <detalle>-werks lgort = <detalle>-lgort ) TO i_alm.
      ENDIF.
    ENDLOOP.
    LOOP AT i_alm ASSIGNING FIELD-SYMBOL(<alm>).
      AUTHORITY-CHECK OBJECT 'M_MSEG_LGO'
                      ID 'ACTVT' FIELD '03'
                      ID 'WERKS' FIELD <alm>-werks
                      ID 'LGORT' FIELD <alm>-lgort.
      IF sy-subrc <> 0.
        DELETE i_detalle WHERE werks = <alm>-werks AND lgort = <alm>-lgort.
      ENDIF.
    ENDLOOP.

    IF p_semis = 'X'.
      IF p_export IS INITIAL.
        MOVE-CORRESPONDING i_detalle TO i_mat_cuobj.
        SORT i_mat_cuobj.
        DELETE ADJACENT DUPLICATES FROM i_mat_cuobj.
      ELSE.
        SELECT * FROM marc
          INTO CORRESPONDING FIELDS OF TABLE i_mat_cuobj
         WHERE matnr IN r_matnr
           AND werks IN s_werks.
      ENDIF.

      NEW zhcl_mm_core( )->get_semis( EXPORTING i_mat = i_mat_cuobj
                                                aviso_duplicados = 'X'
                                      IMPORTING semis = semis ).



* Si hay semis buscamos su stock
      DATA: r_werks_sel TYPE RANGE OF werks_d,
            lr_werks    LIKE LINE OF r_werks_sel,
            lr_matnr    LIKE LINE OF r_matnr_sel.

      CLEAR r_matnr_sel.
      lr_werks-option = 'EQ'.
      lr_matnr-option = lr_werks-option.
      lr_werks-sign = 'I'.
      lr_matnr-sign = lr_werks-sign.
      LOOP AT semis ASSIGNING FIELD-SYMBOL(<semi>).
        lr_matnr-low = <semi>-semi.
        COLLECT lr_matnr INTO r_matnr_sel.
        lr_werks-low = <semi>-werks.
        COLLECT lr_werks INTO r_werks_sel.
      ENDLOOP.

      IF NOT r_werks_sel IS INITIAL AND NOT r_matnr_sel IS INITIAL.
* Es posible que haya centro asociados
        LOOP AT o_par->i_par ASSIGNING FIELD-SYMBOL(<par>) WHERE campo = 'WRK_EQUIV_SEMIS' AND valor <> '' AND valor2 <> ''.
          IF <par>-valor IN r_werks_sel.
            APPEND VALUE #( option = 'EQ' sign = 'I' low = <par>-valor2 ) TO r_werks_sel.
          ENDIF.
        ENDLOOP.
        NEW zhcl_mm_core( )->get_zstocks( EXPORTING r_matnr = r_matnr_sel
                                                    r_werks = r_werks_sel
                                                    stock_mm  = 'X'
                                                    stock_cliente  = 'X'
                                                    stock_especial  = 'X'
                                                    stock_subcontratacion  = 'X'
                                                    stock_transito = 'X'
                                                    ordenes_fabricacion = 'X'
                                                    detalle = 'X'
                                          IMPORTING i_zstocks_detalle = DATA(i_zstocks_semi) ).


* No queremos elementos de planificacion negativos
        DELETE i_zstocks_semi WHERE tipo = 'RD'.
        DELETE i_zstocks_semi WHERE tipo = 'OF' AND clabs < 0.

*APC20250226 También los añadimos como materiales normales aparte de alimentar los campos de stock adicionales
        DATA(i_det_aux) = i_detalle.
        LOOP AT i_zstocks_semi ASSIGNING FIELD-SYMBOL(<s>).
          IF NOT line_exists( i_det_aux[ matnr = <s>-matnr werks = <s>-werks lgort = <s>-lgort ] ). "Hago esto para evitar duplicar si hubieran añadido los materiales al filtro
            CLEAR l_detalle.
            MOVE-CORRESPONDING <s> TO l_detalle.
            APPEND l_detalle TO i_detalle.
          ENDIF.
        ENDLOOP.


        LOOP AT semis ASSIGNING <semi>.
* Como mínimo queremos que el ratio sea 1
          IF <semi>-ratio IS INITIAL.
            <semi>-ratio = 1.
          ENDIF.
          r_werks_sel = VALUE #( ( option = 'EQ' sign = 'I' low = <semi>-werks ) ).
          LOOP AT o_par->i_par ASSIGNING <par> WHERE campo = 'WRK_EQUIV_SEMIS' AND valor = <semi>-werks AND valor2 <> ''.
            APPEND VALUE #( option = 'EQ' sign = 'I' low = <par>-valor2 ) TO r_werks_sel.
          ENDLOOP.

* Sólo queremos como activo el de menor stock.
          CLEAR: i_semi_stock, l_semi_stock.
          MOVE-CORRESPONDING <semi> TO l_semi_stock.
          LOOP AT i_zstocks_semi ASSIGNING FIELD-SYMBOL(<zstock_semi>) WHERE     matnr  = <semi>-semi
                                                                             AND werks IN r_werks_sel.
            CLEAR l_stock.
            IF p_libre = 'X'.
              l_stock = l_stock + <zstock_semi>-clabs.
            ENDIF.
            IF p_cali = 'X'.
              l_stock = l_stock + <zstock_semi>-cinsm.
            ENDIF.
            IF p_bloque = 'X'.
              l_stock = l_stock + <zstock_semi>-cspem - <zstock_semi>-zzcm_defectuosa.
            ENDIF.

            IF <zstock_semi>-tipo = 'MM'.
              l_semi_stock-stock_mm = l_semi_stock-stock_mm + l_stock.
            ELSE.
              l_semi_stock-ctd_ord = l_semi_stock-ctd_ord + l_stock.
            ENDIF.
            COLLECT l_semi_stock INTO i_semi_stock.
          ENDLOOP.

          LOOP AT i_zstocks_semi ASSIGNING <zstock_semi> WHERE     matnr  = <semi>-semi
                                                               AND werks IN r_werks_sel.
            CLEAR l_detalle.
            MOVE-CORRESPONDING <zstock_semi> TO l_detalle.
            l_detalle-semi       = l_detalle-matnr.
            l_detalle-semi_werks = l_detalle-werks.
            l_detalle-matnr      = <semi>-matnr.
            l_detalle-werks      = <semi>-werks.
            l_detalle-ratio      = <semi>-ratio.
            IF lines( i_semi_stock ) <= 1.
              l_detalle-activo = 'X'.
            ELSE.
              IF <zstock_semi>-tipo = 'MM'.
                SORT i_semi_stock BY stock_mm.
              ELSE.
                SORT i_semi_stock BY ctd_ord.
              ENDIF.
              IF i_semi_stock[ 1 ]-semi = l_detalle-semi.
                l_detalle-activo = 'X'.
              ENDIF.
            ENDIF.
            IF l_detalle-activo = 'X'.
              zcl_ap_alv_grid=>append_color( EXPORTING campo = '' colorc = 'AZUL' CHANGING tabla_color = l_detalle-color ).
            ELSE.
              zcl_ap_alv_grid=>append_color( EXPORTING campo = '' colorc = 'N' CHANGING tabla_color = l_detalle-color ).
            ENDIF.
            APPEND l_detalle TO i_detalle.
          ENDLOOP.
        ENDLOOP.
      ENDIF.
    ENDIF.

    sgpi_texto( 'Preparando información' ).
    LOOP AT i_detalle ASSIGNING <detalle>.
      <detalle>-maktx = get( tabla = 'MAKT'
                             clave = <detalle>-matnr ).

      IF NOT <detalle>-kunnr IS INITIAL.
        <detalle>-name1 = get( tabla = 'KNA1' clave = <detalle>-kunnr ).
      ENDIF.
      IF NOT <detalle>-lifnr IS INITIAL.
        <detalle>-name1p = get( tabla = 'LFA1' clave = <detalle>-lifnr ).
      ENDIF.

      IF <detalle>-tipo = 'PV' AND <detalle>-vbtyp = 'J'.
        <detalle>-tipo = 'EN'.
      ENDIF.

      IF <detalle>-sobkz <> ''.
        <detalle>-sotxt = get( tabla = 'T148T' clave = <detalle>-sobkz ).
      ENDIF.

      LOOP AT i_set_ramos ASSIGNING FIELD-SYMBOL(<set_ramo>) WHERE NOT r_mtart IS INITIAL.
        IF <detalle>-mtart IN <set_ramo>-r_mtart.
          <detalle>-tipo_mat = <set_ramo>-id.
        ENDIF.
      ENDLOOP.

      IF <detalle>-lgort IS INITIAL AND NOT <detalle>-werks IS INITIAL.
        <detalle>-lgort = o_par->get_atr1( campo = 'ALMACEN_DEFECTO' valor = <detalle>-werks valor2 = <detalle>-tipo_mat ).
      ENDIF.

      <detalle>-clave = |{ <detalle>-werks }_{ <detalle>-lgort }_{ <detalle>-matnr }|.
    ENDLOOP.

    IF NOT s_lgort[] IS INITIAL.
      DELETE i_detalle WHERE NOT lgort IN s_lgort.
    ENDIF.


    IF p_list = 'X'.
      IF p_numcl = 'X'.
        i_catalogo = NEW zhcl_sd_core( )->get_catalogo( r_matnr = r_matnr_sel ).
        SORT i_catalogo BY matnr kunnr.

        LOOP AT i_catalogo ASSIGNING FIELD-SYMBOL(<catalogo>).
          IF NOT line_exists( i_mat_cli[ kunnr = <catalogo>-kunnr matnr = <catalogo>-matnr ] ).
            MOVE-CORRESPONDING <catalogo> TO l_mat_cli.
            INSERT l_mat_cli INTO TABLE i_mat_cli.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    SORT i_detalle BY clave
                      charg
                      tipo.

    IF p_export = 'D' OR p_export = '*'.
      MOVE-CORRESPONDING i_detalle TO i_zstocks_detalle.
      EXPORT i_zstocks_detalle FROM i_zstocks_detalle TO MEMORY ID 'ZSTOCKS_DETALLE'.
      IF p_export = 'D'.
        IF p_opt = 'X'.
          o_pp->export_datos_globales( ).
        ENDIF.
        LEAVE PROGRAM.
      ENDIF.
    ENDIF.

    i_detalle_todo = i_detalle.
  ENDMETHOD.

  METHOD get_detalle_orden.
    CHECK NOT det-aufnr IS INITIAL.

    ASSIGN i_zaufk[ aufnr = det-aufnr ] TO FIELD-SYMBOL(<aufk>).
    IF sy-subrc = 0.
      det-situacion = <aufk>-situacion.
    ELSE.
      det-situacion = o_pp->get_situacion_of( det-aufnr ).
    ENDIF.

    IF p_opt IS INITIAL.
      det-situacion_txt = get( tabla = 'D ZSSD_DO_SITUACION' clave = det-situacion ).

      det-ruta = o_pp->get_ruta( matnr = det-matnr
                                 werks = det-werks ).
    ENDIF.

  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe' ).

    o_alv->add_button( button = 'F01' text   = 'MD04' icon   = icon_list qinfo  = 'Consulta la MD04 para el material' ucomm  = 'MD04' forzar = 'X' ).
    o_alv->add_button( button = 'F02' text   = 'Consulta pedidos 360' icon   = icon_partner_sales_activity qinfo  = 'Consulta pedidos 360' ucomm  = 'Z360' forzar = 'X' ).
    o_alv->add_button( button = 'F03' icon   = icon_stock text = 'Stock CM' ucomm  = 'STOCK_CM' forzar = 'X' ).
    o_alv->add_button( button = 'F04' icon   = icon_display text = 'MB51' ucomm  = 'MB51' forzar = 'X' ).
    o_alv->add_button( button = 'F07' icon   = icon_refresh qinfo  = 'Refrescar' ucomm  = 'REFRESCAR' forzar = 'X' ).
    o_alv->add_button( button = 'M01' text = 'Semis' ucomm  = 'SEMIS' ).
    o_alv->add_button( button = 'M02' text = 'Semis -> PTs' ucomm  = 'PTS' ).

    o_alv->set_layout( p_varil ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X'
                             CHANGING  t_tabla         = i_listado ).
    o_alv->set_top_of_page( ).

    o_alv->set_field_quitar( 'CLAVE,CHECK' ).
    o_alv->set_field( campo = 'LIGHTS' op    = 'KEY' ).
    o_alvd->set_field_hotspot( campo = 'MATNR' auto  = 'X' ).
    o_alv->set_field_text( campo = 'NUM_LOTES' valor = 'NºLotes' valor2 = 'Nº de lotes distintos' ).
    o_alv->set_field_text( campo = 'ERSDA' valor = 'FCrLote' valor2 = 'Fecha de creación del lote más antiguo' ).
    o_alv->set_field_text( campo = 'NUM_CLI_MAT' valor = 'Cl./Mat.' valor2 = 'Nº de clientes asociados al material por área de ventas' ).
    o_alv->set_field_text( campo = 'NUM_CLI_STK' valor = 'NºCli/Stk' valor2 = 'Nº de clientes con stock por pedido de cliente' ).
    o_alv->set_field_text( campo = 'NUM_UAS' valor = 'NºUAS' valor2 = 'Nº de UAS en ubicaciones WM' ).
    o_alv->set_field_text( campo = 'STOCK_MM' valor = 'Stock MM' ).
    o_alv->set_field_text( campo = 'STOCK_WM' valor = 'Stock WM' ).
    o_alv->set_field_text( campo = 'STOCK_CLIENTE' valor = 'StkCliente' ).
    o_alv->set_field_text( campo = 'STOCK_FIS_TOTAL' valor = 'StckFisTotal' valor2 = 'Stock Físico Total = Stck. MM + Stck. Cliente' ).
    o_alv->set_field_text( campo = 'FECHA_STKCL' valor = 'FCrStkCli' valor2 = 'Fecha stock de cliente más antiguo' ).
    o_alv->set_field_text( campo = 'STOCK_CLI_ESP' valor = 'StkEspecial' valor2 = 'Stock especial' ).
    o_alv->set_field_text( campo = 'FECHA_STKCL_ESP' valor = 'FStkCliEsp' valor2 = 'Fecha stock especial de cliente más antiguo' ).
    o_alv->set_field_text( campo = 'AUDAT_P' valor = 'FDispPed.Ab.' valor2 = 'Fecha disponibilidad de pedido más antiguo' ).
    o_alv->set_field_text( campo = 'LFDAT' valor = 'FCrAlb.Ab.' valor2 = 'Fecha entrega más antigua' ).
    o_alv->set_field_text( campo = 'PEDTR_OF' valor = 'FCrOrd.Ab.' valor2 = 'Fecha orden más antigua' ).
    o_alv->set_field_text( campo = 'PEDTR_PREV' valor = 'FCrOrdPrev.' valor2 = 'Fecha orden previsional más antigua' ).
    o_alv->set_field_text( campo = 'STOCK_SUBCONT' valor = 'StkSubcont' valor2 = 'Stock subcontratación' ).
    o_alv->set_field_text( campo = 'STOCK_TRANSITO' valor = 'StkTransito' valor2 = 'Stock en transito' ).
    o_alv->set_field_text( campo = 'FECHA_STOCK_TRANSITO' valor = 'FStkTra' valor2 = 'Fecha stock transito más antiguo' ).
    o_alv->set_field_text( campo = 'BEDAT_P' valor = 'FPC.Ab.' valor2 = 'Fecha pedido de compras más antiguo' ).
    o_alv->set_field_text( campo = 'FSTKSUB' valor = 'FStkSub' valor2 = 'Fecha stock subcontratación más antiguo' ).
    o_alv->set_field_text( campo = 'ROTACION' valor = 'Rotación' valor2 = 'Rotación' ).
    o_alv->set_field_text( campo = 'DIAS_ROTURA' valor = 'D.Rotura' valor2 = 'Días rotura de stock' ).
    o_alv->set_field_text( campo = 'PED_ABIERTOS' valor = 'NºPed.Ab.' valor2 = 'Pedidos abiertos' ).
    o_alv->set_field_text( campo = 'CTD_PED' valor = 'Ctd.PedAb.' valor2 = 'Cantidad Pedidos de ventas abiertos' ).
    o_alv->set_field_text( campo = 'CTD_ALB' valor = 'Ctd.AlbAb.' valor2 = 'Cantidad Albaranes abiertos' ).
    o_alv->set_field_text( campo = 'CTD_ORD' valor = 'Ctd.OrdAb.' valor2 = 'Cantidad Ordenes abiertas' ).
    o_alv->set_field_text( campo = 'CTD_ORD_PREV' valor = 'Ctd.OrdPrev.' valor2 = 'Cantidad Ordenes Previsionales' ).
    o_alv->set_field_text( campo = 'CTD_PC' valor = 'Ctd.PC.' valor2 = 'Cantidad pedidos de compras abiertos' ).
    o_alv->set_field_text( campo = 'ALB_ABIERTOS' valor = 'NºAlb.Ab.' valor2 = 'Nº Albaranes abiertos' ).
    o_alv->set_field_text( campo = 'ORD_ABIERTAS' valor = 'NºOrd.Ab.' valor2 = 'Nº Órdenes abiertas' ).
    o_alv->set_field_text( campo = 'ORD_PREV' valor = 'NºOrd.Prev.' valor2 = 'Nº Órdenes previsionales' ).
    o_alv->set_field_text( campo = 'PC_ABIERTOS' valor = 'NºPC.Ab.' valor2 = 'Nº Pedidos de compras abiertas' ).
    o_alv->set_field_text( campo = 'TIPO_MAT' valor = 'T.Mat.' valor2 = 'Tipo material' ).
    o_alv->set_orden( 'WERKS,MATNR,MAKTX,MTART,LGORT' ).

    o_alv->set_field( campo = 'STOCK_MM,STOCK_WM,STOCK_CLIENTE,STOCK_FIS_TOTAL,STOCK_CLI_ESP,STOCK_SUBCONT,STOCK_TRANSITO,ROTACION,DIAS_ROTURA,STOCK_CLI_ESP,SEMI_STOCK_MM,SEMI_CTD_ORD'
                      op = 'DECIMALS' valor = p_dec ).
    o_alv->set_field( campo = 'CTD_PED,CTD_ALB,CTD_ORD,CTD_PC,CTD_ORD_PREV' op = 'DECIMALS' valor = p_dec ).

    IF p_stkmm IS INITIAL.
      o_alv->set_field_quitar( 'STOCK_MM' ).
    ENDIF.
    IF p_stkwm IS INITIAL.
      o_alv->set_field_quitar( 'STOCK_WM,NUM_UAS' ).
    ENDIF.
    IF p_stkcl IS INITIAL AND NOT line_exists( i_detalle[ tipo = 'SC' ] ).
      o_alv->set_field_quitar( 'STOCK_CLIENTE,FECHA_STKCL' ).
    ENDIF.
    IF p_stkcs IS INITIAL.
      o_alv->set_field_quitar( 'STOCK_CLI_ESP,FECHA_STKCL_ESP' ).
    ENDIF.
    IF p_stkpr IS INITIAL.
      o_alv->set_field_quitar( 'STOCK_SUBCONT,LFDAT' ).
    ENDIF.
    IF p_stktr IS INITIAL.
      o_alv->set_field_quitar( 'STOCK_TRANSITO,BEDAT_P' ).
    ENDIF.
    IF p_stkro IS INITIAL.
      o_alv->set_field_quitar( 'ROTACION,DIAS_ROTURA' ).
    ENDIF.
    IF p_numpv IS INITIAL.
      o_alv->set_field_quitar( 'PED_ABIERTOS,AUDAT_P,CTD_PED' ).
    ENDIF.
    IF p_numal IS INITIAL.
      o_alv->set_field_quitar( 'ALB_ABIERTOS,LFDAT,CTD_ALB' ).
    ENDIF.
    IF p_numor IS INITIAL.
      o_alv->set_field_quitar( 'ORD_ABIERTAS,CTD_ORD' ).
    ENDIF.
    IF p_numop IS INITIAL.
      o_alv->set_field_quitar( 'ORD_PREV,CTD_ORD_PREV,PEDTR_PREV' ).
    ENDIF.
    IF p_numpc IS INITIAL.
      o_alv->set_field_quitar( 'PC_ABIERTOS,BEDAT_P,CTD_PC' ).
    ENDIF.

    IF p_semis IS INITIAL.
      o_alv->set_field_quitar( 'SEMI,SEMI_STOCK_MM,SEMI_CTD_ORD,SEMI_RATIO' ).
    ELSE.
      o_alv->set_field_text( campo = 'SEMI_STOCK_MM' valor = 'SEMI Stock MM' ).
      o_alv->set_field_text( campo = 'SEMI_CTD_ORD' valor = 'SEMI Ctd.OrdAb.' valor2 = 'SEMI Cantidad Ordenes abiertas' ).
      o_alv->set_field_text( campo = 'SEMI_NUM_SEMIS' valor = 'Nº Semis' valor2 = 'Nº de semis' ).
    ENDIF.

    IF p_pt IS INITIAL.
      o_alv->set_field_quitar( 'MATNR_PT,MAKTX_PT,RATIO_PT' ).
    ELSE.
      o_alv->set_field_text( campo = 'MATNR_PT' valor = 'PT Asociado' ).
      o_alv->set_field_text( campo = 'MAKTX_PT' valor = 'Descr.PT ASociado' valor2 = 'Descripción PT ASociado' ).
      o_alv->set_field_text( campo = 'RATIO_PT' valor = 'Ratio PT' ).
    ENDIF.

    o_alv->show( ).
  ENDMETHOD.

  METHOD listado_detalle.
    DATA: l_tipo   TYPE string,
          l_tipo2  TYPE string,
          l_handle TYPE slis_handl.

    sgpi_texto( 'Generando informe' ).

    o_alvd->add_button( button = 'F01' text   = 'MD04' icon   = icon_list qinfo  = 'Consulta la MD04 para el material' ucomm  = 'MD04' ).
    CLEAR i_detalle.
    IF clave IS INITIAL.
      i_detalle = i_detalle_todo.
    ELSE.
      LOOP AT i_detalle_todo INTO DATA(l_detalle) USING KEY clave_key WHERE clave = clave. "#EC CI_STDSEQ

        IF ( l_detalle-tipo = 'OF' OR l_detalle-tipo = 'RD' ) AND p_deta IS INITIAL
           AND l_detalle-situacion IS INITIAL AND l_detalle-ruta IS INITIAL.
          get_detalle_orden( CHANGING det = l_detalle ).
        ENDIF.

        APPEND l_detalle TO i_detalle.
      ENDLOOP.

      CASE campo.
        WHEN 'STOCK_MM' OR 'ERSDA'. l_tipo = 'MM'.
        WHEN 'STOCK_WM' OR 'NUM_UAS'. l_tipo = 'WM'.
        WHEN 'STOCK_CLIENTE' OR 'NUM_CLI_STK'. l_tipo = 'SC'.
        WHEN 'STOCK_CLI_ESP'. l_tipo = 'SE'.
        WHEN 'STOCK_SUBCONT' OR 'FSTKSUB'. l_tipo = 'SP'.
        WHEN 'STOCK_TRANSITO'. l_tipo = 'TR'.
        WHEN 'ROTACION'. l_tipo = 'RO'.
        WHEN 'NUM_CLIENTES'. l_tipo = 'CL'.
        WHEN 'PED_ABIERTOS' OR 'CTD_PED' OR 'AUDAT_P'. l_tipo = 'PV'.
        WHEN 'ALB_ABIERTOS' OR 'CTD_ALB'. l_tipo = 'EN'.
        WHEN 'ORD_ABIERTAS' OR 'CTD_ORD' OR 'PEDTR_OF'. l_tipo = 'OF'. l_tipo2 = 'RD'.
        WHEN 'PC_ABIERTOS' OR 'CTD_PC'. l_tipo = 'PC'. l_tipo2 = 'NS'.
        WHEN 'ORD_PREV' OR 'CTD_ORD_PREV' OR 'PEDTR_PREV'.
          l_tipo = 'OP'.
        WHEN 'SEMI_STOCK_MM'.
          l_handle = 'S_MM'.
          DELETE i_detalle WHERE    semi = ''
                                 OR ( tipo = 'OF' OR tipo = 'RD' ).
        WHEN 'SEMI_CTD_ORD'.
          l_handle = 'S_OR'.
          DELETE i_detalle WHERE        semi = ''
                                 OR NOT ( tipo = 'OF' OR tipo = 'RD' ).
        WHEN OTHERS.
          IF sy-uname = zcl_c=>usuario_ap.
            MESSAGE |Columna { campo } no reconocida| TYPE 'S'.
          ENDIF.
          RETURN.
      ENDCASE.
      IF NOT l_tipo IS INITIAL.
        DELETE i_detalle WHERE    semi <> ''
                               OR ( semi = '' AND tipo <> l_tipo AND tipo <> l_tipo2 ).
      ENDIF.
      IF l_handle IS INITIAL.
        l_handle = l_tipo.
      ENDIF.
    ENDIF.

    IF p_list = 'X'.
      IF NOT o_alvd IS INITIAL.
        o_alvd->free( ).
        CLEAR o_alvd.
      ENDIF.

      o_prog->o_alvd = NEW #( status             = 'STANDARD_ALV_DYN'
                             status_prog        = 'ZP_STATUS'
                             tabla              = 'I_DETALLE'
                             top_of_page_auto   = 'X'
                             top_of_page_titulo = 'X'
                             handle             = l_handle
                             o_dev              = o_prog ).

      o_alvd->set_orden( campo  = 'WERKS,MATNR,MAKTX,MTART,LGORT,TIPO' ).
    ELSE.
      o_alvd->set_orden( campo  = 'WERKS,LGORT'
                         subtot = 'X' ).
      o_alvd->set_orden( campo = 'MATNR,MAKTX,MTART,MEINS,CHARG,TIPO'  ).
      o_alvd->set_layout( p_varid ).
    ENDIF.
    o_alvd->get_datos_layout( EXPORTING reordenar_tabla = 'X'
                              CHANGING  t_tabla         = i_detalle ).
    o_alvd->set_top_of_page( ).
    o_alvd->set_field_hotspot( campo = 'MATNR,LQNUM,AUFNR,VBELN,KUNNR,LIFNR,CHARG,EBELN,MBLNR' auto  = 'X' ).

    o_alvd->set_field_text( 'TIPO,SITUACION' ).
    o_alvd->set_field_text( campo = 'TIPO_MAT' valor = 'T.Mat.' valor2 = 'Tipo material' ).
    o_alvd->set_field_text( campo = 'SITUACION_TXT' valor = 'Situación' ).
    o_alvd->set_field_quitar( 'CLAVE,CHECK,SHKZG,ACTIVO' ).
    o_alvd->set_field( campo = 'CLABS,CINSM,CSPEM,GESME,VERME,EINME,AUSME'
                       op    = 'NO_CERO' ).
    o_alvd->set_agregacion( campo = 'CLABS,CINSM,CSPEM,GESME,VERME,EINME,AUSME' ).

    IF p_semis IS INITIAL.
      o_alvd->set_field_quitar( 'SEMI,SEMI_WERKS' ).
    ELSE.
      o_alvd->set_field_text( campo = 'SEMI_WERKS' valor = 'Centro semi' ).
    ENDIF.

    o_alvd->show( ).
  ENDMETHOD.

  METHOD agrupar_datos.
    TYPES: BEGIN OF t_mat_lote,
             clave TYPE string,
             charg TYPE charg_d,
           END OF t_mat_lote,
           BEGIN OF t_mat_ua,
             clave TYPE string,
             lenum TYPE lqua-lenum,
           END OF t_mat_ua,
           BEGIN OF t_mat_doc,
             clave TYPE string,
             vbeln TYPE vbeln_va,
           END OF t_mat_doc,
           BEGIN OF t_mat_ord,
             clave TYPE string,
             aufnr TYPE aufnr,
           END OF t_mat_ord,
           BEGIN OF t_mat_ordp,
             clave TYPE string,
             plnum TYPE plnum,
           END OF t_mat_ordp,
           BEGIN OF t_mat_cli_stk,
             clave TYPE string,
             kunnr TYPE kunnr,
           END OF t_mat_cli_stk,
           BEGIN OF t_mat_centro,
             matnr TYPE matnr,
             werks TYPE werks_d,
           END OF t_mat_centro.

*APC20240603 Buscamos nº de material de cliente (si sólo tiene 1).
    TYPES: BEGIN OF t_mat_kdmat,
             matnr TYPE matnr,
             kdmat TYPE kdmat,
           END OF t_mat_kdmat,
           BEGIN OF t_mat_kunnr,
             matnr TYPE matnr,
             kunnr TYPE kunnr,
           END OF t_mat_kunnr.

    DATA: i_mat_kdmat TYPE SORTED TABLE OF t_mat_kdmat WITH UNIQUE KEY matnr kdmat,
          i_mat_kunnr TYPE SORTED TABLE OF t_mat_kunnr WITH UNIQUE KEY matnr kunnr.
    DATA i_mat_cuobj TYPE zhcl_mm_core=>tt_mat_cuobj.
    DATA l_detalle   TYPE t_detalle.
    DATA: r_matnr        TYPE RANGE OF matnr,
          lr_matnr       LIKE LINE OF r_matnr,
          l_listado      TYPE t_listado,
          i_mat_lote     TYPE SORTED TABLE OF t_mat_lote WITH UNIQUE KEY clave charg,
          i_mat_ua       TYPE SORTED TABLE OF t_mat_ua WITH UNIQUE KEY clave lenum,
          l_stock        TYPE mchb-clabs,
          i_mat_cli_stk  TYPE SORTED TABLE OF t_mat_cli_stk WITH UNIQUE KEY clave kunnr,
          i_mat_doc      TYPE SORTED TABLE OF t_mat_doc WITH UNIQUE KEY clave vbeln,
          i_mat_ord      TYPE SORTED TABLE OF t_mat_ord WITH UNIQUE KEY clave aufnr,
          i_mat_ordp     TYPE SORTED TABLE OF t_mat_ordp WITH UNIQUE KEY clave plnum,
          l_mat_centro   TYPE t_mat_centro,
          i_mat_centro   TYPE TABLE OF t_mat_centro,
          r_matnr_pt_sel TYPE RANGE OF matnr,
          r_werks_pt_sel TYPE RANGE OF werks_d.

    sgpi_texto( 'Agrupando datos' ).
    CLEAR i_listado.
    SORT i_detalle_todo BY clave
                           charg.

    lr_matnr-option = 'EQ'.
    lr_matnr-sign   = 'I'.

    LOOP AT i_detalle_todo ASSIGNING FIELD-SYMBOL(<detalle>) WHERE semi IS INITIAL.
      lr_matnr-low = <detalle>-matnr.
      COLLECT lr_matnr INTO r_matnr.

      READ TABLE i_listado ASSIGNING FIELD-SYMBOL(<listado>) WITH KEY clave = <detalle>-clave BINARY SEARCH.
      IF sy-subrc <> 0.
        CLEAR l_listado.
        MOVE-CORRESPONDING <detalle> TO l_listado.
        CLEAR l_listado-ersda.
        APPEND l_listado TO i_listado.
        READ TABLE i_listado ASSIGNING <listado> WITH KEY clave = <detalle>-clave BINARY SEARCH.
      ENDIF.

      IF <detalle>-tipo = 'MM' OR <detalle>-tipo = 'WM' OR <detalle>-tipo = 'SC' OR <detalle>-tipo = 'SP'.
        IF NOT line_exists( i_mat_lote[ clave = <detalle>-clave charg = <detalle>-charg ] ).
          <listado>-num_lotes = <listado>-num_lotes + 1.
          INSERT VALUE #( clave = <detalle>-clave charg = <detalle>-charg ) INTO TABLE i_mat_lote.
          IF <listado>-ersda IS INITIAL OR ( NOT <detalle>-ersda IS INITIAL AND <detalle>-ersda < <listado>-ersda ).
            <listado>-ersda = <detalle>-ersda.
          ENDIF.
        ENDIF.
      ENDIF.

      IF NOT <detalle>-lenum IS INITIAL.
        IF NOT line_exists( i_mat_ua[ clave = <detalle>-clave lenum = <detalle>-lenum ] ).
          <listado>-num_uas = <listado>-num_uas + 1.
          INSERT VALUE #( clave = <detalle>-clave lenum = <detalle>-lenum ) INTO TABLE i_mat_ua.
        ENDIF.
      ENDIF.

      CLEAR l_stock.
      IF p_libre = 'X'.
        l_stock = l_stock + <detalle>-clabs.
      ENDIF.
      IF p_cali = 'X'.
        l_stock = l_stock + <detalle>-cinsm.
      ENDIF.
      IF p_bloque = 'X'.
        l_stock = l_stock + <detalle>-cspem - <detalle>-zzcm_defectuosa.
      ENDIF.
      CASE <detalle>-tipo.
        WHEN 'MM'.
          <listado>-stock_mm        = <listado>-stock_mm + l_stock.
          <listado>-stock_fis_total = <listado>-stock_fis_total + l_stock.
        WHEN 'WM'.
          <listado>-stock_wm = <listado>-stock_wm + l_stock.
        WHEN 'SC'.
          <listado>-stock_cliente   = <listado>-stock_cliente + l_stock.
          <listado>-stock_fis_total = <listado>-stock_fis_total + l_stock.
          IF <listado>-fecha_stkcl IS INITIAL OR ( NOT <detalle>-mska_ersda IS INITIAL AND <detalle>-mska_ersda < <listado>-fecha_stkcl ).
            <listado>-fecha_stkcl = <detalle>-mska_ersda.
          ENDIF.
          IF NOT <detalle>-kunnr IS INITIAL.
            IF NOT line_exists( i_mat_cli_stk[ clave = <detalle>-clave kunnr = <detalle>-kunnr ] ).
              <listado>-num_cli_stk = <listado>-num_cli_stk + 1.
              INSERT VALUE #( clave = <detalle>-clave kunnr = <detalle>-kunnr ) INTO TABLE i_mat_cli_stk.
            ENDIF.
          ENDIF.
        WHEN 'SE'.
          <listado>-stock_cli_esp = <listado>-stock_cli_esp + l_stock.
          IF <listado>-fecha_stkcl_esp IS INITIAL OR ( NOT <detalle>-mska_ersda IS INITIAL AND <detalle>-mska_ersda < <listado>-fecha_stkcl_esp ).
            <listado>-fecha_stkcl_esp = <detalle>-mska_ersda.
          ENDIF.
          IF NOT <detalle>-kunnr IS INITIAL.
            IF NOT line_exists( i_mat_cli_stk[ clave = <detalle>-clave kunnr = <detalle>-kunnr ] ).
              <listado>-num_cli_stk = <listado>-num_cli_stk + 1.
              INSERT VALUE #( clave = <detalle>-clave kunnr = <detalle>-kunnr ) INTO TABLE i_mat_cli_stk.
            ENDIF.
          ENDIF.
        WHEN 'SP'.
          <listado>-stock_subcont = <listado>-stock_subcont + l_stock.
          IF <listado>-ersda IS INITIAL OR ( NOT <detalle>-ersda IS INITIAL AND <detalle>-ersda < <listado>-ersda ).
            <listado>-fstksub = <detalle>-ersda.
          ENDIF.
        WHEN 'TR'.
          <listado>-stock_transito = <listado>-stock_transito + l_stock.
          IF <listado>-fecha_stock_transito IS INITIAL OR ( NOT <detalle>-bedat IS INITIAL AND <detalle>-bedat < <listado>-fecha_stock_transito ).
            <listado>-fecha_stock_transito = <detalle>-bedat.
          ENDIF.
        WHEN 'RO'.
          <listado>-rotacion = <listado>-rotacion + l_stock.
        WHEN 'PV'.
          IF NOT <detalle>-vbeln IS INITIAL.
            IF NOT line_exists( i_mat_doc[ clave = <detalle>-clave vbeln = <detalle>-vbeln ] ).
              <listado>-ped_abiertos = <listado>-ped_abiertos + 1.
              INSERT VALUE #( clave = <detalle>-clave vbeln = <detalle>-vbeln ) INTO TABLE i_mat_doc.
            ENDIF.
            IF <listado>-audat_p IS INITIAL OR ( NOT <detalle>-mbdat IS INITIAL AND <detalle>-mbdat < <listado>-audat_p ).
              <listado>-audat_p = <detalle>-mbdat.
            ENDIF.
          ENDIF.
          <listado>-ctd_ped = <listado>-ctd_ped + <detalle>-clabs.
        WHEN 'EN'.
          IF NOT <detalle>-vbeln IS INITIAL.
            IF NOT line_exists( i_mat_doc[ clave = <detalle>-clave vbeln = <detalle>-vbeln ] ).
              <listado>-alb_abiertos = <listado>-alb_abiertos + 1.
              INSERT VALUE #( clave = <detalle>-clave vbeln = <detalle>-vbeln ) INTO TABLE i_mat_doc.
              IF <listado>-lfdat IS INITIAL OR ( NOT <detalle>-audat IS INITIAL AND <detalle>-audat < <listado>-lfdat ).
                <listado>-lfdat = <detalle>-audat.
              ENDIF.
            ENDIF.
          ENDIF.
          <listado>-ctd_alb = <listado>-ctd_alb + <detalle>-clabs.
        WHEN 'PC'  "Pedidos de compra
          OR 'NS'. "Necesidades subcontratación
          IF NOT <detalle>-ebeln IS INITIAL.
            IF NOT line_exists( i_mat_doc[ clave = <detalle>-clave vbeln = <detalle>-ebeln ] ).
              <listado>-pc_abiertos = <listado>-pc_abiertos + 1.
              INSERT VALUE #( clave = <detalle>-clave vbeln = <detalle>-ebeln ) INTO TABLE i_mat_doc.
              IF <listado>-bedat_p IS INITIAL OR ( NOT <detalle>-bedat IS INITIAL AND <detalle>-bedat < <listado>-bedat_p ).
                <listado>-bedat_p = <detalle>-bedat.
              ENDIF.
            ENDIF.
          ENDIF.
          <listado>-ctd_pc = <listado>-ctd_pc + <detalle>-clabs.

        WHEN 'OF' OR 'RD'.
          IF NOT <detalle>-aufnr IS INITIAL.
            IF NOT line_exists( i_mat_ord[ clave = <detalle>-clave aufnr = <detalle>-aufnr ] ).
              <listado>-ord_abiertas = <listado>-ord_abiertas + 1.
              INSERT VALUE #( clave = <detalle>-clave aufnr = <detalle>-aufnr ) INTO TABLE i_mat_ord.
              IF <listado>-pedtr_of IS INITIAL OR ( NOT <detalle>-pedtr IS INITIAL AND <detalle>-pedtr < <listado>-pedtr_of ).
                <listado>-pedtr_of = <detalle>-pedtr.
              ENDIF.
            ENDIF.
            <listado>-ctd_ord = <listado>-ctd_ord + <detalle>-clabs.
          ENDIF.
        WHEN 'OP'.
          IF NOT <detalle>-plnum IS INITIAL.
            IF NOT line_exists( i_mat_ordp[ clave = <detalle>-clave plnum = <detalle>-plnum ] ).
              <listado>-ord_prev = <listado>-ord_prev + 1.
              INSERT VALUE #( clave = <detalle>-clave plnum = <detalle>-plnum ) INTO TABLE i_mat_ordp.
              IF <listado>-pedtr_prev IS INITIAL OR ( NOT <detalle>-pedtr IS INITIAL AND <detalle>-pedtr < <listado>-pedtr_prev ).
                <listado>-pedtr_prev = <detalle>-pedtr.
              ENDIF.
            ENDIF.
            <listado>-ctd_ord_prev = <listado>-ctd_ord_prev + <detalle>-clabs.
          ENDIF.

      ENDCASE.
    ENDLOOP.

* SEMIS
    LOOP AT i_detalle_todo ASSIGNING <detalle> WHERE NOT semi IS INITIAL AND activo = 'X'.
* Los semis los unimos por centro no por almacén
*      READ TABLE i_listado ASSIGNING <listado> WITH KEY clave = <detalle>-clave BINARY SEARCH.
      READ TABLE i_listado ASSIGNING <listado> WITH KEY matnr = <detalle>-matnr werks = <detalle>-werks.
      IF sy-subrc <> 0.
        ASSIGN i_listado[ matnr = <detalle>-matnr
                          werks = <detalle>-werks ] TO <listado>.
        IF sy-subrc = 0.
          <detalle>-clave = <listado>-clave.
        ELSE.
          CLEAR l_listado.
          MOVE-CORRESPONDING <detalle> TO l_listado.
          CLEAR l_listado-ersda.
          APPEND l_listado TO i_listado.
          READ TABLE i_listado ASSIGNING <listado> WITH KEY clave_key COMPONENTS clave = <detalle>-clave.
        ENDIF.
      ENDIF.

      CLEAR l_stock.
      IF p_libre = 'X'.
        l_stock = l_stock + <detalle>-clabs.
      ENDIF.
      IF p_cali = 'X'.
        l_stock = l_stock + <detalle>-cinsm.
      ENDIF.
      IF p_bloque = 'X'.
        l_stock = l_stock + <detalle>-cspem.
      ENDIF.
      l_stock = l_stock * <detalle>-ratio.

      CASE <detalle>-tipo.
        WHEN 'OF' OR 'RD'.
          <listado>-semi_ctd_ord = <listado>-semi_ctd_ord + l_stock.
        WHEN OTHERS.
          <listado>-semi_stock_mm = <listado>-semi_stock_mm + l_stock.
      ENDCASE.
    ENDLOOP.

    SELECT matnr, kdmat FROM knmt
      INTO TABLE @i_mat_kdmat
     WHERE matnr IN @r_matnr
       AND kunnr IN @s_kunnr
       AND kdmat IN @s_kdmat
       AND kdmat <> ''
     GROUP BY matnr, kdmat
     ORDER BY matnr.

    SELECT matnr, kunnr FROM knmt
      INTO TABLE @i_mat_kunnr
     WHERE matnr IN @r_matnr
       AND kunnr IN @s_kunnr
       AND kdmat IN @s_kdmat
     GROUP BY matnr, kunnr
     ORDER BY matnr.

    IF p_pt = 'X' AND NOT i_listado IS INITIAL.
      LOOP AT i_listado ASSIGNING <listado> WHERE mtart = 'ZPSE'.
        MOVE-CORRESPONDING <listado> TO l_mat_centro.
        COLLECT l_mat_centro INTO i_mat_centro.
      ENDLOOP.
      IF NOT i_mat_centro IS INITIAL.
        MOVE-CORRESPONDING i_mat_centro TO i_mat_cuobj.
        NEW zhcl_mm_core( )->get_semis_pt( EXPORTING i_mat = i_mat_cuobj
                                           IMPORTING pts = DATA(i_semis_pt) ).
      ENDIF.
    ENDIF.

    LOOP AT i_listado ASSIGNING <listado>.
      LOOP AT semis ASSIGNING FIELD-SYMBOL(<semis>) WHERE     matnr = <listado>-matnr
                                                          AND werks = <listado>-werks.
        <listado>-semi_num_semis = <listado>-semi_num_semis + 1.
        IF <semis>-ratio > <listado>-semi_ratio.
          <listado>-semi_ratio = <semis>-ratio.
        ENDIF.
      ENDLOOP.
      IF <listado>-semi_num_semis = 0.
        <listado>-semi_stock_mm = -1.
        <listado>-semi_ctd_ord  = -1.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'SEMI_STOCK_MM,SEMI_CTD_ORD' colorc = 'G' inv = 1 CHANGING tabla_color = <listado>-color ).
      ENDIF.

      DATA(l_cont) = 0.
      LOOP AT i_mat_kdmat ASSIGNING FIELD-SYMBOL(<kdmat>) WHERE matnr = <listado>-matnr.
        l_cont = l_cont + 1.
        <listado>-kdmat = <kdmat>-kdmat.
      ENDLOOP.
      IF l_cont > 1.
        <listado>-kdmat = '*'.
      ENDIF.

      CLEAR l_cont.
      LOOP AT i_mat_kunnr ASSIGNING FIELD-SYMBOL(<kunnr>) WHERE matnr = <listado>-matnr.
        l_cont = l_cont + 1.
        <listado>-kunnr = <kunnr>-kunnr.
      ENDLOOP.
      IF l_cont > 1.
        <listado>-kunnr = '*'.
      ELSEIF l_cont = 1.
        <listado>-kunnr_t = get( tabla = 'KNA1' clave = <listado>-kunnr ).
      ENDIF.

      IF p_numcl = 'X'.
        LOOP AT i_mat_cli TRANSPORTING NO FIELDS WHERE matnr = <listado>-matnr.
          <listado>-num_cli_mat = <listado>-num_cli_mat + 1.
        ENDLOOP.
      ENDIF.

      IF <listado>-rotacion <> 0 AND p_stkro = 'X' AND p_diasr <> 0.
        <listado>-rotacion = abs( <listado>-rotacion / p_diasr ).
      ENDIF.

      IF <listado>-rotacion <> 0.
        <listado>-dias_rotura = abs( ( <listado>-stock_mm + <listado>-stock_subcont + <listado>-stock_transito + <listado>-stock_cliente + <listado>-stock_cli_esp ) / <listado>-rotacion ).
      ENDIF.

      IF p_pt = 'X'.
        LOOP AT i_semis_pt ASSIGNING FIELD-SYMBOL(<pt>) WHERE matnr = <listado>-matnr AND werks = <listado>-werks.
          <listado>-matnr_pt = <pt>-matnr_pt.
          <listado>-ratio_pt = <pt>-ratio.
          IF NOT r_matnr[] IS INITIAL OR NOT s_kunnr[] IS INITIAL.
            IF NOT line_exists( i_listado[ matnr = <pt>-matnr_pt ] ).
              APPEND VALUE #( option = 'EQ' sign = 'I' low = <pt>-matnr_pt ) TO r_matnr_pt_sel.
              APPEND VALUE #( option = 'EQ' sign = 'I' low = <pt>-werks ) TO r_werks_pt_sel.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF NOT <listado>-matnr_pt IS INITIAL.
          <listado>-maktx_pt = get( tabla = 'MAKT' clave = <listado>-matnr_pt ).
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF p_semis = 'X'.
* Informamos del semi en los materiales
      LOOP AT i_listado ASSIGNING <listado> WHERE mtart = 'ZPSE'.
        ASSIGN semis[ semi = <listado>-matnr ] TO FIELD-SYMBOL(<semi>).
        IF sy-subrc = 0.
          <listado>-matnr_pt = <semi>-matnr.
          LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<l2>) WHERE matnr = <semi>-matnr AND kunnr NE ''.
            <listado>-kunnr = <l2>-kunnr.
            <listado>-kunnr_t = <l2>-kunnr_t.
          ENDLOOP.
        ENDIF.
      ENDLOOP.

      LOOP AT i_listado ASSIGNING <listado> WHERE mtart = 'ZPTO'.
        ASSIGN semis[ matnr = <listado>-matnr ] TO <semi>.
        IF sy-subrc = 0.
          <listado>-semi = <semi>-semi.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF NOT r_matnr_pt_sel IS INITIAL.
      NEW zhcl_mm_core( )->get_zstocks( EXPORTING r_matnr = r_matnr_pt_sel
                                                  r_werks = r_werks_pt_sel
                                                  stock_mm  = p_stkmm
                                                  stock_wm = p_stkwm
                                                  stock_cliente  = p_stkcl
                                                  stock_especial  = p_stkcs
                                                  stock_subcontratacion  = p_stkpr
                                                  stock_transito = p_stktr
                                                  ordenes_fabricacion = p_numor
                                                  ordenes_previsionales = p_numop
                                                  pedidos_venta = p_numpv
                                                  albaranes = p_numal
                                                  pedidos_compra = p_numpc
                                                  detalle = '*'
                                                  semis = p_semis "APC20250227
                                        IMPORTING i_zstocks = DATA(i_zstocks_pt)
                                                  i_zstocks_detalle = DATA(i_zstocks_pt_detalle) ).
      LOOP AT i_zstocks_pt ASSIGNING FIELD-SYMBOL(<zstocks_pt>) WHERE matnr IN r_matnr_pt_sel.
        CLEAR l_listado.
        MOVE-CORRESPONDING <zstocks_pt> TO l_listado.
        l_listado-clave = |{ l_listado-werks }_{ l_listado-lgort }_{ l_listado-matnr }|.
        APPEND l_listado TO i_listado.
      ENDLOOP.
      LOOP AT i_zstocks_pt_detalle ASSIGNING FIELD-SYMBOL(<zstocks_pt_detalle>) WHERE matnr IN r_matnr_pt_sel.
        CLEAR l_detalle.
        MOVE-CORRESPONDING <zstocks_pt_detalle> TO l_detalle.
        l_detalle-clave = |{ l_detalle-werks }_{ l_detalle-lgort }_{ l_detalle-matnr }|.
        APPEND l_detalle TO i_detalle_todo.
      ENDLOOP.

    ENDIF.
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Parámetros' '' ''.
  PERFORM add_button IN PROGRAM zap_status USING 'M02' 'Semis' '' ''.

  IF zcl_usuario=>es_usuario_sistemas( ).
    DATA(l_restriccion_layout) = if_salv_c_layout=>restrict_none.
  ELSE.
    IF o_prog->o_par->exist( campo = 'LAYOUT' valor = sy-uname ).
      l_restriccion_layout = if_salv_c_layout=>restrict_none. "Usuario al que se le permite cambiar layouts
    ELSE.
      l_restriccion_layout = if_salv_c_layout=>restrict_user_dependant. " Sólo permitimos disposiciones de usuario
    ENDIF.
  ENDIF.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         color              = 'COLOR'
*                         top_of_page_auto   = 'X'
*                         top_of_page_titulo = 'X'
                         o_dev              = o_prog
                         restriccion_layout = l_restriccion_layout ).

  p_varil = o_prog->o_alv->get_default_layout( ).

  o_prog->o_alvd = NEW #( status             = 'STANDARD_ALV_DYN'
                          status_prog        = 'ZAP_STATUS'
                          tabla              = 'I_DETALLE'
                          color              = 'COLOR'
*                          top_of_page_auto   = 'X'
*                          top_of_page_titulo = 'X'
                          o_dev              = o_prog
                          restriccion_layout = l_restriccion_layout ).

  p_varid = o_prog->o_alvd->get_default_layout( ).

  DATA i_ramos TYPE tpda_vrm_values.
  zcl_mm_material_master=>s_get_ramos( EXPORTING get_rango_mtart = 'X'
                                       IMPORTING i_sets = i_set_ramos ).
  LOOP AT i_set_ramos ASSIGNING FIELD-SYMBOL(<set>).
    APPEND VALUE #( key = <set>-setnr text = <set>-descripcion ) TO i_ramos.
  ENDLOOP.
  zcl_ap_popup=>list_dynpro( campo   = 'P_RAMO'
                             valores = i_ramos ).

  zcl_ap_popup=>list_dynpro( campo   = 'P_MATC'
                             valores = VALUE #( ( key = 'C' text = 'Selección por cliente' )
                                                ( key = 'G' text = 'Generico' )
                                                ( key = 'CG' text = 'Selección por cliente + Genérico' ) ) ).

  READ TABLE o_prog->o_par->i_par ASSIGNING FIELD-SYMBOL(<par>) WITH KEY campo = 'DIAS_DOCUMENTOS'.
  IF sy-subrc = 0.
    s_fdoc[] = VALUE #( ( option = 'BT' sign = 'I' low = sy-datum - <par>-atributo1 high = sy-datum + <par>-atributo2 ) ).
  ENDIF.

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).
  o_prog->parametros_por_defecto( CHANGING r_werks = s_werks[] ).
  zcl_ap_dynpro=>set_primer_radiobutton( campos = 'P_LIST,P_DETA' ).

* Si hemos llaado de desde ZSTOCKS, se pasan los parametros por ZCACHE
  DATA l_variante TYPE sy-slset.
  GET PARAMETER ID 'ZSTOCKS_CACHE' FIELD DATA(l_id).
  IF NOT l_id IS INITIAL.
    zcl_ap_cache=>get_cache( EXPORTING clave = 'ZSTOCKS_S'
                             subclave = l_id
                             IMPORTING string = l_variante
                             variables = r_matnr[]
                             variables2 = s_werks[] ).
    DELETE FROM zcache WHERE clave = 'ZSTOCKS_S' AND subclave = l_id. "#EC CI_NOFIRST.
    IF NOT l_variante IS INITIAL.
      SUBMIT zstocks USING SELECTION-SET l_variante
             WITH r_matnr IN r_matnr
             WITH s_werks IN s_werks.
    ENDIF.
  ENDIF.


AT SELECTION-SCREEN OUTPUT.
  zcl_ap_dynpro=>screen_visible( group1   = 'LIS'
                                 variable = p_list ).
  zcl_ap_dynpro=>screen_visible( group1   = 'DET'
                                 variable = p_deta ).

  IF p_ramo IS INITIAL.
    zcl_ap_dynpro=>screen_input( group1 = 'RAM' variable = 'X' ).
  ELSE.
    zcl_ap_dynpro=>screen_input( group1 = 'RAM' variable = '' ).

    CLEAR s_mtart[].
    READ TABLE i_set_ramos ASSIGNING FIELD-SYMBOL(<set_ramo>) WITH KEY setnr = p_ramo.
    IF sy-subrc = 0.
      s_mtart[] = <set_ramo>-r_mtart.
    ENDIF.
  ENDIF.

  IF p_matc CS 'C'.
    zcl_ap_dynpro=>screen_visible( group1 = 'MAV' variable = 'X' ).
  ELSE.
    CLEAR s_kunnv[].
    zcl_ap_dynpro=>screen_visible( group1 = 'MAV' variable = '' ).
  ENDIF.

* Si marcan rotura, necesito calcular siempre stock MM, strock subc + stockTra
  IF p_stkro = 'X'.
    p_stkmm = 'X'.
    p_stkpr = 'X'.
    p_stktr = 'X'.
  ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_varil.
  p_varil = o_prog->o_alv->get_f4_layout( ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_varid.
  p_varid = o_prog->o_alvd->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  DATA i_mat_cuobj TYPE zhcl_mm_core=>tt_mat_cuobj.

  CASE sy-ucomm.
    WHEN 'M02'.
      SELECT matnr, werks, cuobj FROM marc
        INTO CORRESPONDING FIELDS OF TABLE @i_mat_cuobj
       WHERE matnr IN @s_matnr
         AND werks IN @s_werks
         AND cuobj <> ''.
      IF sy-subrc = 0.
        NEW zhcl_mm_core( )->get_semis( i_mat = i_mat_cuobj
                                        popup = 'X' ).
      ENDIF.
    WHEN 'ONLI'.
      IF p_dec < 0 OR p_dec > 3.
        MESSAGE 'Sólo puede indicar entre 0 y 3 decimales' TYPE 'E'.
      ENDIF.

      o_prog->validar_centro( r_werks = s_werks[] obligatorio = 'X' ).
      IF NOT s_lgort[] IS INITIAL.
        o_prog->validar_almacen( r_werks = s_werks[] r_lgort = s_lgort[] obligatorio = '' ).
      ENDIF.

      IF p_libre IS INITIAL AND p_bloque IS INITIAL AND p_cali IS INITIAL.
        MESSAGE 'Seleccione algún tipo de stock' TYPE 'E'.
      ENDIF.
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.


AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
