
class ZHCL_CORE definition
  public
  create public .

public section.

  types:
    BEGIN OF t_sets,
        setnr       TYPE rgsb1-setnr,
        descripcion TYPE cvtext,
        line        TYPE rgsb1-old_line,
        r_rango     TYPE rstt_t_range_string,
      END OF t_sets .
  types:
    tt_sets TYPE STANDARD TABLE OF t_sets WITH KEY setnr .

  constants C_SET_CENTROS type SETID value 'ZMM_WRK_NEGOCIO' ##NO_TEXT.
  constants C_SET_CENTROS_FOLDING type SETID value 'ZMM_WRK_FOLDING' ##NO_TEXT.
  constants C_SET_CENTROS_CORP type SETID value 'ZMM_WRK_CORP' ##NO_TEXT.
  constants C_SET_CENTROS_ENERGY type SETID value 'ZMM_WRK_ENERGY' ##NO_TEXT.
  constants C_SET_CENTROS_PAPER type SETID value 'ZMM_WRK_PAPER' ##NO_TEXT.
  data CLAVE_PARAMETROS type ZPARAMETROS-CLAVE value 'CORE' ##NO_TEXT.
  constants C_SET_TIPO_MAT_PT_PACKAGING type SETID value 'ZMM_PT_PACKAGING' ##NO_TEXT.
  constants C_SET_TIPO_MAT_SEMI_PACKAGING type SETID value 'ZMM_SEMI_PACKAGING' ##NO_TEXT.
  data O_CACHE type ref to ZCL_AP_CACHE .

  methods CONSTRUCTOR .
  methods GET_SETS
    importing
      !SET type SETID
    exporting
      !I_SETS type TT_SETS
      !MESSAGE type BAPI_MSG .
  methods GET_RANGO_SET
    importing
      !SET type SETID
    exporting
      !R_RANGO type RSTT_T_RANGE_STRING
      !MESSAGE type BAPI_MSG .
  methods GET_RANGO_CENTROS
    importing
      !SET type SETID
    exporting
      !MESSAGE type BAPI_MSG
    returning
      value(R_WERKS) type RANGE_T_WERKS .
  methods GET_ATRIBUTO_PAR
    importing
      !CAMPO type ZPARAMETROS-CAMPO default ''
      !VALOR type ZPARAMETROS-VALOR default ''
      !VALOR2 type ZPARAMETROS-VALOR2 default ''
    returning
      value(ATRIBUTO) type ZPARAMETROS-ATRIBUTO1 .
  methods GET_RANGO_PAR
    importing
      !CAMPO type ZPARAMETROS-CAMPO
    returning
      value(R_RANGO) type STTY_SR_STRING_RANGE .
  methods GET_RANGO_TIPOS_MAT
    importing
      !SET type SETID
    exporting
      !MESSAGE type BAPI_MSG
    returning
      value(R_MTART) type MD_RANGE_T_MTART .
  methods GET_RANGO_PAR2
    importing
      !CAMPO type ZPARAMETROS-CAMPO
      !VALOR type ZPARAMETROS-VALOR
    returning
      value(R_RANGO) type STTY_SR_STRING_RANGE .
protected section.
private section.
endclass. "ZHCL_CORE definition
class ZHCL_CORE implementation.
  METHOD constructor.

    o_cache = NEW #( ).

  ENDMETHOD.
  METHOD get_atributo_par.

    CLEAR atributo.
    SELECT SINGLE atributo1 FROM zparametros
      INTO atributo
     WHERE clave = clave_parametros
       AND campo = campo
       AND valor = valor
       AND valor2 = valor2.

  ENDMETHOD.
  METHOD get_rango_centros.

    get_rango_set( EXPORTING set = set
                   IMPORTING r_rango = DATA(r_rango)
                             message = message ).

    MOVE-CORRESPONDING r_rango TO r_werks.

  ENDMETHOD.
  METHOD get_rango_par.

    r_rango = NEW zcl_ap_parametros( clave = clave_parametros )->get_rango_tabla_campo( campo = campo
                                                                                 campo_rango = 'VALOR' option = '*'
                                                                                 error_si_vacio = 'X' ).

  ENDMETHOD.
  METHOD get_rango_par2.

    r_rango = NEW zcl_ap_parametros( clave = clave_parametros )->get_rango_tabla_campo( campo = campo
                                                                                        valor = valor
                                                                                        campo_rango = 'VALOR2' option = '*'
                                                                                        error_si_vacio = 'X' ).

  ENDMETHOD.
  METHOD get_rango_set.
    DATA: lt_set_lines TYPE TABLE OF rgsbv,
          lv_message   TYPE scx_t100key,
          l_rango      TYPE rstt_s_range_string,
          l_setnr      TYPE setid.

    CLEAR: r_rango, message.

    l_setnr = set.
    IF set(4) NE '0000'.
      CONCATENATE '0000' set INTO l_setnr.
    ENDIF.

    CALL FUNCTION 'G_SET_FETCH'
      EXPORTING
        langu              = 'S'
        no_authority_check = abap_true
        setnr              = l_setnr
      TABLES
        set_lines_basic    = lt_set_lines
      EXCEPTIONS
        no_authority       = 1
        set_is_broken      = 2
        set_not_found      = 3
        OTHERS             = 4.

    "Si no encuentra datos
    IF ( sy-subrc NE 0 ).
      message = |No existe el set { set }|.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = '?' ) TO r_rango.
      RETURN.
    ENDIF.

    LOOP AT lt_set_lines INTO DATA(ls_set_line).

      CLEAR: l_rango.
      l_rango-sign = 'I'.

      IF ( ls_set_line-from = ls_set_line-to ).

        l_rango-option = 'EQ'.
        l_rango-low = ls_set_line-from.

      ELSE.

        l_rango-option = 'BT'.
        l_rango-low = ls_set_line-from.
        l_rango-high = ls_set_line-to.

      ENDIF.

      APPEND l_rango TO r_rango.

    ENDLOOP.
    IF sy-subrc NE 0.
      message = |El set { set } no tiene valores|.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = '?' ) TO r_rango.
    ENDIF.

  ENDMETHOD.
  METHOD get_rango_tipos_mat.

    get_rango_set( EXPORTING set = set
                   IMPORTING r_rango = DATA(r_rango)
                             message = message ).

    MOVE-CORRESPONDING r_rango TO r_mtart.

  ENDMETHOD.
  METHOD get_sets.
    DATA: i_sets_single TYPE TABLE OF rgsb1,
          l_setnr       TYPE setid,
          l_descripcion TYPE settext.

    CLEAR: i_sets, message.

    l_setnr = set.
    IF set(4) NE '0000'.
      CONCATENATE '0000' set INTO l_setnr.
    ENDIF.

    CALL FUNCTION 'G_SET_FETCH'
      EXPORTING
        setnr            = l_setnr
      TABLES
        set_lines_single = i_sets_single
      EXCEPTIONS
        no_authority     = 1
        set_is_broken    = 2
        set_not_found    = 3
        OTHERS           = 4.
    IF sy-subrc NE 0.
      message = |No existe el set { set }|.
      RETURN.
    ENDIF.

    LOOP AT i_sets_single ASSIGNING FIELD-SYMBOL(<set>).
      l_setnr = <set>-setnr+4.
      SELECT SINGLE descript FROM setheadert
        INTO @l_descripcion
       WHERE setclass = @l_setnr
         AND subclass = ''
         AND setname  = @l_setnr
         AND langu    = @sy-langu.

      IF l_descripcion IS INITIAL.
        l_descripcion = l_setnr.
      ENDIF.

      get_rango_set( EXPORTING set = l_setnr
                     IMPORTING r_rango = DATA(r_rango)
                               message = message ).

      APPEND VALUE #( setnr = l_setnr
                      descripcion = l_descripcion
                      line  = <set>-old_line
                      r_rango = r_rango
                    ) TO i_sets.
    ENDLOOP.

  ENDMETHOD.
