
class ZCL_MM_MATERIAL_ZPT definition
  public
  inheriting from ZCL_MM_MATERIAL_MASTER
  final
  create public .

public section.

  class-data _C_SETNAME_VALUE type SETNAMENEW read-only value '0000ZMM_PT_CARTON' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !I_MTART type MTART
      !I_MBRSH type MBRSH
      !I_PRODH type PRODH_D optional
    raising
      ZCX_MM_EXCEPTION .
  class-methods S_DECODE_MATNR
    importing
      !I_MATNR type MATNR
    exporting
      !E_MTEXT type CHAR18
      !E_MSEQU type CHAR18 .
protected section.
private section.
endclass. "ZCL_MM_MATERIAL_ZPT definition
class ZCL_MM_MATERIAL_ZPT implementation.
  METHOD CONSTRUCTOR.

    DATA: lo_exception TYPE REF TO zcx_mm_exception,
          lv_message   TYPE scx_attrname.

    "Bloque 1: Chequeos propios de la clase
    TRY.

      DATA(lt_r_mtart) = zcl_mm_material_zpt=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_zpt=>_c_setname_value ).

      IF ( i_mtart NOT IN lt_r_mtart ).
        MOVE text-001 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '001' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).
      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

    "Bloque 2: Llamamos al super constructor.
    TRY.
      super->constructor( i_mtart = i_mtart i_mbrsh = i_mbrsh i_prodh = i_prodh ).
    CLEANUP.
      "Borramos parámetros locales.
      CLEAR: me->zintf_mm_material_master~mtart, me->zintf_mm_material_master~prodh, me->zintf_mm_material_master~mbrsh.
    ENDTRY.

    "Bloque 3: Seteamos el resto de valores de la clase.
    TRY .
      me->_initialize_values_4_class( i_dynnr = '0100' i_setname = _c_setname_value ).
    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

  ENDMETHOD.
  METHOD s_decode_matnr.

    "Descomponemos el código de material
    FIND REGEX '[0-9]' IN i_matnr MATCH OFFSET DATA(lv_offset).

    IF ( lv_offset NE 0 ).

      e_mtext       = i_matnr(lv_offset).

    ENDIF.

    e_msequ  = i_matnr+lv_offset.

  ENDMETHOD.
