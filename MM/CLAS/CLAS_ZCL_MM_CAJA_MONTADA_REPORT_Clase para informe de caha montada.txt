
CLASS zcl_mm_caja_montada_report DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

PUBLIC SECTION.

  TYPES:
*** types
  BEGIN OF ty_s_pp_elmnt_data,
    aufnr TYPE aufnr,
    auart TYPE auart,
    sttxt TYPE j_stext,
  END OF ty_s_pp_elmnt_data,
  BEGIN OF ty_s_sd_elmnt_data,
    vbeln TYPE vbeln,
    posnr TYPE posnr,
    etenr TYPE etenr,
  END OF ty_s_sd_elmnt_data.

  CLASS-DATA _s_c_class_label TYPE msgid READ-ONLY VALUE 'ZCL_MM_CAJA_MONTADA' ##NO_TEXT.
  DATA _c_set_label TYPE setnamenew READ-ONLY VALUE '0000ZMM_ARBPL_CMONTADA' ##NO_TEXT.
  DATA _t_cm_data TYPE ztt_report_caja_montada_data READ-ONLY .
  DATA _werks TYPE werks_d READ-ONLY .

  METHODS constructor
    IMPORTING
      !i_werks TYPE werks_d
    RAISING
      zcx_mm_exception .
PROTECTED SECTION.
private section.

  methods _CHECK_AUART
    importing
      !I_AUART type AUART
    returning
      value(E_CHECK) type BOOL .
  methods _CHECK_AUFNR
    importing
      !I_AUFNR type AUFNR
    returning
      value(E_CHECK) type BOOL .
  methods _CHECK_VBAK
    importing
      !I_VBELN type VBELN
    returning
      value(E_CHECK) type BOOL .
  methods _CHECK_VBAP
    importing
      !I_VBELN type VBELN
      !I_POSNR type POSNR
    returning
      value(E_CHECK) type BOOL .
  methods _CHECK_VBEP
    importing
      !I_VBELN type VBELN
      !I_POSNR type POSNR
      !I_ETENR type ETENR
    returning
      value(E_CHECK) type BOOL .
  methods _GET_AFKO_DATA
    importing
      !I_AUFNR type AUFNR
    returning
      value(E_S_AFKO) type AFKO .
  methods _GET_AFPO_DATA
    importing
      !I_AUFNR type AUFNR
      !I_POSNR type POSNR optional
    returning
      value(E_S_AFPO) type AFPO .
  methods _GET_ARBPL_LIST_4_SET
    importing
      !I_SETNAME type SETNAMENEW
    returning
      value(E_T_R_ARBPL) type ZTT_R_ARBPL
    raising
      ZCX_MM_EXCEPTION .
  methods _GET_CM_DATA_4_MATNR
    importing
      !I_MATNR type MATNR optional
    returning
      value(E_T_CM_DATA) type ZTT_REPORT_CAJA_MONTADA_DATA
    exceptions
      NO_VALID_IPARAMS .
  methods _GET_CM_DATA_4_MATNR_STK_PLANR
    importing
      !I_MATNR type MATNR
      !I_PLNGSEGNO type PLANR
      !I_T_BAPI_MRP_IND_LINES type ZTT_BAPI_MRP_IND_LINES
    returning
      value(E_T_CM_DATA) type ZTT_REPORT_CAJA_MONTADA_DATA .
  methods _GET_KNA1_DATA
    importing
      !I_KUNNR type KUNNR
    returning
      value(E_S_KNA1) type KNA1 .
  methods _GET_MCHB_DATA
    importing
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D optional
      !I_CHARG type CHARG optional
    returning
      value(E_T_MCHB) type MCHB_TTY .
  methods _GET_MRP_STOCK_REQ_4_MATNR
    importing
      !I_MATNR type MATNR
    returning
      value(E_T_MRP_STOCK_DATA) type ZTT_BAPI_MRP_IND_LINES .
  methods _GET_MSKA_DATA
    importing
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D optional
      !I_CHARG type CHARG_D optional
      !I_SOBKZ type SOBKZ
      !I_VBELN type VBELN
      !I_POSNR type POSNR
    returning
      value(E_T_MSKA) type IMIL_MSKA_TTY .
  methods _GET_PP_DATA .
  methods _GET_PP_DATA_4_ELEMNT_DATA
    importing
      !I_ELEMNT_DATA type EXTRA
    returning
      value(E_PP_ELMNT_DATA) type TY_S_PP_ELMNT_DATA .
  methods _GET_PP_DATA_4_VBELN_POSNR
    importing
      !I_VBELN type VBELN
      !I_POSNR type POSNR
    returning
      value(E_AUFNR) type AUFNR
    exceptions
      NO_VALID_IPARAMS
      NO_VALUES .
  methods _GET_SD_DATA_4_AUFNR
    importing
      !I_AUFNR type AUFNR
    returning
      value(E_S_SD_ELMNT_DATA) type TY_S_SD_ELMNT_DATA
    exceptions
      NO_VALID_IPARAMS
      NO_VALUES .
  methods _GET_SD_DATA_4_ELEMNT_DATA
    importing
      !I_ELEMNT_DATA type EXTRA
    returning
      value(E_S_SD_ELMNT_DATA) type TY_S_SD_ELMNT_DATA
    exceptions
      NO_VALID_IPARAMS
      NO_VALUES .
  methods _GET_STOCK_CM
    importing
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
      !I_SOBKZ type SOBKZ
      !I_VBELN type VBELN .
  methods _GET_STOCK_EXP_4_MATNR_CHARG
    importing
      !I_MATNR type MATNR
      !I_CHARG type CHARG_D
    returning
      value(E_ZZLABSTCM3) type ZZLABST_CM_3 .
  methods _GET_CNOM_STOCK_4_AUFNR
    importing
      !I_AUFNR type AUFNR
    returning
      value(E_ZZLABSTCM2) type ZZLABST_CM_2 .
  methods _GET_VBAK_DATA
    importing
      !I_VBELN type VBELN
    returning
      value(E_S_VBAK) type VBAK .
  methods _GET_VBAP_DATA
    importing
      !I_VBELN type VBELN
      !I_POSNR type POSNR
    returning
      value(E_S_VBAP) type VBAP .
  methods _GET_VBKD_DATA
    importing
      !I_VBELN type VBELN
      !I_POSNR type POSNR
    returning
      value(E_S_VBKD) type VBKD .
  methods _SET_DATA
    raising
      ZCX_MM_EXCEPTION .
endclass. "ZCL_MM_CAJA_MONTADA_REPORT definition
class ZCL_MM_CAJA_MONTADA_REPORT implementation.
METHOD _check_auart.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** VBAK

  SELECT COUNT(*)
    FROM t003o
   WHERE auart EQ i_auart.

  IF ( sy-subrc EQ 0 ).
    e_check = abap_true.
  ELSE.
    e_check = abap_false.
  ENDIF.


ENDMETHOD.
METHOD _check_aufnr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** VBAK

  SELECT COUNT(*)
    FROM aufk
   WHERE aufnr EQ i_aufnr.

  IF ( sy-subrc EQ 0 ).
    e_check = abap_true.
  ELSE.
    e_check = abap_false.
  ENDIF.


ENDMETHOD.
METHOD _check_vbak.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** VBAK

  SELECT COUNT(*)
    FROM vbak
   WHERE vbeln EQ i_vbeln.

  IF ( sy-subrc EQ 0 ).
    e_check = abap_true.
  ELSE.
    e_check = abap_false.
  ENDIF.

ENDMETHOD.
METHOD _check_vbap.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** VBAK

  SELECT COUNT(*)
    FROM vbap
   WHERE vbeln EQ i_vbeln
     AND posnr EQ i_posnr.

  IF ( sy-subrc EQ 0 ).
    e_check = abap_true.
  ELSE.
    e_check = abap_false.
  ENDIF.

ENDMETHOD.
METHOD _check_vbep.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** VBAK

  SELECT COUNT(*)
    FROM vbak
   WHERE vbeln EQ i_vbeln.

  IF ( sy-subrc EQ 0 ).
    e_check = abap_true.
  ELSE.
    e_check = abap_false.
  ENDIF.

ENDMETHOD.
METHOD _get_afko_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

*** AUFNR

  CHECK i_aufnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** AFKO

  SELECT SINGLE *
    FROM afko
    INTO e_s_afko
   WHERE aufnr EQ i_aufnr.

ENDMETHOD.
METHOD _get_afpo_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  TYPES: BEGIN OF ty_r_posnr,
    sign    TYPE raldb_sign,
    option  TYPE raldb_opti,
    low     TYPE posnr,
    high    TYPE posnr,
  END OF ty_r_posnr.

  DATA: ls_r_posnr TYPE ty_r_posnr,
        lt_r_posnr TYPE TABLE OF ty_r_posnr.

**********************************************************************
* Validaciones
**********************************************************************

*** AUFNR

  CHECK i_aufnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

  IF ( i_posnr IS NOT INITIAL ).
    ls_r_posnr-sign   = 'I'.
    ls_r_posnr-option = 'EQ'.
    ls_r_posnr-low    = i_posnr.
    APPEND ls_r_posnr TO lt_r_posnr.
  ENDIF.

*** AFKO

  SELECT SINGLE *
    FROM afpo
    INTO e_s_afpo
   WHERE aufnr EQ i_aufnr
     AND posnr IN lt_r_posnr.

ENDMETHOD.
METHOD _get_arbpl_list_4_set.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_set_lines TYPE TABLE OF rgsbv,
        lv_message   TYPE scx_attrname,
        ls_r_arbpl   LIKE LINE OF e_t_r_arbpl.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** SET DATA

  "Obtenemos los tipos de material compatibles desde el set de datos
  CALL FUNCTION 'G_SET_FETCH'
    EXPORTING
      langu              = 'S'
      no_authority_check = abap_true
      setnr              = i_setname
    TABLES
      set_lines_basic    = lt_set_lines
    EXCEPTIONS
      no_authority       = 1
      set_is_broken      = 2
      set_not_found      = 3
      OTHERS             = 4.

  "Si no encuentra datos
  IF ( sy-subrc NE 0 ).

    CLEAR: lv_message.
    MOVE text-001 TO lv_message.
    "Lanzamos excepción controlada
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_mm_caja_montada_report=>_s_c_class_label i_msgty = 'E' i_message = lv_message ).

  ENDIF.

*** MAP DATA

  LOOP AT lt_set_lines INTO DATA(ls_set_line).

    CLEAR: ls_r_arbpl.

    ls_r_arbpl-sign = 'I'.

    IF ( ls_set_line-from = ls_set_line-to ).

      ls_r_arbpl-option = 'EQ'.
      ls_r_arbpl-low = ls_set_line-from.

    ELSE.

      ls_r_arbpl-option = 'BT'.
      ls_r_arbpl-low = ls_set_line-from.
      ls_r_arbpl-high = ls_set_line-to.

    ENDIF.

    APPEND ls_r_arbpl TO e_t_r_arbpl.

  ENDLOOP.

ENDMETHOD.
METHOD _get_cm_data_4_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

  TYPES: BEGIN OF ty_plnsegno,
    plngsegno TYPE planr,
  END OF ty_plnsegno.

  DATA: lt_plngsegno TYPE TABLE OF ty_plnsegno.

  DATA: lt_cm_data      TYPE ztt_report_caja_montada_data,
        lt_cm_data_mchb TYPE ztt_report_caja_montada_data,
        lt_cm_data_mska TYPE ztt_report_caja_montada_data,
        ls_cm_data      TYPE zst_report_caja_montada_data.

  DATA: ls_mchb TYPE LINE OF mchb_tty.

  DATA: lt_mrp_stock_lines    TYPE ztt_bapi_mrp_ind_lines,
        ls_mrp_stock_line     TYPE bapi_mrp_ind_lines.

**********************************************************************
* Validaciones
**********************************************************************

*** MATNR

  IF ( i_matnr IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** MRP STOCKS DATA

  lt_mrp_stock_lines =  me->_get_mrp_stock_req_4_matnr( i_matnr = i_matnr ).
  CHECK lines( lt_mrp_stock_lines ) GT 0.

** PLNGSEGNO

  MOVE-CORRESPONDING lt_mrp_stock_lines TO lt_plngsegno.
  DELETE ADJACENT DUPLICATES FROM lt_plngsegno.

  "Recorremos elementos de planificación
  LOOP AT lt_plngsegno INTO DATA(ls_plngsegno).

    lt_cm_data = me->_get_cm_data_4_matnr_stk_planr( i_matnr = i_matnr i_plngsegno = ls_plngsegno-plngsegno i_t_bapi_mrp_ind_lines = lt_mrp_stock_lines ).

  ENDLOOP.

  MOVE-CORRESPONDING lt_cm_data TO e_t_cm_data.

ENDMETHOD.
METHOD _get_cm_data_4_matnr_stk_planr.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_mrp_ind_lines      TYPE ztt_bapi_mrp_ind_lines,
        ls_mrp_stock_line     TYPE bapi_mrp_ind_lines.

  DATA: ls_cm_data_ini        TYPE zst_report_caja_montada_data,
        ls_cm_data            TYPE zst_report_caja_montada_data.

  DATA: ls_mchb               TYPE mchb,
        ls_mska               TYPE mska,
        ls_vbak               TYPE vbak.

  DATA: ls_sd_elmnt_data      TYPE ty_s_sd_elmnt_data,
        ls_pp_elmnt_data      TYPE ty_s_pp_elmnt_data.

**********************************************************************
* Validaciones
**********************************************************************

*** MATNR

  CHECK i_matnr IS NOT INITIAL.

*** ZTT_BAPI_MRP_IND_LINES

  CHECK lines( i_t_bapi_mrp_ind_lines ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

*** PREPARE DATA

  MOVE-CORRESPONDING i_t_bapi_mrp_ind_lines TO lt_mrp_ind_lines.
  DELETE lt_mrp_ind_lines WHERE plngsegno NE i_plngsegno.

  "Vemos caso:
  " - Stock centro
  " - Stock de pedido
  IF ( i_plngsegno IS INITIAL ). "Stock centro

** MCHB

    "Obtengo stocks actuales
    DATA(lt_mchb) = me->_get_mchb_data( i_matnr = i_matnr i_werks = me->_werks ).

** INITIAL DATA

    "Creo valores iniciales
    MOVE i_matnr TO ls_cm_data_ini-matnr.

  ELSE. "Stock de pedido

** MSKA

    "Obtengo pedido/posición de cliente para extraer datos de MSKA
    CLEAR: ls_mrp_stock_line, ls_sd_elmnt_data.
    READ TABLE i_t_bapi_mrp_ind_lines INTO ls_mrp_stock_line WITH KEY plngsegno = i_plngsegno mrp_element_ind = 'KB'.
    CHECK sy-subrc EQ 0.
    ls_sd_elmnt_data =  me->_get_sd_data_4_elemnt_data( i_elemnt_data = ls_mrp_stock_line-elemnt_data ).
    CHECK ls_sd_elmnt_data-vbeln IS NOT INITIAL AND ls_sd_elmnt_data-posnr IS NOT INITIAL.

    "Obtengo stocks actuales
    DATA(lt_mska) = me->_get_mska_data( i_matnr = i_matnr i_werks = me->_werks i_sobkz = 'E' i_vbeln = ls_sd_elmnt_data-vbeln i_posnr = ls_sd_elmnt_data-posnr ).

** INITIAL DATA

    "Creo valores iniciales
    MOVE i_matnr  TO ls_cm_data_ini-matnr.
    MOVE ls_sd_elmnt_data-vbeln TO ls_cm_data_ini-vbeln.
    MOVE ls_sd_elmnt_data-posnr TO ls_cm_data-posnr.

  ENDIF.

*** GET DATA PER LINE

** OF

  "Recorremos elementos de planificación
  LOOP AT lt_mrp_ind_lines INTO ls_mrp_stock_line.

    "Limpio parámetros de loop
    CLEAR: ls_cm_data, ls_pp_elmnt_data, ls_sd_elmnt_data.

    "Chequeo que elemento de planificación sea OF
    CHECK ls_mrp_stock_line-plngsegno EQ i_plngsegno AND ls_mrp_stock_line-mrp_element_ind = 'FE'.

    "Copio valores iniciales
    MOVE-CORRESPONDING ls_cm_data_ini TO ls_cm_data.

    "Obtengo núm. OF desde elemento de planificación
    ls_pp_elmnt_data = me->_get_pp_data_4_elemnt_data( i_elemnt_data = ls_mrp_stock_line-elemnt_data ).    " Datos para el elemento de planificación de necesidades

    "Chequeo y copio
    IF ( me->_check_aufnr( i_aufnr = ls_pp_elmnt_data-aufnr ) ).

      "Copio n. OF a estructura
      MOVE ls_pp_elmnt_data-aufnr TO ls_cm_data-aufnr.

      "Obtener cantidad OF
      ls_cm_data-gamng = me->_get_afko_data( i_aufnr = ls_cm_data-aufnr )-gamng.

      "Obtengo lote de OF
      ls_cm_data-charg = me->_get_afpo_data( i_aufnr = ls_cm_data-aufnr )-charg.

      "Obtener stock caja montada para OF/PV vía lote
      IF ( ls_cm_data-charg IS NOT INITIAL ).

        "Chequeo si es stock de centro
        IF ( lines( lt_mchb ) GT 0 ).

          CLEAR: ls_mchb.
          LOOP AT lt_mchb INTO ls_mchb.

            CHECK ls_mchb-matnr = i_matnr AND ls_mchb-werks = me->_werks AND ls_mchb-charg = ls_cm_data-charg.

            ls_cm_data-zzlabstcm1 = ls_cm_data-zzlabstcm1 + ls_mchb-clabs.

            DELETE lt_mchb WHERE matnr EQ ls_mchb-matnr AND werks EQ ls_mchb-werks AND lgort EQ ls_mchb-lgort AND charg EQ ls_mchb-charg.

          ENDLOOP.

        ENDIF.

      ENDIF.

    ELSE.

      CONTINUE.

    ENDIF.

    "Obtengo pedido de ventas para OF si existe
    ls_sd_elmnt_data = me->_get_sd_data_4_aufnr( i_aufnr = ls_cm_data-aufnr ).
    IF ( ls_sd_elmnt_data-vbeln IS NOT INITIAL AND ls_sd_elmnt_data-posnr IS NOT INITIAL ).

      "Copio valores de SD a estructura
      MOVE ls_sd_elmnt_data-vbeln TO ls_cm_data-vbeln.
      MOVE ls_sd_elmnt_data-posnr TO ls_cm_data-posnr.

      "Obtengo pedido de cliente
      ls_cm_data-bstkd = me->_get_vbkd_data( i_vbeln = ls_cm_data-vbeln i_posnr = ls_cm_data-posnr ).

      "Obtener cantidad PV
      ls_cm_data-zmeng = me->_get_vbap_data( i_vbeln = ls_cm_data-vbeln i_posnr = ls_cm_data-posnr )-zmeng.

      "Obtener datos de vbak
      ls_cm_data-kunnr = ls_vbak = me->_get_vbak_data( i_vbeln = ls_cm_data-vbeln )-kunnr.

      "Obtener nombre de deudor
      ls_cm_data-name1 = me->_get_kna1_data( i_kunnr = ls_cm_data-kunnr )-name1.

      "Obtener stock caja montada para OF/PV vía lote
      IF ( ls_cm_data-charg IS NOT INITIAL ).

        "Si es stock de cliente entro por aquí
        IF ( lines( lt_mska ) GT 0 ).

          "Chequeo si es stock de pedido
          CLEAR: ls_mska.
          LOOP AT lt_mska INTO ls_mska.

            "Chequeo que sea stock buscado
            CHECK ls_mska-matnr = i_matnr AND ls_mska-werks = me->_werks AND ls_mska-charg = ls_cm_data-charg AND ls_mska-sobkz = 'E' AND ls_mska-vbeln = ls_cm_data-vbeln AND ls_mska-posnr = ls_cm_data-posnr.

            "Chequeo que
            ls_cm_data-zzlabstcm1 = ls_cm_data-zzlabstcm1 + ls_mska-kavla.

            DELETE lt_mska WHERE matnr EQ ls_mska-matnr AND werks EQ ls_mska-werks AND lgort EQ ls_mska-lgort AND charg EQ ls_mska-charg AND sobkz EQ ls_mska-sobkz AND vbeln EQ ls_mska-vbeln AND posnr EQ ls_mska-posnr.

          ENDLOOP.

        ENDIF.

      ENDIF.

    ENDIF.

    "Obtengo stock expedido
    ls_cm_data-zzlabstcm3 = me->_get_stock_exp_4_matnr_charg( i_matnr = ls_cm_data-matnr i_charg = ls_cm_data-charg ).

    "TODO: Obtener stock no montada

    APPEND ls_cm_data TO e_t_cm_data.

  ENDLOOP.

** PV SIN OF




ENDMETHOD.
  method _GET_CNOM_STOCK_4_AUFNR.
  endmethod.
METHOD _get_kna1_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_kunnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** KNA1

  SELECT SINGLE *
    FROM kna1
    INTO e_s_kna1
   WHERE kunnr EQ i_kunnr.

ENDMETHOD.
METHOD _get_mchb_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_r_lgort TYPE range_s_lgort_d,
        lt_r_lgort TYPE TABLE OF range_s_lgort_d,
        ls_r_charg TYPE bicbh_s_charg,
        lt_r_charg TYPE TABLE OF bicbh_s_charg.

**********************************************************************
* Validaciones
**********************************************************************

*** MATNR

  CHECK i_matnr IS NOT INITIAL.

*** WERKS

  CHECK i_werks IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** PREPARE DATA

  IF ( i_lgort IS NOT INITIAL ).
    ls_r_lgort-sign = 'I'.
    ls_r_lgort-option = 'EQ'.
    ls_r_lgort-low = i_lgort.
    APPEND ls_r_lgort TO lt_r_lgort.
  ENDIF.

  IF ( i_charg IS NOT INITIAL ).
    ls_r_charg-sign = 'I'.
    ls_r_charg-option = 'EQ'.
    ls_r_charg-low = i_lgort.
    APPEND ls_r_charg TO lt_r_charg.
  ENDIF.

*** SELECT MCHB

  SELECT *
    FROM mchb
    INTO CORRESPONDING FIELDS OF TABLE e_t_mchb
   WHERE matnr EQ i_matnr
     AND werks EQ i_werks
     AND lgort IN lt_r_lgort
     AND charg IN lt_r_charg.

ENDMETHOD.
METHOD _get_mrp_stock_req_4_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_matnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** MRP STOCK DATA

  CALL FUNCTION 'BAPI_MATERIAL_STOCK_REQ_LIST'
    EXPORTING
      material                = i_matnr
      plant                   = me->_werks
*     MRP_AREA                =
*     PLAN_SCENARIO           =
*     SELECTION_RULE          =
*     DISPLAY_FILTER          =
*     PERIOD_INDICATOR        =
*     GET_ITEM_DETAILS        =
*     GET_IND_LINES           = 'X'
*     GET_TOTAL_LINES         =
*     IGNORE_BUFFER           =
*     MATERIAL_EVG            =
*   IMPORTING
*     MRP_LIST                =
*     MRP_CONTROL_PARAM       =
*     MRP_STOCK_DETAIL        =
*     RETURN                  =
   TABLES
*     MRP_ITEMS               =
     mrp_ind_lines           = e_t_mrp_stock_data
*     MRP_TOTAL_LINES         =
*     EXTENSIONOUT            =
        .

ENDMETHOD.
METHOD _get_mska_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_r_lgort TYPE range_s_lgort_d,
        lt_r_lgort TYPE TABLE OF range_s_lgort_d,
        ls_r_charg TYPE bicbh_s_charg,
        lt_r_charg TYPE TABLE OF bicbh_s_charg.

**********************************************************************
* Validaciones
**********************************************************************

*** MATNR

  CHECK i_matnr IS NOT INITIAL.

*** WERKS

  CHECK i_werks IS NOT INITIAL.

*** LGORT


*** CHARG


*** SOBKZ

  CHECK i_sobkz IS NOT INITIAL.

*** VBELN

  CHECK i_vbeln IS NOT INITIAL.

*** POSNR

  CHECK i_posnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** PREPARE DATA

  IF ( i_lgort IS NOT INITIAL ).
    ls_r_lgort-sign = 'I'.
    ls_r_lgort-option = 'EQ'.
    ls_r_lgort-low = i_lgort.
    APPEND ls_r_lgort TO lt_r_lgort.
  ENDIF.

  IF ( i_charg IS NOT INITIAL ).
    ls_r_charg-sign = 'I'.
    ls_r_charg-option = 'EQ'.
    ls_r_charg-low = i_lgort.
    APPEND ls_r_charg TO lt_r_charg.
  ENDIF.

*** SELECT MCHB

  SELECT *
    FROM mska
    INTO CORRESPONDING FIELDS OF TABLE e_t_mska
   WHERE matnr EQ i_matnr
     AND werks EQ i_werks
     AND lgort IN lt_r_lgort
     AND charg IN lt_r_charg
     AND sobkz EQ i_sobkz
     AND vbeln EQ i_vbeln
     AND posnr EQ i_posnr.

ENDMETHOD.
  METHOD _get_pp_data.
  ENDMETHOD.
METHOD _get_pp_data_4_elemnt_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_str_1(40) TYPE c,
        lv_str_2(40) TYPE c,
        lv_str_3(40) TYPE c.

  DATA: lv_aufnr TYPE aufnr,
        lv_auart TYPE auart,
        lv_sttxt TYPE j_stext.

**********************************************************************
* Validaciones
**********************************************************************

*** ELEMENT_DATA

  CHECK i_elemnt_data IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** SPLIT

  SPLIT i_elemnt_data AT '/' INTO lv_str_1 lv_str_2 lv_str_3.

  CONDENSE lv_str_1 NO-GAPS.
  CONDENSE lv_str_2 NO-GAPS.
  CONDENSE lv_str_3 NO-GAPS.

  MOVE lv_str_1 TO lv_aufnr.
  MOVE lv_str_2 TO lv_auart.
  MOVE lv_str_3 TO lv_sttxt.

*** CHECKS

  IF ( lv_aufnr IS NOT INITIAL AND lv_auart IS NOT INITIAL AND lv_sttxt IS NOT INITIAL ).

** AUFNR

    IF ( me->_check_aufnr( i_aufnr = lv_aufnr ) ).
      MOVE lv_aufnr TO e_pp_elmnt_data-aufnr.
    ELSE.
      CLEAR: e_pp_elmnt_data.
    ENDIF.

** AUART

    IF ( me->_check_auart( i_auart = lv_auart ) ).
      MOVE lv_auart TO e_pp_elmnt_data-auart.
    ELSE.
      CLEAR: e_pp_elmnt_data.
    ENDIF.

** STTXT

    MOVE lv_sttxt TO e_pp_elmnt_data-sttxt.

  ELSEIF ( lv_aufnr IS NOT INITIAL AND lv_auart IS NOT INITIAL AND lv_sttxt IS INITIAL ).

** AUFNR

    IF ( me->_check_aufnr( i_aufnr = lv_aufnr ) ).
      MOVE lv_aufnr TO e_pp_elmnt_data-aufnr.
    ELSE.
      CLEAR: e_pp_elmnt_data.
    ENDIF.

** AUART

    IF ( me->_check_auart( i_auart = lv_auart ) ).
      MOVE lv_auart TO e_pp_elmnt_data-auart.
    ELSE.
      CLEAR: e_pp_elmnt_data.
    ENDIF.

  ELSEIF ( lv_aufnr IS NOT INITIAL AND lv_auart IS INITIAL AND lv_sttxt IS INITIAL ).

** AUFNR

    IF ( me->_check_aufnr( i_aufnr = lv_aufnr ) ).
      MOVE lv_aufnr TO e_pp_elmnt_data-aufnr.
    ELSE.
      CLEAR: e_pp_elmnt_data.
    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD _get_pp_data_4_vbeln_posnr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

*** VBELN

  IF ( i_vbeln IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

*** POSNR

  IF ( i_posnr IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** SELECT DATA

  SELECT SINGLE aufnr
    FROM afpo
    INTO e_aufnr
   WHERE kdauf EQ i_vbeln
     AND kdpos EQ i_posnr.

  IF ( sy-subrc NE 0 ).
    CLEAR: e_aufnr.
    RAISE no_values.
  ENDIF.

ENDMETHOD.
METHOD _get_sd_data_4_aufnr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

*** AUFNR

  CHECK i_aufnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** SELECT DATA

  SELECT SINGLE kdauf kdpos
    FROM afpo
    INTO ( e_s_sd_elmnt_data-vbeln, e_s_sd_elmnt_data-posnr )
   WHERE aufnr EQ i_aufnr.

  IF ( sy-subrc NE 0 ).
    CLEAR: e_s_sd_elmnt_data.
  ENDIF.

ENDMETHOD.
METHOD _get_sd_data_4_elemnt_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_str_1(40) TYPE c,
        lv_str_2(40) TYPE c,
        lv_str_3(40) TYPE c.

  DATA: lv_vbeln TYPE vbeln,
        lv_posnr TYPE posnr,
        lv_etenr TYPE etenr.

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_elemnt_data IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** SPLIT

  SPLIT i_elemnt_data AT '/' INTO lv_str_1 lv_str_2 lv_str_3.

  CONDENSE lv_str_1 NO-GAPS.
  CONDENSE lv_str_2 NO-GAPS.
  CONDENSE lv_str_3 NO-GAPS.

  MOVE lv_str_1 TO lv_vbeln.
  MOVE lv_str_2 TO lv_posnr.
  MOVE lv_str_3 TO lv_etenr.

*** CHECKS

  IF ( lv_vbeln IS NOT INITIAL AND lv_posnr IS NOT INITIAL AND lv_etenr IS NOT INITIAL ).

    IF ( me->_check_vbep( i_vbeln = lv_vbeln i_posnr = lv_posnr i_etenr = lv_etenr ) ).
      MOVE lv_vbeln TO e_s_sd_elmnt_data-vbeln.
      MOVE lv_posnr TO e_s_sd_elmnt_data-posnr.
      MOVE lv_etenr TO e_s_sd_elmnt_data-etenr.
    ELSE.
      RAISE no_values.
    ENDIF.

  ELSEIF ( lv_vbeln IS NOT INITIAL AND lv_posnr IS NOT INITIAL AND lv_etenr IS INITIAL ).

    IF ( me->_check_vbap( i_vbeln = lv_vbeln i_posnr = lv_posnr ) ).
      MOVE lv_vbeln TO e_s_sd_elmnt_data-vbeln.
      MOVE lv_posnr TO e_s_sd_elmnt_data-posnr.
    ELSE.
      RAISE no_values.
    ENDIF.

  ELSEIF ( lv_vbeln IS NOT INITIAL AND lv_posnr IS INITIAL AND lv_etenr IS INITIAL ).

    IF ( me->_check_vbak( i_vbeln = lv_vbeln ) ).
      MOVE lv_vbeln TO e_s_sd_elmnt_data-vbeln.
    ELSE.
      RAISE no_values.
    ENDIF.

  ENDIF.

ENDMETHOD.
  METHOD _get_stock_cm.
  ENDMETHOD.
METHOD _get_stock_exp_4_matnr_charg.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** MSEG

  SELECT *
    FROM mseg
    INTO @DATA(ls_mseg)
   WHERE matnr EQ @i_matnr
     AND werks EQ @me->_werks
     AND bwart IN ( 601, 602 )
     AND charg EQ @i_charg.

    "Cuando sale sumo y cuando entra resto
    IF ( ls_mseg-shkzg = 'H' ).
      e_zzlabstcm3 = e_zzlabstcm3 + ls_mseg-menge.
    ELSE.
      e_zzlabstcm3 = e_zzlabstcm3 - ls_mseg-menge.
    ENDIF.

  ENDSELECT.

  IF ( e_zzlabstcm3 LE 0 ).
    CLEAR e_zzlabstcm3.
  ENDIF.

ENDMETHOD.
METHOD _get_vbak_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_vbeln IS NOT INITIAL .

**********************************************************************
* Lógica
**********************************************************************

*** VBAK

  SELECT SINGLE *
    FROM vbak
    INTO e_s_vbak
   WHERE vbeln EQ i_vbeln.

ENDMETHOD.
METHOD _get_vbap_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_vbeln IS NOT INITIAL AND i_posnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** VBAP

  SELECT SINGLE *
    FROM vbap
    INTO e_s_vbap
   WHERE vbeln EQ i_vbeln
     AND posnr EQ i_posnr.

ENDMETHOD.
METHOD _get_vbkd_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_vbeln IS NOT INITIAL AND i_posnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** VBAP

  SELECT SINGLE *
    FROM vbkd
    INTO e_s_vbkd
   WHERE vbeln EQ i_vbeln
     AND posnr EQ i_posnr.

ENDMETHOD.
METHOD _set_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_exception TYPE REF TO zcx_mm_exception.

  DATA: lt_r_arbpl          TYPE ztt_r_arbpl,
        lt_yhp_idx_td310    TYPE yhp_omp_tt_td310,
        ls_yhp_idx_td310    TYPE yhp_idx_td310,

        lt_cm_data          TYPE ztt_report_caja_montada_data,
        lt_cm_data_4_matnr  TYPE ztt_report_caja_montada_data,
        ls_data             TYPE zst_report_caja_montada_data,

        lt_mrp_data         TYPE ztt_report_caja_montada_data_1,
        ls_mrp_data         TYPE zst_report_caja_montada_data_1.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** CLEAR DATA

  CLEAR: _t_cm_data.

*** GET INITIAL DATA

** 1. MATERIALS WITH ROUTING 'MONTAJE'

* SET DATA

  TRY.
    lt_r_arbpl = me->_get_arbpl_list_4_set( i_setname = me->_c_set_label ).
  CATCH zcx_mm_exception INTO lo_exception.
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
  ENDTRY.

* CUOBJ FOR MATERIALS

  SELECT *
    FROM yhp_idx_td310
    INTO CORRESPONDING FIELDS OF TABLE lt_yhp_idx_td310
   WHERE werks EQ _werks
     AND arbpl IN lt_r_arbpl
     AND cself EQ ( SELECT MAX( cself ) FROM  yhp_idx_td310 WHERE werks EQ _werks AND arbpl IN lt_r_arbpl ).

*** DATA

  LOOP AT lt_yhp_idx_td310 INTO ls_yhp_idx_td310.

    "Borramos datos
*    CLEAR: ls_data.

    "Obtenemos material
    SELECT SINGLE matnr
      FROM marc INTO @DATA(lv_matnr)
     WHERE werks EQ @me->_werks
       AND cuobj EQ @ls_yhp_idx_td310-cuobj.

    "Si no existe material, no continuamos
    CHECK sy-subrc EQ 0 AND lv_matnr IS NOT INITIAL.

    "MRP data stocks
*    lt_mrp_data = me->_get_stocks_req_list( i_matnr = ls_data-matnr ).

    "TODO
    me->_get_cm_data_4_matnr(
      EXPORTING
        i_matnr          = lv_matnr    " Número de material
      RECEIVING
        e_t_cm_data      = lt_cm_data    " Tabla para estructura ZST_REPORT_CAJA_MONTADA_DATA
      EXCEPTIONS
        no_valid_iparams = 1
        OTHERS           = 2
    ).
    IF ( sy-subrc EQ 0 ).

      IF ( lines( lt_cm_data ) GT 0 ).
        APPEND LINES OF lt_cm_data TO _t_cm_data.
      ENDIF.

    ENDIF.


  ENDLOOP.



ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_werks IS INITIAL ).
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_mm_caja_montada_report=>_s_c_class_label i_msgty = 'E' ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** WERKS

  SELECT COUNT(*)
    FROM t001w
   WHERE werks EQ i_werks.

  IF ( sy-subrc EQ 0 ).
    _werks = i_werks.
  ENDIF.

*** SELECT MATERIAL DATA

  TRY .
    me->_set_data( ).
  CATCH zcx_mm_exception .

  ENDTRY.


ENDMETHOD.
