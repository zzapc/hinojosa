
class ZHCL_MMIM_ZLNUM_MANAGER definition
  public
  final
  create public .

public section.

  types:
    ty_t_ztmmim0001 TYPE STANDARD TABLE OF ztmmim0001 WITH DEFAULT KEY .
  types:
    BEGIN OF ty_s_r_zlnum,
        sign    TYPE bapisign,
        option  TYPE BAPIOPTION,
        low     TYPE zed_zlnum,
        high    TYPE zed_zlnum,
      END OF ty_s_r_zlnum .
  types:
    ty_t_r_zlnum TYPE TABLE OF ty_s_r_zlnum .
  types:
    BEGIN OF ty_purchdoc_data,
      ebeln TYPE ebeln,
      ebelp TYPE ebelp,
      lifnr TYPE lifnr,
      matnr TYPE matnr,
      charg TYPE charg_d,
      sobkz TYPE sobkz,
      sonum TYPE lvs_sonum,
      loekz TYPE loekz,
    END OF ty_purchdoc_data .
  types:
    BEGIN OF ty_s_zlnum,
      zlnum TYPE zed_zlnum,
    END OF ty_s_zlnum .
  types:
    ty_t_zlnum TYPE STANDARD TABLE OF ty_s_zlnum WITH DEFAULT KEY .

  class-data S_CL_LABEL type MSGID read-only value 'ZHCL_MMIM_ZLNUM_MGR' ##NO_TEXT.
  class-data S_C_RANGE_ZMM_ZLNUM type NROBJ read-only value 'ZMM_ZLNUM' ##NO_TEXT.
  class-data S_C_RANGE_ZMM_ZLNUM_90 type NRNR read-only value '90' ##NO_TEXT.
  data _WERKS type WERKS_D read-only .
  data _LGORT type LGORT_D read-only .

  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    raising
      ZCX_EXCEPTION .
  methods GET_ZLNUM_DATA_4_MATNR_CHARG
    importing
      !I_MATNR type MATNR
      !I_CHARG type CHARG_D
    returning
      value(R_T_ZTMMIM0001) type TY_T_ZTMMIM0001 .
  methods GET_ZLNUM_DATA_4_PURCHDOC
    importing
      !I_EBELN type EBELN
      !I_EBELP type EBELP
    returning
      value(R_T_ZTMMIM0001) type TY_T_ZTMMIM0001 .
  methods GET_ZLNUM_DATA_4_ZLNUM
    importing
      !I_ZLNUM type LENUM
    returning
      value(R_S_ZTMMIM0001) type ZTMMIM0001 .
  methods PRINT_ZLNUM
    importing
      !I_ZLNUM type ZED_ZLNUM
    returning
      value(R_RETURN) type BAPIRET2 .
  methods PRINT_ZLNUM_LIST
    importing
      !I_T_ZLNUM type TY_T_ZLNUM
    returning
      value(R_T_RETURN) type BAPIRET2_T .
  methods SET_NEW_ZLNUM
    importing
      !I_MATNR type MATNR
      !I_CHARG type CHARG_D
      !I_LMEN1 type LVS_LEMEN
      !I_MEINS type MEINS
      !I_EBELN type EBELN optional
      !I_EBELP type EBELP optional
      !I_LIFNR type LIFNR optional
      !I_SOBKZ type SOBKZ optional
      !I_SONUM type LVS_SONUM optional
      !I_COMMIT type BOOLEAN default 'X'
    returning
      value(R_RETURN) type BAPIRET2 .
  methods SET_NEW_ZLNUM_4_MATNR_CHARG
    importing
      !I_MATNR type MATNR
      !I_CHARG type CHARG_D optional
      !I_ANZL1 type LVS_ANZLE default '1'
      !I_LMEN1 type LVS_LEMEN
      !I_MEINS type MEINS
      !I_COMMIT type BOOLEAN
    returning
      value(R_T_RETURN) type BAPIRET2_T .
  methods SET_NEW_ZLNUM_4_PURCHDOC
    importing
      !I_EBELN type EBELN
      !I_EBELP type EBELP
      !I_ANZL1 type LVS_ANZLE default '1'
      !I_LMEN1 type LVS_LEMEN
      !I_MEINS type MEINS
      !I_COMMIT type BOOLEAN default 'X'
    returning
      value(R_T_RETURN) type BAPIRET2_T .
  methods UPDATE_ZLNUM_DATA
    importing
      !I_ZLNUM type ZED_ZLNUM
      !I_LMEN1 type LVS_LEMEN optional
      !I_MEINS type MEINS optional
      !I_SOBKZ type SOBKZ optional
      !I_SONUM type LVS_SONUM optional
    returning
      value(R_RETURN) type BAPIRET2 .
  PROTECTED SECTION.
private section.

  methods _GET_DATA
    importing
      !I_T_R_ZLNUM type TY_T_R_ZLNUM optional
      !I_T_R_MATNR type ZTT_R_MATNR optional
      !I_T_R_CHARG type ZTT_R_CHARG optional
      !I_T_R_LIFNR type MD_RANGE_T_LIFNR optional
      !I_T_R_EBELN type RANGE_EBELN_IN_T optional
      !I_T_R_EBELP type EBELP_RANGE_TTY optional
    returning
      value(R_T_ZTMMIM0001) type TY_T_ZTMMIM0001 .
  methods _GET_NEW_ZLNUM_NUMBER
    importing
      !I_NRRANGENR type NRNR
    returning
      value(R_ZLNUM) type ZED_ZLNUM .
  methods _GET_PURCHDOC_DATA
    importing
      !I_EBELN type EBELN
      !I_EBELP type EBELP
    returning
      value(R_PURCHDOC_DATA) type TY_PURCHDOC_DATA .
  methods _SAVE_DATA
    importing
      !I_S_ZTMMIM0001 type ZTMMIM0001
      !I_COMMIT type BOOLEAN default 'X'
    returning
      value(R_RETURN) type BAPIRET2 .
  methods _CHECK_IF_CONSISTENT
    importing
      !I_S_ZTMMIM0001 type ZTMMIM0001
    returning
      value(R_RETURN) type BAPIRET2 .
endclass. "ZHCL_MMIM_ZLNUM_MANAGER definition
class ZHCL_MMIM_ZLNUM_MANAGER implementation.
METHOD _check_if_consistent.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_purchdoc_d TYPE ty_purchdoc_data.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** ZLNUM

  IF ( i_s_ztmmim0001-zlnum IS NOT INITIAL ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '019' i_message = CONV #( text-019 ) i_message_v1 = CONV #( |{ i_s_ztmmim0001-zlnum ALPHA = OUT }| ) ).
    EXIT.
  ENDIF.

***** WERKS

  IF ( i_s_ztmmim0001-werks <> me->_werks ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '021' i_message = CONV #( text-021 ) ).
    EXIT.
  ENDIF.

***** LGORT

  IF ( i_s_ztmmim0001-lgort <> me->_lgort ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '022' i_message = CONV #( text-022 ) ).
    EXIT.
  ENDIF.

***** MATNR

  SELECT COUNT(*) UP TO 1 ROWS
    FROM marc
   WHERE matnr = @i_s_ztmmim0001-matnr
     AND werks = @i_s_ztmmim0001-werks
     AND lvorm = @space.

  IF ( sy-subrc <> 0 ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '001' i_message = CONV #( text-001 ) i_message_v1 = CONV #( i_s_ztmmim0001-matnr ) i_message_v2 = CONV #( me->_werks ) ).
    EXIT.
  ENDIF.

***** CHARG

  IF ( i_s_ztmmim0001-charg IS INITIAL ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '005' i_message = CONV #( text-005 ) ).
    EXIT.
  ENDIF.

*  SELECT COUNT(*) UP TO 1 ROWS
*    FROM mchb
*   WHERE matnr = @i_s_ztmmim0001-matnr
*     AND werks = @i_s_ztmmim0001-werks
*     AND lgort = @i_s_ztmmim0001-lgort
*     AND charg = @i_s_ztmmim0001-charg.

***** LMEN1

  IF ( i_s_ztmmim0001-lmen1 LE 0 ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '002' i_message = CONV #( text-002 ) ).
    EXIT.
  ENDIF.

***** MEINS

  IF ( i_s_ztmmim0001-meins = space ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '003' i_message = CONV #( text-003 ) ).
    EXIT.
  ENDIF.

***** PURCHASE DATA

  IF ( i_s_ztmmim0001-ebeln IS NOT INITIAL ).

    ls_purchdoc_d = me->_get_purchdoc_data( i_ebeln = i_s_ztmmim0001-ebeln i_ebelp = i_s_ztmmim0001-ebelp ).

    "EBELN/EBELP
    IF ( i_s_ztmmim0001-ebeln IS INITIAL ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ).
      EXIT.
    ENDIF.

    "LOEKZ
    IF ( ls_purchdoc_d-loekz = abap_true ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ).
      EXIT.
    ENDIF.

    "LIFNR
    IF ( i_s_ztmmim0001-lifnr IS NOT INITIAL AND i_s_ztmmim0001-lifnr <> ls_purchdoc_d-lifnr ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ).
      EXIT.
    ENDIF.

    "MATNR
    IF ( i_s_ztmmim0001-matnr <> ls_purchdoc_d-matnr ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ).
      EXIT.
    ENDIF.

    "CHARG
    IF ( i_s_ztmmim0001-charg IS NOT INITIAL AND ls_purchdoc_d-charg IS NOT INITIAL AND i_s_ztmmim0001-charg <> ls_purchdoc_d-charg ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ).
      EXIT.
    ENDIF.

    "SONUM
    IF ( i_s_ztmmim0001-sonum IS NOT INITIAL AND ls_purchdoc_d-sonum IS NOT INITIAL AND i_s_ztmmim0001-sonum <> ls_purchdoc_d-sonum ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ).
      EXIT.
    ENDIF.

  ENDIF.


***** SOBKZ

  IF ( i_s_ztmmim0001-sobkz IS NOT INITIAL ).

    IF ( i_s_ztmmim0001-sonum IS INITIAL ).
        r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '012' i_message = CONV #( text-012 ) ).
        EXIT.
    ENDIF.

  ENDIF.

***** SONUM


**********************************************************************
* Lógica
**********************************************************************


ENDMETHOD.
METHOD _get_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET DATA

  SELECT *
    FROM ztmmim0001
    INTO CORRESPONDING FIELDS OF TABLE r_t_ztmmim0001
   WHERE zlnum IN i_t_r_zlnum
     AND werks = me->_werks
     AND lgort = me->_lgort
     AND matnr IN i_t_r_matnr
     AND charg IN i_t_r_charg
     AND lifnr IN i_t_r_lifnr
     AND ebeln IN i_t_r_ebeln.

ENDMETHOD.
METHOD _get_new_zlnum_number.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET NEW

  zcl_ap_rango_numero=>siguiente_numero(
    EXPORTING
      rango     = zhcl_mmim_zlnum_manager=>s_c_range_zmm_zlnum    " Nombre del objeto rango de números
      rango_no  = i_nrrangenr                                     " Nº de rango de números
    IMPORTING
      numero    = r_zlnum
  ).

ENDMETHOD.
METHOD _GET_PURCHDOC_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  CHECK i_ebeln IS NOT INITIAL.
  CHECK i_ebelp IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** GET DATA

***** EKKO

**** LIFNR

  SELECT SINGLE lifnr
    FROM ekko
    INTO @r_purchdoc_data-lifnr
   WHERE ebeln = @i_ebeln.

  IF ( sy-subrc <> 0 ).
    EXIT.
  ENDIF.

***** EKPO

  SELECT SINGLE ebeln, ebelp, sobkz, loekz, matnr
    FROM ekpo
    INTO ( @r_purchdoc_data-ebeln, @r_purchdoc_data-ebelp, @r_purchdoc_data-sobkz, @r_purchdoc_data-loekz, @r_purchdoc_data-matnr )
   WHERE ebeln = @i_ebeln
     AND ebelp = @i_ebelp
     AND werks = @me->_werks
     AND lgort = @me->_lgort.

  IF ( sy-subrc <> 0 ).
    EXIT.
  ENDIF.

***** EKET

**** CHARG

  SELECT SINGLE charg
    FROM eket
    INTO @r_purchdoc_data-charg
   WHERE ebeln = @i_ebeln
     AND ebelp = @i_ebelp.

***** EKKN

**** SONUM

  IF ( r_purchdoc_data-sobkz = 'E' ). "Pedido de cliente

    SELECT SINGLE vbeln, vbelp
      FROM ekkn
      INTO ( @DATA(lv_vbeln), @DATA(lv_vbelp) )
     WHERE ebeln = @i_ebeln
       AND ebelp = @i_ebelp.

    IF ( lv_vbeln IS NOT INITIAL ).

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input         = lv_vbeln
        IMPORTING
          OUTPUT        = lv_vbeln.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input         = lv_vbelp
        IMPORTING
          OUTPUT        = lv_vbelp.

      CONCATENATE lv_vbeln lv_vbelp INTO r_purchdoc_data-sonum.

    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD _save_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** KEY FIELDS

  IF ( i_s_ztmmim0001-zlnum IS INITIAL )..
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '004' i_message = CONV #( text-004 ) ).
    EXIT.
  ENDIF.

***** NO KEY FIELDS

  IF ( i_s_ztmmim0001-werks IS INITIAL OR i_s_ztmmim0001-lgort IS INITIAL OR i_s_ztmmim0001-matnr IS INITIAL OR i_s_ztmmim0001-charg IS INITIAL OR i_s_ztmmim0001-lmen1 IS INITIAL OR i_s_ztmmim0001-meins IS INITIAL ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '005' i_message = CONV #( text-005 ) ).
    EXIT.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** SAVE DATA

  MODIFY ztmmim0001 FROM i_s_ztmmim0001.

  IF ( sy-subrc = 0 ).

    IF ( i_commit EQ abap_true ).

      COMMIT WORK AND WAIT.

*  ***** RETURN RESULT

      DO 10 TIMES.

        SELECT COUNT(*)
          FROM ztmmim0001
         WHERE zlnum = i_s_ztmmim0001-zlnum.

        IF ( sy-subrc = 0 ).
          r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'S' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '006' i_message = CONV #( text-006 ) i_message_v1 = CONV #( i_s_ztmmim0001-zlnum ) ).
          EXIT.
        ENDIF.

      ENDDO.

      IF ( r_return-type IS INITIAL ).
        r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '007' i_message = CONV #( text-007 ) ).
      ENDIF.

    ELSE.
      ROLLBACK WORK.
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'S' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '006' i_message = CONV #( text-006 ) ).
    ENDIF.

  ENDIF.

ENDMETHOD.
    METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************


**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

      SELECT COUNT(*) UP TO 1 ROWS
        FROM t001w
       WHERE werks = i_werks.

        IF ( sy-subrc <> 0 ).
          zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_mmim_zlnum_manager=>s_cl_label ) ).
        ENDIF.

***** LGORT

        SELECT COUNT(*) UP TO 1 ROWS
          FROM t001l
         WHERE werks = i_werks
           AND lgort = i_lgort.

          IF ( sy-subrc <> 0 ).
            zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_mmim_zlnum_manager=>s_cl_label ) ).
          ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** SET INTERNAL ATRIBUTES

          me->_werks = i_werks.
          me->_lgort = i_lgort.

        ENDMETHOD.
METHOD GET_ZLNUM_DATA_4_MATNR_CHARG.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET AND RETURN DATA

  r_t_ztmmim0001 = me->_get_data( i_t_r_matnr = VALUE #( ( sign = 'I' option = 'EQ' material_low = i_matnr ) ) i_t_r_charg = VALUE #( ( sign = 'I' option = 'EQ' batch_low = i_charg ) ) ).

ENDMETHOD.
METHOD GET_ZLNUM_DATA_4_PURCHDOC.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET AND RETURN DATA

  r_t_ztmmim0001 = me->_get_data( i_t_r_ebeln = VALUE #( ( sign = 'I' option = 'EQ' low = i_ebeln ) ) i_t_r_ebelp = VALUE #( ( sign = 'I' option = 'EQ' low = i_ebelp ) ) ).

ENDMETHOD.
METHOD GET_ZLNUM_DATA_4_ZLNUM.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_ztmmim0001 TYPE ty_t_ztmmim0001.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET DATA AND RETURN

  lt_ztmmim0001 = me->_get_data( i_t_r_zlnum = VALUE #( ( sign = 'I' option = 'EQ' low = i_zlnum ) ) ).

****** RETURN DATA

  IF ( lines( lt_ztmmim0001 ) GT 0 ).
    r_s_ztmmim0001 = lt_ztmmim0001[ 1 ].
  ENDIF.

ENDMETHOD.
METHOD print_zlnum.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_bartender_mngr TYPE REF TO zcl_wm_bartender_print_manager.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

*  SELECT SINGLE


**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  TRY.

    lo_bartender_mngr = NEW zcl_wm_bartender_print_manager( i_werks = me->_werks i_lgort = me->_lgort ).
    lo_bartender_mngr->set_new_label_data_4_lenum( i_mvttype = zcl_wm_bartender_print_manager=>_c_tipo_c i_lenum = CONV #( i_zlnum ) ).

  CATCH zcx_exception INTO DATA(lo_exception).

    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = lo_exception->if_t100_message~t100key-msgid i_number = lo_exception->if_t100_message~t100key-msgno i_message = CONV #( lo_exception->if_t100_message~t100key-attr1 ) ).
    EXIT.

  ENDTRY.

  lo_bartender_mngr->send_label_data_2_bartender_fl(
    EXCEPTIONS
      file_no_created = 1
      others          = 2
  ).
  IF ( sy-subrc = 0 ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'S' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '017' i_message = CONV #( text-017 ) ).
  ELSE.
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '016' i_message = CONV #( text-016 ) ).
  ENDIF.

ENDMETHOD.
METHOD print_zlnum_list.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_bartender_mngr TYPE REF TO zcl_wm_bartender_print_manager,
        lo_exception      TYPE REF TO zcx_exception.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  IF ( lines( i_t_zlnum ) LE 0 ).
    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '018' i_message = CONV #( text-018 ) ) TO r_t_return.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE

  TRY .
    lo_bartender_mngr = NEW zcl_wm_bartender_print_manager( i_werks = me->_werks i_lgort = me->_lgort ).
  CATCH zcx_exception INTO lo_exception.
    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '016' i_message = CONV #( text-016 ) ) TO r_t_return.
    EXIT.
  ENDTRY.

****** APPEND DATA TO PRINT

  LOOP AT i_t_zlnum INTO DATA(ls_zlnum).

    TRY .
      lo_bartender_mngr->set_new_label_data_4_lenum( i_mvttype = zcl_wm_bartender_print_manager=>_c_tipo_c i_lenum = CONV #( ls_zlnum-zlnum ) ).
      APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'S' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '020' i_message = CONV #( text-020 ) i_message_v1 = CONV #( ls_zlnum ) ) TO r_t_return.
    CATCH zcx_exception INTO lo_exception.
      APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '019' i_message = CONV #( text-019 ) i_message_v1 = CONV #( ls_zlnum ) ) TO r_t_return.
    ENDTRY.

  ENDLOOP.

****** PRINT

  lo_bartender_mngr->send_label_data_2_bartender_fl( EXCEPTIONS file_no_created = 1 others          = 2 ).
  IF ( sy-subrc = 0 ).
    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'S' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '017' i_message = CONV #( text-017 ) ) TO r_t_return.
    EXIT.
  ELSE.
    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '016' i_message = CONV #( text-016 ) ) TO r_t_return.
    EXIT.
  ENDIF.

ENDMETHOD.
METHOD set_new_zlnum.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_purchdoc_d TYPE ty_purchdoc_data,
        ls_ztmmim0001 TYPE ztmmim0001.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** FILL DATA WITH IMPORT DATA

  MOVE me->_werks TO ls_ztmmim0001-werks.
  MOVE me->_lgort TO ls_ztmmim0001-lgort.

  MOVE i_matnr TO ls_ztmmim0001-matnr.
  MOVE i_charg TO ls_ztmmim0001-charg.
  MOVE i_lmen1 TO ls_ztmmim0001-lmen1.
  MOVE i_meins TO ls_ztmmim0001-meins.
  MOVE i_ebeln TO ls_ztmmim0001-ebeln.
  MOVE i_ebelp TO ls_ztmmim0001-ebelp.
  MOVE i_lifnr TO ls_ztmmim0001-lifnr.
  MOVE i_sobkz TO ls_ztmmim0001-sobkz.
  MOVE i_sonum TO ls_ztmmim0001-sonum.

  r_return = me->_check_if_consistent( i_s_ztmmim0001 = ls_ztmmim0001 ).
  IF ( r_return-type = 'E' ).
    EXIT.
  ENDIF.

***** FILL EMPTY DATA

**** FROM PURCHDOC

  IF ( i_ebeln IS NOT INITIAL ).

    ls_purchdoc_d = me->_get_purchdoc_data( i_ebeln = ls_ztmmim0001-ebeln i_ebelp = ls_ztmmim0001-ebelp ).

    IF ( ls_purchdoc_d-ebeln IS NOT INITIAL ).

      "LIFNR
      IF ( ls_ztmmim0001-lifnr IS INITIAL AND ls_purchdoc_d-lifnr IS NOT INITIAL ).
        MOVE ls_purchdoc_d-lifnr TO ls_ztmmim0001-lifnr.
      ENDIF.

      "CHARG
      IF ( ls_ztmmim0001-charg IS INITIAL AND ls_purchdoc_d-charg IS NOT INITIAL ).
        MOVE ls_purchdoc_d-charg TO ls_ztmmim0001-charg.
      ENDIF.

      "SOBKZ
      IF ( ls_ztmmim0001-sobkz IS INITIAL AND ls_purchdoc_d-sobkz IS NOT INITIAL ).
        MOVE ls_purchdoc_d-sobkz TO ls_ztmmim0001-sobkz.
      ENDIF.

      "SONUM
      IF ( ls_ztmmim0001-sonum IS INITIAL AND ls_purchdoc_d-sonum IS NOT INITIAL ).
        MOVE ls_purchdoc_d-sonum TO ls_ztmmim0001-sonum.
      ENDIF.

    ENDIF.

  ENDIF.

**** ZLNUM

  ls_ztmmim0001-zlnum = me->_get_new_zlnum_number( i_nrrangenr = zhcl_mmim_zlnum_manager=>s_c_range_zmm_zlnum_90 ).
  IF ( ls_ztmmim0001-zlnum IS INITIAL OR ls_ztmmim0001-zlnum LE 0 ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '023' i_message = CONV #( text-023 ) ).
    EXIT.
  ENDIF.

  MOVE sy-uname   TO ls_ztmmim0001-ernam.
  MOVE sy-datum   TO ls_ztmmim0001-erdat.
  MOVE sy-uzeit   TO ls_ztmmim0001-erzet.

  r_return = me->_save_data( i_s_ztmmim0001 = ls_ztmmim0001 i_commit = i_commit ).

ENDMETHOD.
METHOD set_new_zlnum_4_matnr_charg.

**********************************************************************
* Parámetros locales
**********************************************************************

  TYPES: BEGIN OF lty_po_data_4_matnr_charg,
    ebeln TYPE ebeln,
    ebelp TYPE ebelp,
    matnr TYPE matnr,
    charg TYPE charg_d,
  END OF lty_po_data_4_matnr_charg.

  DATA: lt_po_data_4_matnr TYPE TABLE OF lty_po_data_4_matnr_charg.

  DATA: ls_ztmmim0001             TYPE ztmmim0001,
        ls_po_data_4_matnr_charg  TYPE lty_po_data_4_matnr_charg,
        ls_purchdoc_d             TYPE ty_purchdoc_data.

  DATA: lv_message TYPE bapi_msg.

**********************************************************************
* Validaciones
**********************************************************************


**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  SELECT a~ebeln, a~ebelp, a~matnr, b~charg
    FROM ekpo AS a LEFT JOIN eket AS b
      ON a~ebeln = b~ebeln
     AND a~ebelp = b~ebelp
    INTO CORRESPONDING FIELDS OF TABLE @lt_po_data_4_matnr
   WHERE a~matnr = @i_matnr
     AND a~werks = @me->_werks
     AND a~lgort = @me->_lgort
     AND a~loekz = @abap_false
     AND b~charg = @i_charg.


****** SET DATA AND RETURN RESULT

  IF ( lines( lt_po_data_4_matnr ) GT 0 ).

    LOOP AT lt_po_data_4_matnr INTO ls_po_data_4_matnr_charg.

      DO i_anzl1 TIMES.
        APPEND me->set_new_zlnum( i_matnr = i_matnr i_charg = i_charg i_lmen1 = i_lmen1 i_meins = i_meins i_ebeln = ls_po_data_4_matnr_charg-ebeln i_ebelp = ls_po_data_4_matnr_charg-ebelp i_commit = i_commit ) TO r_t_return.
      ENDDO.

    ENDLOOP.

  ELSE.

    DO i_anzl1 TIMES.
      APPEND me->set_new_zlnum( i_matnr = i_matnr i_charg = i_charg i_lmen1 = i_lmen1 i_meins = i_meins i_commit = i_commit ) TO r_t_return.
    ENDDO.

  ENDIF.


EXIT.

***********************************************************************
** Parámetros locales
***********************************************************************
*
*
***********************************************************************
** Validaciones
***********************************************************************
*
******* IMPORT DATA
*
****** MATNR
*
*  SELECT COUNT(*) UP TO 1 ROWS
*    FROM marc
*   WHERE matnr = i_matnr
*     AND werks = me->_werks
*     AND lvorm = space.
*
*  IF ( sy-subrc <> 0 ).
*    CLEAR: lv_message.
*    MOVE text-001 TO lv_message.
*    REPLACE FIRST OCCURRENCE OF '&' IN lv_message WITH i_matnr.
*    REPLACE FIRST OCCURRENCE OF '&' IN lv_message WITH me->_werks.
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '001' i_message = lv_message ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
****** CHARG
*
*    ""TODO: Ver si implementar, hay que generar etiquetas sin lote
*
****** LMEN1
*
*  IF ( i_lmen1 LE 0 ).
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '001' i_message = CONV #( text-002 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
****** MEINS
*
*  IF ( i_meins IS INITIAL ).
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '001' i_message = CONV #( text-003 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
***********************************************************************
** Lógica
***********************************************************************
*
******* PREPARE DATA
*
*  SELECT a~ebeln, a~ebelp, a~matnr, b~charg
*    FROM ekpo AS a LEFT JOIN eket AS b
*      ON a~ebeln = b~ebeln
*     AND a~ebelp = b~ebelp
*    INTO CORRESPONDING FIELDS OF TABLE @lt_po_data_4_matnr
*   WHERE a~matnr = @i_matnr
*     AND a~werks = @me->_werks
*     AND a~lgort = @me->_lgort
*     AND a~loekz = @abap_false
*     AND b~charg = @i_charg.
*
******* SET DATA AND RETURN RESULT
*
*  IF ( lines( lt_po_data_4_matnr ) GT 0 ).
*    LOOP AT lt_po_data_4_matnr INTO ls_po_data_4_matnr_charg.
*      APPEND LINES OF me->set_new_zlnum_4_purchdoc( i_ebeln = ls_po_data_4_matnr_charg-ebeln i_ebelp = ls_po_data_4_matnr_charg-ebelp i_anzl1 = i_anzl1 i_lmen1 = i_lmen1 i_meins = i_meins i_commit = i_commit ) TO r_t_return.
*    ENDLOOP.
*  ELSE.
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '015' i_message = CONV #( text-015 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.

ENDMETHOD.
METHOD SET_NEW_ZLNUM_4_PURCHDOC.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_purchdoc_d TYPE ty_purchdoc_data.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** GET PURCHDOC DATA

  ls_purchdoc_d = me->_get_purchdoc_data( i_ebeln = i_ebeln i_ebelp = i_ebelp ).

***** CHECK PURCHDOC DATA

**** EBELN/EBELP

  IF ( ls_purchdoc_d-ebeln IS INITIAL OR ls_purchdoc_d-ebelp IS INITIAL ).
    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ) TO r_t_return.
    EXIT.
  ENDIF.

****** FILL DATA

  DO i_anzl1 TIMES.

    APPEND me->set_new_zlnum( i_matnr = ls_purchdoc_d-matnr i_charg = ls_purchdoc_d-charg i_lmen1 = i_lmen1 i_meins = i_meins i_ebeln = ls_purchdoc_d-ebeln i_ebelp = ls_purchdoc_d-ebelp
                              i_lifnr = ls_purchdoc_d-lifnr i_sobkz = ls_purchdoc_d-sobkz i_sonum = ls_purchdoc_d-sonum i_commit = i_commit ) TO r_t_return.

  ENDDO.



***********************************************************************
** Parámetros locales
***********************************************************************
*
*  DATA: ls_purchdoc_d TYPE ty_purchdoc_data,
*        ls_ztmmim0001 TYPE ztmmim0001.
*
***********************************************************************
** Validaciones
***********************************************************************
*
******* IMPORT DATA
*
****** LEMEN
*
*  IF ( i_lmen1 LE 0 ).
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '001' i_message = CONV #( text-002 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
****** MEINS
*
*  IF ( i_meins IS INITIAL ).
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '002' i_message = CONV #( text-002 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
***********************************************************************
** Lógica
***********************************************************************
*
******* PREPARE DATA
*
****** GET PURCHDOC DATA
*
*  ls_purchdoc_d = me->_get_purchdoc_data( i_ebeln = i_ebeln i_ebelp = i_ebelp ).
*
****** CHECK PURCHDOC DATA
*
***** EBELN/EBELP
*
*  IF ( ls_purchdoc_d-ebeln IS INITIAL OR ls_purchdoc_d-ebelp IS INITIAL ).
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-008 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
*  IF ( ls_purchdoc_d-matnr IS INITIAL ).
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-013 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
*  IF ( ls_purchdoc_d-charg IS INITIAL ).
*    APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '008' i_message = CONV #( text-014 ) ) TO r_t_return.
*    EXIT.
*  ENDIF.
*
******* FILL DATA
*
*  DO i_anzl1 TIMES.
*
****** PURCHDOC DATA
*
*    MOVE-CORRESPONDING ls_purchdoc_d TO ls_ztmmim0001.
*
****** GET NEXT NUMBER
*
*    ls_ztmmim0001-zlnum = me->_get_new_zlnum_number( i_nrrangenr = zhcl_mmim_zlnum_manager=>s_c_range_zmm_zlnum_90 ).
*    IF ( ls_ztmmim0001-zlnum IS INITIAL OR ls_ztmmim0001-zlnum LE 0 ).
*      CLEAR: ls_ztmmim0001.
*      EXIT.
*    ENDIF.
*
******* FILL DATA
*
*    MOVE me->_werks TO ls_ztmmim0001-werks.
*    MOVE me->_lgort TO ls_ztmmim0001-lgort.
*    MOVE i_lmen1    TO ls_ztmmim0001-lmen1.
*    MOVE i_meins    TO ls_ztmmim0001-meins.
*    MOVE sy-uname   TO ls_ztmmim0001-ernam.
*    MOVE sy-datum   TO ls_ztmmim0001-erdat.
*    MOVE sy-uzeit   TO ls_ztmmim0001-erzet.
*
*    APPEND me->_save_data( i_s_ztmmim0001 = ls_ztmmim0001 i_commit = i_commit ) TO r_t_return.
*
*  ENDDO.

ENDMETHOD.
METHOD UPDATE_ZLNUM_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_ztmmim0001 TYPE ztmmim0001,
        ls_purchdoc_d TYPE ty_purchdoc_data.

  DATA: lt_ztmmim0001 TYPE TABLE OF ztmmim0001.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  IF ( i_lmen1 IS INITIAL AND i_meins IS INITIAL AND i_sobkz IS INITIAL AND i_sonum IS INITIAL ).
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '010' i_message = CONV #( text-010 ) ).
    EXIT.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** ZUAs

  "Obtengo registro
  lt_ztmmim0001 = me->_get_data( i_t_r_zlnum = VALUE #( ( sign = 'I' option = 'EQ' low = i_zlnum ) ) ).
  IF ( lines( lt_ztmmim0001 ) GT 0 ).
    READ TABLE lt_ztmmim0001 INTO ls_ztmmim0001 INDEX 1.
  ELSE.
    r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '011' i_message = CONV #( text-011 ) ).
    EXIT.
  ENDIF.

***** PURCHDOC DATA

  ls_purchdoc_d = me->_get_purchdoc_data( i_ebeln = ls_ztmmim0001-ebeln i_ebelp = ls_ztmmim0001-ebelp ).

****** FILL DATA

***** CANTIDAD

  IF ( i_lmen1 > 0 ).
    MOVE i_lmen1 TO ls_ztmmim0001-lmen1.
  ENDIF.

***** UM

  IF ( i_meins IS NOT INITIAL ).
    MOVE i_meins TO ls_ztmmim0001-meins.
  ENDIF.

***** TIPO STOCK ESPECIAL

  IF ( i_sobkz IS NOT INITIAL ).
    IF ( i_sobkz <> ls_purchdoc_d-sobkz ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '012' i_message = CONV #( text-012 ) ).
      EXIT.
    ENDIF.
  ENDIF.

***** Nº STOCK ESPECIAL

  IF ( i_sonum IS NOT INITIAL ).
    IF ( i_sonum <> ls_purchdoc_d-sonum ).
      r_return = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zhcl_mmim_zlnum_manager=>s_cl_label i_number = '012' i_message = CONV #( text-012 ) ).
      EXIT.
    ENDIF.
  ENDIF.

  MOVE sy-uname TO ls_ztmmim0001-aenam.
  MOVE sy-datum TO ls_ztmmim0001-aedat.
  MOVE sy-uzeit TO ls_ztmmim0001-aezet.

****** SAVE DATA AND RETURN

  r_return = me->_save_data( i_s_ztmmim0001 = ls_ztmmim0001 i_commit = abap_true ).

ENDMETHOD.
