
class ZCL_MM_MATERIAL_CUPS definition
  public
  inheriting from ZCL_MM_MATERIAL_MASTER
  create public .

public section.

  class-data _C_SETNAME_VALUE type SETNAMENEW read-only value '0000ZMM_PT_CUPS' ##NO_TEXT.
  class-data _C_TYPECUP_TAPA type CHAR1 read-only value 'T' ##NO_TEXT.
  class-data _C_TYPECUP_VASO type CHAR1 read-only value 'V' ##NO_TEXT.
  class-data _C_TYPECUP_BOWL type CHAR1 read-only value 'B' ##NO_TEXT.
  class-data _C_TYPECUP_BOWL_W type CHAR1 read-only value 'W' ##NO_TEXT.
  class-data _C_TYPECUP_BOWL_CIRCULAR type CHAR2 read-only value 'CI' ##NO_TEXT.
  class-data _C_TYPECUP_BOWL_RECTANG type CHAR2 read-only value 'RE' ##NO_TEXT.
  data _ALTURA type ZCUPALTURA read-only .
  data _APILABLE type CHAR1 read-only .
  data _CAPACIDAD type ZCUPCAPACIDAD read-only .
  data _DIAMETRO type ZCUPDIAMETRO read-only .
  data _TYPECUP type CHAR1 read-only .

  methods CONSTRUCTOR
    importing
      !I_MTART type MTART
      !I_MBRSH type MBRSH
      !I_PRODH type PRODH_D optional
      !I_TYPECUP type CHAR1 optional
      !I_DIAMETRO type ZCUPDIAMETRO optional
      !I_ALTURA type ZCUPALTURA optional
      !I_APILABLE type CHAR1 optional
      !I_CAPACIDAD type ZCUPCAPACIDAD optional
    raising
      ZCX_MM_EXCEPTION .
  methods SET_TAPA
    importing
      !I_DIAMETRO type ZCUPDIAMETRO
      !I_APILABLE type CHAR1
    raising
      ZCX_MM_EXCEPTION .
  methods SET_BOWL
    importing
      !I_TYPE_BOWL type CHAR1
      !I_DIAMETRO type ZCUPDIAMETRO
      !I_ALTURA type ZCUPALTURA
      !I_CAPACIDAD type ZCUPCAPACIDAD
    raising
      ZCX_MM_EXCEPTION .
  methods SET_VASO
    importing
      !I_DIAMETRO type ZCUPDIAMETRO
      !I_ALTURA type ZCUPALTURA
      !I_CAPACIDAD type ZCUPCAPACIDAD
    raising
      ZCX_MM_EXCEPTION .
  class-methods S_DECODE_MATNR
    importing
      !I_MATNR type MATNR
    exporting
      !E_MTEXT type CHAR18
      !E_MSEQU type CHAR18
    raising
      ZCX_MM_EXCEPTION .

  methods ZINTF_MM_MATERIAL_MASTER~GET_NEW_MATNR
    redefinition .
  methods ZINTF_MM_MATERIAL_MASTER~SET_PRODH
    redefinition .
  methods ZINTF_MM_MATERIAL_MASTER~SET_PRODH_WITH_DIALOG
    redefinition .
protected section.

  methods _CHECK_MTEXT
    redefinition .
  methods _INITIALIZE_VALUES_4_CLASS
    final redefinition .
  methods _RECALC_MATNR_LENGTHS
    redefinition .
private section.

  methods _SET_ALTURA
    importing
      !I_ALTURA type ZCUPALTURA
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_APILABLE
    importing
      !I_APILABLE type CHAR1
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_CAPACIDAD
    importing
      !I_CAPACIDAD type ZCUPCAPACIDAD
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_DIAMETRO
    importing
      !I_DIAMETRO type ZCUPDIAMETRO
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_LARGO
    importing
      !I_LARGO type ZCUPLARGO
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_TYPECUP
    importing
      !I_TYPECUP type CHAR1 optional
    raising
      ZCX_MM_EXCEPTION .
  methods __CHECK_ALTURA
    importing
      !I_ALTURA type ZCUPALTURA
    returning
      value(E_CORRECT) type BOOLEAN .
  methods __CHECK_CAPACIDAD
    importing
      !I_CAPACIDAD type ZCUPCAPACIDAD
    returning
      value(E_CORRECT) type BOOLEAN .
  methods __CHECK_DIAMETRO
    importing
      !I_DIAMETRO type ZCUPDIAMETRO
    returning
      value(E_CORRECT) type BOOLEAN .
  methods __CHECK_LARGO
    importing
      !I_LARGO type ZCUPLARGO
    returning
      value(E_CORRECT) type BOOLEAN .
  methods __DECODE_MTEXT
    importing
      !I_MTEXT type CHAR18
    exporting
      !E_TYPECUP type CHAR1
      !E_DIAMETRO type ZCUPDIAMETRO
      !E_APILABLE type CHAR1
      !E_ALTURA type ZCUPALTURA
      !E_CAPACIDAD type ZCUPCAPACIDAD
    raising
      ZCX_MM_EXCEPTION .
  methods __ENCODE_MTEXT
    returning
      value(E_MTEXT) type PRODH_D
    raising
      ZCX_MM_EXCEPTION .
endclass. "ZCL_MM_MATERIAL_CUPS definition
class ZCL_MM_MATERIAL_CUPS implementation.
  METHOD __check_altura.

    SELECT COUNT(*) UP TO 1 ROWS
      FROM ztmm0031
     WHERE zzaltura = i_altura.

    IF ( sy-subrc = 0 ).
      e_correct = abap_true.
    ELSE.
      e_correct = abap_false.
    ENDIF.

  ENDMETHOD.
  METHOD __check_capacidad.

    SELECT COUNT(*) UP TO 1 ROWS
      FROM ztmm0032
     WHERE zzcapacidad = i_capacidad.

    IF ( sy-subrc = 0 ).
      e_correct = abap_true.
    ELSE.
      e_correct = abap_false.
    ENDIF.

  ENDMETHOD.
  METHOD __check_diametro.

    SELECT COUNT(*) UP TO 1 ROWS
      FROM ztmm0030
     WHERE zzdiametro = i_diametro.

    IF ( sy-subrc = 0 ).
      e_correct = abap_true.
    ELSE.
      e_correct = abap_false.
    ENDIF.

  ENDMETHOD.
METHOD __check_largo.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

  SELECT COUNT(*) UP TO 1 ROWS
    FROM ztmm0035
   WHERE zzlargo = i_largo.

  IF ( sy-subrc = 0 ).
    e_correct = abap_true.
  ELSE.
    e_correct = abap_false.
  ENDIF.

ENDMETHOD.
  METHOD __decode_mtext.

    DATA: lv_correct TYPE boolean.

    lv_correct = me->_check_mtext( i_mtext = i_mtext ).

    IF ( lv_correct = abap_true ).
      e_typecup   = i_mtext+1(1).
      e_diametro  = i_mtext+2(3).
      CASE e_typecup.
        WHEN 'T'.
          e_apilable  = i_mtext+5(1).
        WHEN 'V'.
          e_capacidad = i_mtext+5(4).
          e_altura    = i_mtext+9(3).
      ENDCASE.
    ELSE.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ENDIF.


*    DATA: lv_cup(1)       TYPE c,
*          lv_typecup(1)   TYPE c,
*          lv_diametro     TYPE zcupdiametro,
*          lv_apilable(1)  TYPE c,
*          lv_capacidad    TYPE zcupcapacidad,
*          lv_altura       TYPE zcupaltura,
*          lv_correct      TYPE boolean.
*
**1. Primer carácter 'C'
*
*    lv_cup = i_mtext(1).
*
*    IF ( lv_cup <> 'C' ).
*      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
*    ENDIF.
*
**2. Tipo cup
*
*    lv_typecup = i_mtext+1(1).
*
*    CASE lv_typecup.
*
*      WHEN zcl_mm_material_cups=>_c_typecup_tapa.
*
*        e_typecup = lv_typecup.
*
**3. Diámetro
*
*        lv_diametro = i_mtext+2(3).
*
*        CLEAR: lv_correct.
*        lv_correct = me->__check_diametro( i_diametro = lv_diametro ).
*
*        IF ( lv_correct = abap_false ).
*          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
*        ENDIF.
*
*        e_diametro = lv_diametro.
*
**4. Apilable
*
*        lv_apilable = i_mtext+5(1).
*
*        IF ( lv_apilable <> 'A' AND lv_apilable <> 'N' ).
*          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
*        ENDIF.
*
*        e_apilable = lv_apilable.
*
*      WHEN 'V'.
*
*        e_typecup = lv_typecup.
*
**3. Diámetro
*
*        lv_diametro = i_mtext+2(3).
*
*        CLEAR: lv_correct.
*        lv_correct = me->__check_diametro( i_diametro = lv_diametro ).
*
*        IF ( lv_correct = abap_false ).
*          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
*        ENDIF.
*
*        e_diametro = lv_diametro.
*
**4. Capacidad
*
*        lv_capacidad = i_mtext+5(4).
*
*        CLEAR: lv_correct.
*        lv_correct = me->__check_capacidad( i_capacidad = lv_capacidad ).
*
*        IF ( lv_correct = abap_false ).
*          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
*        ENDIF.
*
*        e_capacidad = lv_capacidad.
*
**5. Altura
*
*        lv_altura = i_mtext+9(3).
*
*        CLEAR: lv_correct.
*        lv_correct = me->__check_altura( i_altura = lv_altura ).
*
*        IF ( lv_correct = abap_false ).
*          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
*        ENDIF.
*
*        e_altura = lv_altura.
*
*      WHEN OTHERS.
*
*        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCLASS' i_msgty = 'E' ).
*
*    ENDCASE.

  ENDMETHOD.
  METHOD __encode_mtext.

    DATA: lv_message TYPE scx_attrname.

    IF ( _typecup IS NOT INITIAL ).

      CASE _typecup.
        WHEN 'T'.

          IF ( _diametro IS INITIAL OR _apilable IS INITIAL ).
            MOVE text-006 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).
          ENDIF.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input         = _diametro
            IMPORTING
              output        = _diametro.

          CONCATENATE 'C' _typecup _diametro _apilable INTO e_mtext.

        WHEN 'V'.

          IF ( _diametro IS INITIAL OR _altura IS INITIAL OR _capacidad IS INITIAL ).
            MOVE text-006 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).
          ENDIF.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input         = _diametro
            IMPORTING
              output        = _diametro.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input         = _altura
            IMPORTING
              output        = _altura.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input         = _capacidad
            IMPORTING
              output        = _capacidad.

          CONCATENATE 'C' _typecup _diametro _capacidad _altura INTO e_mtext.

        WHEN 'R' OR 'C'.

          IF ( _diametro IS INITIAL OR _altura IS INITIAL OR _capacidad IS INITIAL ).
            MOVE text-006 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).
          ENDIF.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input         = _diametro
            IMPORTING
              output        = _diametro.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input         = _altura
            IMPORTING
              output        = _altura.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input         = _capacidad
            IMPORTING
              output        = _capacidad.

          CONCATENATE 'CW' me->_typecup _diametro _capacidad _altura INTO e_mtext.

        WHEN OTHERS.

          MOVE text-006 TO lv_message.
          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).

      ENDCASE.

    ELSE.

      MOVE text-006 TO lv_message.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.


  ENDMETHOD.
  METHOD _check_mtext.

    DATA: lo_exception  TYPE REF TO zcx_mm_exception.

    DATA: lv_cup(1)       TYPE c,
          lv_typecup(1)   TYPE c,
          lv_diametro     TYPE zcupdiametro,
          lv_apilable(1)  TYPE c,
          lv_capacidad    TYPE zcupcapacidad,
          lv_altura       TYPE zcupaltura,
          lv_correct      TYPE boolean.


    lv_cup = i_mtext(1).

    IF ( lv_cup <> 'C' ).
      e_correct = abap_false.
      EXIT.
    ENDIF.

*2. Tipo cup

    lv_typecup = i_mtext+1(1).

    IF ( lv_typecup EQ 'W' ).
      MOVE zcl_mm_material_cups=>_c_typecup_bowl TO lv_typecup.
    ENDIF.

    CASE lv_typecup.

      WHEN zcl_mm_material_cups=>_c_typecup_tapa.

*3. Diámetro

        lv_diametro = i_mtext+2(3).

        CLEAR: lv_correct.
        lv_correct = me->__check_diametro( i_diametro = lv_diametro ).

        IF ( lv_correct = abap_false ).
          e_correct = abap_false.
          EXIT.
        ENDIF.

*4. Apilable

        lv_apilable = i_mtext+5(1).

        IF ( lv_apilable <> 'A' AND lv_apilable <> 'N' ).
          e_correct = abap_false.
          EXIT.
        ENDIF.

        e_correct = abap_true.

      WHEN zcl_mm_material_cups=>_c_typecup_vaso.

*3. Diámetro

        lv_diametro = i_mtext+2(3).

        CLEAR: lv_correct.
        lv_correct = me->__check_diametro( i_diametro = lv_diametro ).

        IF ( lv_correct = abap_false ).
          e_correct = abap_false.
          EXIT.
        ENDIF.

*4. Capacidad

        lv_capacidad = i_mtext+5(4).

        CLEAR: lv_correct.
        lv_correct = me->__check_capacidad( i_capacidad = lv_capacidad ).

        IF ( lv_correct = abap_false ).
          e_correct = abap_false.
          EXIT.
        ENDIF.

*5. Altura

        lv_altura = i_mtext+9(3).

        CLEAR: lv_correct.
        lv_correct = me->__check_altura( i_altura = lv_altura ).

        IF ( lv_correct = abap_false ).
          e_correct = abap_false.
          EXIT.
        ENDIF.

        e_correct = abap_true.

      WHEN zcl_mm_material_cups=>_c_typecup_bowl.

        CASE i_mtext+2(1).

          WHEN zcl_mm_material_cups=>_c_typecup_bowl_circular(1) OR zcl_mm_material_cups=>_c_typecup_bowl_rectang(1).

*3. Diámetro

            IF ( i_mtext+2(1) = zcl_mm_material_cups=>_c_typecup_bowl_circular(1) ).

              lv_diametro = i_mtext+3(3).

              CLEAR: lv_correct.
              lv_correct = me->__check_diametro( i_diametro = lv_diametro ).

              IF ( lv_correct = abap_false ).
                e_correct = abap_false.
                EXIT.
              ENDIF.

            ELSEIF ( i_mtext+2(1) = zcl_mm_material_cups=>_c_typecup_bowl_rectang(1) ).

              lv_diametro = i_mtext+3(3).

              CLEAR: lv_correct.
              lv_correct = me->__check_largo( i_largo = lv_diametro ).

              IF ( lv_correct = abap_false ).
                e_correct = abap_false.
                EXIT.
              ENDIF.

            ENDIF.

*4. Capacidad

            lv_capacidad = i_mtext+6(4).

            CLEAR: lv_correct.
            lv_correct = me->__check_capacidad( i_capacidad = lv_capacidad ).

            IF ( lv_correct = abap_false ).
              e_correct = abap_false.
              EXIT.
            ENDIF.

*5. Altura

            lv_altura = i_mtext+10(3).

            CLEAR: lv_correct.
            lv_correct = me->__check_altura( i_altura = lv_altura ).

            IF ( lv_correct = abap_false ).
              e_correct = abap_false.
              EXIT.
            ENDIF.

            e_correct = abap_true.

          WHEN OTHERS.

            e_correct = abap_false.
            EXIT.

        ENDCASE.

      WHEN OTHERS.

        e_correct = abap_false.
        EXIT.

    ENDCASE.

  ENDMETHOD.
  method _INITIALIZE_VALUES_4_CLASS.

    super->_initialize_values_4_class( i_dynnr = i_dynnr i_setname = i_setname ).

  endmethod.
  METHOD _recalc_matnr_lengths.

    CASE me->_typecup.
      WHEN 'T'.
        me->zintf_mm_material_master~_matnr_mtext_length = 6.
        me->zintf_mm_material_master~_matnr_msequ_length = me->zintf_mm_material_master~_matnr_length - me->zintf_mm_material_master~_matnr_mtext_length.
      WHEN 'V'.
        me->zintf_mm_material_master~_matnr_mtext_length = 12.
        me->zintf_mm_material_master~_matnr_msequ_length = me->zintf_mm_material_master~_matnr_length - me->zintf_mm_material_master~_matnr_mtext_length.
      WHEN 'C' OR 'R'.
        me->zintf_mm_material_master~_matnr_mtext_length = 13.
        me->zintf_mm_material_master~_matnr_msequ_length = me->zintf_mm_material_master~_matnr_length - me->zintf_mm_material_master~_matnr_mtext_length.
    ENDCASE.

  ENDMETHOD.
  METHOD _SET_ALTURA.

    DATA: lv_correct TYPE boolean,
          lv_message TYPE scx_attrname.

    lv_correct = me->__check_altura( i_altura = i_altura ).

    IF ( lv_correct = abap_true ).

      _altura = i_altura.

    ELSE.

      MOVE text-003 TO lv_message.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_cups=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '003' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ENDMETHOD.
  METHOD _SET_APILABLE.

    DATA: lv_message TYPE scx_attrname.

    "Comprobamos si es A o N
    IF ( i_apilable = 'A' OR i_apilable = 'N' ). "Valor correcto

      "Seteamos valor
      _apilable = i_apilable.

    ELSE. "Tipo incorrecto

      MOVE text-005 TO lv_message.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '005' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ENDMETHOD.
  METHOD _SET_CAPACIDAD.

    DATA: lv_message TYPE scx_attrname,
          lv_correct TYPE boolean.

    lv_correct = me->__check_capacidad( i_capacidad = i_capacidad ).

    IF ( lv_correct = abap_true ).
      _capacidad = i_capacidad.
    ELSE.
      MOVE text-004 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_cups=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '004' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).
    ENDIF.

  ENDMETHOD.
  METHOD _SET_DIAMETRO.

    DATA: lv_message TYPE scx_attrname,
          lv_correct TYPE boolean.

    lv_correct = me->__check_diametro( i_diametro = i_diametro ).

    IF ( lv_correct = abap_true ).
      me->_diametro = i_diametro.
    ELSE.
      MOVE text-002 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_cups=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).
    ENDIF.

  ENDMETHOD.
METHOD _set_largo.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message TYPE scx_attrname,
        lv_correct TYPE boolean.

**********************************************************************
* Validaciones
**********************************************************************

**** CHECK LARGO

  lv_correct = me->__check_largo( i_largo = i_largo ).

**********************************************************************
* Lógica
**********************************************************************

**** SET

  IF ( lv_correct = abap_true ).
    me->_diametro = i_largo.
  ELSE.
    MOVE text-002 TO lv_message.
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_cups=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).
  ENDIF.

ENDMETHOD.
  METHOD _SET_TYPECUP.

    DATA: lo_exception  TYPE REF TO zcx_mm_exception,
          lv_message    TYPE scx_attrname,
          lv_prodh      TYPE prodh_d.

    "Comprobamos si es T o V
    IF ( i_typecup = zcl_mm_material_cups=>_c_typecup_tapa
      OR i_typecup = zcl_mm_material_cups=>_c_typecup_vaso
      OR i_typecup = zcl_mm_material_cups=>_c_typecup_bowl_circular(1)
      OR i_typecup = zcl_mm_material_cups=>_c_typecup_bowl_rectang(1) ). "Tipo correcto


      "Seteamos valor
      me->_typecup = i_typecup.

      "Borramos campos del otro tipo
      CASE me->_typecup.
        WHEN zcl_mm_material_cups=>_c_typecup_tapa.
          CLEAR: me->_altura, me->_capacidad.
        WHEN zcl_mm_material_cups=>_c_typecup_vaso OR zcl_mm_material_cups=>_c_typecup_bowl_circular(1) OR zcl_mm_material_cups=>_c_typecup_bowl_rectang(1).
          CLEAR: me->_apilable.
      ENDCASE.

      "Seteamos jerarquía
      TRY .

        CASE me->_typecup.
          "Tapa o vaso
          WHEN zcl_mm_material_cups=>_c_typecup_tapa OR zcl_mm_material_cups=>_c_typecup_vaso.
            CONCATENATE 'CU' me->_typecup 'A' INTO lv_prodh.
          WHEN zcl_mm_material_cups=>_c_typecup_bowl_circular(1).
            CONCATENATE 'CU' me->_c_typecup_bowl 'O' _c_typecup_bowl_circular INTO lv_prodh.
          WHEN zcl_mm_material_cups=>_c_typecup_bowl_rectang(1).
            CONCATENATE 'CU' me->_c_typecup_bowl 'O' _c_typecup_bowl_rectang INTO lv_prodh.
        ENDCASE.

        me->zintf_mm_material_master~set_prodh( i_prodh = lv_prodh ).
      CATCH zcx_mm_exception INTO lo_exception.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
      ENDTRY.

      "Recalculamos tamaños del matnr
      me->_recalc_matnr_lengths( ).

    ELSE. "Tipo incorrecto

      MOVE text-001 TO lv_message.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '001' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ENDMETHOD.
METHOD constructor.

  DATA: lo_exception TYPE REF TO zcx_mm_exception,
        lv_message   TYPE scx_attrname.

  "Bloque 1: Chequeos propios de la clase
  TRY.

    DATA(lt_r_mtart) = zcl_mm_material_cups=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_cups=>_c_setname_value ).

    IF ( i_mtart NOT IN lt_r_mtart ).

      MOVE text-013 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '013' i_msgid = 'ZCLASS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  CATCH zcx_mm_exception INTO lo_exception.
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
  ENDTRY.

  "Bloque 2: Llamamos al super constructor.
  TRY.
    super->constructor( i_mtart = i_mtart i_mbrsh = i_mbrsh ).
  CLEANUP.
    "Borramos parámetros locales.
    CLEAR: me->zintf_mm_material_master~mtart, me->zintf_mm_material_master~prodh, me->zintf_mm_material_master~mbrsh.
  ENDTRY.

  "Bloque 3: Seteamos el resto de valores de la clase.
  TRY .

    IF ( i_prodh IS NOT INITIAL ).
      me->zintf_mm_material_master~set_prodh( i_prodh = i_prodh ).
    ENDIF.

    IF ( i_typecup IS NOT INITIAL ).
      me->_set_typecup( i_typecup = i_typecup ).
    ENDIF.

    IF ( i_diametro IS NOT INITIAL ).
      me->_set_diametro( i_diametro = i_diametro ).
    ENDIF.

    IF ( i_altura IS NOT INITIAL ).
      me->_set_altura( i_altura = i_altura ).
    ENDIF.

    IF ( i_capacidad IS NOT INITIAL ).
      me->_set_capacidad( i_capacidad = i_capacidad ).
    ENDIF.

    IF ( i_apilable IS NOT INITIAL ).
      me->_set_apilable( i_apilable = i_apilable ).
    ENDIF.

    me->_initialize_values_4_class( i_dynnr = '0400' i_setname = _c_setname_value ).

  CATCH zcx_mm_exception INTO lo_exception.
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
  ENDTRY.

ENDMETHOD.
  METHOD s_decode_matnr.

    DATA: lv_typecup      TYPE zcuptype,
          lv_diametro     TYPE zcupdiametro,
          lv_apilable(1)  TYPE c,
          lv_altura       TYPE zcupaltura,
          lv_capacidad    TYPE zcupcapacidad,
          lv_offset       TYPE i.

    DATA: lv_message TYPE scx_attrname.

*1. Chequeamos primera letra del material. Siempre C.

    "chequeamos si primera letra no es C.
    IF ( i_matnr(1) NE 'C' ). "No es C.
      CLEAR: lv_message.
      MOVE text-007 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).
    ENDIF.

*2. Chequeamos segunda letra del material. Siempre T o V.

    "Dividimos lógica en función de segunda letra.
    CASE i_matnr+1(1).

      WHEN zcl_mm_material_cups=>_c_typecup_tapa. "Tapa

*3. Chequemos diámetro

        "Obtenemos diametro
        lv_diametro = i_matnr+2(3).

        "Comprobamos si está en la tabla de diámetros
        SELECT COUNT(*)
          FROM ztmm0030
         WHERE zzdiametro = lv_diametro.

        "Resultado
        IF ( sy-subrc = 0 ). "Está en la tabla de diámetros

*4. Chequeamos apilable

          "Obtenemos el valos apilable
          lv_apilable = i_matnr+5(1).

          "Si es A o N devolvemos resultado
          IF ( lv_apilable = 'A' OR lv_apilable = 'N' ).

            e_mtext = i_matnr(6).
            e_msequ = i_matnr+6.

          ELSE. "Si no es A o N lanzamos error.

            CLEAR: lv_message.
            MOVE text-007 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

          ENDIF.

        ELSE. "No está en la tabla de diámetros

          CLEAR: lv_message.
          MOVE text-002 TO lv_message.
          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

        ENDIF. "Fin resultado ZTMM0030

      WHEN zcl_mm_material_cups=>_c_typecup_vaso. "Vaso

*3. Chequemos diámetro

        "Obtenemos diametro
        lv_diametro = i_matnr+2(3).

        "Comprobamos si está en la tabla de diámetros
        SELECT COUNT(*)
          FROM ztmm0030
         WHERE zzdiametro = lv_diametro.

        "Resultado
        IF ( sy-subrc = 0 ). "Está en la tabla de diámetros

*4. Chequeo capacidad

          "Obtenemos capacidad
          lv_capacidad = i_matnr+5(4).

          "Comprobamos si está en la tabla de diámetros
          SELECT COUNT(*)
            FROM ztmm0032
           WHERE zzcapacidad = lv_capacidad.

          "Resultado
          IF ( sy-subrc = 0 ). "Esta en tabla

*5. Chequeo altura

            "Obtenemos altura
            lv_altura = i_matnr+9(3).

            "Comprobamos si está en la tabla de diámetros
            SELECT COUNT(*)
              FROM ztmm0031
             WHERE zzaltura = lv_altura.

            "Resultado
            IF ( sy-subrc = 0 ). "Está en tabla

              e_mtext = i_matnr(12).
              e_msequ = i_matnr+12.

            ELSE. "No está en tabla

              CLEAR: lv_message.
              MOVE text-003 TO lv_message.
              RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '003' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

            ENDIF. "Fin chequeo ZTMM0031

          ELSE. "No está en tabla

            CLEAR: lv_message.
            MOVE text-004 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '004' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

          ENDIF. "Fin resultado ZTMM0032


        ELSE. "No está en la tabla de diámetros

          CLEAR: lv_message.
          MOVE text-002 TO lv_message.
          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

        ENDIF. "Fin resultado ZTMM0030

      WHEN zcl_mm_material_cups=>_c_typecup_bowl_w.

      "NOTA: El tipo de material ZCUP no tenía rango suficiente de números para aceptar la CB* por eso utilizamos la W

*3. Chequemos diámetro

*3.1. Obtengo tipo bowl

        "CASO para tipo bowl
        CASE i_matnr+2(1).

          WHEN zcl_mm_material_cups=>_c_typecup_bowl_circular(1). "circular

            "Obtenemos diametro
            lv_diametro = i_matnr+3(3).

            "Comprobamos si está en la tabla de diámetros
            SELECT COUNT(*)
              FROM ztmm0030
             WHERE zzdiametro = lv_diametro.

            "Resultado
            IF ( sy-subrc NE 0 ). "No está en la tabla de diámetros

              CLEAR: lv_message.
              MOVE text-002 TO lv_message.
              RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

            ENDIF. "Fin resultado ZTMM0030

          WHEN zcl_mm_material_cups=>_c_typecup_bowl_rectang(1).

            "Obtenemos diametro
            lv_diametro = i_matnr+3(3).

            "Comprobamos si está en la tabla de diámetros
            SELECT COUNT(*)
              FROM ztmm0035
             WHERE zzlargo = lv_diametro.

            "Resultado
            IF ( sy-subrc NE 0 ). "No está en la tabla de largo

              CLEAR: lv_message.
              MOVE text-014 TO lv_message.
              RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

            ENDIF. "Fin resultado ZTMM0035

          WHEN OTHERS.

            CLEAR: lv_message.
            MOVE text-007 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

        ENDCASE.

*4. Chequeo capacidad

        "Obtenemos capacidad
        lv_capacidad = i_matnr+6(4).

        "Comprobamos si está en la tabla de diámetros
        SELECT COUNT(*)
          FROM ztmm0032
         WHERE zzcapacidad = lv_capacidad.

        "Resultado
        IF ( sy-subrc NE 0 ). "No está en tabla

          CLEAR: lv_message.
          MOVE text-004 TO lv_message.
          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '004' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

        ENDIF. "Fin resultado ZTMM0032

*5. Chequeo altura

        "Obtenemos altura
        lv_altura = i_matnr+10(3).

        "Comprobamos si está en la tabla de diámetros
        SELECT COUNT(*)
          FROM ztmm0031
         WHERE zzaltura = lv_altura.

        "Resultado
        IF ( sy-subrc = 0 ). "Está en tabla

          e_mtext = i_matnr(13).
          e_msequ = i_matnr+13.

        ELSE. "No está en tabla

          CLEAR: lv_message.
          MOVE text-003 TO lv_message.
          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '003' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

        ENDIF. "Fin chequeo ZTMM0031

      WHEN OTHERS.

        CLEAR: lv_message.
        MOVE text-007 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '007' i_msgid = 'ZCUPS' i_msgty = 'E' i_message = lv_message ).

    ENDCASE.

  ENDMETHOD.
METHOD set_bowl.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_exception TYPE REF TO zcx_mm_exception.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************



  TRY .

    me->_set_typecup( i_typecup = i_type_bowl ).

    CASE i_type_bowl.
      WHEN zcl_mm_material_cups=>_c_typecup_bowl_circular(1).
        me->_set_diametro( i_diametro = i_diametro ).
      WHEN zcl_mm_material_cups=>_c_typecup_bowl_rectang(1).
        me->_set_largo( i_largo = i_diametro ).
    ENDCASE.

    me->_set_altura( i_altura = i_altura ).
    me->_set_capacidad( i_capacidad = i_capacidad ).

  CATCH zcx_mm_exception INTO lo_exception.

    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

  ENDTRY.

ENDMETHOD.
  METHOD set_tapa.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    TRY .

      me->_set_typecup( i_typecup = 'T' ).
      me->_set_diametro( i_diametro = i_diametro ).
      me->_set_apilable( i_apilable = i_apilable ).

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.


  ENDMETHOD.
  METHOD set_vaso.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    TRY .

      me->_set_typecup( i_typecup = 'V' ).
      me->_set_diametro( i_diametro = i_diametro ).
      me->_set_altura( i_altura = i_altura ).
      me->_set_capacidad( i_capacidad = i_capacidad ).

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.

  ENDMETHOD.
  METHOD zintf_mm_material_master~get_new_matnr.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    DATA: lv_mtext TYPE char18,
          lv_msequ TYPE char18,
          lv_matnr TYPE char18.

    TRY.

*1. Chequeos y parte texto

      "*1.1 Jerarquía

      "Chequeo que la jerarquía haya sido informada
      IF ( i_prodh IS INITIAL AND me->zintf_mm_material_master~prodh IS INITIAL ).
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '009' i_msgid = 'ZCLASS' i_msgty = 'E' ).
      ENDIF.

      "Si entra una nueva jerarquía la seteamos
      IF ( i_prodh IS NOT INITIAL AND i_prodh NE me->zintf_mm_material_master~prodh ).
        me->zintf_mm_material_master~set_prodh( i_prodh = i_prodh ).
      ENDIF.

      "*1.2 Tipo de CUP
      IF ( me->_typecup IS INITIAL ).
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZCLASS' i_msgty = 'E' ).
      ENDIF.

      CASE me->_typecup.

        WHEN zcl_mm_material_cups=>_c_typecup_tapa.

          "*1.3 Diametro
          "*1.4 Apilable
          IF ( ( me->_diametro IS INITIAL OR me->_diametro = 0 ) OR
               ( me->_apilable IS INITIAL ) ).
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '010' i_msgid = 'ZCLASS' i_msgty = 'E' ).
          ENDIF.

          lv_mtext = me->__encode_mtext( ).

        WHEN zcl_mm_material_cups=>_c_typecup_vaso.

          "*1.3 Diametro
          "*1.4 Capacidad
          "*1.5 Altura
          IF ( ( me->_diametro IS INITIAL OR me->_diametro = 0 ) OR
               ( me->_altura IS INITIAL OR me->_altura = 0 ) OR
               ( me->_capacidad IS INITIAL OR me->_capacidad = 0 ) ).
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '011' i_msgid = 'ZCLASS' i_msgty = 'E' ).
          ENDIF.

          lv_mtext = me->__encode_mtext( ).

        WHEN zcl_mm_material_cups=>_c_typecup_bowl_circular(1) OR zcl_mm_material_cups=>_c_typecup_bowl_rectang(1).

          "*1.3 Diametro
          "*1.4 Capacidad
          "*1.5 Altura
          IF ( ( me->_diametro IS INITIAL OR me->_diametro = 0 ) OR
               ( me->_altura IS INITIAL OR me->_altura = 0 ) OR
               ( me->_capacidad IS INITIAL OR me->_capacidad = 0 ) ).
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '011' i_msgid = 'ZCLASS' i_msgty = 'E' ).
          ENDIF.

          lv_mtext = me->__encode_mtext( ).

      ENDCASE.

*2. Parte secuencial

      lv_msequ = me->_get_new_matnr_sequential( i_mtext = lv_mtext ).

      lv_matnr = me->_encode_matnr( EXPORTING i_sequential = lv_msequ i_mtext = lv_mtext ).

      MOVE lv_matnr TO e_matnr.

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

  ENDMETHOD.
  method ZINTF_MM_MATERIAL_MASTER~SET_PRODH.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    TRY.

      super->zintf_mm_material_master~set_prodh( i_prodh = i_prodh ).

      IF ( me->_typecup NE i_prodh+2(1) AND me->_typecup NE i_prodh+4(1) ).
        CASE i_prodh+2(1).
          WHEN zcl_mm_material_cups=>_c_typecup_tapa OR zcl_mm_material_cups=>_c_typecup_vaso.
            me->_set_typecup( i_typecup = i_prodh+2(1) ).
          WHEN zcl_mm_material_cups=>_c_typecup_bowl.
            me->_set_typecup( i_typecup = i_prodh+4(1) ).
        ENDCASE.

      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.

  endmethod.
  method ZINTF_MM_MATERIAL_MASTER~SET_PRODH_WITH_DIALOG.

    DATA: lv_prodh      TYPE prodh_d,
          lv_prodh_d    TYPE prodh_d,
          lv_apilable   TYPE char1,
          lv_altura     TYPE zcupaltura,
          lv_diametro   TYPE zcupdiametro,
          lv_capacidad  TYPE zcupcapacidad,
          lv_tipo       TYPE char1,
          lo_exception  TYPE REF TO zcx_mm_exception.

    "Obtenemmos texto de material
    lv_prodh = me->_launch_popup( ).

    TRY .

      "Si viene relleno
      IF ( lv_prodh IS NOT INITIAL ).

        "1. Montamos la jerarquía:
        CASE lv_prodh+1(1).

          "Tapa o vaso
          WHEN me->_c_typecup_tapa OR me->_c_typecup_vaso.

            CONCATENATE: 'CU' lv_prodh+1(1) 'A' INTO lv_prodh_d.

          "Bowls
          WHEN me->_c_typecup_bowl.

            "Tipo de BOWL
            CASE lv_prodh+2(1).

              WHEN me->_c_typecup_bowl_circular(1).

                CONCATENATE: 'CUBO' me->_c_typecup_bowl_circular INTO lv_prodh_d.

              WHEN me->_c_typecup_bowl_rectang(1).

                CONCATENATE: 'CUBO' me->_c_typecup_bowl_rectang INTO lv_prodh_d.

            ENDCASE.

          WHEN OTHERS.
        ENDCASE.

        me->zintf_mm_material_master~set_prodh( i_prodh = lv_prodh_d ).

        "2. Decodificamos la parte textual del material
        CASE lv_prodh+1(1).

          WHEN zcl_mm_material_cups=>_c_typecup_tapa.

            MOVE lv_prodh+2(3) TO lv_diametro.
            MOVE lv_prodh+5(1) TO lv_apilable.

            me->set_tapa( i_diametro = lv_diametro i_apilable = lv_apilable ).

          WHEN zcl_mm_material_cups=>_c_typecup_vaso.

            MOVE lv_prodh+2(3) TO lv_diametro.
            MOVE lv_prodh+5(4) TO lv_capacidad.
            MOVE lv_prodh+9(3) TO lv_altura.

            me->set_vaso( i_diametro = lv_diametro i_altura = lv_altura i_capacidad = lv_capacidad ).

          WHEN zcl_mm_material_cups=>_c_typecup_bowl.

            MOVE lv_prodh+2(1) TO lv_tipo.
            MOVE lv_prodh+3(3) TO lv_diametro.
            MOVE lv_prodh+6(4) TO lv_capacidad.
            MOVE lv_prodh+10(3) TO lv_altura.

            me->set_bowl( i_type_bowl = lv_tipo i_diametro = lv_diametro i_altura = lv_altura i_capacidad = lv_capacidad ).


        ENDCASE.

      ELSE.

        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '014' i_msgid = 'ZCLASS' i_msgty = 'E' ).

      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

  endmethod.
