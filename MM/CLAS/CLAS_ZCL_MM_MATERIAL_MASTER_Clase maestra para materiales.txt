
class ZCL_MM_MATERIAL_MASTER definition
  public
  create public .

public section.

  interfaces ZINTF_MM_MATERIAL_MASTER .

  types:
    BEGIN OF t_sets,
        setnr TYPE rgsb1-setnr,
        id    type rgsb1-setnr,
        descripcion type cvtext,
        line  TYPE rgsb1-old_line,
        r_mtart type GDS_SELRANGE_MTART_TAB,
      END OF t_sets .
  types:
    tt_sets TYPE STANDARD TABLE OF t_sets WITH KEY setnr .

  data _DYNNR type DYNNR read-only value '0100' ##NO_TEXT.
  data _SETVALUE type SETNAMENEW read-only .

  methods CONSTRUCTOR
    importing
      !I_MTART type MTART
      !I_MBRSH type MBRSH
      !I_PRODH type PRODH_D optional
    raising
      ZCX_MM_EXCEPTION .
  class-methods S_GET_RAMOS
    importing
      !GET_RANGO_MTART type ABAP_BOOL default ''
    exporting
      !I_SETS type TT_SETS .
  class-methods S_GET_MTARTS_RAMO
    importing
      !SETNR type SETID
    exporting
      !MESSAGE type BAPI_MSG
    returning
      value(R_MTART) type GDS_SELRANGE_MTART_TAB .
protected section.

  methods _CHECK_MTEXT
    importing
      !I_MTEXT type CHAR18
    returning
      value(E_CORRECT) type BOOLEAN .
  methods _CHECK_PRODH_CODE
    importing
      !I_PRODH type PRODH_D
    returning
      value(E_CORRECT) type BOOL
    raising
      ZCX_MM_EXCEPTION .
  methods _DECODE_MATNR
    importing
      !I_MATNR type MATNR
    exporting
      !E_MTEXT type CHAR18
      !E_SEQUENTIAL type CHAR18 .
  methods _ENCODE_MATNR
    importing
      !I_SEQUENTIAL type CHAR18
      !I_MTEXT type CHAR18
    returning
      value(E_MATNR) type MATNR
    raising
      ZCX_MM_EXCEPTION .
  methods _GET_MATNR_LENGHT_FROM_MTART
    exporting
      value(E_MATNR_LENGTH) type I
      value(E_MSEQU_LENGTH) type I
      value(E_MTEXT_LENGTH) type I
    raising
      ZCX_MM_EXCEPTION .
  methods _GET_MTEXT_4_CLASS
    returning
      value(E_MTEXT) type CHAR18
    raising
      ZCX_MM_EXCEPTION .
  methods _GET_NEW_MATNR_SEQUENTIAL
    importing
      !I_MTEXT type CHAR18
    returning
      value(E_MSEQU) type CHAR18
    raising
      ZCX_MM_EXCEPTION .
  methods _GET_NEXT_SEQUENTIAL
    importing
      !I_CURRENT_SEQUENTIAL type CHAR18
      !I_SEQUENTIAL_SIZE type I optional
    exporting
      !E_NEW_SEQUENTIAL type CHAR18
    exceptions
      NO_VALID_IPARAMS .
  methods _INITIALIZE_VALUES_4_CLASS
    importing
      !I_DYNNR type DYNNR
      !I_SETNAME type SETNAMENEW .
  methods _LAUNCH_POPUP
    returning
      value(E_PRODH) type PRODH_D .
  methods _RECALC_MATNR_LENGTHS .
private section.
endclass. "ZCL_MM_MATERIAL_MASTER definition
class ZCL_MM_MATERIAL_MASTER implementation.
  METHOD _check_mtext.

    DATA: lo_exception  TYPE REF TO zcx_mm_exception,
          lv_prodh      TYPE prodh_d.

    MOVE i_mtext TO lv_prodh.

    TRY.
      me->_check_prodh_code( i_prodh = lv_prodh ).
      e_correct = abap_true.
    CATCH zcx_mm_exception INTO lo_exception.
      e_correct = abap_false.
    ENDTRY.

  ENDMETHOD.
  METHOD _check_prodh_code.

    DATA: lv_pattern(19) TYPE c,
          lv_prodh       TYPE prodh_d.

*CHECK 1 --> Comprobamos que el código de jerarquía existe.

    "Comprobamos que el código de la jerarquía existe
    SELECT SINGLE *
      FROM t179
      INTO @DATA(ls_t179)
     WHERE prodh EQ @i_prodh.

    "Chequeamos resultado
    IF ( sy-subrc <> 0 ). "Si NO existe la jerarquía...

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_master=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '003' i_msgid = 'ZERROR' i_msgty = 'E' ).

    ENDIF.

*CHECK 2 --> Primer nivel del código se corresponde con tipo de material.

    CLEAR: lv_pattern.

    lv_pattern = i_prodh(2).

    "Seleccionamos valores en la tabla ZT179
    SELECT COUNT(*)
      FROM zt179
     WHERE mtart EQ @me->zintf_mm_material_master~mtart
       AND prodh EQ @lv_pattern.

    "Chequeamos resultado
    IF ( sy-subrc <> 0 ). "No se corresponde tipo de material y primer nivel de jerarquía.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_master=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '004' i_msgid = 'ZERROR' i_msgty = 'E' ).
    ENDIF.

*CHECK 3 --> Código de jerarquía es el más alto.

    CLEAR: lv_pattern.

    "creamos un patron para buscar jerarquías con niveles más altos.
    CONCATENATE i_prodh '%' INTO lv_pattern.

    "Obtenemos jerarquías superiores.
    SELECT COUNT(*)
      FROM t179
     WHERE prodh LIKE @lv_pattern
       AND stufe GT @ls_t179-stufe.

    "Chequeamos resultado
    IF ( sy-subrc = 0 ). "No es nivel superior
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_master=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '005' i_msgid = 'ZERROR' i_msgty = 'E' ).
    ENDIF.

    "Si no ha lanzado excepción, es correcto.
    e_correct = abap_true.

  ENDMETHOD.
  METHOD _DECODE_MATNR.

    "Descomponemos el código de material
    FIND REGEX '[0-9]' IN i_matnr MATCH OFFSET DATA(lv_offset).

    IF ( lv_offset NE 0 ).
      e_mtext       = i_matnr(lv_offset).
    ENDIF.

    e_sequential  = i_matnr+lv_offset.

  ENDMETHOD.
  METHOD _ENCODE_MATNR.

    DATA: lv_mtext        TYPE char18,
          lv_msequ        TYPE char18,
          lv_mtext_length TYPE i,
          lv_msequ_length TYPE i,
          lv_check        TYPE boolean,
          lv_offset       TYPE i.

*1. Parte texto

    IF ( strlen( i_mtext ) EQ me->zintf_mm_material_master~_matnr_mtext_length ).
      lv_check = me->_check_mtext( i_mtext = i_mtext ).
      IF ( lv_check IS NOT INITIAL ).
        lv_mtext = i_mtext.
      ELSE.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZCLASS' i_msgty = 'E' ).
      ENDIF.
    ELSE.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ENDIF.

*2. Parte secuencial

    "Obtengo secuencial con ceros delante
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input         = i_sequential
      IMPORTING
        output        = lv_msequ.

    lv_offset = 18 - me->zintf_mm_material_master~_matnr_msequ_length.
    lv_msequ = lv_msequ+lv_offset.

*3. Montamos código de material

    CONCATENATE lv_mtext lv_msequ INTO e_matnr.

  ENDMETHOD.
  METHOD _get_matnr_lenght_from_mtart.

    CONSTANTS: lc_nrobj_materialnr TYPE nrobj VALUE 'MATERIALNR'.

    DATA: ls_interval   TYPE nriv,
          lv_matnr      TYPE char18,
          lv_matnr_str  TYPE char18,
          lv_matnr_num  TYPE char18.

    SELECT SINGLE numke
      FROM t134
      INTO @DATA(lv_numke)
     WHERE mtart EQ @me->zintf_mm_material_master~mtart.

    IF ( sy-subrc NE 0 OR lv_numke IS INITIAL ).
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '009' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_INFO'
      EXPORTING
        nr_range_nr              = lv_numke
        object                   = lc_nrobj_materialnr
      IMPORTING
        interval                 = ls_interval
      EXCEPTIONS
        interval_not_found       = 1
        object_not_found         = 2
        OTHERS                   = 3.

    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = sy-msgno i_msgid = sy-msgid i_msgty = 'E' ).
    ENDIF.

    IF ( ls_interval-tonumber IS NOT INITIAL ).

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input         = ls_interval-tonumber
        IMPORTING
          output        = lv_matnr.


      e_matnr_length = strlen( lv_matnr ).

      me->_decode_matnr(
        EXPORTING
          i_matnr          = lv_matnr    " Número de material
        IMPORTING
          e_mtext          = lv_matnr_str    " Parte texto material
          e_sequential     = lv_matnr_num    " Parte secuencial del material
      ).

      e_mtext_length = strlen( lv_matnr_str ).
      e_msequ_length = strlen( lv_matnr_num ).

    ELSE.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '010' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ENDIF.

  ENDMETHOD.
  METHOD _get_mtext_4_class.

    IF ( me->zintf_mm_material_master~prodh IS INITIAL ).
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ELSE.
      e_mtext = me->zintf_mm_material_master~prodh.
    ENDIF.

  ENDMETHOD.
  METHOD _get_new_matnr_sequential.

    DATA: lv_matnr        TYPE matnr,
          lv_pattern      TYPE char19,
          lv_curr_nseq    TYPE char18,
          lv_next_nseq    TYPE char18,
          lv_offset       TYPE i.

    "Montamos el patrón de busqueda...
    CONCATENATE i_mtext '%' INTO lv_pattern.

    "Obtenemos último número de material
    SELECT MAX( matnr )
      FROM mara
      INTO lv_matnr
     WHERE matnr LIKE lv_pattern
       AND mbrsh EQ 'Z'.

    "Comprobamos que hemos obtenido el material
    IF ( lv_matnr IS NOT INITIAL ).  "Obtenemos código de material

      "Secuencial actual
      lv_curr_nseq = lv_matnr+me->zintf_mm_material_master~_matnr_mtext_length.

    ELSE. "No obtenemos código de material

      lv_curr_nseq = 0.

    ENDIF. "Fin obtenemos material

*    "Secuencial siguiente
*    lv_next_nseq = lv_curr_nseq + 1.
*
*    "Insertamos ceros a la izquierda
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input         = lv_next_nseq
*      IMPORTING
*        output        = lv_next_nseq.
*
*    "Obtenemos tamaño del secuencial
*    lv_offset = 18 - me->zintf_mm_material_master~_matnr_msequ_length.
*
*    "Sacamos valor acotado.
*    e_msequ = lv_next_nseq+lv_offset.

    me->_get_next_sequential(
      EXPORTING
        i_current_sequential = lv_curr_nseq                                        " Secuencial actual
        i_sequential_size    = me->zintf_mm_material_master~_matnr_msequ_length    " Tamaño del secuencial de salida
      IMPORTING
        e_new_sequential     = e_msequ                                             " Secuencial de salida
      EXCEPTIONS
        no_valid_iparams     = 1
        others               = 2
    ).
    IF sy-subrc <> 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.



  ENDMETHOD.
METHOD _get_next_sequential.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_char_sequential TYPE char18,
        lv_int_sequential  TYPE i,
        lv_offset     TYPE i.

**********************************************************************
* Validaciones
**********************************************************************

** Secuencial actual

  "Movemos el parametro import para tratarlo
  MOVE i_current_sequential TO lv_char_sequential.
  "Condensamos la cadena para que no contenga espacios a la izquierda
  CONDENSE lv_char_sequential NO-GAPS.

  "Comprobamos si viene relleno
  IF ( lv_char_sequential IS NOT INITIAL ). "Viene relleno

    CALL FUNCTION 'CONVERT_STRING_TO_INTEGER'
      EXPORTING
        p_string            = lv_char_sequential
      IMPORTING
        p_int               = lv_int_sequential
      EXCEPTIONS
        overflow            = 1
        invalid_chars       = 2
        OTHERS              = 3.

   IF ( sy-subrc <> 0 ).
     RAISE no_valid_iparams.
   ENDIF.

  ELSE. "No viene relleno

    "Igualamos secuencial a cero
    lv_int_sequential = 0.

  ENDIF.

** Tamaño de secuencial

  "Comrpobamos que tamaño de secuencial está entre 0 y 18
  IF ( i_sequential_size NOT BETWEEN 0 AND 18 ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

    "Secuencial siguiente
    lv_int_sequential = lv_int_sequential + 1.

    "Volcamos a cadena de texto de nuevo
    CLEAR: lv_char_sequential.
    MOVE lv_int_sequential TO lv_char_sequential.
    CONDENSE lv_char_sequential NO-GAPS.

    "Chequeamos si se ha introducido tamaño de secuencial
    IF ( i_sequential_size GT 0 ). "Se ha introducido tamaño de secuencial

      "Insertamos ceros a la izquierda
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input         = lv_char_sequential
        IMPORTING
          output        = lv_char_sequential.
      "Obtenemos tamaño del secuencial
      lv_offset = 18 - i_sequential_size.

      "Sacamos valor acotado.
      e_new_sequential = lv_char_sequential+lv_offset.

    ELSE. "No se ha introducido tamaño de secuencial

      "Sacamos valor acotado.
      e_new_sequential = lv_char_sequential.

    ENDIF.

ENDMETHOD.
  METHOD _initialize_values_4_class.

    me->_dynnr        = i_dynnr.
    me->_setvalue     = i_setname.

  ENDMETHOD.
  METHOD _launch_popup.

    CALL FUNCTION 'ZFM_MM_PRODH_POPUP'
      EXPORTING
        i_mtart       = me->zintf_mm_material_master~mtart
        i_dynnr       = me->_dynnr
      IMPORTING
        e_prodh       = e_prodh.

  ENDMETHOD.
  METHOD _recalc_matnr_lengths.

    me->zintf_mm_material_master~_matnr_mtext_length = strlen( me->zintf_mm_material_master~prodh ).
    me->zintf_mm_material_master~_matnr_msequ_length = me->zintf_mm_material_master~_matnr_length - me->zintf_mm_material_master~_matnr_mtext_length.

  ENDMETHOD.
  METHOD constructor.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    TRY.

* RAMO

      me->zintf_mm_material_master~set_mbrsh( i_mbrsh ).

* TIPO DE MATERIAL

      me->zintf_mm_material_master~set_mtart( i_mtart ).

* JERARQUÍA

      "Comprobamos si viene relleno (parámetro opcional)
      IF ( i_prodh IS NOT INITIAL ).

        me->zintf_mm_material_master~set_prodh( i_prodh ).

      ENDIF.

* TAMAÑO DEL MATERIAL

      me->_get_matnr_lenght_from_mtart(
        IMPORTING
          e_matnr_length = me->zintf_mm_material_master~_matnr_length          " Tamaño del código de material
          e_msequ_length = me->zintf_mm_material_master~_matnr_msequ_length    " Tamaño de la parte secuencial del código de material
          e_mtext_length = me->zintf_mm_material_master~_matnr_mtext_length    " Tamaño de la parte texto del código de material
      ).

* OTROS VALORES DE CLASE

      me->_initialize_values_4_class( i_dynnr = _dynnr i_setname = _setvalue ).

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.

  ENDMETHOD.
  METHOD s_get_mtarts_ramo.
    DATA: lt_set_lines TYPE TABLE OF rgsbv,
          lv_message   TYPE scx_t100key,
          ls_r_mtart   LIKE LINE OF r_mtart,
          l_setnr      TYPE setid.

    CLEAR: r_mtart, r_mtart.

    l_setnr = setnr.
    IF setnr(4) NE '0000'.
      CONCATENATE '0000' setnr INTO l_setnr.
    ENDIF.

    "Obtenemos los tipos de material compatibles desde el set de datos
    CALL FUNCTION 'G_SET_FETCH'
      EXPORTING
        langu              = 'S'
        no_authority_check = abap_true
        setnr              = l_setnr
      TABLES
        set_lines_basic    = lt_set_lines
      EXCEPTIONS
        no_authority       = 1
        set_is_broken      = 2
        set_not_found      = 3
        OTHERS             = 4.

    "Si no encuentra datos
    IF ( sy-subrc NE 0 ).
      message = |No existe el set { setnr }|.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = '?' ) TO r_mtart.
      RETURN.
    ENDIF.

    LOOP AT lt_set_lines INTO DATA(ls_set_line).

      CLEAR: ls_r_mtart.

      ls_r_mtart-sign = 'I'.

      IF ( ls_set_line-from = ls_set_line-to ).

        ls_r_mtart-option = 'EQ'.
        ls_r_mtart-low = ls_set_line-from.

      ELSE.

        ls_r_mtart-option = 'BT'.
        ls_r_mtart-low = ls_set_line-from.
        ls_r_mtart-high = ls_set_line-to.

      ENDIF.

      APPEND ls_r_mtart TO r_mtart.

    ENDLOOP.
    IF sy-subrc NE 0.
      message = |El set { setnr } no tiene valores|.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = '?' ) TO r_mtart.
    ENDIF.

  ENDMETHOD.
  METHOD s_get_ramos.
    DATA: i_sets_single TYPE TABLE OF rgsb1.

    CLEAR i_sets.
    CALL FUNCTION 'G_SET_FETCH'
      EXPORTING
        setnr            = '0000ZMM_RAMOS'
      TABLES
        set_lines_single = i_sets_single
      EXCEPTIONS
        no_authority     = 1
        set_is_broken    = 2
        set_not_found    = 3
        OTHERS           = 4.


    LOOP AT i_sets_single ASSIGNING FIELD-SYMBOL(<set>).

      SELECT SINGLE descript FROM setheadert
        INTO @DATA(l_descripcion)
       WHERE setclass = @<set>-setnr(4)
         AND subclass = ''
         AND setname  = @<set>-setnr+4
         AND langu    = @sy-langu.

      SPLIT <set>-setnr AT 'ZMM_' INTO DATA(l_aux) DATA(l_id).
      IF l_descripcion IS INITIAL.
        l_descripcion = l_id.
        REPLACE ALL OCCURRENCES OF '_' IN l_descripcion WITH ` `.
      ENDIF.
      IF get_rango_mtart = 'X'.
        DATA(r_mtart) = s_get_mtarts_ramo( CONV #( <set>-setnr+4 ) ).
      ENDIF.
      APPEND VALUE #( setnr = <set>-setnr+4
                      id    = <set>-setnr+4
                      descripcion = l_descripcion
                      line  = <set>-old_line
                      r_mtart = r_mtart
                    ) TO i_sets.
    ENDLOOP.

  ENDMETHOD.
  METHOD zintf_mm_material_master~_s_generate_message_4_class.

    FIELD-SYMBOLS: <fs_text> TYPE any.

    DATA: lv_text  TYPE string,
          lv_attr1 TYPE scx_attrname.

    "Comprobamos si viene mensaje
    IF ( i_message IS NOT INITIAL ). "Mensaje relleno de inicio

      e_textid-msgno = sy-msgno = i_msgno.
      e_textid-msgid = sy-msgid = i_msgid.
      e_textid-attr1 = sy-msgv1 = i_message.
      e_textid-attr2 = sy-msgv2 = space.
      e_textid-attr3 = sy-msgv3 = space.
      e_textid-attr4 = sy-msgv4 = space.

    ELSE.


      "Intentamos obtener mensaje de sistema
      CALL FUNCTION 'FORMAT_MESSAGE'
        EXPORTING
          id              = i_msgid
          lang            = 'S'
          no              = i_msgno
          v1              = i_msgv1
          v2              = i_msgv2
          v3              = i_msgv3
          v4              = i_msgv4
        IMPORTING
          msg             = lv_text
        exceptions
          not_found       = 1
          OTHERS          = 2.

      "Comprobamos resultado
      CASE sy-subrc.

        WHEN 0. "Encuentra mensaje

          e_textid-msgno = sy-msgno = i_msgno.
          e_textid-msgid = sy-msgid = i_msgid.
          e_textid-attr1 = sy-msgv1 = i_msgv1.
          e_textid-attr2 = sy-msgv2 = i_msgv2.
          e_textid-attr3 = sy-msgv3 = i_msgv3.
          e_textid-attr4 = sy-msgv4 = i_msgv4.

        WHEN 1. "No encuentra mensaje

          "Buscamos texto de la clase para el mensaje
          CONCATENATE 'TEXT-' i_msgno INTO lv_attr1.

          "Asignamos el texto al FS.
          ASSIGN (lv_attr1) TO <fs_text>.

          "Si el FS se ha asignado existe mensaje
          IF ( <fs_text> IS ASSIGNED ).

            "Comprobamos si mensaje tiene texto
            IF ( <fs_text> IS INITIAL ). "Sin texto

              "Lanzamos mensaje genérico
              e_textid-msgno = sy-msgno = '999'.
              e_textid-msgid = sy-msgid = 'ZCLASS'.
              e_textid-attr1 = sy-msgv1 = text-999.
              e_textid-attr2 = sy-msgv2 = space.
              e_textid-attr3 = sy-msgv3 = space.
              e_textid-attr4 = sy-msgv4 = space.

            ELSE. "Se recupera texto

              "Lanzamos mensaje con texto
              e_textid-msgno = sy-msgno = i_msgno.
              e_textid-msgid = sy-msgid = i_msgid.
              e_textid-attr1 = sy-msgv1 = <fs_text>.
              e_textid-attr2 = sy-msgv2 = space.
              e_textid-attr3 = sy-msgv3 = space.
              e_textid-attr4 = sy-msgv4 = space.

            ENDIF.

          ELSE. "No se ha asignado

            "Lanzamos mensaje genérico
            e_textid-msgno = sy-msgno = '999'.
            e_textid-msgid = sy-msgid = 'ZCLASS'.
            e_textid-attr1 = sy-msgv1 = text-999.
            e_textid-attr2 = sy-msgv2 = space.
            e_textid-attr3 = sy-msgv3 = space.
            e_textid-attr4 = sy-msgv4 = space.

          ENDIF.

          UNASSIGN <fs_text>.

        WHEN OTHERS.

          "Lanzamos mensaje genérico
          e_textid-msgno = sy-msgno = '999'.
          e_textid-msgid = sy-msgid = 'ZCLASS'.
          e_textid-attr1 = sy-msgv1 = text-999.
          e_textid-attr2 = sy-msgv2 = space.
          e_textid-attr3 = sy-msgv3 = space.
          e_textid-attr4 = sy-msgv4 = space.

      ENDCASE.

    ENDIF.

    "Comprobamos si tipo de mensaje viene relleno
    IF ( i_msgty IS INITIAL ).
      sy-msgty = 'I'.
    ELSE.
      sy-msgty = i_msgty.
    ENDIF.

  ENDMETHOD.
METHOD zintf_mm_material_master~get_new_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_exception TYPE REF TO zcx_mm_exception.

  DATA: lv_mtext TYPE char18,
        lv_msequ TYPE char18,
        lv_matnr TYPE char18.

  DATA: lv_enqueued TYPE bool.

**********************************************************************
* Validaciones
**********************************************************************


**********************************************************************
* Lógica
**********************************************************************

  TRY.

    "Chequeo que la jerarquía haya sido informada
    IF ( i_prodh IS INITIAL AND me->zintf_mm_material_master~prodh IS INITIAL ).
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '011' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ENDIF.

    "Si entra una nueva jerarquía la seteamos
    IF ( i_prodh IS NOT INITIAL AND i_prodh NE me->zintf_mm_material_master~prodh ).
      me->zintf_mm_material_master~set_prodh( i_prodh = i_prodh ).
    ENDIF.

    lv_mtext = me->zintf_mm_material_master~prodh.
    lv_msequ = me->_get_new_matnr_sequential( i_mtext = lv_mtext ).

*--> INI FCARDONA 17.08.2022 - Modificamos lógica para tener en cuenta el buffer.

** Comento por lógica nueva
*
*    lv_matnr = me->_encode_matnr( EXPORTING i_sequential = lv_msequ i_mtext = lv_mtext ).
*
*    MOVE lv_matnr TO e_matnr.

** Nueva lógica

    "Recorremos 5 veces (5 posibles bloqueos)
    DO 5 TIMES.

      "Montamos número de material
      CLEAR lv_matnr.
      lv_matnr = me->_encode_matnr( EXPORTING i_sequential = lv_msequ i_mtext = lv_mtext ).

      "Comprobamos si código bloqueado
      me->zintf_mm_material_master~is_matnr_enqueued(
        EXPORTING
          i_matnr          = lv_matnr     " Número de material
        IMPORTING
          e_is_enqueued    = lv_enqueued  " 'X'=bloqueado; space=no bloqueado.
        EXCEPTIONS
          no_valid_iparams = 1
          others           = 2
      ).

      "Comprobamos si material bloqueado por creación
      IF ( lv_enqueued EQ abap_false ). "No bloqueado

        EXIT.

      ELSE. "Bloqueado (enqueued)

        "Obtengo siguiente secuencial
        me->_get_next_sequential(
         EXPORTING
           i_current_sequential = lv_msequ                                            " Secuencial actual
           i_sequential_size    = me->zintf_mm_material_master~_matnr_msequ_length    " Tamaño del secuencial de salida
         IMPORTING
           e_new_sequential     = lv_msequ    " Secuencial de salida
         EXCEPTIONS
           no_valid_iparams     = 1
           others               = 2
       ).

       IF ( sy-subrc <> 0 ).
         RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZCLASS' i_msgty = 'E' ).
       ENDIF.

       CONTINUE.

      ENDIF.

    ENDDO.

    "Comprobamos si tras 5 ejecuciones es bloqueado
    IF ( lv_enqueued EQ abap_true ). "Bloqueado
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ELSE. "No bloqueado
      MOVE lv_matnr TO e_matnr.
    ENDIF.

*--> FIN FCARDONA 17.08.2022 - Modificamos lógica para tener en cuenta el buffer.

  CATCH zcx_mm_exception INTO lo_exception.

    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

  ENDTRY.


ENDMETHOD.
  METHOD zintf_mm_material_master~get_new_matnr_with_dialog.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    TRY .

      me->zintf_mm_material_master~set_prodh_with_dialog( ).
      e_matnr = me->zintf_mm_material_master~get_new_matnr( ).

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

  ENDMETHOD.
METHOD ZINTF_MM_MATERIAL_MASTER~IS_MATNR_ENQUEUED.

**********************************************************************
* Parámetros locales
**********************************************************************


**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_matnr IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

  "Comprobamos si está siendo usado
  CALL FUNCTION 'ENQUEUE_EMMARAE'
    EXPORTING
      mode_mara            = 'E'
      mandt                = sy-mandt
      matnr                = i_matnr
      x_matnr              = ' '
      _scope               = '2'
      _wait                = ' '
      _collect             = ' '
    EXCEPTIONS
      foreign_lock         = 1
      system_failure       = 2
      OTHERS               = 3.

  "Comprobamos si material bloqueado por creación
  IF ( sy-subrc EQ 0 ). "No bloqueado

    e_is_enqueued = abap_false.

  ELSE.

    e_is_enqueued = abap_true.

  ENDIF.

ENDMETHOD.
  METHOD zintf_mm_material_master~s_check_matnr_code.

    "Este método es muy especifico de cada clase. A reescribir en cada clase hija.

  ENDMETHOD.
  METHOD zintf_mm_material_master~s_get_mtart_compatibles.

    DATA: lt_set_lines TYPE TABLE OF rgsbv,
          lv_message   TYPE scx_t100key,
          ls_r_mtart   LIKE LINE OF e_tr_mtart.

    "Obtenemos los tipos de material compatibles desde el set de datos
    CALL FUNCTION 'G_SET_FETCH'
      EXPORTING
        langu              = 'S'
        no_authority_check = abap_true
        setnr              = i_setname
      TABLES
        set_lines_basic    = lt_set_lines
      EXCEPTIONS
        no_authority       = 1
        set_is_broken      = 2
        set_not_found      = 3
        OTHERS             = 4.

    "Si no encuentra datos
    IF ( sy-subrc NE 0 ).

      "Lanzamos excepción controlada
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_master=>zintf_mm_material_master~_s_generate_message_4_class(
        EXPORTING
          i_msgno  = sy-msgno    " Campo de sistema ABAP: Número de mensaje
          i_msgid  = sy-msgid    " Campo de sistema ABAP: Clase de mensaje
          i_msgty  = sy-msgty    " Campo de sistema ABAP: Tipo de mensaje
          i_msgv1  = sy-msgv1    " Campo de sistema ABAP: Variable de mensaje
          i_msgv2  = sy-msgv2    " Campo de sistema ABAP: Variable de mensaje
          i_msgv3  = sy-msgv3    " Campo de sistema ABAP: Variable de mensaje
          i_msgv4  = sy-msgv4    " Campo de sistema ABAP: Variable de mensaje

       ).

    ENDIF.

    LOOP AT lt_set_lines INTO DATA(ls_set_line).

      CLEAR: ls_r_mtart.

      ls_r_mtart-sign = 'I'.

      IF ( ls_set_line-from = ls_set_line-to ).

        ls_r_mtart-option = 'EQ'.
        ls_r_mtart-low = ls_set_line-from.

      ELSE.

        ls_r_mtart-option = 'BT'.
        ls_r_mtart-low = ls_set_line-from.
        ls_r_mtart-high = ls_set_line-to.

      ENDIF.

      APPEND ls_r_mtart TO e_tr_mtart.

    ENDLOOP.

  ENDMETHOD.
  METHOD zintf_mm_material_master~set_mbrsh.

    "Comprobamos que existe ramo
    SELECT COUNT(*) UP TO 1 ROWS
      FROM t137
     WHERE mbrsh EQ @i_mbrsh.

    "Chequeamos resultado
    IF ( sy-subrc = 0 ). "Existe ramo

      me->zintf_mm_material_master~mbrsh = i_mbrsh.

    ELSE. "No existe ramo

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_master=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '001' i_msgid = 'ZERROR' i_msgty = 'E' ).

    ENDIF.

  ENDMETHOD.
  METHOD zintf_mm_material_master~set_mtart.

* 1. Tipo de material existe

    "Comprobamos que tipo de material existe en el sistema
    SELECT COUNT(*) UP TO 1 ROWS
      FROM t134
     WHERE mtart EQ @i_mtart.

    "Chequeamos resultado
    IF ( sy-subrc = 0 ). "Existe tipo de material
      me->zintf_mm_material_master~mtart = i_mtart.
    ELSE. "No existe tipo de material
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_mm_material_master=>zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZERROR' i_msgty = 'E' ).
    ENDIF.

  ENDMETHOD.
  METHOD zintf_mm_material_master~set_prodh.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    DATA: lv_check TYPE bool.

    TRY.

      "Comprobamos prodh
      lv_check = me->_check_prodh_code( i_prodh = i_prodh ).

      "Comprobamos resultado
      IF ( lv_check = abap_true ). "Es correcto

        "Guardamos valor
        me->zintf_mm_material_master~prodh = i_prodh.

        "Recalculamos tamaño texto y secuencial
        me->_recalc_matnr_lengths( ).

      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception. "Lanzamos excpeciones...

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.


  ENDMETHOD.
  METHOD ZINTF_MM_MATERIAL_MASTER~SET_PRODH_WITH_DIALOG.

    DATA: lv_prodh      TYPE prodh_d,
          lo_exception  TYPE REF TO zcx_mm_exception.

    lv_prodh = me->_launch_popup( ).

    TRY .

      IF ( lv_prodh IS NOT INITIAL ).
        me->zintf_mm_material_master~set_prodh( i_prodh = lv_prodh ).
      ELSE.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '014' i_msgid = 'ZERROR' i_msgty = 'E' ).
      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

  ENDMETHOD.
