
class ZCL_EXITS_MM definition
  public
  inheriting from ZCL_AP_EXITS
  final
  create public .

public section.

  data O_CORE_WRK type ref to ZHCL_CORE_WRK .

  methods CONSTRUCTOR
    importing
      !EXIT type ANY
      !INCLUDE type ANY default ''
      !CLAVE type ANY default ''
      !FORM type ANY default ''
      !UNAME type SY-UNAME default SY-UNAME .
  methods CUMPLE_CONDICIONES
    importing
      !EKKO type EKKO optional
      !EKPO type EKPO optional
    returning
      value(SI) type ABAP_BOOL .
  class-methods BORRAR_CENTRO_SUMINISTRADOR
    changing
      !EKKO type EKKO
      !EKPO type EKPO .
protected section.
private section.
endclass. "ZCL_EXITS_MM definition
class ZCL_EXITS_MM implementation.
  METHOD borrar_centro_suministrador.
    DATA: o_exit TYPE REF TO zcl_exits_mm.

    CHECK ekko-ebeln IS INITIAL. "Sólo para nuevos pedidos
    CHECK NOT ekko-reswk IS INITIAL.

    DATA(l_clave) = |{ ekko-lifnr }-{ ekko-reswk }-{ ekko-bukrs }|.

    o_exit = NEW zcl_exits_mm(
        exit    = 'ME21_BORRAR_CENTRO_SUMINISTRADOR'
        include = 'LMEPOF00'
        form    = 'MEPO_HEADER_CHECK_NEU'
        clave   = l_clave ).

    CHECK o_exit->activa( ) = 'X'.
    CHECK NOT o_exit->i_condiciones IS INITIAL.
    CHECK o_exit->cumple_condiciones( ekko = ekko
                                      ekpo = ekpo ) = 'X'.

* El proveedor es FULL SAP y PACKING
    IF line_exists( o_exit->o_core_wrk->i_par_centro[ lifnr = ekko-lifnr
                                                      full_sap = 'X'
                                                      negocio = 'PACKAGING' ] ).
      o_exit->log( p1 = 'Proveedor' p2 = ekko-lifnr p3 = 'es PACKAGING FULL_SAP' msgty = 'I' ).
* No hay una sociedad FULL_SAP / PACKAGING
      IF NOT line_exists( o_exit->o_core_wrk->i_par_centro[ bukrs = ekko-bukrs
                                                            full_sap = 'X'
                                                            negocio = 'PACKAGING' ] ).

        o_exit->log( p1 = 'Sociedad' p2 = ekko-bukrs p3 = 'NO es PACKAGING FULL_SAP' msgty = 'I' ).
*Además, ha de existir la combinación centro/sociedad sin FULL SAP
        LOOP AT o_exit->o_core_wrk->i_par_centro TRANSPORTING NO FIELDS WHERE bukrs = ekko-bukrs
                                                                          AND ( full_sap = '' OR
                                                                                negocio NE 'PACKAGING' ).
* Borrar centro suministrador (chequeo estándar en tcode ME21N, función: ME_CHECK_ITEM_FOR_VETVG)
          CLEAR ekko-reswk.
          o_exit->log( p1 = 'Se borra el centro suministrador' msgty = 'I' ).
          EXIT.
        ENDLOOP.
        IF sy-subrc NE 0.
          o_exit->log( p1 = 'No existe entrada para Sociedad' p2 = ekko-bukrs p3 = 'que no sea FULL_SAP ni PACKAGING' msgty = 'W' ).
        ENDIF.
      ELSE.
        o_exit->log( p1 = 'Sociedad' p2 = ekko-bukrs p3 = 'es PACKAGING FULL_SAP' msgty = 'W' ).
      ENDIF.
    ELSE.
      o_exit->log( p1 = 'Proveedor' p2 = ekko-lifnr p3 = 'NO es PACKAGING FULL_SAP' msgty = 'W' ).
    ENDIF.



  ENDMETHOD.
  METHOD constructor.
    CALL METHOD super->constructor
      EXPORTING
        exit    = exit
        include = include
        clave   = clave
        form    = form
        uname   = sy-uname.

    o_core_wrk = NEW #( ).

  ENDMETHOD.
  METHOD cumple_condiciones.
    DATA: l_cumple,
          l_valor_cond TYPE string,
          l_cond       TYPE zap_exits_par.

    FIELD-SYMBOLS <fs> TYPE any.

    IF i_condiciones IS INITIAL.
      si = 'X'.
    ELSE.
      LOOP AT i_condiciones_agrup INTO l_cond.
        CASE l_cond-clave.
          WHEN 'CLASE PEDIDO'.
            l_valor_cond = ekko-bsart.
          WHEN OTHERS.
            ASSIGN (l_cond-clave) TO <fs>.
            IF sy-subrc = 0.
              l_valor_cond = <fs>.
            ELSE.
              log( p1 = 'Condición' p2 = l_cond-clave p3 = 'desconocida' ).
            ENDIF.
        ENDCASE.

        l_cumple = eval_cond( clave = l_cond-clave valor = l_valor_cond ).
        IF l_cumple IS INITIAL.
          EXIT.
        ENDIF.
      ENDLOOP.
      IF l_cumple = 'X'.
        si = 'X'.
      ENDIF.
    ENDIF.

  ENDMETHOD.
