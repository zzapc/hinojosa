
class ZCL_MM_MATERIAL_TOOLS definition
  public
  inheriting from ZCL_MM_MATERIAL_MASTER
  final
  create public .

public section.

  class-data _C_SETNAME_VALUE type SETNAMENEW read-only value '0000ZMM_PT_TOOLS' ##NO_TEXT.
  data _TIPO_UTIL type ZTIPOUTIL read-only .
  class-data _C_TIPOUTIL_CLICHE type ZTIPOUTIL read-only value 'CLICHÉ' ##NO_TEXT.
  class-data _C_TIPOUTIL_TROQUEL type ZTIPOUTIL read-only value 'TROQUEL' ##NO_TEXT.
  data _WERKS type WERKS_D read-only .
  data _CODIGO_UTIL type ZCODIGOUTIL read-only .

  methods CONSTRUCTOR
    importing
      !I_MTART type MTART
      !I_MBRSH type MBRSH
      !I_WERKS type WERKS_D optional
      !I_CODIGOUTIL type ZCODIGOUTIL optional
    raising
      ZCX_MM_EXCEPTION .
  methods SET_TOOL
    importing
      !I_WERKS type WERKS_D
      !I_CODIGOUTIL type ZCODIGOUTIL
    raising
      ZCX_MM_EXCEPTION .
  class-methods S_DECODE_MATNR
    importing
      !I_MATNR type MATNR
    exporting
      !E_MTEXT type CHAR18
      !E_MSEQU type CHAR18
      !E_FCHAR type CHAR1
    raising
      ZCX_MM_EXCEPTION .
  class-methods S_GET_NEXT_CHAR_4_ZTRO_MATNR
    importing
      !I_MATNR type MATNR
    returning
      value(E_MATNR) type MATNR
    raising
      ZCX_MM_EXCEPTION .

  methods ZINTF_MM_MATERIAL_MASTER~GET_NEW_MATNR
    redefinition .
  methods ZINTF_MM_MATERIAL_MASTER~GET_NEW_MATNR_WITH_DIALOG
    redefinition .
  methods ZINTF_MM_MATERIAL_MASTER~SET_PRODH
    redefinition .
  methods ZINTF_MM_MATERIAL_MASTER~SET_PRODH_WITH_DIALOG
    redefinition .
protected section.

  methods _CHECK_MTEXT
    redefinition .
  methods _CHECK_PRODH_CODE
    redefinition .
  methods _DECODE_MATNR
    redefinition .
  methods _ENCODE_MATNR
    redefinition .
  methods _GET_NEW_MATNR_SEQUENTIAL
    redefinition .
  methods _INITIALIZE_VALUES_4_CLASS
    redefinition .
  methods _RECALC_MATNR_LENGTHS
    redefinition .
private section.

  methods _SET_TIPO_UTIL
    importing
      !I_TIPOUTIL type ZTIPOUTIL optional
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_CODIGO_UTIL
    importing
      !I_CODIGOUTIL type ZCODIGOUTIL
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_WERKS
    importing
      !I_WERKS type WERKS_D
    raising
      ZCX_MM_EXCEPTION .
  methods _CHECK_TIPOUTIL
    importing
      !I_TIPOUTIL type ZTIPOUTIL
    returning
      value(E_RESULT) type BOOL .
  methods _CHECK_WERKS
    importing
      !I_WERKS type WERKS_D
    returning
      value(E_RESULT) type BOOL .
  methods _CHECK_CODIGOUTIL
    importing
      !I_CODIGOUTIL type ZCODIGOUTIL
    returning
      value(E_RESULT) type BOOL .
  methods _CHECK_MASTERDATA
    importing
      !I_WERKS type WERKS_D
      !I_CODIGOUTIL type ZCODIGOUTIL
    returning
      value(E_RESULT) type BOOL .
  class-methods _S_GET_NEXT_ALPHABET
    importing
      !I_ALPHABET type CHAR1
    returning
      value(E_NEXT_ALPHABET) type CHAR1 .
endclass. "ZCL_MM_MATERIAL_TOOLS definition
class ZCL_MM_MATERIAL_TOOLS implementation.
  METHOD _check_codigoutil.

*1. Comprobamos que codigo útil exista en la tabla para tipo útil

    "Comprobamos finalmente que el valor esté en la tabla de datos maestros de codificación de útiles
    SELECT COUNT(*)
      FROM ztmm0033
     WHERE ztipoutil EQ me->_tipo_util
       AND codigo    EQ i_codigoutil.

    "Comprobamos si existe
    IF ( sy-subrc = 0 ). "Existe

      e_result = abap_true.

    ELSE. "No existe

      e_result = abap_false.

    ENDIF.

  ENDMETHOD.
  METHOD _check_masterdata.

    DATA: lv_check    TYPE bool,
          lv_tipoutil TYPE ztipoutil.

*1. Centro
    CLEAR: lv_check.
    lv_check = me->_check_werks( i_werks = i_werks ).

    "Comprobamos si centro es correcto
    IF ( lv_check IS NOT INITIAL ).

*2. Codigo útil
      CLEAR: lv_check.
      lv_check = me->_check_codigoutil( i_codigoutil = i_codigoutil ).

      "Comprobamos si codigo es correcto
      IF ( lv_check IS NOT INITIAL ).

*3. Comprobamos registro en tabla
        SELECT COUNT(*)
          FROM ztmm0033
         WHERE ztipoutil EQ me->_tipo_util
           AND werks     EQ i_werks
           AND codigo    EQ i_codigoutil.

        "Comprobamos is registro en tabla maestra
        IF ( sy-subrc = 0 ).
          e_result = abap_true.
        ELSE.
          e_result = abap_false.
        ENDIF.

      ELSE.
        e_result = abap_false.
      ENDIF.

    ELSE.
      e_result = abap_false.
    ENDIF.

  ENDMETHOD.
  METHOD _check_mtext.

    DATA: lv_precode(2) TYPE c,
          lv_tipoutil   TYPE ztipoutil,
          lv_werks      TYPE werks_d,
          lv_codigo     TYPE zcodigoutil,
          lv_check      TYPE bool.

    MOVE i_mtext(2) TO lv_precode.
    MOVE i_mtext+2(4) TO lv_werks.
    MOVE i_mtext+6(1) TO lv_codigo.

*1. Chequeos lv_precode
    IF ( lv_precode(1) NE 'U' ).
      e_correct = abap_false.
      EXIT.
    ENDIF.

    IF ( lv_precode+1(1) = 'C' OR lv_precode+1(1) = 'T' ).

      IF ( me->_tipo_util(1) NE lv_precode+1(1) ).

        e_correct = abap_false.
        EXIT.

      ENDIF.

    ELSE.

      e_correct = abap_false.
      EXIT.

    ENDIF.

*2. Chequeos werks y codigo

    lv_check = me->_check_masterdata( i_werks = lv_werks i_codigoutil = lv_codigo ).

    MOVE lv_check TO e_correct.

  ENDMETHOD.
  METHOD _check_prodh_code.

    DATA: "lv_werks    TYPE werks_d,
          "lv_codigo   TYPE zcodigoutil,
          lv_check    TYPE bool,
          lv_message  TYPE scx_attrname.

*1. Comprobamos tamaño de prodh
    IF ( strlen( i_prodh ) <> 7 ).

      CLEAR: lv_message.
      MOVE text-009 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '009' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

*2. Chequeo campos de PRODH
    lv_check = me->_check_mtext( i_mtext = i_prodh ).
    IF ( lv_check IS NOT INITIAL ).
      e_correct = abap_true.
    ELSE.
      CLEAR: lv_message.
      MOVE text-011 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '011' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ENDMETHOD.
  METHOD _check_tipoutil.

    "Comprobamos si se corresponde con tipo de material
    IF ( i_tipoutil = zcl_mm_material_tools=>_c_tipoutil_troquel ). "Troquel
      "Se comprueba tipo de material
      IF ( me->zintf_mm_material_master~mtart = 'ZTRO' ). "Troquel
        e_result = abap_true.
      ELSE. "Otros
        e_result = abap_false.
      ENDIF.
    ELSEIF ( i_tipoutil = zcl_mm_material_tools=>_c_tipoutil_cliche ). "Cliché
      "Se comprueba tipo de material
      IF ( me->zintf_mm_material_master~mtart = 'ZCLI' ). "Cliche
        e_result = abap_true.
      ELSE. "Otros
        e_result = abap_false.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD _check_werks.

*1. Comprobamos que centro existe.

    SELECT COUNT(*)
      FROM t001w
     WHERE werks EQ i_werks.

    IF ( sy-subrc = 0 ). "Centro existe

*2. Comprobamos que esté registrado en algun registro de ZTMM0033

      SELECT COUNT(*)
        FROM ztmm0033
       WHERE werks EQ i_werks.

      "Comprobamos si hay algún registro para el centro en la tabla.
      IF ( sy-subrc = 0 ).

        e_result = abap_true.

      ELSE.

        e_result = abap_false.

      ENDIF.

    ELSE. "Centro no existe

      e_result = abap_false.

    ENDIF. "Fin centro existe


  ENDMETHOD.
  METHOD _decode_matnr.

    e_mtext = i_matnr(me->zintf_mm_material_master~_matnr_mtext_length).
    e_sequential = i_matnr+me->zintf_mm_material_master~_matnr_mtext_length.

  ENDMETHOD.
  method _ENCODE_MATNR.

    DATA: lv_mtext        TYPE char18,
          lv_msequ        TYPE char18,
          lv_mtext_length TYPE i,
          lv_msequ_length TYPE i,
          lv_check        TYPE boolean,
          lv_offset       TYPE i,
          lv_char         TYPE char1.

*1. Parte texto

    IF ( strlen( i_mtext ) EQ me->zintf_mm_material_master~_matnr_mtext_length ).
      lv_check = me->_check_mtext( i_mtext = i_mtext ).
      IF ( lv_check IS NOT INITIAL ).
        lv_mtext = i_mtext.
      ELSE.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZCLASS' i_msgty = 'E' ).
      ENDIF.
    ELSE.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ENDIF.

*2. Parte secuencial

    "Obtengo secuencial con ceros delante
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input         = i_sequential
      IMPORTING
        output        = lv_msequ.

    lv_offset = 18 - me->zintf_mm_material_master~_matnr_msequ_length.
    lv_msequ = lv_msequ+lv_offset.

*3. Montamos código de material

    IF ( me->zintf_mm_material_master~mtart = 'ZTRO' ).
      lv_char = zcl_mm_material_tools=>_s_get_next_alphabet( i_alphabet = space ).
      CONCATENATE lv_mtext lv_msequ 'A' INTO e_matnr.
    ELSE.
      CONCATENATE lv_mtext lv_msequ INTO e_matnr.
    ENDIF.

  endmethod.
  METHOD _get_new_matnr_sequential.

    DATA: lv_matnr        TYPE matnr,
          lv_pattern      TYPE char19,
          lv_max_matnr    TYPE matnr,
          lv_curr_nseq    TYPE char18,
          lv_nseq_str     TYPE string,
          lv_string       TYPE scx_attrname,
          lv_next_nseq    TYPE char18,
          lv_offset       TYPE i,
          lv_count        TYPE i.

    "Montamos el patrón de busqueda...
    CONCATENATE i_mtext '%' INTO lv_pattern.

      IF ( _tipo_util = _c_tipoutil_troquel ).
        CONCATENATE i_mtext '999999' 'A' INTO lv_max_matnr.
      ELSEIF ( _tipo_util = _c_tipoutil_cliche ).
        CONCATENATE i_mtext '999999' INTO lv_max_matnr.
      ENDIF.

    CLEAR: lv_count.

    WHILE lv_count LE me->zintf_mm_material_master~_matnr_msequ_length.

      lv_count = lv_count + 1.

      "Obtenemos último número de material
      SELECT MAX( matnr )
        FROM mara
        INTO lv_matnr
       WHERE matnr LIKE lv_pattern
         AND matnr LT lv_max_matnr.

      "Comprobamos que hemos obtenido el material
      IF ( lv_matnr IS NOT INITIAL ).  "Obtenemos código de material
        "Secuencial actual
        lv_curr_nseq = lv_matnr+me->zintf_mm_material_master~_matnr_mtext_length(me->zintf_mm_material_master~_matnr_msequ_length).
      ELSE. "No obtenemos código de material
        lv_curr_nseq = 0.
      ENDIF. "Fin obtenemos material

      CLEAR lv_nseq_str.
      MOVE lv_curr_nseq TO lv_nseq_str.
      CONDENSE lv_nseq_str NO-GAPS.

      IF ( lv_nseq_str CO '0123456789' ).

        "Secuencial siguiente
        lv_next_nseq = lv_curr_nseq + 1.

        "Insertamos ceros a la izquierda
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input         = lv_next_nseq
          IMPORTING
            output        = lv_next_nseq.

        "Obtenemos tamaño del secuencial
        lv_offset = 18 - me->zintf_mm_material_master~_matnr_msequ_length.

        "Sacamos valor acotado.
        e_msequ = lv_next_nseq+lv_offset.

        EXIT.

      ELSE.

        lv_max_matnr = lv_matnr.

      ENDIF.

    ENDWHILE.

    IF ( e_msequ IS INITIAL ).

      MOVE text-014 TO lv_string.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '014' i_msgid = 'ZCL_MM_MTOOLS' i_msgty = 'E' i_message = lv_string ).

    ENDIF.

  ENDMETHOD.
  METHOD _initialize_values_4_class.

    super->_initialize_values_4_class( i_dynnr = i_dynnr i_setname = i_setname ).

  ENDMETHOD.
  method _RECALC_MATNR_LENGTHS.

    me->zintf_mm_material_master~_matnr_mtext_length = 7.
    me->zintf_mm_material_master~_matnr_msequ_length = 6.

  endmethod.
  METHOD _S_GET_NEXT_ALPHABET.

    CASE i_alphabet.
      WHEN ' '.
        e_next_alphabet = 'A'.
      WHEN 'A'.
        e_next_alphabet = 'B'.
      WHEN 'B'.
        e_next_alphabet = 'C'.
      WHEN 'C'.
        e_next_alphabet = 'D'.
      WHEN 'D'.
        e_next_alphabet = 'E'.
      WHEN 'E'.
        e_next_alphabet = 'F'.
      WHEN 'F'.
        e_next_alphabet = 'G'.
      WHEN 'G'.
        e_next_alphabet = 'H'.
      WHEN 'H'.
        e_next_alphabet = 'I'.
      WHEN 'I'.
        e_next_alphabet = 'J'.
      WHEN 'J'.
        e_next_alphabet = 'K'.
      WHEN 'K'.
        e_next_alphabet = 'L'.
      WHEN 'L'.
        e_next_alphabet = 'M'.
      WHEN 'M'.
        e_next_alphabet = 'N'.
      WHEN 'N'.
        e_next_alphabet = 'O'.
      WHEN 'O'.
        e_next_alphabet = 'P'.
      WHEN 'P'.
        e_next_alphabet = 'Q'.
      WHEN 'Q'.
        e_next_alphabet = 'R'.
      WHEN 'R'.
        e_next_alphabet = 'S'.
      WHEN 'S'.
        e_next_alphabet = 'T'.
      WHEN 'T'.
        e_next_alphabet = 'U'.
      WHEN 'U'.
        e_next_alphabet = 'V'.
      WHEN 'V'.
        e_next_alphabet = 'W'.
      WHEN 'W'.
        e_next_alphabet = 'X'.
      WHEN 'X'.
        e_next_alphabet = 'Y'.
      WHEN 'Y'.
        e_next_alphabet = 'Z'.
      ENDCASE.

  ENDMETHOD.
  METHOD _set_codigo_util.

    DATA: lv_message  TYPE scx_attrname,
          lv_check    TYPE bool.

    lv_check = me->_check_codigoutil( i_codigoutil = i_codigoutil ).

    "Comprobamos si es correcto
    IF ( lv_check IS NOT INITIAL ). "es correcto

      "se guarda en parametro interno
      _codigo_util = i_codigoutil.

    ELSE. "No existe

      CLEAR lv_message.
      MOVE text-004 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '004' i_msgid = 'ZTOOLS'  i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ENDMETHOD.
  METHOD _SET_TIPO_UTIL.

    DATA: lv_check   TYPE bool,
          lv_message TYPE scx_attrname,
          lv_tipoutil TYPE ztipoutil.

    "Comprobamos si el valor import viene relleno
    IF ( i_tipoutil IS INITIAL ). "i_tipoutil no viene relleno

      "Se comprueba tipo de material
      IF ( me->zintf_mm_material_master~mtart = 'ZTRO' ). "Es troquel

        "Volcamos valor de troquel
        lv_tipoutil = zcl_mm_material_tools=>_c_tipoutil_troquel.

      ELSEIF ( me->zintf_mm_material_master~mtart = 'ZCLI' ). "Es cliché

        "Volcamos valor de cliche
        lv_tipoutil = zcl_mm_material_tools=>_c_tipoutil_cliche.

      ENDIF.

    ELSE. "i_tipoutil viene relleno

      CLEAR: lv_check.
      lv_check = me->_check_tipoutil( i_tipoutil = i_tipoutil ).

      IF ( lv_check IS NOT INITIAL ).

        lv_tipoutil = i_tipoutil.

      ELSE.

        CLEAR: lv_message.
        MOVE text-005 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '005' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

      ENDIF.

    ENDIF.

    me->_tipo_util = lv_tipoutil.

  ENDMETHOD.
  METHOD _set_werks.

    DATA: lv_message TYPE scx_attrname,
          lv_check   TYPE bool.


    lv_check = me->_check_werks( i_werks = i_werks ).

    IF ( lv_check IS NOT INITIAL ).

      _werks = i_werks.

    ELSE.

      CLEAR lv_message.
      MOVE text-002 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZTOOLS'  i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ENDMETHOD.
  METHOD constructor.

    DATA: lo_exception TYPE REF TO zcx_mm_exception,
          lv_message   TYPE scx_attrname,
          lv_werks     TYPE werks_d,
          lv_codigo    TYPE zcodigoutil,
          lv_prodh     TYPE prodh_d.

    "Bloque 1: Chequeos propios de la clase
    TRY.

      DATA(lt_r_mtart) = zcl_mm_material_tools=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_tools=>_c_setname_value ).

      IF ( i_mtart NOT IN lt_r_mtart ).

        MOVE text-001 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '001' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.

   "Bloque 2: Llamamos al super constructor.
    TRY.
      super->constructor( i_mtart = i_mtart i_mbrsh = i_mbrsh ).
      me->_recalc_matnr_lengths( ).
    CLEANUP.
      "Borramos parámetros locales.
      CLEAR: me->zintf_mm_material_master~mtart, me->zintf_mm_material_master~prodh, me->zintf_mm_material_master~mbrsh.
    ENDTRY.

    "Bloque 3: Seteamos el resto de valores de la clase.
    TRY .

      "Seteo tipo de útil
      me->_set_tipo_util( ).

      "Seteo datos de codificación de tool
      "Si el centro es inicial
      IF ( i_werks IS INITIAL ). "Centro inicial

        "Comprobamos si codigo de codificación es inicial
        IF ( i_codigoutil IS NOT INITIAL ). "No es inicial

          CLEAR lv_message.
          MOVE text-008 TO lv_message.
          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '008' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

        ENDIF.

      ELSE. "Centro no inicial

        "Comprobamos si codigo codificación es inicial
        IF ( i_codigoutil IS NOT INITIAL ). "No es inicial

          "seteo datos de tool
          me->set_tool( i_werks = i_werks i_codigoutil = i_codigoutil ).

        ELSE.

          CLEAR lv_message.
          MOVE text-008 TO lv_message.
          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '008' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

        ENDIF.

      ENDIF.

      "Seteo datos iniciales
      me->_initialize_values_4_class( i_dynnr = '0300' i_setname = _c_setname_value ).

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

    ENDMETHOD.
  METHOD s_decode_matnr.

    CONSTANTS: lc_mtext_length TYPE i VALUE 7,
               lc_msequ_length TYPE i VALUE 6,
               lc_fchar_length TYPE i VALUE 1.

    DATA: lv_message TYPE scx_attrname.

    DATA: lv_tipo   TYPE ztipoutil,
          lv_werks  TYPE werks_d,
          lv_codigo TYPE zcodigoutil,
          lv_sequen TYPE char6,
          lv_fchar  TYPE char1.

***PARTE TEXTO

*1. Chequeamos primera letra del material. Siempre U.

    "chequeamos si primera letra no es U.
    IF ( i_matnr(1) NE 'U' ). "No es C.
      CLEAR: lv_message.
      MOVE text-011 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '011' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).
    ENDIF.

*2. Chequeo segunda letra

    IF ( i_matnr+1(1) EQ 'C' ).

      lv_tipo = zcl_mm_material_tools=>_c_tipoutil_cliche.
      IF ( strlen( i_matnr ) NE 13 ).
        CLEAR: lv_message.
        MOVE text-012 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).
      ENDIF.

      lv_sequen = i_matnr+7(6).

    ELSEIF ( i_matnr+1(1) EQ 'T' ).

      lv_tipo = zcl_mm_material_tools=>_c_tipoutil_troquel.
      IF ( strlen( i_matnr ) NE 14 ).
        CLEAR: lv_message.
        MOVE text-012 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '012' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).
      ENDIF.

*5. Chequeo última letra si troquel
      IF ( i_matnr+13(1) IS INITIAL ).
        CLEAR: lv_message.
        MOVE text-013 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '013' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).
      ENDIF.

      lv_sequen = i_matnr+7(6).
      lv_fchar  = i_matnr+13(1).

    ELSE.

      CLEAR: lv_message.
      MOVE text-011 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '011' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

*3. Chequeo centro

    MOVE i_matnr+2(4) TO lv_werks.

    SELECT COUNT(*)
      FROM t001w
     WHERE werks EQ lv_werks.

    IF ( sy-subrc NE 0 ).

      CLEAR: lv_message.
      MOVE text-002 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '002' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

*4. Chequeo código de máquina

    MOVE i_matnr+6(1) TO lv_codigo.

    SELECT COUNT(*)
      FROM ztmm0033
     WHERE werks EQ lv_werks
       AND codigo EQ lv_codigo.

    IF ( sy-subrc NE 0 ).

      CLEAR: lv_message.
      MOVE text-004 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '004' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

*6. Chequeo que el registro exista en ZTMM0033
    SELECT COUNT(*)
      FROM ztmm0033
     WHERE ztipoutil EQ lv_tipo
       AND werks EQ lv_werks
       AND codigo EQ lv_codigo.

    IF ( sy-subrc = 0 ).

      e_mtext = i_matnr(lc_mtext_length).

    ELSE.

      CLEAR: lv_message.
      MOVE text-006 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

***SECUENCIAL

    "Comprobamos que sea numérico
    IF ( i_matnr+7(6) CO '1234567890' ). "Es numérico

      e_mtext = i_matnr(lc_mtext_length).
      e_msequ = i_matnr+lc_mtext_length(lc_msequ_length).
      e_fchar = lv_fchar.

    ELSE. "No es numérico

      CLEAR: lv_message.
      MOVE text-013 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '013' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ENDMETHOD.
  METHOD s_get_next_char_4_ztro_matnr.

    DATA: lo_exception TYPE REF TO zcx_mm_exception,
          ls_t100key   TYPE scx_t100key.

    DATA: lv_mtext      TYPE char18,
          lv_msequ      TYPE char18,
          lv_fchar      TYPE char1,
          lv_new_fchar  TYPE char1,
          lv_max_matnr  TYPE matnr.

    DATA: lv_pattern    TYPE char19.

    TRY.

      zcl_mm_material_tools=>s_decode_matnr(
          EXPORTING
            i_matnr = i_matnr    " Número de material
          IMPORTING
            e_mtext = lv_mtext    " Parte texto del material
            e_msequ = lv_msequ    " Parte secuencial del material
            e_fchar = lv_fchar    " Letra final (solo troqueles)
          ).

      CONCATENATE lv_mtext lv_msequ '%' INTO lv_pattern.

      SELECT MAX( matnr )
        FROM mara
        INTO lv_max_matnr
       WHERE matnr LIKE lv_pattern.

      "Comprobamos si encontramos material.
      IF ( sy-subrc = 0 ). "Encontramos

        CLEAR: lv_mtext, lv_msequ, lv_fchar.

        zcl_mm_material_tools=>s_decode_matnr(
            EXPORTING
              i_matnr = lv_max_matnr    " Número de material
            IMPORTING
              e_mtext = lv_mtext    " Parte texto del material
              e_msequ = lv_msequ    " Parte secuencial del material
              e_fchar = lv_fchar    " Letra final (solo troqueles)
          ).

        "Comprobamos que viene la última letra rellena
        IF ( lv_fchar IS NOT INITIAL ).

          lv_new_fchar = zcl_mm_material_tools=>_s_get_next_alphabet( i_alphabet = lv_fchar ).

          IF ( lv_new_fchar IS NOT INITIAL ).

            CONCATENATE lv_mtext lv_msequ lv_new_fchar INTO e_matnr.

          ELSE.

            CLEAR ls_t100key.
            ls_t100key-msgno = '014'.
            ls_t100key-msgid = 'ZTOOLS'.
            MOVE text-014 TO ls_t100key-attr1.

            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = ls_t100key.

          endif.

        ELSE.

          CLEAR ls_t100key.
          ls_t100key-msgno = '014'.
          ls_t100key-msgid = 'ZTOOLS'.
          MOVE text-014 TO ls_t100key-attr1.

          RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = ls_t100key.

        ENDIF.

      ELSE. "No encontramos material

        CLEAR ls_t100key.
        ls_t100key-msgno = '013'.
        ls_t100key-msgid = 'ZTOOLS'.
        MOVE text-013 TO ls_t100key-attr1.

        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = ls_t100key.

      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.

  ENDMETHOD.
  METHOD SET_TOOL.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    DATA: lv_message  TYPE scx_attrname,
          lv_check    TYPE bool,
          lv_prodh    TYPE prodh_d.

    TRY.

      "Chequeamos datos
      lv_check = me->_check_masterdata( i_werks = i_werks i_codigoutil = i_codigoutil ).

      "Comprobar si es correcto masterdata
      IF ( lv_check IS NOT INITIAL ). "Es correcto. Actualizo todo.

        "Comprobamos si hay que modificar PRODH.
        CONCATENATE 'U' me->_tipo_util(1) i_werks i_codigoutil INTO lv_prodh.

        "Compruebo si hay que setear PRODH
        IF ( lv_prodh <> me->zintf_mm_material_master~prodh ). "Si hay que setearlo

          "Compruebo si puedo setearlo
          CLEAR: lv_check.
          lv_check = me->_check_prodh_code( i_prodh = lv_prodh ).

          "COmpruebo resultado
          IF ( lv_check IS NOT INITIAL ). "Puedo setear PRODH

            "Seteo todos los valores
            me->_set_werks( i_werks = i_werks ).
            me->_set_codigo_util( i_codigoutil = i_codigoutil ).
            me->zintf_mm_material_master~set_prodh( i_prodh = lv_prodh ).

          ELSE. "No puedo setear PRODH

            "No seteo nada
            CLEAR: lv_message.
            MOVE text-005 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '005' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

          ENDIF.

        ELSE. "No hay que setear PRODH

          "Seteo centro y código
          me->_set_werks( i_werks = i_werks ).
          me->_set_codigo_util( i_codigoutil = i_codigoutil ).

        ENDIF.

      ELSE. "masterdata no correcto

        CLEAR: lv_message.
        MOVE text-006 TO lv_message.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.

  ENDMETHOD.
METHOD zintf_mm_material_master~get_new_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_exception TYPE REF TO zcx_mm_exception.

  DATA: lv_mtext TYPE char18,
        lv_msequ TYPE char18,
        lv_matnr TYPE char18.

  DATA: lv_enqueued TYPE bool.

**********************************************************************
* Validaciones
**********************************************************************

  "Chequeo que la jerarquía haya sido informada
  IF ( i_prodh IS INITIAL AND me->zintf_mm_material_master~prodh IS INITIAL ).
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '011' i_msgid = 'ZTOOLS' i_msgty = 'E' ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

  TRY.

    "Si entra una nueva jerarquía la seteamos
    IF ( i_prodh IS NOT INITIAL AND i_prodh NE me->zintf_mm_material_master~prodh ).
      me->zintf_mm_material_master~set_prodh( i_prodh = i_prodh ).
    ENDIF.

    lv_mtext = me->zintf_mm_material_master~prodh.
    lv_msequ = me->_get_new_matnr_sequential( i_mtext = lv_mtext ).

*--> INI FCARDONA 17.08.2022 - Modificamos lógica para tener en cuenta el buffer.

** Comento por lógica nueva
*
*    lv_matnr = me->_encode_matnr( EXPORTING i_sequential = lv_msequ i_mtext = lv_mtext ).
*
*    MOVE lv_matnr TO e_matnr.

** Nueva lógica

    "Recorremos 5 veces (5 posibles bloqueos)
    DO 5 TIMES.

      "Montamos número de material
      CLEAR lv_matnr.
      lv_matnr = me->_encode_matnr( EXPORTING i_sequential = lv_msequ i_mtext = lv_mtext ).

      "Comprobamos si código bloqueado
      me->zintf_mm_material_master~is_matnr_enqueued(
        EXPORTING
          i_matnr          = lv_matnr     " Número de material
        IMPORTING
          e_is_enqueued    = lv_enqueued  " 'X'=bloqueado; space=no bloqueado.
        EXCEPTIONS
          no_valid_iparams = 1
          others           = 2
      ).

      "Comprobamos si material bloqueado por creación
      IF ( lv_enqueued EQ abap_false ). "No bloqueado

        EXIT.

      ELSE. "Bloqueado (enqueued)

        "Obtengo siguiente secuencial
        me->_get_next_sequential(
         EXPORTING
           i_current_sequential = lv_msequ                                            " Secuencial actual
           i_sequential_size    = me->zintf_mm_material_master~_matnr_msequ_length    " Tamaño del secuencial de salida
         IMPORTING
           e_new_sequential     = lv_msequ    " Secuencial de salida
         EXCEPTIONS
           no_valid_iparams     = 1
           others               = 2
       ).

       IF ( sy-subrc <> 0 ).
         RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '014' i_msgid = 'ZCLASS' i_msgty = 'E' ).
       ENDIF.

       CONTINUE.

      ENDIF.

    ENDDO.

    "Comprobamos si tras 5 ejecuciones es bloqueado
    IF ( lv_enqueued EQ abap_true ). "Bloqueado
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '014' i_msgid = 'ZCLASS' i_msgty = 'E' ).
    ELSE. "No bloqueado
      MOVE lv_matnr TO e_matnr.
    ENDIF.

  CATCH zcx_mm_exception INTO lo_exception.
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
  ENDTRY.

*--> FIN FCARDONA 17.08.2022 - Modificamos lógica para tener en cuenta el buffer.

ENDMETHOD.
  method ZINTF_MM_MATERIAL_MASTER~GET_NEW_MATNR_WITH_DIALOG.

    DATA: lo_exception TYPE REF TO zcx_mm_exception.

    TRY .

      me->zintf_mm_material_master~set_prodh_with_dialog( ).
      e_matnr = me->zintf_mm_material_master~get_new_matnr( ).

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

  endmethod.
  method ZINTF_MM_MATERIAL_MASTER~SET_PRODH.

    DATA: lo_exception TYPE REF TO zcx_mm_exception,
          lv_message   TYPE scx_attrname.

    DATA: lv_check  TYPE bool,
          lv_werks  TYPE werks_d,
          lv_codigo TYPE zcodigoutil.

    TRY.

      "Chequeo PRODH
      lv_check = me->_check_prodh_code( i_prodh = i_prodh ).

      "Compruebo si es correcto
      IF ( lv_check = abap_true ). "PRODH ok

        "Obtengo werks y codigo de PRODH
        MOVE i_prodh+2(4) TO lv_werks.
        MOVE i_prodh+6(1) TO lv_codigo.

        "Compruebo si tengo que setear centro y codigo
        IF ( me->_werks = lv_werks AND me->_codigo_util = lv_codigo ). "No tengo que setear tool

          "Seteo prodh
          me->zintf_mm_material_master~prodh = i_prodh.

        ELSE. "Tengo que setear tool

          "Chequeo werks y código
          CLEAR lv_check.
          lv_check = me->_check_masterdata( i_werks = lv_werks i_codigoutil = lv_codigo ).

          "Compruebo resultado masterdata
          IF ( lv_check = abap_true ). "MD ok

            "seteo PRODH y MD
            me->zintf_mm_material_master~prodh = i_prodh.
            me->set_tool( i_werks = lv_werks i_codigoutil = lv_codigo ).

          ELSE. "MD ko

            CLEAR lv_message.
            MOVE text-006 TO lv_message.
            RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '006' i_msgid = 'ZTOOLS' i_msgty = 'E' i_message = lv_message ).

          ENDIF.

        ENDIF.

      ELSE.

        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '005' i_msgid = 'ZTOOLS' i_msgty = 'E' ).

      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.

      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.

    ENDTRY.

  endmethod.
  method ZINTF_MM_MATERIAL_MASTER~SET_PRODH_WITH_DIALOG.

    DATA: lv_prodh      TYPE prodh_d,
          lo_exception  TYPE REF TO zcx_mm_exception.

    lv_prodh = me->_launch_popup( ).

    TRY .

      IF ( lv_prodh IS NOT INITIAL ).
        me->zintf_mm_material_master~set_prodh( i_prodh = lv_prodh ).
      ELSE.
        RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zintf_mm_material_master~_s_generate_message_4_class( i_msgno = '014' i_msgid = 'ZERROR' i_msgty = 'E' ).
      ENDIF.

    CATCH zcx_mm_exception INTO lo_exception.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = lo_exception->if_t100_message~t100key.
    ENDTRY.

  endmethod.
