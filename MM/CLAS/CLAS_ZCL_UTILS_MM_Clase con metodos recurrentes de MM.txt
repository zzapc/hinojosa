
class ZCL_UTILS_MM definition
  public
  inheriting from ZCL_UTILS
  create public .

public section.

  data _WERKS type WERKS_D read-only .
  data _LGORT type LGORT_D read-only .

  methods CHECK_LGORT_EXISTS
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    exceptions
      NO_VALUE
      NO_EXIST_WERKS
      NO_EXIST_LGORT .
  methods CHECK_MATNR_EXISTS
    importing
      !I_MATNR type MATNR
    exceptions
      NO_VALUE
      NO_MATNR_EXISTS .
  methods CHECK_MATNR_IN_WERKS
    importing
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D
    exceptions
      NO_VALUE
      NO_EXIST_MATNR
      NO_EXIST_WERKS
      NO_MATNR_IN_WERKS .
  methods CHECK_BATCH_4_MATNR
    importing
      !I_WERKS type WERKS_D
      !I_MATNR type MATNR
      !I_CHARG type CHARG_D
    returning
      value(R_ISOK) type BOOLEAN .
  methods CHECK_WERKS_EXISTS
    importing
      !I_WERKS type WERKS_D
    exceptions
      NO_VALUE
      NO_EXIST_WERKS .
  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    raising
      ZCX_MM_EXCEPTION .
  methods GET_MARD_DATA_4_MATNR
    importing
      !I_MATNR type MATNR
    returning
      value(R_S_MARD) type MARD .
  methods GET_MCHB_DATA_4_MATNR
    importing
      !I_MATNR type MATNR
    returning
      value(R_T_MCHB) type MCHB_TTY .
  class-methods S_GET_MARC_T_DATA
    importing
      !I_T_R_WERKS type ZTT_R_WERKS optional
      !I_T_R_MATNR type ZTT_R_MATNR optional
    returning
      value(R_T_MARC) type MARC_TT .
  class-methods S_GET_MARD_T_DATA
    importing
      !I_T_R_WERKS type ZTT_R_WERKS optional
      !I_T_R_LGORT type ZTT_R_LGORT optional
      !I_T_R_MATNR type ZTT_R_MATNR optional
    returning
      value(R_T_MARD) type MARD_TT .
  class-methods S_GET_MCHB_T_DATA
    importing
      !I_T_R_WERKS type ZTT_R_WERKS optional
      !I_T_R_LGORT type ZTT_R_LGORT optional
      !I_T_R_MATNR type ZTT_R_MATNR optional
      !I_T_R_CHARG type RANGES_CHARG_TT optional
    returning
      value(R_T_MCHB) type MCHB_TTY .
protected section.
private section.
endclass. "ZCL_UTILS_MM definition
class ZCL_UTILS_MM implementation.
METHOD check_batch_4_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** CHECK

  SELECT COUNT(*) UP TO 1 ROWS
    FROM mcha
   WHERE matnr = i_matnr
     AND werks = i_werks
     AND charg = i_charg.

****** RETURN RESULT

  IF ( sy-subrc EQ 0 ).
    r_isok = abap_true.
  ENDIF.

ENDMETHOD.
METHOD CHECK_LGORT_EXISTS.

**********************************************************************
* Validaciones
**********************************************************************

** Valor inicial

  IF ( i_werks IS INITIAL OR i_lgort IS INITIAL ).
    RAISE no_value.
  ENDIF.

** Existe centro

  me->check_werks_exists(
    EXPORTING
      i_werks        = i_werks    " Centro
    EXCEPTIONS
      no_value       = 1
      no_exist_werks = 2
      others         = 3
  ).
  IF ( sy-subrc <> 0 ).
    RAISE no_exist_werks.
  ENDIF.

** Existe almacén

  SELECT COUNT(*)
    FROM t001l
   WHERE werks EQ i_werks
     AND lgort EQ i_lgort.

  IF ( sy-subrc NE 0 ).
    RAISE no_exist_lgort.
  ENDIF.

ENDMETHOD.
METHOD CHECK_MATNR_EXISTS.

**********************************************************************
* Validaciones
**********************************************************************

** Inicial

  IF ( i_matnr IS INITIAL ).
    RAISE no_value.
  ENDIF.

** Existe

  SELECT COUNT(*)
    FROM mara
   WHERE matnr EQ i_matnr.

  IF ( sy-subrc NE 0 ).
    RAISE no_matnr_exists.
  ENDIF.

ENDMETHOD.
METHOD CHECK_MATNR_IN_WERKS.

**********************************************************************
* Validaciones
**********************************************************************

** Inicial

  IF ( i_matnr IS INITIAL OR i_werks IS INITIAL ).
    RAISE no_value.
  ENDIF.

** Existe MATNR

  me->check_matnr_exists(
    EXPORTING
      i_matnr         = i_matnr    " Número de material
    EXCEPTIONS
      no_value        = 1
      no_matnr_exists = 2
      others          = 3
  ).
  IF sy-subrc <> 0.
    RAISE no_exist_matnr.
  ENDIF.

** Existe WERKS

  me->check_werks_exists(
    EXPORTING
      i_werks        = i_werks    " Centro
    EXCEPTIONS
      no_value       = 1
      no_exist_werks = 2
      others         = 3
  ).
  IF sy-subrc <> 0.
    RAISE no_exist_werks.
  ENDIF.

** Existe MATNR en WERKS

  SELECT COUNT(*)
    FROM marc
   WHERE matnr EQ i_matnr
     AND werks EQ i_werks.

  IF ( sy-subrc NE 0 ).
    RAISE no_matnr_in_werks.
  ENDIF.

ENDMETHOD.
METHOD CHECK_WERKS_EXISTS.

**********************************************************************
* Validaciones
**********************************************************************

** Valor inicial

  IF ( i_werks IS INITIAL ).
    RAISE no_value.
  ENDIF.

** Existe centro

  SELECT COUNT(*)
    FROM t001w
   WHERE werks EQ i_werks.

  IF ( sy-subrc NE 0 ).
    RAISE no_exist_werks.
  ENDIF.

ENDMETHOD.
METHOD CONSTRUCTOR.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message TYPE sstring.

**********************************************************************
* Clase superior
**********************************************************************

  super->constructor( ).

**********************************************************************
* Valores de clase
**********************************************************************

  me->zif_msg_utils~_c_cl_msgid_label = 'ZCL_MM_UTILS'.

**********************************************************************
* Instanciamos
**********************************************************************

** Centro

  me->check_werks_exists(
    EXPORTING
      i_werks        = i_werks    " Centro
    EXCEPTIONS
      no_value       = 1
      no_exist_werks = 2
      others         = 3
  ).
  IF ( sy-subrc = 0 ).

    me->_werks = i_werks.

  ELSE.

    CLEAR: lv_message.
    MOVE text-001 TO lv_message.

    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message(
      i_msgno = '001'
      i_msgid = me->zif_msg_utils~_c_cl_msgid_label
      i_msgty = 'E'
      i_message = lv_message ).

  ENDIF.

** Almacén

  me->check_lgort_exists(
    EXPORTING
      i_werks        = i_werks    " Centro
      i_lgort        = i_lgort    " Almacén
    EXCEPTIONS
      no_value       = 1
      no_exist_werks = 2
      no_exist_lgort = 3
      others         = 4
  ).
  IF ( sy-subrc = 0 ).

    me->_lgort = i_lgort.

  ELSE.

    CLEAR: lv_message.
    MOVE text-001 TO lv_message.

    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message(
      i_msgno = '001'
      i_msgid = me->zif_msg_utils~_c_cl_msgid_label
      i_msgty = 'E'
      i_message = lv_message ).

  ENDIF.

ENDMETHOD.
METHOD GET_MARD_DATA_4_MATNR.

**********************************************************************
* Parámetros locales
**********************************************************************

****** TABLES

  DATA: lt_mard    TYPE mard_tt.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET MARD DATA

  lt_mard = zcl_utils_mm=>s_get_mard_t_data(
    i_t_r_werks = VALUE #( ( sign = 'I' option = 'EQ' werks_low = me->_werks ) )
    i_t_r_lgort = VALUE #( ( sign = 'I' option = 'EQ' lgort_low = me->_lgort ) )
    i_t_r_matnr = VALUE #( ( sign = 'I' option = 'EQ' material_low = i_matnr ) )
  ).

****** SET RESULT

  READ TABLE lt_mard INTO r_s_mard INDEX 1.

ENDMETHOD.
METHOD GET_MCHB_DATA_4_MATNR.

**********************************************************************
* Parámetros locales
**********************************************************************

****** TABLES

  DATA: lt_r_matnr TYPE ztt_r_matnr,
        lt_r_werks TYPE ztt_r_werks,
        lt_r_lgort TYPE ztt_r_lgort.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  APPEND VALUE #( sign = 'I' option = 'EQ' werks_low = me->_werks ) TO lt_r_werks.
  APPEND VALUE #( sign = 'I' option = 'EQ' lgort_low = me->_lgort ) TO lt_r_lgort.
  APPEND VALUE #( sign = 'I' option = 'EQ' material_low = i_matnr ) TO lt_r_matnr.

****** GET/SET MCHB DATA

*  r_t_mchb = zcl_utils_mm=>s_get_mchb_stocks( i_t_r_werks = lt_r_werks i_t_r_lgort = lt_r_lgort i_t_r_matnr = lt_r_matnr ).

ENDMETHOD.
  method S_GET_MARC_T_DATA.
  endmethod.
METHOD S_GET_MARD_T_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  CHECK lines( i_t_r_matnr ) GT 0 OR lines( i_t_r_werks ) GT 0 OR lines( i_t_r_lgort ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

****** GET/SET RESULT

  SELECT *
    FROM mard
    INTO CORRESPONDING FIELDS OF TABLE @r_t_mard
   WHERE matnr IN @i_t_r_matnr
     AND werks IN @i_t_r_werks
     AND lgort IN @i_t_r_lgort.

ENDMETHOD.
METHOD S_GET_MCHB_T_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  CHECK lines( i_t_r_matnr ) GT 0 OR lines( i_t_r_werks ) GT 0 OR lines( i_t_r_lgort ) GT 0 OR lines( i_t_r_charg ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

****** GET/SET RESULT

  SELECT *
    FROM mchb
    INTO CORRESPONDING FIELDS OF TABLE @r_t_mchb
   WHERE matnr IN @i_t_r_matnr
     AND werks IN @i_t_r_werks
     AND lgort IN @i_t_r_lgort
     AND charg IN @i_t_r_charg.

ENDMETHOD.
