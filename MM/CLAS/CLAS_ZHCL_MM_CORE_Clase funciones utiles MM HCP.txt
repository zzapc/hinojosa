
CLASS zhcl_mm_core DEFINITION
  PUBLIC
  INHERITING FROM zhcl_core
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF t_mat_cuobj,
        matnr TYPE matnr,
        werks TYPE werks_d,
        cuobj TYPE marc-cuobj,
      END OF t_mat_cuobj .
    TYPES:
      tt_mat_cuobj TYPE STANDARD TABLE OF t_mat_cuobj WITH KEY matnr werks cuobj .
    TYPES:
      BEGIN OF t_datos_base,
        maktx TYPE maktx,
        meins TYPE meins,
        mtart TYPE mtart,
        matkl TYPE matkl,
        mstae TYPE mara-mstae,  "Status material para todos los centros
        mstde TYPE mara-mstde,  "Fecha a partir de la cual es vál.status mat.común todos ce.
        mstav TYPE mara-mstav,  "Status de material común a todas las cadenas de distribución
        mstdv TYPE mara-mstdv,  "Fecha inicio validez status material p.todas cadenas distr.
        mmsta TYPE marc-mmsta,  "Status material específico centro
        mmstd TYPE marc-mmstd,  "Fecha entrada en vigor del status material específico centro
      END OF t_datos_base .
    TYPES:
      BEGIN OF t_datos_mat_centro_ruta.
        INCLUDE TYPE t_mat_cuobj.
        TYPES: ruta TYPE zruta,
      END OF t_datos_mat_centro_ruta .
    TYPES:
      tt_datos_mat_centro_ruta TYPE STANDARD TABLE OF t_datos_mat_centro_ruta WITH KEY matnr werks .
    TYPES:
      BEGIN OF t_datos_mat_centro.
        INCLUDE TYPE t_mat_cuobj.
        INCLUDE TYPE t_datos_base.
        TYPES: ruta TYPE zruta.
    TYPES: END OF t_datos_mat_centro .
    TYPES:
      tt_datos_mat_centro TYPE STANDARD TABLE OF t_datos_mat_centro WITH KEY matnr werks .
    TYPES:
      BEGIN OF t_semis,
        matnr TYPE matnr,
        werks TYPE werks_d,
        semi  TYPE matnr,
        ratio TYPE zcajas_corte_n4,
        tipo  TYPE text10,
      END OF t_semis .
    TYPES:
      tt_semis TYPE STANDARD TABLE OF t_semis WITH KEY matnr werks semi .
    TYPES:
      BEGIN OF t_pts,
        matnr    TYPE matnr,
        werks    TYPE werks_d,
        matnr_pt TYPE matnr,
        mtart    TYPE mtart,
        ratio    TYPE zcajas_corte_n4,
        tipo     TYPE text10,
      END OF t_pts .
    TYPES:
      tt_pts TYPE STANDARD TABLE OF t_pts WITH KEY matnr werks matnr_pt .
    TYPES:
      BEGIN OF  t_zstocks,
        werks                TYPE werks_d,
        matnr                TYPE matnr,
        maktx                TYPE maktx,
        meins                TYPE meins,
        mtart                TYPE mtart,
        tipo_mat             TYPE string,
        matkl                TYPE matkl,
        matnr_pt             TYPE matnr,
        maktx_pt             TYPE maktx,
        ratio_pt             TYPE zcajas_corte_n4,
        semi                 TYPE zed_semi,
        dispo                TYPE marc-dispo,
        dismm                TYPE marc-dismm,
        beskz                TYPE marc-beskz,
        sobsl                TYPE marc-sobsl,
        kdmat                TYPE knmt-kdmat,
        kunnr                TYPE knmt-kunnr,
        kunnr_t              TYPE zzname1_cliente,
        lgort                TYPE lgort_d,
        num_lotes            TYPE int4,
        ersda                TYPE mcha-ersda,
        num_cli_mat          TYPE int4,
        num_cli_stk          TYPE int4,
        num_uas              TYPE int4,
        stock_mm             TYPE p LENGTH 15 DECIMALS 3,
        stock_wm             TYPE p LENGTH 15 DECIMALS 3,
        stock_cliente        TYPE p LENGTH 15 DECIMALS 3,
        fecha_stkcl          TYPE vbak-audat,
        stock_fis_total      TYPE p LENGTH 15 DECIMALS 3,
        stock_cli_esp        TYPE p LENGTH 15 DECIMALS 3,
        fecha_stkcl_esp      TYPE vbak-audat,
        stock_subcont        TYPE p LENGTH 15 DECIMALS 3,
        fstksub              TYPE mcha-ersda,
        stock_transito       TYPE p LENGTH 15 DECIMALS 3,
        fecha_stock_transito TYPE ekko-bedat,
        rotacion             TYPE p LENGTH 15 DECIMALS 3,
        dias_rotura          TYPE p LENGTH 15 DECIMALS 3,
        ped_abiertos         TYPE int4,
        ctd_ped              TYPE p LENGTH 15 DECIMALS 3,
        audat_p              TYPE vbak-audat,
        alb_abiertos         TYPE int4,
        ctd_alb              TYPE p LENGTH 15 DECIMALS 3,
        lfdat                TYPE likp-lfdat,
        ord_abiertas         TYPE int4,
        ctd_ord              TYPE p LENGTH 15 DECIMALS 3,
        pedtr_of             TYPE mdfa-pedtr,
        ord_prev             TYPE int4,
        ctd_ord_prev         TYPE p LENGTH 15 DECIMALS 3,
        pedtr_prev           TYPE mdfa-pedtr,
        pc_abiertos          TYPE int4,
        ctd_pc               TYPE p LENGTH 15 DECIMALS 3,
        bedat_p              TYPE ekko-bedat,
        semi_stock_mm        TYPE p LENGTH 15 DECIMALS 3,
        semi_ctd_ord         TYPE p LENGTH 15 DECIMALS 3,
        semi_ratio           TYPE zcajas_corte_n4,
        semi_num_semis       TYPE int4,
      END OF t_zstocks .
    TYPES:
      tt_zstocks TYPE STANDARD TABLE OF t_zstocks WITH KEY matnr werks .
    TYPES:
      BEGIN OF t_zstocks_detalle,
        werks           TYPE werks_d,
        matnr           TYPE matnr,
        semi            TYPE zed_semi,
        semi_werks      TYPE werks_d,
        ratio           TYPE zcajas_corte_n4,
        maktx           TYPE maktx,
        meins           TYPE meins,
        mtart           TYPE mtart,
        tipo_mat        TYPE string,
        matkl           TYPE matkl,
        dispo           TYPE marc-dispo,
        dismm           TYPE marc-dismm,
        beskz           TYPE marc-beskz,
        sobsl           TYPE marc-sobsl,
        xchpf           TYPE marc-xchpf,
        lgort           TYPE lgort_d,
        charg           TYPE charg_d,
        ersda           TYPE mcha-ersda,
        hsdat           TYPE mcha-hsdat,
        vfdat           TYPE mcha-vfdat,
        zzkunnr         TYPE mch1-zzkunnr,
        zzcm_montaje    TYPE mchb-zzcm_montaje,
        zzcm_defectuosa TYPE mchb-zzcm_defectuosa,
        tipo            TYPE string,
        clabs           TYPE mchb-clabs,
        cinsm           TYPE mchb-cinsm,
        cspem           TYPE mchb-cspem,
        lgnum           TYPE lqua-lgnum,
        lgtyp           TYPE lqua-lgtyp,
        lgpla           TYPE lqua-lgpla,
        lqnum           TYPE lqua-lqnum,
        gesme           TYPE lqua-gesme,
        verme           TYPE lqua-verme,
        einme           TYPE lqua-einme,
        ausme           TYPE lqua-ausme,
        sobkz           TYPE msku-sobkz,
        sotxt           TYPE t148t-sotxt,
        bestq           TYPE lqua-bestq,
        lenum           TYPE lqua-lenum,
        meins_wm        TYPE lqua-meins,
        vbeln           TYPE vbbe-vbeln,
        audat           TYPE vbak-audat,
        mbdat           TYPE vbbe-mbdat,
        bstkd           TYPE vbkd-bstkd,
        kunwe           TYPE kunwe,
        vbtyp           TYPE vbbe-vbtyp,
        posnr           TYPE vbbe-posnr,
        abgru           TYPE vbap-abgru,
        etenr           TYPE vbbe-etenr,
        omeng           TYPE vbbe-omeng,
        meins_pv        TYPE vbbe-meins,
        lifsp           TYPE vbep-lifsp,
        mska_ersda      TYPE mska-ersda,
        aufnr           TYPE mdfa-aufnr,
        plnum           TYPE plaf-plnum,
        pedtr           TYPE mdfa-pedtr,
        auart           TYPE caufv-auart,
        gltrp           TYPE caufv-gltrp,
        gluzp           TYPE caufv-gluzp,
        gsmng           TYPE mdfa-gsmng,
        wemng           TYPE mdfa-wemng,
        gwemg           TYPE caufvd-gwemg,
        amein           TYPE mdfa-amein,
        baugr           TYPE mdrs-baugr,
        situacion       TYPE zssd_de_situacion,
        situacion_txt   TYPE ddtext,
        ruta            TYPE zssd_ruta,
        kunnr           TYPE ekunnr,
        name1           TYPE zzname1_cliente,
        kdmat           TYPE knmt-kdmat,
        lifnr           TYPE lifnr,
        name1p          TYPE zzlfa1_name1,
        ebeln           TYPE ekbe-ebeln,
        bedat           TYPE ekko-bedat,
        ebelp           TYPE ekbe-ebelp,
        lgort_p         TYPE ekpo-lgort,
        reswk           TYPE ekko-reswk,
        menge           TYPE ekbe-menge,
        meins_po        TYPE ekpo-meins,
        mblnr           TYPE mseg-mblnr,
        mjahr           TYPE mseg-mjahr,
        budat           TYPE mseg-budat_mkpf,
        zeile           TYPE mseg-zeile,
        bwart           TYPE mseg-bwart,
        shkzg           TYPE mseg-shkzg,
      END OF t_zstocks_detalle .
    TYPES:
      tt_zstocks_detalle TYPE STANDARD TABLE OF t_zstocks_detalle WITH NON-UNIQUE KEY matnr werks .
    TYPES:
      BEGIN OF t_unidades,
        matnr TYPE matnr,
        werks TYPE werks_d.
        INCLUDE TYPE yhp_idx_td151.
      TYPES: END OF t_unidades .
    TYPES:
      tt_unidades TYPE STANDARD TABLE OF t_unidades WITH KEY cuobj .

    CONSTANTS c_parametro TYPE zparametros-clave VALUE 'CORE_MM' ##NO_TEXT.
    DATA o_aicomp TYPE REF TO zhcl_ai_core .

    METHODS constructor .
    METHODS get_lote
      IMPORTING
        !bncom        TYPE bncom
        !tipo_forzado TYPE string DEFAULT ''
        !exit         TYPE exit_bibl DEFAULT ''
      EXPORTING
        !charg        TYPE charg_d
        !message      TYPE bapi_msg .
    METHODS get_unidades
      CHANGING
        !unidades TYPE tt_unidades .
    METHODS get_unidad_mat
      IMPORTING
        !matnr       TYPE matnr OPTIONAL
        !werks       TYPE werks_d OPTIONAL
        !cuobj       TYPE cuobj OPTIONAL
        !shuty       TYPE yhp_idx_td151-shuty
      RETURNING
        VALUE(datos) TYPE yhp_idx_td151 .
    METHODS get_zstocks
      IMPORTING
        !r_matnr               TYPE ranges_matnr OPTIONAL
        !r_werks               TYPE werks_t_range OPTIONAL
        !libre                 TYPE xfeld DEFAULT 'X'
        !bloqueado             TYPE xfeld DEFAULT ''
        !calidad               TYPE xfeld DEFAULT ''
        !stock_mm              TYPE xfeld DEFAULT ''
        !stock_wm              TYPE xfeld DEFAULT ''
        !stock_transito        TYPE xfeld DEFAULT ''
        !stock_cliente         TYPE xfeld DEFAULT ''
        !stock_especial        TYPE xfeld DEFAULT ''
        !stock_subcontratacion TYPE xfeld DEFAULT ''
        !stock_rotacion        TYPE xfeld DEFAULT ''
        !albaranes             TYPE xfeld DEFAULT ''
        !clientes              TYPE xfeld DEFAULT ''
        !ordenes_previsionales TYPE xfeld DEFAULT ''
        !ordenes_fabricacion   TYPE xfeld DEFAULT ''
        !pedidos_compra        TYPE xfeld DEFAULT ''
        !pedidos_venta         TYPE xfeld DEFAULT ''
        !detalle               TYPE xfeld DEFAULT ''
        !abrir_en_nuevo_modo   TYPE xfeld DEFAULT ''
        !variante              TYPE sy-slset DEFAULT ''
        !semis                 TYPE abap_bool DEFAULT ''
        !opt                   TYPE abap_bool DEFAULT ''
      EXPORTING
        !i_zstocks             TYPE tt_zstocks
        !i_zstocks_detalle     TYPE tt_zstocks_detalle .
    METHODS get_semis
      IMPORTING
        !i_mat            TYPE tt_mat_cuobj
        !aviso_duplicados TYPE abap_bool DEFAULT ''
        !popup            TYPE abap_bool DEFAULT ''
      EXPORTING
        !semis            TYPE tt_semis .
    METHODS get_mat_cuobj
      CHANGING
        !i_mat_cuobj TYPE tt_mat_cuobj .
    METHODS conv_m2
      IMPORTING
        !matnr             TYPE matnr
        !cantidad          TYPE any
        !unidad_origen     TYPE meins
        !unidad_destino    TYPE meins OPTIONAL
        !transaccion       TYPE sy-tcode
        !cuobj             TYPE cuobj OPTIONAL
        !werks             TYPE werks_d OPTIONAL
      RETURNING
        VALUE(cantidad_m2) TYPE ekpo-menge .
    METHODS get_semis_pt
      IMPORTING
        !i_mat TYPE tt_mat_cuobj
        !popup TYPE abap_bool DEFAULT ''
      EXPORTING
        !pts   TYPE tt_pts .
    METHODS get_datos_material_centro
      IMPORTING
        !get_datos_base TYPE abap_bool DEFAULT ''
        !get_ruta       TYPE abap_bool DEFAULT ''
      CHANGING
        !datos          TYPE tt_datos_mat_centro .
    METHODS get_lote_orden_sin_mov
      IMPORTING
        !bncom     TYPE bncom
      EXPORTING
        !subnumero TYPE nrnr
        !message   TYPE bapi_msg
        !charg     TYPE charg_d .
    METHODS get_datos_material_centro_ruta
      CHANGING
        !i_rutas TYPE tt_datos_mat_centro_ruta .
  PROTECTED SECTION.

private section.
endclass. "ZHCL_MM_CORE definition
class ZHCL_MM_CORE implementation.
  METHOD constructor.
    super->constructor( ).

    clave_parametros = 'CORE_MM'.

    o_aicomp = NEW #( ).
  ENDMETHOD.
  METHOD conv_m2.
    DATA l_cantidad TYPE ekpo-menge.

    CLEAR cantidad_m2.
    check cantidad ne 0.

    DATA(l_un_m2) = unidad_destino.
    IF l_un_m2 IS INITIAL.
      IF NOT transaccion IS INITIAL.
        l_un_m2 = get_atributo_par( campo = 'UNIDAD_M2'
                                    valor = CONV #( transaccion ) ).
      ENDIF.
      IF l_un_m2 IS INITIAL.
        l_un_m2 = get_atributo_par( campo = 'UNIDAD_M2'
                                    valor = '' ).
      ENDIF.
    ENDIF.

    IF unidad_origen = l_un_m2.
      cantidad_m2 = cantidad.
      RETURN.
    ENDIF.

    l_cantidad = cantidad.
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = matnr
        i_in_me              = unidad_origen
        i_out_me             = l_un_m2
        i_menge              = l_cantidad
      IMPORTING
        e_menge              = cantidad_m2
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    IF sy-subrc NE 0.
      CLEAR cantidad_m2.
    ENDIF.

*NOTA; Los parametros CUOBJ y WERKS los incluyo, "por si acaso", de momento no se usan para nada

  ENDMETHOD.
  METHOD get_datos_material_centro.

    IF datos IS INITIAL.
      RETURN.
    ENDIF.
    SORT datos BY matnr werks.

    IF get_datos_base = 'X'.
      SELECT marc~matnr, marc~werks, marc~cuobj,
             marc~mmsta, marc~mmstd,
             mara~meins, mara~mtart, mara~matkl,
             mara~mstae, mara~mstde, mara~mstav, mara~mstdv,
             makt~maktx
        FROM mara JOIN marc ON marc~matnr = mara~matnr
       LEFT OUTER JOIN makt ON makt~matnr = mara~matnr
                           AND makt~spras = @sy-langu
        INTO TABLE @DATA(i_datos_base)
        FOR ALL ENTRIES IN @datos
       WHERE marc~matnr = @datos-matnr
         AND marc~werks = @datos-werks.

      SORT i_datos_base BY matnr werks.

      LOOP AT datos ASSIGNING FIELD-SYMBOL(<datos>).
        READ TABLE i_datos_base ASSIGNING FIELD-SYMBOL(<base>) WITH KEY matnr = <datos>-matnr
                                                                        werks = <datos>-werks
                                                               BINARY SEARCH.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING <base> TO <datos>.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF get_ruta = 'X'.
      DATA i_rutas TYPE tt_datos_mat_centro_ruta.
      MOVE-CORRESPONDING datos TO i_rutas.
      get_datos_material_centro_ruta( CHANGING i_rutas = i_rutas ).
      LOOP AT i_rutas ASSIGNING FIELD-SYMBOL(<ruta>) WHERE NOT ruta IS INITIAL.
        READ TABLE datos ASSIGNING <datos> WITH KEY matnr = <ruta>-matnr
                                                    werks = <ruta>-werks
                                             BINARY SEARCH.
        IF sy-subrc = 0.
          <datos>-ruta = <ruta>-ruta.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.
  METHOD get_datos_material_centro_ruta.

    if i_rutas is initial.
      return.
    endif.

    " Buscamos la ruta relacionada con el material/centro
    SELECT a~werks, b~coper, a~matnr, b~arbpl, a~cuobj
    INTO TABLE @DATA(lt_ruta)
    FROM marc AS a
    INNER JOIN yhp_idx_td310 AS b ON b~cuobj = a~cuobj AND b~cself = '1'
      FOR ALL ENTRIES IN @i_rutas
    WHERE a~werks = @i_rutas-werks
      AND a~matnr = @i_rutas-matnr.
    IF sy-subrc = 0.
      SORT lt_ruta BY werks coper.
      " Recuperamos los semielaborados del material
      SELECT y~cuobj, b~coper, a~matnr, b~arbpl
        INTO TABLE @DATA(lt_ruta_semi)
        FROM yhp_idx_td110 AS y
          INNER JOIN marc AS a ON a~matnr = y~p_matnr
          INNER JOIN yhp_idx_td310 AS b ON b~cuobj = a~cuobj AND b~cself = '1'
          FOR ALL ENTRIES IN @lt_ruta
          WHERE y~cuobj = @lt_ruta-cuobj
            AND y~mboar = 'P'.
      IF sy-subrc = 0.
        SORT lt_ruta_semi BY cuobj coper.
      ENDIF.
    ENDIF.

    " Concatenamos la Ruta
    LOOP AT i_rutas ASSIGNING FIELD-SYMBOL(<ruta>).
      LOOP AT lt_ruta INTO DATA(ls_data) WHERE matnr = <ruta>-matnr AND werks = <ruta>-werks.
        IF ls_data-coper = 1.
          " Añadimos la ruta de los semielaborados si existe.
          LOOP AT lt_ruta_semi INTO DATA(ls_ruta_semi) WHERE cuobj = ls_data-cuobj.
            IF ls_ruta_semi-coper = 1.
              <ruta>-ruta = ls_ruta_semi-arbpl.
            ELSE.
              CONCATENATE <ruta>-ruta '-' ls_ruta_semi-arbpl INTO <ruta>-ruta.
            ENDIF.
          ENDLOOP.
          IF sy-subrc <> 0.
            <ruta>-ruta = ls_data-arbpl.
          ELSE.
            CONCATENATE <ruta>-ruta '-' ls_data-arbpl INTO <ruta>-ruta.
          ENDIF.
        ELSE.
          CONCATENATE <ruta>-ruta '-' ls_data-arbpl INTO <ruta>-ruta.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.
  METHOD get_lote.
    DATA: l_tipo_rango TYPE zparametros-campo,
          l_subnumero  TYPE nrnr,
          l_rango      TYPE nrobj.

    CLEAR: charg, message.

    IF bncom-matnr IS INITIAL.
      message = `No se ha indicado material`.
    ELSEIF bncom-werks IS INITIAL.
      message = 'No se ha indicado centro'.
    ENDIF.

*    zcl_ap_utils=>parar_fondo( ).

    IF message IS INITIAL.
* Nos aseguramos que el material esté sujeto a lote, si no, no continuamos.
      SELECT SINGLE matnr FROM marc
        INTO @DATA(l_matnr)
      WHERE matnr = @bncom-matnr
        AND werks = @bncom-werks
        AND xchpf = 'X'.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

      IF NOT bncom-mtart IS INITIAL.
        DATA(l_mtart) = bncom-mtart.
      ELSEIF NOT bncom-matnr IS INITIAL.
        SELECT SINGLE mtart FROM mara
          INTO l_mtart
         WHERE matnr = bncom-matnr.
      ENDIF.

      IF NOT tipo_forzado IS INITIAL.
        CASE tipo_forzado.
          WHEN 'SUBCONTRATACION_FOLDING'.
            l_tipo_rango = 'RANGO_FOLDING'.
            l_subnumero = get_atributo_par( campo = 'SUBRANGO_FOLDING'
                                            valor = 'SUBCONTRATACION' ).
          WHEN OTHERS.
            SELECT SINGLE valor FROM zparametros
              INTO @DATA(tipo)
             WHERE clave = @clave_parametros
               AND campo = 'SUBRANGO_FOLDING'
               AND atributo1 = @tipo_forzado.
            IF sy-subrc = 0.
              l_tipo_rango = 'RANGO_FOLDING'.
              l_subnumero = tipo_forzado.
            ELSE.
              message = |Tipo rango forzado { tipo_forzado } erróneo|.
            ENDIF.
        ENDCASE.
      ELSE.
*+++++++++++++++++++++++++++++++++ CENTROS FOLDING ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        IF bncom-werks IN get_rango_centros( c_set_centros_folding ).
*+++++++++++++++++++++++++++++++++ PRODUCTO TERMINADO +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          IF l_mtart IN get_rango_tipos_mat( c_set_tipo_mat_pt_packaging ).
            l_tipo_rango = 'RANGO_FOLDING'.
            CASE bncom-bwart.
              WHEN '101'. " Entrada de mercancías
                IF NOT bncom-aufnr IS INITIAL.
                  charg = |{ bncom-aufnr ALPHA = OUT }|.
                ELSEIF NOT bncom-ebeln IS INITIAL.
                  IF NOT bncom-bstyp IS INITIAL.
                    DATA(l_bstyp) = 'F'.
                  ELSE.
                    SELECT SINGLE bstyp FROM ekko
                      INTO l_bstyp
                     WHERE ebeln = bncom-ebeln.
                  ENDIF.
                  IF l_bstyp = 'F'.
                    SELECT SINGLE pstyp FROM ekpo
                      INTO @DATA(l_pstyp)
                    WHERE ebeln = @bncom-ebeln
                      AND ebelp = @bncom-ebelp.
                    IF l_pstyp = '3'. " Subcontratacion
                      l_subnumero = get_atributo_par( campo = 'SUBRANGO_FOLDING'
                                                  valor = 'SUBCONTRATACION' ).
                      IF l_subnumero IS INITIAL.
                        message = 'Indique un rango en parametro SUBRANGO_FOLDING SUBCONTRATACION'.
                      ENDIF.
                    ELSE.
                      l_subnumero = get_atributo_par( campo = 'SUBRANGO_FOLDING'
                                                 valor = 'PEDIDOS' ).
                      IF l_subnumero IS INITIAL.
                        message = 'Indique un rango en parametro SUBRANGO_FOLDING PEDIDOS'.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ELSE.
                  message = 'No se contempla 101 sin pedido ni orden'.
                ENDIF.
              WHEN '657'.
                message = '¡¡¡¡¡PENDIENTE!!!!!'.
              WHEN ''.
                get_lote_orden_sin_mov( EXPORTING bncom     = bncom
                                IMPORTING charg     = charg
                                          subnumero = l_subnumero
                                          message   = message ).
            ENDCASE.
            " FIN +++++++++++++++++++++++++++++++++ PRODUCTO TERMINADO +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*+++++++++++++++++++++++++++++++++ PRODUCTO SEMITERMINADO +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          ELSEIF l_mtart IN get_rango_tipos_mat( c_set_tipo_mat_semi_packaging ).
            CASE bncom-bwart.
              WHEN ''.
                l_tipo_rango = 'RANGO_FOLDING'.
                get_lote_orden_sin_mov( EXPORTING bncom     = bncom
                                IMPORTING charg     = charg
                                          subnumero = l_subnumero
                                          message   = message ).
            ENDCASE.
            " FIN +++++++++++++++++++++++++++++++++ PRODUCTO SEMITERMINADO +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          ENDIF.
        ENDIF. " FIN +++++++++++++++++++++++++++++++++ CENTROS FOLDING ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      ENDIF.

      IF NOT l_subnumero IS INITIAL.
        IF l_tipo_rango IS INITIAL.
          message = 'No se ha podido determinar el tipo de rango'.
        ELSE.
          l_rango = get_atributo_par( campo = l_tipo_rango ).
          IF l_rango IS INITIAL.
            message = |Indique un rango en parametro CORE_MM { l_tipo_rango }|.
          ELSE.
            zcl_ap_rango_numero=>siguiente_numero( EXPORTING rango     = l_rango
                                                             rango_no  = l_subnumero
                                                   IMPORTING numero    = charg ).
            IF charg IS INITIAL.
              message = |No se ha recuperando valor del rango { l_rango } { l_subnumero }|.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

* Si no es ninguno de los casos contemplados antes, determinamos lote generico
      IF charg IS INITIAL AND message IS INITIAL.
        IF NOT bncom-ummat IS INITIAL. " cvivo - 06.03.2019 - 50651 traspasos sin lote a lote
          l_matnr = bncom-ummat.
          SELECT SINGLE mtart FROM mara
            INTO l_mtart
           WHERE matnr = bncom-ummat.
        ENDIF.

        CALL FUNCTION 'ZMFMM0002'
          EXPORTING
            i_werks               = bncom-werks
            i_mtart               = l_mtart
            i_matnr               = l_matnr
          IMPORTING
            o_charg               = charg
          EXCEPTIONS
            centro_no_contemplado = 1
            no_sujeto_lote        = 2
            OTHERS                = 3.

        CASE sy-subrc.
          WHEN 1.
            message = 'Centro no contemplado'.
          WHEN 2.
            message = 'Material no sujeto a lote'.
          WHEN 3.
            message = 'Error determinando lote con función ZMMFMM0002'.
        ENDCASE.
      ENDIF.
    ENDIF.

    IF NOT message IS INITIAL AND NOT exit IS INITIAL.
      zcl_ap_exits=>log_st( exit = exit
                            clave = bncom-matnr && bncom-ebeln
                            p1 = message
                            msgty = 'E' ).
    ELSE.
* Esto es sólo temporal, porque cuando tengamos claro el funcionamiento no trazaremos todos los lotes
      zcl_ap_exits=>log_st( exit = exit
                            clave = bncom-matnr && bncom-ebeln
                            p1 = charg
                            msgty = 'S' ).
    ENDIF.
  ENDMETHOD.
  METHOD get_lote_orden_sin_mov.
    CLEAR: message, subnumero, charg.

    IF NOT bncom-pmatn IS INITIAL AND NOT bncom-pwerk IS INITIAL AND NOT bncom-auart IS INITIAL AND NOT bncom-aufnr IS INITIAL.
      IF bncom-aufnr(1) = '%'.
        message = 'Grabe primero orden antes de continuar'.
        MESSAGE message TYPE 'I'.
      ELSE.
        charg = |{ bncom-aufnr ALPHA = OUT }|.
      ENDIF.
    ELSE.
      subnumero = get_atributo_par( campo = 'SUBRANGO_FOLDING'
                                      valor = 'SIN MOV' ).
      IF subnumero IS INITIAL.
        message = 'Indique un rango en parametro SUBRANGO_FOLDING SIN MOV'.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD get_mat_cuobj.
    DATA: i_mat TYPE tt_mat_cuobj,
          i_cuo TYPE tt_mat_cuobj.

    LOOP AT i_mat_cuobj ASSIGNING FIELD-SYMBOL(<mat>).
      IF NOT <mat>-matnr IS INITIAL AND NOT <mat>-werks IS INITIAL AND <mat>-cuobj IS INITIAL.
        APPEND <mat> TO i_mat.
      ELSEIF NOT <mat>-cuobj IS INITIAL AND ( <mat>-matnr IS INITIAL OR <mat>-werks IS INITIAL ).
        APPEND <mat> TO i_cuo.
      ENDIF.
    ENDLOOP.

    IF NOT i_mat IS INITIAL.
      SELECT matnr, werks, cuobj FROM marc
        INTO TABLE @DATA(i_marc)
       FOR ALL ENTRIES IN @i_mat
       WHERE matnr  = @i_mat-matnr
         AND werks  = @i_mat-werks
         AND cuobj <> ''.
      LOOP AT i_marc ASSIGNING FIELD-SYMBOL(<marc>).
        LOOP AT i_mat_cuobj ASSIGNING <mat> WHERE     matnr = <marc>-matnr
                                                  AND werks = <marc>-werks.
          <mat>-cuobj = <marc>-cuobj.
        ENDLOOP.
      ENDLOOP.
    ENDIF.

    IF NOT i_cuo IS INITIAL.
      CLEAR i_marc.
      SELECT matnr, werks, cuobj FROM marc             "#EC CI_NOFIELD.
        INTO TABLE @i_marc
       FOR ALL ENTRIES IN @i_cuo
       WHERE cuobj = @i_cuo-cuobj.

      LOOP AT i_marc ASSIGNING <marc>.
        LOOP AT i_mat_cuobj ASSIGNING <mat> WHERE cuobj = <marc>-cuobj.
          <mat>-matnr = <marc>-matnr.
          <mat>-werks = <marc>-werks.
        ENDLOOP.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.
  METHOD get_semis.
    TYPES: BEGIN OF t_mat_dup,
             matnr TYPE matnr,
             werks TYPE werks_d,
             lista TYPE string,
           END OF t_mat_dup.

    DATA l_semis   TYPE t_semis.
    DATA i_mat_dup TYPE TABLE OF t_mat_dup.

    CLEAR semis.

* Recuperamos los CUOBJ si hace falta
    DATA(i_mat_c) = i_mat.
    get_mat_cuobj( CHANGING i_mat_cuobj = i_mat_c ).
    DELETE i_mat_c WHERE cuobj IS INITIAL.

    IF NOT i_mat_c IS INITIAL.
* Materiales normales.
      SELECT yhp_idx_td100~cuobj, mboar, yhp_idx_td100~cself, p_matnr, yhp_idx_td100~noupt
        FROM yhp_idx_td110
        left OUTER join yhp_idx_td100 on yhp_idx_td100~cuobj = yhp_idx_td110~cuobj
                                     and yhp_idx_td100~cself = yhp_idx_td110~cself
        INTO TABLE @DATA(i_semi_normal)
        FOR ALL ENTRIES IN @i_mat_c
       WHERE yhp_idx_td100~cuobj    = @i_mat_c-cuobj
         AND p_matnr <> ''.
      SORT i_semi_normal BY cuobj mboar cself DESCENDING p_matnr.
      DELETE ADJACENT DUPLICATES FROM i_semi_normal COMPARING cuobj mboar.

      LOOP AT i_semi_normal ASSIGNING FIELD-SYMBOL(<semi_normal>).
        ASSIGN i_mat_c[ cuobj = <semi_normal>-cuobj ] TO FIELD-SYMBOL(<mat>).
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.

        CLEAR l_semis.
        l_semis-matnr = <mat>-matnr.
        l_semis-werks = <mat>-werks.
        l_semis-semi  = <semi_normal>-p_matnr.
        l_semis-tipo  = 'Normal'.

        IF <semi_normal>-noupt IS INITIAL.
          l_semis-ratio = 1. "Si es 0, es que realmente tiene 1
        else.
          l_semis-ratio = <semi_normal>-noupt.
        endif.

*        SELECT noupt FROM yhp_idx_td100 JOIN marc ON yhp_idx_td100~cuobj = marc~cuobj
*          INTO @DATA(l_noupt)
*          UP TO 1 ROWS
*         WHERE matnr = @l_semis-semi
**             AND werks = @l_semis-werks
*         ORDER BY cself DESCENDING.
*          l_semis-ratio = l_noupt.
*        ENDSELECT.
        APPEND l_semis TO semis.
      ENDLOOP.
      SORT semis.
      DELETE ADJACENT DUPLICATES FROM semis.

      IF aviso_duplicados = 'X' AND sy-batch IS INITIAL AND popup IS INITIAL.
        LOOP AT semis ASSIGNING FIELD-SYMBOL(<semis>).
          ASSIGN i_mat_dup[ matnr = <semis>-matnr
                            werks = <semis>-werks ] TO FIELD-SYMBOL(<mat_dup>).
          IF sy-subrc = 0.
            __add_lista <mat_dup>-lista <semis>-semi.
          ELSE.
            APPEND VALUE #( matnr = <semis>-matnr
                            werks = <semis>-werks
                            lista = <semis>-semi ) TO i_mat_dup.
          ENDIF.
        ENDLOOP.
        DELETE i_mat_dup WHERE NOT lista CS ','.
        IF NOT i_mat_dup IS INITIAL.
          CALL FUNCTION 'Z_POPUP_ALV_AP'
            EXPORTING
              titulo  = 'Materiales normales con diferentes semis'
              texto   = 'Revise estos materiales, porque sólo deberían de tener un semi'
              botones = 'OK'
            TABLES
              t_datos = i_mat_dup.
        ENDIF.
      ENDIF.

* Assembled Set
      SELECT cuobj, cself, matnr, parat FROM yhp_idx_td101
        INTO TABLE @DATA(i_sets)
        FOR ALL ENTRIES IN @i_mat_c
       WHERE cuobj  = @i_mat_c-cuobj
         AND matnr <> ''.

      SORT i_sets BY cuobj cself DESCENDING matnr.
      DELETE ADJACENT DUPLICATES FROM i_sets COMPARING cuobj.

      LOOP AT i_sets ASSIGNING FIELD-SYMBOL(<set>).
        ASSIGN i_mat_c[ cuobj = <set>-cuobj ] TO <mat>.
        IF sy-subrc = 0.
          CLEAR l_semis.
          l_semis-matnr = <mat>-matnr.
          l_semis-werks = <mat>-werks.
          l_semis-semi  = <set>-matnr.
          l_semis-ratio = <set>-parat.
          l_semis-tipo  = 'Assembled'.
          APPEND l_semis TO semis.
        ENDIF.
      ENDLOOP.
    ENDIF.

    SORT semis BY matnr werks semi tipo.
    IF popup IS INITIAL.
      DELETE ADJACENT DUPLICATES FROM semis COMPARING matnr werks semi.
    ELSE.
      CALL FUNCTION 'Z_POPUP_ALV_AP'
        EXPORTING
          titulo       = 'Listado semis'
          botones      = 'OK'
          campos_texto = 'TIPO=Tipo&&RATIO=Ratio'
        TABLES
          t_datos      = semis.
    ENDIF.
  ENDMETHOD.
  METHOD get_semis_pt.
    DATA: l_pts   TYPE t_pts,
          i_td101 TYPE tt_pts,
          i_td110 TYPE tt_pts.

    IF i_mat IS INITIAL.
      RETURN.
    ENDIF.

    SELECT yhp_idx_td101~matnr, marc~werks, marc~matnr AS matnr_pt, mara~mtart, parat AS ratio FROM yhp_idx_td101 JOIN marc ON marc~cuobj = yhp_idx_td101~cuobj
                                                                                                  JOIN mara ON mara~matnr = marc~matnr
      INTO CORRESPONDING FIELDS OF TABLE @i_td101
      FOR ALL ENTRIES IN @i_mat
     WHERE yhp_idx_td101~matnr = @i_mat-matnr
       AND marc~werks = @i_mat-werks.
    SORT i_td101 BY matnr werks matnr_pt mtart.

    SELECT yhp_idx_td110~p_matnr AS matnr, marc~werks, marc~matnr AS matnr_pt, mara~mtart FROM yhp_idx_td110 JOIN marc ON marc~cuobj = yhp_idx_td110~cuobj
                                                                                                                    JOIN mara ON mara~matnr = marc~matnr
      INTO CORRESPONDING FIELDS OF TABLE @i_td110
      FOR ALL ENTRIES IN @i_mat
     WHERE yhp_idx_td110~p_matnr = @i_mat-matnr
       AND marc~werks = @i_mat-werks.

* En la tabla TD110 hay semis, que apuntan a semis que al final apuntan a PT
    DO 5 TIMES.
      DATA: i_td110_2 TYPE tt_pts,
            i_tdproc  TYPE tt_pts.

      LOOP AT i_td110 ASSIGNING FIELD-SYMBOL(<td110>) WHERE mtart = 'ZPSE'.
        IF NOT line_exists( i_tdproc[ matnr_pt = <td110>-matnr_pt ] ) AND NOT line_exists( i_tdproc[ matnr = <td110>-matnr_pt ] ).
          SELECT yhp_idx_td110~p_matnr AS matnr, marc~werks, marc~matnr AS matnr_pt, mara~mtart FROM yhp_idx_td110 JOIN marc ON marc~cuobj = yhp_idx_td110~cuobj
                                                                                                                    JOIN mara ON mara~matnr = marc~matnr
            APPENDING TABLE @i_td110_2
           WHERE yhp_idx_td110~p_matnr = @<td110>-matnr_pt "Puede que no sean del centro origen
             AND marc~werks = @<td110>-werks.
        ENDIF.
        APPEND <td110> TO i_tdproc.
        DELETE i_td110.
      ENDLOOP.
      IF sy-subrc NE 0.
        EXIT.
      ELSE.
        LOOP AT i_td110_2 ASSIGNING <td110>.
          IF <td110>-mtart = 'ZPSE'.
            IF NOT line_exists( i_tdproc[ matnr_pt = <td110>-matnr_pt ] ) AND NOT line_exists( i_tdproc[ matnr = <td110>-matnr_pt ] ).
              APPEND <td110> TO i_td110.
            ENDIF.
          ELSE.
            APPEND <td110> TO i_td110.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDDO.

    SORT i_td110 BY matnr werks matnr_pt mtart.
    DELETE ADJACENT DUPLICATES FROM i_td110 COMPARING matnr werks matnr_pt tipo.


    LOOP AT i_td101 ASSIGNING FIELD-SYMBOL(<td101>).
      MOVE-CORRESPONDING <td101> TO l_pts.
      l_pts-tipo = 'TD101'.
      APPEND l_pts TO pts.
    ENDLOOP.

    LOOP AT i_td110 ASSIGNING <td110>.
      MOVE-CORRESPONDING <td110> TO l_pts.
      l_pts-tipo = 'TD110'.
      APPEND l_pts TO pts.
    ENDLOOP.

    SORT pts BY matnr werks matnr_pt tipo.
    IF popup IS INITIAL.
      DELETE ADJACENT DUPLICATES FROM pts COMPARING matnr werks matnr_pt.
    ELSE.
      CALL FUNCTION 'Z_POPUP_ALV_AP'
        EXPORTING
          titulo       = 'Listado PTs asociados a Semis'
          botones      = 'OK'
          campos_texto = 'TIPO=Tipo&&RATIO=Ratio'
        TABLES
          t_datos      = pts.
    ENDIF.
  ENDMETHOD.
  METHOD get_unidad_mat.
    CLEAR datos.
    DATA(unidades) = VALUE tt_unidades( ( matnr = matnr
                                          werks = werks
                                          cuobj = cuobj
                                          shuty = shuty ) ).

    get_unidades( CHANGING unidades = unidades ).

    ASSIGN unidades[ 1 ] TO FIELD-SYMBOL(<unidad>).
    IF sy-subrc = 0.
      MOVE-CORRESPONDING <unidad> TO datos.
    ENDIF.
  ENDMETHOD.
  METHOD get_unidades.
    CHECK NOT unidades IS INITIAL.

    SORT unidades.
    DELETE ADJACENT DUPLICATES FROM unidades COMPARING cuobj matnr werks shuty.
    o_aicomp->completar_cuobj( EXPORTING tipo = 'MARC'
                               CHANGING  tabla = unidades ).

    SELECT * FROM yhp_idx_td151               "#EC CI_ALL_FIELDS_NEEDED
      INTO TABLE @DATA(i_td151)
      FOR ALL ENTRIES IN @unidades
     WHERE cuobj = @unidades-cuobj
       AND shuty = @unidades-shuty
     ORDER BY PRIMARY KEY.

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.
* Sólo queremos el máximo valor de CSELF cada registro
    SORT unidades BY cuobj ASCENDING shuty ASCENDING cself DESCENDING.
    DELETE ADJACENT DUPLICATES FROM unidades COMPARING cuobj shuty.

    LOOP AT i_td151 ASSIGNING FIELD-SYMBOL(<td151>).
      READ TABLE unidades ASSIGNING FIELD-SYMBOL(<uni>) WITH KEY cuobj = <td151>-cuobj
                                                                 shuty = <td151>-shuty
                                                        BINARY SEARCH.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING <td151> TO <uni>.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD get_zstocks.

    CLEAR: i_zstocks, i_zstocks_detalle.

    IF r_werks IS INITIAL. "Es obligatorio informar centro
      RETURN.
    ENDIF.

    FREE MEMORY ID: 'ZSTOCKS', 'ZSTOCKS_DETALLE'.
    SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD 'X' ##EXISTS.

    IF abrir_en_nuevo_modo = 'X'.
      DATA(l_id) = sy-datum && sy-uzeit.
      zcl_ap_cache=>set_cache( report = 'ZSTOCKS'
                 clave = 'ZSTOCKS_S'
                 subclave = l_id
                 string = variante
                 variables = r_matnr[]
                 variables2 = r_werks[]
                 max_duracion = 1 ).

      DATA i_par TYPE TABLE OF rfc_spagpa.
      i_par = VALUE #( ( parid = 'ZSTOCKS_CACHE' parval = l_id ) ).
      CALL FUNCTION 'ABAP4_CALL_TRANSACTION'
        DESTINATION 'NONE'
        STARTING NEW TASK 'ZSTOCKS'
        EXPORTING
          tcode                 = 'ZSTOCKS'
        TABLES
          spagpa_tab            = i_par
        EXCEPTIONS
          communication_failure = 1
          system_failure        = 2.
      IF sy-subrc NE 0.
        MESSAGE 'Error llamando a ZSTOCKS' TYPE 'S'.
      ENDIF.

      RETURN.
    ENDIF.


    DATA(l_export) = COND xfeld( WHEN detalle = 'X' THEN 'D'
                                 WHEN detalle = '*' THEN '*'
                                 ELSE 'X' ).
    SUBMIT zstocks                                      "#EC CI_SUBMIT.
*    VIA SELECTION-SCREEN
    AND RETURN
           WITH s_matnr IN r_matnr
           WITH s_werks IN r_werks
           WITH p_libre = libre
           WITH p_bloque = bloqueado
           WITH p_cali = calidad
           WITH p_stkmm = stock_mm
           WITH p_stkwm = stock_wm
           WITH p_stktr = stock_transito
           WITH p_stkcl = stock_cliente
           WITH p_stkcs = stock_especial
           WITH p_stkro = stock_rotacion
           WITH p_stkpr = stock_subcontratacion
           WITH p_numcl = clientes
           WITH p_numpv = pedidos_venta
           WITH p_numal = albaranes
           WITH p_numor = ordenes_fabricacion
           WITH p_numop = ordenes_previsionales
           WITH p_numpc = pedidos_compra
           WITH p_semis = semis
           WITH p_pt    = ''
           WITH p_list  = 'X'
           WITH p_deta  = ''
           WITH p_export = l_export
           WITH p_opt = opt.

    IF detalle = 'X' OR detalle = '*'.
      IMPORT i_zstocks_detalle TO i_zstocks_detalle FROM MEMORY ID 'ZSTOCKS_DETALLE'.
    ENDIF.
    IF detalle = '' OR detalle = '*'.
      IMPORT i_zstocks TO i_zstocks FROM MEMORY ID 'ZSTOCKS'.
    ENDIF.

    FREE MEMORY ID: 'ZSTOCKS', 'ZSTOCKS_DETALLE'.
    SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD '' ##EXISTS.
  ENDMETHOD.
