*&---------------------------------------------------------------------*
*&  Include           ZRMM0006_ALV
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar .

  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.

* Variante
  PERFORM alv_prepare_variant CHANGING ls_variant.
* Preparamos el catálogo de campos
  PERFORM alv_prepare_fielcat.

* Preparamos el layout
  PERFORM alv_prepare_layout CHANGING ls_lvc_s_layo.

* >>> YTG 09/02/2017- Preparar el fieldcat exportamos el excel
*Después de preparar el fieldcat exportamos el excel
  IF s_excel IS NOT INITIAL OR s_email IS NOT INITIAL.
    PERFORM exportar_excel.
  ENDIF.
* <<< YTG 09/02/2017

  IF  sy-batch  <> 'X'.
*  IF  p_job IS INITIAL.
* Mostramos el ALV
    CALL METHOD g_grid->set_table_for_first_display
      EXPORTING
        i_buffer_active    = ' '
        i_bypassing_buffer = 'X'
        is_layout          = ls_lvc_s_layo
        i_structure_name   = 'GT_STOCK'
        is_variant         = ls_variant
        i_save             = 'A'
      CHANGING
        it_outtab          = gt_stock[]
        it_fieldcatalog    = gt_fieldcat.
*  ENDIF.
  ENDIF.
ENDFORM.                    " ALV_MOSTRAR

*&---------------------------------------------------------------------*
*&      Form  alv_prepare_variant
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PS_VARIANT text
*----------------------------------------------------------------------*
FORM alv_prepare_variant CHANGING ps_variant TYPE disvariant .


  IF gs_variant IS NOT INITIAL.
    IF p_vari IS NOT INITIAL.
      gs_variant-variant = p_vari.
    ENDIF.
    ps_variant = gs_variant.
  ELSE.
    CLEAR ps_variant.
    ps_variant-report = sy-repid.
    IF p_vari IS NOT INITIAL.
      ps_variant-variant = p_vari.
    ENDIF.
  ENDIF.



ENDFORM.                    "alv_prepare_variant

*&---------------------------------------------------------------------*
*&      Form  alv_prepare_fielcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM alv_prepare_fielcat.

  DATA: ls_fcat TYPE lvc_s_fcat.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant, gt_fieldcat.

* Pasar tabla interna al formato del fieldcat
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_internal_tabname     = 'GT_STOCK'
      i_inclname             = sy-repid
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat_ant
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

* Pasar el anterior fieldcat al formato del nuevo
  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      it_fieldcat_alv = gt_fieldcat_ant
    IMPORTING
      et_fieldcat_lvc = gt_fieldcat
    TABLES
      it_data         = gt_stock
    EXCEPTIONS
      it_data_missing = 1
      OTHERS          = 2.

* Recorremos el catálogo de campos modificándolo

  LOOP AT gt_fieldcat INTO ls_fcat.
    lv_tabix = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'PREC_STANDARD'.
        ls_fcat-scrtext_l = 'Precio estandard'.
        ls_fcat-scrtext_m = 'Precio estandard'.
        ls_fcat-scrtext_s = 'Prec.std.'.
        ls_fcat-col_opt = 'X'.
      WHEN 'VALORACION_ECON'.
        ls_fcat-scrtext_l = 'Valoración económica'.
        ls_fcat-scrtext_m = 'Valor.económica'.
        ls_fcat-scrtext_s = 'Valor.econ'.
        ls_fcat-col_opt = 'X'.
      WHEN 'WAERS'.
        ls_fcat-scrtext_l = 'Moneda'.
        ls_fcat-scrtext_m = 'Moneda'.
        ls_fcat-scrtext_s = 'Mon.'.
        ls_fcat-col_opt = 'X'.

      WHEN 'WERKS_NAME'.
        ls_fcat-scrtext_l = text-002.
        ls_fcat-scrtext_m = text-002.
        ls_fcat-scrtext_s = text-002.
        ls_fcat-col_opt = 'X'.
      WHEN 'KUNNR_NAME'.
        ls_fcat-scrtext_l = text-003.
        ls_fcat-scrtext_m = text-003.
        ls_fcat-scrtext_s = text-003.
        ls_fcat-col_opt = 'X'.
* ini - cvivo - 05.03.2018 47105: Campo entrada en almacén
      WHEN 'ERSDA'.
        ls_fcat-scrtext_l = text-019.
        ls_fcat-scrtext_m = text-019.
        ls_fcat-scrtext_s = text-019.
        ls_fcat-col_opt = 'X'.

* CMS - 63841 - Añadir Lote Origen
      WHEN 'LOTE_ORIGEN'.
        ls_fcat-scrtext_l = |Lote origen|.
        ls_fcat-scrtext_m = |Lote origen|.
        ls_fcat-scrtext_s = |Lote orig.|.
        ls_fcat-col_opt = 'X'.

* fin - cvivo - 05.03.2018 47105: Campo entrada en almacén
*      when 'Z_MATERIALVENTA'.
*        ls_fcat-scrtext_l = text-006.
*        ls_fcat-scrtext_m = text-006.
*        ls_fcat-scrtext_s = text-006.
*
*      when 'Z_UN_MED_ESP_LOTE'.
*        ls_fcat-scrtext_l = text-007.
*        ls_fcat-scrtext_m = text-007.
*        ls_fcat-scrtext_s = text-007.
*
*      when 'Z_ORDEN'.
*        ls_fcat-scrtext_l = text-008.
*        ls_fcat-scrtext_m = text-008.
*        ls_fcat-scrtext_s = text-008.
*      when 'Z_APTOALIM'.
*        ls_fcat-scrtext_l = text-009.
*        ls_fcat-scrtext_m = text-009.
*        ls_fcat-scrtext_s = text-009.
*      when 'Z_CADUC_CORONA'.
*        ls_fcat-scrtext_l = text-010.
*        ls_fcat-scrtext_m = text-010.
*        ls_fcat-scrtext_s = text-010.
*      when 'Z_COEX'.
*        ls_fcat-scrtext_l = text-011.
*        ls_fcat-scrtext_m = text-011.
*        ls_fcat-scrtext_s = text-011.
*      when 'Z_UBICACION'.
*        ls_fcat-scrtext_l = text-012.
*        ls_fcat-scrtext_m = text-012.
*        ls_fcat-scrtext_s = text-012.
*      when 'Z_INC_PLANTA'.
*        ls_fcat-scrtext_l = text-013.
*        ls_fcat-scrtext_m = text-013.
*        ls_fcat-scrtext_s = text-013.
*      when 'Z_RECH_PROD'.
*        ls_fcat-scrtext_l = text-014.
*        ls_fcat-scrtext_m = text-014.
*        ls_fcat-scrtext_s = text-014.
*      when 'Z_INC_EXTERNA'.
*        ls_fcat-scrtext_l = text-015.
*        ls_fcat-scrtext_m = text-015.
*        ls_fcat-scrtext_s = text-015.
*      when 'Z_DEVOLUCION'.
*        ls_fcat-scrtext_l = text-016.
*        ls_fcat-scrtext_m = text-016.
*        ls_fcat-scrtext_s = text-016.
*      when 'Z_EXCESO'.
*        ls_fcat-scrtext_l = text-017.
*        ls_fcat-scrtext_m = text-017.
*        ls_fcat-scrtext_s = text-017.
*      when 'Z_MOT_EXCESO'.
*        ls_fcat-scrtext_l = text-018.
*        ls_fcat-scrtext_m = text-018.
*        ls_fcat-scrtext_s = text-018.
    ENDCASE.

    ls_fcat-tabname       = 'ZSTMM_STOCK'.
*    ls_fcat-ref_table     = 'ZSTMM_STOCK'.
    MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

  ENDLOOP.

* ini - cvivo - 05.03.2018 47105: Campo entrada en almacén
  DELETE gt_fieldcat WHERE fieldname EQ 'LAEDA'.
* fin - cvivo - 05.03.2018 47105: Campo entrada en almacén
  DELETE gt_fieldcat WHERE fieldname EQ 'LGNUM'
                        OR fieldname EQ 'LGTYP'
                        OR fieldname EQ 'LGPLA'
                        OR fieldname EQ 'BOB_ENTERA'
                        OR fieldname EQ 'BOB_MEDIA'
                        OR fieldname EQ 'BOB_PICO'. " cvivo - proyecto WM - escondemos WM para papeleras (tx ZMM0011)

ENDFORM.                    "alv_prepare_fielcat

*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_prepare_layout CHANGING ls_lvc_s_layo TYPE lvc_s_layo.

* Para que muestre el ancho de las columnas optimizado
  ls_lvc_s_layo-cwidth_opt = 'X'.
  ls_lvc_s_layo-sel_mode   = 'A'.

ENDFORM.                    " ALV_PREPARE_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  ALV_REFRESH_TABLE_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_refresh_table_display .

  DATA: ls_stable TYPE lvc_s_stbl,
        ls_layout	TYPE lvc_s_layo.

*Refresh layout
  CLEAR ls_layout.
  CALL METHOD g_grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

  PERFORM alv_prepare_layout CHANGING ls_layout.

  CALL METHOD g_grid->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

*Refresh data
  CLEAR ls_stable.
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.
  CALL METHOD g_grid->refresh_table_display
    EXPORTING
      is_stable = ls_stable
    EXCEPTIONS
      finished  = 1
      OTHERS    = 2.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.                    " ALV_REFRESH_TABLE_DISPLAY

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_HTML_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_html_header.

  DATA: l_doctable TYPE REF TO cl_dd_table_element,
        l_col_pic  TYPE REF TO cl_dd_area,
        l_col_tit  TYPE REF TO cl_dd_area,
        l_col_info TYPE REF TO cl_dd_area.

  DATA: lv_logo TYPE sdydo_key,
        lv_text TYPE sdydo_text_element.

* Creamos una tabla con 3 columnas
  CALL METHOD g_dd_doc->add_table
    EXPORTING
      no_of_columns = 3
      border        = '0'
      width         = '100%'
    IMPORTING
      table         = l_doctable.

* Columna del logo
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '15%'
    IMPORTING
      column = l_col_pic.

* Columna de títulos
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '10%'
    IMPORTING
      column = l_col_tit.

* Columna de valores (información)
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '75%'
    IMPORTING
      column = l_col_info.

* Ponemos el logo
*  REPLACE 'XXXX' IN lv_logo WITH gs_orgvta-bukrs.

  IF so_werks-low IS NOT INITIAL.
    CONCATENATE 'ZLOGO_' so_werks-low '_ALV' INTO lv_logo.
  ELSE.
    lv_logo = 'ZLOGO_3000_ALV'.
  ENDIF.

  CONDENSE lv_logo NO-GAPS.

  CALL METHOD l_col_pic->add_picture
    EXPORTING
      picture_id = lv_logo.

* Ponemos el título del centro
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c01
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.
  l_col_tit->new_line( ).

* Ponemos el título de la fecha
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c02
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.
  l_col_tit->new_line( ).

* Ponemos el título de la hora
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c03
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.

* Ponemos el nombre del centro
  IF so_werks-low IS NOT INITIAL.
    SELECT SINGLE name1 INTO lv_text
        FROM  t001w
        WHERE werks = so_werks-low.
    CONCATENATE so_werks-low lv_text INTO lv_text SEPARATED BY '-'.
    CALL METHOD l_col_info->add_text
      EXPORTING
        text         = lv_text
        sap_fontsize = cl_dd_document=>large.
    l_col_info->new_line( ).
  ELSE.
    SELECT SINGLE name1 INTO lv_text
        FROM  t001w
        WHERE werks = '3000'.
    CONCATENATE '3000' lv_text INTO lv_text SEPARATED BY '-'.
    CALL METHOD l_col_info->add_text
      EXPORTING
        text         = lv_text
        sap_fontsize = cl_dd_document=>large.
    l_col_info->new_line( ).
  ENDIF.

* Ponemos la fecha
  WRITE sy-datum TO lv_text DD/MM/YYYY.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.
  l_col_info->new_line( ).

* Ponemos la hora
  WRITE sy-uzeit TO lv_text.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.


* Creamos el objeto HTML en el container de arriba
  CREATE OBJECT g_html
    EXPORTING
      parent = g_container_1.

* Cargamos los textos en el visor HTML
  g_dd_doc->html_control = g_html.

* Visualizamos los textos
  CALL METHOD g_dd_doc->merge_document.
  CALL METHOD g_dd_doc->display_document
    EXPORTING
      reuse_control = 'X'
      parent        = g_container_1.

ENDFORM.                    " MOSTRAR_HTML_HEADER
**&---------------------------------------------------------------------
**
**&      Form  MOSTRAR_ALV
**&---------------------------------------------------------------------
**
**       text
**----------------------------------------------------------------------
**
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------
**
*FORM mostrar_alv .
*  DATA: lti_fieldcat TYPE lvc_t_fcat,
*        lti_exctool  TYPE ui_functions.
*  DATA: ls_layout  TYPE lvc_s_layo,
*        ls_variant TYPE disvariant.
*  DATA: lv_repid TYPE syrepid.
*
** Variante
*  lv_repid          = sy-repid.
*  ls_variant-report = lv_repid.
*
** Layout
*  ls_layout-cwidth_opt = 'X'.
**  ls_layout-sel_mode   = 'A'.
*
** Mostramos el ALV
*  CALL METHOD g_grid->set_table_for_first_display
*    EXPORTING
*      i_buffer_active    = ' '
*      i_bypassing_buffer = 'X'
*      is_layout          = ls_layout
*      is_variant         = ls_variant
*      i_save             = 'A'
*    CHANGING
*      it_outtab          = gt_stock
*      it_fieldcatalog    = gti_fieldcat.
*
** Volvemos a ajustar el ancho de las columnas
*  PERFORM refrescar_alv .
*
*ENDFORM.                    " MOSTRAR_ALV
**&---------------------------------------------------------------------
**
**&      Form  REFRESCAR_ALV
**&---------------------------------------------------------------------
**
**       text
**----------------------------------------------------------------------
**
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------
**
*FORM refrescar_alv .
*  DATA: ls_layout TYPE lvc_s_layo,
*        ls_stable TYPE lvc_s_stbl.
*
** Sacamos el layout del ALV
*  CALL METHOD g_grid->get_frontend_layout
*    IMPORTING
*      es_layout = ls_layout.
*
** Ponemos de nuevo que optimice las columnas
*  ls_layout-cwidth_opt = 'X'.
*
** Cargamos de nuevo el layout
*  CALL METHOD g_grid->set_frontend_layout
*    EXPORTING
*      is_layout = ls_layout.
*
** Refrescamos el ALV
*  ls_stable-row = 'X'.
*  ls_stable-col = 'X'.
*  CALL METHOD g_grid->refresh_table_display
*    EXPORTING
*      is_stable = ls_stable.
*ENDFORM.                    " REFRESCAR_ALV
