*&---------------------------------------------------------------------*
*&  Include           ZRMM0002_MOD
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  STATUS_1000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_1000 OUTPUT.

  SET PF-STATUS '1000'.
  SET TITLEBAR '1000'.

* Ocultar los precios
  IF sy-tcode = 'ZMM0003'.
    LOOP AT SCREEN .
      IF screen-group1 = 'SUP'.
        screen-invisible = '1'.
        screen-active = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSEIF sy-tcode = 'ZMM0004'.
  ENDIF.

  PERFORM cargar_pantalla_1000.

ENDMODULE.                 " STATUS_1000  OUTPUT


*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_1000 INPUT.

  CASE gv_okcode.
*   Para volver
    WHEN 'EXIT'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'OK_CODE'.

* 1.- recuperar numero de registro para entrada de mercancias provisional
      IF gv_entrada IS INITIAL.
        PERFORM recuperar_contador CHANGING gv_entrada.
      ENDIF.


      CLEAR: gv_posnr, gs_output_param, gt_messages.
      REFRESH: gt_messages.

      CALL SCREEN '2000'.


  ENDCASE.
  CLEAR gv_okcode.

ENDMODULE.                 " USER_COMMAND_1000  INPUT

*&---------------------------------------------------------------------*
*&      Module  GV_LIFNR  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE gv_lifnr INPUT.

  DATA: lv_contratos TYPE i.
  CLEAR lv_contratos.
  DATA: lv_answer TYPE c.
  DATA: lt_spopli LIKE spopli OCCURS 0,
        ls_spopli TYPE spopli.
  DATA: lv_lifnr TYPE elifn.

  IF NOT gv_lifnr IS INITIAL.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_lifnr
      IMPORTING
        output = lv_lifnr.

* RECUPERAMOS EL NOMBRE DEL PROVEEDOR
    CLEAR gv_name1.
    SELECT SINGLE name1 INTO gv_name1
    FROM lfa1
    WHERE lifnr = lv_lifnr.

**************************************************************************************
* SELECCIONAMOS LOS CONTRATOS MARCO PARA UN PROVEEDOR ACTIVOS EN LA FECHA SELECCIONADA
    CLEAR gt_contrato_marco.
    REFRESH gt_contrato_marco.
    CLEAR lv_lifnr .
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_lifnr
      IMPORTING
        output = lv_lifnr.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_contrato_marco
    FROM ekko
    WHERE lifnr = lv_lifnr
    AND ( kdatb <= gv_bldat
    AND kdate >= gv_bldat ).

* MIRAMOS CUANTOS CONTRATOS SE RECUPERAN
    DESCRIBE TABLE gt_contrato_marco LINES lv_contratos.
    IF lv_contratos > 1.
* EN CASO DE SER MAS DE UNO MOSTRAMOS UN POP-UP PARA QUE EL USUARIO SELECCIONE UNO
      LOOP AT gt_contrato_marco INTO gs_contrato_marco.
        CONCATENATE gs_contrato_marco-ebeln gs_contrato_marco-kdatb gs_contrato_marco-kdate
        INTO ls_spopli-varoption SEPARATED BY '-'.

        APPEND ls_spopli TO lt_spopli.
      ENDLOOP.

      CLEAR lv_answer.
      CALL FUNCTION 'POPUP_TO_DECIDE_LIST'
        EXPORTING
*         CURSORLINE         = 1
*         MARK_FLAG          = ' '
*         MARK_MAX           = 1
*         START_COL          = 0
*         START_ROW          = 0
          textline1          = text-002
*         TEXTLINE2          = ' '
*         TEXTLINE3          = ' '
          titel              = text-001
*         DISPLAY_ONLY       = ' '
        IMPORTING
          answer             = lv_answer
        TABLES
          t_spopli           = lt_spopli
        EXCEPTIONS
          not_enough_answers = 1
          too_much_answers   = 2
          too_much_marks     = 3
          OTHERS             = 4.

      IF lv_answer <> 'A'.
        READ TABLE gt_contrato_marco INTO gs_contrato_marco
        INDEX lv_answer.
      ENDIF.


    ELSEIF lv_contratos = 0.
* SI NO EXISTE NINGUN CONTRATO MARCO MOSTRAMOS UN ERROR
      MESSAGE e022 WITH gv_lifnr.

    ELSEIF lv_contratos = 1.
* EN CASO DE SER SOLO UNO LO SELECCIONAMOS
      READ TABLE gt_contrato_marco INTO gs_contrato_marco
      INDEX 1.
    ENDIF.
  ELSE.
    CLEAR gv_name1.
  ENDIF.

ENDMODULE.                 " GV_LIFNR  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_2000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_2000 OUTPUT.

  SET PF-STATUS '2000'.
  SET TITLEBAR '2000'.

* Ocultar botones de grabar y contabilizar en caso de estar contabilizado
  IF sy-tcode = 'ZMM0004' AND NOT gv_contabilizado IS INITIAL.
    LOOP AT SCREEN .
      IF screen-group1 = 'SUP'.
        screen-invisible = '1'.
        screen-active = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
** QUITAMOS LOS BOTONES DE PESADAS, EL SUPERVISOR SOLO LAS PUEDE MODIFICAR
*  IF sy-tcode = 'ZMM0004'.
*    LOOP AT SCREEN .
*      IF screen-group1 = 'PES'.
*        screen-invisible = '1'.
*        screen-active = '0'.
*        MODIFY SCREEN.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.

  IF g_custom_container IS INITIAL.
*   Creamos los objetos
    CREATE OBJECT g_custom_container
      EXPORTING
        container_name = gc_container.
*    CREATE OBJECT grid
*           EXPORTING i_parent = g_custom_container.
    CREATE OBJECT grid
      EXPORTING
        i_parent      = g_custom_container
        i_appl_events = 'X'.

**   Para los eventos
    CREATE OBJECT g_application.
    SET HANDLER g_application->handle_data_changed FOR grid.
    SET HANDLER g_application->handle_data_changed_finished FOR grid.
    SET HANDLER g_application->handle_toolbar
                g_application->handle_hotspot_click
                g_application->handle_user_command FOR grid.

*   Cuando es editable -> para que escuche los eventos: ENTER...
    CALL METHOD grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

*   Recuperar datos a mostrar
    PERFORM recuperar_datos.
*   Mostramos el ALV
    PERFORM mostrar_datos.

  ELSE.
    CALL METHOD grid->refresh_table_display.
  ENDIF.

ENDMODULE.                 " STATUS_2000  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_2000 INPUT.

  DATA: ls_datos_1000 LIKE LINE OF pesadas.

  CASE gv_okcode2.
*   Para volver
    WHEN 'EXIT'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'PPARC'.
*   Recuperar datos a mostrar
      PERFORM recuperar_datos3.
      CLEAR: gv_pesada,
            gv_ntgew_c.

*   Recuperar datos a mostrar
      PERFORM recuperar_datos3.

      CALL SCREEN '3000'.

    WHEN 'PFINAL'.
      CLEAR: gv_pesada,
      gv_ntgew_b.

* COMPROBAR QUE NO EXITA YA UNA PESADA FINAL
      READ TABLE gt_datos_1000 INTO ls_datos_1000
      WITH KEY ztipo_pesada = 'F'.
      IF sy-subrc = 0.
        MESSAGE e050 DISPLAY LIKE 'I'.
      ELSE.
*   Recuperar datos a mostrar
        PERFORM recuperar_datos4.

        CALL SCREEN '4000'.

      ENDIF.

    WHEN 'BTN_SAVE'.

* Para que antes pase por los eventos del GRID y se puedan grabar los ultimos datos modificados
* EN ESTE CASO LOS PRECIOS QUE HAYA MODIFICADO EL SUPERVISOR
IF sy-tcode = 'ZMM0004'.
  CALL METHOD grid->check_changed_data.
ENDIF.

** 1.- comprobar que todas las posiciones tengan cantidad
*      PERFORM comprobacion_cantidad.


* 2.-A.- guardar cabecera
      PERFORM guardar_cabecera.

* 2.-b.- guardar posiciones
      PERFORM guardar_posiciones.

      MESSAGE s026.

* inicializar variables
      PERFORM inicializar_vbles.

* MOSTRAR LOG DE ACCIONES

      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BTN_CONT'.

* Para que antes pase por los eventos del GRID y se puedan grabar los ultimos datos modificados
* EN ESTE CASO LOS PRECIOS QUE HAYA MODIFICADO EL SUPERVISOR
IF sy-tcode = 'ZMM0004'.
  CALL METHOD grid->check_changed_data.
ENDIF.

** 1.- comprobar que todas las posiciones tengan cantidad
*      PERFORM comprobacion_cantidad.

* 2.-A.- guardar cabecera
      PERFORM guardar_cabecera.

* 2.-b.- guardar posiciones
      PERFORM guardar_posiciones.

* 3.- CREAR PEDIDO DE COMPRAS
      PERFORM crear_pedido_compras.

* 4.- HACER ENTRADA DE MERCANCIAS
      IF NOT gv_ebeln IS INITIAL.
        PERFORM crear_entrada_mercancias.
      ENDIF.


* inicializar variables
      PERFORM inicializar_vbles.

* MOSTRAR LOG DE ACCIONES
      PERFORM mostrar_log.

      SET SCREEN 0.
      LEAVE SCREEN.


  ENDCASE.
  CLEAR gv_okcode2.

ENDMODULE.                 " USER_COMMAND_2000  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_3000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_3000 OUTPUT.

  SET PF-STATUS '3000'.
  SET TITLEBAR '3000'.


* en caso de modificar pesada se dejan los campos en visualizacion
  IF gv_okcode2 = 'BT_MODIF'.

    LOOP AT SCREEN.
      IF screen-name = 'GV_PESADA'.
        screen-input = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ENDIF.

  IF g_custom_container3 IS INITIAL.
*   Creamos los objetos
    CREATE OBJECT g_custom_container3
      EXPORTING
        container_name = gc_container3.
*    CREATE OBJECT grid
*           EXPORTING i_parent = g_custom_container.
    CREATE OBJECT grid3
      EXPORTING
        i_parent      = g_custom_container3
        i_appl_events = 'X'.

**   Para los eventos
    CREATE OBJECT g_application3.
    SET HANDLER g_application3->handle_data_changed FOR grid3.
    SET HANDLER g_application3->handle_data_changed_finished FOR grid3.
    SET HANDLER g_application3->handle_toolbar
                g_application3->handle_hotspot_click
                g_application3->handle_user_command FOR grid3.

*   Cuando es editable -> para que escuche los eventos: ENTER...
    CALL METHOD grid3->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

*   Recuperar datos a mostrar
    PERFORM recuperar_datos3.
*   Mostramos el ALV
    PERFORM mostrar_datos3.

  ELSE.

** BORRAMOS LA TABLA DEL CONTRATO MARCO AL ACCEDER A LA DYNPRO POR PESADA PARCIAL NUEVA
*    IF gv_okcode2 = 'PPARC' AND gv_okcode3 IS INITIAL.
**      CLEAR gt_pparcial.
**      REFRESH gt_pparcial.
**   Recuperar datos a mostrar
*    PERFORM recuperar_datos3.
*    ENDIF.

**NOS GUARDAMOS LA POSICION DEL CURSO
    CALL METHOD grid3->get_current_cell
      IMPORTING
        es_row_id = gs_celda-row_id
        es_col_id = gs_celda-column_id
        es_row_no = gs_celda-row_no.

    CALL METHOD grid3->refresh_table_display.


**SITUAMOS EL CURSOR
    CALL METHOD grid3->set_current_cell_via_id
      EXPORTING
        is_row_id    = gs_celda-row_id
        is_column_id = gs_celda-column_id
        is_row_no    = gs_celda-row_no.

  ENDIF.

ENDMODULE.                 " STATUS_3000  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_3000 INPUT.

*  DATA: lv_answer TYPE c.



  CASE gv_okcode3.
*   Para volver
    WHEN 'EXIT'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'REG_PES'.

* Para que antes pase por los eventos del GRID y se puedan grabar los ultimos datos modificados
      CALL METHOD grid3->check_changed_data
*  IMPORTING
*    e_valid   =
*  CHANGING
*    c_refresh = 'X'
        .

* REVISAR QUE ESTEN LOS ALMACENES RELLENOS
      PERFORM revisar_almacen USING gv_okcode3.

      CLEAR lv_answer.
      CALL FUNCTION 'SWO_POPUP_TO_CONFIRM'
        EXPORTING
          text   = text-003
          title  = text-004
        IMPORTING
          answer = lv_answer.

      IF lv_answer = 'J'.
* CALCULAMOS EL REPARTO DE PESO
        PERFORM traspasar_datos USING gv_okcode3.

* CREAMOS LOTES
        PERFORM crear_lotes USING gv_okcode3.

        SET SCREEN 0.
        LEAVE SCREEN.

      ENDIF.

  ENDCASE.
  CLEAR gv_okcode3.

ENDMODULE.                 " USER_COMMAND_3000  INPUT

*&---------------------------------------------------------------------*
*&      Module  GV_BVVREL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE gv_bvvrel INPUT.
  DATA: lv_index LIKE sy-tabix.

  IF NOT gv_bvvrel IS INITIAL AND NOT gt_datos_1000[] IS INITIAL.
    IF gv_bvvrel <= 100 OR gv_bvvrel >= 0.
      CLEAR lv_index.
      LOOP AT gt_datos_1000 INTO gs_datos_1000 WHERE NOT ktmng IS INITIAL.
        lv_index = sy-tabix.
        gs_datos_1000-menge = ( gs_datos_1000-ktmng * gv_bvvrel ) / 100.
        gs_datos_1000-menge = gs_datos_1000-ktmng - gs_datos_1000-menge.
        MODIFY gt_datos_1000 FROM gs_datos_1000 INDEX lv_index.
      ENDLOOP.
    ELSE.

    ENDIF.
  ELSE.
    IF gv_bvvrel > 100 OR gv_bvvrel < 0.
      MESSAGE e048.
    ENDIF.
  ENDIF.

ENDMODULE.                 " GV_BVVREL  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_4000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_4000 INPUT.

  CASE gv_okcode4.
*   Para volver
    WHEN 'EXIT'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BTN_PESF'.

      CALL METHOD grid4->check_changed_data
*  IMPORTING
*    e_valid   =
*  CHANGING
*    c_refresh = 'X'
        .

* REVISAR QUE ESTEN LOS ALMACENES RELLENOS
      PERFORM revisar_almacen USING gv_okcode4.

      CLEAR lv_answer.
      CALL FUNCTION 'SWO_POPUP_TO_CONFIRM'
        EXPORTING
          text   = text-007
          title  = text-004
        IMPORTING
          answer = lv_answer.

      IF lv_answer = 'J'.
* CALCULAMOS EL REPARTO DE PESO
        PERFORM traspasar_datos USING gv_okcode4.

* CREAMOS LOTES
        PERFORM crear_lotes USING gv_okcode4.

* Popup para solicitar el peso del camion vacio
        PERFORM peso_camion.

        SET SCREEN 0.
        LEAVE SCREEN.

      ENDIF.

  ENDCASE.
  CLEAR gv_okcode4.

ENDMODULE.                 " USER_COMMAND_4000  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_4000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_4000 OUTPUT.

  SET PF-STATUS '4000'.
  SET TITLEBAR '4000'.

* en caso de modificar pesada se dejan los campos en visualizacion
  IF gv_okcode2 = 'BT_MODIF'.
    LOOP AT SCREEN.
      IF screen-name = 'GV_PESADA'.
        screen-input = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF g_custom_container4 IS INITIAL.
*   Creamos los objetos
    CREATE OBJECT g_custom_container4
      EXPORTING
        container_name = gc_container4.
*    CREATE OBJECT grid
*           EXPORTING i_parent = g_custom_container.
    CREATE OBJECT grid4
      EXPORTING
        i_parent      = g_custom_container4
        i_appl_events = 'X'.

**   Para los eventos
    CREATE OBJECT g_application4.
    SET HANDLER g_application4->handle_data_changed FOR grid4.
    SET HANDLER g_application4->handle_data_changed_finished FOR grid4.
    SET HANDLER g_application4->handle_toolbar
                g_application4->handle_hotspot_click
                g_application4->handle_user_command FOR grid4.

*   Cuando es editable -> para que escuche los eventos: ENTER...
    CALL METHOD grid4->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

*   Recuperar datos a mostrar
    PERFORM recuperar_datos4.
*   Mostramos el ALV
    PERFORM mostrar_datos4.

  ELSE.

** BORRAMOS LA TABLA DEL CONTRATO MARCO AL ACCEDER A LA DYNPRO POR PESADA PARCIAL NUEVA
*    IF gv_okcode2 = 'PPARC' AND gv_okcode3 IS INITIAL.
**      CLEAR gt_pparcial.
**      REFRESH gt_pparcial.
**   Recuperar datos a mostrar
*    PERFORM recuperar_datos3.
*    ENDIF.

**NOS GUARDAMOS LA POSICION DEL CURSO
    CALL METHOD grid4->get_current_cell
      IMPORTING
        es_row_id = gs_celda-row_id
        es_col_id = gs_celda-column_id
        es_row_no = gs_celda-row_no.

    CALL METHOD grid4->refresh_table_display.


**SITUAMOS EL CURSOR
    CALL METHOD grid4->set_current_cell_via_id
      EXPORTING
        is_row_id    = gs_celda-row_id
        is_column_id = gs_celda-column_id
        is_row_no    = gs_celda-row_no.

  ENDIF.

ENDMODULE.                 " STATUS_4000  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  GV_NTGEW  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE gv_ntgew INPUT.

  PERFORM repartir_peso_camion.


ENDMODULE.                 " GV_NTGEW  INPUT

*&---------------------------------------------------------------------*
*&      Module  GV_TRANSP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE gv_transp INPUT.
  DATA: ls_a903 TYPE a903.

  IF NOT gv_lifnr IS INITIAL AND gv_kbetr IS INITIAL.

    CLEAR lv_lifnr.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_lifnr
      IMPORTING
        output = lv_lifnr.


    CLEAR ls_a903.
    SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_a903
    FROM a903
    INNER JOIN lfa1 ON lfa1~lifnr = a903~lifnr
                    AND lfa1~regio = a903~regio
    WHERE a903~kschl = 'ZTTR'
    AND a903~lifnr = lv_lifnr
    AND datab <= sy-datum
    AND datbi >= sy-datum.
    IF sy-subrc = 0.
      SELECT SINGLE kbetr konwa INTO (gv_kbetr, gv_konwa)
      FROM konp
      WHERE knumh = ls_a903-knumh.
    ENDIF.


  ENDIF.

ENDMODULE.                 " GV_TRANSP  INPUT

*&---------------------------------------------------------------------*
*&      Module  GV_PESADA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE gv_pesada INPUT.

*  DATA ls_datos_1000 LIKE LINE OF pesadas.
  IF gv_okcode2 <> 'BT_MODIF'.

    CLEAR ls_datos_1000.
    READ TABLE gt_datos_1000 INTO ls_datos_1000
    WITH KEY znum_pesada = gv_pesada.
    IF sy-subrc = 0.
      MESSAGE e049 WITH gv_pesada.
    ENDIF.

  ENDIF.

ENDMODULE.                 " GV_PESADA  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_3000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_3000 INPUT.

  SET SCREEN 0.
  LEAVE SCREEN.

ENDMODULE.                 " EXIT_3000  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_4000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_4000 INPUT.

  SET SCREEN 0.
  LEAVE SCREEN.

ENDMODULE.                 " EXIT_4000  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0500  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0500 OUTPUT.

  SET PF-STATUS '0500'.
  SET TITLEBAR '0500'.

  CALL SELECTION-SCREEN 0501 STARTING AT 5 5.

ENDMODULE.                 " STATUS_0500  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0600  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0600 OUTPUT.

  SET PF-STATUS '0600'.
  SET TITLEBAR '0600'.

  CALL SELECTION-SCREEN 0501 STARTING AT 5 5.

  IF g_custom_container6 IS INITIAL.
*   Creamos los objetos
    CREATE OBJECT g_custom_container6
      EXPORTING
        container_name = gc_container6.
*    CREATE OBJECT grid
*           EXPORTING i_parent = g_custom_container.
    CREATE OBJECT grid6
      EXPORTING
        i_parent      = g_custom_container6
        i_appl_events = 'X'.

**   Para los eventos
    CREATE OBJECT g_application6.
    SET HANDLER g_application6->handle_data_changed FOR grid6.
    SET HANDLER g_application6->handle_data_changed_finished FOR grid6.
    SET HANDLER g_application6->handle_toolbar
                g_application6->handle_hotspot_click
                g_application6->handle_user_command FOR grid6.

*   Cuando es editable -> para que escuche los eventos: ENTER...
    CALL METHOD grid6->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

*   Recuperar datos a mostrar
    PERFORM recuperar_datos6.
*   Mostramos el ALV
    PERFORM mostrar_datos6.

  ELSE.

**NOS GUARDAMOS LA POSICION DEL CURSO
    CALL METHOD grid6->get_current_cell
      IMPORTING
        es_row_id = gs_celda-row_id
        es_col_id = gs_celda-column_id
        es_row_no = gs_celda-row_no.

    CALL METHOD grid6->refresh_table_display.


**SITUAMOS EL CURSOR
    CALL METHOD grid6->set_current_cell_via_id
      EXPORTING
        is_row_id    = gs_celda-row_id
        is_column_id = gs_celda-column_id
        is_row_no    = gs_celda-row_no.

  ENDIF.

ENDMODULE.                 " STATUS_0600  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0600  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0600 INPUT.

  CASE gv_okcode600.
*   Para volver
    WHEN 'EXIT'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

  ENDCASE.
  CLEAR gv_okcode600.

ENDMODULE.                 " USER_COMMAND_0600  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0500 INPUT.

  CASE gv_okcode500.
*   Para volver
    WHEN 'EXIT'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

  ENDCASE.
  CLEAR gv_okcode500.

ENDMODULE.                 " USER_COMMAND_0500  INPUT
