***********************************************************************
* TIPO : LISTADO
* TITULO : Carga pedidos de compra por excel
* DESCRIPCION : Carga pedidos de compra por excel
*
* AUTOR: Andrés Picazo                                FECHA: 20/09/2024
* ANALISTA: Francisco Cardona
*
***********************************************************************
REPORT zrmm0033.

*------TABLAS/ESTRUCTURAS----------------------------------------------*

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check   TYPE xfeld,
             lights  TYPE zico_estado_mensaje,
             id      TYPE string,
             bsart   TYPE ekko-bsart,
             bedat   TYPE ekko-bedat,
             lifnr   TYPE lifnr,
             reswk   TYPE ekko-reswk,
             name1   TYPE lfa1-lifnr,
             ekorg   TYPE ekko-ekorg,
             ekgrp   TYPE ekko-ekgrp,
             bukrs   TYPE ekko-bukrs,
             ebelp   TYPE ekpo-ebelp,
             matnr   TYPE ekpo-matnr,
             maktx   TYPE maktx,
             knttp   TYPE ekpo-knttp,
             epstp   TYPE mepo1211-epstp,
             pstyp   TYPE ekpo-pstyp,
             menge   TYPE ekpo-menge,
             meins   TYPE ekpo-meins,
             eindt   type eket-eindt,
             werks   TYPE ekpo-werks,
             lgort   TYPE ekpo-lgort,
             reslo   TYPE ekpo-reslo,
             vbeln   TYPE ekkn-vbeln,
             vbelp   TYPE ekkn-vbelp,
             ebeln   TYPE ekko-ebeln,
             message TYPE bapi_msg,
             ok      TYPE xfeld,
           END OF t_listado,
           tt_listado TYPE TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
      cargar_fichero,
      crear_pedido
        IMPORTING
          id TYPE string.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME TITLE text-sel.
PARAMETERS p_file TYPE localfile OBLIGATORY.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK 001.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.

  METHOD handle_user_command.
    check_ucomm_sel = 'CREAR'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'CREAR'.
        DATA i_id TYPE TABLE OF string.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          IF <listado>-ok IS INITIAL.
            MESSAGE 'No seleccione posiciones con errores o ya creadas' TYPE 'I'.
            RETURN.
          ENDIF."
          COLLECT <listado>-id INTO i_id.
        ENDLOOP.
        LOOP AT i_id ASSIGNING FIELD-SYMBOL(<id>).
          o_prog->crear_pedido( <id> ).
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    cargar_fichero( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD cargar_fichero.
    TYPES: BEGIN OF t_fichero,
             id    TYPE string,
             bsart TYPE ekko-bsart,
             sol   TYPE string,
             bedat TYPE ekko-bedat,
             ekorg TYPE ekko-ekorg,
             ekgrp TYPE ekko-ekgrp,
             bukrs TYPE ekko-bukrs,
             matnr TYPE ekpo-matnr,
             knttp TYPE ekpo-knttp,
             epstp TYPE char1,
             menge TYPE ekpo-menge,
             eindt   type eket-eindt,
             werks TYPE ekpo-werks,
             lgort TYPE ekpo-lgort,
             reslo TYPE ekpo-reslo,
             vbeln TYPE ekkn-vbeln,
             vbelp TYPE ekkn-vbelp,
           END OF t_fichero.

    DATA: o_excel   TYPE REF TO zcl_ap_abap2xls,
          i_fichero TYPE TABLE OF t_fichero,
          i_errores TYPE table_of_strings,
          l_id      TYPE string,
          l_ebelp   TYPE string,
          l_row     TYPE i,
          l_listado TYPE t_listado,
          r_lifnr   TYPE RANGE OF lifnr,
          l_msg     TYPE bapi_msg.

    FIELD-SYMBOLS: <fichero> TYPE t_fichero,
                   <listado> TYPE t_listado.

    o_prog->sgpi_texto( 'Importando fichero'(imf) ).
    o_excel = NEW #( ).
    o_excel->lee_fichero( EXPORTING fichero = p_file
*                                    hoja    = p_hojm_1
                                    get_datos = 'X'
                                    huge      = 'X'
                                    mostrar_error = 'X'
                          IMPORTING datos   = i_fichero
                                    errores = i_errores ).

    o_prog->o_sgpi->get_filas_tabla( i_fichero[] ).

    LOOP AT i_fichero ASSIGNING <fichero> WHERE NOT id IS INITIAL.
      IF l_id <> <fichero>-id.
        CLEAR l_ebelp.
        l_id = <fichero>-id.
      ENDIF.
      l_ebelp = l_ebelp + 1.
      l_row = sy-tabix + 1.
      CLEAR l_listado.
      o_prog->o_sgpi->porcentaje( texto = 'Procesando fichero'(prf) cantidad = 1000 ).
      MOVE-CORRESPONDING <fichero> TO l_listado.
      l_listado-message = o_excel->get_msg( row = l_row ).

      SELECT SINGLE umlif FROM t161
        INTO @DATA(l_umlif)
       WHERE bstyp = 'F'
         AND bsart = @<fichero>-bsart.
      IF sy-subrc = 0.
        IF l_umlif = 'X'.
          l_listado-reswk = <fichero>-sol.
          SELECT SINGLE name1 FROM t001w
            INTO l_listado-name1
           WHERE werks = l_listado-reswk.
          IF sy-subrc <> 0.
            __add_lista l_listado-message 'Centro suministrador incorrecto'.
          ENDIF.
        ELSE.
          l_listado-lifnr = <fichero>-sol.
          __poner_ceros l_listado-lifnr.
          l_listado-name1 = get( tabla = 'LFA1' clave = l_listado-lifnr ).
          IF l_listado-name1 IS INITIAL.
            __add_lista l_listado-message 'Proveedor incorrecto'.
          ENDIF.
        ENDIF.
      ELSE.
        __add_lista l_listado-message 'Tipo de pedido incorrecto'.
      ENDIF.

      l_listado-maktx = get(  tabla = 'MAKT' clave = l_listado-matnr ).
      IF l_listado-maktx IS INITIAL.
        __add_lista l_listado-message 'Material incorrecto'.
      ELSE.
        SELECT SINGLE bstme FROM mara
        INTO l_listado-meins
       WHERE matnr = l_listado-matnr.
        IF l_listado-meins IS INITIAL.
          SELECT SINGLE meins FROM mara
          INTO l_listado-meins
         WHERE matnr = l_listado-matnr.
        ENDIF.
      ENDIF.

      IF NOT l_listado-vbeln IS INITIAL.
        __poner_ceros: l_listado-vbeln, l_listado-vbelp.
        SELECT SINGLE vbeln FROM vbap
          INTO l_listado-vbeln
         WHERE vbeln = l_listado-vbeln.
        IF sy-subrc <> 0.
          __add_lista l_listado-message 'Pedido de cliente incorrecto'.
        ENDIF.
      ENDIF.

      IF NOT l_listado-epstp IS INITIAL.
        SELECT SINGLE pstyp FROM t163y
          INTO l_listado-pstyp
         WHERE spras = sy-langu
           AND epstp = l_listado-epstp.
        IF sy-subrc <> 0.
          __add_lista l_listado-message 'Tipo de posición incorrecto'.
        ENDIF.
      ENDIF.
      l_listado-ebelp = l_ebelp.

      IF NOT l_listado-message IS INITIAL.
        DATA(l_icono) = icon_red_light.
      ELSE.
        IF NOT l_listado-lifnr IS INITIAL.
          r_lifnr = VALUE #(  ( option = 'EQ' sign = 'I' low = l_listado-lifnr ) ).
        ELSE.
          CLEAR r_lifnr.
        ENDIF.

        SELECT SINGLE ekko~ebeln FROM ekko JOIN ekpo ON ekko~ebeln = ekpo~ebeln
                                           JOIN eket ON eket~ebeln = ekpo~ebeln
                                                    and eket~ebelp = ekpo~ebelp
          INTO l_listado-ebeln
         WHERE bsart       = l_listado-bsart
           AND lifnr      IN r_lifnr
           AND reswk       = l_listado-reswk
           AND ekko~bedat  = l_listado-bedat
           AND ekorg       = l_listado-ekorg
           AND ekgrp       = l_listado-ekgrp
           AND ekko~bukrs  = l_listado-bukrs
           AND matnr       = l_listado-matnr
           AND knttp       = l_listado-knttp
           AND pstyp       = l_listado-pstyp
           AND ekpo~menge  = l_listado-menge
           AND meins       = l_listado-meins
           and eindt       = l_listado-eindt
           AND ekpo~loekz  = ''.
        IF sy-subrc = 0.

          l_icono = icon_green_light.
          l_listado-message = 'Ya se creó el pedido'.
        ELSE.
          l_listado-ok    = 'X'.
          l_listado-check = 'X'.
          l_icono = icon_yellow_light.
        ENDIF.
      ENDIF.

      set_status_list( EXPORTING message = l_listado-message icono = l_icono CHANGING list = l_listado ).

      APPEND l_listado TO i_listado.
    ENDLOOP.
  ENDMETHOD.                    " seleccionar_datos

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Crear pedidos'  icon = icon_execute_object ucomm = 'CREAR' ).
*    o_alv->add_button( button = 'F01' text = 'Excel'  icon = icon_xls ).

    o_alv->set_layout( p_vari ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_top_of_page( ).

    o_alv->set_field_hotspot( campo = 'EBELN' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,OK' ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD crear_pedido.
    DATA: ekko   TYPE ekko,
          ekpo   TYPE ekpo,
          eket   TYPE eket,
          ekkn   TYPE ekkn,
          i_ekpo TYPE TABLE OF ekpo,
          i_eket TYPE TABLE OF eket,
          i_ekkn TYPE TABLE OF ekkn.


    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE id = id.
      IF ekko IS INITIAL.
        MOVE-CORRESPONDING <listado> TO ekko.
      ENDIF.

      CLEAR: ekpo, eket.
      MOVE-CORRESPONDING <listado> TO ekpo.
      APPEND ekpo TO i_ekpo.
      MOVE-CORRESPONDING <listado> TO eket.
      APPEND eket TO i_eket.
      IF NOT <listado>-vbeln IS INITIAL.
        MOVE-CORRESPONDING <listado> TO ekkn.
        APPEND ekkn TO i_ekkn.
      ENDIF.
    ENDLOOP.

    DATA(o_ped) = NEW zcl_ap_pedido_mm(  ).
    DATA(l_ebeln) = o_ped->crear_pedido( ekko = ekko
                                         i_ekpo = i_ekpo
                                         i_ekkn = i_ekkn
                                         i_eket = i_eket
                                         o_log  = o_log ).
    IF NOT l_ebeln IS INITIAL.
      LOOP AT i_listado ASSIGNING <listado> WHERE id = id.
        <listado>-ebeln = l_ebeln.
        <listado>-lights = icon_green_light.
        <listado>-ok = 'X'.
      ENDLOOP.
    ELSE.
      LOOP AT i_listado ASSIGNING <listado> WHERE id = id.
        <listado>-message = o_ped->message.
        <listado>-lights = icon_red_light.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status   = 'INICIO_DYN' status_prog  = 'ZAP_STATUS'
                  no_param = 'X'          guardar_logz = 'X' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status           = 'STANDARD_ALV_DYN' status_prog        = 'ZAP_STATUS'
                  top_of_page_auto = 'X'                top_of_page_titulo = 'X'
                  o_dev = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  o_prog->at_selection( ).

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  p_file = zcl_ap_ficheros=>popup_select_fichero( file_filter = zcl_ap_ficheros=>c_filtro_xls ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
