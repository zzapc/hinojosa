*&---------------------------------------------------------------------*
*&  Include           ZRMM0022_F00
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GENERAR_MATNR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_MTART  text
*      -->P_P_MATKL  text
*      -->P_T_GRAMA  text
*      -->P_T_ANCHO  text
*      -->P_T_LARGO  text
*      -->P_P_IMPRE  text
*      <--P_MARA_MATNR  text
*----------------------------------------------------------------------*
FORM generar_matnr  USING    p_mtart
                             p_matkl
                             p_grama
                             p_ancho
                             p_largo
                             p_impre
                    CHANGING p_matnr.

  DATA: lv_matnr TYPE matnr.

  CLEAR p_matnr.

  IF p_mtart = 'ZPAP' OR p_mtart EQ 'ZCAB'.
    CONCATENATE p_matkl(5)
                p_grama
                p_ancho
           INTO p_matnr.

    CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
      EXPORTING
        input        = p_matnr
      IMPORTING
        output       = p_matnr
      EXCEPTIONS
        length_error = 1
        OTHERS       = 2.

    SELECT SINGLE matnr INTO lv_matnr
      FROM mara
      WHERE matnr = p_matnr.

    IF sy-subrc = 0.
      MESSAGE s389(m3) WITH p_matnr.
    ENDIF.
  ENDIF.

  IF p_mtart  EQ 'ZCAH'.
    CONCATENATE '0' p_matkl p_grama p_ancho p_largo INTO p_matnr.

    SELECT SINGLE matnr INTO lv_matnr
      FROM mara
      WHERE matkl     EQ p_matkl
      AND   lvorm     NE 'X'
      AND   mtart     EQ p_mtart
      AND   zzgramaje EQ p_grama
      AND   zzancho   EQ p_ancho
      AND   zzlargo   EQ p_largo.
    IF sy-subrc = 0.
      MESSAGE s001(zmm).
    ENDIF.
  ELSEIF p_mtart  EQ 'ZROL'.
    SELECT SINGLE matnr INTO lv_matnr
      FROM mara
      WHERE matkl     EQ p_matkl
      AND   lvorm     NE 'X'
      AND   mtart     EQ p_mtart
      AND   zzgramaje EQ p_grama
      AND   zzancho   EQ p_ancho.
    IF sy-subrc = 0.
      MESSAGE s001(zmm).
    ENDIF.
  ELSEIF p_mtart EQ 'ZPIM'.
    CONCATENATE 'P'
                p_impre
                p_grama
                p_ancho
           INTO p_matnr.
    SELECT SINGLE @abap_true
      FROM mara
      WHERE matnr EQ @p_matnr
      INTO @DATA(result).
    IF sy-subrc = 0.
      MESSAGE s148(zmm) WITH p_matnr.
    ENDIF.
  ELSEIF p_mtart EQ 'ZPIH'.
    CONCATENATE 'P'
                p_impre
                p_grama
                p_ancho
                p_largo
           INTO p_matnr.
    SELECT SINGLE @abap_true
      FROM mara
      WHERE matnr EQ @p_matnr
      INTO @DATA(result2).
    IF sy-subrc = 0.
      MESSAGE s148(zmm) WITH p_matnr.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  UM_ALTERNATIVA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM um_alternativa .
  DATA ls_meinh TYPE smeinh.
  DATA ls_meinh_org TYPE smeinh.

  IF NOT t_mara-zzgramaje IS INITIAL AND
      NOT t_mara-zzancho IS INITIAL AND
       t_mara-zzlargo IS INITIAL.
    CLEAR ls_meinh.
*XM = 1000g/gramaje/ancho en M
    TRY.
        unitsofmeasure-denominatr = 1000000 / t_mara-zzgramaje / ( t_mara-zzancho / 1000 ).
        unitsofmeasure-numerator = 1000.
        unitsofmeasure-alt_unit = unitsofmeasurex-alt_unit = 'M'.

        MOVE 'X' TO:  unitsofmeasurex-denominatr,
                      unitsofmeasurex-numerator.

        APPEND: unitsofmeasure, unitsofmeasurex.
      CATCH cx_sy_arithmetic_overflow.
    ENDTRY.
  ELSEIF NOT t_mara-zzgramaje IS INITIAL AND " cvivo - Proyecto WM CB
     NOT t_mara-zzancho IS INITIAL AND
     NOT t_mara-zzlargo IS INITIAL.
    CLEAR ls_meinh.
* KG = 1000 UDS * ancho m * gramaje kg/m2 * largo m
    TRY.
        unitsofmeasure-denominatr = 1000 / ( ( t_mara-zzancho / 1000 ) * ( t_mara-zzgramaje / 1000 ) * ( t_mara-zzlargo / 1000 ) ).
        unitsofmeasure-numerator = 1000.
        unitsofmeasure-alt_unit = unitsofmeasurex-alt_unit = 'ST'. " ST es nombre interno de UN

        MOVE 'X' TO:  unitsofmeasurex-denominatr,
                      unitsofmeasurex-numerator.

        APPEND: unitsofmeasure, unitsofmeasurex.
      CATCH cx_sy_arithmetic_overflow.
    ENDTRY.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0346   text
*      -->P_0347   text
*      -->P_0348   text
*----------------------------------------------------------------------*
FORM crear_material  USING p_centro
                           p_canal
                           p_lgnum
                           p_mpop.

  CLEAR:  headdata-basic_view,
          headdata-sales_view,
          headdata-purchase_view,
          headdata-mrp_view,
          headdata-forecast_view,
          headdata-work_sched_view,
          headdata-warehouse_view,
          headdata-account_view,
          headdata-cost_view.

  MOVE 'X' TO:  headdata-basic_view,
                headdata-purchase_view,
                headdata-mrp_view,
                headdata-work_sched_view,
                headdata-account_view,
                headdata-cost_view.

  MOVE p_centro TO: bapi_marc-plant,
                    bapi_marcx-plant,
                    bapi_mbew-val_area,
                    bapi_mbewx-val_area,
                    bapi_mard-plant,
                    bapi_mardx-plant.

  MOVE '1000' TO: bapi_mard-stge_loc,
                  bapi_mardx-stge_loc.

  IF p_mpop NE space.
    MOVE 'X' TO:      headdata-forecast_view.
    MOVE p_centro TO: bapi_mpop-plant,
                      bapi_mpopx-plant.

* cvivo - 21/01/20 - El pronóstico hay que forzar desde aquí la creación
    CLEAR: maru, mpop.
    mpop-werks = p_centro.
    MOVE-CORRESPONDING t_mara TO maru.

    CALL FUNCTION 'ZMM_PROPUESTA_CAMPOS_MAT'
      EXPORTING
        action = 'C'
      CHANGING
        mara   = maru
        mpop   = mpop.

    IF mpop-prmod NE space.
      bapi_mpop-fore_model = mpop-prmod.
      bapi_mpopx-fore_model = 'X'.
    ENDIF.
  ENDIF.

  IF p_canal NE space.
    MOVE 'X' TO headdata-sales_view.

    MOVE p_canal TO:  bapi_mvke-distr_chan,
                      bapi_mvkex-distr_chan.
    MOVE p_centro TO: bapi_mvke-sales_org,
                      bapi_mvkex-sales_org.
  ENDIF.

  IF p_lgnum NE space.
    MOVE 'X' TO headdata-warehouse_view.

    MOVE p_lgnum TO:  bapi_mlgn-whse_no,
                      bapi_mlgnx-whse_no.
  ENDIF.

  PERFORM um_alternativa.

  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      headdata             = headdata
      storagelocationdata  = bapi_mard
      storagelocationdatax = bapi_mardx
      clientdata           = bapi_mara
      clientdatax          = bapi_marax
      plantdata            = bapi_marc
      plantdatax           = bapi_marcx
      forecastparameters   = bapi_mpop
      forecastparametersx  = bapi_mpopx
      salesdata            = bapi_mvke
      salesdatax           = bapi_mvkex
      valuationdata        = bapi_mbew
      valuationdatax       = bapi_mbewx
      warehousenumberdata  = bapi_mlgn
      warehousenumberdatax = bapi_mlgnx
    IMPORTING
      return               = return
    TABLES
      materialdescription  = materialdescription[]
      unitsofmeasure       = unitsofmeasure[]
      unitsofmeasurex      = unitsofmeasurex[]
      extensionin          = extensionin[]
      extensioninx         = extensioninx[].

  IF return-type NE 'E' AND sy-subrc EQ 0.
    COMMIT WORK AND WAIT.
  ELSE.
    ROLLBACK WORK.
  ENDIF.
  APPEND return TO t_return.

ENDFORM.
