*&---------------------------------------------------------------------*
*&  Include           ZRMM0003_FORM
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  BUSCAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM buscar_datos .

  DATA: lv_index LIKE sy-tabix.

  CLEAR lv_index.
  CLEAR gt_datos.
  REFRESH gt_datos.

  IF p_nstock IS INITIAL.

*    SELECT mch1~matnr makt~maktx mch1~charg mch1~lifnr lfa1~name1 mchb~clabs mara~meins
*           mch1~lwedt mchb~lgort t001l~lgobe mch1~licha mchb~werks
*      APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
*    FROM mch1
*      INNER JOIN mchb ON mch1~matnr = mchb~matnr
*                     AND mch1~charg = mchb~charg
*      INNER JOIN makt ON mch1~matnr = makt~matnr
*      INNER JOIN lfa1 ON mch1~lifnr = lfa1~lifnr
*      INNER JOIN mara ON mch1~matnr = mara~matnr
*      INNER JOIN t001l ON mchb~werks = t001l~werks
*                       AND  mchb~lgort = t001l~lgort
*    WHERE mch1~matnr IN s_matnr
*    AND mch1~charg IN s_charg
*    AND mchb~werks IN s_werks
*    AND mchb~lgort IN s_lgort
*    AND mchb~clabs > 0
*    AND makt~spras = sy-langu
*    AND mara~mtart = cs_mtart.


    SELECT mch1~matnr makt~maktx mch1~charg mch1~lifnr mchb~clabs mara~meins
           mch1~lwedt mchb~lgort t001l~lgobe mch1~licha mchb~werks
      APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
    FROM mch1
      INNER JOIN mchb ON mch1~matnr = mchb~matnr
                     AND mch1~charg = mchb~charg
      INNER JOIN makt ON mch1~matnr = makt~matnr
*      INNER JOIN lfa1 ON mch1~lifnr = lfa1~lifnr
      INNER JOIN mara ON mch1~matnr = mara~matnr
      INNER JOIN t001l ON mchb~werks = t001l~werks
                       AND  mchb~lgort = t001l~lgort
    WHERE mch1~matnr IN s_matnr
    AND mch1~charg IN s_charg
    AND mchb~werks IN s_werks
    AND mchb~lgort IN s_lgort
    AND mchb~clabs > 0
    AND makt~spras = sy-langu
* GST - 25/03/2015 ->
*    AND mara~mtart = cs_mtart.
    AND mara~mtart = gv_mtart.
* GST - 25/03/2015 <-

    LOOP AT gt_datos INTO gs_datos.

      lv_index = sy-tabix.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = gs_datos-lifnr
        IMPORTING
          output = gs_datos-lifnr.

      SELECT SINGLE name1 INTO gs_datos-name1
      FROM lfa1
      WHERE lifnr = gs_datos-lifnr.

      MODIFY gt_datos FROM gs_datos INDEX lv_index.
    ENDLOOP.


  ELSEIF NOT  p_nstock IS INITIAL.

*    SELECT mch1~matnr makt~maktx mch1~charg mch1~lifnr lfa1~name1 mchb~clabs mara~meins
*           mch1~lwedt mchb~lgort t001l~lgobe mch1~licha mchb~werks
*    APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
*    FROM mch1
*  INNER JOIN mchb ON mch1~matnr = mchb~matnr
*                 AND mch1~charg = mchb~charg
*  INNER JOIN makt ON mch1~matnr = makt~matnr
*  INNER JOIN lfa1 ON mch1~lifnr = lfa1~lifnr
*  INNER JOIN mara ON mch1~matnr = mara~matnr
*  INNER JOIN t001l ON mchb~werks = t001l~werks
*                    AND mchb~lgort = t001l~lgort
*WHERE mch1~matnr IN s_matnr
*AND mch1~charg IN s_charg
*AND mchb~werks IN s_werks
*AND mchb~lgort IN s_lgort
**    AND mchb~clabs > 0
*AND makt~spras = sy-langu
*AND mara~mtart = cs_mtart.

    SELECT mch1~matnr makt~maktx mch1~charg mch1~lifnr  mchb~clabs mara~meins
           mch1~lwedt mchb~lgort t001l~lgobe mch1~licha mchb~werks
    APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
    FROM mch1
  INNER JOIN mchb ON mch1~matnr = mchb~matnr
                 AND mch1~charg = mchb~charg
  INNER JOIN makt ON mch1~matnr = makt~matnr
*  INNER JOIN lfa1 ON mch1~lifnr = lfa1~lifnr
  INNER JOIN mara ON mch1~matnr = mara~matnr
  INNER JOIN t001l ON mchb~werks = t001l~werks
                    AND mchb~lgort = t001l~lgort
WHERE mch1~matnr IN s_matnr
AND mch1~charg IN s_charg
AND mchb~werks IN s_werks
AND mchb~lgort IN s_lgort
*    AND mchb~clabs > 0
AND makt~spras = sy-langu
* GST - 25/03/2015 ->
*AND mara~mtart = cs_mtart.
AND mara~mtart = gv_mtart.
* GST - 25/03/2015 <-


    LOOP AT gt_datos INTO gs_datos.

      lv_index = sy-tabix.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = gs_datos-lifnr
        IMPORTING
          output = gs_datos-lifnr.

      SELECT SINGLE name1 INTO gs_datos-name1
      FROM lfa1
      WHERE lifnr = gs_datos-lifnr.

      MODIFY gt_datos FROM gs_datos INDEX lv_index.
    ENDLOOP.

  ENDIF.

ENDFORM.                    " BUSCAR_DATOS

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_POPUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_popup .

*  DATA go_alv TYPE REF TO cl_salv_table.
*
*  TRY.
*      cl_salv_table=>factory(
*        IMPORTING
*          r_salv_table = go_alv
*        CHANGING
*          t_table      = gt_datos[] ).
*    CATCH cx_salv_msg.
*  ENDTRY.
*
*
*  DATA: lr_functions TYPE REF TO cl_salv_functions_list.
*  lr_functions = go_alv->get_functions( ).
*  lr_functions->set_all( 'X' ).
*
*
*  IF go_alv IS BOUND.
**    IF i_popup = 'X'.
*    go_alv->set_screen_popup(
*      start_column = 25 "i_start_column
*      end_column  = 150 "i_end_column
*      start_line  = 6 "i_start_line
*      end_line    = 20 ). "i_end_line ).
*
**    ENDIF.
*
*  go_alv->display( ).
*
*  ENDIF.


  DATA:
    go_popup  TYPE REF TO cl_reca_gui_f4_popup,
    gf_choice TYPE        flag.


  CALL METHOD cl_reca_gui_f4_popup=>factory_grid
    EXPORTING
      it_f4value     = gt_datos[]
      if_multi       = abap_true
      id_title       = text-001
    RECEIVING
      ro_f4_instance = go_popup.



  CALL METHOD go_popup->display
    EXPORTING
      id_start_column = 25 "i_start_column
      id_start_line   = 6  "i_start_line
      id_end_column   = 150 "i_end_column
      id_end_line     = 20 "i_end_line
    IMPORTING
      et_result       = gt_datos[]
      ef_cancelled    = gf_choice.

  IF gf_choice IS INITIAL.
    IF NOT gt_datos[] IS INITIAL.
*      PERFORM imprimir_etiqueta.
*      PERFORM imprimir_etiqueta_smarforms.
      PERFORM imprimir_etiqueta_multiples.
    ELSE.
      MESSAGE i056(zmm)." DISPLAY LIKE 'I'.
    ENDIF.

  ENDIF.

ENDFORM.                    " MOSTRAR_POPUP

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta .

  DATA: lf_formname TYPE fpname VALUE 'ZAF_ETIQUETA_GENERICA_A5'.
*DATA: lf_formname TYPE fpname VALUE 'ZAF_ETIQUETA_GENERICA'.
  DATA: lf_fm_name TYPE rs38l_fnam.
  DATA: ls_eti TYPE zsmm_etiqueta_generica.
  DATA ls_doc_param TYPE sfpdocparams.
  DATA: lv_matnr TYPE matnr.
* IMPRESION DE ETIQUETAS
  DATA: gs_output_param TYPE sfpoutputparams.

  LOOP AT gt_datos INTO gs_datos.

* RELLENAR LA ESTRUCTURA A IMPRIMIR
    CLEAR ls_eti.
    ls_eti-matnr = gs_datos-matnr.
    ls_eti-maktx = gs_datos-maktx.
    ls_eti-charg = gs_datos-charg.
    ls_eti-clabs = gs_datos-clabs.
    ls_eti-meins = gs_datos-meins.
    ls_eti-lifnr = gs_datos-lifnr.
    ls_eti-name1 = gs_datos-name1.
    ls_eti-lwedt = gs_datos-lwedt.
    ls_eti-lgort = gs_datos-lgort.
*  ls_eti-licha = .

    SELECT SINGLE lgobe INTO ls_eti-lgobe
    FROM t001l
    WHERE werks = gs_datos-werks
    AND lgort = gs_datos-lgort.

    CLEAR lv_matnr.
*    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
*      EXPORTING
*        input  = gs_datos-matnr
*      IMPORTING
*        output = gs_datos-matnr.

    CONCATENATE gs_datos-matnr gs_datos-charg INTO ls_eti-cod_barras.

    IF gs_output_param IS INITIAL.
      CLEAR gs_output_param.
      gs_output_param-dest = 'LP01'.
      gs_output_param-reqimm = 'X'.

    ELSE.
      gs_output_param-nodialog = 'X'.
    ENDIF.


    CALL FUNCTION 'FP_JOB_OPEN'
      CHANGING
        ie_outputparams = gs_output_param
      EXCEPTIONS
        cancel          = 1
        usage_error     = 2
        system_error    = 3
        internal_error  = 4
        OTHERS          = 5.

*&---- Get the name of the generated function module
    CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
      EXPORTING
        i_name     = lf_formname
      IMPORTING
        e_funcname = lf_fm_name.


    CALL FUNCTION lf_fm_name
      EXPORTING
        /1bcdwb/docparams = ls_doc_param
        ls_eti            = ls_eti
* IMPORTING
*       /1BCDWB/FORMOUTPUT       =
      EXCEPTIONS
        usage_error       = 1
        system_error      = 2
        internal_error    = 3
        OTHERS            = 4.

* Close spool job
    CALL FUNCTION 'FP_JOB_CLOSE'
*   IMPORTING
*     E_RESULT             = result
      EXCEPTIONS
        usage_error    = 1
        system_error   = 2
        internal_error = 3
        OTHERS         = 4.

  ENDLOOP.

ENDFORM.                    " IMPRIMIR_ETIQUETA

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA_SMARFORMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta_smarforms .

  DATA: lf_formname TYPE fpname VALUE 'ZSF_ETIQUETA_GENERICA_A5'.
  DATA: lf_fm_name TYPE rs38l_fnam.
  DATA: ls_eti TYPE zsmm_etiqueta_generica.
  DATA: lv_matnr TYPE matnr.

  DATA: ls_parameters TYPE ssfctrlop,
        ls_options    TYPE ssfcompop.

  LOOP AT gt_datos INTO gs_datos.

* RELLENAR LA ESTRUCTURA A IMPRIMIR
    CLEAR ls_eti.
    ls_eti-matnr = gs_datos-matnr.
    ls_eti-maktx = gs_datos-maktx.
    ls_eti-charg = gs_datos-charg.
    ls_eti-clabs = gs_datos-clabs.
    ls_eti-meins = gs_datos-meins.
    ls_eti-lifnr = gs_datos-lifnr.
    ls_eti-name1 = gs_datos-name1.
    ls_eti-lwedt = gs_datos-lwedt.
    ls_eti-lgort = gs_datos-lgort.
*  ls_eti-licha = .

    SELECT SINGLE lgobe INTO ls_eti-lgobe
    FROM t001l
    WHERE werks = gs_datos-werks
    AND lgort = gs_datos-lgort.

    CLEAR lv_matnr.
*    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
*      EXPORTING
*        input  = gs_datos-matnr
*      IMPORTING
*        output = gs_datos-matnr.

    CONCATENATE gs_datos-matnr gs_datos-charg INTO ls_eti-cod_barras.


    CLEAR lf_fm_name.

    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
      EXPORTING
        formname           = lf_formname
*       VARIANT            = ' '
*       DIRECT_CALL        = ' '
      IMPORTING
        fm_name            = lf_fm_name
      EXCEPTIONS
        no_form            = 1
        no_function_module = 2
        OTHERS             = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    CLEAR: ls_parameters, ls_options.
*  ls_parameters-preview = 'X'.       "Preview the output of Smartform                "<--------
    ls_parameters-no_dialog = 'X'.       "Don't show Dialog                        "<--------
    ls_options-tddest = 'LOCB'.      "Spool: Output device              "<--------
    ls_options-tdnoprint = ' '.       "No printing from print preview
    ls_options-tdimmed = 'X'.
    ls_options-tdnewid = 'X'.

    CALL FUNCTION lf_fm_name
      EXPORTING
        control_parameters = ls_parameters
        output_options     = ls_options " This is that structure which has printer details
        user_settings      = ''
        ls_eti             = ls_eti
*    IMPORTING
*       job_output_info    = gs_job_output_info
      EXCEPTIONS
        formatting_error   = 1
        internal_error     = 2
        send_error         = 3
        user_canceled      = 4
        OTHERS             = 5.

  ENDLOOP.


ENDFORM.                    " IMPRIMIR_ETIQUETA_SMARFORMS
*&---------------------------------------------------------------------*
*&      Form  TIPO_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM tipo_material .

  IF p_zsem = 'X'.
    gv_mtart = 'ZSEM'.
  ELSE.
    gv_mtart = 'ZREC'.
  ENDIF.

ENDFORM.                    " TIPO_MATERIAL
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA_MULTIPLES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta_multiples .
  DATA: lf_formname TYPE fpname VALUE 'ZSF_ETIQUETA_MULT_GENERICA_A5'.
  DATA: lf_fm_name TYPE rs38l_fnam.

  DATA: lt_eti TYPE ZTMM_ETIQUETA_GENERICA,
        ls_eti TYPE zsmm_etiqueta_generica.


  DATA: ls_parameters TYPE ssfctrlop,
        ls_options    TYPE ssfcompop.

  CLEAR: lt_eti. REFRESH: lt_eti.

* RELLENAR LA ESTRUCTURA A IMPRIMIR
  LOOP AT gt_datos INTO gs_datos.
    CLEAR ls_eti.

    ls_eti-matnr = gs_datos-matnr.
    ls_eti-maktx = gs_datos-maktx.
    ls_eti-charg = gs_datos-charg.
    ls_eti-clabs = gs_datos-clabs.
    ls_eti-meins = gs_datos-meins.
    ls_eti-lifnr = gs_datos-lifnr.
    ls_eti-name1 = gs_datos-name1.
    ls_eti-lwedt = gs_datos-lwedt.
    ls_eti-lgort = gs_datos-lgort.

    SELECT SINGLE lgobe INTO ls_eti-lgobe
    FROM t001l
    WHERE werks = gs_datos-werks
    AND lgort = gs_datos-lgort.

    CONCATENATE gs_datos-matnr gs_datos-charg INTO ls_eti-cod_barras.

    APPEND ls_eti TO lt_eti.
  ENDLOOP.

  CLEAR lf_fm_name.

  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      formname           = lf_formname
*     VARIANT            = ' '
*     DIRECT_CALL        = ' '
    IMPORTING
      fm_name            = lf_fm_name
    EXCEPTIONS
      no_form            = 1
      no_function_module = 2
      OTHERS             = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  CLEAR: ls_parameters, ls_options.
*  ls_parameters-preview = 'X'.       "Preview the output of Smartform                "<--------
  ls_parameters-no_dialog = 'X'.       "Don't show Dialog                        "<--------
  ls_options-tddest = 'LOCB'.      "Spool: Output device              "<--------
  ls_options-tdnoprint = ' '.       "No printing from print preview
  ls_options-tdimmed = 'X'.
  ls_options-tdnewid = 'X'.

  CALL FUNCTION lf_fm_name
    EXPORTING
      control_parameters = ls_parameters
      output_options     = ls_options " This is that structure which has printer details
      user_settings      = ''
      lT_eti             = lT_eti
*    IMPORTING
*     job_output_info    = gs_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.

ENDFORM.                    " IMPRIMIR_ETIQUETA_MULTIPLES
