***********************************************************************
* TIPO : LISTADO
* TITULO : Gestión pedidos de compra de transportista
* DESCRIPCION : Gestión pedidos de compra de transportista
*
* AUTOR: Andrés Picazo                                FECHA: 20/11/2024
* ANALISTA: Andrés Sánchez Balanzá
*
***********************************************************************
REPORT zrmm0036.

*------INCLUDES--------------------------------------------------------*

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: ekko, ekpo, eket, vttk.

*------TABLAS INTERNAS-------------------------------------------------*

*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check.
  PUBLIC SECTION.
    METHODS: visualizar_objeto REDEFINITION.
    METHODS: handle_user_command REDEFINITION.

ENDCLASS. "lcl_alv DEFINITION

*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check        TYPE xfeld,
             lights       TYPE zico_estado_mensaje,
             clave        TYPE string,
             ebeln        TYPE ekko-ebeln,
             lifnr        TYPE ekko-lifnr,
             name1        TYPE lfa1-name1,
             perio        TYPE spmon,
             ent_q1       TYPE ekbe-dmbtr,
             fac_q1       TYPE ekbe-dmbtr,
             info_mail_q1 TYPE string,
             ent_q2       TYPE ekbe-dmbtr,
             fac_q2       TYPE ekbe-dmbtr,
             info_mail_q2 TYPE string,
             ent_t        TYPE ekbe-dmbtr,
             fac_t        TYPE ekbe-dmbtr,
             info_mail_t  TYPE string,
             email        TYPE zemail,
             message      TYPE bapi_msg,
             color        TYPE lvc_t_scol,
           END OF t_listado,
           tt_listado TYPE TABLE OF t_listado.
    DATA: i_listado TYPE tt_listado.

    TYPES: BEGIN OF t_detalle,
             check    TYPE xfeld,
             lights   TYPE zico_estado_mensaje,
             clave    TYPE string,
             ebeln    TYPE ekko-ebeln,
             bsart    TYPE ekko-bsart,
             bedat    TYPE ekko-bedat,
             lifnr    TYPE ekko-lifnr,
             name1    TYPE lfa1-name1,
             ebelp    TYPE ekpo-ebelp,
             menge_p  TYPE ekpo-menge,
             meins    TYPE ekpo-meins,
             netpr    TYPE ekpo-netpr,
             mwskz    TYPE ekpo-mwskz,
             etenr    TYPE eket-etenr,
             lpein    TYPE eket-lpein,
             eindt    TYPE eket-eindt,
             perio    TYPE spmon,
             tknum    TYPE vttk-tknum,
             dtabf    TYPE vttk-dtabf,
             signi    TYPE vttk-signi,
             shtyp    TYPE vttk-shtyp,
             vgabe    TYPE ekbe-vgabe,
             zekkn    TYPE ekbe-zekkn,
             mblnr    TYPE mseg-mblnr,
             mjahr    TYPE mseg-mjahr,
             zeile    TYPE mseg-zeile,
             bewtp    TYPE ekbe-bewtp,
             bwart    TYPE ekbe-bwart,
             budat    TYPE ekbe-budat,
             bldat    TYPE ekbe-bldat,
             quincena TYPE char2,
             menge    TYPE ekbe-menge,
             dmbtr    TYPE ekbe-dmbtr,
             shkzg    TYPE ekbe-shkzg,
             xblnr    TYPE ekbe-xblnr,
             lfgja    TYPE ekbe-lfgja,
             lfbnr    TYPE essr-lblni,
             belnr    TYPE rseg-belnr,
             gjahr    TYPE rseg-gjahr,
             buzei    TYPE rseg-buzei,
             message  TYPE bapi_msg,
           END OF t_detalle,
           tt_detalle TYPE TABLE OF t_detalle.
    DATA: i_detalle TYPE tt_detalle.
    DATA: i_detalle_todo TYPE tt_detalle,
          v_detalle_init.

    DATA: o_alv  TYPE REF TO lcl_alv,
          o_alvd TYPE REF TO lcl_alv.

    METHODS: main.

    METHODS:  listado,
      listado_detalle IMPORTING clave  TYPE any OPTIONAL
                                column TYPE fieldname OPTIONAL,
      agrupar_datos,
      seleccionar_datos,
      facturar IMPORTING quincena TYPE char2 CHANGING list TYPE t_listado,
      enviar_mail IMPORTING quincena      TYPE char2
                            previsualizar TYPE abap_bool DEFAULT ''
                            popup         TYPE abap_bool DEFAULT ''
                  CHANGING  list          TYPE t_listado,
      facturar_sel IMPORTING quincena TYPE char2 .

ENDCLASS.                    "REPORT DEFINITION


*------VARIABLES-------------------------------------------------------*
DATA: o_prog TYPE REF TO zcl_report,
      s011   TYPE s011.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_werks FOR ekpo-werks,
                s_ebeln FOR ekko-ebeln,
                s_lifnr FOR vttk-tdlnr,
                s_perio FOR s011-spmon,
                s_bedat FOR ekko-bedat,
                s_bsart FOR ekko-bsart DEFAULT 'ZPE2',
                s_pstyp FOR ekpo-pstyp DEFAULT '9',
                s_knttp FOR ekpo-knttp DEFAULT 'U'.
SELECTION-SCREEN: SKIP 1.
PARAMETERS: p_list RADIOBUTTON GROUP g USER-COMMAND g DEFAULT 'X',
            p_deta RADIOBUTTON GROUP g.
SELECTION-SCREEN END OF BLOCK 001.
SELECTION-SCREEN BEGIN OF BLOCK 002 WITH FRAME TITLE text-aut.
PARAMETERS: p_mailq1 AS CHECKBOX,
            p_mailq2 AS CHECKBOX,
            p_mailt  AS CHECKBOX,
            p_factq1 AS CHECKBOX,
            p_factq2 AS CHECKBOX,
            p_factt  AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK 002.
SELECTION-SCREEN BEGIN OF BLOCK 003 WITH FRAME TITLE text-opc.
PARAMETERS: p_varil LIKE disvariant-variant MODIF ID lis,
            p_varid LIKE disvariant-variant MODIF ID det.
SELECTION-SCREEN END OF BLOCK 003.
__botones_plantilla.



************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA: l_list TYPE o_prog->t_listado,
          l_deta TYPE o_prog->t_detalle.


    IF nombre_tabla CS 'LISTADO'.
      l_list = list.
      CASE column.
        WHEN 'EBELN' OR 'LIFNR'.
          message = 'No implementado'.
        WHEN 'INFO_MAIL_Q1' OR 'INFO_MAIL_Q2'  OR 'INFO_MAIL_T'.
          o_prog->aux1 = |{ l_list-ebeln }-{ l_list-perio }-{ column+10(2) }|.
          SUBMIT zap_mail_log
            AND RETURN
        WITH s_grupo  = 'PROVEEDORES'
        WITH s_codigo = 'AVISO_EM_TRANSP'
          WITH s_clave = o_prog->aux1.
        WHEN OTHERS.
          PERFORM guardar_botones_v1 IN PROGRAM zap_status.
          o_prog->listado_detalle( clave = l_list-clave column = column ).
          PERFORM restaurar_botones_v1 IN PROGRAM zap_status.
      ENDCASE.


    ELSE.
      l_deta = list.
      CASE column.
*      WHEN 'BUKRS'.
*        MESSAGE l_list-bukrs TYPE 'I'.
        WHEN 'LFBNR'.
          SET PARAMETER ID 'LBL' FIELD l_deta-lfbnr.
          CALL TRANSACTION 'ML81N' AND SKIP FIRST SCREEN.
        WHEN OTHERS. message = 'No implementado'.
      ENDCASE.
    ENDIF.
  ENDMETHOD. "handle_double_click
  METHOD handle_user_command.
    DATA r_fechas TYPE RANGE OF dats.
    check_ucomm_sel = 'PRINT_Q1,PRINT_Q2,PMAIL_Q1,PMAIL_Q2,PMAIL_T,EMAIL_Q1,EMAIL_Q2,EMAIL_T,FACTU_Q1,FACTU_Q2'.

    super->handle_user_command( e_salv_function ).


    get_seleccion( CHANGING t_tabla = o_prog->i_listado ).
    DATA(l_quincena) = ucomm+6(2).

    CASE ucomm.
      WHEN 'FACTU_Q1' OR 'FACTU_Q2'.
        o_prog->facturar_sel( EXPORTING quincena = l_quincena ).
        o_alv->refresh( ).
      WHEN OTHERS.
        IF ucomm(1) = 'P'.
          DATA(l_popup) = 'X'.
        ENDIF.
        IF ucomm(5) = 'PRINT'.
          DATA(l_prev) = 'X'.
        ENDIF.

        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'. "#EC CI_STDSEQ
          o_prog->enviar_mail( EXPORTING popup = l_popup
                                         previsualizar = l_prev
                                         quincena = l_quincena
                               CHANGING list = <listado> ).
        ENDLOOP.
        IF sy-subrc NE 0.
          MESSAGE i104(dlcn). "Seleccione por lo menos un registro
        ELSE.
          refresh( ).
        ENDIF.
    ENDCASE.
  ENDMETHOD. "handle_USER_COMMAND

ENDCLASS. "lcl_alv IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.

    seleccionar_datos( ).

    IF p_list = 'X'.
      agrupar_datos( ).

      CLEAR o_log->i_log.
      IF p_mailq1 = 'X'.
        LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE info_mail_q1 IS INITIAL AND email NE ''.
          IF <listado>-ent_q1 > <listado>-fac_q1.
            IF NOT <listado>-message IS INITIAL.
              message( clave_log = <listado>-ebeln p1 = 'No se envian mails del pedido' p2 = <listado>-ebeln p3 = 'porque hay cosas que revisar' type = 'W' ).
            ELSE.
              enviar_mail( EXPORTING quincena = 'Q1' CHANGING list = <listado> ).
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF p_mailq2 = 'X'.
        LOOP AT i_listado ASSIGNING <listado> WHERE info_mail_q2 IS INITIAL AND email NE ''.
          IF <listado>-ent_q2 > <listado>-fac_q2.
            IF NOT <listado>-message IS INITIAL.
              message( clave_log = <listado>-ebeln p1 = 'No se envian mails del pedido' p2 = <listado>-ebeln p3 = 'porque hay cosas que revisar' type = 'W' ).
            ELSE.
              enviar_mail( EXPORTING quincena = 'Q2' CHANGING list = <listado> ).
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF p_mailt = 'X'.
        LOOP AT i_listado ASSIGNING <listado> WHERE info_mail_t IS INITIAL AND email NE ''.
          IF <listado>-ent_t > <listado>-fac_t.
            IF NOT <listado>-message IS INITIAL.
              message( clave_log = <listado>-ebeln p1 = 'No se envian mails del pedido' p2 = <listado>-ebeln p3 = 'porque hay cosas que revisar' type = 'W' ).
            ELSE.
              enviar_mail( EXPORTING quincena = 'T' CHANGING list = <listado> ).
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF p_factq1 = 'X'.
        LOOP AT i_listado ASSIGNING <listado>.
          IF <listado>-ent_q1 > <listado>-fac_q1.
            IF NOT <listado>-message IS INITIAL.
              message( clave_log = <listado>-ebeln p1 = 'No se factura pedido' p2 = <listado>-ebeln p3 = 'porque hay cosas que revisar' type = 'W' ).
            ELSE.
              facturar( EXPORTING quincena = 'Q1' CHANGING list = <listado> ).
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF p_factq2 = 'X'.
        LOOP AT i_listado ASSIGNING <listado>.
          IF <listado>-ent_q2 > <listado>-fac_q2.
            IF NOT <listado>-message IS INITIAL.
              message( clave_log = <listado>-ebeln p1 = 'No se factura pedido' p2 = <listado>-ebeln p3 = 'porque hay cosas que revisar' type = 'W' ).
            ELSE.
              facturar( EXPORTING quincena = 'Q2' CHANGING list = <listado> ).
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      o_log->show_log( ).

      listado( ).
    ELSE.
      listado_detalle( ).
    ENDIF.

  ENDMETHOD.                    "REPORT

  METHOD seleccionar_datos.
    DATA: i_fact      TYPE tt_detalle,
          i_fact_anul TYPE tt_detalle,
          i_anul      TYPE tt_detalle.


    DATA(r_eindt) = zcl_ap_fechas=>rangoperio_2_rangofechas( s_perio[] ).

    sgpi_texto( 'Seleccionando datos' ).
    SELECT ekko~ebeln, ekko~bsart, ekko~bedat, ekko~lifnr,
           ekpo~ebelp, ekpo~menge AS menge_p, ekpo~meins AS meins, ekpo~netpr, ekpo~mwskz,
           eket~etenr, eket~lpein, eket~eindt,
           ekbe~vgabe, ekbe~zekkn, ekbe~gjahr AS mjahr, ekbe~belnr AS mblnr, ekbe~buzei AS zeile,
           ekbe~bewtp, ekbe~bwart, ekbe~budat, ekbe~menge,
           ekbe~dmbtr, ekbe~shkzg, ekbe~lfgja, ekbe~lfbnr, "ekbe~xblnr as xblnr,
           ekbe~xblnr, ekbe~bldat,
           lfa1~name1
      FROM ekko JOIN ekpo ON ekpo~ebeln = ekko~ebeln
                JOIN eket ON eket~ebeln = ekpo~ebeln
                         AND eket~ebelp = ekpo~ebelp
                JOIN ekbe ON ekbe~ebeln = ekpo~ebeln
                         AND ekbe~ebelp = ekpo~ebelp
                JOIN lfa1 ON lfa1~lifnr = ekko~lifnr
     INTO CORRESPONDING FIELDS OF TABLE @i_detalle
     WHERE ekko~ebeln IN @s_ebeln
       AND ekko~lifnr IN @s_lifnr
       AND ekko~bedat IN @s_bedat
       AND ekko~bsart IN @s_bsart
       AND ekpo~pstyp IN @s_pstyp
       AND ekpo~knttp IN @s_knttp
       AND ekpo~werks IN @s_werks
       AND eket~eindt IN @r_eindt
       AND ekbe~bewtp IN ('E', 'Q')
    ORDER BY ekko~ebeln, ekpo~ebelp, ekbe~belnr, ekbe~gjahr, ekbe~buzei, eket~etenr.

    o_prog->o_sgpi->get_filas_tabla( i_detalle[] ).
    LOOP AT i_detalle ASSIGNING FIELD-SYMBOL(<detalle>).
      DATA(l_new_ebelp) = ''.
      AT NEW ebelp.
        l_new_ebelp = 'X'.
      ENDAT.

      IF l_new_ebelp IS INITIAL.
        CLEAR: <detalle>-menge_p, <detalle>-netpr.
      ENDIF.

      sgpi_texto( texto1 = 'Procesando datos' cant_porc = 100 ).
      IF <detalle>-shkzg = 'H'.
        <detalle>-menge = - <detalle>-menge.
        <detalle>-dmbtr = - <detalle>-dmbtr.
      ENDIF.
      <detalle>-perio = <detalle>-eindt(6).

      IF <detalle>-bewtp = 'Q'.
        IF <detalle>-shkzg = 'H'.
          APPEND <detalle> TO i_fact_anul.
        ELSE.
          APPEND <detalle> TO i_fact.
        ENDIF.
        DELETE i_detalle.
      ELSE.
        SELECT SINGLE bktxt FROM mkpf
          INTO @DATA(l_bktxt)
         WHERE mblnr = @<detalle>-mblnr
           AND mjahr = @<detalle>-mjahr.
        IF sy-subrc = 0.
          SELECT SINGLE tknum dtabf signi shtyp FROM vttk
            INTO CORRESPONDING FIELDS OF <detalle>
           WHERE tknum = l_bktxt.
        ENDIF.

        IF NOT <detalle>-dtabf IS INITIAL.
          fecha = <detalle>-dtabf.
        ELSE.
*          fecha = <detalle>-bldat.
          <detalle>-message = 'Transporte sin despacho de expdición'.
          <detalle>-lights = zcl_ap_alv=>set_icono( icono = icon_led_red mensaje = <detalle>-message ).
        ENDIF.
        IF <detalle>-perio NE fecha(6).
          <detalle>-message = 'Periodo difiere del de fecha de entrega '.
          <detalle>-lights = zcl_ap_alv=>set_icono( icono = icon_question mensaje = <detalle>-message ).
        ELSE.
          IF fecha+6(2) <= 15.
            <detalle>-quincena = 'Q1'.
          ELSE.
            <detalle>-quincena = 'Q2'.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.


* Eliminamos facturas anuladas para no liarnos
    LOOP AT i_fact_anul ASSIGNING FIELD-SYMBOL(<fact_anul>).
      DATA(l_imp) = - <fact_anul>-dmbtr.
      ASSIGN i_fact[ ebeln = <fact_anul>-ebeln
                        ebelp = <fact_anul>-ebelp
                        lfbnr = <fact_anul>-lfbnr
                        dmbtr = l_imp
                        shkzg = 'S' ] TO <detalle>.
      IF sy-subrc = 0.
        DELETE i_fact INDEX sy-tabix.
        DELETE i_fact_anul.
      ELSE.
        APPEND <fact_anul> TO i_fact.
      ENDIF.
    ENDLOOP.


    LOOP AT i_fact ASSIGNING FIELD-SYMBOL(<fact>).
      ASSIGN i_detalle[ ebeln = <fact>-ebeln
                        ebelp = <fact>-ebelp
                        lfbnr = <fact>-lfbnr
                        dmbtr = <fact>-dmbtr
                        shkzg = <fact>-shkzg
                        belnr = '' ] TO <detalle>.
      IF sy-subrc = 0.
        <detalle>-belnr = <fact>-mblnr.
        <detalle>-gjahr = <fact>-mjahr.
        <detalle>-buzei = <fact>-zeile.
        CLEAR <detalle>-message.
        <detalle>-lights = zcl_ap_alv=>set_icono( icono = icon_okay mensaje = 'Posición facturada' ).
      ELSE.
        <fact>-belnr = <fact>-mblnr.
        <fact>-gjahr = <fact>-mjahr.
        <fact>-buzei = <fact>-zeile.
        CLEAR: <fact>-mblnr, <fact>-mjahr, <fact>-zeile.
        <fact>-message = 'Factura sin asociar a entrada'.
        <fact>-lights = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = <fact>-message ).
        APPEND <fact> TO i_detalle.
      ENDIF.
      DELETE i_fact.
    ENDLOOP.

* Intenamos matar anulados sueltos

    LOOP AT i_detalle ASSIGNING <detalle> WHERE belnr IS INITIAL AND shkzg = 'H'.
      APPEND <detalle> TO i_anul.
      DELETE i_detalle.
    ENDLOOP.
    LOOP AT i_anul ASSIGNING FIELD-SYMBOL(<anul>).
      l_imp = - <anul>-dmbtr.
      ASSIGN i_detalle[ ebeln = <anul>-ebeln
                        ebelp = <anul>-ebelp
                        lfbnr = <anul>-lfbnr
                        dmbtr = l_imp
                        shkzg = 'S'
                        belnr = '' ] TO <detalle>.
      IF sy-subrc = 0.
        <detalle>-belnr = 'ANULADO'.
        <detalle>-lights = zcl_ap_alv=>set_icono( icono = icon_delete mensaje = 'Posición anulada' ).
        <anul>-belnr = 'ANULACION'.
        <anul>-lights = zcl_ap_alv=>set_icono( icono = icon_delete mensaje = 'Posición de anulacion' ).
      ENDIF.
      APPEND <anul> TO i_detalle.
    ENDLOOP.

    SORT i_detalle BY ebeln ebelp belnr.

    i_detalle_todo = i_detalle.

  ENDMETHOD.                    "seleccionar_datos


  METHOD listado.

    sgpi_texto( 'Generando informe' ).

    o_alv->add_button( button = 'F01' text = 'Imprimir Q1'  icon = icon_print ucomm = 'PRINT_Q1' forzar = 'X' ).
    o_alv->add_button( button = 'F02' text = 'Imprimir Q2'  icon = icon_print ucomm = 'PRINT_Q2' forzar = 'X' ).
    o_alv->add_button( button = 'F03' text = 'Imprimir todo'  icon = icon_print ucomm = 'PRINT_T' forzar = 'X' ).
    o_alv->add_button( button = 'F04' text = 'Mail Q1'  icon = icon_mail ucomm = 'EMAIL_Q1' forzar = 'X' ).
    o_alv->add_button( button = 'F05' text = 'Mail Q2'  icon = icon_mail ucomm = 'EMAIL_Q2'  forzar = 'X' ).
    o_alv->add_button( button = 'F06' text = 'Mail todo'  icon = icon_mail ucomm = 'EMAIL_T'  forzar = 'X' ).
    o_alv->add_button( button = 'F07' text = 'Facturar Q1'  icon = icon_execute_object ucomm = 'FACTU_Q1' forzar = 'X' ).
    o_alv->add_button( button = 'F08' text = 'Facturar Q2'  icon = icon_execute_object ucomm = 'FACTU_Q2' forzar = 'X' ).

    o_alv->add_button( button = 'M01' text = 'Previsualizar mail Q1'  ucomm = 'PMAIL_Q1' forzar = 'X' ).
    o_alv->add_button( button = 'M02' text = 'Previsualizar mail Q2'  ucomm = 'PMAIL_Q2' forzar = 'X' ).
    o_alv->add_button( button = 'M03' text = 'Previsualizar mail todo'  ucomm = 'PMAIL_T' forzar = 'X' ).


    o_alv->set_layout( p_varil ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_top_of_page( ).

    o_alv->set_field_quitar( 'CLAVE,CHECK' ).
    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_hotspot( campo = 'EBELN,LIFNR' auto = 'X' ).

    o_alv->set_field_text( campo = 'ENT_Q1' valor = 'Ent.Q1' valor2 = 'Total entradas primera quincena' ).
    o_alv->set_field_text( campo = 'ENT_Q2' valor = 'Ent.Q2' valor2 = 'Total entradas segunda quincena' ).
    o_alv->set_field_text( campo = 'ENT_T' valor = 'Tot Ent' valor2 = 'Total entradas ' ).
    o_alv->set_field_text( campo = 'FAC_Q1' valor = 'Fact.Q1' valor2 = 'Total facturas primera quincena' ).
    o_alv->set_field_text( campo = 'FAC_Q2' valor = 'Fact.Q2' valor2 = 'Total facturas segunda quincena' ).
    o_alv->set_field_text( campo = 'FAC_T' valor = 'Tot Fac'  valor2 = 'Total facturas' ).
    o_alv->set_field_text( campo = 'INFO_MAIL_Q1' valor = 'M.Q1'  valor2 = 'Mail Q1' ).
    o_alv->set_field_text( campo = 'INFO_MAIL_Q2' valor = 'M.Q2'  valor2 = 'Mail Q2' ).
    o_alv->set_field_text( campo = 'INFO_MAIL_T' valor = 'M.Tot'  valor2 = 'Mail total' ).


    o_alv->show( ).


  ENDMETHOD.                    "listado

  METHOD listado_detalle.


    sgpi_texto( 'Generando informe' ).
    o_alvd->add_button( button = 'F01' borrar = 'X' ).
    o_alvd->add_button( button = 'F02' borrar = 'X' ).
    o_alvd->add_button( button = 'F03' borrar = 'X' ).
    o_alvd->add_button( button = 'F04' borrar = 'X' ).
    o_alvd->add_button( button = 'F05' borrar = 'X' ).
    o_alvd->add_button( button = 'F06' borrar = 'X' ).
    o_alvd->add_button( button = 'F07' borrar = 'X' ).
    o_alvd->add_button( button = 'F08' borrar = 'X' ).
    o_alvd->add_button( button = 'F09' borrar = 'X' ).
    o_alvd->add_button( button = 'M01' borrar = 'X' ).
    o_alvd->add_button( button = 'M02' borrar = 'X' ).
    o_alvd->add_button( button = 'M03' borrar = 'X' ).


    CLEAR i_detalle.
    IF clave IS INITIAL.
      i_detalle = i_detalle_todo.
    ELSE.
      LOOP AT i_detalle_todo ASSIGNING FIELD-SYMBOL(<detalle>) WHERE clave = clave. "#EC CI_STDSEQ
        APPEND <detalle> TO i_detalle.
      ENDLOOP.
      IF column(3) = 'ENT'.
        DELETE i_detalle WHERE bewtp = 'Q'.
      ELSEIF column(3) = 'FAC'.
        DELETE i_detalle WHERE belnr IS INITIAL.
      ENDIF.

      IF column+4(2) = 'Q1' OR column+4(2) = 'Q2'.
        DELETE i_detalle WHERE quincena NE column+4(2).
      ENDIF.

    ENDIF.

    IF v_detalle_init IS INITIAL.
      v_detalle_init = 'X'.
      o_alvd->set_layout( p_varid ).
      o_alvd->get_datos_layout( EXPORTING reordenar_tabla = 'X' CHANGING t_tabla = i_detalle ).
      o_alvd->set_top_of_page( ).
      o_alvd->set_field_hotspot( campo = 'EBELN,LFBNR,MBLNR,TKNUM' auto = 'X' ).
      o_alvd->set_field_hotspot( campo = 'BELNR' valor = 'MIRO' ).
      o_alvd->set_agregacion( 'MENGE_P,MENGE,DMBTR' ).
      o_alvd->set_field_text( 'QUINCENA' ).

      o_alvd->set_orden( campo = 'EBELN' ).
      o_alvd->set_orden( campo = 'EBELP' subtot = 'X' ).

      o_alvd->set_field_quitar( 'CLAVE,CHECK' ).
    ENDIF.
    o_alvd->show( ).


  ENDMETHOD.                    "

  METHOD agrupar_datos.
    DATA: l_listado TYPE t_listado,
          l_icono   TYPE icon_d.

    sgpi_texto( 'Agrupando datos' ).
    CLEAR i_listado.
    LOOP AT i_detalle_todo ASSIGNING FIELD-SYMBOL(<detalle>).
      <detalle>-clave = <detalle>-ebeln && <detalle>-perio.
      ASSIGN i_listado[ clave = <detalle>-clave ] TO FIELD-SYMBOL(<listado>).
      IF sy-subrc NE 0.
        CLEAR l_listado.
        MOVE-CORRESPONDING <detalle> TO l_listado.
        CLEAR: l_listado-lights, l_listado-message.
        l_listado-email = zcl_ap_proveedor=>get_email( l_listado-lifnr ).
        APPEND l_listado TO i_listado.
        ASSIGN i_listado[ clave = <detalle>-clave ] TO <listado>.
      ENDIF.

      IF <detalle>-bewtp = 'E'.
        ADD <detalle>-dmbtr TO <listado>-ent_t.
        IF NOT <detalle>-belnr IS INITIAL.
          ADD <detalle>-dmbtr TO <listado>-fac_t.
        ENDIF.

        IF <detalle>-quincena = 'Q1'.
          ADD <detalle>-dmbtr TO <listado>-ent_q1.
          IF NOT <detalle>-belnr IS INITIAL.
            ADD <detalle>-dmbtr TO <listado>-fac_q1.
          ENDIF.
        ELSE.
          ADD <detalle>-dmbtr TO <listado>-ent_q2.
          IF NOT <detalle>-belnr IS INITIAL.
            ADD <detalle>-dmbtr TO <listado>-fac_q2.
          ENDIF.
        ENDIF.
      ELSE.
        ADD <detalle>-dmbtr TO <listado>-fac_t.
        IF <detalle>-quincena = 'Q1'.
          ADD <detalle>-dmbtr TO <listado>-fac_q1.
        ELSE.
          ADD <detalle>-dmbtr TO <listado>-fac_q2.
        ENDIF.
      ENDIF.
      IF NOT <detalle>-message IS INITIAL.
        __add_lista <listado>-message <detalle>-message.
      ENDIF.

    ENDLOOP.

    LOOP AT i_listado ASSIGNING <listado>.
      CLEAR l_icono.
      IF <listado>-ent_t = <listado>-fac_t AND <listado>-ent_t NE 0.
        l_icono = icon_okay.
        <listado>-message = 'Pedido totalmente facturado'.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'ENT_T,FAC_T' colorc = 'V' CHANGING tabla_color = <listado>-color ).
      ELSEIF NOT <listado>-message IS INITIAL.
        l_icono = icon_warning.
        <listado>-message = 'Revise detalle para ver problemas'.
      ENDIF.

      IF <listado>-fac_q1 NE 0.
        IF <listado>-ent_q1 = <listado>-fac_q1.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'ENT_Q1,FAC_Q1' colorc = 'V' CHANGING tabla_color = <listado>-color ).
        ELSE.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'ENT_Q1,FAC_Q1' colorc = 'R' CHANGING tabla_color = <listado>-color ).
          IF <listado>-message IS INITIAL.
            l_icono = icon_warning.
            <listado>-message = 'No cuadra cantidad entradas con facturas de la primera quincena'.
          ENDIF.
        ENDIF.
      ENDIF.

      IF <listado>-fac_q2 NE 0.
        IF <listado>-ent_q2 = <listado>-fac_q2.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'ENT_Q2,FAC_Q2' colorc = 'V' CHANGING tabla_color = <listado>-color ).
        ELSE.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'ENT_Q2,FAC_Q2' colorc = 'R' CHANGING tabla_color = <listado>-color ).
        ENDIF.

        IF <listado>-ent_t = <listado>-fac_t.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'ENT_T,FAC_T' colorc = 'V' CHANGING tabla_color = <listado>-color ).
        ELSE.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'ENT_T,FAC_T' colorc = 'R' CHANGING tabla_color = <listado>-color ).
        ENDIF.
      ENDIF.

      aux1 = |{ <listado>-ebeln }-{ <listado>-perio }-Q1|.
      SELECT SINGLE * FROM zap_mail_log
        INTO @DATA(mail_log)
       WHERE grupo = 'PROVEEDORES'
         AND codigo = 'AVISO_EM_TRANSP'
         AND clave = @aux1.
      IF sy-subrc = 0.
        <listado>-info_mail_q1 = zcl_ap_alv=>set_icono( icono = icon_mail mensaje = |Mail enviado el { mail_log-fecha DATE = USER } { mail_log-hora TIME = USER } por { mail_log-emisor }| ).
      ENDIF.

      aux1 = |{ <listado>-ebeln }-{ <listado>-perio }-Q2|.
      SELECT SINGLE * FROM zap_mail_log
        INTO @mail_log
       WHERE grupo = 'PROVEEDORES'
         AND codigo = 'AVISO_EM_TRANSP'
         AND clave = @aux1.
      IF sy-subrc = 0.
        <listado>-info_mail_q2 = zcl_ap_alv=>set_icono( icono = icon_mail mensaje = |Mail enviado el { mail_log-fecha DATE = USER } { mail_log-hora TIME = USER } por { mail_log-emisor }| ).
      ENDIF.

      aux1 = |{ <listado>-ebeln }-{ <listado>-perio }-T|.
      SELECT SINGLE * FROM zap_mail_log
        INTO @mail_log
       WHERE grupo = 'PROVEEDORES'
         AND codigo = 'AVISO_EM_TRANSP'
         AND clave = @aux1.
      IF sy-subrc = 0.
        <listado>-info_mail_t = zcl_ap_alv=>set_icono( icono = icon_mail mensaje = |Mail enviado el { mail_log-fecha DATE = USER } { mail_log-hora TIME = USER } por { mail_log-emisor }| ).
      ENDIF.
      set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
    ENDLOOP.

    SORT i_listado BY ebeln lifnr name1 perio.

  ENDMETHOD.                    "agrupar_datos

  METHOD facturar.
    DATA: wa_header    TYPE bapi_incinv_create_header,
          wa_item      TYPE bapi_incinv_create_item,
          wa_glaccount TYPE bapi_incinv_create_gl_account,
          wa_vendor    TYPE bapi_incinv_create_vendorsplit.

    DATA: it_item      TYPE STANDARD TABLE OF bapi_incinv_create_item,
          it_glaccount TYPE STANDARD TABLE OF bapi_incinv_create_gl_account,
          it_ret       TYPE TABLE OF  bapiret2,
          it_vendor    TYPE STANDARD TABLE OF bapi_incinv_create_vendorsplit.

    "Datos que devuelve la BAPI
    DATA: po_invno TYPE bapi_incinv_fld-inv_doc_no,
          ls_error TYPE bapiret2.

    DATA:
      t_taxdata     TYPE TABLE OF bapi_incinv_create_tax,
      t_withtaxdata TYPE TABLE OF bapi_incinv_create_withtax.


    wa_header-invoice_ind = 'X'.
    wa_header-diff_inv = list-lifnr.
    wa_header-currency = 'EUR'.
    SELECT SINGLE bukrs FROM ekko
      INTO (wa_header-comp_code)
     WHERE ebeln = list-ebeln.

    wa_header-doc_type = 'KR'.



    wa_header-doc_date = list-perio && '15'.

    IF quincena(1) = 'Q'.
      DATA r_quincena TYPE RANGE OF char2.
      r_quincena = VALUE #( ( option = 'EQ' sign = 'I' low = quincena ) ).
      wa_header-ref_doc_no = |{ quincena } / { list-perio+4(2) } / { list-perio(4) }|.
      IF quincena = 'Q2'.
        wa_header-doc_date = zcl_ap_fechas=>get_ultimo_dia_mes( wa_header-doc_date ).
      ENDIF.

    ELSE.
      wa_header-ref_doc_no = list-ebeln.
      wa_header-doc_date = zcl_ap_fechas=>get_ultimo_dia_mes( wa_header-doc_date ).
    ENDIF.
    wa_header-ref_doc_no_long = wa_header-ref_doc_no.
    wa_header-pstng_date = wa_header-doc_date.

    LOOP AT i_detalle ASSIGNING FIELD-SYMBOL(<detalle>) WHERE ebeln = list-ebeln AND quincena IN r_quincena.
      ADD 1 TO wa_item-invoice_doc_item.
      wa_item-po_number = list-ebeln.
*      wa_item-ref_doc = <detalle>-mblnr.
*      wa_item-ref_doc_year = <detalle>-mjahr.
*      wa_item-ref_doc_it = <detalle>-zeile.
      wa_item-ref_doc = <detalle>-lfbnr.
      wa_item-ref_doc_year = <detalle>-lfgja.

      wa_item-sheet_no = <detalle>-lfbnr.

*      wa_item-quantity = <detalle>-menge.
      wa_item-item_amount = <detalle>-dmbtr.
      wa_item-po_item = <detalle>-ebelp.
      wa_item-tax_code = <detalle>-mwskz.
*      SELECT SINGLE meins bprme FROM ekpo
*        INTO (wa_item-po_unit, wa_item-po_pr_uom)
*       WHERE ebeln = <detalle>-ebeln
*         AND ebelp = <detalle>-ebelp.
      APPEND wa_item TO it_item.
      DATA(l_iva) = zcl_ap_doc_fi=>get_importe_iva( bukrs = wa_header-comp_code mwskz = <detalle>-mwskz wrbtr = <detalle>-dmbtr ).
      wa_header-gross_amount = wa_header-gross_amount + <detalle>-dmbtr + l_iva.
*      ADD <detalle>-dmbtr TO wa_header-gross_amount.
    ENDLOOP.
    IF sy-subrc NE 0.
      message( clave_log = list-ebeln p1 = 'El pedido' p2 = list-ebeln p3 = 'no tiene nada que facturar en quincena' p4 = quincena type = 'W' postponer = 'X' ).
    ELSE.
      wa_header-calc_tax_ind = 'X'.
      CALL FUNCTION 'BAPI_INCOMINGINVOICE_CREATE'
        EXPORTING
          headerdata          = wa_header
        IMPORTING
          invoicedocnumber    = po_invno
        TABLES
          itemdata            = it_item
          glaccountdata       = it_glaccount
          vendoritemsplitdata = it_vendor
          taxdata             = t_taxdata
          withtaxdata         = t_withtaxdata
          return              = it_ret.


      IF NOT po_invno IS INITIAL.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
        message( clave_log = list-ebeln p1 = 'Se crea factura' p2 = po_invno p3 = 'del pedido' p4 = list-ebeln type = 'S' postponer = 'X' ).
      ELSE.
        ROLLBACK WORK.
        message( clave_log = list-ebeln p1 = 'Errores creando factura a partir de pedido' p2 = list-ebeln type = 'W' postponer = 'X' ).
        LOOP AT it_ret ASSIGNING FIELD-SYMBOL(<ret>).
          message( clave_log = list-ebeln p1 = <ret>-id p2 = <ret>-number p3 = <ret>-message type = <ret>-type postponer = 'X' ).
        ENDLOOP.
      ENDIF.
    ENDIF.


  ENDMETHOD.

  METHOD facturar_sel.
    CLEAR o_log->i_log.

    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
      o_prog->facturar( EXPORTING quincena = quincena CHANGING list = <listado> ).
    ENDLOOP.

    o_log->show_log( ).
  ENDMETHOD.

  METHOD enviar_mail.

    DATA r_fechas TYPE RANGE OF dats.

    IF quincena = 'Q1'.
      r_fechas = VALUE #( ( option = 'BT' sign = 'I' low = list-perio && '01' high = list-perio && '15' ) ).
    ELSEIF quincena = 'Q2'.
      r_fechas = VALUE #( ( option = 'BT' sign = 'I' low = list-perio && '16' high = zcl_ap_fechas=>get_ultimo_dia_mes( list-perio && '01' ) ) ).
    ENDIF.
    EXPORT r_fechas FROM r_fechas TO MEMORY ID 'ZRMM0036'.

    DATA(pdf) = zcl_ap_sfp=>recupera_pdf_from_mensaje( kappl = 'EF' kschl = 'ZTRA' objky = list-ebeln memory_id = 'PDF_FILE' previsualizar = previsualizar ).

    FREE MEMORY ID 'ZRMM0036'.

    IF previsualizar IS INITIAL.
      IF pdf IS INITIAL.
        MESSAGE 'No se ha podido obtener el PDF de la factura proforma' TYPE 'I'.
      ELSE.
        DATA(l_fechas) = zcl_ap_fechas=>rango2string( r_fechas ).
        DATA(i_var) = VALUE apb_lpd_t_key_value( ( key = '{QUINCENA}' value = quincena )
                                                 ( key = '{FECHAS}' value = l_fechas ) ).

        IF quincena(1) = 'Q'.
          DATA(l_fichero) = |Factura proforma quincena {  quincena } de { list-perio+4(2) } { list-perio(4) }.pdf|.
        ELSE.
          l_fichero = |Factura proforma pedido { list-ebeln ALPHA = OUT }.pdf|.
        ENDIF.
        zcl_ap_envio_mail=>mail( EXPORTING direccion = list-email
                                 popup = popup
                                 grupo = 'PROVEEDORES'
                                 codigo = 'AVISO_EM_TRANSP'
                                 variables = i_var
                                 clave = |{ list-ebeln }-{ list-perio }-{ quincena }|
                                 pdf = pdf
                                 nombre_fichero = l_fichero
                                 IMPORTING message = DATA(msg) ).
        IF NOT msg IS INITIAL.
          message( clave_log = list-ebeln p1 = |Error { msg } enviando mail a { list-email }| type = 'Y' postponer = 'X' ).
        ELSE.
          IF quincena = 'Q1'.
            list-info_mail_q1 = zcl_ap_alv=>set_icono( icono = icon_mail mensaje = |Mail enviado el { sy-datum DATE = USER } { sy-uzeit TIME = USER }| ).
          ELSEIF quincena = 'Q2'.
            list-info_mail_q1 = zcl_ap_alv=>set_icono( icono = icon_mail mensaje = |Mail enviado el { sy-datum DATE = USER } { sy-uzeit TIME = USER }| ).
          ELSEIF quincena = 'T'.
            list-info_mail_t = zcl_ap_alv=>set_icono( icono = icon_mail mensaje = |Mail enviado el { sy-datum DATE = USER } { sy-uzeit TIME = USER }| ).
          ENDIF.
          message( clave_log = list-ebeln p1 = |Se ha enviado mail del pedido { list-ebeln } { quincena } a { list-email }| type = 'S' postponer = 'X'  ).
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.

ENDCLASS.                    "REPORT IMPLEMENTATION

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.

  FREE MEMORY ID 'ZRMM0036'.
  o_prog = NEW #( status   = 'INICIO_DYN' status_prog  = 'ZAP_STATUS'
                  no_param = 'X'          guardar_logz = 'X' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Plantilla mail' '' ''.
  PERFORM add_button IN PROGRAM zap_status USING 'M02' 'Log' '' ''.

  o_prog->o_alv =  NEW #( status           = 'STANDARD_ALV_DYN' status_prog        = 'ZAP_STATUS'
                          top_of_page_auto = 'X'                top_of_page_titulo = 'X'
                          color = 'COLOR' ).

  p_varil = o_prog->o_alv->get_default_layout( ).

  o_prog->o_alvd =  NEW #( status           = 'STANDARD_ALV_DYN' status_prog        = 'ZAP_STATUS'
                           tabla            = 'I_DETALLE'
                           top_of_page_auto = 'X'                top_of_page_titulo = 'X'  ).


  p_varid = o_prog->o_alvd->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).
  o_prog->parametros_por_defecto( CHANGING r_werks = s_werks[] ).
  zcl_ap_dynpro=>set_primer_radiobutton( campos = 'P_LIST,P_DETA' ).

AT SELECTION-SCREEN OUTPUT.

  zcl_ap_dynpro=>screen_visible( group1 = 'LIS' variable = p_list ).
  zcl_ap_dynpro=>screen_visible( group1 = 'DET' variable = p_deta ).


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_varil.
  p_varil = o_prog->o_alv->get_f4_layout( ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_varid.
  p_varid = o_prog->o_alvd->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'M01'.
      SUBMIT zap_textos_mail
        AND RETURN
        WITH s_grupo  = 'PROVEEDORES'
        WITH s_codigo = 'AVISO_EM_TRANSP'.
    WHEN OTHERS.
      IF s_perio[] IS INITIAL AND s_ebeln[] IS INITIAL AND s_bedat[] IS INITIAL.
        MESSAGE 'Informe algún filtro' TYPE 'E'.
      ENDIF.
      o_prog->validar_centro( r_werks = s_werks[] obligatorio = 'X' ).
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  o_prog->main( ).
