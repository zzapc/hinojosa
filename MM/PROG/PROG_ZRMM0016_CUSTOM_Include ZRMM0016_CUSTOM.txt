*&---------------------------------------------------------------------*
*&  Include           ZRMM0016_CUSTOM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar_2.

  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.

* Variante
  PERFORM alv_prepare_variant CHANGING ls_variant.
* Preparamos el catálogo de campos
  PERFORM alv_prepare_fielcat_2.

* Preparamos el layout
  PERFORM alv_prepare_layout CHANGING ls_lvc_s_layo.

* >>> YTG 09/02/2017- Preparar el fieldcat exportamos el excel
*Después de preparar el fieldcat exportamos el excel
  IF s_excel IS NOT INITIAL OR s_email IS NOT INITIAL.
    gv_titulo = 'Envío stock de papel'.

    PERFORM exportar_excel.
  ENDIF.
* <<< YTG 09/02/2017

  IF  sy-batch  <> 'X'.
*  IF  p_job IS INITIAL.
* Mostramos el ALV
    CALL METHOD g_grid->set_table_for_first_display
      EXPORTING
        i_buffer_active    = ' '
        i_bypassing_buffer = 'X'
        is_layout          = ls_lvc_s_layo
        i_structure_name   = 'GT_STOCK'
        is_variant         = ls_variant
        i_save             = 'A'
      CHANGING
        it_outtab          = gt_stock[]
        it_fieldcatalog    = gt_fieldcat.
*  ENDIF.
  ENDIF.
ENDFORM.                    " ALV_MOSTRAR_2

*&---------------------------------------------------------------------*
*&      Form  alv_prepare_fielcat_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM alv_prepare_fielcat_2.

  DATA: ls_fcat TYPE lvc_s_fcat.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant, gt_fieldcat.

* Pasar tabla interna al formato del fieldcat
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_internal_tabname     = 'GT_STOCK'
      i_inclname             = sy-repid
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat_ant
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

* Pasar el anterior fieldcat al formato del nuevo
  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      it_fieldcat_alv = gt_fieldcat_ant
    IMPORTING
      et_fieldcat_lvc = gt_fieldcat
    TABLES
      it_data         = gt_stock
    EXCEPTIONS
      it_data_missing = 1
      OTHERS          = 2.

* Recorremos el catálogo de campos modificándolo

  LOOP AT gt_fieldcat INTO ls_fcat.
    lv_tabix = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'WERKS_NAME'.
        ls_fcat-scrtext_l = text-002.
        ls_fcat-scrtext_m = text-002.
        ls_fcat-scrtext_s = text-002.
        ls_fcat-col_opt = 'X'.
*        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.
      WHEN 'KUNNR_NAME'.
        ls_fcat-scrtext_l = text-003.
        ls_fcat-scrtext_m = text-003.
        ls_fcat-scrtext_s = text-003.
        ls_fcat-col_opt = 'X'.
*        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.
* ini - cvivo - 05.03.2018 47105: Campo entrada en almacén
      WHEN 'ERSDA'.
        ls_fcat-scrtext_l = text-019.
        ls_fcat-scrtext_m = text-019.
        ls_fcat-scrtext_s = text-019.
        ls_fcat-col_opt = 'X'.
* fin - cvivo - 05.03.2018 47105: Campo entrada en almacén
*      when 'Z_MATERIALVENTA'.
*        ls_fcat-scrtext_l = text-006.
*        ls_fcat-scrtext_m = text-006.
*        ls_fcat-scrtext_s = text-006.
*
*      when 'Z_UN_MED_ESP_LOTE'.
*        ls_fcat-scrtext_l = text-007.
*        ls_fcat-scrtext_m = text-007.
*        ls_fcat-scrtext_s = text-007.
*
*      when 'Z_ORDEN'.
*        ls_fcat-scrtext_l = text-008.
*        ls_fcat-scrtext_m = text-008.
*        ls_fcat-scrtext_s = text-008.
*      when 'Z_APTOALIM'.
*        ls_fcat-scrtext_l = text-009.
*        ls_fcat-scrtext_m = text-009.
*        ls_fcat-scrtext_s = text-009.
*      when 'Z_CADUC_CORONA'.
*        ls_fcat-scrtext_l = text-010.
*        ls_fcat-scrtext_m = text-010.
*        ls_fcat-scrtext_s = text-010.
*      when 'Z_COEX'.
*        ls_fcat-scrtext_l = text-011.
*        ls_fcat-scrtext_m = text-011.
*        ls_fcat-scrtext_s = text-011.
*      when 'Z_UBICACION'.
*        ls_fcat-scrtext_l = text-012.
*        ls_fcat-scrtext_m = text-012.
*        ls_fcat-scrtext_s = text-012.
*      when 'Z_INC_PLANTA'.
*        ls_fcat-scrtext_l = text-013.
*        ls_fcat-scrtext_m = text-013.
*        ls_fcat-scrtext_s = text-013.
*      when 'Z_RECH_PROD'.
*        ls_fcat-scrtext_l = text-014.
*        ls_fcat-scrtext_m = text-014.
*        ls_fcat-scrtext_s = text-014.
*      when 'Z_INC_EXTERNA'.
*        ls_fcat-scrtext_l = text-015.
*        ls_fcat-scrtext_m = text-015.
*        ls_fcat-scrtext_s = text-015.
*      when 'Z_DEVOLUCION'.
*        ls_fcat-scrtext_l = text-016.
*        ls_fcat-scrtext_m = text-016.
*        ls_fcat-scrtext_s = text-016.
*      when 'Z_EXCESO'.
*        ls_fcat-scrtext_l = text-017.
*        ls_fcat-scrtext_m = text-017.
*        ls_fcat-scrtext_s = text-017.
*      when 'Z_MOT_EXCESO'.
*        ls_fcat-scrtext_l = text-018.
*        ls_fcat-scrtext_m = text-018.
*        ls_fcat-scrtext_s = text-018.
    ENDCASE.

    ls_fcat-tabname       = 'ZSTMM_STOCK'.
*    ls_fcat-ref_table     = 'ZSTMM_STOCK'.
    MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

  ENDLOOP.

* ini - cvivo - 05.03.2018 47105: Campo entrada en almacén
  DELETE gt_fieldcat WHERE fieldname EQ 'LAEDA'.
* fin - cvivo - 05.03.2018 47105: Campo entrada en almacén
  DELETE gt_fieldcat WHERE fieldname EQ 'Z_UN_MED_ESP_LOTE'
                        OR fieldname EQ 'Z_MATERIALVENTA'
                        OR fieldname EQ 'Z_ORDEN'
                        OR fieldname EQ 'Z_APTOALIM'
                        OR fieldname EQ 'Z_CADUC_CORONA'
                        OR fieldname EQ 'Z_COEX'
                        OR fieldname EQ 'Z_UBICACION'
                        OR fieldname EQ 'Z_UBIC_HPAP'
                        OR fieldname EQ 'Z_INC_PLANTA'
                        OR fieldname EQ 'Z_RECH_PROD'
                        OR fieldname EQ 'Z_INC_EXTERNA'
                        OR fieldname EQ 'Z_DEVOLUCION'
                        OR fieldname EQ 'Z_EXCESO'
                        OR fieldname EQ 'Z_MOT_EXCESO'
                        OR fieldname EQ 'KUNNR'
                        OR fieldname EQ 'KUNNR_NAME'
                        OR fieldname EQ 'VCODE'
                        OR fieldname EQ 'HSDAT'.

ENDFORM.                    "alv_prepare_fielcat_2
*&---------------------------------------------------------------------*
*&      Form  datos_adicionales
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM datos_adicionales .
  DATA: l_menge_in  TYPE bstmg,
        l_menge_out TYPE bstmg,
        lt_variant  TYPE TABLE OF rsparams WITH HEADER LINE,
        l_variant   TYPE rsvar-variant,
        lt_nfmat    TYPE TABLE OF nfmat.
  RANGES: lse_lgtyp FOR lqua-lgtyp,
          lse_lgnum FOR lqua-lgnum.

  FIELD-SYMBOLS: <stock> LIKE LINE OF gt_stock.

  IF p_omp IS NOT INITIAL.
* ini - cvivo - 63129
    SELECT * FROM t320
      WHERE werks IN @so_werks
      INTO TABLE @DATA(t_t320).

    LOOP AT t_t320 INTO DATA(w_t320).
      CLEAR: l_variant, lt_variant[].
      CONCATENATE 'STOCK_TOT_' w_t320-lgnum INTO l_variant.

      CALL FUNCTION 'RS_VARIANT_VALUES_TECH_DATA'
        EXPORTING
          report               = 'ZRWM_INTF_OMP'
          variant              = l_variant
        TABLES
          variant_values       = lt_variant
        EXCEPTIONS
          variant_non_existent = 1
          variant_obsolete     = 2
          OTHERS               = 3.

      IF sy-subrc EQ 0.
        LOOP AT lt_variant.
          CASE lt_variant-selname.
            WHEN 'S_LGTYP'.
              MOVE-CORRESPONDING lt_variant TO lse_lgtyp.
              APPEND lse_lgtyp.
              CLEAR lse_lgtyp.
            WHEN 'P_LGNUM'.
              lse_lgnum-low = lt_variant-low.
              lse_lgnum-sign = 'I'.
              lse_lgnum-option = 'EQ'.
              APPEND lse_lgnum.
              CLEAR lse_lgnum.
          ENDCASE.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ENDIF.


  LOOP AT gt_stock ASSIGNING <stock>.
    CLEAR: l_menge_out, l_menge_in.

    SELECT SINGLE lgnum lgtyp lgpla lenum FROM lqua
      INTO ( <stock>-lgnum, <stock>-lgtyp, <stock>-lgpla, <stock>-lenum )
      WHERE matnr EQ <stock>-matnr
        AND werks EQ <stock>-werks
        AND charg EQ <stock>-charg
        AND verme > 0
        AND lgnum IN lse_lgnum
        AND lgtyp IN lse_lgtyp.

    IF p_omp IS NOT INITIAL AND sy-subrc NE 0.
      DELETE TABLE gt_stock FROM <stock>.
      CONTINUE.
    ENDIF.

    <stock>-erfme = 'M'.
    l_menge_in = <stock>-clabs + <stock>-cumlm + <stock>-cinsm + <stock>-ceinm + <stock>-cspem + <stock>-cretm.
    MOVE <stock>-clabs TO l_menge_in.

    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = <stock>-matnr
        i_in_me              = <stock>-meins
        i_out_me             = <stock>-erfme
        i_menge              = l_menge_in
      IMPORTING
        e_menge              = l_menge_out
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.

    IF sy-subrc EQ 0.
      MOVE l_menge_out TO <stock>-erfmg.
      <stock>-erfmg = round( val = <stock>-erfmg dec = 0 ).
    ENDIF.

    SELECT SINGLE lifnr FROM mch1
      INTO <stock>-lifnr
      WHERE charg EQ <stock>-charg
        AND matnr EQ <stock>-matnr.

    IF sy-subrc EQ 0.
      SELECT SINGLE name1 FROM lfa1
        INTO <stock>-vendorname
        WHERE lifnr EQ <stock>-lifnr.
    ENDIF.

    " 61646 - Diámetro
    zcl_wm_nt_generic=>calc_diam_con_kg(
    EXPORTING
      iv_matnr          = <stock>-matnr    " Número de material
      iv_werks          =  <stock>-werks   " Centro
      iv_kg             = l_menge_in    " Cantidad en kilogramos
    IMPORTING
      ev_dia            = DATA(lv_diametro)    " Cantidad en diámetro (cm)
    EXCEPTIONS
      um_no_valid       = 1
      missing_constants = 2
      missing_matnr     = 3
      OTHERS            = 4
      ).

    <stock>-diametro = CONV int4( lv_diametro ).

    IF <stock>-nfmat IS NOT INITIAL.
      COLLECT <stock>-nfmat INTO lt_nfmat. " evitar duplicados
    ENDIF.
  ENDLOOP.

  LOOP AT lt_nfmat INTO DATA(nfmat).
    LOOP AT gt_stock ASSIGNING <stock> WHERE matnr EQ nfmat.
      <stock>-nfmat = <stock>-matnr.
      <stock>-zmaktx_reempl = <stock>-maktx.
    ENDLOOP.
  ENDLOOP.

ENDFORM.
