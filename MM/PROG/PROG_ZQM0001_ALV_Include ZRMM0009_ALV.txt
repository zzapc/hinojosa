*&---------------------------------------------------------------------*
*&  Include           ZQM0001_ALV
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar .

  IF gs_dyn100-container IS NOT BOUND.

    CREATE OBJECT gs_dyn100-container
      EXPORTING
        container_name              = 'GS_DYN100-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.

        cl_salv_table=>factory(
          EXPORTING
            r_container    = gs_dyn100-container
            container_name = 'GS_DYN100-CONTAINER'
          IMPORTING
            r_salv_table = go_alv
          CHANGING
            t_table      = gt_datos ).

        PERFORM tunning_alv.

        go_alv->display( ).

      CATCH cx_root.
*     error handling
    ENDTRY.

  ENDIF.

ENDFORM.                    " ALV_MOSTRAR

FORM tunning_alv.

  DATA: lr_columns    TYPE REF TO cl_salv_columns,
        lr_cols_tab   TYPE REF TO cl_salv_columns_table,
        lr_column     TYPE REF TO cl_salv_column_table,
        lr_func_list  TYPE REF TO cl_salv_functions_list,
        lr_events     TYPE REF TO cl_salv_events_table,
        lr_selections TYPE REF TO cl_salv_selections,
        lo_layout     TYPE REF TO cl_salv_layout,
        lo_column     TYPE REF TO cl_salv_column,
        lo_columns    TYPE REF TO cl_salv_columns_table.

  DATA: lt_rows   TYPE salv_t_row,
        lt_column TYPE salv_t_column,
        ls_cell   TYPE salv_s_cell,
        lv_text   TYPE string,
        lv_key    TYPE salv_s_layout_key. "To save ALV salv_table

* Grabar disposición.
  CLEAR: lv_key.

  lv_key-report = sy-repid.
  lv_key-handle = '1'.

  lo_layout = go_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_selections = go_alv->get_selections( ).
*
  " Modo de selección múltiple
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>multiple ).

  lr_events = go_alv->get_event( ).

  CREATE OBJECT gr_events.
  SET HANDLER gr_events->on_user_command FOR lr_events.

  lr_func_list = go_alv->get_functions( ).
  lr_func_list->set_all( abap_true ).

  TRY.

      lv_text = text-b01.
      lr_func_list->add_function(
        name     = 'EXE'
        icon     = '@15@'
        text     = lv_text
        tooltip  = lv_text
        position = if_salv_c_function_position=>right_of_salv_functions ).

    CATCH cx_salv_wrong_call cx_salv_existing.

  ENDTRY.

  lr_columns = go_alv->get_columns( ).
  lr_cols_tab = go_alv->get_columns( ).
  lr_columns->set_optimize( abap_true ).
  lr_cols_tab->set_optimize( abap_true ).

* Formateo de columnas.
  lo_columns = go_alv->get_columns( ).

  TRY.

      lo_column = lo_columns->get_column( 'CENTRO' ).
      lo_column->set_short_text( text-002 ).
      lo_column->set_medium_text( text-002 ).
      lo_column->set_long_text( text-002 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'ALMACEN' ).
      lo_column->set_short_text( text-003 ).
      lo_column->set_medium_text( text-003 ).
      lo_column->set_long_text( text-003 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'COD_MAT_BOBINA' ).
      lo_column->set_short_text( 'Mat. bob.' ).
      lo_column->set_medium_text( 'Material bobina' ).
      lo_column->set_long_text( 'Material bobina' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'MAT_BOBINA_DESC' ).
      lo_column->set_short_text( 'Desc. bob.' ).
      lo_column->set_medium_text( 'Desc. bobina' ).
      lo_column->set_long_text( 'Desc. bobina' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'LOTE_BOBINA' ).
      lo_column->set_short_text( 'Lote bob.' ).
      lo_column->set_medium_text( text-005 ).
      lo_column->set_long_text( text-005 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'PESO_BOBINA' ).
      lo_column->set_short_text( 'Peso bob.' ).
      lo_column->set_medium_text( 'Peso bobina' ).
      lo_column->set_long_text( 'Peso bobina' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'UMB_BOBINA' ).
      lo_column->set_short_text( text-007 ).
      lo_column->set_medium_text( text-007 ).
      lo_column->set_long_text( text-007 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'OF_BOBINA' ).
      lo_column->set_short_text( text-008 ).
      lo_column->set_medium_text( text-008 ).
      lo_column->set_long_text( text-008 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'FECH_FAB_BOBINA' ).
      lo_column->set_short_text( 'Fecha bob.' ).
      lo_column->set_medium_text( 'Fecha bobina' ).
      lo_column->set_long_text( 'Fecha bobina' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'DE_BOBINA' ).
      lo_column->set_short_text( 'DE bobina' ).
      lo_column->set_medium_text( 'DE bobina' ).
      lo_column->set_long_text( 'DE bobina' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'MOTIVO_REPRO' ).
      lo_column->set_short_text( 'Mot. rep.' ).
      lo_column->set_medium_text( 'Motivo reproceso' ).
      lo_column->set_long_text( 'Motivo reproceso' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'MOTIVO_PULPER' ).
      lo_column->set_short_text( 'Mot. pulp.' ).
      lo_column->set_medium_text( 'Motivo pulper' ).
      lo_column->set_long_text( 'Motivo pulper' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'COD_MAT_ROLLO' ).
      lo_column->set_short_text( 'Mat. rollo' ).
      lo_column->set_medium_text( 'Material rollo' ).
      lo_column->set_long_text( 'Material rollo' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'MAT_ROLLO_DESC' ).
      lo_column->set_short_text( 'Des. rollo' ).
      lo_column->set_medium_text( 'Descripción rollo' ).
      lo_column->set_long_text( 'Descripción rollo' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'LOTE_ROLLO' ).
      lo_column->set_short_text( text-011 ).
      lo_column->set_medium_text( text-011 ).
      lo_column->set_long_text( text-011 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'PESO_ROLLO' ).
      lo_column->set_short_text( 'Peso rollo' ).
      lo_column->set_medium_text( 'Peso rollo' ).
      lo_column->set_long_text( 'Peso rollo' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'UMB_ROLLO' ).
      lo_column->set_short_text( text-013 ).
      lo_column->set_medium_text( text-013 ).
      lo_column->set_long_text( text-013 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'OF_ROLLO' ).
      lo_column->set_short_text( text-014 ).
      lo_column->set_medium_text( text-014 ).
      lo_column->set_long_text( text-014 ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'FECH_FAB_ROLLO' ).
      lo_column->set_short_text( 'Fecha rol.' ).
      lo_column->set_medium_text( 'Fecha rollo' ).
      lo_column->set_long_text( 'Fecha rollo' ).

    CATCH cx_root.

  ENDTRY.

  TRY.

      lo_column = lo_columns->get_column( 'DE_ROLLO' ).
      lo_column->set_short_text( 'DE rollo' ).
      lo_column->set_medium_text( 'DE rollo' ).
      lo_column->set_long_text( 'DE rollo' ).

    CATCH cx_root.

  ENDTRY.

ENDFORM.

FORM handle_user_command100 USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows     TYPE salv_t_row,
        ls_mapl     TYPE mapl,
        ls_ztpp0067 TYPE ztpp0067,
        lv_answer   TYPE char01,
        lv_error    TYPE xflag.

  CASE i_ucomm.

    WHEN 'EXE'.

      PERFORM popup_confirm CHANGING lv_answer.

      CHECK lv_answer = '1'.

      PERFORM obtener_seleccion_alv100 CHANGING lt_rows.

      IF lt_rows IS NOT INITIAL.

        LOOP AT lt_rows ASSIGNING FIELD-SYMBOL(<lfs_row>).

          ASSIGN gt_datos[ <lfs_row> ] TO FIELD-SYMBOL(<lfs_datos>).

          IF sy-subrc <> 0.

            CONTINUE.

          ENDIF.

          PERFORM cambiar_de_bobina USING lv_error
                                    CHANGING <lfs_datos>.

          IF lv_error IS NOT INITIAL.

            "ERROR

          ENDIF.

        ENDLOOP.

        PERFORM recuperar_datos.
        go_alv->refresh( refresh_mode = if_salv_c_refresh=>full ).

      ELSE.

        MESSAGE |Seleccionar al menos una bobina| TYPE 'I' DISPLAY LIKE 'W'.

      ENDIF.

  ENDCASE.

ENDFORM.
