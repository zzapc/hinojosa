*&---------------------------------------------------------------------*
*&  Include           ZRMM0002_CLASS
*&---------------------------------------------------------------------*

* Para los eventos
CLASS lcl_application DEFINITION DEFERRED.
DATA  g_application TYPE REF TO lcl_application.
DATA: gs_toolbar TYPE stb_button.

*&---------------------------------------------------------------------*
*&       Class lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application DEFINITION.

* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*   Evento para actualizar los datos antes de que se modifique la tabla
    METHODS handle_data_changed
                FOR EVENT data_changed OF cl_gui_alv_grid
      IMPORTING er_data_changed e_onf4
                e_onf4_before e_onf4_after e_ucomm.

*   Evento para actualizar los datos después de modificar la tabla
    METHODS handle_data_changed_finished
                FOR EVENT data_changed_finished OF cl_gui_alv_grid
      IMPORTING e_modified et_good_cells.

*   Evento para detectar accion botonera
    METHODS handle_user_command
                FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.

*   Evento para que añada botones al menu
    METHODS handle_toolbar
                FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.

*   Evento para detectar el link
    METHODS handle_hotspot_click
                FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_row_id e_column_id es_row_no.

* Privado
  PRIVATE SECTION.
    DATA: it_insert TYPE TABLE OF ty_insert.

ENDCLASS.                    "lcl_application DEFINITION


*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application IMPLEMENTATION.

* Para los cambios (antes de que se modifique la tabla del ALV)
  METHOD handle_data_changed.
*   Tablas internas
    DATA: lti_mod_cells TYPE lvc_t_modi.    "Cuando se modifican líneas
    DATA: lv_num(16) TYPE c,
          lv_no      TYPE char1,
          lv_num1    TYPE p DECIMALS 2,
          lv_index   TYPE i.

*   Estructuras internas
    DATA: ls_celda TYPE         lvc_s_modi,
          ls_modif LIKE LINE OF gt_datos_1000.

*   Recuperamos las líneas modificadas
    lti_mod_cells = er_data_changed->mt_mod_cells.

*   Para las líneas insertadas
    IF lti_mod_cells[] IS NOT INITIAL.
      LOOP AT lti_mod_cells INTO ls_celda.
        lv_index = sy-tabix.
        READ TABLE gt_datos_1000 INTO gs_datos_1000
         INDEX  ls_celda-row_id.

        READ TABLE gt_datos_1000 INTO ls_modif
         INDEX  ls_celda-row_id.
        IF sy-subrc = 0.
          CLEAR ls_modif.
          CASE ls_celda-fieldname.
            WHEN 'NETPR'.
* INI UDEFINEDES 28.11.2017 45067

              CALL FUNCTION 'MOVE_CHAR_TO_NUM'
                EXPORTING
                  chr             = ls_celda-value
                IMPORTING
                  num             = lv_num1
                EXCEPTIONS
                  convt_no_number = 1
                  convt_overflow  = 2
                  OTHERS          = 3.

              IF lv_num1 GT 250.

                CALL METHOD er_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZMM'
                    i_msgty     = 'E'
                    i_msgno     = '000'
                    i_msgv1     = text-021
                    i_fieldname = 'NETPR'.
*                    i_row_id    = '1'
*                    i_tabix     = '1'.

                DELETE er_data_changed->mt_mod_cells WHERE row_id = ls_celda-row_id.
                EXIT.
              ELSE.
*                REPLACE '.' WITH '' INTO ls_celda-value.
*                CONDENSE ls_celda-value NO-GAPS.
*                REPLACE ',' WITH '.' INTO ls_celda-value.
                gs_datos_1000-netpr = lv_num1."ls_celda-value.
                MODIFY gt_datos_1000 FROM gs_datos_1000 INDEX ls_celda-row_id.
              ENDIF.
          ENDCASE.
        ENDIF.
      ENDLOOP.
    ENDIF.

    CHECK NOT lv_no IS INITIAL.

    CALL METHOD er_data_changed->display_protocol.

  ENDMETHOD.                    "handle_data_changed

***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_user_command
***********************************************************************

  METHOD handle_user_command.
    DATA: index_rows TYPE lvc_t_row.

    REFRESH lt_sel_rows.
*    REFRESH lt_rows_no.
    CASE e_ucomm.

      WHEN   'BT_MODIFKG'.
        CALL METHOD grid->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.
        IF NOT lt_sel_rows[] IS INITIAL.
          PERFORM fijar_peso USING e_ucomm.
        ELSE.
          MESSAGE w066.
        ENDIF.

      WHEN 'BT_ANADIR'.

        CALL METHOD grid->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.

        IF NOT lt_sel_rows[] IS INITIAL.
          PERFORM anadir_bala USING e_ucomm.
          PERFORM save_data_after_modify_balas.
        ELSE.
          MESSAGE w066.
        ENDIF.

      WHEN 'BT_DESCONTAR'.

        CALL METHOD grid->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.

        IF NOT lt_sel_rows[] IS INITIAL.
          PERFORM descontar_bala USING e_ucomm.

          PERFORM save_data_after_modify_balas.

        ELSE.
          MESSAGE w066.
        ENDIF.

*        PERFORM modificar_pesada USING e_ucomm.


      WHEN 'BT_BORRAR'.

        CALL METHOD grid->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.

        PERFORM borrar_pesada.

      WHEN 'BT_RECUPERAR'.

        CALL METHOD grid->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.

        PERFORM recuperar_pesada.


      WHEN 'BT_RIMPR'.

        CALL METHOD grid->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.

*        PERFORM reimprimir USING e_ucomm.
*        PERFORM reimprimir_smartforms USING e_ucomm.
        PERFORM reimprimir_smartforms_multiple USING e_ucomm. "CGV - SAT 7000012752

      WHEN OTHERS.
    ENDCASE.
*
*    call method grid->refresh_table_display.


  ENDMETHOD.                    "handle_user_command
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_menu_button
***********************************************************************
  METHOD handle_toolbar.

*    refresh e_object->mt_toolbar.

    CLEAR gs_toolbar.
    MOVE  'BT_MODIFKG'                    TO gs_toolbar-function.
    MOVE  icon_physical_sample           TO gs_toolbar-icon.
    MOVE  'MODIFICAR KG NETOS'   TO gs_toolbar-quickinfo.
**    MOVE 0                             TO gs_toolbar-butn_type.
    MOVE  'Modif. KG Netos'               TO gs_toolbar-text.
* GST - 02/03/2015 ->
    IF sy-tcode = 'ZMM0004' AND gv_contabilizado = 'X'.
      MOVE 'X'                         TO gs_toolbar-disabled.
* GST - 21/05/2015 ->
    ELSEIF sy-tcode = 'ZMM0004' AND gv_pedido_ok = 'X'.
      MOVE 'X'                         TO gs_toolbar-disabled.
* GST - 21/05/2015 <-
    ELSE.
* GST - 02/03/2015 <-
      MOVE space                         TO gs_toolbar-disabled.
* GST - 02/03/2015 ->
    ENDIF.
* GST - 02/03/2015 <-
    APPEND gs_toolbar                  TO e_object->mt_toolbar.

*   Icono añadir bala
    CLEAR gs_toolbar.
    MOVE  'BT_ANADIR'                    TO gs_toolbar-function.
    MOVE  icon_te_advance_payment           TO gs_toolbar-icon.
    MOVE  'AÑADIR BALAS'   TO gs_toolbar-quickinfo.
**    MOVE 0                             TO gs_toolbar-butn_type.
    MOVE  'Añadir Balas'               TO gs_toolbar-text.
* GST - 02/03/2015 ->
    IF sy-tcode = 'ZMM0004' AND gv_contabilizado = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 ->
    ELSEIF sy-tcode = 'ZMM0004' AND gv_pedido_ok = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 <-
    ELSE.
* GST - 02/03/2015 <-
      MOVE space                         TO gs_toolbar-disabled.
* GST - 02/03/2015 ->
    ENDIF.
* GST - 02/03/2015 <-
    APPEND gs_toolbar                  TO e_object->mt_toolbar.

*   Icono quitar bala
    CLEAR gs_toolbar.
    MOVE  'BT_DESCONTAR'                    TO gs_toolbar-function.
    MOVE  icon_te_deduction           TO gs_toolbar-icon.
    MOVE  'DESCONTAR BALAS'   TO gs_toolbar-quickinfo.
**    MOVE 0                             TO gs_toolbar-butn_type.
    MOVE  'Descontar Balas'               TO gs_toolbar-text.
* GST - 02/03/2015 ->
    IF sy-tcode = 'ZMM0004' AND gv_contabilizado = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 ->
    ELSEIF sy-tcode = 'ZMM0004' AND gv_pedido_ok = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 <-
    ELSE.
* GST - 02/03/2015 <-
      MOVE space                         TO gs_toolbar-disabled.
* GST - 02/03/2015 ->
    ENDIF.
* GST - 02/03/2015 <-
    APPEND gs_toolbar                  TO e_object->mt_toolbar.

*   Icono grabar y lanzar bapi
    CLEAR gs_toolbar.
    MOVE  'BT_BORRAR'                    TO gs_toolbar-function.
    MOVE  icon_delete           TO gs_toolbar-icon.
    MOVE  'BORRAR LINEA'   TO gs_toolbar-quickinfo.
**    MOVE 0                             TO gs_toolbar-butn_type.
    MOVE  'Borrar Linea'               TO gs_toolbar-text.
* GST - 02/03/2015 ->
    IF sy-tcode = 'ZMM0004' AND gv_contabilizado = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 ->
    ELSEIF sy-tcode = 'ZMM0004' AND gv_pedido_ok = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 <-
    ELSE.
* GST - 02/03/2015 <-
      MOVE space                         TO gs_toolbar-disabled.
* GST - 02/03/2015 ->
    ENDIF.
* GST - 02/03/2015 <-
    APPEND gs_toolbar                  TO e_object->mt_toolbar.

**********************************************************************
*   Icono grabar y lanzar bapi
    CLEAR gs_toolbar.
    MOVE  'BT_RECUPERAR'                    TO gs_toolbar-function.
    MOVE  icon_system_undo           TO gs_toolbar-icon.
    MOVE  'RECUPERAR LINEA'   TO gs_toolbar-quickinfo.
**    MOVE 0                             TO gs_toolbar-butn_type.
    MOVE  'Recupear Linea'               TO gs_toolbar-text.
* GST - 02/03/2015 ->
    IF sy-tcode = 'ZMM0004' AND gv_contabilizado = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 ->
    ELSEIF sy-tcode = 'ZMM0004' AND gv_pedido_ok = 'X'.
      MOVE 'X' TO gs_toolbar-disabled.
* GST - 21/05/2015 <-
    ELSE.
* GST - 02/03/2015 <-
      MOVE space                         TO gs_toolbar-disabled.
* GST - 02/03/2015 ->
    ENDIF.
* GST - 02/03/2015 <-
    APPEND gs_toolbar                  TO e_object->mt_toolbar.
**********************************************************************

*   Icono grabar y lanzar bapi
    CLEAR gs_toolbar.
    MOVE  'BT_RIMPR'               TO gs_toolbar-function.
    MOVE  icon_print               TO gs_toolbar-icon.
    MOVE  'RE-IMPRIMIR ETIQUETA'   TO gs_toolbar-quickinfo.
    MOVE  'RE-Imprimir Etiqueta'   TO gs_toolbar-text.
    MOVE space                     TO gs_toolbar-disabled.
    APPEND gs_toolbar              TO e_object->mt_toolbar.

  ENDMETHOD.                    "handle_toolbar
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_data_changed_finished
***********************************************************************
* para los cambios (después de que se modifique la tabla del alv)
  METHOD handle_data_changed_finished.


  ENDMETHOD.                    "handle_data_changed_finished

  METHOD handle_hotspot_click.

**    leemos la tabla con datos y pasamos a la estructura la linea
**    seleccionada
*    READ TABLE ti_table INDEX e_row_id-index INTO ti_datos_pos.
*    CASE e_column_id.
*      WHEN 'ARBPL'.
*        IF NOT ti_datos_pos-arbpl IS INITIAL.
*          SET PARAMETER ID 'AGR' FIELD ti_datos_pos-arbpl.
*          CALL TRANSACTION 'ZPP011'." AND SKIP FIRST SCREEN.
*        ENDIF.
*    ENDCASE.

  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.                    "lcl_application IMPLEMENTATION


********************************************************************
********************************************************************
*  PARA LA DYNPRO 3000
************************************************************
************************************************************


* Para los eventos
CLASS lcl_application3 DEFINITION DEFERRED.
DATA  g_application3 TYPE REF TO lcl_application3.
DATA: gs_toolbar3 TYPE stb_button.

*&---------------------------------------------------------------------*
*&       Class lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application3 DEFINITION.

* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*   Evento para actualizar los datos antes de que se modifique la tabla
    METHODS handle_data_changed
                FOR EVENT data_changed OF cl_gui_alv_grid
      IMPORTING er_data_changed e_onf4
                e_onf4_before e_onf4_after e_ucomm.

*   Evento para actualizar los datos después de modificar la tabla
    METHODS handle_data_changed_finished
                FOR EVENT data_changed_finished OF cl_gui_alv_grid
      IMPORTING e_modified et_good_cells.

*   Evento para detectar accion botonera
    METHODS handle_user_command
                FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.

*   Evento para que añada botones al menu
    METHODS handle_toolbar
                FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.

*   Evento para detectar el link
    METHODS handle_hotspot_click
                FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_row_id e_column_id es_row_no.

* Privado
  PRIVATE SECTION.
    DATA: it_insert TYPE TABLE OF ty_insert.

ENDCLASS.                    "lcl_application DEFINITION


*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application3 IMPLEMENTATION.

* Para los cambios (antes de que se modifique la tabla del ALV)
  METHOD handle_data_changed.

    DATA: gs_pesada LIKE LINE OF pesada_parcial.
*   Tablas internas
    DATA: lti_mod_cells TYPE lvc_t_modi.    "Cuando se modifican líneas

*   Estructuras internas
    DATA: ls_celda TYPE         lvc_s_modi,
          ls_modif LIKE LINE OF gt_pparcial.

    DATA: lv_index LIKE sy-tabix.

*   Recuperamos las líneas modificadas
    lti_mod_cells = er_data_changed->mt_mod_cells.

*   Para las líneas insertadas
    IF lti_mod_cells[] IS NOT INITIAL.
      LOOP AT lti_mod_cells INTO ls_celda.
        READ TABLE gt_pparcial INTO gs_pparcial
             INDEX  ls_celda-row_id.
        IF sy-subrc = 0.
          CLEAR ls_modif.

          CASE ls_celda-fieldname.
            WHEN 'FTANZPK'.
              gs_pparcial-ftanzpk = ls_celda-value.
              MODIFY gt_pparcial FROM gs_pparcial INDEX ls_celda-row_id.

            WHEN 'LGORT'.
              gs_pparcial-lgort = ls_celda-value.

              READ TABLE gt_pparcial INTO gs_pesada
              WITH KEY matnr = gs_pparcial-matnr
                       lgort = gs_pparcial-lgort.
              IF sy-subrc = 0.
                CLEAR gs_pparcial-lgort.
                MODIFY gt_pparcial FROM gs_pparcial INDEX ls_celda-row_id.
                MESSAGE w045.
              ELSE.
                MODIFY gt_pparcial FROM gs_pparcial INDEX ls_celda-row_id.
              ENDIF.

            WHEN 'ZDISCONFORMIDAD'.
              gs_pparcial-zdisconformidad = ls_celda-value.
              MODIFY gt_pparcial FROM gs_pparcial INDEX ls_celda-row_id.
            WHEN OTHERS.
          ENDCASE.
        ENDIF.
      ENDLOOP.

*     CALCULAMOS LA CANTIDAD DE KG POR POSICION
      IF NOT gv_ntgew_c IS INITIAL.
*       CALCULAMOS LOS BULTOS TOTALES
        CLEAR gv_bultos_tot.
        LOOP AT gt_pparcial INTO gs_pparcial WHERE NOT ftanzpk IS INITIAL.
          gv_bultos_tot = gv_bultos_tot + gs_pparcial-ftanzpk.
        ENDLOOP.

*       REPARTIR EL PESO
        LOOP AT gt_pparcial INTO gs_pparcial WHERE NOT ftanzpk IS INITIAL.
          lv_index = sy-tabix.
          gs_pparcial-ktmng = ( gs_pparcial-ftanzpk * gv_ntgew_c ) / gv_bultos_tot.
          MODIFY gt_pparcial FROM gs_pparcial INDEX lv_index.
        ENDLOOP.
      ENDIF.
    ENDIF.

* GST - 03/03/2015 ->
*   Recuperamos las líneas modificadas
    lti_mod_cells_3000 = er_data_changed->mt_mod_cells.
**   Recuperamos las líneas modificadas
*     IF lti_mod_cells_4000[] is not initial.
*       gv_bck_modif = 'X'.
*     ELSE.
*       clear gv_bck_modif.
*     ENDIF.
* GST - 03/03/2015 <-

  ENDMETHOD.                    "handle_data_changed

***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_user_command
***********************************************************************

  METHOD handle_user_command.
    DATA: index_rows TYPE lvc_t_row.

    REFRESH lt_sel_rows.
*    REFRESH lt_rows_no.

    CASE e_ucomm.
      WHEN 'BT_DUPLI'.
        CALL METHOD grid3->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.

        CALL METHOD cl_gui_cfw=>flush.

        PERFORM duplicar_linea USING sy-dynnr.

      WHEN OTHERS.
    ENDCASE.

    CALL METHOD grid3->refresh_table_display.


  ENDMETHOD.                    "handle_user_command
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_menu_button
***********************************************************************
  METHOD handle_toolbar.
*refresh e_object->mt_toolbar.
*   Icono grabar y lanzar bapi
    CLEAR gs_toolbar.
    MOVE  'BT_DUPLI'                    TO gs_toolbar-function.
    MOVE  icon_copy_object          TO gs_toolbar-icon.
    MOVE  'DUPICAR LINEA'   TO gs_toolbar-quickinfo.
    MOVE  'Duplicar linea'               TO gs_toolbar-text.
    MOVE space                         TO gs_toolbar-disabled.
    APPEND gs_toolbar                  TO e_object->mt_toolbar.

  ENDMETHOD.                    "handle_toolbar
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_data_changed_finished
***********************************************************************
* para los cambios (después de que se modifique la tabla del alv)
  METHOD handle_data_changed_finished.

*    DATA: ls_modif  TYPE LINE OF lvc_t_modi,
*          ls_modif2 TYPE LINE OF lvc_t_modi.
*
*    DATA: lti_celltab TYPE lvc_t_styl,
*          ls_celltab  TYPE lvc_s_styl,
*          ls_fcat     TYPE lvc_s_fcat.
*
**   Recorremos la tabla de la clase actualizando la global
*    LOOP AT et_good_cells INTO ls_modif.
*
*      READ TABLE gt_pparcial INTO gs_pparcial INDEX ls_modif-row_id.
*
*
*    ENDLOOP.

  ENDMETHOD.                    "handle_data_changed_finished

  METHOD handle_hotspot_click.

**    leemos la tabla con datos y pasamos a la estructura la linea
**    seleccionada
*    READ TABLE ti_table INDEX e_row_id-index INTO ti_datos_pos.
*    CASE e_column_id.
*      WHEN 'ARBPL'.
*        IF NOT ti_datos_pos-arbpl IS INITIAL.
*          SET PARAMETER ID 'AGR' FIELD ti_datos_pos-arbpl.
*          CALL TRANSACTION 'ZPP011'." AND SKIP FIRST SCREEN.
*        ENDIF.
*    ENDCASE.

  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.                    "lcl_application IMPLEMENTATION


********************************************************************
**************************************************************************************
********************************************************************
*  PARA LA DYNPRO 4000
********************************************************************
**************************************************************************************
********************************************************************


* Para los eventos
CLASS lcl_application4 DEFINITION DEFERRED.
DATA  g_application4 TYPE REF TO lcl_application4.
DATA: gs_toolbar4 TYPE stb_button.

*&---------------------------------------------------------------------*
*&       Class lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application4 DEFINITION.

* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*   Evento para actualizar los datos antes de que se modifique la tabla
    METHODS handle_data_changed
                FOR EVENT data_changed OF cl_gui_alv_grid
      IMPORTING er_data_changed e_onf4
                e_onf4_before e_onf4_after e_ucomm.

*   Evento para actualizar los datos después de modificar la tabla
    METHODS handle_data_changed_finished
                FOR EVENT data_changed_finished OF cl_gui_alv_grid
      IMPORTING e_modified et_good_cells.

*   Evento para detectar accion botonera
    METHODS handle_user_command
                FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.

*   Evento para que añada botones al menu
    METHODS handle_toolbar
                FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.
*   Evento para detectar el link
    METHODS handle_hotspot_click
                FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_row_id e_column_id es_row_no.

*INI CMS 52652   Grabar el borrado de balas y no permitir cambio de proveedor +F4 Almacen
    METHODS on_f4 FOR EVENT onf4 OF cl_gui_alv_grid
*      IMPORTING es_row_no e_fieldname er_event_data.
      IMPORTING e_fieldname
                es_row_no
                er_event_data
                et_bad_cells
                e_display. " data_changed.
*FIN CMS 52652   Grabar el borrado de balas y no permitir cambio de proveedor +F4 Almacen



* Privado
  PRIVATE SECTION.
    DATA: it_insert TYPE TABLE OF ty_insert.

ENDCLASS.                    "lcl_application DEFINITION


*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application4 IMPLEMENTATION.

* Para los cambios (antes de que se modifique la tabla del ALV)
  METHOD handle_data_changed.

**   Tablas internas
*    DATA: lti_mod_cells TYPE lvc_t_modi.    "Cuando se modifican líneas
*
**   Estructuras internas
*    DATA: ls_celda TYPE         lvc_s_modi,
*          ls_modif LIKE LINE OF gt_pparcial.
*
*    DATA: lv_index LIKE sy-tabix.
*
**   Recuperamos las líneas modificadas
*    lti_mod_cells = er_data_changed->mt_mod_cells.
*
**   Para las líneas insertadas
*    IF lti_mod_cells[] IS NOT INITIAL.
*      LOOP AT lti_mod_cells INTO ls_celda.
*        READ TABLE gt_pparcial INTO gs_pparcial
*             INDEX  ls_celda-row_id.
*        IF sy-subrc = 0.
*          CLEAR ls_modif.
*          CASE ls_celda-fieldname.
*            WHEN 'FTANZPK'.
*              gs_pparcial-ftanzpk = ls_celda-value.
*              MODIFY gt_pparcial FROM gs_pparcial INDEX ls_celda-row_id.
*
*            WHEN 'LGORT'.
*              gs_pparcial-lgort = ls_celda-value.
*              MODIFY gt_pparcial FROM gs_pparcial INDEX ls_celda-row_id.
*            WHEN 'ZDISCONFORMIDAD'.
*              gs_pparcial-zdisconformidad = ls_celda-value.
*              MODIFY gt_pparcial FROM gs_pparcial INDEX ls_celda-row_id.
*            WHEN OTHERS.
*          ENDCASE.
*        ENDIF.
*      ENDLOOP.
*
** CALCULAMOS LA CANTIDAD DE KG POR POSICION
*      IF NOT gv_ntgew_c IS INITIAL.
** CALCULAMOS LOS BULTOS TOTALES
*        CLEAR gv_bultos_tot.
*        LOOP AT gt_pparcial INTO gs_pparcial WHERE NOT ftanzpk IS INITIAL.
*          gv_bultos_tot = gv_bultos_tot + gs_pparcial-ftanzpk.
*        ENDLOOP.
*
** REPARTIR EL PESO
*        LOOP AT gt_pparcial INTO gs_pparcial WHERE NOT ftanzpk IS INITIAL.
*          lv_index = sy-tabix.
*          gs_pparcial-ktmng = ( gs_pparcial-ftanzpk * gv_ntgew_c ) / gv_bultos_tot.
*          MODIFY gt_pparcial FROM gs_pparcial INDEX lv_index.
*        ENDLOOP.
*      ENDIF.
*    ENDIF.

* GST - 03/03/2015 ->
*   Recuperamos las líneas modificadas
    lti_mod_cells_4000 = er_data_changed->mt_mod_cells.
*   Recuperamos las líneas modificadas
    IF lti_mod_cells_4000[] IS NOT INITIAL.
      gv_bck_modif = 'X'.
*APC20240719
      LOOP AT lti_mod_cells_4000 ASSIGNING FIELD-SYMBOL(<c>) WHERE value NE ''.
        READ TABLE gt_pfinal ASSIGNING FIELD-SYMBOL(<final>) INDEX <c>-row_id.
        IF sy-subrc = 0.
          IF NOT <final>-urzzt IS INITIAL.
            gs_residuos-ler = <final>-urzzt.
            v_hay_ler = 'X'.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ELSE.
      CLEAR gv_bck_modif.
    ENDIF.
*     CLEAR: lti_mod_cells.
*     REFRESH: lti_mod_cells.

* GST - 03/03/2015 <-

  ENDMETHOD.                    "handle_data_changed

***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_user_command
***********************************************************************

  METHOD handle_user_command.
    DATA: index_rows TYPE lvc_t_row.

    REFRESH lt_sel_rows.
*    REFRESH lt_rows_no.
    CASE e_ucomm.
      WHEN 'BT_DUPLI'.

        CALL METHOD grid4->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.

        PERFORM duplicar_linea USING sy-dynnr.


      WHEN OTHERS.
    ENDCASE.

    CALL METHOD grid4->refresh_table_display.


  ENDMETHOD.                    "handle_user_command
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_menu_button
***********************************************************************
  METHOD handle_toolbar.
*    refresh e_object->mt_toolbar.

*   Icono grabar y lanzar bapi
    CLEAR gs_toolbar.
    MOVE  'BT_DUPLI'                    TO gs_toolbar-function.
    MOVE  icon_copy_object          TO gs_toolbar-icon.
    MOVE  'DUPICAR LINEA'   TO gs_toolbar-quickinfo.
**    MOVE 0                             TO gs_toolbar-butn_type.
    MOVE  'Duplicar linea'               TO gs_toolbar-text.
    MOVE space                         TO gs_toolbar-disabled.
    APPEND gs_toolbar                  TO e_object->mt_toolbar.

  ENDMETHOD.                    "handle_toolbar
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_data_changed_finished
***********************************************************************
* para los cambios (después de que se modifique la tabla del alv)
  METHOD handle_data_changed_finished.
*
*    DATA: ls_modif  TYPE LINE OF lvc_t_modi,
*          ls_modif2 TYPE LINE OF lvc_t_modi.
*
*    DATA: lti_celltab TYPE lvc_t_styl,
*          ls_celltab  TYPE lvc_s_styl,
*          ls_fcat     TYPE lvc_s_fcat.
*
**   Recorremos la tabla de la clase actualizando la global
*    LOOP AT et_good_cells INTO ls_modif.
*
*      READ TABLE gt_pparcial INTO gs_pparcial INDEX ls_modif-row_id.
*
*
*    ENDLOOP.

*APC20240902 Para que refresque la pantalla tras los cambios del grid
    cl_gui_cfw=>set_new_ok_code( '/00' ).
    cl_gui_cfw=>flush( ).

  ENDMETHOD.                    "handle_data_changed_finished

  METHOD handle_hotspot_click.

**    leemos la tabla con datos y pasamos a la estructura la linea
**    seleccionada
*    READ TABLE ti_table INDEX e_row_id-index INTO ti_datos_pos.
*    CASE e_column_id.
*      WHEN 'ARBPL'.
*        IF NOT ti_datos_pos-arbpl IS INITIAL.
*          SET PARAMETER ID 'AGR' FIELD ti_datos_pos-arbpl.
*          CALL TRANSACTION 'ZPP011'." AND SKIP FIRST SCREEN.
*        ENDIF.
*    ENDCASE.




  ENDMETHOD.                    "handle_hotspot_click

*INI CMS 52652   Grabar el borrado de balas y no permitir cambio de proveedor +F4 Almacen
  METHOD on_f4.

    PERFORM on_f4 USING e_fieldname
                    es_row_no-row_id
                    er_event_data
                    et_bad_cells
                    e_display
                    .
*                er_data_changed.

  ENDMETHOD.

*FIN CMS 52652   Grabar el borrado de balas y no permitir cambio de proveedor +F4 Almacen

ENDCLASS.                    "lcl_application IMPLEMENTATION

********************************************************************
********************************************************************
*  PARA LA DYNPRO 0600
************************************************************
************************************************************


* Para los eventos
CLASS lcl_application6 DEFINITION DEFERRED.
DATA  g_application6 TYPE REF TO lcl_application6.
DATA: gs_toolbar6 TYPE stb_button.

*&---------------------------------------------------------------------*
*&       Class lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application6 DEFINITION.

* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*   Evento para actualizar los datos antes de que se modifique la tabla
    METHODS handle_data_changed
                FOR EVENT data_changed OF cl_gui_alv_grid
      IMPORTING er_data_changed e_onf4
                e_onf4_before e_onf4_after e_ucomm.

*   Evento para actualizar los datos después de modificar la tabla
    METHODS handle_data_changed_finished
                FOR EVENT data_changed_finished OF cl_gui_alv_grid
      IMPORTING e_modified et_good_cells.

*   Evento para detectar accion botonera
    METHODS handle_user_command
                FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.

*   Evento para que añada botones al menu
    METHODS handle_toolbar
                FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.

*   Evento para detectar el link
    METHODS handle_hotspot_click
                FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_row_id e_column_id es_row_no.

* Privado
  PRIVATE SECTION.
    DATA: it_insert TYPE TABLE OF ty_insert.

ENDCLASS.                    "lcl_application DEFINITION


*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application6 IMPLEMENTATION.

* Para los cambios (antes de que se modifique la tabla del ALV)
  METHOD handle_data_changed.


  ENDMETHOD.                    "handle_data_changed

***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_user_command
***********************************************************************

  METHOD handle_user_command.
* GST - 08/07/2015 ->
    CALL METHOD cl_gui_cfw=>flush.
    CASE e_ucomm.
      WHEN 'BORRAR'. "BORRAR
        PERFORM alv_proc_borrar_lin.
    ENDCASE.
* GST - 08/07/2015 <-
  ENDMETHOD.                    "handle_user_command
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_menu_button
***********************************************************************
  METHOD handle_toolbar.
* GST - 08/07/2015 ->
    IF NOT g_custom_container6 IS INITIAL.

      CLEAR gs_toolbar.
      MOVE 3                   TO gs_toolbar-butn_type.
      APPEND gs_toolbar        TO e_object->mt_toolbar.

      CLEAR gs_toolbar.
      MOVE 'BORRAR'            TO gs_toolbar-function.
      MOVE icon_delete         TO gs_toolbar-icon.
      MOVE text-b01            TO gs_toolbar-quickinfo.
      MOVE 0                   TO gs_toolbar-butn_type.
      MOVE space               TO gs_toolbar-disabled.
      MOVE text-b01            TO gs_toolbar-text.
      APPEND gs_toolbar        TO e_object->mt_toolbar.

    ENDIF.
* GST - 08/07/2015 <-
  ENDMETHOD.                    "handle_toolbar
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_data_changed_finished
***********************************************************************
* para los cambios (después de que se modifique la tabla del alv)
  METHOD handle_data_changed_finished.



  ENDMETHOD.                    "handle_data_changed_finished

  METHOD handle_hotspot_click.

*    leemos la tabla con datos y pasamos a la estructura la linea
*    seleccionada
    READ TABLE gt_supervisor INDEX e_row_id-index INTO gs_supervisor.
    CASE e_column_id.
      WHEN 'ZENTRADA'.
        IF NOT gs_supervisor-zentrada IS INITIAL.
          PERFORM bloquear USING 'B' gs_supervisor-zentrada space CHANGING sw_ok. " add jtm 07.10.2015
          IF sw_ok EQ 'X'. " add jtm 07.10.2015
*           SELECCIONAMOS DATOS GRABADOS PARA MOSTRAR
            PERFORM seleccionar_datos_sup.

            CALL SCREEN '1000'.
          ENDIF. " add jtm 07.10.2015
*          SET PARAMETER ID 'AGR' FIELD ti_datos_pos-arbpl.
*          CALL TRANSACTION 'ZPP011'." AND SKIP FIRST SCREEN.
        ENDIF.
    ENDCASE.

  ENDMETHOD.                    "handle_hotspot_click


ENDCLASS.                    "lcl_application IMPLEMENTATION
