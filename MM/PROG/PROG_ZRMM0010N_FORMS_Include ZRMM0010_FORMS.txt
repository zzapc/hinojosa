*&---------------------------------------------------------------------*
*&  Include           ZRMM0010_FORMS
*&---------------------------------------------------------------------*
**&---------------------------------------------------------------------*
**&      Form  RECUPERAR_DATOS
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM recuperar_datos .
*
*** Recuperar stocke periodo anterior:
**  PERFORM recup_datos_per_ant.
*
** Recuperar stock periodo actual:
*  PERFORM recup_datos_per.
*
** Cálulos finales:
*  PERFORM calc_acumulados.
*
*ENDFORM.                    " RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion .

  CLEAR: gv_ini_per, gv_fin_per.
*  CLEAR: gv_ini_per_ant, gv_fin_per_ant.
*  CLEAR: gv_per_ant.

*  CLEAR: gt_datos_per, gt_datos_per_ant_aux, gt_datos_per_ant.
*  REFRESH: gt_datos_per, gt_datos_per_ant_aux, gt_datos_per_ant.
  CLEAR: gt_datos.
  REFRESH: gt_datos.

* Inicialización periodo:
  CONCATENATE p_desde '01' INTO gv_ini_per.
  CONCATENATE p_hasta '01' INTO gv_fin_per.
  CALL FUNCTION 'FKK_LAST_DAY_OF_MONTH'
    EXPORTING
      day_in            = gv_fin_per
    IMPORTING
      last_day_of_month = gv_fin_per
    EXCEPTIONS
      day_in_no_date    = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
    CONCATENATE p_hasta '01' INTO gv_fin_per.
  ENDIF.


** Inicialización periodo anterior:
*  gv_per_ant = p_desde - 1.
*  CONCATENATE gv_per_ant '01' INTO gv_ini_per_ant.
*  CONCATENATE gv_per_ant '01' INTO gv_fin_per_ant.
*  CALL FUNCTION 'FKK_LAST_DAY_OF_MONTH'
*    EXPORTING
*      day_in            = gv_fin_per_ant
*    IMPORTING
*      last_day_of_month = gv_fin_per_ant
*    EXCEPTIONS
*      day_in_no_date    = 1
*      OTHERS            = 2.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*    CONCATENATE gv_per_ant '01' INTO gv_fin_per_ant.
*  ENDIF.


ENDFORM.                    " INICIALIZACION
**&---------------------------------------------------------------------*
**&      Form  RECUP_DATOS_PER
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM recup_datos_per .
*
*  DATA: ls_datos_per TYPE         ty_datos_per,
*        ls_datos     LIKE LINE OF gt_datos,
*        lv_index     LIKE         sy-tabix,
*        lv_fsc       TYPE         zesd_fsc.
*
*
**  CLEAR lv_fsc.
**  SELECT SINGLE fsc INTO lv_fsc
**  FROM ztsd0003
**  WHERE bukrs = p_bukrs
**  AND begda <= gv_fin_per
**  AND endda >= gv_ini_per.
*
*
*  SELECT a~matnr b~mtart a~werks a~menge a~meins a~bwart a~shkzg
*    INTO TABLE gt_datos_per
*    FROM mseg AS a
*    INNER JOIN mara AS b ON b~matnr = a~matnr
*    WHERE a~matnr IN s_matnr
*    AND b~mtart IN s_mtart
*    AND a~werks IN s_werks
*    AND ( a~budat_mkpf <= gv_fin_per AND a~budat_mkpf >= gv_ini_per )
*    AND a~lgort <> ' '.
*
*  LOOP AT gt_datos_per INTO ls_datos_per.
*    CLEAR: ls_datos, lv_index.
*
*    READ TABLE gt_datos INTO ls_datos
*         WITH KEY bukrs = p_bukrs
*                  matnr = ls_datos_per-matnr
*                  mtart = ls_datos_per-mtart
*                  werks = ls_datos_per-werks.
*
*    lv_index = sy-tabix.
*    IF ls_datos IS NOT INITIAL.
*      IF ls_datos_per-mtart = 'ZPAP'.
*
*        IF ls_datos_per-shkzg = 'S'.
*          ls_datos-cprbp = ls_datos-cprbp + ls_datos_per-menge.
*        ELSEIF ls_datos_per-shkzg = 'H'.
*          ls_datos-cvsbp = ls_datos-cvsbp + ls_datos_per-menge.
*        ENDIF.
*
*      ELSE.
*
*        IF ls_datos_per-shkzg = 'S'.
*          ls_datos-ccenp = ls_datos-ccenp + ls_datos_per-menge.
*        ELSEIF ls_datos_per-shkzg = 'H'.
*          ls_datos-csenp = ls_datos-csenp + ls_datos_per-menge.
*        ENDIF.
*
*      ENDIF.
*
**      ls_datos-zfsc = lv_fsc.
**      ls_datos-smpfp = ls_datos-smpip + ls_datos-ccenp.
**      ls_datos-sbofp = ls_datos-sboip - ls_datos-cvsbp.
**      ls_datos-cvpfsc = ( ls_datos-cvsbp * ls_datos-zfsc ) / 100.
*
*      MODIFY gt_datos FROM ls_datos INDEX lv_index.
*    ELSE.
*
*      ls_datos-bukrs = p_bukrs.
*      ls_datos-matnr = ls_datos_per-matnr.
*      ls_datos-mtart = ls_datos_per-mtart.
*      ls_datos-werks = ls_datos_per-werks.
*      ls_datos-meins = ls_datos_per-meins.
*      ls_datos-zfsc = lv_fsc.
*      SELECT SINGLE maktx INTO ls_datos-maktx
*        FROM makt
*        WHERE matnr = ls_datos_per-matnr
*        AND spras = sy-langu.
*
*      IF ls_datos_per-mtart = 'ZPAP'.
*
*        IF ls_datos_per-shkzg = 'S'.
*          ls_datos-cprbp = ls_datos-cprbp + ls_datos_per-menge.
*        ELSEIF ls_datos_per-shkzg = 'H'.
*          ls_datos-cvsbp = ls_datos-cvsbp + ls_datos_per-menge.
*        ENDIF.
*
*      ELSE.
*
*        IF ls_datos_per-shkzg = 'S'.
*          ls_datos-ccenp = ls_datos-ccenp + ls_datos_per-menge.
*        ELSEIF ls_datos_per-shkzg = 'H'.
*          ls_datos-csenp = ls_datos-csenp + ls_datos_per-menge.
*        ENDIF.
*
*      ENDIF.
*
**      ls_datos-smpfp = ls_datos-smpip + ls_datos-ccenp.
**      ls_datos-sbofp = ls_datos-sboip - ls_datos-cvsbp.
**      ls_datos-cvpfsc = ( ls_datos-cvsbp * ls_datos-zfsc ) / 100.
*
*      APPEND ls_datos TO gt_datos.
*
*    ENDIF.
*
*  ENDLOOP.
*
*ENDFORM.                    " RECUP_DATOS_PER
**&---------------------------------------------------------------------*
**&      Form  RECUP_DATOS_PER_ANT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM recup_datos_per_ant.
*
*  DATA: ls_datos_per_ant_aux TYPE         ty_datos_per_ant_aux,
*        ls_datos_per_ant     TYPE         ty_datos_per_ant,
*        ls_datos_per_aux     TYPE         ty_datos_per_ant,
*        ls_datos             LIKE LINE OF gt_datos,
*        lv_index             LIKE         sy-tabix.
*
*  SELECT a~matnr b~mtart a~werks a~labst a~umlme a~insme
*         a~einme a~speme a~retme b~meins
*    INTO TABLE gt_datos_per_ant_aux
*    FROM mardh AS a
*    INNER JOIN mara AS b ON b~matnr = a~matnr
*    WHERE a~matnr IN s_matnr
*    AND a~werks IN s_werks
*    AND b~mtart IN s_mtart
*    AND a~lfgja = gv_per_ant+0(4)
*    AND a~lfmon = gv_per_ant+4(2).
*
*  LOOP AT gt_datos_per_ant_aux INTO ls_datos_per_ant_aux.
*    CLEAR: ls_datos, lv_index.
*    READ TABLE gt_datos INTO ls_datos
*               WITH KEY bukrs = p_bukrs
*                        matnr = ls_datos_per_ant_aux-matnr
*                        mtart = ls_datos_per_ant_aux-mtart
*                        werks = ls_datos_per_ant_aux-werks.
*
*    lv_index = sy-tabix.
*
*    IF ls_datos IS NOT INITIAL.
*
*      IF ls_datos_per_ant_aux-mtart = 'ZPAP'.
*        ls_datos-sboip = ls_datos-sboip + ls_datos_per_ant_aux-labst +
*             ls_datos_per_ant_aux-umlme + ls_datos_per_ant_aux-insme +
*             ls_datos_per_ant_aux-einme + ls_datos_per_ant_aux-speme +
*             ls_datos_per_ant_aux-retme.
*
*      ELSE.
*        ls_datos-smpip = ls_datos-smpip + ls_datos_per_ant_aux-labst +
*             ls_datos_per_ant_aux-umlme + ls_datos_per_ant_aux-insme +
*             ls_datos_per_ant_aux-einme + ls_datos_per_ant_aux-speme +
*             ls_datos_per_ant_aux-retme.
*
*      ENDIF.
*
*      MODIFY gt_datos FROM ls_datos INDEX lv_index.
*
*    ELSE.
*
*      ls_datos-bukrs = p_bukrs.
*      ls_datos-matnr = ls_datos_per_ant_aux-matnr.
*      ls_datos-mtart = ls_datos_per_ant_aux-mtart.
*      ls_datos-werks = ls_datos_per_ant_aux-werks.
*      ls_datos-meins = ls_datos_per_ant_aux-meins.
*      SELECT SINGLE maktx INTO ls_datos-maktx
*        FROM makt
*        WHERE matnr = ls_datos_per_ant_aux-matnr
*        AND spras = sy-langu.
*
*      IF ls_datos_per_ant_aux-mtart = 'ZPAP'.
*        ls_datos-sboip = ls_datos_per_ant_aux-labst +
*             ls_datos_per_ant_aux-umlme + ls_datos_per_ant_aux-insme +
*             ls_datos_per_ant_aux-einme + ls_datos_per_ant_aux-speme +
*             ls_datos_per_ant_aux-retme.
*      ELSE.
*
*        ls_datos-smpip = ls_datos_per_ant_aux-labst +
*             ls_datos_per_ant_aux-umlme + ls_datos_per_ant_aux-insme +
*             ls_datos_per_ant_aux-einme + ls_datos_per_ant_aux-speme +
*             ls_datos_per_ant_aux-retme.
*
*      ENDIF.
*
*      APPEND ls_datos TO gt_datos.
*
*    ENDIF.
*
*  ENDLOOP.
*
*ENDFORM.                    " RECUP_DATOS_PER_ANT
**&---------------------------------------------------------------------*
**&      Form  CALC_ACUMULADOS
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM calc_acumulados .
*
*  DATA: lv_fsc   TYPE         zesd_fsc,
*        ls_datos LIKE LINE OF gt_datos.
*
*  CLEAR lv_fsc.
*  SELECT SINGLE fsc INTO lv_fsc
*  FROM ztsd0003
*  WHERE bukrs = p_bukrs
*  AND begda <= gv_fin_per
*  AND endda >= gv_ini_per.
*
*  LOOP AT gt_datos INTO ls_datos.
*
*    ls_datos-zfsc = lv_fsc.
*    ls_datos-smpfp = ls_datos-smpip + ls_datos-ccenp - abs( ls_datos-csenp ).
*    ls_datos-sbofp = ls_datos-sboip - abs( ls_datos-cvsbp ) + abs( ls_datos-cprbp ).
*    ls_datos-cvpfsc = ( ls_datos-cvsbp * ls_datos-zfsc ) / 100.
*    ls_datos-cdmpp = ls_datos-ccenp - abs( ls_datos-csenp ).
*    ls_datos-cdbop = ls_datos-cvsbp - abs( ls_datos-cprbp ).
*
*    MODIFY gt_datos FROM ls_datos.
*  ENDLOOP.
*
*
*ENDFORM.                    " CALC_ACUMULADOS
*&---------------------------------------------------------------------*
*&      Form  RECUPERAR_DATOS_MB5B
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recuperar_datos_mb5b .


  DATA: lt_stock TYPE stock_inventory_tt,
        ls_stock TYPE stock_inventory_s,
        ls_datos TYPE zstmm_fsc_alv.

  DATA: lv_index LIKE sy-tabix.
  DATA: ls_ztsd0003 TYPE          ztsd0003,
        lt_ztsd0003 TYPE TABLE OF ztsd0003.

  CLEAR: lt_ztsd0003.
  REFRESH: lt_ztsd0003.

  SELECT *
    INTO TABLE lt_ztsd0003
    FROM ztsd0003
    WHERE bukrs = p_bukrs
    AND begda <= gv_fin_per
    AND endda >= gv_ini_per.

  IF lt_ztsd0003[] IS NOT INITIAL.
    SORT lt_ztsd0003 BY begda DESCENDING.
    READ TABLE lt_ztsd0003 INTO ls_ztsd0003 INDEX 1.
  ELSE.
    CLEAR ls_ztsd0003.
  ENDIF.

  CLEAR: lt_stock.
  REFRESH: lt_stock.

  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
      r_mtart           = s_mtart
      r_matnr           = s_matnr
    CHANGING
      t_stock_inventory = lt_stock
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here

  ELSE.

    LOOP AT lt_stock INTO ls_stock.
      CLEAR ls_datos.
      READ TABLE gt_datos INTO ls_datos
                 WITH KEY bukrs = p_bukrs
                          werks = ls_stock-werks
                          matnr = ls_stock-matnr.
      lv_index = sy-tabix.

      IF ls_datos IS INITIAL.
        ls_datos-bukrs = p_bukrs.
        ls_datos-werks = ls_stock-werks.
        ls_datos-matnr = ls_stock-matnr.
        ls_datos-maktx = ls_stock-maktx.
        ls_datos-meins = ls_stock-meins.

        SELECT SINGLE mtart INTO ls_datos-mtart
          FROM mara
          WHERE matnr = ls_datos-matnr.

        IF ls_datos-mtart = 'ZPAP'.
          ls_datos-sboip = ls_stock-anfmenge.
          ls_datos-sbofp = ls_stock-endmenge.
          ls_datos-cvsbp = ls_stock-haben.
          ls_datos-cprbp = ls_stock-soll.
          ls_datos-cdbop = ls_stock-soll - ls_stock-haben.
          ls_datos-zfsc = ls_ztsd0003-fsc.
*          ls_datos-cvpfsc = ( ls_datos-cvsbp * ls_datos-zfsc ) / 100.

          APPEND ls_datos TO gt_datos.

        ELSEIF ls_datos-mtart = 'ZREC'.
          ls_datos-smpip = ls_stock-anfmenge.
          ls_datos-ccenp = ls_stock-soll.
          ls_datos-csenp = ls_stock-haben.
          ls_datos-cdmpp = ls_stock-soll - ls_stock-haben.
          ls_datos-smpfp = ls_stock-endmenge.
          ls_datos-zfsc = ls_ztsd0003-fsc.
*          ls_datos-cvpfsc = ( ls_datos-cvsbp * ls_datos-zfsc ) / 100.

          APPEND ls_datos TO gt_datos.

        ENDIF.

      ELSE.

        IF ls_datos-mtart = 'ZPAP'.

          ls_datos-sboip = ls_datos-sboip + ls_stock-anfmenge.
          ls_datos-sbofp = ls_datos-sbofp + ls_stock-endmenge.
          ls_datos-cvsbp = ls_datos-cvsbp + ls_stock-haben.
          ls_datos-cprbp = ls_datos-cprbp + ls_stock-soll.
          ls_datos-cdbop = ls_datos-cdbop + ls_stock-soll - ls_stock-haben.
*          ls_datos-cvpfsc = ( ls_datos-cvsbp * ls_datos-zfsc ) / 100.

          MODIFY gt_datos FROM ls_datos INDEX lv_index.

        ELSEIF ls_datos-mtart = 'ZREC'.

          ls_datos-smpip = ls_datos-smpip + ls_stock-anfmenge.
          ls_datos-ccenp = ls_datos-ccenp + ls_stock-soll.
          ls_datos-csenp = ls_datos-csenp + ls_stock-haben.
          ls_datos-cdmpp = ls_datos-cdmpp + ls_stock-soll - ls_stock-haben.
          ls_datos-smpfp = ls_datos-smpfp + ls_stock-endmenge.
*          ls_datos-cvpfsc = ( ls_datos-cvsbp * ls_datos-zfsc ) / 100.

          MODIFY gt_datos FROM ls_datos INDEX lv_index.

        ENDIF.

      ENDIF.

    ENDLOOP.
  ENDIF.

ENDFORM.                    " RECUPERAR_DATOS_MB5B
*&---------------------------------------------------------------------*
*&      Form  GRABAR_LOG_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM grabar_log_alv .

  DATA: t_variant TYPE disvariant.

* Variante:
  CLEAR t_variant.
  t_variant-report = sy-repid.
  IF p_vari IS NOT INITIAL.
    t_variant-variant = p_vari.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save     = 'U'
    CHANGING
      cs_variant = t_variant
    EXCEPTIONS
      not_found  = 2.

* Genero las Columnas
  PERFORM col_alv.

* Llamo a la Función que visualiza el ALV
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     i_structure_name = i_structure_name
      it_fieldcat = gt_fieldcat_ant
      i_save      = 'U'
      is_variant  = t_variant
    TABLES
      t_outtab    = gt_datos.

ENDFORM.                    " GRABAR_LOG_ALV
*&---------------------------------------------------------------------*
*&      Form  COL_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM col_alv .

  DATA: ls_fcat TYPE slis_fieldcat_alv.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant.

* Pasar tabla interna al formato del fieldcat
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_internal_tabname     = 'GT_DATOS'
      i_inclname             = sy-repid
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat_ant
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

ENDFORM.                    " COL_ALV
*&---------------------------------------------------------------------*
*&      Form  BUSCAR_VARIANTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARI  text
*----------------------------------------------------------------------*
FORM buscar_variante  CHANGING p_vari TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
*     it_default_fieldcat =
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      p_vari = ls_variant-variant.
    ENDIF.
  ENDIF.

ENDFORM.                    " BUSCAR_VARIANTE
*&---------------------------------------------------------------------*
*&      Form  GRABAR_EXTRACTO_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM grabar_extracto_alv .

  CALL FUNCTION 'REUSE_ALV_EXTRACT_SAVE'
    EXPORTING
      is_extract     = gs_extract1
      i_get_selinfos = 'X'
    TABLES
      it_exp01       = gt_datos.

ENDFORM.                    " GRABAR_EXTRACTO_ALV
*&---------------------------------------------------------------------*
*&      Form  RANGOS_ZREC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_R_BWART_COMPRAS  text
*      <--P_R_BWART_CONSUMOS  text
*      <--P_R_BWART_OTROS  text
*----------------------------------------------------------------------*
FORM rangos_zrec  CHANGING r_bwart_compras_zrec TYPE zrange_t_bwart
                           r_bwart_consumos_zrec TYPE zrange_t_bwart
                           r_bwart_otros_zrec TYPE zrange_t_bwart.

  DATA: wr_bwart TYPE zrange_s_bwart.

* movimientos para columna materia prima comprada
  wr_bwart-sign = 'I'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '101'.
  wr_bwart-high = '102'.
  APPEND wr_bwart TO r_bwart_compras_zrec.

* movimientos para columna materia prima consumida
  wr_bwart-sign = 'I'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '261'.
  wr_bwart-high = '262'.
  APPEND wr_bwart TO r_bwart_consumos_zrec.

* movimientos para columna materia prima otros
  wr_bwart-sign = 'E'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '101'.
  wr_bwart-high = '102'.
  APPEND wr_bwart TO r_bwart_otros_zrec.


  wr_bwart-sign = 'E'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '261'.
  wr_bwart-high = '262'.
  APPEND wr_bwart TO r_bwart_otros_zrec.


  wr_bwart-sign = 'E'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '311'.
  wr_bwart-high = '312'.
  APPEND wr_bwart TO r_bwart_otros_zrec.

ENDFORM.                    " RANGOS_ZREC
*&---------------------------------------------------------------------*
*&      Form  RANGOS_ZPAP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_R_BWART_COMPRAS_ZREC  text
*      <--P_R_BWART_CONSUMOS_ZREC  text
*      <--P_R_BWART_OTROS_ZREC  text
*----------------------------------------------------------------------*
FORM rangos_zpap  CHANGING r_bwart_produccion_zpap TYPE zrange_t_bwart
                           r_bwart_ventas_zpap TYPE zrange_t_bwart
                           r_bwart_otros_zpap TYPE zrange_t_bwart.
  DATA: wr_bwart TYPE zrange_s_bwart.

* movimientos para columna cantidad producida
  CLEAR: wr_bwart.
  wr_bwart-sign = 'I'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '101'.
  wr_bwart-high = '102'.
  APPEND wr_bwart TO r_bwart_produccion_zpap.

* movimientos para columna cantidad vendida
  CLEAR: wr_bwart.
  wr_bwart-sign = 'I'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '601'.
  wr_bwart-high = '602'.
  APPEND wr_bwart TO r_bwart_ventas_zpap.

  CLEAR: wr_bwart.
  wr_bwart-sign = 'I'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '643'.
  wr_bwart-high = '644'.
  APPEND wr_bwart TO r_bwart_ventas_zpap.

* movimientos para columna materia prima otros
  CLEAR: wr_bwart.
  wr_bwart-sign = 'E'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '101'.
  wr_bwart-high = '102'.
  APPEND wr_bwart TO r_bwart_otros_zpap.

  CLEAR: wr_bwart.
  wr_bwart-sign = 'E'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '601'.
  wr_bwart-high = '602'.
  APPEND wr_bwart TO r_bwart_otros_zpap.

  CLEAR: wr_bwart.
  wr_bwart-sign = 'E'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '643'.
  wr_bwart-high = '644'.
  APPEND wr_bwart TO r_bwart_otros_zpap.

  CLEAR: wr_bwart.
  wr_bwart-sign = 'E'.
  wr_bwart-option = 'BT'.
  wr_bwart-low = '311'.
  wr_bwart-high = '312'.
  APPEND wr_bwart TO r_bwart_otros_zpap.


ENDFORM.                    " RANGOS_ZPAP
*&---------------------------------------------------------------------*
*&      Form  RANGOS_MATERIALES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_MATERIALES  text
*      <--P_R_MATNR_ZPAP  text
*      <--P_R_MATNR_ZREc  text
*----------------------------------------------------------------------*
FORM rangos_materiales  TABLES s_matnr TYPE range_t_matnr
                              s_mtart TYPE md_range_t_mtart
                        CHANGING lt_materiales TYPE tty_materiales
                                 r_matnr_zpap TYPE range_t_matnr
                                 r_matnr_zrec TYPE range_t_matnr.
*                                 r_matnr_zaux TYPE range_t_matnr.

  DATA: wa_materiales TYPE tipo_materiales,
        wr_matnr      TYPE range_s_matnr.

  CLEAR: lt_materiales.
  REFRESH: lt_materiales.

  SELECT matnr mtart INTO TABLE lt_materiales
          FROM mara
          WHERE matnr IN s_matnr AND
                mtart IN s_mtart.

  LOOP AT lt_materiales INTO wa_materiales.
    CASE wa_materiales-mtart.
      WHEN 'ZPAP'.
        wr_matnr-sign = 'I'.
        wr_matnr-option = 'EQ'.
        wr_matnr-low = wa_materiales-matnr.
        APPEND wr_matnr  TO r_matnr_zpap.

      WHEN 'ZREC' OR 'ZMAP'.
        wr_matnr-sign = 'I'.
        wr_matnr-option = 'EQ'.
        wr_matnr-low = wa_materiales-matnr.
        APPEND wr_matnr  TO r_matnr_zrec.

*      WHEN 'ZAUX'.
*        wr_matnr-sign = 'I'.
*        wr_matnr-option = 'EQ'.
*        wr_matnr-low = wa_materiales-matnr.
*        APPEND wr_matnr  TO r_matnr_zaux.
    ENDCASE.
  ENDLOOP.
ENDFORM.                    " RANGOS_MATERIALES
*&---------------------------------------------------------------------*
*&      Form  RECUPERAR_DATOS_MB5B_NEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recuperar_datos_mb5b_new .
  DATA: lt_materiales      TYPE         tty_materiales,
        wa_materiales      TYPE LINE OF tty_materiales,

        r_matnr_zpap       TYPE         range_t_matnr,
        r_matnr_zrec       TYPE         range_t_matnr,
        r_matnr_zaux       TYPE         range_t_matnr,
        wr_matnr           TYPE         range_s_matnr,

        r_bwart_compras    TYPE         zrange_t_bwart,
        r_bwart_consumos   TYPE         zrange_t_bwart,
        r_bwart_otros_zrec TYPE         zrange_t_bwart,


        r_bwart_produccion TYPE         zrange_t_bwart,
        r_bwart_ventas     TYPE         zrange_t_bwart,
        r_bwart_otros_zpap TYPE         zrange_t_bwart,

        wr_bwart           TYPE         zrange_s_bwart.


  DATA: lt_stock_ini_fin_zrec TYPE stock_inventory_tt,
        lt_stock_comprada     TYPE stock_inventory_tt,
        lt_stock_consumida    TYPE stock_inventory_tt,
        lt_stock_otros_zrec   TYPE stock_inventory_tt.


  DATA: lt_stock_ini_fin_zaux   TYPE stock_inventory_tt,
        lt_stock_comprada_zaux  TYPE stock_inventory_tt,
        lt_stock_consumida_zaux TYPE stock_inventory_tt,
        lt_stock_otros_zaux     TYPE stock_inventory_tt.



  DATA: lt_stock_ini_fin_zpap TYPE stock_inventory_tt,
        lt_stock_producida    TYPE stock_inventory_tt,
        lt_stock_vendida      TYPE stock_inventory_tt,
        lt_stock_otros_zpap   TYPE stock_inventory_tt.

  DATA: ls_stock TYPE stock_inventory_s,
        ls_datos TYPE zstmm_fsc_alv.

  DATA: lv_index LIKE sy-tabix.

  DATA: ls_ztsd0003 TYPE          ztsd0003,
        lt_ztsd0003 TYPE TABLE OF ztsd0003.

  CLEAR: lt_ztsd0003.
  REFRESH: lt_ztsd0003.

  SELECT * FROM ztsd0003
    INTO TABLE lt_ztsd0003
    WHERE bukrs = p_bukrs AND
          begda <= gv_fin_per AND
          endda >= gv_ini_per.

  IF lt_ztsd0003[] IS NOT INITIAL.
    SORT lt_ztsd0003 BY begda DESCENDING.
    READ TABLE lt_ztsd0003 INTO ls_ztsd0003 INDEX 1.
  ELSE.
    CLEAR ls_ztsd0003.
  ENDIF.

* formamos rangos para materiales zpap y materiales zrec
  PERFORM rangos_materiales TABLES s_matnr
                                   s_mtart
                            CHANGING lt_materiales
                                     r_matnr_zpap
                                     r_matnr_zrec.
*                                     r_matnr_zaux.

* formamos rangos para bobinas (ZPAP)
  PERFORM rangos_zpap CHANGING r_bwart_produccion
                               r_bwart_ventas
                               r_bwart_otros_zpap.

* formamos rangos para materia prima (ZREC)  Y AUXILIARES (ZMAP)
  PERFORM rangos_zrec CHANGING r_bwart_compras
                               r_bwart_consumos
                               r_bwart_otros_zrec.


******************************************************
*** OBTENEMOS EL STOCK DE LAS BOBINAS (ZPAP).
******************************************************
  IF r_matnr_zpap[] IS NOT INITIAL.
    PERFORM obtener_stock_bobinas TABLES r_matnr_zpap
                                         r_bwart_produccion
                                         r_bwart_ventas
                                         r_bwart_otros_zpap
                                  USING p_bukrs
                                        s_werks-low
                                        gv_ini_per
                                        gv_fin_per
                                  CHANGING lt_stock_ini_fin_zpap
                                           lt_stock_producida
                                           lt_stock_vendida
                                           lt_stock_otros_zpap.
  ENDIF.

******************************************************
*** OBTENEMOS EL STOCK DE LAS MATERIAS PRIMAS (ZREC)
******************************************************
  IF r_matnr_zrec[] IS NOT INITIAL.
    PERFORM obtener_stock_mp TABLES r_matnr_zrec
                                    r_bwart_compras
                                    r_bwart_consumos
                                    r_bwart_otros_zrec
                             USING p_bukrs
                                   s_werks-low
                                   gv_ini_per
                                   gv_fin_per
                             CHANGING lt_stock_ini_fin_zrec
                                      lt_stock_comprada
                                      lt_stock_consumida
                                      lt_stock_otros_zrec.
  ENDIF.



*******************************************************
**** OBTENEMOS EL STOCK DE LOS MATERIALES AUXILIARES (ZAUX)
*******************************************************
*  IF r_matnr_zaux[] IS NOT INITIAL.
*    PERFORM obtener_stock_mp TABLES r_matnr_zaux
*                                    r_bwart_compras
*                                    r_bwart_consumos
*                                    r_bwart_otros_zrec
*                             USING p_bukrs
*                                   s_werks-low
*                                   gv_ini_per
*                                   gv_fin_per
*                             CHANGING lt_stock_ini_fin_zaux
*                                      lt_stock_comprada_zaux
*                                      lt_stock_consumida_zaux
*                                      lt_stock_otros_zaux.
*  ENDIF.

******************************************************
*** FORMAMOS LA ESTRUCTURA DE SALIDA PARA EL ALV
******************************************************
  LOOP AT lt_materiales INTO wa_materiales.
    CLEAR ls_datos.
    READ TABLE gt_datos INTO ls_datos
               WITH KEY bukrs = p_bukrs
                        matnr = wa_materiales-matnr.
    lv_index = sy-tabix.

    ls_datos-bukrs = p_bukrs.
    ls_datos-werks = s_werks-low.
    ls_datos-matnr = wa_materiales-matnr.
    ls_datos-mtart = wa_materiales-mtart.
    ls_datos-zfsc = ls_ztsd0003-fsc. "% FSC

    CASE wa_materiales-mtart.
******************************************************
***  BOBINAS
******************************************************
      WHEN 'ZPAP'.
        READ TABLE lt_stock_ini_fin_zpap INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
          ls_datos-maktx = ls_stock-maktx.
          ls_datos-meins = ls_stock-meins.
          ls_datos-sboip = ls_datos-sboip + ls_stock-anfmenge. "Stock inicio periodo
          ls_datos-sbofp = ls_datos-sbofp + ls_stock-endmenge. "Stock final periodo
        ENDIF.


        READ TABLE lt_stock_vendida INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
*          ls_datos-cvsbp = ls_datos-cvsbp - ls_stock-haben. "Cantidad Vendida
          ls_datos-cvsbp = ls_datos-cvsbp + ( ls_stock-soll - ls_stock-haben ). "Cantidad Vendida
        ENDIF.


        READ TABLE lt_stock_producida INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
*          ls_datos-cprbp = ls_datos-cprbp + ls_stock-soll. "Cantidad producida
          ls_datos-cprbp = ls_datos-cprbp + ( ls_stock-soll - ls_stock-haben ). "Cantidad producida

        ENDIF.

        READ TABLE lt_stock_otros_zpap INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
          ls_datos-cobp = ls_datos-cobp + (  ls_stock-soll - ls_stock-haben ). "Cantidad Otros (REVISAR!!!!!!!!!)
        ENDIF.

*       "Cantidad diferencia E/S
        ls_datos-cdbop = ls_datos-cdbop + ( ls_datos-cprbp + ls_datos-cvsbp  + ls_datos-cobp  ).

        IF ls_datos-sboip IS NOT INITIAL OR ls_datos-sbofp IS NOT INITIAL OR
            ls_datos-cvsbp IS NOT INITIAL OR  ls_datos-cprbp IS NOT INITIAL OR
           ls_datos-cobp IS NOT INITIAL OR  ls_datos-cdbop  IS NOT INITIAL.
          IF lv_index IS INITIAL.
            APPEND ls_datos TO gt_datos.
          ELSE.
            MODIFY gt_datos FROM ls_datos INDEX lv_index.
          ENDIF.
        ENDIF.

******************************************************
*** MATERIA PRIMA
******************************************************
      WHEN 'ZREC' OR 'ZMAP'.
        READ TABLE lt_stock_ini_fin_zrec INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
          ls_datos-maktx = ls_stock-maktx.
          ls_datos-meins = ls_stock-meins.
          ls_datos-smpip = ls_datos-smpip + ls_stock-anfmenge. "Stock inicio periodo
          ls_datos-smpfp = ls_datos-smpfp + ls_stock-endmenge. "Stock final periodo
        ENDIF.


        READ TABLE lt_stock_comprada INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
*          ls_datos-ccenp = ls_datos-ccenp + ls_stock-soll. "Cantidad comprada
          ls_datos-ccenp = ls_datos-ccenp + ( ls_stock-soll  - ls_stock-haben ). "Cantidad comprada

        ENDIF.

        READ TABLE lt_stock_consumida INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
*          ls_datos-csenp = ls_datos-csenp - ls_stock-haben. "Cantidad consumida
          ls_datos-csenp = ls_datos-csenp + ( ls_stock-soll - ls_stock-haben ). "Cantidad consumida
        ENDIF.

        READ TABLE lt_stock_otros_zrec INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
        IF sy-subrc = 0.
          ls_datos-compp = ls_datos-compp + ( ls_stock-soll - ls_stock-haben ). "Cantidad Otros (REVISAR!!!!!!!!!)
        ENDIF.

        ls_datos-cdmpp = ls_datos-cdmpp + ( ls_datos-ccenp + ls_datos-csenp  + ls_datos-compp  ). "Cantidad diferencia E/S - Bobina

        IF ls_datos-smpip IS NOT INITIAL OR
                  ls_datos-smpfp IS NOT INITIAL OR
                  ls_datos-ccenp IS NOT INITIAL OR
                   ls_datos-csenp IS NOT INITIAL OR
                   ls_datos-compp IS NOT INITIAL OR
                   ls_datos-cdmpp IS NOT INITIAL.

          IF lv_index IS INITIAL.
            APPEND ls_datos TO gt_datos.
          ELSE.
            MODIFY gt_datos FROM ls_datos INDEX lv_index.
          ENDIF.
        ENDIF.

*******************************************************
**** MATERIALES AUXILIARES
*******************************************************
*      WHEN 'ZAUX'.
*        READ TABLE lt_stock_ini_fin_zAUX INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
*        IF sy-subrc = 0.
*          ls_datos-maktx = ls_stock-maktx.
*          ls_datos-meins = ls_stock-meins.
*          ls_datos-SAUXIP = ls_datos-SAUXIP + ls_stock-anfmenge. "Stock inicio periodo
*          ls_datos-SAUXFP = ls_datos-SAUXFP + ls_stock-endmenge. "Stock final periodo
*        ENDIF.
*
*
*        READ TABLE lt_stock_comprada INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
*        IF sy-subrc = 0.
*          ls_datos-CAUXCENP = ls_datos-CAUXCENP + ls_stock-soll. "Cantidad comprada
*        ENDIF.
*
*        READ TABLE lt_stock_consumida INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
*        IF sy-subrc = 0.
*          ls_datos-CAUXSENP = ls_datos-CAUXSENP + ls_stock-haben. "Cantidad consumida
*        ENDIF.
*
*        READ TABLE lt_stock_otros_zrec INTO ls_stock  WITH KEY matnr = wa_materiales-matnr.
*        IF sy-subrc = 0.
*          ls_datos-COAUXP = ls_datos-COAUXP + ls_stock-haben. "Cantidad Otros (REVISAR!!!!!!!!!)
*        ENDIF.
*
*        ls_datos-CDAUXP = ls_datos-CDAUXP + ( ls_datos-CAUXCENP - ls_datos-CAUXSENP  + ls_datos-COAUXP ). "Cantidad diferencia E/S - Bobina
*
*        IF lv_index IS INITIAL.
*          APPEND ls_datos TO gt_datos.
*        ELSE.
*          MODIFY gt_datos FROM ls_datos INDEX lv_index.
*        ENDIF.
    ENDCASE.
  ENDLOOP.

ENDFORM.                    " RECUPERAR_DATOS_MB5B_NEW
*&---------------------------------------------------------------------*
*&      Form  OBTENER_STOCK_BOBINAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_R_MATNR_ZPAP  text
*      -->P_P_BUKRS  text
*      -->P_S_WERKS_LOW  text
*      -->P_GV_INI_PER  text
*      -->P_GV_FIN_PER  text
*      <--P_LT_STOCK_INI_FIN_ZPAP  text
*----------------------------------------------------------------------*
FORM obtener_stock_bobinas  TABLES   r_matnr_zpap TYPE range_t_matnr
                                     r_bwart_produccion TYPE zrange_t_bwart
                                     r_bwart_ventas TYPE zrange_t_bwart
                                     r_bwart_otros_zpap TYPE zrange_t_bwart
                            USING    p_bukrs TYPE mseg-bukrs
                                     s_werks_low TYPE werks_d
                                     gv_ini_per TYPE datum
                                     gv_fin_per TYPE datum
                            CHANGING lt_stock_ini_fin_zpap TYPE stock_inventory_tt
                                     lt_stock_producida TYPE stock_inventory_tt
                                     lt_stock_vendida TYPE stock_inventory_tt
                                     lt_stock_otros_zpap TYPE stock_inventory_tt.

* Stock inicio y fin de periodo
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zpap
    CHANGING
      t_stock_inventory = lt_stock_ini_fin_zpap
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.


* Stock bobinas producidas
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zpap
      r_bwart           = r_bwart_produccion
    CHANGING
      t_stock_inventory = lt_stock_producida
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.

* Stock bobibas vendidas
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zpap
      r_bwart           = r_bwart_ventas
    CHANGING
      t_stock_inventory = lt_stock_vendida
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.

* Stock bobinas otras cantidades
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zpap
      r_bwart           = r_bwart_otros_zpap
    CHANGING
      t_stock_inventory = lt_stock_otros_zpap
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.
ENDFORM.                    " OBTENER_STOCK_BOBINAS
*&---------------------------------------------------------------------*
*&      Form  OBTENER_STOCK_MP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_R_MATNR_ZREC  text
*      -->P_R_BWART_COMPRAS  text
*      -->P_R_BWART_CONSUMOS  text
*      -->P_R_BWART_OTROS_ZREC  text
*      -->P_P_BUKRS  text
*      -->P_S_WERKS_LOW  text
*      -->P_GV_INI_PER  text
*      -->P_GV_FIN_PER  text
*      <--P_LT_STOCK_INI_FIN_ZREC  text
*      <--P_LT_STOCK_COMPRADA  text
*      <--P_LT_STOCK_CONSUMIDA  text
*      <--P_LT_STOCK_OTROS_ZREC  text
*----------------------------------------------------------------------*
FORM obtener_stock_mp  TABLES  r_matnr_zrec TYPE range_t_matnr
                                r_bwart_compras TYPE zrange_t_bwart
                                r_bwart_consumos  TYPE zrange_t_bwart
                                r_bwart_otros_zrec TYPE zrange_t_bwart
                       USING    p_bukrs TYPE mseg-bukrs
                                s_werks_low TYPE werks_d
                                gv_ini_per TYPE sy-datum
                                gv_fin_per TYPE sy-datum
                       CHANGING lt_stock_ini_fin_zrec TYPE stock_inventory_tt
                                lt_stock_comprada TYPE stock_inventory_tt
                                lt_stock_consumida TYPE stock_inventory_tt
                                lt_stock_otros_zrec TYPE stock_inventory_tt.

* Stock inicio y fin de periodo
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zrec
    CHANGING
      t_stock_inventory = lt_stock_ini_fin_zrec
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.

* Stock Materia prima comprada
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zrec
      r_bwart           = r_bwart_compras
    CHANGING
      t_stock_inventory = lt_stock_comprada
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.

* Stock materia prima consumida
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zrec
      r_bwart           = r_bwart_consumos
    CHANGING
      t_stock_inventory = lt_stock_consumida
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.

* Stock materias primas otras cantidades
  CALL FUNCTION 'ZMFMM_STOCK_FECHA_MB5B'
    EXPORTING
      i_bukrs           = p_bukrs
      i_werks           = s_werks-low
      i_desde           = gv_ini_per
      i_hasta           = gv_fin_per
    TABLES
*     r_mtart           = s_mtart
      r_matnr           = r_matnr_zrec
      r_bwart           = r_bwart_otros_zrec
    CHANGING
      t_stock_inventory = lt_stock_otros_zrec
    EXCEPTIONS
      no_hay_materiales = 1
      OTHERS            = 2.
ENDFORM.                    " OBTENER_STOCK_MP
