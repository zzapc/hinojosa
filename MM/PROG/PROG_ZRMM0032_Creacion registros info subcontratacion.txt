***********************************************************************
* TIPO : LISTADO
* TITULO : Creación registros info subcontratación
* DESCRIPCION : Creación registros info subcontratación
*
* AUTOR: Andrés Picazo                                FECHA: 24/06/2024
* ANALISTA: Alfredo García
*
***********************************************************************
REPORT zrmm0032.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: eina, eine, marc.

DATA yhp_idx_td310 TYPE yhp_idx_td310.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.

ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check      TYPE xfeld,
             lights     TYPE zico_estado_mensaje,
             matnr      TYPE mara-matnr,
             maktx      TYPE makt-maktx,
             mtart      TYPE mara-mtart,
             werks      TYPE werks_d,
             cuobj      TYPE marc-cuobj,
             outso      TYPE yhp_idx_td310-outso,
             text_subco TYPE yhp_idx_td310-text_subco,
             lifnr      TYPE yhp_idx_td310-lifnr,
             name1      TYPE lfa1-name1,
             price      TYPE yhp_idx_td310-price,
             price_curr TYPE yhp_idx_td310-price_curr,
             pricp      TYPE yhp_idx_td310-pricp,
             pricp_uom  TYPE yhp_idx_td310-pricp_uom,
             scale_ico  TYPE string,
             infnr      TYPE eina-infnr,
             ekorg      TYPE eine-ekorg,
             netpr      TYPE eine-netpr,
             waers      TYPE eine-waers,
             peinh      TYPE eine-peinh,
             idcola     TYPE zwhs_cola-idcola,
             estado     TYPE zwhs_cola-estado,
             scale_xml  TYPE yhp_idx_td310-scale_xml,
             message    TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos.

    METHODS crear_registro_info
      CHANGING !list TYPE t_listado.
ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA: o_prog          TYPE REF TO zcl_report,
      zst_sd_catalogo TYPE zst_sd_catalogo,
      kna1            TYPE kna1.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_matnr FOR marc-matnr,
                s_werks FOR marc-werks,
                s_outso FOR yhp_idx_td310-outso DEFAULT 'X'.
SELECTION-SCREEN SKIP.
PARAMETERS: p_sdif AS CHECKBOX DEFAULT ''.
SELECTION-SCREEN END OF BLOCK b01.
SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME.
PARAMETERS p_ejec AS CHECKBOX.
SELECTION-SCREEN SKIP.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b03.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.
    DATA o_bi   TYPE REF TO zcl_ap_batch_input.

    l_list = list.
    CASE column.
      WHEN 'MATNR'.
        zcl_ap_material=>visualizar( matnr = l_list-matnr
                                     werks = l_list-werks
                                     vistas = 'D' ).
      WHEN 'INFNR'.
        IF NOT l_list-infnr IS INITIAL.
          zcl_ap_registro_info=>visualizar_st( infnr = l_list-infnr
                                               ekorg = l_list-ekorg
                                               werks = l_list-werks
                                               esokz = '3' ).
        ENDIF.
      WHEN 'CUOBJ'.
        DATA l_incl2   TYPE incl_bild.
        CALL FUNCTION 'VC_I_DISPLAY_CONFIGURATION'
          EXPORTING
            instance           = l_list-cuobj
            include_screen     = l_incl2
          EXCEPTIONS
            instance_not_found = 1
            internal_error     = 2
            OTHERS             = 3.
        IF sy-subrc NE 0.
          MESSAGE 'Error visualizando configurador' TYPE 'I'.
        ENDIF.

      WHEN 'SCALE_ICO' OR 'SCALE_XML'.
        IF NOT l_list-scale_xml IS INITIAL.
**          DATA: i_escalas     TYPE zvcxi_xcsr_tt_pscale.
**          /ui2/cl_json=>deserialize( EXPORTING json = l_list-scale_xml
**                                     CHANGING  data = i_escalas ).
          cl_demo_output=>display_json( l_list-scale_xml ).
        ENDIF.

      WHEN 'IDCOLA'.
        IF NOT l_list-idcola IS INITIAL.
          SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD 'X'.        "#EC EXISTS
          DATA r_fecha TYPE RANGE OF sy-datum.
          SET PARAMETER ID 'ZREINICIAR' FIELD ''.
          SUBMIT zwhs_monitor
             AND RETURN
            WITH p_idcli  = 'AIC'
            WITH s_idcola = l_list-idcola
            WITH s_fechac IN r_fecha.
          SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD ''.         "#EC EXISTS
        ENDIF.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'EJEC'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'EJEC'.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          o_prog->crear_registro_info( CHANGING list = <listado> ).
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).

    IF p_ejec = 'X'.
      LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
        crear_registro_info( CHANGING list = <listado> ).
      ENDLOOP.
    ENDIF.
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    sgpi_texto( 'Seleccionando datos'(sda) ).

    SELECT yhp_idx_td310~*,
           marc~matnr, marc~werks,
           mara~mtart,
           makt~maktx,
           lfa1~name1,
           eina~infnr,
           eine~ekorg, eine~netpr, eine~waers, eine~peinh
      FROM marc JOIN yhp_idx_td310 ON yhp_idx_td310~cuobj = marc~cuobj
                JOIN mara ON mara~matnr = marc~matnr
         LEFT OUTER JOIN lfa1 ON lfa1~lifnr = yhp_idx_td310~lifnr
         LEFT OUTER JOIN makt ON  makt~matnr  = marc~matnr
                              AND makt~spras  = @sy-langu
         LEFT OUTER JOIN eina ON  eina~matnr  = marc~matnr
                              AND eina~lifnr  = yhp_idx_td310~lifnr
                              AND eina~loekz  = ''
         LEFT OUTER JOIN eine ON  eine~infnr  = eina~infnr
                              AND eine~werks  = marc~werks
                              AND eine~esokz  = '3'
                              AND eine~loekz  = ''
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
      WHERE marc~matnr IN @s_matnr
        AND marc~werks IN @s_werks
        AND yhp_idx_td310~outso IN @s_outso
     ORDER BY marc~matnr, marc~werks.


    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      IF NOT <listado>-scale_xml IS INITIAL.
        <listado>-scale_ico = zcl_ap_alv=>set_icono( icono = icon_graduate mensaje = 'Precio con escalas' ).
      ENDIF.

      DATA(l_dif) = ''.
      IF <listado>-infnr IS INITIAL.
        DATA(l_icono) = icon_create.
        <listado>-message = 'Se creará registro info'.
        <listado>-check = p_ejec.
      ELSE.
        l_dif = 'X'.
        IF <listado>-scale_xml IS INITIAL.
          IF <listado>-netpr = <listado>-price AND
             <listado>-peinh = <listado>-pricp.
            CLEAR l_dif.
          ENDIF.
        ELSE.
* Para la verificación de precios de las escalas, reutilizo lo ya implementado en el mensaje
          DATA: l_msg    TYPE zwhs_mensaje,
                l_cola   TYPE zwhs_cola,
                l_objkey TYPE zwhs_cola-objkey.
          l_objkey = <listado>-cuobj.
          CALL FUNCTION 'Z_AIC_MRI_OUT'
            EXPORTING
              objkey     = l_objkey
              mensaje    = l_msg
              simulacion = 'X'
            CHANGING
              cola       = l_cola.
          IF l_cola-estado = 'X'.
            CLEAR l_dif.
          ENDIF.
        ENDIF.
        IF l_dif = 'X'.
          l_icono = icon_not_equal_red.
          <listado>-message = 'Existe registro info pero con diferencias'.
          <listado>-check = p_ejec.
        ELSE.
          l_icono = icon_equal_green.
          IF p_sdif = 'X'.
            DELETE i_listado.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.

      SELECT MAX( idcola ) FROM zwhs_cola
        INTO <listado>-idcola
       WHERE idmsg = 'MRI'
         AND matnr = <listado>-matnr
         AND werks = <listado>-werks.
      IF NOT <listado>-idcola IS INITIAL.
        SELECT SINGLE estado FROM zwhs_cola
          INTO <listado>-estado
         WHERE idcola = <listado>-idcola.
      ENDIF.


      set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
    ENDLOOP.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Actualizar registro info'  icon = icon_execute_object ucomm = 'EJEC' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page(
*    i_param = VALUE #( ( tipo = 'R' param = 'S_CREDAT' texto = 'F.Creación IDOC' tabla = '' campo = '' )
                          ).

    o_alv->set_field_hotspot( campo = 'MATNR,CUOBJ,INFNR' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,SCALE_XML' ).
    o_alv->set_field_text( campo = 'SCALE_ICO' valor = 'Esc.' valor2 = 'Escalas' ).

    o_alv->set_orden( '' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD crear_registro_info.

    IF list-idcola IS INITIAL OR list-estado = 'X'.
      zwhs=>genera_msg( EXPORTING objkey  = |{ list-matnr }${ list-werks }|
                                  idmsg   = 'MRI'
                                  modo_ct = modo_ct
                        IMPORTING idcola  = list-idcola
                                  mensaje = list-message ).
      IF list-idcola IS INITIAL.
        list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      ELSE.
        SELECT SINGLE entrega, estado FROM zwhs_cola
          INTO (@list-infnr, @list-estado)
         WHERE idcola = @list-idcola.
        IF list-estado = 'X'.
          list-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = list-message ).
        ELSE.
          list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
        ENDIF.
      ENDIF.
    ELSE.
      zwhs=>procesa_msg( EXPORTING idcola   = list-idcola
                                   modo_ct = modo_ct
                                   forzar_reproceso = 'X'
                         IMPORTING mensaje  = list-message ).

      SELECT SINGLE entrega estado FROM zwhs_cola
        INTO (list-infnr, list-estado)
       WHERE idcola = list-idcola.
      IF list-estado = 'X'.
        list-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = list-message ).
      ELSE.
        list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      ENDIF.
    ENDIF.

  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.




AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'M01'.
      zcl_ap_parametros=>mantenimiento_st( clave = 'CORE_BODEF' ).
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
