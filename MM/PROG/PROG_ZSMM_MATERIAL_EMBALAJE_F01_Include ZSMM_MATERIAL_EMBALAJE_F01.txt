*&---------------------------------------------------------------------*
*&  Include           ZSMM_MATERIAL_EMBALAJE_F01
*&---------------------------------------------------------------------*

FORM select.
  DATA: et_bom        TYPE  yhp_omp_tt_bom,
        et_rte        TYPE  yhp_omp_tt_rte,
        lt_datos_temp TYPE ty_tt_datos,
        cont          TYPE i,
        lt_mtart      TYPE ty_tt_mtart.

  "Recuperamos todos los materiales ZPAL.
  SELECT a~matnr, b~werks, a~mtart, mk2~maktx
    FROM mara AS a
    INNER JOIN marc AS b ON b~matnr = a~matnr
    INNER JOIN makt AS mk2 ON mk2~matnr = a~matnr AND mk2~spras = @sy-langu
    INTO TABLE @lt_mtart
    WHERE a~mtart IN @s_mtart
    AND b~werks IN @s_werks
    ORDER BY werks, a~matnr.

  SELECT b~werks, a~bismt, a~matnr, mk~maktx, b~cuobj, b~stdpd, s~bmeng, s~bmein " e~matnr, mk2~maktx, d~menge, d~meins,
    FROM mara AS a
    INNER JOIN makt AS mk ON mk~matnr = a~matnr AND mk~spras = @sy-langu
    INNER JOIN marc AS b ON b~matnr = a~matnr
    INNER JOIN mast AS c ON c~matnr = b~matnr AND c~werks = b~werks
    INNER JOIN stko AS s ON s~stlnr = c~stlnr
*    INNER JOIN stpo AS d ON d~stlnr = s~stlnr
*    INNER JOIN mara AS e ON e~matnr = d~idnrk AND e~mtart = 'ZPAL'
*    INNER JOIN makt AS mk2 ON mk2~matnr = e~matnr AND mk2~spras = @sy-langu
    INTO TABLE @it_datos
    WHERE a~matnr IN @s_matnr
    AND a~bismt IN @s_bismt
    AND a~mtart IN @s_mtart1
    AND b~werks IN @s_werks.
  IF sy-subrc = 0.
    LOOP AT it_datos ASSIGNING FIELD-SYMBOL(<ls_dato>) WHERE cuobj IS NOT INITIAL.
      CLEAR: et_bom.
*      CALL FUNCTION 'YHP_OMP_INTERFACE'
*        EXPORTING
*          if_cuobj = <ls_dato>-cuobj
*        IMPORTING
*          et_bom   = et_bom.
      PERFORM get_all_bomrte USING <ls_dato>-cuobj
                         CHANGING et_bom
                                  et_rte.
      IF et_bom IS NOT INITIAL.
        CLEAR cont.
        LOOP AT et_bom INTO DATA(ls_bom).
          READ TABLE lt_mtart INTO DATA(ls_mtart) WITH KEY werks = <ls_dato>-werks matnr = ls_bom-idnrk BINARY SEARCH.
          IF sy-subrc = 0 AND cont = 0.
            <ls_dato>-matnr_emb = ls_mtart-matnr.
            <ls_dato>-matkx_emb = ls_mtart-maktx.
            <ls_dato>-mtart = ls_mtart-mtart.
            <ls_dato>-menge = ls_bom-menge.
            <ls_dato>-meins = ls_bom-meins.
            ADD 1 TO cont.
          ELSEIF sy-subrc = 0.
            DATA(ls_dato) = <ls_dato>.
            ls_dato-matnr_emb = ls_mtart-matnr.
            ls_dato-matkx_emb = ls_mtart-maktx.
            ls_dato-mtart = ls_mtart-mtart.
            ls_dato-menge = ls_bom-menge.
            ls_dato-meins = ls_bom-meins.
            APPEND ls_dato TO lt_datos_temp.
          ENDIF.
        ENDLOOP.
      ENDIF.

    ENDLOOP.

    APPEND LINES OF lt_datos_temp TO it_datos.
    SORT it_datos BY werks matnr.

  ENDIF.
ENDFORM.

FORM mostrar_alv.
  DATA:
    lr_table   TYPE REF TO cl_salv_table,
    lr_funct   TYPE REF TO cl_salv_functions,
    lr_columns TYPE REF TO cl_salv_columns_table,
    lr_column  TYPE REF TO cl_salv_column_table,
    lo_sel     TYPE REF TO cl_salv_selections,
    gr_display TYPE REF TO cl_salv_display_settings,
    gr_layout  TYPE REF TO cl_salv_layout,
    key        TYPE salv_s_layout_key,
    lv_name    TYPE lvc_fname.

  DATA : it_details TYPE abap_compdescr_tab.
  DATA : ref_descr TYPE REF TO cl_abap_structdescr.

  TRY.

      CALL METHOD cl_salv_table=>factory
        IMPORTING
          r_salv_table = lr_table
        CHANGING
          t_table      = it_datos.

    CATCH cx_salv_msg.
      EXIT.
  ENDTRY.


  gr_layout = lr_table->get_layout( ).
  key-report = sy-repid.
  gr_layout->set_key( key ).
  gr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  gr_layout->set_default( abap_true ).

  lr_funct = lr_table->get_functions( ).
  lr_funct->set_all( abap_true ).
  lr_columns = lr_table->get_columns( ).

  ref_descr ?= cl_abap_typedescr=>describe_by_data( ls_datos ).
  it_details[] = ref_descr->components[].
  LOOP AT it_details  INTO DATA(ls_detail).
    TRY.
        lr_column ?= lr_columns->get_column( ls_detail-name ).
        CASE ls_detail-name.
          WHEN 'MATNR_EMB'.
            lr_column->set_medium_text( 'Mat. Embalaje' ).
            lr_column->set_long_text( 'Mat. Embalaje'  ).
            lr_column->set_short_text( 'Mat.Emb.'  ).

          WHEN 'MAKTX_EMB'.
            lr_column->set_medium_text( 'Des. Mat. Embalaje' ).
            lr_column->set_long_text( 'Des. Mat. Embalaje').
            lr_column->set_short_text( 'D.Mat.Emb.').

*          WHEN 'SEMAFORO'.
*            lr_column->set_alignment( if_salv_c_alignment=>centered ).
        ENDCASE.
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.
  ENDLOOP.



  lr_table->display( ).

ENDFORM.
FORM get_all_bomrte  USING    if_cuobj TYPE cuobj
                     CHANGING ct_omp_bom TYPE yhp_omp_tt_bom
                              ct_omp_rte TYPE yhp_omp_tt_rte.

  DATA: lf_gvcin TYPE /vcxi/vkcr_gvcin,
        lf_posnr TYPE posnr,
        lf_nidat TYPE zvcxi_xci_nidat,
        lf_lines TYPE i,
        lf_index TYPE sy-index.
  DATA: ls_cmprk   TYPE /vcxi/vkc_s_cmprk,
        ls_svcad   TYPE zvcxi_xci_s_svcad,
        ls_bl_prte TYPE LINE OF zvcxi_xcsr_tt_bl_prte,
        ls_rte_aux TYPE LINE OF /vcxi/vkcr_tt_rte,
        ls_rte     TYPE yhp_omp_s_rte.
  DATA: lt_bl_prte     TYPE zvcxi_xcsr_tt_bl_prte,
        lt_svc_element TYPE /vcxi/ckx_tt_object,
        lt_rte_aux     TYPE /vcxi/vkcr_tt_rte,
        lt_bom_aux     TYPE /vcxi/vkcr_tt_bom,
        ls_bom_aux     TYPE LINE OF /vcxi/vkcr_tt_bom,
        lt_bom         TYPE yhp_omp_tt_bom,
        ls_bom         TYPE LINE OF  yhp_omp_tt_bom.
  DATA: lr_svc          TYPE REF TO /vcxi/cl_vksra_svc,
        lr_object       TYPE REF TO /vcxi/if_ckx_object,
        lr_svcel        TYPE REF TO /vcxi/cl_vksra_svc_element,
        lr_svc_element  TYPE REF TO /vcxi/cl_vksra_svc_element,
        lr_ea_rtespv    TYPE REF TO ycl_hp_svcr_ea_rtespv,
        lr_bl_prte      TYPE REF TO zcl_vcxi_xcsr_bl_prte,
        lr_appdata_info TYPE REF TO data,
        lr_idat_svc     TYPE REF TO zcl_vcxi_xci_idat_svc.
  FIELD-SYMBOLS: <ls_appdata_info> TYPE zvcxi_xcs_s_appdata_info.

***-------------------------------------------------------------------*
  TRY.

****   Get CoreVC GUID
      lf_gvcin = /vcxi/cl_vkcr_gateway=>get_gvcin_by_cuobj( if_cuobj = if_cuobj ).

***   Get current Application Data
      lr_svc = /vcxi/cl_vksra_svc=>get_instance( if_gvcin = lf_gvcin ).
      CHECK lr_svc IS BOUND.

      MOVE lr_svc->get_appdata_info( ) TO lr_appdata_info.
      CHECK lr_appdata_info IS BOUND.
      ASSIGN lr_appdata_info->* TO <ls_appdata_info>.

*** Get Routing Supervisor to determine the number of Alternative Routes
      TRY.
          lt_svc_element = lr_svc->get_svc_elements( if_ieali = 'R_RTESPV' ).
          READ TABLE lt_svc_element INTO lr_object INDEX 1.
          CHECK sy-subrc EQ 0.
          MOVE lr_object ?TO lr_svc_element.
          MOVE lr_svc_element->get_clsea( ) ?TO lr_ea_rtespv.
          CHECK lr_ea_rtespv IS BOUND.
        CATCH cx_sy_move_cast_error.
          EXIT.
      ENDTRY.

*** Get number of alternative routes
      lf_lines = lines( lr_ea_rtespv->get_rtealt( ) ).
      CHECK lf_lines GT 0.

***   Create Application Data & Set Configuration Profile
      MOVE abap_true                         TO ls_svcad-use_appdata.
      MOVE <ls_appdata_info>-opqty           TO ls_svcad-opqty.
      MOVE <ls_appdata_info>-opqty_uom       TO ls_svcad-opqty_uom.
      MOVE <ls_appdata_info>-s_kna1_ag-kunnr TO ls_svcad-kunag.
      MOVE <ls_appdata_info>-s_kna1_we-kunnr TO ls_svcad-kunwe.
      MOVE <ls_appdata_info>-s_knvv_we-vkorg TO ls_svcad-vkorg.
      MOVE <ls_appdata_info>-s_knvv_we-vtweg TO ls_svcad-vtweg.
      MOVE <ls_appdata_info>-s_knvv_we-spart TO ls_svcad-spart.
      MOVE-CORRESPONDING <ls_appdata_info>   TO ls_cmprk.

*** Get SuperBOM and SuperRouting for plant & configurable Material
      SELECT matnr, werks, stlan, stlnr, stlal
        FROM mast
        INTO TABLE @DATA(lt_mast)
        WHERE matnr EQ @<ls_appdata_info>-cmatn
          AND werks EQ @<ls_appdata_info>-werks.

      SELECT matnr, werks, plnty, plnnr, plnal
        FROM mapl
        INTO TABLE @DATA(lt_mapl)
        WHERE matnr EQ @<ls_appdata_info>-cmatn
          AND werks EQ @<ls_appdata_info>-werks
          AND loekz EQ @space.

***-------------------------------------------------------------------*
*** Process SmartVC instance based on the number of Alt. Routes
      DO lf_lines TIMES.
        lf_index = sy-index.

***     Build Integration Data Service
        lr_idat_svc = zcl_vcxi_xci_idat_svc=>create( is_cmprk = ls_cmprk
                                                     if_ieali = 'X_IDATSPV' ).

***     Set new Application Data
        lr_idat_svc->set_svcad( is_svcad = ls_svcad ).

***     Free Current Instace
        lr_svc->do_free( ).
        CLEAR lr_svc.

***     Initialize Integration Data Buffer
        CALL FUNCTION 'ZVCXI_XCC_IDAT_INIT_NIDAT'.

***     Get GUID of Integration Data
        MOVE lr_idat_svc->/vcxi/if_ckx_object~get_guid( ) TO lf_nidat.

***     Set Integration Data to Buffer for Profile Run
        CALL FUNCTION 'ZVCXI_XCC_IDAT_SET_NIDAT'
          EXPORTING
            if_posnr = lf_posnr
            if_nidat = lf_nidat.

***     Get new SVC Instance with updated Application Data
        lr_svc = /vcxi/cl_vksra_svc=>get_instance( if_gvcin = lf_gvcin ).
        CHECK lr_svc IS BOUND.


***     Get Routing Supervisor
        TRY.
            lt_svc_element = lr_svc->get_svc_elements( if_ieali = 'R_RTESPV' ).
            READ TABLE lt_svc_element INTO lr_object INDEX 1.
            CHECK sy-subrc EQ 0.
            MOVE lr_object ?TO lr_svc_element.
            MOVE lr_svc_element->get_clsea( ) ?TO lr_ea_rtespv.
            CHECK lr_ea_rtespv IS BOUND.

***         Get alternative routes of current SmartVC instance
            REFRESH lt_bl_prte.
            APPEND LINES OF lr_ea_rtespv->get_rtealt( ) TO lt_bl_prte.

***         Find correct Alternative Route
            FREE lr_bl_prte.
            READ TABLE lt_bl_prte INTO lr_bl_prte INDEX lf_index.
            CHECK lr_bl_prte IS BOUND.

***         Set Alternative Route
            lr_ea_rtespv->yif_hp_svcr_ea_rtespv_selrte~set_selrte_wo_lock( ir_bl_prte = lr_bl_prte ).

          CATCH cx_sy_move_cast_error.
            CONTINUE.
        ENDTRY.

***     Fill Production in needed
*JBL 22/09/2022 OPHJVC-145

        TRY.
            CASE lr_ea_rtespv->check_prod_fill( ).
              WHEN 0. "Production is filled correctly

              WHEN 1 OR "Not yet filled
                   3 OR "Refill needed
                   5.   "Related Supervisor requires fill
                lr_ea_rtespv->fill_prod( ).

              WHEN 2 OR "Fill is required, but not allowed
                   4 OR "Refill is required, but not allowed
                   6.   "Related Supervisor requires fill, but not allowed
                CONTINUE.
            ENDCASE.

****        Update Data Connector to force new BOM/Routing Explosion
            lr_svc->update_dc( ).

            IF 1 = 2.
              lr_svc->start_ui( ).
            ENDIF.

***         Get BOM Routing Result
            REFRESH: lt_rte_aux, lt_bom_aux.
            /vcxi/cl_vkcr_gateway=>get_bomrte( EXPORTING if_gvcin = lf_gvcin
                                               IMPORTING et_bom   = lt_bom_aux
                                                         et_rte   = lt_rte_aux ).

***         Collect results of BOM explosion
            LOOP AT lt_bom_aux INTO ls_bom_aux.
              IF line_exists( lt_mast[ stlnr = ls_bom_aux-stlnr stlan = ls_bom_aux-stlan stlal = ls_bom_aux-stlal ] ).
                CLEAR ls_bom.
                MOVE lf_index TO ls_bom-route.
                MOVE-CORRESPONDING ls_bom_aux TO ls_bom.
                APPEND ls_bom TO ct_omp_bom.
              ENDIF.
            ENDLOOP.

***         Collect results of RTE explosion
*            loop at LT_RTE_AUX into LS_RTE_AUX.
*              if LINE_EXISTS( LT_MAPL[ PLNTY = LS_RTE_AUX-PLNTY PLNNR = LS_RTE_AUX-PLNNR PLNAL = LS_RTE_AUX-PLNAL ] ).
*                clear LS_RTE.
*                move LF_INDEX to LS_RTE-ROUTE.
*                move-corresponding LS_RTE_AUX to LS_RTE.
*                append LS_RTE to CT_OMP_RTE.
*              endif.
*            endloop.

          CATCH /vcxi/cx_ckx.
            EXIT.
        ENDTRY.


      ENDDO.

    CATCH /vcxi/cx_ckx.
  ENDTRY.

ENDFORM.
