*&---------------------------------------------------------------------*
*&  Include           ZQM0001_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*       Se recuperan los datos para mostrar en el ALV
*----------------------------------------------------------------------*
FORM recuperar_datos .

  TYPES: BEGIN OF ty_matnr,
           matnr TYPE matnr,
           charg TYPE charg_d,
         END OF ty_matnr.

  TYPES: BEGIN OF ty_data,
           mtart TYPE mtart,
           matnr TYPE matnr,
           matkl TYPE matkl,
           charg TYPE charg_d,
           meins TYPE meins,
           clabs TYPE labst,
           cumlm TYPE umlmd,
           cinsm TYPE insme,
           ceinm TYPE einme,
           cspem TYPE speme,
           cretm TYPE retme,
           cvmla TYPE vmlab,
           cvmum TYPE vmuml,
           cvmin TYPE vmins,
           cvmei TYPE vmein,
           cvmsp TYPE vmspe,
           cvmre TYPE vmret,
         END OF ty_data.

  DATA: lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_matnr             TYPE TABLE OF ty_matnr,
        lt_data              TYPE TABLE OF ty_data,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_object            TYPE objnum,
        lv_char              TYPE qsollwertc.

  CLEAR: gt_datos, lt_matnr, lt_data, gv_de_bobina, gv_error.
  REFRESH: gt_datos, lt_matnr.

  IF p_vcode EQ 'A'.

    gv_de_bobina = 'DE       A'.

  ELSEIF p_vcode EQ 'R'.

    gv_de_bobina = 'DE       R'.

  ELSEIF p_vcode EQ 'P'.

    gv_de_bobina = 'DE       P'.

  ELSEIF p_vcode IS INITIAL.

    CLEAR: gv_de_bobina.

  ELSE.

    MESSAGE |Decisión de empleo incorrecta| TYPE 'S' DISPLAY LIKE 'E'.

    gv_error = abap_true.
    EXIT.

  ENDIF.

* Se recuperan los datos en stock

  SELECT b~mtart, a~matnr, b~matkl, a~charg, b~meins, a~clabs, a~cumlm,
         a~cinsm, a~ceinm, a~cspem, a~cretm, a~cvmla, a~cvmum, a~cvmin,
         a~cvmei, a~cvmsp, a~cvmre
           FROM mchb AS a
           INNER JOIN mara AS b ON b~matnr EQ a~matnr
**           FOR ALL ENTRIES IN @lt_matnr
**           WHERE a~matnr EQ @lt_matnr-matnr
           WHERE a~werks EQ @p_werks
             AND a~lgort EQ @p_lgort
             AND a~charg IN @so_charg
             AND b~mtart EQ 'ZPAP'
             AND ( a~clabs NE 0 OR a~cumlm NE 0 OR a~cinsm NE 0
                OR a~ceinm NE 0 OR a~cspem NE 0 OR a~cretm NE 0
                OR a~cretm NE 0 OR a~cvmum NE 0 OR a~cvmin NE 0
                OR a~cvmei NE 0 OR a~cvmsp NE 0 OR a~cvmre NE 0 )
  INTO TABLE @lt_data.

  LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<lfs_data>).
    CLEAR: lt_alloc_values_num[], lt_alloc_values_char[], lt_alloc_values_curr[],
           lt_return[], lv_object.

    REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

    APPEND INITIAL LINE TO gt_datos ASSIGNING FIELD-SYMBOL(<lfs_datos>).

    <lfs_datos>-centro         = p_werks.
    <lfs_datos>-almacen        = p_lgort.
    <lfs_datos>-cod_mat_bobina = <lfs_data>-matnr.

    " Se recoge la descripción del material
    SELECT SINGLE maktx FROM makt
      WHERE matnr EQ @<lfs_data>-matnr
        AND spras EQ @sy-langu
    INTO @<lfs_datos>-mat_bobina_desc.

    <lfs_datos>-lote_bobina    = <lfs_data>-charg.

    lv_object = <lfs_data>-matnr && <lfs_data>-charg.

    " Se obtienen las características de la bobina
    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = 'MCH1'
        classnum        = 'Z_BOBINA'
        classtype       = '023'
      TABLES
        allocvaluesnum  = lt_alloc_values_num
        allocvalueschar = lt_alloc_values_char
        allocvaluescurr = lt_alloc_values_curr
        return          = lt_return.

**    IF lt_alloc_values_num[] IS NOT INITIAL AND lt_alloc_values_char[] IS NOT INITIAL.

    " Peso de la bobina
    CLEAR: ls_alloc_values_num.
    READ TABLE lt_alloc_values_num INTO ls_alloc_values_num
               WITH KEY charact = 'Z_PESO'.

    IF ls_alloc_values_num-value_from IS NOT INITIAL.

      <lfs_datos>-peso_bobina = ls_alloc_values_num-value_from.

    ELSE.

      CLEAR <lfs_datos>-peso_bobina.

    ENDIF.

    " UMB peso bobina
    SELECT SINGLE meins FROM mara
      WHERE matnr EQ @<lfs_data>-matnr
    INTO @DATA(lv_p_bobina).

    IF sy-subrc EQ 0.

      <lfs_datos>-umb_bobina = lv_p_bobina.

    ENDIF.

    " OF bobina
    SELECT SINGLE aufnr FROM aufm
      WHERE bwart EQ '101'
        AND charg EQ @<lfs_data>-charg
    INTO @<lfs_datos>-of_bobina.

    " Fecha de fabricación de bobina
    CLEAR: ls_alloc_values_num.
    READ TABLE lt_alloc_values_num INTO ls_alloc_values_num
               WITH KEY charact = 'Z_FECHA_FABRICACION'.

    IF ls_alloc_values_num-value_from IS NOT INITIAL.

      CLEAR: lv_char.

      CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
        EXPORTING
          i_number_of_digits = 8
          i_fltp_value       = ls_alloc_values_num-value_from
        IMPORTING
          e_char_field       = lv_char.

      IF sy-subrc EQ 0.

        CONDENSE lv_char.

        <lfs_datos>-fech_fab_bobina = lv_char.

      ENDIF.

    ELSE.

      CLEAR <lfs_datos>-fech_fab_bobina.

    ENDIF.

    " Decisión de Empleo de bobina
    CLEAR: ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'LOBM_UDCODE'.

    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.

      CONDENSE ls_alloc_values_char-value_neutral.
      <lfs_datos>-de_bobina = ls_alloc_values_char-value_neutral.

    ELSE.

      CLEAR <lfs_datos>-de_bobina.

    ENDIF.

    " Motivo de Reproceso de bobina
    CLEAR: ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'ZPPI_MOTIVO_REPROCESO_BOBINA'.

    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.

      CONDENSE ls_alloc_values_char-value_neutral.
      <lfs_datos>-motivo_repro = ls_alloc_values_char-value_neutral.

    ELSE.

      CLEAR <lfs_datos>-motivo_repro.

    ENDIF.

    " Motivo Pulper de bobina
    CLEAR: ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'ZPPI_MOTIVO_RECHAZO'.

    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.

      CONDENSE ls_alloc_values_char-value_neutral.
      <lfs_datos>-motivo_pulper = ls_alloc_values_char-value_neutral.

    ELSE.

      CLEAR <lfs_datos>-motivo_pulper.

    ENDIF.

    " Código de material de rollo
    CLEAR: ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'Z_ROLLO_ORIGEN_V2'.

    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.

      CONDENSE ls_alloc_values_char-value_neutral.
      <lfs_datos>-cod_mat_rollo = ls_alloc_values_char-value_neutral.
      <lfs_datos>-cod_mat_rollo = |{ <lfs_datos>-cod_mat_rollo ALPHA = IN }|. " Se añaden los ceros

    ELSE.

      CLEAR <lfs_datos>-cod_mat_rollo.

    ENDIF.

    " Descripción material rollo
    IF <lfs_datos>-cod_mat_rollo IS NOT INITIAL.

      SELECT SINGLE maktx FROM makt
        WHERE matnr EQ @<lfs_datos>-cod_mat_rollo
          AND spras EQ @sy-langu
      INTO @<lfs_datos>-mat_rollo_desc.

    ENDIF.

    " Lote de rollo
    CLEAR: ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'Z_LOTE_ORIGEN'.

    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.

      CONDENSE ls_alloc_values_char-value_neutral.
      <lfs_datos>-lote_rollo = ls_alloc_values_char-value_neutral.

    ELSE.

      CLEAR <lfs_datos>-lote_rollo.

    ENDIF.

    CLEAR: lt_alloc_values_num[], lt_alloc_values_char[], lt_alloc_values_curr[],
           lt_return[].

    REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

    CLEAR: lv_object.

    IF <lfs_datos>-cod_mat_rollo IS NOT INITIAL AND
       <lfs_datos>-lote_rollo IS NOT INITIAL.

      lv_object = <lfs_datos>-cod_mat_rollo && <lfs_datos>-lote_rollo.

      " Se obtienen las características del rollo
      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objectkey       = lv_object
          objecttable     = 'MCH1'
          classnum        = 'Z_ROLLO'
          classtype       = '023'
        TABLES
          allocvaluesnum  = lt_alloc_values_num
          allocvalueschar = lt_alloc_values_char
          allocvaluescurr = lt_alloc_values_curr
          return          = lt_return.

      " Peso rollo
      CLEAR: ls_alloc_values_num.
      READ TABLE lt_alloc_values_num INTO ls_alloc_values_num
                 WITH KEY charact = 'Z_PESO1'.

      IF ls_alloc_values_num-value_from IS NOT INITIAL.

        <lfs_datos>-peso_rollo = ls_alloc_values_num-value_from.

      ELSE.

        CLEAR <lfs_datos>-peso_rollo.

      ENDIF.

      " UMB peso rollo
      SELECT SINGLE meins FROM mara
        WHERE matnr EQ @<lfs_datos>-cod_mat_rollo
      INTO @<lfs_datos>-umb_rollo.

      " OF rollo
      SELECT SINGLE aufnr FROM aufm
        WHERE werks EQ @p_werks
          AND bwart EQ '101'
          AND charg EQ @<lfs_datos>-lote_rollo
      INTO @<lfs_datos>-of_rollo.

      " Fecha fabricación rollo
      CLEAR: ls_alloc_values_num.
      READ TABLE lt_alloc_values_num INTO ls_alloc_values_num
                 WITH KEY charact = 'LOBM_HSDAT'.

      IF ls_alloc_values_num-value_from IS NOT INITIAL.

        CLEAR: lv_char.

        CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
          EXPORTING
            i_number_of_digits = 8
            i_fltp_value       = ls_alloc_values_num-value_from
          IMPORTING
            e_char_field       = lv_char.

        IF sy-subrc EQ 0.

          CONDENSE lv_char.

          <lfs_datos>-fech_fab_rollo = lv_char.

        ENDIF.

      ELSE.

        CLEAR <lfs_datos>-fech_fab_rollo.

      ENDIF.

      " Decisión de Empleo del rollo
      CLEAR: ls_alloc_values_char.
      READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
                 WITH KEY charact = 'LOBM_UDCODE'.

      IF ls_alloc_values_char-value_neutral IS NOT INITIAL.

        CONDENSE ls_alloc_values_char-value_neutral.
        <lfs_datos>-de_rollo = ls_alloc_values_char-value_neutral.

      ELSE.

        CLEAR <lfs_datos>-de_rollo.

      ENDIF.

    ENDIF.

  ENDLOOP.

ENDFORM.                    " RECUPERAR_DATOS

*&---------------------------------------------------------------------*
*&      Form  OBTENER_WERKS_USR
*&---------------------------------------------------------------------*
*       Se obtiene el centro a través del usuario
*----------------------------------------------------------------------*
FORM obtener_werks_usr.

  SELECT SINGLE parva FROM usr05
    WHERE bname EQ @sy-uname
      AND parid EQ 'WRK'
  INTO @p_werks.

ENDFORM.                    " OBTENER_WERKS_USR

*&---------------------------------------------------------------------*
*&      Form  F4_LAYOUTS
*&---------------------------------------------------------------------*
*       Ayuda para variantes
*----------------------------------------------------------------------*
*       -> I_RESTRICT
*       <- C_LAYOUT
*----------------------------------------------------------------------*
FORM f4_layouts USING i_restrict TYPE salv_de_layout_restriction
             CHANGING c_layout TYPE disvariant-variant.

  DATA: ls_layout TYPE salv_s_layout_info,
        ls_key    TYPE salv_s_layout_key.

  ls_key-report = sy-repid.

  ls_layout = cl_salv_layout_service=>f4_layouts(
    s_key    = ls_key
    restrict = i_restrict ).

  c_layout = ls_layout-layout.

ENDFORM.                    " F4_LAYOUTS

*&---------------------------------------------------------------------*
*&      Form  OBTENER_SELECCION_ALV100
*&---------------------------------------------------------------------*
*       Selección en el ALV
*----------------------------------------------------------------------*
*       <- P_ROWS
*----------------------------------------------------------------------*
FORM obtener_seleccion_alv100 CHANGING p_rows TYPE salv_t_row.

  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = go_alv->get_selections( ).
  p_rows        = lr_selections->get_selected_rows( ).

ENDFORM.                    " OBTENER_SELECCION_ALV100

*&---------------------------------------------------------------------*
*&      Form  POPUP_CONFIRM
*&---------------------------------------------------------------------*
*       Popup de confirmación
*----------------------------------------------------------------------*
*       <- P_ANSWER
*----------------------------------------------------------------------*
FORM popup_confirm CHANGING p_answer TYPE char01.


  DATA(l_text) = |A las bobinas seleccionadas se les asignará la DE = | && p_vcode && |  ¿Desea continuar?|.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question         = l_text
      text_button_1         = 'Aceptar'
      icon_button_1         = '@01@'
      text_button_2         = 'Cancelar'
      icon_button_2         = '@0W@'
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = p_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF sy-subrc <> 0.

    p_answer = 'A'.

  ENDIF.

ENDFORM.                    " POPUP_CONFIRM

FORM cambiar_de_bobina USING p_error
                       CHANGING ps_datos TYPE zqmm_s_datos.

  DATA: lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        lv_object            TYPE objnum.

  CLEAR: lv_object.

  lv_object = ps_datos-cod_mat_bobina && ps_datos-lote_bobina.

* Se obtienen las características de la bobina, para cambiar la DE
  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  READ TABLE lt_return ASSIGNING FIELD-SYMBOL(<lfs_return1>)
             WITH KEY type = 'E'.

  IF sy-subrc EQ 0. " Error leer característica

    p_error = abap_true.

  ELSE.

    REFRESH: lt_return.
    CLEAR: lt_return[].

    READ TABLE lt_alloc_values_char ASSIGNING FIELD-SYMBOL(<lfs_alloc_values_char>)
               WITH KEY charact = 'LOBM_UDCODE'.

    IF sy-subrc EQ 0.

      <lfs_alloc_values_char>-value_char    = gv_de_bobina.
      <lfs_alloc_values_char>-value_neutral = gv_de_bobina.

*     Se actualizan los datos de la característica
      CALL FUNCTION 'BAPI_OBJCL_CHANGE'
        EXPORTING
          objectkey          = lv_object
          objecttable        = 'MCH1'
          classnum           = 'Z_BOBINA'
          classtype          = '023'
        TABLES
          allocvaluesnumnew  = lt_alloc_values_num
          allocvaluescharnew = lt_alloc_values_char
          allocvaluescurrnew = lt_alloc_values_curr
          return             = lt_return.

      READ TABLE lt_return ASSIGNING FIELD-SYMBOL(<lfs_return2>) WITH KEY type = 'E'.

      IF sy-subrc EQ 0. " Error actual. característica

        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      ELSE.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

"EAB T76941 28.06.2023 Integración E80: se llama a la función de envio de datos de bobina a E80 con la nueva DE
        CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
          EXPORTING
            i_werks          = p_werks
*           I_CHARG          =
            i_objek          = lv_object
            i_par_origen     = '1'
          EXCEPTIONS
            lote_inexistente = 1
            OTHERS           = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.


        " Se vuelve a cargar el ALV actualizado
        go_alv->refresh( refresh_mode = if_salv_c_refresh=>full ).

      ENDIF.

    ELSE.

      APPEND VALUE bapi1003_alloc_values_char( charact    = 'LOBM_UDCODE'
                                               value_char = gv_de_bobina ) TO lt_alloc_values_char.

      CALL FUNCTION 'BAPI_OBJCL_CHANGE'
        EXPORTING
          objectkey          = lv_object
          objecttable        = 'MCH1'
          classnum           = 'Z_BOBINA'
          classtype          = '023'
        TABLES
          allocvaluesnumnew  = lt_alloc_values_num
          allocvaluescharnew = lt_alloc_values_char
          allocvaluescurrnew = lt_alloc_values_curr
          return             = lt_return.

      IF line_exists( lt_return[ type = 'E' ] ).

        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        RETURN.

      ELSE.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

        " Se vuelve a cargar el ALV actualizado
        go_alv->refresh( refresh_mode = if_salv_c_refresh=>full ).

      ENDIF.

    ENDIF.

  ENDIF.

ENDFORM.                    " CAMBIAR_DE_BOBINA
