*&---------------------------------------------------------------------*
*&  Include           ZRMM_INTF_STOCK_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos CHANGING e_datos TYPE zmt_fstcsc.

  DATA: wa_datos TYPE zdt_fstcsc.



* obtenemos los materiales sobre los que debemos consultar el stock en función
* de la información de la pantalla de selección
  SELECT mara~matnr, marc~werks, lgort, meins FROM mara
    INNER JOIN marc ON mara~matnr = marc~matnr
    INNER JOIN mard ON marc~matnr = mard~matnr AND
                       marc~werks = mard~werks
    INTO TABLE @DATA(t_materiales_sujeto)
    WHERE mara~matnr IN @so_matnr AND
          mtart IN @so_mtart AND
          marc~werks IN @so_werks AND
          lgort IN @so_lgort AND
          marc~xchpf = @abap_true. "sujeot a lote

  SELECT mara~matnr, marc~werks, lgort, meins FROM mara
    INNER JOIN marc ON mara~matnr = marc~matnr
    INNER JOIN mard ON marc~matnr = mard~matnr AND
                       marc~werks = mard~werks
    INTO TABLE @DATA(t_materiales_no_sujeto)
    WHERE mara~matnr IN @so_matnr AND
          mtart IN @so_mtart AND
          marc~werks IN @so_werks AND
          lgort IN @so_lgort AND
          marc~xchpf = @abap_false. "no sujeot a lote

* recuperamos los centros del filtro para obtener su sociedad
  SELECT werks, bukrs FROM t001w
    INNER JOIN t001k ON t001k~bwkey = t001w~bwkey
    INTO TABLE @DATA(t_centro_sociedad)
    WHERE werks IN @so_werks.


* Si el material no está sujeto a lote
  IF t_materiales_sujeto[] IS NOT INITIAL.

    SELECT * FROM mchb
      INTO TABLE @DATA(t_stock)
      FOR ALL ENTRIES IN @t_materiales_sujeto
      WHERE matnr = @t_materiales_sujeto-matnr AND
            werks = @t_materiales_sujeto-werks AND
            lgort = @t_materiales_sujeto-lgort AND
            clabs <> ''.



* sacamos la cantidad pendiente en EM
    SELECT * FROM mdbs
      INTO TABLE @DATA(t_mdbs)
      FOR ALL ENTRIES IN @t_materiales_sujeto
      WHERE  matnr = @t_materiales_sujeto-matnr AND
              werks = @t_materiales_sujeto-werks AND
              lgort = @t_materiales_sujeto-lgort AND
              loekz <> 'L' AND
              elikz <> 'X'.

* montamos la estructura con la info que mandaremos al proxy
    LOOP AT t_materiales_sujeto INTO DATA(wa_materiales).

      CLEAR: wa_row.

      LOOP AT t_stock INTO DATA(wa_stock) WHERE matnr = wa_materiales-matnr AND
                                                werks = wa_materiales-werks AND
                                                lgort = wa_materiales-lgort.

        wa_row-cantidad = wa_row-cantidad + wa_stock-clabs. "sumar los stocks q nos digan
        wa_row-nlote = wa_row-nlote + 1.

      ENDLOOP.

*    IF wa_row-cantidad IS NOT INITIAL.

      wa_row-centro = wa_materiales-werks.
      wa_row-almacen = wa_materiales-lgort.
      wa_row-cmatsap = wa_materiales-matnr.
      wa_row-umb = wa_materiales-meins.

      READ TABLE t_centro_sociedad INTO DATA(wa_centro_sociedad) WITH KEY werks = wa_materiales-werks.
      IF sy-subrc = 0.
        wa_row-sociedad = wa_centro_sociedad-bukrs.
      ENDIF.

      wa_row-procesado = ''.
      wa_row-factual = sy-datum.
      wa_row-hactual = sy-uzeit.

      "La cantidad pendiente de EM
      LOOP AT t_mdbs INTO DATA(wa_mdbs) WHERE matnr = wa_materiales-matnr AND
                                              werks = wa_materiales-werks AND
                                              lgort = wa_materiales-lgort.
        IF wa_mdbs-wemng < wa_mdbs-menge.
          wa_row-can_ped_entrada = wa_row-can_ped_entrada + ( wa_mdbs-menge - wa_mdbs-wemng ).
        ENDIF.
      ENDLOOP.




* Cuando la cantidad en EM resultante es negativa debería aparecer mejor un 0 o en blanco
      IF wa_row-can_ped_entrada < 0 OR wa_row-can_ped_entrada IS INITIAL.
        wa_row-can_ped_entrada = 0.
      ENDIF.
      IF wa_row-cantidad IS INITIAL.
        wa_row-cantidad = 0.
      ENDIF.

      IF wa_row-nlote IS INITIAL.
        wa_row-nlote = 0.
      ENDIF.
      APPEND wa_row TO t_row.
    ENDLOOP.
  ENDIF.


**** NO SUJETO A LOTE
  IF t_materiales_no_sujeto[] IS NOT INITIAL.

    SELECT * FROM mard
      INTO TABLE @DATA(t_stock_nosujeto)
      FOR ALL ENTRIES IN @t_materiales_no_sujeto
      WHERE matnr = @t_materiales_no_sujeto-matnr AND
            werks = @t_materiales_no_sujeto-werks AND
            lgort = @t_materiales_no_sujeto-lgort AND
            labst <> ''.

* sacamos la cantidad pendiente en EM
    SELECT * FROM mdbs
      INTO TABLE t_mdbs
      FOR ALL ENTRIES IN t_materiales_no_sujeto
      WHERE  matnr = t_materiales_no_sujeto-matnr AND
              werks = t_materiales_no_sujeto-werks AND
              lgort = t_materiales_no_sujeto-lgort AND
              loekz <> 'L' AND
              elikz <> 'X'.

* montamos la estructura con la info que mandaremos al proxy
    LOOP AT t_materiales_no_sujeto INTO wa_materiales.

      CLEAR: wa_row.

      LOOP AT t_stock_nosujeto INTO DATA(wa_stock_nosujeto) WHERE matnr = wa_materiales-matnr AND
                                                                werks = wa_materiales-werks AND
                                                              lgort = wa_materiales-lgort.

        wa_row-cantidad = wa_row-cantidad + wa_stock_nosujeto-labst. "sumar los stocks q nos digan
        wa_row-nlote = wa_row-nlote + 1.

      ENDLOOP.


      wa_row-centro = wa_materiales-werks.
      wa_row-almacen = wa_materiales-lgort.
      wa_row-cmatsap = wa_materiales-matnr.
      wa_row-umb = wa_materiales-meins.

      READ TABLE t_centro_sociedad INTO wa_centro_sociedad WITH KEY werks = wa_materiales-werks.
      IF sy-subrc = 0.
        wa_row-sociedad = wa_centro_sociedad-bukrs.
      ENDIF.

      wa_row-procesado = ''.
      wa_row-factual = sy-datum.
      wa_row-hactual = sy-uzeit.

      "La cantidad pendiente de EM
      LOOP AT t_mdbs INTO wa_mdbs WHERE matnr = wa_materiales-matnr AND
                                              werks = wa_materiales-werks AND
                                              lgort = wa_materiales-lgort.
        IF wa_mdbs-wemng < wa_mdbs-menge.
          wa_row-can_ped_entrada = wa_row-can_ped_entrada + ( wa_mdbs-menge - wa_mdbs-wemng ).
        ENDIF.
      ENDLOOP.


* Cuando la cantidad en EM resultante es negativa debería aparecer mejor un 0 o en blanco
      IF wa_row-can_ped_entrada < 0 OR wa_row-can_ped_entrada IS INITIAL.
        wa_row-can_ped_entrada = 0.
      ENDIF.

      IF wa_row-cantidad IS INITIAL.
        wa_row-cantidad = 0.
      ENDIF.

      IF wa_row-nlote IS INITIAL.
        wa_row-nlote = 0.
      ENDIF.


      APPEND wa_row TO t_row.
*    ENDIF.
    ENDLOOP.
  ENDIF.

  e_datos-mt_fstcsc-row[] = t_row[].

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CONEXION_PROXY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM conexion_proxy .
  DATA: lo_proxy    TYPE REF TO cl_proxy_client,
        lv_log_port TYPE prx_logical_port_name.


  TRY.
      CREATE OBJECT lo_proxy
              TYPE ('ZCO_SI_FSTCSC_OUTB')
              EXPORTING logical_port_name = lv_log_port.

      CAST zco_si_fstcsc_outb( lo_proxy )->si_fstcsc_outb( output = e_datos ).

      COMMIT WORK AND WAIT.

    CATCH cx_root INTO DATA(lr_exc).
      MESSAGE text-e01 TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
  ENDTRY.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat  CHANGING p_lt_fcat.
  DATA: ls_fcat TYPE lvc_s_fcat.


  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZDT_FSTCSC_R'
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.


  IF sy-subrc = 0.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'CONTROLLER'.
          ls_fcat-no_out = 'X'.
        WHEN 'SOCIEDAD'.
          ls_fcat-coltext = text-001.
          ls_fcat-scrtext_l = text-001.
          ls_fcat-scrtext_m = text-001.
          ls_fcat-scrtext_s  = text-001.
        WHEN 'CENTRO'.
          ls_fcat-coltext = text-002.
          ls_fcat-scrtext_l = text-002.
          ls_fcat-scrtext_m = text-002.
          ls_fcat-scrtext_s  = text-002.
        WHEN 'ALMACEN'.
          ls_fcat-coltext = text-003.
          ls_fcat-scrtext_l = text-003.
          ls_fcat-scrtext_m = text-003.
          ls_fcat-scrtext_s  = text-003.
        WHEN 'CMATSAP'.
          ls_fcat-coltext = text-004.
          ls_fcat-scrtext_l = text-004.
          ls_fcat-scrtext_m = text-004.
          ls_fcat-scrtext_s  = text-004.
        WHEN 'UMB'.
          ls_fcat-coltext = text-005.
          ls_fcat-scrtext_l = text-005.
          ls_fcat-scrtext_m = text-005.
          ls_fcat-scrtext_s  = text-005.
        WHEN 'CANTIDAD'.
          ls_fcat-coltext = text-006.
          ls_fcat-scrtext_l = text-006.
          ls_fcat-scrtext_m = text-006.
          ls_fcat-scrtext_s  = text-006.
        WHEN 'NLOTE'.
          ls_fcat-coltext = text-007.
          ls_fcat-scrtext_l = text-007.
          ls_fcat-scrtext_m = text-007.
          ls_fcat-scrtext_s  = text-007.
        WHEN 'CAN_PED_ENTRADA'.
          ls_fcat-coltext = text-008.
          ls_fcat-scrtext_l = text-008.
          ls_fcat-scrtext_m = text-008.
          ls_fcat-scrtext_s  = text-008.
        WHEN 'FACTUAL'.
          ls_fcat-no_out = 'X'.
        WHEN 'HACTUAL'.
          ls_fcat-no_out = 'X'.
        WHEN 'PROCESADO '.
          ls_fcat-no_out = 'X'.
      ENDCASE.

      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM layout  CHANGING ls_layout TYPE lvc_s_layo.
  ls_layout-zebra = 'X'.
  ls_layout-cwidth_opt = 'X'.
  ls_layout-sel_mode = 'A'.

ENDFORM.
