*&---------------------------------------------------------------------*
*& Report  ZRMM0022
*&
*&---------------------------------------------------------------------*
*& Autor: Carlos Vivó Jiménez
*& Fecha: 18.07.2019
*&
*& Descripción: el proceso de creación de papeles y cartoncillos es me-
*&    cánico. Se procede a su automatización para ahorrar tiempo y re-
*&    ducir errores de datos
*&
*&---------------------------------------------------------------------*
REPORT zrmm0022.

INCLUDE zrmm0022_top.
INCLUDE zrmm0022_sel.
INCLUDE zrmm0022_f00.

START-OF-SELECTION.
  IF p_matnr IS INITIAL.
    SELECT zzgramaje FROM ztmm0003
      INTO TABLE t_grama
      WHERE zzgramaje IN s_grama.

    IF t_grama[] IS INITIAL.
      MESSAGE 'No se han encontrado gramajes para la selección realizada. Actualícelos en la transacción ZTMM0003' TYPE 'I'.
      RETURN.
    ENDIF.

    SELECT zzancho FROM ztmm0004
      INTO TABLE t_ancho
      WHERE zzancho IN s_ancho.

    IF t_ancho[] IS INITIAL.
      MESSAGE 'No se han encontrado anchos para la selección realizada. Actualícelos en la transacción ZTMM0004' TYPE 'I'.
      RETURN.
    ENDIF.

    IF s_largo[] IS NOT INITIAL.
      SELECT zzlargo FROM ztmm0013
        INTO TABLE t_largo
        WHERE zzlargo IN s_largo.

      IF t_largo[] IS INITIAL.
        MESSAGE 'No se han encontrado largos para la selección realizada. Actualícelos en la transacción ZTMM0013' TYPE 'I'.
        RETURN.
      ENDIF.
    ENDIF.

    IF p_impre IS NOT INITIAL.
      p_mtart = COND #( WHEN s_largo[] IS INITIAL THEN 'ZPIM' ELSE 'ZPIH' ).
    ELSE.
      IF p_matkl BETWEEN 10000 AND 10299.
        p_mtart = 'ZPAP'.
      ELSEIF p_matkl BETWEEN 10300 AND 10599. " ZCAR, ZCAB "02.08.2022 JMU - Ampliar rango superior de ZCAB para que coincida con TVARVC, para futuras ampliaciones de grupos de materiales ajustar esta línea
        p_mtart = COND #( WHEN s_largo[] IS INITIAL THEN 'ZCAB' ELSE 'ZCAH' ).
      ENDIF.
    ENDIF.

    LOOP AT t_grama.
      LOOP AT t_ancho.
        IF t_largo[] IS NOT INITIAL.
          LOOP AT t_largo.
            PERFORM generar_matnr USING p_mtart p_matkl t_grama t_ancho t_largo p_impre
                                  CHANGING mara-matnr.

            MOVE: t_grama TO mara-zzgramaje,
                  t_ancho TO mara-zzancho,
                  t_largo TO mara-zzlargo,
                  p_mtart TO mara-mtart,
                  p_matkl TO mara-matkl.

            APPEND mara TO t_mara.
            CLEAR mara.
          ENDLOOP.
        ELSE.
          PERFORM generar_matnr USING p_mtart p_matkl t_grama t_ancho t_largo p_impre
                                CHANGING mara-matnr.

          MOVE: t_grama TO mara-zzgramaje,
                t_ancho TO mara-zzancho,
                t_largo TO mara-zzlargo,
                p_mtart TO mara-mtart,
                p_matkl TO mara-matkl.

          APPEND mara TO t_mara.
          CLEAR mara.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ELSE.
    DATA: lv_mtart LIKE p_mtart.

    LOOP AT s_matnr.
      SHIFT s_matnr-low LEFT DELETING LEADING '0'.
      IF s_matnr CS 'P'.
*        lv_mtart = COND #( WHEN strlen( s_matnr-low ) EQ 14 THEN 'ZPIM' ELSE 'ZPIH' ).
        MESSAGE 'No está preparada la creación de pre-impreso aún por este medio' TYPE 'I'.
        RETURN.
      ELSEIF strlen( s_matnr-low ) EQ 17.
        lv_mtart = 'ZCAH'.
      ELSE.
        lv_mtart = COND #(  WHEN s_matnr-low(5) BETWEEN 10000 AND 10299 THEN 'ZPAP'
                            WHEN s_matnr-low(5) BETWEEN 10300 AND 10599 THEN 'ZCAB' ). "02.08.2022 JMU - Ampliar rango superior de ZCAB para que coincida con TVARVC, para futuras ampliaciones de grupos de materiales ajustar esta línea
      ENDIF.

      IF p_mtart IS INITIAL.
        p_mtart = lv_mtart.
      ELSEIF p_mtart NE lv_mtart.
        MESSAGE 'Ejecute la creación para un único tipo de material' TYPE 'I'.
        RETURN.
      ENDIF.
    ENDLOOP.

    CASE p_mtart.
      WHEN 'ZPAP' OR 'ZCAB'.
        LOOP AT s_matnr.
          mara-matnr = s_matnr-low.
          mara-mtart = p_mtart.
          mara-matkl = s_matnr-low+5(5).
          mara-zzgramaje = s_matnr-low+10(4).
          mara-zzancho = s_matnr-low+14(4).
          APPEND mara TO t_mara.
          CLEAR mara.
        ENDLOOP.
      WHEN 'ZCAH'.
        LOOP AT s_matnr.
          mara-matnr = s_matnr-low.
          mara-mtart = p_mtart.
          mara-matkl = s_matnr-low+1(5).
          mara-zzgramaje = s_matnr-low+6(4).
          mara-zzancho = s_matnr-low+10(4).
          mara-zzlargo = s_matnr-low+14(4).
          APPEND mara TO t_mara.
          CLEAR mara.
        ENDLOOP.
    ENDCASE.
  ENDIF.

  EXPORT p1 = 'C' TO MEMORY ID 'ZMM_PROPUESTA_CAMPOS_MAT'. " para el FM ZMM_PROPUESTA_CAMPOS_MAT

END-OF-SELECTION.

  LOOP AT t_mara.
    CLEAR:  mara, marc, mbew, mard, mvke, mlgn, mlgt, mpop, headdata,
            materialdescription, extensioninx, extensionin, te_mara, te_marax.
    REFRESH: materialdescription, extensioninx, extensionin.

    " cvivo - 09.11.2020 - Verificaciones de valores inteligentes
    SELECT SINGLE @abap_true FROM ztmm0003
    WHERE zzgramaje EQ @t_mara-zzgramaje
    INTO @DATA(ok_gramaje).

    IF sy-subrc NE 0.
      IF p_fondo IS INITIAL.
        t_return = VALUE #( ( message = 'El gramaje introducido no es válido' ) ).
        CONTINUE.
      ELSE.
        MOVE t_mara-zzgramaje TO ztmm0003.
        INSERT ztmm0003.
        COMMIT WORK AND WAIT.
      ENDIF.
    ENDIF.

    SELECT SINGLE @abap_true FROM ztmm0004
    WHERE zzancho EQ @t_mara-zzancho
    INTO @DATA(ok_ancho).

    IF sy-subrc NE 0.
      IF p_fondo IS INITIAL.
        t_return = VALUE #( ( message = 'El ancho introducido no es válido' ) ).
        CONTINUE.
      ELSE.
        MOVE t_mara-zzancho TO ztmm0004.
        INSERT ztmm0004.
        COMMIT WORK AND WAIT.
      ENDIF.
    ENDIF.

    IF t_mara-zzlargo IS NOT INITIAL.
      SELECT SINGLE @abap_true FROM ztmm0013
        WHERE zzlargo EQ @t_mara-zzlargo
        INTO @DATA(ok_largo).

      IF sy-subrc NE 0.
        IF p_fondo IS INITIAL.
          t_return = VALUE #( ( message = 'El largo introducido no es válido' ) ).
          CONTINUE.
        ELSE.
          MOVE t_mara-zzlargo TO ztmm0013.
          INSERT ztmm0013.
          COMMIT WORK AND WAIT.
        ENDIF.
      ENDIF.
    ENDIF.

*   Campos de cliente
    te_mara-material = te_marax-material = t_mara-matnr.
    te_mara-zzgramaje = t_mara-zzgramaje.
    te_mara-zzancho = t_mara-zzancho.
    te_mara-zzlargo = t_mara-zzlargo.
    MOVE 'X' TO:  te_marax-zzgramaje,
                  te_marax-zzancho,
                  te_marax-zzlargo.

    extensionin-structure = 'BAPI_TE_MARA'.
    MOVE te_mara TO extensionin-valuepart1.
    extensioninx-structure = 'BAPI_TE_MARAX'.
    extensioninx-valuepart1(18) = t_mara-matnr.
    extensioninx-valuepart1+18(1) = extensioninx-valuepart1+19(1) = extensioninx-valuepart1+20(1) = 'X'.
    APPEND: extensionin, extensioninx.

*   Campos base de creación
    headdata-material = t_mara-matnr.
    headdata-ind_sector = 'Z'.
    headdata-matl_type = t_mara-mtart.

    bapi_mara-matl_group = t_mara-matkl.
    bapi_marax-matl_group = 'X'.

    CALL FUNCTION 'Z_MM_CARGAR_DATOS_MARA_MM01'
      EXPORTING
        i_mtart       = t_mara-mtart
        i_matnr       = t_mara-matnr " cvivo - Proyecto WM
        opcional_mara = t_mara
      IMPORTING
        o_maktx       = materialdescription-matl_desc.

    materialdescription-langu = 'S'.
    APPEND materialdescription.

    IF p2000 IS NOT INITIAL. "     Centro/Ventas/WM
      PERFORM crear_material USING '2000' '10' '200' 'X'. " WM + MRP
    ENDIF.
    IF p2001 IS NOT INITIAL.
      PERFORM crear_material USING '2001' '10' '201' 'X'. " Wm Pacs + MRP
    ENDIF.
    IF p2003 IS NOT INITIAL.
      PERFORM crear_material USING '2003' space space space.
    ENDIF.
    IF p2004 IS NOT INITIAL.
      PERFORM crear_material USING '2004' '10' space space.
    ENDIF.
    IF p2010 IS NOT INITIAL.
      PERFORM crear_material USING '2010' '10' '210' space. " Wm ER no MRP
    ENDIF.
    IF p2020 IS NOT INITIAL.
      PERFORM crear_material USING '2020' space space space.
    ENDIF.
    IF p2030 IS NOT INITIAL.
      PERFORM crear_material USING '2030' space space space.
    ENDIF.
    IF p2040 IS NOT INITIAL.
      PERFORM crear_material USING '2040' '10' '240' 'X'. " WM + MRP
    ENDIF.
    IF p2041 IS NOT INITIAL.
      PERFORM crear_material USING '2041' space space space.
    ENDIF.
    IF p2051 IS NOT INITIAL.
      PERFORM crear_material USING '2051' space space space.
    ENDIF.
    IF p2060 IS NOT INITIAL.
      PERFORM crear_material USING '2060' space space space.
    ENDIF.
    IF p2070 IS NOT INITIAL.
      PERFORM crear_material USING '2070' space space space.
    ENDIF.
  ENDLOOP.

  IF p_fondo IS NOT INITIAL.
    LOOP AT t_return INTO DATA(l_return).
      WRITE l_return-message.
    ENDLOOP.
  ELSE.
* Mostrar ALV
* Instanciar ALV desde tabla interna
    cl_salv_table=>factory( IMPORTING r_salv_table = gr_table CHANGING t_table = t_return ).

* Disposición ALV
    layout_settings = gr_table->get_layout( ).
    layout_key-report = sy-repid.
    layout_settings->set_key( layout_key ).
    layout_settings->set_save_restriction( if_salv_c_layout=>restrict_none ).

* Optimizar columnas
    columns = gr_table->get_columns( ).
    columns->set_optimize( ).

** Modificar/ocultar columnas
*  TRY.
*      column = columns->get_column( 'MANDT' ).
*      column->set_visible( if_salv_c_bool_sap=>false ).
*    CATCH cx_salv_not_found INTO not_found.
*  ENDTRY.

* Funciones ALV activar
    functions = gr_table->get_functions( ).
    functions->set_all( ).

* Opciones generales ALV
    display_settings = gr_table->get_display_settings( ).
    display_settings->set_striped_pattern( if_salv_c_bool_sap=>true ).
    display_settings->set_list_header( 'Resultado' ).

    gr_table->display( ).
  ENDIF.
