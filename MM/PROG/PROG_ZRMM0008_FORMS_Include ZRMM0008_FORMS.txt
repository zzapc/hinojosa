*&---------------------------------------------------------------------*
*&  Include           ZRMM0008_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recuperar_datos .


  DATA: BEGIN OF gt_datos_aux OCCURS 0.
          INCLUDE STRUCTURE zstmm_bob_exp_qm.
        DATA: END OF gt_datos_aux.

  DATA: lv_index     LIKE         sy-tabix,
        lv_autoriz   TYPE         xflag,
        ls_datos_aux LIKE LINE OF gt_datos_aux.

* GST - 05/08/2015 ->
  DATA: lv_rollo TYPE xflag,
        lv_mtart TYPE mtart.
* GST - 05/08/2015 <-

  CLEAR: gt_datos, gt_datos_aux.
  REFRESH: gt_datos, gt_datos_aux.

* YTG- 14/04/2017 Recuperar campo ZZSEGCAL
  SELECT a~vbeln b~posnr b~vgbel b~vgpos a~kunnr
         a~lfart a~wadat_ist a~wadat c~kostk
         c~gbstk b~matkl d~zzcalidad
         d~zzgramaje d~zzancho b~charg
         b~matnr b~arktx a~zzsegcal
    INTO CORRESPONDING FIELDS OF TABLE gt_datos_aux
    FROM likp AS a
    INNER JOIN lips AS b ON b~vbeln = a~vbeln
    INNER JOIN vbuk AS c ON c~vbeln = a~vbeln
    INNER JOIN mara AS d ON d~matnr = b~matnr
    WHERE a~vbeln IN so_vbeln
    AND a~vstel IN so_vstel
    AND a~vkorg IN so_vkorg
    AND a~kunnr IN so_kunnr
    AND c~gbstk IN so_gbstk
    AND c~kostk IN so_kostk
    AND a~lfart IN so_lfart
    AND a~lfdat IN so_lfdat
    AND a~wadat_ist IN so_wadat
    AND b~matnr IN so_matnr
    AND d~mtart = 'ZPAP'
    AND b~charg NE ' '.

  LOOP AT gt_datos_aux INTO ls_datos_aux.

    " Tipo de pedido:
    PERFORM tipo_pedido USING ls_datos_aux-vgbel
                              ls_datos_aux-vgpos
                        CHANGING ls_datos_aux-tipo_ped.

    " Nombre del cliente:
    SELECT SINGLE name1 INTO ls_datos_aux-name1
      FROM kna1
      WHERE kunnr = ls_datos_aux-kunnr.

    " Descripción de calidad:
    SELECT SINGLE wgbez INTO ls_datos_aux-wgbez
      FROM t023t
      WHERE spras = sy-langu
      AND matkl = ls_datos_aux-matkl.

    " Leemos datos de la clasificación bobina:
    PERFORM dat_bobina USING ls_datos_aux-matnr
                             ls_datos_aux-charg
                       CHANGING ls_datos_aux-diametro
                                ls_datos_aux-diametro_un
                                ls_datos_aux-empalmes
                                ls_datos_aux-fec_fab
                                ls_datos_aux-turno
                                ls_datos_aux-longitud
                                ls_datos_aux-longitud_un
                                ls_datos_aux-peso
                                ls_datos_aux-peso_un
                                ls_datos_aux-cliente
                                ls_datos_aux-lote_orig
                                ls_datos_aux-matnr_orig
                                ls_datos_aux-motiv_reproc
                                ls_datos_aux-motiv_remanip
                                ls_datos_aux-de_bobina.                     "+7000013999-7000014011 Ampliar inform ZMM0020

    " Chequeo sobre el dato del cliente:
    IF ls_datos_aux-cliente IS INITIAL.
      CONTINUE.
    ELSE.
      CLEAR lv_autoriz.
      PERFORM chequeo_autorizacion USING ls_datos_aux-cliente
                                   CHANGING lv_autoriz.
      IF lv_autoriz <> 'X'.
        CONTINUE.
      ELSE.

*        " Recuperamos datos de rollo: Fecha de fabricación y turno
*        IF ls_datos_aux-matnr_orig is not initial and
*           ls_datos_aux-lote_orig is not initial.
*        PERFORM dat_rollo USING ls_datos_aux-matnr_orig
*                                ls_datos_aux-lote_orig
*                          CHANGING ls_datos_aux-fec_fab_rollo
*                                   ls_datos_aux-turno_rollo.
*        ENDIF.


* GST - 04/08/2015 ->
        CLEAR: lv_rollo, lv_mtart.
        WHILE ( ls_datos_aux-lote_ins IS INITIAL AND lv_rollo <> 'X').
* GST - 04/08/2015 <-

          " Recuperamos datos de calidad: SCT
          PERFORM recup_sct USING ls_datos_aux-matnr
                                  ls_datos_aux-charg
                                  ls_datos_aux-matnr_orig
                                  ls_datos_aux-lote_orig
                            CHANGING ls_datos_aux-sct_num
                                     ls_datos_aux-lim_pap
                                     ls_datos_aux-lote_ins
                                     ls_datos_aux-sct_dec
                                     ls_datos_aux-lim_pap_dec
                                     ls_datos_aux-origen_lote
                                     ls_datos_aux-desvio
                                     ls_datos_aux-plnnr
                                     ls_datos_aux-sct_val_teor
                                     ls_datos_aux-sct_val_teor_dec.

* GST - 04/08/2015 ->

          " Recuperamos datos de rollo: Fecha de fabricación y turno
          IF ls_datos_aux-matnr_orig IS NOT INITIAL AND
             ls_datos_aux-lote_orig IS NOT INITIAL.
            PERFORM dat_rollo USING ls_datos_aux-matnr_orig
                                    ls_datos_aux-lote_orig
                              CHANGING ls_datos_aux-fec_fab_rollo
                                       ls_datos_aux-turno_rollo
                                       ls_datos_aux-de_rollo.                        "+7000013999-7000014011 Ampliar inform ZMM0020
            CLEAR lv_mtart.
            SELECT SINGLE mtart INTO lv_mtart
              FROM mara
              WHERE matnr = ls_datos_aux-matnr_orig.

            IF lv_mtart = 'ZROL'.
              lv_rollo = 'X'.
              ls_datos_aux-origen_lote = 'R'.
            ELSE.
              ls_datos_aux-origen_lote = 'B'.
            ENDIF.

            IF ls_datos_aux-lote_ins IS INITIAL AND lv_rollo <> 'X'.
              PERFORM buscar_rollo CHANGING ls_datos_aux-matnr_orig
                                            ls_datos_aux-lote_orig.

              IF ls_datos_aux-matnr_orig IS INITIAL OR  ls_datos_aux-lote_orig IS INITIAL.
                lv_rollo = 'X'.
              ENDIF.

            ENDIF.

          ELSE.
            lv_rollo = 'X'.
          ENDIF.


        ENDWHILE.
* GST - 04/08/2015 <-

** GST - 04/06/2015 ->
*        " Realizamos el cálculo del desvío
*        PERFORM calc_desv USING ls_datos_aux-sct_num
*                                ls_datos_aux-lim_pap
*                          CHANGING ls_datos_aux-desvio.
** GST - 04/06/2015 <-

* GST - 04/06/2015 ->
        IF ls_datos_aux-lote_ins IS NOT INITIAL.

          " Recuperamos datos de calidad: GRAMAJE MEDIO
          PERFORM recup_grm USING ls_datos_aux-lote_ins
                                  ls_datos_aux-plnnr
                            CHANGING ls_datos_aux-grm_num
                                     ls_datos_aux-grm_dec
                                     ls_datos_aux-grm_lim_pap
                                     ls_datos_aux-grm_lim_pap_dec
                                     ls_datos_aux-grm_desv
                                     ls_datos_aux-grm_val_teor
                                     ls_datos_aux-grm_val_teor_dec.

          " Recuperamos datos de calidad: CMT
          PERFORM recup_cmt USING ls_datos_aux-lote_ins
                                  ls_datos_aux-plnnr
                            CHANGING ls_datos_aux-cmt_num
                                     ls_datos_aux-cmt_dec
                                     ls_datos_aux-cmt_lim_pap
                                     ls_datos_aux-cmt_lim_pap_dec
                                     ls_datos_aux-cmt_desv
                                     ls_datos_aux-cmt_val_teor
                                     ls_datos_aux-cmt_val_teor_dec.

          " Recuperamos datos de calidad: ESTALLIDO
          PERFORM recup_est USING ls_datos_aux-lote_ins
                                  ls_datos_aux-plnnr
                            CHANGING ls_datos_aux-est_num
                                     ls_datos_aux-est_dec
                                     ls_datos_aux-est_lim_pap
                                     ls_datos_aux-est_lim_pap_dec
                                     ls_datos_aux-est_desv
                                     ls_datos_aux-est_val_teor
                                     ls_datos_aux-est_val_teor_dec.

          " Recuperamos datos de calidad: COBB60
          PERFORM recup_cobb60 USING ls_datos_aux-lote_ins
                                     ls_datos_aux-plnnr
                               CHANGING ls_datos_aux-cobb60_num
                                        ls_datos_aux-cobb60_dec
                                        ls_datos_aux-cobb60_lim_pap
                                        ls_datos_aux-cobb60_lim_pap_dec
                                        ls_datos_aux-cobb60_desv
                                        ls_datos_aux-cobb60_val_teor
                                        ls_datos_aux-cobb60_val_teor_dec.

          " Recuperamos datos de calidad: COBB1800
          PERFORM recup_cobb1800 USING ls_datos_aux-lote_ins
                                       ls_datos_aux-plnnr
                                 CHANGING ls_datos_aux-cobb1800_num
                                          ls_datos_aux-cobb1800_dec
                                          ls_datos_aux-cobb1800_lim_pap
                                          ls_datos_aux-cobb1800_lim_pap_dec
                                          ls_datos_aux-cobb1800_desv
                                          ls_datos_aux-cobb1800_val_teor
                                          ls_datos_aux-cobb1800_val_teor_dec.

          " Recuperamos datos de calidad: GOTA
          PERFORM recup_gota USING ls_datos_aux-lote_ins
                                   ls_datos_aux-plnnr
                             CHANGING ls_datos_aux-gota_num
                                      ls_datos_aux-gota_dec
                                      ls_datos_aux-gota_lim_pap
                                      ls_datos_aux-gota_lim_pap_dec
                                      ls_datos_aux-gota_desv
                                      ls_datos_aux-gota_val_teor
                                      ls_datos_aux-gota_val_teor_dec.

*--> SGU SOTHIS 23/02/2017 SAT 7000013866 Ampliar informe de Z de Bobinas expedidas
          " Recuperamos datos de calidad: GOTA
          PERFORM recup_humedad USING ls_datos_aux-lote_ins
                                      ls_datos_aux-plnnr
                             CHANGING ls_datos_aux-hum_num
                                      ls_datos_aux-hum_dec
                                      ls_datos_aux-hum_lim_pap
                                      ls_datos_aux-hum_lim_pap_dec
                                      ls_datos_aux-hum_desv
                                      ls_datos_aux-hum_val_teor
                                      ls_datos_aux-hum_val_teor_dec.
*<-- SGU SOTHIS 23/02/2017 SAT 7000013866 Ampliar informe de Z de Bobinas expedidas

*--> INICIO  7000013999-7000014011 Ampliar inform ZMM0020
          " Recuperamos datos de porosidad
          PERFORM recup_porosidad USING ls_datos_aux-lote_ins
                                        ls_datos_aux-plnnr
                               CHANGING ls_datos_aux-por_num
                                        ls_datos_aux-por_dec
                                        ls_datos_aux-por_val_min
                                        ls_datos_aux-por_val_max.
*<-- FIN     7000013999-7000014011 Ampliar inform ZMM0020

        ENDIF.
* GST - 04/06/2015 <-

*-->  YTG- 7000014628 Incluir descriptivo 12/04/2017
        SELECT SINGLE  texto FROM ztsd0004
          INTO ls_datos_aux-des_segcal
          WHERE zzsegal EQ ls_datos_aux-zzsegcal
          AND spras EQ sy-langu.
*<--   YTG- 7000014628  Incluir descriptivo 12/04/2017

        APPEND ls_datos_aux TO gt_datos.
      ENDIF.

    ENDIF.

  ENDLOOP.

ENDFORM.                    " RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  TIPO_PEDIDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_VGBEL  text
*      -->P_LS_DATOS_AUX_VGPOS  text
*      <--P_LS_DATOS_AUX_TIPO_PED  text
*----------------------------------------------------------------------*
FORM tipo_pedido  USING    p_vgbel
                           p_vgpos
                  CHANGING p_tipo_ped.

  DATA: lv_ebeln TYPE ebeln.

  CLEAR: p_tipo_ped, lv_ebeln.

  " Mirar si es de compras:
  SELECT SINGLE ebeln INTO lv_ebeln
    FROM ekpo
    WHERE ebeln = p_vgbel
    AND ebelp = p_vgpos+1(5).

  IF lv_ebeln IS NOT INITIAL.
    p_tipo_ped = 'Compra'.
  ELSE.
    " Mirar si es de ventas:
    SELECT SINGLE vbeln INTO lv_ebeln
      FROM vbap
      WHERE vbeln = p_vgbel
      AND posnr = p_vgpos.

    IF lv_ebeln IS NOT INITIAL.
      p_tipo_ped = 'Venta'.
    ELSE.
      CLEAR p_tipo_ped.
    ENDIF.
  ENDIF.

ENDFORM.                    " TIPO_PEDIDO
*&---------------------------------------------------------------------*
*&      Form  DAT_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_MATNR  text
*      -->P_LS_DATOS_AUX_CHARG  text
*      <--P_LS_DATOS_AUX_DIAMETRO  text
*      <--P_LS_DATOS_AUX_EMPALMES  text
*      <--P_LS_DATOS_AUX_FEC_FAB  text
*      <--P_LS_DATOS_AUX_LONGITUD  text
*      <--P_LS_DATOS_AUX_PESO  text
*      <--P_LS_DATOS_AUX_CLIENTE  text
*      <--P_LS_DATOS_AUX_LOTE_ORIG  text
*      <--P_LS_DATOS_AUX_MATNR_ORIG  text
*----------------------------------------------------------------------*
FORM dat_bobina  USING    p_matnr
                          p_charg
                 CHANGING p_diametro
                          p_diametro_un
                          p_empalmes
                          p_fec_fab
                          p_turno
                          p_longitud
                          p_longitud_un
                          p_peso
                          p_peso_un
                          p_cliente
                          p_lote_orig
                          p_matnr_orig TYPE matnr
                          p_motiv_reproc
                          p_motiv_remanip
                          p_de_bobina.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.

  DATA: lv_mblnr          TYPE mblnr,
        lv_mjahr          TYPE mjahr,
        lv_cputm          TYPE cputm,
        lv_c_reproc       TYPE zpp_motiv_reproc,
        lv_c_reproc_scada TYPE zpp_motiv_reproc.

  DATA: BEGIN OF lt_materiales OCCURS 0,
          matnr TYPE matnr,
          charg TYPE charg_d,
          mtart TYPE mtart,
        END OF lt_materiales.
  DATA: ls_materiales LIKE LINE OF lt_materiales.

  CLEAR: p_diametro, p_diametro_un, p_empalmes, p_fec_fab, p_longitud.
  CLEAR: p_peso, p_cliente, p_lote_orig, p_matnr_orig.
  CLEAR: p_peso_un, p_longitud_un, p_turno, p_motiv_reproc.
  CLEAR: p_motiv_remanip.

  CLEAR: lv_object, ls_alloc_values_num, ls_alloc_values_num.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char,
         lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char,
           lt_alloc_values_curr, lt_return.

  CLEAR: lt_materiales, ls_materiales.
  REFRESH: lt_materiales.

  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

* Valores numéricos de las características:
  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CASE ls_alloc_values_num-charact.

        " Diámetro (mm):
      WHEN 'Z_DIAMETRO'.
        p_diametro = ls_alloc_values_num-value_from.
        p_diametro_un = ls_alloc_values_num-unit_from.
        IF p_diametro_un IS INITIAL.
          p_diametro_un = 'mm'.
        ENDIF.

        "RAP -> Inicio - 77483
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            input          = p_diametro_un
            language       = sy-langu
          IMPORTING
            output         = p_diametro_un
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
        "RAP -> Fin - 77483


        " Empalmes:
      WHEN 'Z_EMPALMES'.
        p_empalmes = ls_alloc_values_num-value_from.

        " Fecha de fabricación:
      WHEN 'Z_FECHA_FABRICACION'.
        CLEAR: lv_num, lv_fec_n.
        lv_num = ls_alloc_values_num-value_from.
        lv_fec_n = lv_num.
        WRITE lv_fec_n TO p_fec_fab.
        CONDENSE p_fec_fab.
        CONCATENATE p_fec_fab+6(2) p_fec_fab+4(2) p_fec_fab+0(4)
                    INTO p_fec_fab SEPARATED BY '.'.
        " Longitud:
      WHEN 'Z_LONGITUD_B'.
        p_longitud = ls_alloc_values_num-value_from.
        p_longitud_un = ls_alloc_values_num-unit_from.
        IF p_longitud_un IS INITIAL.
          p_longitud_un = 'm'.
        ENDIF.

        "RAP -> Inicio - 77483
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            input          = p_longitud_un
            language       = sy-langu
          IMPORTING
            output         = p_longitud_un
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
        "RAP -> Fin - 77483

        " Peso:
      WHEN 'Z_PESO'.
        p_peso = ls_alloc_values_num-value_from.
        p_peso_un = ls_alloc_values_num-unit_from.
        IF p_peso_un IS INITIAL.
          p_peso_un = 'kg'.
        ENDIF.

    ENDCASE.

  ENDLOOP.

  " Valores char de las características:
  CLEAR: lv_c_reproc, lv_c_reproc_scada.
  LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
    CASE ls_alloc_values_char-charact.
        " Cliente:
      WHEN 'Z_CLIENTE'.
        CONDENSE ls_alloc_values_char-value_char.
        p_cliente = ls_alloc_values_char-value_char.


        " Lote rollo origen:
      WHEN 'Z_LOTE_ORIGEN'.
        CONDENSE ls_alloc_values_char-value_char.
        p_lote_orig = ls_alloc_values_char-value_char.

        " Material rollo origen:
      WHEN 'Z_ROLLO_ORIGEN_V2'.
        CONDENSE ls_alloc_values_char-value_char.
        p_matnr_orig = ls_alloc_values_char-value_char.
* GST - 16/06/2015 ->
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = p_matnr_orig
          IMPORTING
            output = p_matnr_orig.
* GST - 16/06/2015 <-

* GST - 30/09/2015 - Motivo reproceso ->
      WHEN 'ZPPI_MOTIVO_REPROCESO_BOBINA'.
        CONDENSE ls_alloc_values_char-value_char.
        lv_c_reproc = ls_alloc_values_char-value_char.
        TRANSLATE lv_c_reproc TO UPPER CASE.
* GST - 30/09/2015 - Motivo reproceso <-

* GST - 22/10/2015 - Motivo reproceso SCADA ->
      WHEN 'Z_MOTIVO_REPROCESO_BOBINA'.
        CONDENSE ls_alloc_values_char-value_char.
        lv_c_reproc_scada = ls_alloc_values_char-value_char.
        TRANSLATE lv_c_reproc_scada TO UPPER CASE.
* GST - 22/10/2015 - Motivo reproceso SCADA <-

* GST - 09/11/2015 - Motivo remanipulado ->
      WHEN 'ZPPI_MOTIVO_REMANIPULADO'.
        CONDENSE ls_alloc_values_char-value_char.
        p_motiv_remanip = ls_alloc_values_char-value_char.
        TRANSLATE p_motiv_remanip TO UPPER CASE.
* GST - 09/11/2015 - Motivo remanipulado <-

*--> INICIO  7000013999-7000014011 Ampliar inform ZMM0020
        "Decision de empleo bobina
      WHEN 'LOBM_UDCODE'.
        p_de_bobina = ls_alloc_values_char-value_char.
*<-- FIN     7000013999-7000014011 Ampliar inform ZMM0020
    ENDCASE.
  ENDLOOP.

* GST - 30/09/2015 - Motivo reproceso ->
  IF lv_c_reproc IS NOT INITIAL.
    p_motiv_reproc = lv_c_reproc.
* GST - 30/09/2015 - Motivo reproceso <-
* GST - 22/10/2015 - Motivo reproceso SCADA ->
  ELSEIF lv_c_reproc_scada IS NOT INITIAL.
    p_motiv_reproc = lv_c_reproc_scada.
* GST - 22/10/2015 - Motivo reproceso SCADA <-
  ENDIF.


* Si el material rollo origen está vacío, lo recuperaremos de
* la MCH1:
  IF p_matnr_orig IS INITIAL.

    SELECT a~matnr a~charg b~mtart
      INTO CORRESPONDING FIELDS OF TABLE lt_materiales
      FROM mch1 AS a
      INNER JOIN mara AS b ON b~matnr = a~matnr
      WHERE a~charg = p_lote_orig
      AND b~mtart = 'ZROL'.

    IF lt_materiales[] IS NOT INITIAL.
      CLEAR ls_materiales.
      READ TABLE lt_materiales INTO ls_materiales INDEX 1.
      p_matnr_orig = ls_materiales-matnr.
    ENDIF.

  ENDIF.

* Obtenemos el turno del movimiento de alta de la bobina:
  CLEAR: lv_mblnr, lv_mjahr, lv_cputm.
  IF p_matnr IS NOT INITIAL AND p_charg IS NOT INITIAL.
    SELECT SINGLE mblnr mjahr INTO (lv_mblnr, lv_mjahr)
    FROM aufm
    WHERE bwart = '101'
    AND matnr = p_matnr
    AND charg = p_charg.

    IF lv_mblnr IS NOT INITIAL AND lv_mjahr IS NOT INITIAL.
      SELECT SINGLE cputm INTO lv_cputm
        FROM mkpf
        WHERE mblnr = lv_mblnr
        AND mjahr = lv_mjahr.

      " Determinar el turno en base a la hora de fabricación:
      IF ( lv_cputm >= '060000' AND lv_cputm <= '135959' ).
        p_turno = 'T1'.
      ELSEIF ( lv_cputm >= '140000' AND lv_cputm <= '215959' ).
        p_turno = 'T2'.
      ELSEIF ( lv_cputm >= '220000' AND lv_cputm <= '235959' ).
        p_turno = 'T3'.
      ELSEIF ( lv_cputm >= '000000' AND lv_cputm <= '055959' ).
        p_turno = 'T3'.
      ELSE.
        CLEAR p_turno.
      ENDIF.

    ENDIF.
  ENDIF.

ENDFORM.                    " DAT_BOBINA
*&---------------------------------------------------------------------*
*&      Form  CHEQUEO_AUTORIZACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_CLIENTE  text
*      <--P_LV_AUTORIZ  text
*----------------------------------------------------------------------*
FORM chequeo_autorizacion  USING    p_cliente
                           CHANGING p_autoriz.

  DATA: lv_werks      TYPE werks_d,
        lv_addrnumber TYPE ad_addrnum,
        ls_uscompa    LIKE v_uscompa.

  CLEAR: p_autoriz, lv_werks.

  SELECT SINGLE werks INTO lv_werks
    FROM t001w
    WHERE kunnr = p_cliente.

  AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                    ID 'ACTVT' FIELD '03'
                    ID 'WERKS' FIELD lv_werks.

  IF sy-subrc <> 0.
    CLEAR lv_addrnumber.
    SELECT SINGLE addrnumber INTO lv_addrnumber
      FROM usr21
      WHERE bname = sy-uname.

    IF lv_addrnumber IS NOT INITIAL.
      CLEAR ls_uscompa.
      SELECT SINGLE * INTO ls_uscompa
        FROM v_uscompa
        WHERE ( company LIKE '%PAPELERA%' OR company LIKE '%papelera%' )
        AND addrnumber = lv_addrnumber.
      IF ls_uscompa IS NOT INITIAL.
        p_autoriz = 'X'.
      ELSE.
        CLEAR p_autoriz.
      ENDIF.
    ELSE.
      CLEAR p_autoriz.
    ENDIF.

  ELSE.
    p_autoriz = 'X'.
  ENDIF.

ENDFORM.                    " CHEQUEO_AUTORIZACION
*&---------------------------------------------------------------------*
*&      Form  RECUP_SCT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_MATNR  text
*      -->P_LS_DATOS_AUX_CHARG  text
*      -->P_LS_DATOS_AUX_LOTE_ORIG  text
*      -->P_LS_DATOS_AUX_MATNR_ORIG  text
*      <--P_LS_DATOS_AUX_SCT  text
*      <--P_LS_DATOS_AUX_LIM_PAP  text
*      <--P_LS_DATOS_AUX_LOTE_INS  text
*----------------------------------------------------------------------*
FORM recup_sct  USING    p_matnr
                         p_charg
                         p_matnr_orig
                         p_lote_orig
                CHANGING p_sct_num
                         p_lim_pap
                         p_lote_ins
                         p_sct_dec
                         p_lim_pap_dec
                         p_origen_lote
                         p_desvio
                         p_plnnr
                         p_sct_vt
                         p_sct_vt_dec.

  DATA: BEGIN OF lt_lotes OCCURS 0,
          prueflos  TYPE qplos,
          vdatum    TYPE qvedatum,
          vezeiterf TYPE qvezeiterf,
          plnnr     TYPE plnnr,
        END OF lt_lotes.

  DATA: ls_lotes LIKE LINE OF lt_lotes.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.

  REFRESH lt_lotes.
  CLEAR   ls_lotes.

* Obtener el último análisis cerrado
  IF p_matnr IS NOT INITIAL AND p_charg IS NOT INITIAL.
    SELECT b~prueflos b~vdatum b~vezeiterf a~plnnr
      INTO CORRESPONDING FIELDS OF TABLE lt_lotes
      FROM qals AS a
      INNER JOIN qave AS b ON b~prueflos = a~prueflos
      WHERE a~matnr = p_matnr
      AND   a~charg = p_charg.

* GST - 08/05/2015 ->
*  p_origen_lote = 'P'.
* GST - 08/05/2015 <-

    IF lt_lotes[] IS INITIAL.
      IF p_matnr_orig IS NOT INITIAL AND p_lote_orig IS NOT INITIAL.
        SELECT b~prueflos b~vdatum b~vezeiterf a~plnnr
          INTO CORRESPONDING FIELDS OF TABLE lt_lotes
          FROM qals AS a
          INNER JOIN qave AS b ON b~prueflos = a~prueflos
          WHERE a~matnr = p_matnr_orig
          AND   a~charg = p_lote_orig.

        p_origen_lote = 'R'.
      ENDIF.
* GST - 08/05/2015 ->
    ELSE.
      p_origen_lote = 'B'.
* GST - 08/05/2015 <-
    ENDIF.

  ELSE.
    IF p_matnr_orig IS NOT INITIAL AND p_lote_orig IS NOT INITIAL.
      SELECT b~prueflos b~vdatum b~vezeiterf a~plnnr
        INTO CORRESPONDING FIELDS OF TABLE lt_lotes
        FROM qals AS a
        INNER JOIN qave AS b ON b~prueflos = a~prueflos
        WHERE a~matnr = p_matnr_orig
        AND   a~charg = p_lote_orig.

      p_origen_lote = 'R'.
    ENDIF.
  ENDIF.

  SORT lt_lotes BY vdatum    DESCENDING
                   vezeiterf DESCENDING.

  READ TABLE lt_lotes INTO ls_lotes INDEX 1.

  IF ls_lotes IS NOT INITIAL.

    p_lote_ins = ls_lotes-prueflos.
    p_plnnr = ls_lotes-plnnr.

    CLEAR: lv_zaehl, lv_merknr.
* Obtener especificaciones de SCT y posición de la característica
    SELECT toleranzun merknr zaehl INTO (p_lim_pap, lv_merknr, lv_zaehl)
      FROM  qamv
      WHERE prueflos   = p_lote_ins
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 -->
      AND   qpmk_werks IN so_vkorg " Asociamos la Org.ventas al centro
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 <--
      AND   verwmerkm  = '00001001'.
    ENDSELECT.

* Obtener el resultado de SCT
    SELECT mittelwert INTO p_sct_num
      FROM  qamr
      WHERE prueflos = p_lote_ins
      AND   merknr   = lv_merknr.
    ENDSELECT.

* GST - 10/06/2015 ->
    CLEAR: p_sct_vt, p_sct_vt_dec.
    SELECT sollwert INTO p_sct_vt
      FROM plmk
      WHERE plnty = 'Q'
      AND plnnr = p_plnnr
      AND merknr = lv_merknr
      AND zaehl = lv_zaehl.
    ENDSELECT.
* GST - 10/06/2015 <-

* Volcamos Lim Papelera y SCT para mostrar con tres decimales en el ALV
    MOVE p_sct_num TO p_sct_dec.
    MOVE p_lim_pap TO p_lim_pap_dec.
    MOVE p_sct_vt TO p_sct_vt_dec.

* GST - 04/06/2015 ->
*  IF p_lim_pap = 0.
*    p_desvio = 100.
*  ELSE.
*    p_desvio = ( p_sct_num * 100 ) / p_lim_pap.
*    p_desvio = p_desvio - 100.
*  ENDIF.

* GST - 04/06/2015 <-


* GST - 09/06/2015 ->
    IF p_sct_vt = 0.
      p_desvio = 100.
    ELSE.
      p_desvio = ( p_sct_num * 100 ) / p_sct_vt.
      p_desvio = p_desvio - 100.
    ENDIF.
  ENDIF.
* GST - 09/06/2015 <-

ENDFORM.                    " RECUP_SCT
*&---------------------------------------------------------------------*
*&      Form  CALC_DESV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_SCT  text
*      -->P_LS_DATOS_AUX_LIM_PAP  text
*      <--P_LS_DATOS_AUX_DESVIO  text
*----------------------------------------------------------------------*
FORM calc_desv  USING    p_sct_num
                         p_lim_pap
                CHANGING p_desvio.

  IF p_lim_pap = 0.
    p_desvio = 100.
  ELSE.
    p_desvio = ( p_sct_num * 100 ) / p_lim_pap.
    p_desvio = p_desvio - 100.
  ENDIF.

ENDFORM.                    " CALC_DESV
*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_VARIANT  text
*----------------------------------------------------------------------*
FORM alv_prepare_variant CHANGING ps_variant TYPE disvariant .

  CLEAR ps_variant.
  ps_variant-report = sy-repid.

  IF p_vari IS NOT INITIAL.
    ps_variant-variant = p_vari.
  ENDIF.

ENDFORM.                    "alv_prepare_variant
*&---------------------------------------------------------------------*
*&      Form  RECUP_GRM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_LOTE_INS  text
*      <--P_LS_DATOS_AUX_GRM_NUM  text
*      <--P_LS_DATOS_AUX_GRM_DEC  text
*      <--P_LS_DATOS_AUX_GRM_LIM_PAP  text
*      <--P_LS_DATOS_AUX_GRM_LIM_PAP_DEC  text
*      <--P_LS_DATOS_AUX_GRM_DESV  text
*----------------------------------------------------------------------*
FORM recup_grm  USING    p_lote_ins
                         p_plnnr
                CHANGING p_grm_num
                         p_grm_dec
                         p_grm_lim_pap
                         p_grm_lim_pap_dec
                         p_grm_desv
                         p_grm_vt
                         p_grm_vt_dec.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.

  CLEAR: p_grm_num, p_grm_dec, p_grm_lim_pap.
  CLEAR: p_grm_lim_pap_dec, p_grm_desv, lv_merknr.
  CLEAR: p_grm_vt, p_grm_vt_dec.

  CLEAR: lv_zaehl, lv_merknr.
  SELECT toleranzun merknr zaehl INTO (p_grm_lim_pap, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 -->
    AND   qpmk_werks IN so_vkorg " Asociamos la Org.ventas al centro
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 <--
    AND   verwmerkm  = c_gramaje.
  ENDSELECT.

* Obtener el resultado de GRAMAJE MEDIO
  SELECT mittelwert INTO p_grm_num
    FROM  qamr
    WHERE prueflos = p_lote_ins
    AND   merknr   = lv_merknr.
  ENDSELECT.

* GST - 10/06/2015 ->
  SELECT sollwert INTO p_grm_vt
    FROM plmk
    WHERE plnty = 'Q'
    AND plnnr = p_plnnr
    AND merknr = lv_merknr
    AND zaehl = lv_zaehl.
  ENDSELECT.
* GST - 10/06/2015 <-


  MOVE p_grm_num TO p_grm_dec.
  MOVE p_grm_lim_pap TO p_grm_lim_pap_dec.
  MOVE p_grm_vt TO p_grm_vt_dec.


* GST - 10/06/2015 ->
*  IF p_grm_lim_pap = 0.
*    p_grm_desv = 100.
*  ELSE.
*    p_grm_desv = ( p_grm_num * 100 ) / p_grm_lim_pap.
*    p_grm_desv = p_grm_desv - 100.
*  ENDIF.

  IF p_grm_vt = 0.
    p_grm_desv = 100.
  ELSE.
    p_grm_desv = ( p_grm_num * 100 ) / p_grm_vt.
    p_grm_desv = p_grm_desv - 100.
  ENDIF.

* GST - 10/06/2015 <-

ENDFORM.                    " RECUP_GRM
*&---------------------------------------------------------------------*
*&      Form  RECUP_CMT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_LOTE_INS  text
*      <--P_LS_DATOS_AUX_CMT_NUM  text
*      <--P_LS_DATOS_AUX_CMT_DEC  text
*      <--P_LS_DATOS_AUX_CMT_LIM_PAP  text
*      <--P_LS_DATOS_AUX_CMT_LIM_PAP_DEC  text
*      <--P_LS_DATOS_AUX_CMT_DESV  text
*----------------------------------------------------------------------*
FORM recup_cmt  USING    p_lote_ins
                         p_plnnr
                CHANGING p_cmt_num
                         p_cmt_dec
                         p_cmt_lim_pap
                         p_cmt_lim_pap_dec
                         p_cmt_desv
                         p_cmt_vt
                         p_cmt_vt_dec.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.


  CLEAR: p_cmt_num, p_cmt_dec, p_cmt_lim_pap.
  CLEAR: p_cmt_lim_pap_dec, p_cmt_desv, lv_merknr, lv_zaehl.
  CLEAR: p_cmt_vt, p_cmt_vt_dec.

  SELECT toleranzun merknr zaehl INTO (p_cmt_lim_pap, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 -->
    AND   qpmk_werks IN so_vkorg " Asociamos la Org.ventas al centro
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 <--
    AND   verwmerkm  = c_cmt.
  ENDSELECT.

* Obtener el resultado de CMT
  SELECT mittelwert INTO p_cmt_num
    FROM  qamr
    WHERE prueflos = p_lote_ins
    AND   merknr   = lv_merknr.
  ENDSELECT.

* GST - 10/06/2015 ->
  SELECT sollwert INTO p_cmt_vt
    FROM plmk
    WHERE plnty = 'Q'
    AND plnnr = p_plnnr
    AND merknr = lv_merknr
    AND zaehl = lv_zaehl.
  ENDSELECT.
* GST - 10/06/2015 <-

  MOVE p_cmt_num TO p_cmt_dec.
  MOVE p_cmt_lim_pap TO p_cmt_lim_pap_dec.
  MOVE p_cmt_vt TO p_cmt_vt_dec.

* GST - 10/06/2015 ->
*  IF p_cmt_lim_pap = 0.
*    p_cmt_desv = 100.
*  ELSE.
*    p_cmt_desv = ( p_cmt_num * 100 ) / p_cmt_lim_pap.
*    p_cmt_desv = p_cmt_desv - 100.
*  ENDIF.

  IF p_cmt_vt = 0.
    p_cmt_desv = 100.
  ELSE.
    p_cmt_desv = ( p_cmt_num * 100 ) / p_cmt_vt.
    p_cmt_desv = p_cmt_desv - 100.
  ENDIF.

* GST - 10/06/2015 <-

ENDFORM.                    " RECUP_CMT
*&---------------------------------------------------------------------*
*&      Form  RECUP_EST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_LOTE_INS  text
*      <--P_LS_DATOS_AUX_EST_NUM  text
*      <--P_LS_DATOS_AUX_EST_DEC  text
*      <--P_LS_DATOS_AUX_EST_LIM_PAP  text
*      <--P_LS_DATOS_AUX_EST_LIM_PAP_DEC  text
*      <--P_LS_DATOS_AUX_EST_DESV  text
*----------------------------------------------------------------------*
FORM recup_est  USING    p_lote_ins
                         p_plnnr
                CHANGING p_est_num
                         p_est_dec
                         p_est_lim_pap
                         p_est_lim_pap_dec
                         p_est_desv
                         p_est_vt
                         p_est_vt_dec.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.

  CLEAR: p_est_num, p_est_dec, p_est_lim_pap.
  CLEAR: p_est_lim_pap_dec, p_est_desv, lv_merknr, lv_zaehl.
  CLEAR: p_est_vt, p_est_vt_dec.


* Obtener especificaciones de EST y posición de la característica
  SELECT toleranzun merknr zaehl INTO (p_est_lim_pap, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 -->
    AND   qpmk_werks IN so_vkorg " Asociamos la Org.ventas al centro
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 <--
    AND   verwmerkm  = c_estallido.
  ENDSELECT.

* Obtener el resultado de ESTALLIDO
  SELECT mittelwert INTO p_est_num
    FROM  qamr
    WHERE prueflos = p_lote_ins
    AND   merknr   = lv_merknr.
  ENDSELECT.

* GST - 10/06/2015 ->
  SELECT sollwert INTO p_est_vt
    FROM plmk
    WHERE plnty = 'Q'
    AND plnnr = p_plnnr
    AND merknr = lv_merknr
    AND zaehl = lv_zaehl.
  ENDSELECT.
* GST - 10/06/2015 <-

* Volcamos Lim Papelera y EST para mostrar con tres decimales en el ALV
  MOVE p_est_num TO p_est_dec.
  MOVE p_est_lim_pap TO p_est_lim_pap_dec.
  MOVE p_est_vt TO p_est_vt_dec.

* GST - 10/06/2015 ->
*  IF p_est_lim_pap = 0.
*    p_est_desv = 100.
*  ELSE.
*    p_est_desv = ( p_est_num * 100 ) / p_est_lim_pap.
*    p_est_desv = p_est_desv - 100.
*  ENDIF.

  IF p_est_vt = 0.
    p_est_desv = 100.
  ELSE.
    p_est_desv = ( p_est_num * 100 ) / p_est_vt.
    p_est_desv = p_est_desv - 100.
  ENDIF.

* GST - 10/06/2015 <-

ENDFORM.                    " RECUP_EST
*&---------------------------------------------------------------------*
*&      Form  RECUP_COBB60
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_LOTE_INS  text
*      <--P_LS_DATOS_AUX_COBB60_NUM  text
*      <--P_LS_DATOS_AUX_COBB60_DEC  text
*      <--P_LS_DATOS_AUX_COBB60_LIM_PAP  text
*      <--P_LS_DATOS_AUX_COBB60_LIM_PAP_DE  text
*      <--P_LS_DATOS_AUX_COBB60_DESV  text
*----------------------------------------------------------------------*
FORM recup_cobb60  USING    p_lote_ins
                            p_plnnr
                   CHANGING p_cobb60_num
                            p_cobb60_dec
                            p_cobb60_lim_pap
                            p_cobb60_lim_pap_dec
                            p_cobb60_desv
                            p_cobb60_vt
                            p_cobb60_vt_dec.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.

  CLEAR: p_cobb60_num, p_cobb60_dec, p_cobb60_lim_pap.
  CLEAR: p_cobb60_lim_pap_dec, p_cobb60_desv, lv_merknr, lv_zaehl.
  CLEAR: p_cobb60_vt, p_cobb60_vt_dec.

* Obtener especificaciones de COBB60 y posición de la característica
  SELECT toleranzob merknr zaehl INTO (p_cobb60_lim_pap, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 -->
    AND   qpmk_werks IN so_vkorg " Asociamos la Org.ventas al centro
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 <--
    AND   verwmerkm  = c_cobb60.
  ENDSELECT.

* Obtener el resultado de COBB60
  SELECT mittelwert INTO p_cobb60_num
    FROM  qamr
    WHERE prueflos = p_lote_ins
    AND   merknr   = lv_merknr.
  ENDSELECT.

* GST - 10/06/2015 ->
  SELECT sollwert INTO p_cobb60_vt
    FROM plmk
    WHERE plnty = 'Q'
    AND plnnr = p_plnnr
    AND merknr = lv_merknr
    AND zaehl = lv_zaehl.
  ENDSELECT.
* GST - 10/06/2015 <-

* Volcamos Lim Papelera y COBB60 para mostrar con tres decimales en el ALV
  MOVE p_cobb60_num TO p_cobb60_dec.
  MOVE p_cobb60_lim_pap TO p_cobb60_lim_pap_dec.
  MOVE p_cobb60_vt TO p_cobb60_vt_dec.

* GST - 10/06/2015 ->
*  IF p_cobb60_lim_pap = 0.
*    p_cobb60_desv = 100.
*  ELSE.
*    p_cobb60_desv = ( p_cobb60_num * 100 ) / p_cobb60_lim_pap.
*    p_cobb60_desv = p_cobb60_desv - 100.
*  ENDIF.

  IF p_cobb60_vt = 0.
    p_cobb60_desv = 100.
  ELSE.
    p_cobb60_desv = ( p_cobb60_num * 100 ) / p_cobb60_vt.
    p_cobb60_desv = p_cobb60_desv - 100.
  ENDIF.

* GST - 10/06/2015 <-

ENDFORM.                    " RECUP_COBB60
*&---------------------------------------------------------------------*
*&      Form  RECUP_COBB1800
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_LOTE_INS  text
*      <--P_LS_DATOS_AUX_COBB1800_NUM  text
*      <--P_LS_DATOS_AUX_COBB1800_DEC  text
*      <--P_LS_DATOS_AUX_COBB1800_LIM_PAP  text
*      <--P_LS_DATOS_AUX_COBB1800_LIM_PAP_  text
*      <--P_LS_DATOS_AUX_COBB1800_DESV  text
*----------------------------------------------------------------------*
FORM recup_cobb1800  USING    p_lote_ins
                              p_plnnr
                     CHANGING p_cobb1800_num
                              p_cobb1800_dec
                              p_cobb1800_lim_pap
                              p_cobb1800_lim_pap_dec
                              p_cobb1800_desv
                              p_cobb1800_vt
                              p_cobb1800_vt_dec.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.


  CLEAR: p_cobb1800_num, p_cobb1800_dec, p_cobb1800_lim_pap.
  CLEAR: p_cobb1800_lim_pap_dec, p_cobb1800_desv, lv_merknr, lv_zaehl.
  CLEAR: p_cobb1800_vt, p_cobb1800_vt_dec.

* Obtener especificaciones de COBB1800 y posición de la característica
  SELECT toleranzob merknr zaehl INTO (p_cobb1800_lim_pap, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 -->
    AND   qpmk_werks IN so_vkorg " Asociamos la Org.ventas al centro
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 <--
    AND   verwmerkm  = c_cobb1800.
  ENDSELECT.

* Obtener el resultado de COBB1800
  SELECT mittelwert INTO p_cobb1800_num
    FROM  qamr
    WHERE prueflos = p_lote_ins
    AND   merknr   = lv_merknr.
  ENDSELECT.

* GST - 10/06/2015 ->
  SELECT sollwert INTO p_cobb1800_vt
    FROM plmk
    WHERE plnty = 'Q'
    AND plnnr = p_plnnr
    AND merknr = lv_merknr
    AND zaehl = lv_zaehl.
  ENDSELECT.
* GST - 10/06/2015 <-

* Volcamos Lim Papelera y COBB1800 para mostrar con tres decimales en el ALV
  MOVE p_cobb1800_num TO p_cobb1800_dec.
  MOVE p_cobb1800_lim_pap TO p_cobb1800_lim_pap_dec.
  MOVE p_cobb1800_vt TO p_cobb1800_vt_dec.

* GST - 10/06/2015 ->
*  IF p_cobb1800_lim_pap = 0.
*    p_cobb1800_desv = 100.
*  ELSE.
*    p_cobb1800_desv = ( p_cobb1800_num * 100 ) / p_cobb1800_lim_pap.
*    p_cobb1800_desv = p_cobb1800_desv - 100.
*  ENDIF.

  IF p_cobb1800_vt = 0.
    p_cobb1800_desv = 100.
  ELSE.
    p_cobb1800_desv = ( p_cobb1800_num * 100 ) / p_cobb1800_vt.
    p_cobb1800_desv = p_cobb1800_desv - 100.
  ENDIF.

* GST - 10/06/2015 <-

ENDFORM.                    " RECUP_COBB1800
*&---------------------------------------------------------------------*
*&      Form  RECUP_GOTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_LOTE_INS  text
*      <--P_LS_DATOS_AUX_GOTA_NUM  text
*      <--P_LS_DATOS_AUX_GOTA_DEC  text
*      <--P_LS_DATOS_AUX_GOTA_LIM_PAP  text
*      <--P_LS_DATOS_AUX_GOTA_LIM_PAP_DEC  text
*      <--P_LS_DATOS_AUX_GOTA_DESV  text
*----------------------------------------------------------------------*
FORM recup_gota  USING    p_lote_ins
                          p_plnnr
                 CHANGING p_gota_num
                          p_gota_dec
                          p_gota_lim_pap
                          p_gota_lim_pap_dec
                          p_gota_desv
                          p_gota_vt
                          p_gota_vt_dec.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.

  CLEAR: p_gota_num, p_gota_dec, p_gota_lim_pap.
  CLEAR: p_gota_lim_pap_dec, p_gota_desv, lv_merknr, lv_zaehl.
  CLEAR: p_gota_vt, p_gota_vt_dec.

* Obtener especificaciones de GOTA y posición de la característica
  SELECT toleranzob merknr zaehl INTO (p_gota_lim_pap, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 -->
    AND   qpmk_werks IN so_vkorg " Asociamos la Org.ventas al centro
*     SKUZMYCHOV ROLLOUT PAPELERA SARRIÁ 29.06.2016 <--
    AND   verwmerkm  = c_gota.
  ENDSELECT.

* Obtener el resultado de GOTA
  SELECT mittelwert INTO p_gota_num
    FROM  qamr
    WHERE prueflos = p_lote_ins
    AND   merknr   = lv_merknr.
  ENDSELECT.

* GST - 10/06/2015 ->
  SELECT sollwert INTO p_gota_vt
    FROM plmk
    WHERE plnty = 'Q'
    AND plnnr = p_plnnr
    AND merknr = lv_merknr
    AND zaehl = lv_zaehl.
  ENDSELECT.
* GST - 10/06/2015 <-

* Volcamos Lim Papelera y GOTA para mostrar con tres decimales en el ALV
  MOVE p_gota_num TO p_gota_dec.
  MOVE p_gota_lim_pap TO p_gota_lim_pap_dec.
  MOVE p_gota_vt TO p_gota_vt_dec.

* GST - 10/06/2015 ->
*  IF p_gota_lim_pap = 0.
*    p_gota_desv = 100.
*  ELSE.
*    p_gota_desv = ( p_gota_num * 100 ) / p_gota_lim_pap.
*    p_gota_desv = p_gota_desv - 100.
*  ENDIF.

  IF p_gota_vt = 0.
    p_gota_desv = 100.
  ELSE.
    p_gota_desv = ( p_gota_num * 100 ) / p_gota_vt.
    p_gota_desv = p_gota_desv - 100.
  ENDIF.

* GST - 10/06/2015 <-

ENDFORM.                    " RECUP_GOTA

*--> SGU SOTHIS 23/02/2017 SAT 7000013866 Ampliar informe de Z de Bobinas expedidas
FORM recup_humedad  USING p_lote_ins
                          p_plnnr
                 CHANGING p_hum_num
                          p_hum_dec
                          p_hum_lim_pap
                          p_hum_lim_pap_dec
                          p_hum_desv
                          p_hum_vt
                          p_hum_vt_dec.

  DATA: lv_merknr TYPE qmerknrp,
        lv_zaehl  TYPE cim_count.

  CLEAR: p_hum_num, p_hum_dec, p_hum_lim_pap.
  CLEAR: p_hum_lim_pap_dec, p_hum_desv, lv_merknr, lv_zaehl.
  CLEAR: p_hum_vt, p_hum_vt_dec.

* Obtener especificaciones de HUMEDAD y posición de la característica
  SELECT SINGLE toleranzob merknr zaehl INTO (p_hum_lim_pap, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
    AND   qpmk_werks IN so_vkorg
    AND   verwmerkm  = c_hum.

* Obtener el resultado de HUMEDAD
  IF sy-subrc = 0.
    SELECT SINGLE mittelwert INTO p_hum_num
      FROM  qamr
      WHERE prueflos = p_lote_ins
      AND   merknr   = lv_merknr.

    SELECT SINGLE sollwert INTO p_hum_vt
      FROM plmk
      WHERE plnty = 'Q'
      AND plnnr = p_plnnr
      AND merknr = lv_merknr
      AND zaehl = lv_zaehl.

*   Volcamos Lim Papelera y HUMEDAD para mostrar con tres decimales en el ALV
    MOVE p_hum_num TO p_hum_dec.
    MOVE p_hum_lim_pap TO p_hum_lim_pap_dec.
    MOVE p_hum_vt TO p_hum_vt_dec.
  ENDIF.

  p_hum_desv = p_hum_num - p_hum_vt.

ENDFORM.                    " RECUP_GOTA
*<-- SGU SOTHIS 23/02/2017 SAT 7000013866 Ampliar informe de Z de Bobinas expedidas

*--> INICIO  7000013999-7000014011 Ampliar inform ZMM0020
FORM recup_porosidad  USING p_lote_ins
                            p_plnnr
                   CHANGING p_por_num
                            p_por_dec
                            p_por_val_min
                            p_por_val_max.

  DATA: lv_merknr     TYPE qmerknrp,
        lv_zaehl      TYPE cim_count,
        lv_toleranzob TYPE qtolob,
        lv_toleranzun TYPE qtolun.

  CLEAR: p_por_num, p_por_dec, p_por_val_min, p_por_val_max.
  CLEAR: lv_merknr, lv_zaehl.

* Obtener especificaciones de POROSIDAD y posición de la característica
  SELECT SINGLE  toleranzob toleranzun merknr zaehl INTO (lv_toleranzob, lv_toleranzun, lv_merknr, lv_zaehl)
    FROM  qamv
    WHERE prueflos   = p_lote_ins
    AND   qpmk_werks IN so_vkorg
    AND   verwmerkm  = c_poros.

* Obtener el resultado de POROSIDAD
  IF sy-subrc = 0.
    SELECT SINGLE mittelwert INTO p_por_num
      FROM  qamr
      WHERE prueflos = p_lote_ins
      AND   merknr   = lv_merknr.

*--> INI FCARDONA - 22.06.2023 - 77944 - DUMP tcode ZMM0020

*** Comentamos por nueva lógica
*
**   Volcamos POROSIDAD para mostrar con tres decimales en el ALV
*    MOVE p_por_num TO p_por_dec.
*    MOVE lv_toleranzob TO p_por_val_max.
*    MOVE lv_toleranzun TO p_por_val_min.

    "Añadimos TRY para controlar excepción CX_SY_CONVERSION_OVERFLOW
    TRY.

*     Volcamos POROSIDAD para mostrar con tres decimales en el ALV
        MOVE p_por_num TO p_por_dec.
        MOVE lv_toleranzob TO p_por_val_max.
        MOVE lv_toleranzun TO p_por_val_min.

      CATCH cx_sy_conversion_overflow.
        "No controlamos mensaje de error por ahora.
    ENDTRY.

*<-- FIN FCARDONA - 22.06.2023 - 77944 - DUMP tcode ZMM0020

  ENDIF.



ENDFORM.                    " RECUP_POROSIDAD
*<-- FIN     7000013999-7000014011 Ampliar inform ZMM0020

*&---------------------------------------------------------------------*
*&      Form  DAT_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_AUX_MATNR_ORIG  text
*      -->P_LS_DATOS_AUX_LOTE_ORIG  text
*      <--P_LS_DATOS_AUX_FEC_FAB_ROLLO  text
*      <--P_LS_DATOS_AUX_TURNO_ROLLO  text
*----------------------------------------------------------------------*
FORM dat_rollo  USING    p_matnr
                         p_charg
                CHANGING p_fec_fab
                         p_turno
                         p_de_rollo.

  DATA: lv_mblnr TYPE mblnr,
        lv_mjahr TYPE mjahr,
        lv_cputm TYPE cputm,
        lv_cpudt TYPE cpudt.
  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char.

  CLEAR: p_turno, p_fec_fab.
  CLEAR: lv_mblnr, lv_mjahr, lv_cputm, lv_cpudt.

  SELECT SINGLE mblnr mjahr INTO (lv_mblnr, lv_mjahr)
    FROM aufm
    WHERE bwart = '101'
    AND matnr = p_matnr
    AND charg = p_charg.

  IF lv_mblnr IS NOT INITIAL AND lv_mjahr IS NOT INITIAL.
    SELECT SINGLE cpudt cputm INTO (lv_cpudt, lv_cputm)
      FROM mkpf
      WHERE mblnr = lv_mblnr
      AND mjahr = lv_mjahr.

    " Determinar el turno en base a la hora de fabricación:
    IF ( lv_cputm >= '060000' AND lv_cputm <= '135959' ).
      p_turno = 'T1'.
      p_fec_fab = lv_cpudt.
    ELSEIF ( lv_cputm >= '140000' AND lv_cputm <= '215959' ).
      p_turno = 'T2'.
      p_fec_fab = lv_cpudt.
    ELSEIF ( lv_cputm >= '220000' AND lv_cputm <= '235959' ).
      p_turno = 'T3'.
      p_fec_fab = lv_cpudt.
    ELSEIF ( lv_cputm >= '000000' AND lv_cputm <= '055959' ).
      p_turno = 'T3'.
      p_fec_fab = lv_cpudt.
    ELSE.
      CLEAR: p_turno, p_fec_fab.
    ENDIF.
  ENDIF.

*--> INICIO 7000013999-7000014011 Ampliar inform ZMM0020
  CLEAR: lv_object, ls_alloc_values_num, ls_alloc_values_num.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char,
         lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char,
           lt_alloc_values_curr, lt_return.

  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_ROLLO'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  " Valores char de las características:
  LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
    CASE ls_alloc_values_char-charact.
        "Decision de empleo bobina
      WHEN 'LOBM_UDCODE'.
        p_de_rollo = ls_alloc_values_char-value_char.
    ENDCASE.
  ENDLOOP.
*<-- FIN    7000013999-7000014011 Ampliar inform ZMM0020

ENDFORM.                    " DAT_ROLLO
*&---------------------------------------------------------------------*
*&      Form  BUSCAR_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_DATOS_AUX_MATNR_ORIG  text
*      <--P_LS_DATOS_AUX_LOTE_ORIG  text
*----------------------------------------------------------------------*
FORM buscar_rollo  CHANGING p_matnr
                            p_lote.


  DATA: lv_matnr TYPE matnr,
        lv_charg TYPE charg_d.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char.

  DATA: BEGIN OF lt_materiales OCCURS 0,
          matnr TYPE matnr,
          charg TYPE charg_d,
          mtart TYPE mtart,
        END OF lt_materiales.
  DATA: ls_materiales LIKE LINE OF lt_materiales.

  CLEAR: lt_materiales, ls_materiales.
  REFRESH: lt_materiales.

  CLEAR: lv_object, ls_alloc_values_num, ls_alloc_values_num.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char,
         lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char,
           lt_alloc_values_curr, lt_return.


  CLEAR: lv_matnr, lv_charg.
  CONCATENATE p_matnr p_lote INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  " Valores char de las características:
  LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
    CASE ls_alloc_values_char-charact.
        " Lote rollo origen:
      WHEN 'Z_LOTE_ORIGEN'.
        CONDENSE ls_alloc_values_char-value_char.
        lv_charg = ls_alloc_values_char-value_char.

        " Material rollo origen:
      WHEN 'Z_ROLLO_ORIGEN_V2'.
        CONDENSE ls_alloc_values_char-value_char.
        lv_matnr = ls_alloc_values_char-value_char.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_matnr
          IMPORTING
            output = lv_matnr.
    ENDCASE.
  ENDLOOP.

  IF lv_matnr IS INITIAL AND lv_charg IS NOT INITIAL.

    SELECT a~matnr a~charg b~mtart
      INTO CORRESPONDING FIELDS OF TABLE lt_materiales
      FROM mch1 AS a
      INNER JOIN mara AS b ON b~matnr = a~matnr
      WHERE a~charg = lv_charg.

    IF lt_materiales[] IS NOT INITIAL.
      CLEAR ls_materiales.
      READ TABLE lt_materiales INTO ls_materiales INDEX 1.
      lv_matnr = ls_materiales-matnr.
    ENDIF.

  ENDIF.

  IF lv_matnr IS INITIAL OR lv_charg IS INITIAL.

    CLEAR: lv_matnr, lv_charg.
    CONCATENATE p_matnr p_lote INTO lv_object.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = 'MCH1'
        classnum        = 'Z_BOBINA_REP'
        classtype       = '023'
*       KEYDATE         = SY-DATUM
*       UNVALUATED_CHARS       = ' '
*       LANGUAGE        = SY-LANGU
* IMPORTING
*       STATUS          =
*       STANDARDCLASS   =
      TABLES
        allocvaluesnum  = lt_alloc_values_num
        allocvalueschar = lt_alloc_values_char
        allocvaluescurr = lt_alloc_values_curr
        return          = lt_return.

    " Valores char de las características:
    LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
      CASE ls_alloc_values_char-charact.
          " Lote rollo origen:
        WHEN 'Z_LOTE_ORIGEN'.
          CONDENSE ls_alloc_values_char-value_char.
          lv_charg = ls_alloc_values_char-value_char.

          " Material rollo origen:
        WHEN 'Z_ROLLO_ORIGEN_V2'.
          CONDENSE ls_alloc_values_char-value_char.
          lv_matnr = ls_alloc_values_char-value_char.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lv_matnr
            IMPORTING
              output = lv_matnr.
      ENDCASE.
    ENDLOOP.

    IF lv_matnr IS INITIAL AND lv_charg IS NOT INITIAL.

      SELECT a~matnr a~charg b~mtart
        INTO CORRESPONDING FIELDS OF TABLE lt_materiales
        FROM mch1 AS a
        INNER JOIN mara AS b ON b~matnr = a~matnr
        WHERE a~charg = lv_charg.

      IF lt_materiales[] IS NOT INITIAL.
        CLEAR ls_materiales.
        READ TABLE lt_materiales INTO ls_materiales INDEX 1.
        lv_matnr = ls_materiales-matnr.
      ENDIF.

    ENDIF.

  ENDIF.

  p_matnr = lv_matnr.
  p_lote = lv_charg.

ENDFORM.                    " BUSCAR_ROLLO

FORM f4_layouts USING i_restrict TYPE salv_de_layout_restriction
             CHANGING c_layout TYPE disvariant-variant.

  DATA: ls_layout TYPE salv_s_layout_info,
        ls_key    TYPE salv_s_layout_key.

  ls_key-report = sy-repid.

  ls_layout = cl_salv_layout_service=>f4_layouts(
    s_key    = ls_key
    restrict = i_restrict ).

  c_layout = ls_layout-layout.

ENDFORM.                    " f4_layouts
