*&---------------------------------------------------------------------*
*&  Include           ZMM0032_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GENERAR_ASIGNAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM generar_asignar .
  DATA: wa_mara TYPE mara,
        wa_marc TYPE marc.

  DATA: wa_clientdata                 TYPE bapi_mara_ga,
        wa_plantdata                  TYPE bapi_marc_ga,
        wa_forecastparameters         TYPE bapi_mpop_ga,
        wa_planningdata               TYPE bapi_mpgd_ga,
        wa_storagelocationdata        TYPE bapi_mard_ga,
        wa_valuationdata              TYPE bapi_mbew_ga,
        wa_warehousenumberdata        TYPE bapi_mlgn_ga,
        wa_salesdata                  TYPE bapi_mvke_ga,
        wa_storagetypedata            TYPE bapi_mlgt_ga,
        wa_productionresourcetooldata TYPE bapi_mfhm_ga,
        wa_lifovaluationdata          TYPE bapi_myms_ga,
        t_materialdescription         TYPE tty_materialdescription,
        t_unitsofmeasure              TYPE tty_unitsofmeasure,
        t_internationarticlenumbers   TYPE tty_internationarticlenumbers,
        t_materialtext                TYPE tty_materialtext,
        t_taxclassifications          TYPE tty_taxclassifications,
        t_extensionout                TYPE tty_extensionout,
        t_return                      TYPE tty_return.



  DATA: wa_clientdata_zwip          TYPE bapi_mara_ga,
        wa_plantdata_zwip           TYPE bapi_marc_ga,
        wa_forecastparameters_zwip  TYPE bapi_mpop_ga,
        wa_planningdata_zwip        TYPE bapi_mpgd_ga,
        wa_storagelocationdata_zwip TYPE bapi_mard_ga,
        wa_valuationdata_zwip       TYPE bapi_mbew_ga,
        wa_warehousenumberdata_zwip TYPE bapi_mlgn_ga,
        wa_salesdata_zwip           TYPE bapi_mvke_ga,
        wa_storagetypedata_zwip     TYPE bapi_mlgt_ga,
        wa_maf_zwip                 TYPE bapi_mfhm_ga,
        wa_lifovaluationdata_zwip   TYPE bapi_myms_ga,
        t_materialdescription_zwip  TYPE tty_materialdescription,
        t_unitsofmeasure_zwip       TYPE tty_unitsofmeasure,
        t_mean_zwip                 TYPE tty_internationarticlenumbers,
        t_materialtext_zwip         TYPE tty_materialtext,
        t_taxclassifications_zwip   TYPE tty_taxclassifications,
        t_extensionout_zwip         TYPE tty_extensionout,
        t_return_zwip               TYPE tty_return.

* recuperamos la info del material gv_matnr.
  PERFORM get_info USING gv_matnr_input
                         gv_werks
                   CHANGING wa_clientdata
                            wa_plantdata
                            wa_forecastparameters
                            wa_planningdata
                            wa_storagelocationdata
                            wa_valuationdata
                            wa_warehousenumberdata
                            wa_salesdata
                            wa_storagetypedata
                            wa_productionresourcetooldata
                            wa_lifovaluationdata
                            t_materialdescription
                            t_unitsofmeasure
                            t_internationarticlenumbers
                            t_materialtext
                            t_taxclassifications
                            t_extensionout
                            t_return.

* comprobamos si el material WIP existe.
  SELECT SINGLE * FROM mara
    INTO wa_mara
    WHERE matnr =  gv_zwip.

  IF sy-subrc <> 0. "si no existe, lo creamos

    PERFORM crear_material USING wa_clientdata
                                 wa_plantdata
                                 wa_forecastparameters
                                 wa_planningdata
                                 wa_storagelocationdata
                                 wa_valuationdata
                                 wa_warehousenumberdata
                                 wa_salesdata
                                 wa_storagetypedata
                                 wa_productionresourcetooldata
                                 wa_lifovaluationdata
                                 t_materialdescription
                                 t_unitsofmeasure
                                 t_internationarticlenumbers
                                 t_materialtext
                                 t_taxclassifications
                                 t_extensionout.


  ELSE. "si existe, comprobamos si está creado en el centro indicado
    SELECT SINGLE * FROM marc
      INTO wa_marc
      WHERE matnr = gv_zwip AND
            werks = gv_werks.

    IF sy-subrc <> 0. "si no está creado en el centro indicado, lo creamos tomando como
*                     referencia uno de los centros donde sí que está creado.

      SELECT SINGLE * FROM marc
        INTO wa_marc
        WHERE matnr = gv_zwip.

      PERFORM get_info USING gv_zwip
                             wa_marc-werks
                      CHANGING wa_clientdata_zwip
                               wa_plantdata_zwip
                               wa_forecastparameters_zwip
                               wa_planningdata_zwip
                               wa_storagelocationdata_zwip
                               wa_valuationdata_zwip
                               wa_warehousenumberdata_zwip
                               wa_salesdata_zwip
                               wa_storagetypedata_zwip
                               wa_maf_zwip
                               wa_lifovaluationdata_zwip
                               t_materialdescription_zwip
                               t_unitsofmeasure_zwip
                               t_mean_zwip
                               t_materialtext_zwip
                               t_taxclassifications_zwip
                               t_extensionout_zwip
                               t_return_zwip.

*     ampliar material para el centro indicado en gv_werks, tomando como modelo, los
*     datos del material en el centro creado (wa_marc).
      PERFORM ampliar_material USING wa_clientdata_zwip
                                     wa_plantdata_zwip
                                     wa_forecastparameters_zwip
                                     wa_planningdata_zwip
                                     wa_storagelocationdata_zwip
                                     wa_valuationdata_zwip
                                     wa_warehousenumberdata_zwip
                                     wa_salesdata_zwip
                                     wa_storagetypedata_zwip
                                     wa_maf_zwip
                                     wa_lifovaluationdata_zwip
                                     t_materialdescription_zwip
                                     t_unitsofmeasure_zwip
                                     t_mean_zwip
                                     t_materialtext_zwip
                                     t_taxclassifications_zwip
                                     t_extensionout_zwip.
    ELSE.
      PERFORM clear_vbles.
      MESSAGE e000(zmm) WITH text-007. "El material ZWIP ya está creado
    ENDIF.
  ENDIF.

  PERFORM mostrar_log.

ENDFORM.                    " GENERAR_ASIGNAR
*&---------------------------------------------------------------------*
*&      Form  INFORMAR_MARA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CLIENTDATA  text
*      <--P_WA_CLIENTEDATA_CREATE  text
*----------------------------------------------------------------------*
FORM informar_mara  USING    wa_clientdata TYPE bapi_mara_ga
                    CHANGING wa_clientdata_create TYPE bapi_mara
                             wa_clientdatax TYPE bapi_marax.


  MOVE-CORRESPONDING wa_clientdata TO wa_clientdata_create.
  wa_clientdata_create-matl_group = '90231'.

  wa_clientdatax-matl_group = 'X'.
  wa_clientdatax-base_uom = 'X'.
  wa_clientdatax-base_uom_iso = 'X'.
  wa_clientdatax-po_unit = 'X'.
  wa_clientdatax-po_unit_iso = 'X'.
  wa_clientdatax-document = 'X'.
  wa_clientdatax-doc_type = 'X'.
  wa_clientdatax-doc_vers = 'X'.
  wa_clientdatax-doc_format = 'X'.
  wa_clientdatax-doc_chg_no = 'X'.
  wa_clientdatax-page_no = 'X'.
  wa_clientdatax-no_sheets = 'X'.
  wa_clientdatax-prod_memo = 'X'.
  wa_clientdatax-pageformat = 'X'.
  wa_clientdatax-size_dim = 'X'.
  wa_clientdatax-basic_matl = 'X'.
  wa_clientdatax-std_descr = 'X'.
  wa_clientdatax-dsn_office = 'X'.
  wa_clientdatax-pur_valkey = 'X'.
  wa_clientdatax-net_weight = 'X'.
  wa_clientdatax-unit_of_wt = 'X'.
  wa_clientdatax-unit_of_wt_iso = 'X'.
  wa_clientdatax-container = 'X'.
  wa_clientdatax-stor_conds = 'X'.
  wa_clientdatax-temp_conds = 'X'.
  wa_clientdatax-trans_grp = 'X'.
  wa_clientdatax-haz_mat_no = 'X'.
  wa_clientdatax-division = 'X'.
  wa_clientdatax-competitor = 'X'.
  wa_clientdatax-qty_gr_gi = 'X'.
  wa_clientdatax-proc_rule = 'X'.
  wa_clientdatax-sup_source = 'X'.
  wa_clientdatax-season = 'X'.
  wa_clientdatax-label_type = 'X'.
  wa_clientdatax-label_form = 'X'.
  wa_clientdatax-prod_hier = 'X'.
  wa_clientdatax-cad_id = 'X'.
  wa_clientdatax-allowed_wt = 'X'.
  wa_clientdatax-pack_wt_un = 'X'.
  wa_clientdatax-pack_wt_un_iso = 'X'.
  wa_clientdatax-allwd_vol = 'X'.
  wa_clientdatax-pack_vo_un = 'X'.
  wa_clientdatax-pack_vo_un_iso = 'X'.
  wa_clientdatax-wt_tol_lt = 'X'.
  wa_clientdatax-vol_tol_lt = 'X'.
  wa_clientdatax-var_ord_un = 'X'.
  wa_clientdatax-batch_mgmt = 'X'.
  wa_clientdatax-sh_mat_typ = 'X'.
  wa_clientdatax-fill_level = 'X'.
  wa_clientdatax-stack_fact = 'X'.
  wa_clientdatax-mat_grp_sm = 'X'.
  wa_clientdatax-authoritygroup = 'X'.
  wa_clientdatax-qm_procmnt = 'X'.
  wa_clientdata_create-catprofile = 'X'.
  wa_clientdatax-minremlife = 'X'.
  wa_clientdatax-shelf_life = 'X'.
  wa_clientdatax-stor_pct = 'X'.
  wa_clientdatax-pur_status = 'X'.
  wa_clientdatax-sal_status = 'X'.
  wa_clientdatax-pvalidfrom = 'X'.
  wa_clientdatax-svalidfrom = 'X'.
  wa_clientdatax-envt_rlvt = 'X'.
  wa_clientdatax-prod_alloc = 'X'.
  wa_clientdatax-qual_dik = 'X'.
  wa_clientdatax-manu_mat = 'X'.
  wa_clientdatax-mfr_no = 'X'.
  wa_clientdatax-inv_mat_no = 'X'.
  wa_clientdatax-manuf_prof = 'X'.
  wa_clientdatax-hazmatprof = 'X'.
  wa_clientdatax-high_visc = 'X'.
  wa_clientdatax-looseorliq = 'X'.
  wa_clientdatax-closed_box = 'X'.
  wa_clientdatax-appd_b_rec = 'X'.
  wa_clientdatax-matcmpllvl = 'X'.
  wa_clientdatax-par_eff = 'X'.
  wa_clientdatax-round_up_rule_expiration_date = 'X'.
  wa_clientdatax-period_ind_expiration_date = 'X'.
  wa_clientdatax-prod_composition_on_packaging = 'X'.
  wa_clientdatax-item_cat = 'X'.
  wa_clientdatax-haz_mat_no_external = 'X'.
  wa_clientdatax-haz_mat_no_guid = 'X'.
  wa_clientdatax-haz_mat_no_version = 'X'.
  wa_clientdatax-inv_mat_no_external = 'X'.
  wa_clientdatax-inv_mat_no_guid = 'X'.
  wa_clientdatax-inv_mat_no_version = 'X'.
  wa_clientdatax-material_fixed = 'X'.
  wa_clientdatax-cm_relevance_flag = 'X'.
  wa_clientdatax-sled_bbd = 'X'.
  wa_clientdatax-gtin_variant = 'X'.
  wa_clientdatax-serialization_level = 'X'.
  wa_clientdatax-pl_ref_mat = 'X'.
  wa_clientdatax-extmatlgrp = 'X'.
  wa_clientdatax-uomusage = 'X'.
  wa_clientdatax-gds_relevant = 'X'.
  wa_clientdatax-pl_ref_mat_external = 'X'.
  wa_clientdatax-pl_ref_mat_guid = 'X'.
  wa_clientdatax-pl_ref_mat_version = 'X'.
  wa_clientdatax-we_origin_acceptance = 'X'.
  wa_clientdatax-std_hu_type = 'X'.
  wa_clientdatax-pilferable = 'X'.
  wa_clientdatax-whse_storage_condition = 'X'.
  wa_clientdatax-whse_material_group = 'X'.
  wa_clientdatax-handling_indicator = 'X'.
  wa_clientdatax-haz_mat_relevant = 'X'.
  wa_clientdatax-hu_type = 'X'.
  wa_clientdatax-variable_tare_weight = 'X'.
  wa_clientdatax-max_allowed_capacity = 'X'.
  wa_clientdatax-overcapacity_tolerance = 'X'.
  wa_clientdatax-max_allowed_length = 'X'.
  wa_clientdatax-max_allowed_width = 'X'.
  wa_clientdatax-max_allowed_heigth = 'X'.
  wa_clientdatax-max_dimension_un = 'X'.
  wa_clientdatax-max_dimension_un_iso = 'X'.
  wa_clientdatax-countryori = 'X'.
  wa_clientdatax-countryori_iso = 'X'.
  wa_clientdatax-matfrgtgrp = 'X'.
  wa_clientdatax-quarantine_period = 'X'.
  wa_clientdatax-quarantine_period_un = 'X'.
  wa_clientdatax-quarantine_period_un_iso = 'X'.
  wa_clientdatax-quality_insp_grp = 'X'.
  wa_clientdatax-serial_number_profile = 'X'.
  wa_clientdatax-ewm_cw_tolerance_group = 'X'.
  wa_clientdatax-ewm_cw_input_control = 'X'.
  wa_clientdatax-pckging_smartform = 'X'.
  wa_clientdatax-pacod = 'X'.
  wa_clientdatax-dg_pckging_status = 'X'.
  wa_clientdatax-adjust_profile = 'X'.
  wa_clientdatax-ipmipproduct = 'X'.
  wa_clientdatax-medium = 'X'.
  wa_clientdatax-nsnid = 'X'.
  wa_clientdatax-physical_commodity = 'X'.

ENDFORM.                    " INFORMAR_MARA
*&---------------------------------------------------------------------*
*&      Form  INFORMAR_MARC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_PLANTDATA  text
*      <--P_WA_PLANTDATA_CREATE  text
*      <--P_WA_PLANTDATAX  text
*----------------------------------------------------------------------*
FORM informar_marc  USING    wa_plantdata TYPE bapi_marc_ga
                    CHANGING wa_plantdata_create TYPE bapi_marc
                             wa_plantdatax TYPE bapi_marcx.

  MOVE-CORRESPONDING wa_plantdata TO wa_plantdata_create.

  CLEAR: wa_plantdata_create-original_batch_ref_material.
  wa_plantdata_create-original_batch_flag = 1.

  wa_plantdatax-plant = gv_werks.
*wa_plantdatax-DEL_FLAG
  wa_plantdatax-abc_id = 'X'.
  wa_plantdatax-crit_part = 'X'.
  wa_plantdatax-pur_group = 'X'.
  wa_plantdatax-issue_unit = 'X'.
  wa_plantdatax-issue_unit_iso = 'X'.
  wa_plantdatax-mrpprofile = 'X'.
  wa_plantdatax-mrp_type = 'X'.
  wa_plantdatax-mrp_ctrler = 'X'.
  wa_plantdatax-plnd_delry = 'X'.
  wa_plantdatax-gr_pr_time = 'X'.
  wa_plantdatax-period_ind = 'X'.
  wa_plantdatax-assy_scrap = 'X'.
  wa_plantdatax-lotsizekey = 'X'.
*  wa_plantdatax-proc_type = 'X'. " 66170
  wa_plantdatax-spproctype = 'X'.
  wa_plantdatax-reorder_pt = 'X'.
  wa_plantdatax-safety_stk = 'X'.
  wa_plantdatax-minlotsize = 'X'.
  wa_plantdatax-maxlotsize = 'X'.
  wa_plantdatax-fixed_lot = 'X'.
  wa_plantdatax-round_val = 'X'.
  wa_plantdatax-max_stock = 'X'.
  wa_plantdatax-ord_costs = 'X'.
  wa_plantdatax-dep_req_id = 'X'.
  wa_plantdatax-stor_costs = 'X'.
  wa_plantdatax-alt_bom_id = 'X'.
  wa_plantdatax-discontinu = 'X'.
  wa_plantdatax-eff_o_day = 'X'.
  wa_plantdatax-follow_up = 'X'.
  wa_plantdatax-grp_reqmts = 'X'.
  wa_plantdatax-mixed_mrp = 'X'.
  wa_plantdatax-sm_key = 'X'.
  wa_plantdatax-backflush = 'X'.
  wa_plantdatax-production_scheduler = 'X'.
  wa_plantdatax-proc_time = 'X'.
  wa_plantdatax-setuptime = 'X'.
  wa_plantdatax-interop = 'X'.
  wa_plantdatax-base_qty = 'X'.
  wa_plantdatax-inhseprodt = 'X'.
  wa_plantdatax-stgeperiod = 'X'.
  wa_plantdatax-stge_pd_un = 'X'.
  wa_plantdatax-stge_pd_un_iso = 'X'.
  wa_plantdatax-over_tol = 'X'.
  wa_plantdatax-unlimited = 'X'.
  wa_plantdatax-under_tol = 'X'.
  wa_plantdatax-replentime = 'X'.
  wa_plantdatax-replace_pt = 'X'.
  wa_plantdatax-ind_post_to_insp_stock = 'X'.
  wa_plantdatax-ctrl_key = 'X'.
  wa_plantdatax-doc_reqd = 'X'.
  wa_plantdatax-loadinggrp = 'X'.
  wa_plantdatax-batch_mgmt = 'X'.
  wa_plantdatax-quotausage = 'X'.
  wa_plantdatax-serv_level = 'X'.
  wa_plantdatax-split_ind = 'X'.
  wa_plantdatax-availcheck = 'X'.
  wa_plantdatax-fy_variant = 'X'.
  wa_plantdatax-corr_fact = 'X'.
  wa_plantdatax-setup_time = 'X'.
  wa_plantdatax-base_qty_plan = 'X'.
  wa_plantdatax-ship_proc_time = 'X'.
  wa_plantdatax-sup_source = 'X'.
  wa_plantdatax-auto_p_ord = 'X'.
  wa_plantdatax-sourcelist = 'X'.
  wa_plantdatax-comm_code = 'X'.
  wa_plantdatax-countryori = 'X'.
  wa_plantdatax-countryori_iso = 'X'.
  wa_plantdatax-regionorig = 'X'.
  wa_plantdatax-comm_co_un = 'X'.
  wa_plantdatax-comm_co_un_iso = 'X'.
  wa_plantdatax-expimpgrp = 'X'.
  wa_plantdatax-profit_ctr = 'X'.
  wa_plantdatax-ppc_pl_cal = 'X'.
  wa_plantdatax-rep_manuf = 'X'.
  wa_plantdatax-pl_ti_fnce = 'X'.
  wa_plantdatax-consummode = 'X'.
  wa_plantdatax-bwd_cons = 'X'.
  wa_plantdatax-fwd_cons = 'X'.
  wa_plantdatax-alternative_bom = 'X'.
  wa_plantdatax-bom_usage = 'X'.
  wa_plantdatax-planlistgrp = 'X'.
  wa_plantdatax-planlistcnt = 'X'.
  wa_plantdatax-lot_size = 'X'.
  wa_plantdatax-specprocty = 'X'.
  wa_plantdatax-prod_unit = 'X'.
  wa_plantdatax-prod_unit_iso = 'X'.
  wa_plantdatax-iss_st_loc = 'X'.
  wa_plantdatax-mrp_group = 'X'.
  wa_plantdatax-comp_scrap = 'X'.
  wa_plantdatax-cert_type = 'X'.
  wa_plantdatax-cycle_time = 'X'.
  wa_plantdatax-covprofile = 'X'.
  wa_plantdatax-cc_ph_inv = 'X'.
  wa_plantdatax-variance_key = 'X'.
  wa_plantdatax-serno_prof = 'X'.
  wa_plantdatax-repmanprof = 'X'.
  wa_plantdatax-neg_stocks = 'X'.
  wa_plantdatax-qm_rgmts = 'X'.
  wa_plantdatax-plng_cycle = 'X'.
  wa_plantdatax-round_prof = 'X'.
  wa_plantdatax-refmatcons = 'X'.
  wa_plantdatax-d_to_ref_m = 'X'.
  wa_plantdatax-mult_ref_m = 'X'.
  wa_plantdatax-auto_reset = 'X'.
  wa_plantdatax-ex_cert_id = 'X'.
  wa_plantdatax-ex_cert_no_new = 'X'.
  wa_plantdatax-ex_cert_dt = 'X'.
  wa_plantdatax-milit_id = 'X'.
  wa_plantdatax-insp_int = 'X'.
  wa_plantdatax-co_product = 'X'.
  wa_plantdatax-plan_strgp = 'X'.
  wa_plantdatax-sloc_exprc = 'X'.
  wa_plantdatax-bulk_mat = 'X'.
  wa_plantdatax-cc_fixed = 'X'.
  wa_plantdatax-determ_grp = 'X'.
  wa_plantdatax-qm_authgrp = 'X'.
  wa_plantdatax-task_list_type = 'X'.
  wa_plantdatax-pur_status = 'X'.
  wa_plantdatax-prodprof = 'X'.
  wa_plantdatax-safty_t_id = 'X'.
  wa_plantdatax-safetytime = 'X'.
  wa_plantdatax-plord_ctrl = 'X'.
  wa_plantdatax-batchentry = 'X'.
  wa_plantdatax-pvalidfrom = 'X'.
  wa_plantdatax-matfrgtgrp = 'X'.
  wa_plantdatax-prodverscs = 'X'.
  wa_plantdatax-mat_cfop = 'X'.
  wa_plantdatax-eu_list_no = 'X'.
  wa_plantdatax-eu_mat_grp = 'X'.
  wa_plantdatax-cas_no = 'X'.
  wa_plantdatax-prodcom_no = 'X'.
  wa_plantdatax-ctrl_code = 'X'.
  wa_plantdatax-jit_relvt = 'X'.
  wa_plantdatax-mat_grp_trans = 'X'.
  wa_plantdatax-handlg_grp = 'X'.
  wa_plantdatax-supply_area = 'X'.
  wa_plantdatax-fair_share_rule = 'X'.
  wa_plantdatax-push_distrib = 'X'.
  wa_plantdatax-deploy_horiz = 'X'.
  wa_plantdatax-min_lot_size = 'X'.
  wa_plantdatax-max_lot_size = 'X'.
  wa_plantdatax-fix_lot_size = 'X'.
  wa_plantdatax-lot_increment = 'X'.
  wa_plantdatax-prod_conv_type = 'X'.
  wa_plantdatax-distr_prof = 'X'.
  wa_plantdatax-period_profile_safety_time = 'X'.
  wa_plantdatax-fxd_price = 'X'.
  wa_plantdatax-avail_check_all_proj_segments = 'X'.
  wa_plantdatax-overallprf = 'X'.
  wa_plantdatax-mrp_relevancy_dep_requirements = 'X'.
  wa_plantdatax-min_safety_stk = 'X'.
  wa_plantdatax-no_costing = 'X'.
  wa_plantdatax-unit_group = 'X'.
  wa_plantdatax-follow_up_external = 'X'.
  wa_plantdatax-follow_up_guid = 'X'.
  wa_plantdatax-follow_up_version = 'X'.
  wa_plantdatax-refmatcons_external = 'X'.
  wa_plantdatax-refmatcons_guid = 'X'.
  wa_plantdatax-refmatcons_version = 'X'.
  wa_plantdatax-rotation_date = 'X'.
  wa_plantdatax-original_batch_flag = 'X'.
  wa_plantdatax-original_batch_ref_material = 'X'.
  wa_plantdatax-original_batch_ref_material_e = 'X'.
  wa_plantdatax-original_batch_ref_material_v = 'X'.
  wa_plantdatax-original_batch_ref_material_g = 'X'.
  wa_plantdatax-iuid_relevant = 'X'.
  wa_plantdatax-iuid_type = 'X'.
  wa_plantdatax-uid_iea = 'X'.


ENDFORM.                    " INFORMAR_MARC
*&---------------------------------------------------------------------*
*&      Form  INFORMAR_MARD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_STORAGELOCATIONDATA  text
*      <--P_WA_STORAGELOCATIONDATAA_CREATE  text
*      <--P_WA_STORAGELOCATIONDATAX  text
*----------------------------------------------------------------------*
FORM informar_mard  USING    wa_storagelocationdata TYPE   bapi_mard_ga
                   CHANGING wa_storagelocationdata_create TYPE  bapi_mard
                            wa_storagelocationdatax TYPE bapi_mardx.


  MOVE-CORRESPONDING wa_storagelocationdata TO wa_storagelocationdata_create.

  wa_storagelocationdatax-plant = wa_storagelocationdata-plant .
  wa_storagelocationdatax-stge_loc = wa_storagelocationdata-stge_loc.
*  wa_storagelocationdatax-del_flag = 'X'.
  wa_storagelocationdatax-mrp_ind = 'X'.
  wa_storagelocationdatax-spec_proc = 'X'.
  wa_storagelocationdatax-reorder_pt = 'X'.
  wa_storagelocationdatax-repl_qty = 'X'.
  wa_storagelocationdatax-stge_bin = 'X'.
  wa_storagelocationdatax-pickg_area = 'X'.
  wa_storagelocationdatax-inv_corr_fac = 'X'.

ENDFORM.                    " INFORMAR_MARD
*&---------------------------------------------------------------------*
*&      Form  INFORMAR_MVKE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_SALESDATA  text
*      <--P_WA_SALESDATA_CREATE  text
*      <--P_WA_SALESDATAX  text
*----------------------------------------------------------------------*
FORM informar_mvke  USING    wa_salesdata TYPE bapi_mvke_ga
                    CHANGING wa_salesdata_create TYPE bapi_mvke
                             wa_salesdatax TYPE bapi_mvkex.

  MOVE-CORRESPONDING wa_salesdata TO wa_salesdata_create.


  wa_salesdatax-sales_org = wa_salesdata-sales_org.
  wa_salesdatax-distr_chan = wa_salesdata-distr_chan.
*wa_salesdatax-DEL_FLAG
  wa_salesdatax-matl_stats = 'X'.
  wa_salesdatax-rebate_grp = 'X'.
  wa_salesdatax-comm_group = 'X'.
  wa_salesdatax-cash_disc = 'X'.
  wa_salesdatax-sal_status = 'X'.
  wa_salesdatax-valid_from = 'X'.
  wa_salesdatax-min_order = 'X'.
  wa_salesdatax-min_dely = 'X'.
  wa_salesdatax-min_mto = 'X'.
  wa_salesdatax-dely_unit = 'X'.
  wa_salesdatax-dely_uom = 'X'.
  wa_salesdatax-dely_uom_iso = 'X'.
  wa_salesdatax-sales_unit = 'X'.
  wa_salesdatax-sales_unit_iso = 'X'.
  wa_salesdatax-item_cat = 'X'.
  wa_salesdatax-delyg_plnt = 'X'.
  wa_salesdatax-prod_hier = 'X'.
  wa_salesdatax-pr_ref_mat = 'X'.
  wa_salesdatax-mat_pr_grp = 'X'.
  wa_salesdatax-acct_assgt = 'X'.
  wa_salesdatax-matl_grp_1 = 'X'.
  wa_salesdatax-matl_grp_2 = 'X'.
  wa_salesdatax-matl_grp_3 = 'X'.
  wa_salesdatax-matl_grp_4 = 'X'.
  wa_salesdatax-matl_grp_5 = 'X'.
  wa_salesdatax-prod_att_1 = 'X'.
  wa_salesdatax-prod_att_2 = 'X'.
  wa_salesdatax-prod_att_3 = 'X'.
  wa_salesdatax-prod_att_4 = 'X'.
  wa_salesdatax-prod_att_5 = 'X'.
  wa_salesdatax-prod_att_6 = 'X'.
  wa_salesdatax-prod_att_7 = 'X'.
  wa_salesdatax-prod_att_8 = 'X'.
  wa_salesdatax-prod_att_9 = 'X'.
  wa_salesdatax-prod_att10 = 'X'.
  wa_salesdatax-round_prof = 'X'.
  wa_salesdatax-var_sales_un = 'X'.
  wa_salesdatax-unit_group = 'X'.
  wa_salesdatax-pr_ref_mat_external = 'X'.
  wa_salesdatax-pr_ref_mat_guid = 'X'.
  wa_salesdatax-pr_ref_mat_version = 'X'.

ENDFORM.                    " INFORMAR_MVKE
*&---------------------------------------------------------------------*
*&      Form  CREAR_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_material USING wa_clientdata
                          wa_plantdata
                          wa_forecastparameters
                          wa_planningdata
                          wa_storagelocationdata
                          wa_valuationdata
                          wa_warehousenumberdata
                          wa_salesdata
                          wa_storagetypedata
                          wa_productionresourcetooldata
                          wa_lifovaluationdata
                          t_materialdescription TYPE tty_materialdescription
                          t_unitsofmeasure  TYPE tty_unitsofmeasure
                          t_internationarticlenumbers TYPE tty_internationarticlenumbers
                          t_materialtext TYPE tty_materialtext
                          t_taxclassifications TYPE tty_taxclassifications
                          t_extensionout TYPE tty_extensionout.

  DATA: wa_headdata                   TYPE bapimathead,
        wa_clientdata_create          TYPE bapi_mara,
        wa_clientdatax                TYPE bapi_marax,
        wa_plantdata_create           TYPE bapi_marc,
        wa_plantdatax                 TYPE bapi_marcx,
        wa_storagelocationdata_create TYPE bapi_mard,
        wa_storagelocationdatax       TYPE bapi_mardx,
        wa_planningdata_create        TYPE bapi_mpgd,
        wa_planningdatax              TYPE bapi_mpgdx,
        wa_salesdata_create           TYPE bapi_mvke,
        wa_salesdatax                 TYPE bapi_mvkex,
        wa_return_create              TYPE bapiret2.

  DATA: t_materialdescription_create TYPE tty_materialdescription_create,
        t_unitsofmeasure_create      TYPE tty_unitsofmeasure_create,
        t_mean_create                TYPE tty_mean_create,
        t_materialtext_create        TYPE tty_materialtext_create,
        t_taxclassifications_create  TYPE tty_taxclassifications_create,
        t_extensionout_create        TYPE tty_extensionout_create,
        t_return_create              TYPE tty_return_create.

  DATA: error TYPE xfeld.

  wa_headdata-material = gv_zwip.
  wa_headdata-matl_type = 'ZWIP'. "tipo de material
  wa_headdata-ind_sector = 'Z'. "Ramo

  wa_headdata-basic_view = 'X'. "Vista de datos básicos
  wa_headdata-sales_view = 'X'. "Vista de Comercial
  wa_headdata-storage_view = 'X'. "Vista de almacén

  wa_headdata-work_sched_view = 'X'.  "Preparación de trabajo
  wa_headdata-mrp_view = 'X'. "Planif.necesidades
  wa_headdata-prt_view = 'X'. "Vista medios auxiliares de fabricación

  PERFORM informar_mara USING wa_clientdata
                        CHANGING wa_clientdata_create wa_clientdatax.

  PERFORM informar_marc USING  wa_plantdata
                        CHANGING wa_plantdata_create wa_plantdatax.


  PERFORM informar_mard USING  wa_storagelocationdata
                        CHANGING wa_storagelocationdata_create wa_storagelocationdatax.


  PERFORM informar_mvke USING  wa_salesdata
                        CHANGING wa_salesdata_create wa_salesdatax.


  PERFORM informar_mpgd USING  wa_planningdata
                        CHANGING  wa_planningdata_create  wa_planningdatax.

  t_materialdescription_create[] = t_materialdescription[].


  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      headdata             = wa_headdata
      clientdata           = wa_clientdata_create
      clientdatax          = wa_clientdatax
      plantdata            = wa_plantdata_create
      plantdatax           = wa_plantdatax
*     FORECASTPARAMETERS   =
*     FORECASTPARAMETERSX  =
      planningdata         = wa_planningdata_create
      planningdatax        = wa_planningdatax
      storagelocationdata  = wa_storagelocationdata_create
      storagelocationdatax = wa_storagelocationdatax
*     VALUATIONDATA        =
*     VALUATIONDATAX       =
*     WAREHOUSENUMBERDATA  =
*     WAREHOUSENUMBERDATAX =
      salesdata            = wa_salesdata_create
      salesdatax           = wa_salesdatax
*     STORAGETYPEDATA      =
*     STORAGETYPEDATAX     =
*     FLAG_ONLINE          = ' '
*     FLAG_CAD_CALL        = ' '
*     NO_DEQUEUE           = ' '
*     NO_ROLLBACK_WORK     = ' '
    IMPORTING
      return               = wa_return_create
    TABLES
      materialdescription  = t_materialdescription_create
      unitsofmeasure       = t_unitsofmeasure_create
*     UNITSOFMEASUREX      =
      internationalartnos  = t_mean_create
      materiallongtext     = t_materialtext_create
      taxclassifications   = t_taxclassifications_create
*     RETURNMESSAGES       =
*     PRTDATA              =
*     PRTDATAX             =
*     EXTENSIONIN          =
*     EXTENSIONINX         =
    .

  IF wa_return_create-type <> 'E'.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'
*     IMPORTING
*       RETURN        =
      .

    PERFORM crear_clasificacions USING gv_zwip
                                       gt_allocvaluesnum
                                       gt_allocvalueschar
                                       gt_allocvaluescurr.

    PERFORM asignar_material USING gv_matnr_input
                                   gv_zwip
                                   wa_plantdata
                            CHANGING error.

    PERFORM clear_vbles.

    IF error IS INITIAL.
      MESSAGE i000(zmm) WITH text-008. "ZWIP creado y asignado correctamente
    ELSE.
      MESSAGE w000(zmm) WITH text-004. "ZWIP creado correctamente pero no asignado
    ENDIF.

  ELSE.
    gv_extnumber = gv_matnr.

    MOVE-CORRESPONDING wa_return_create TO gs_messages.
    APPEND gs_messages TO gt_messages.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZMM'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = gv_extnumber.
  ENDIF.

ENDFORM.                    " CREAR_MATERIAL
*&---------------------------------------------------------------------*
*&      Form  GET_INFO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_MATNR  text
*      -->P_GV_WERKS  text
*      <--P_WA_CLIENTDATA  text
*      <--P_WA_PLANTDATA  text
*      <--P_WA_FORECASTPARAMETERS  text
*      <--P_WA_PLANNINGDATA  text
*      <--P_WA_STORAGELOCATIONDATA  text
*      <--P_WA_VALUATIONDATA  text
*      <--P_WA_WAREHOUSENUMBERDATA  text
*      <--P_WA_SALESDATA  text
*      <--P_WA_STORAGETYPEDATA  text
*      <--P_WA_PRODUCTIONRESOURCETOOLDATA  text
*      <--P_WA_LIFOVALUATIONDATA  text
*      <--P_T_MATERIALDESCRIPTION  text
*      <--P_T_UNITSOFMEASURE  text
*      <--P_T_INTERNATIONARTICLENUMBERS  text
*      <--P_T_MATERIALTEXT  text
*      <--P_T_TAXCLASSIFICATIONS  text
*      <--P_T_EXTENSIONOUT  text
*      <--P_T_RETURN  text
*----------------------------------------------------------------------*
FORM get_info  USING    gv_matnr
                        gv_werks
               CHANGING wa_clientdata
                        wa_plantdata
                        wa_forecastparameters
                        wa_planningdata
                        wa_storagelocationdata
                        wa_valuationdata
                        wa_warehousenumberdata
                        wa_salesdata
                        wa_storagetypedata
                        wa_productionresourcetooldata
                        wa_lifovaluationdata
                        t_materialdescription TYPE tty_materialdescription
                        t_unitsofmeasure TYPE tty_unitsofmeasure
                        t_internationarticlenumbers TYPE tty_internationarticlenumbers
                        t_materialtext TYPE tty_materialtext
                        t_taxclassifications TYPE tty_taxclassifications
                        t_extensionout TYPE tty_extensionout
                        t_return TYPE tty_return.

  DATA: wa_return TYPE LINE OF tty_return,
        lv_lgort  TYPE         lgort_d,
        lv_vtweg  TYPE         vtweg,
        lv_vkorg  TYPE         vkorg.

  SELECT SINGLE lgort FROM mard
    INTO lv_lgort
    WHERE matnr = gv_matnr AND
          werks = gv_werks.

  SELECT SINGLE vkorg vtweg FROM mvke
    INTO (lv_vkorg, lv_vtweg)
    WHERE matnr = gv_matnr.


  CALL FUNCTION 'BAPI_MATERIAL_GETALL'
    EXPORTING
      material                   = gv_matnr
*     COMPANYCODE                =
*     VALUATIONAREA              =
*     VALUATIONTYPE              =
      plant                      = gv_werks
      storagelocation            = lv_lgort
      salesorganisation          = lv_vkorg
      distributionchannel        = lv_vtweg
*     WAREHOUSENUMBER            =
*     STORAGETYPE                =
*     LIFOVALUATIONLEVEL         =
*     MATERIAL_EVG               =
*     KZRFB_ALL                  =
    IMPORTING
      clientdata                 = wa_clientdata
      plantdata                  = wa_plantdata
      forecastparameters         = wa_forecastparameters
      planningdata               = wa_planningdata
      storagelocationdata        = wa_storagelocationdata
      valuationdata              = wa_valuationdata
      warehousenumberdata        = wa_warehousenumberdata
      salesdata                  = wa_salesdata
      storagetypedata            = wa_storagetypedata
      productionresourcetooldata = wa_productionresourcetooldata
      lifovaluationdata          = wa_lifovaluationdata
    TABLES
      materialdescription        = t_materialdescription
      unitsofmeasure             = t_unitsofmeasure
      internationarticlenumbers  = t_internationarticlenumbers
      materialtext               = t_materialtext
      taxclassifications         = t_taxclassifications
      extensionout               = t_extensionout
      return                     = t_return.

  IF sy-subrc <> 0.

    gv_extnumber = gv_matnr.

    LOOP AT t_return INTO wa_return.
      MOVE-CORRESPONDING wa_return TO gs_messages.
      APPEND gs_messages TO gt_messages.
    ENDLOOP.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZMM'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = gv_extnumber.
  ELSE.
    PERFORM obtener_clasificacion USING gv_matnr
                                  CHANGING gv_class
                                           gt_allocvaluesnum
                                           gt_allocvalueschar
                                           gt_allocvaluescurr.
  ENDIF.
ENDFORM.                    " GET_INFO
*&---------------------------------------------------------------------*
*&      Form  AMPLIAR_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_CLIENTDATA  text
*      -->P_WA_PLANTDATA  text
*      -->P_WA_FORECASTPARAMETERS  text
*      -->P_WA_PLANNINGDATA  text
*      -->P_WA_STORAGELOCATIONDATA  text
*      -->P_WA_VALUATIONDATA  text
*      -->P_WA_WAREHOUSENUMBERDATA  text
*      -->P_WA_SALESDATA  text
*      -->P_WA_STORAGETYPEDATA  text
*      -->P_WA_PRODUCTIONRESOURCETOOLDATA  text
*      -->P_WA_LIFOVALUATIONDATA  text
*      -->P_T_MATERIALDESCRIPTION  text
*      -->P_T_UNITSOFMEASURE  text
*      -->P_T_INTERNATIONARTICLENUMBERS  text
*      -->P_T_MATERIALTEXT  text
*      -->P_T_TAXCLASSIFICATIONS  text
*      -->P_T_EXTENSIONOUT  text
*      -->P_T_RETURN  text
*----------------------------------------------------------------------*
FORM ampliar_material USING wa_clientdata
                            wa_plantdata
                            wa_forecastparameters
                            wa_planningdata
                            wa_storagelocationdata
                            wa_valuationdata
                            wa_warehousenumberdata
                            wa_salesdata
                            wa_storagetypedata
                            wa_productionresourcetooldata
                            wa_lifovaluationdata
                            t_materialdescription TYPE tty_materialdescription
                            t_unitsofmeasure  TYPE tty_unitsofmeasure
                            t_internationarticlenumbers TYPE tty_internationarticlenumbers
                            t_materialtext TYPE tty_materialtext
                            t_taxclassifications TYPE tty_taxclassifications
                            t_extensionout TYPE tty_extensionout.

  DATA: wa_headdata                   TYPE bapimathead,
        wa_clientdata_create          TYPE bapi_mara,
        wa_clientdatax                TYPE bapi_marax,
        wa_plantdata_create           TYPE bapi_marc,
        wa_plantdatax                 TYPE bapi_marcx,
        wa_storagelocationdata_create TYPE bapi_mard,
        wa_storagelocationdatax       TYPE bapi_mardx,
        wa_salesdata_create           TYPE bapi_mvke,
        wa_salesdatax                 TYPE bapi_mvkex,
        wa_return_create              TYPE bapiret2.

  DATA: t_materialdescription_create TYPE tty_materialdescription_create,
        t_unitsofmeasure_create      TYPE tty_unitsofmeasure_create,
        t_mean_create                TYPE tty_mean_create,
        t_materialtext_create        TYPE tty_materialtext_create,
        t_taxclassifications_create  TYPE tty_taxclassifications_create,
        t_extensionout_create        TYPE tty_extensionout_create,
        t_return_create              TYPE tty_return_create.

  DATA: error TYPE xfeld.

  wa_headdata-material = gv_zwip.
  wa_headdata-matl_type = 'ZWIP'. "tipo de material
  wa_headdata-ind_sector = 'Z'. "Ramo

*  wa_headdata-BASIC_VIEW = 'X'. "Vista de datos básicos
  wa_headdata-sales_view = 'X'. "Vista de Comercial
  wa_headdata-storage_view = 'X'. "Vista de almacén

  CLEAR wa_plantdata_create-proc_type. " 66170 - cvivo - desde el upgrade se verifica en base a si es viable generar pedidos o
  " no en función del tipo de material

*  PERFORM informar_mara USING wa_clientdata
*                        CHANGING wa_clientdata_create wa_clientdatax.

  PERFORM informar_marc USING  wa_plantdata
                        CHANGING wa_plantdata_create wa_plantdatax.


  PERFORM informar_mard USING  wa_storagelocationdata
                        CHANGING wa_storagelocationdata_create wa_storagelocationdatax.


*  PERFORM informar_mvke USING  wa_salesdata
*                        CHANGING wa_salesdata_create wa_salesdatax.

  t_materialdescription_create[] = t_materialdescription[].

  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      headdata             = wa_headdata
      clientdata           = wa_clientdata_create
      clientdatax          = wa_clientdatax
      plantdata            = wa_plantdata_create
      plantdatax           = wa_plantdatax
*     FORECASTPARAMETERS   =
*     FORECASTPARAMETERSX  =
*     PLANNINGDATA         =
*     PLANNINGDATAX        =
      storagelocationdata  = wa_storagelocationdata_create
      storagelocationdatax = wa_storagelocationdatax
*     VALUATIONDATA        =
*     VALUATIONDATAX       =
*     WAREHOUSENUMBERDATA  =
*     WAREHOUSENUMBERDATAX =
      salesdata            = wa_salesdata_create
      salesdatax           = wa_salesdatax
*     STORAGETYPEDATA      =
*     STORAGETYPEDATAX     =
*     FLAG_ONLINE          = ' '
*     FLAG_CAD_CALL        = ' '
*     NO_DEQUEUE           = ' '
*     NO_ROLLBACK_WORK     = ' '
    IMPORTING
      return               = wa_return_create
    TABLES
      materialdescription  = t_materialdescription_create
      unitsofmeasure       = t_unitsofmeasure_create
*     UNITSOFMEASUREX      =
      internationalartnos  = t_mean_create
      materiallongtext     = t_materialtext_create
      taxclassifications   = t_taxclassifications_create
*     RETURNMESSAGES       =
*     PRTDATA              =
*     PRTDATAX             =
*     EXTENSIONIN          =
*     EXTENSIONINX         =
    .

  IF sy-subrc = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'
*     IMPORTING
*       RETURN        =
      .


    PERFORM asignar_material USING gv_matnr_input
                                   gv_zwip
                                   wa_plantdata
                            CHANGING error.

    PERFORM clear_vbles.

    IF error IS INITIAL.
      MESSAGE s000(zmm) WITH text-005. "ZWIP ampliado correctamente
    ELSE.
      MESSAGE e000(zmm) WITH text-009. "Error en la asignación del ZWIP
    ENDIF.
  ELSE.
    gv_extnumber = gv_matnr.

    MOVE-CORRESPONDING wa_return_create TO gs_messages.
    APPEND gs_messages TO gt_messages.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZMM'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = gv_extnumber.
  ENDIF.




ENDFORM.                    " AMPLIAR_MATERIAL
*&---------------------------------------------------------------------*
*&      Form  ASIGNAR_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_MATNR_INPUT  text
*      -->P_GV_MAT_REF  text
*----------------------------------------------------------------------*
FORM asignar_material  USING    p_matnr
                                p_zwim
                                wa_plantdata TYPE bapi_marc_ga
                       CHANGING error.

  DATA: wa_headdata         TYPE bapimathead,
        wa_plantdata_create TYPE bapi_marc,
        wa_plantdatax       TYPE bapi_marcx,
        wa_return           TYPE bapiret2.

  wa_headdata-material = p_matnr.
  wa_headdata-work_sched_view = 'X'. "Vista de preparación de trabajo

  MOVE-CORRESPONDING wa_plantdata TO wa_plantdata_create.
  wa_plantdata_create-original_batch_flag = '1'.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_zwim
    IMPORTING
      output = wa_plantdata_create-original_batch_ref_material.

  wa_plantdatax-plant = gv_werks.
  wa_plantdatax-original_batch_flag = 'X'.
  wa_plantdatax-original_batch_ref_material = 'X'.


  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      headdata   = wa_headdata
*     clientdata = wa_clientdata_create
*     clientdatax          = wa_clientdatax
      plantdata  = wa_plantdata_create
      plantdatax = wa_plantdatax
*     FORECASTPARAMETERS   =
*     FORECASTPARAMETERSX  =
*     PLANNINGDATA         =
*     PLANNINGDATAX        =
*     storagelocationdata  = wa_storagelocationdata_create
*     storagelocationdatax = wa_storagelocationdatax
*     VALUATIONDATA        =
*     VALUATIONDATAX       =
*     WAREHOUSENUMBERDATA  =
*     WAREHOUSENUMBERDATAX =
*     salesdata  = wa_salesdata_create
*     salesdatax = wa_salesdatax
*     STORAGETYPEDATA      =
*     STORAGETYPEDATAX     =
*     FLAG_ONLINE          = ' '
*     FLAG_CAD_CALL        = ' '
*     NO_DEQUEUE = ' '
*     NO_ROLLBACK_WORK     = ' '
    IMPORTING
      return     = wa_return
*    TABLES
*     materialdescription  = t_materialdescription_create
*     unitsofmeasure       = t_unitsofmeasure_create
*     UNITSOFMEASUREX      =
*     internationalartnos  = t_mean_create
*     materiallongtext     = t_materialtext_create
*     taxclassifications   = t_taxclassifications_create
*     RETURNMESSAGES       =
*     PRTDATA    =
*     PRTDATAX   =
*     EXTENSIONIN          =
*     EXTENSIONINX         =
    .

  IF wa_return-type = 'E'.
    error = 'X'.

    gv_extnumber = gv_matnr.

    MOVE-CORRESPONDING wa_return  TO gs_messages.
    APPEND gs_messages TO gt_messages.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZMM'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = gv_extnumber.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'
*     IMPORTING
*       RETURN        =
      .

  ENDIF.

ENDFORM.                    " ASIGNAR_MATERIAL
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .
  CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
    TABLES
      i_bapiret2_tab = gt_messages.
ENDFORM.                    " MOSTRAR_LOG
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLASIFICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_MATNR  text
*----------------------------------------------------------------------*
FORM obtener_clasificacion  USING    p_matnr
                            CHANGING gv_class
                                     t_allocvaluesnum
                                     t_allocvalueschar
                                     t_allocvaluescurr .

  DATA: lv_object      TYPE          kssk-objek,
        t_allocations  TYPE TABLE OF api_kssk,
        wa_allocations TYPE          api_kssk,
        lt_return      TYPE TABLE OF bapiret2.

* RECUPERAMOS LAS CLASES DE LA CATEGORIAS DE CLASE 023
  lv_object = p_matnr.

  CALL FUNCTION 'CLAP_DDB_GET_CLASSIFICATION'
    EXPORTING
      object                 = lv_object
      obtab                  = 'MARA'
*     STANDARD_TYPE_ONLY     = ' '
*     OBJECT_EQ_CLASS        = ' '
      spras                  = sy-langu
*     ONLY_VARKLART          = ' '
*     POBTAB                 = ' '
*     DATE_OF_CHANGE         =
*     CHANGE_SERVICE_NUMBER  =
      classtype              = '023'
*     READ_ONLY              = ' '
*     CALLED_FROM_API        = ' '
*     SORT_POSNR             = ' '
* IMPORTING
*     ERROR_STATU            =
    TABLES
      allocations            = t_allocations
    EXCEPTIONS
      no_allocation          = 1
      foreign_lock           = 2
      system_failure         = 3
      set_aennr              = 4
      change_nr_not_exist    = 5
      date_in_past           = 6
      error_class            = 7
      error_date_restriction = 8
      error_status           = 9
      OTHERS                 = 10.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
*   RECUPERAMOS LAS CARACTERÍSTICAS
    READ TABLE t_allocations INTO wa_allocations INDEX 1.
    gv_class = wa_allocations-class.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = 'MARA'
        classnum        = gv_class
        classtype       = '023'
*       KEYDATE         = SY-DATUM
*       UNVALUATED_CHARS       = ' '
*       LANGUAGE        = SY-LANGU
* IMPORTING
*       STATUS          =
*       STANDARDCLASS   =
      TABLES
        allocvaluesnum  = gt_allocvaluesnum
        allocvalueschar = gt_allocvalueschar
        allocvaluescurr = gt_allocvaluescurr
        return          = lt_return.

  ENDIF.

ENDFORM.                    " OBTENER_CLASIFICACION
*&---------------------------------------------------------------------*
*&      Form  VALIDAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validar.

  DATA: lv_matnr TYPE          matnr,
        lv_garg  TYPE          seqg3-garg,
        t_enq    TYPE TABLE OF seqg7,
        lv_subrc TYPE          sy-subrc,
        wa_mara  TYPE          mara.

  lv_matnr = gv_matnr.

* verificamos si el material está bloqueado.
  CONCATENATE sy-mandt gv_matnr_input INTO lv_garg.

  CALL FUNCTION 'ENQUE_READ2'
    EXPORTING
      gclient = sy-mandt
      gname   = 'MARA'
      garg    = lv_garg
*     GUNAME  = SY-UNAME
*     OPCODE2 = 1
    IMPORTING
*     NUMBER  =
      subrc   = lv_subrc
    TABLES
      enq     = t_enq.

  IF t_enq[] IS NOT INITIAL.
    PERFORM clear_vbles.
    MESSAGE i140(zmm) WITH lv_matnr. "Material & bloqueado. No se crea el ZWIP
  ELSE.
*   verificamos que el tipo de material sea ZPMP
    SELECT SINGLE * FROM mara
      INTO wa_mara
      WHERE matnr = gv_matnr_input  AND
            mtart = 'ZPMP'.

    IF sy-subrc = 0.
      SELECT SINGLE maktx FROM makt
        INTO gv_maktx
        WHERE matnr = gv_matnr_input  AND
              spras = sy-langu.
    ELSE.
      PERFORM clear_vbles.
      MESSAGE i000(zmm) WITH text-002 text-010.
      "El material indicado no existe o no es del tipo ZPMP
    ENDIF.
  ENDIF.
ENDFORM.                    " VALIDAR
*&---------------------------------------------------------------------*
*&      Form  CLEAR_VBLES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM clear_vbles .
  CLEAR: gv_okcode, gv_matnr, gv_maktx, gv_werks, gv_name1, gv_zwip,
         gv_gest_lote.

ENDFORM.                    " CLEAR_VBLES
*&---------------------------------------------------------------------*
*&      Form  INFORMAR_MPGD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_PLANNINGDATA  text
*      <--P_WA_PLANNINGDATA_CREATE  text
*      <--P_WA_PLANNINGDATAX  text
*----------------------------------------------------------------------*
FORM informar_mpgd  USING    wa_planningdata TYPE bapi_mpgd_ga
                    CHANGING  wa_planningdata_create  TYPE bapi_mpgd
                              wa_planningdatax        TYPE bapi_mpgdx.

  MOVE-CORRESPONDING wa_planningdata TO wa_planningdata_create.


  wa_planningdatax-plant = gv_werks.
  wa_planningdatax-plng_matl = 'X'.
  wa_planningdatax-plng_plant = 'X'.
  wa_planningdatax-convfactor = 'X'.
  wa_planningdatax-plng_matl_external = 'X'.
  wa_planningdatax-plng_matl_guid = 'X'.
  wa_planningdatax-plng_matl_version = 'X'.

ENDFORM.                    " INFORMAR_MPGD
*&---------------------------------------------------------------------*
*&      Form  CREAR_CLASIFICACIONS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_ZWIP  text
*      -->P_GT_ALLOCVALUESNUM  text
*      -->P_GT_ALLOCVALUESCHAR  text
*      -->P_GT_ALLOCVALUESCURR  text
*----------------------------------------------------------------------*
FORM crear_clasificacions  USING    p_zwip
                                    pt_allocvaluesnum
                                    pt_allocvalueschar
                                    pt_allocvaluescurr.

  DATA: lv_objectkey   TYPE bapi1003_key-object,
        lv_objecttable TYPE bapi1003_key-objecttable,
        lv_classnum    TYPE bapi1003_key-classnum,
        lv_classtype   TYPE bapi1003_key-classtype.

  DATA: t_allocvaluesnumnew  TYPE TABLE OF bapi1003_alloc_values_num,
        t_allocvaluescharnew TYPE TABLE OF bapi1003_alloc_values_char,
        t_allocvaluescurrnew TYPE TABLE OF bapi1003_alloc_values_curr,
        t_return             TYPE TABLE OF bapiret2,
        wa_return            TYPE          bapiret2.

  t_allocvaluesnumnew = pt_allocvaluesnum.
  t_allocvaluescharnew = pt_allocvalueschar.

  lv_objectkey = p_zwip.

  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_objectkey
      objecttable        = 'MARA'
      classnum           = gv_class
      classtype          = '023'
*     STATUS             = '1'
*     STANDARDCLASS      =
*     CHANGENUMBER       =
*     KEYDATE            = SY-DATUM
*     NO_DEFAULT_VALUES  = ' '
* IMPORTING
*     CLASSIF_STATUS     =
    TABLES
      allocvaluesnumnew  = t_allocvaluesnumnew
      allocvaluescharnew = t_allocvaluescharnew
      allocvaluescurrnew = t_allocvaluescurrnew
      return             = t_return.

  READ TABLE t_return INTO wa_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'
*     IMPORTING
*       RETURN        =
      .

  ENDIF.

ENDFORM.                    " CREAR_CLASIFICACIONS
