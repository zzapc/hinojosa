FUNCTION zmfmm_check_anul_sal_mcia.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_VBELN) TYPE  VBELN_VL
*"  EXPORTING
*"     REFERENCE(E_ANUL) TYPE  XFLAG
*"  EXCEPTIONS
*"      NO_ANULACION
*"----------------------------------------------------------------------

  " Declaración:
  DATA: BEGIN OF lt_lips OCCURS 0,
          vbeln      TYPE vbeln_vl,
          posnr      TYPE posnr_vl,
          charg      TYPE charg_d,
          lfimg      TYPE lfimg,
          cant_emcia TYPE lfimg,
          cant_anul  TYPE lfimg,
        END OF lt_lips.

  DATA: lt_vbfa TYPE TABLE OF vbfa.

  DATA: ls_vbfa  TYPE         vbfa,
        ls_lips  LIKE LINE OF lt_lips,
        lv_index LIKE         sy-tabix.

  " Inicialización:
  CLEAR: lt_lips, lt_vbfa.
  REFRESH: lt_lips, lt_vbfa.

  " Selección de datos de entregas:
  SELECT vbeln posnr lfimg INTO CORRESPONDING FIELDS OF TABLE lt_lips
    FROM lips
    WHERE vbeln = i_vbeln
    AND charg <> ' '.

  " Selección de entradas de mercancías y anulaciones en base a la entrega:

  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_vbfa
    FROM vbfa
    WHERE vbelv = i_vbeln
    AND vbtyp_n = 'i'
    AND vbtyp_v = 'J'.

  " Recuperamos la cantidad entrada y anulada:

  LOOP AT lt_vbfa INTO ls_vbfa.
    CLEAR: ls_lips, lv_index.
    READ TABLE lt_lips INTO ls_lips WITH KEY vbeln = ls_vbfa-vbelv
                                             posnr = ls_vbfa-posnv.
    lv_index = sy-tabix.
    IF ls_lips IS NOT INITIAL.
      CASE ls_vbfa-plmin.
        WHEN '+'.
          ADD ls_vbfa-rfmng TO ls_lips-cant_emcia.
        WHEN '-'.
          ADD ls_vbfa-rfmng TO ls_lips-cant_anul.
      ENDCASE.
      MODIFY lt_lips FROM ls_lips INDEX lv_index.
    ENDIF.
  ENDLOOP.

  " Se comprueba si hay entrada de mercancía sin anulación:
  LOOP AT lt_lips INTO ls_lips.
    lv_index = sy-tabix.
    ls_lips-cant_emcia = ls_lips-cant_emcia - ls_lips-cant_anul.
    MODIFY lt_lips FROM ls_lips INDEX lv_index.
  ENDLOOP.

  LOOP AT lt_lips INTO ls_lips WHERE cant_emcia > 0.
    e_anul = 'X'.
    RAISE no_anulacion.
    EXIT.
  ENDLOOP.

ENDFUNCTION.
