FUNCTION zmm_inv_recuento.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(DOCUM) TYPE  ZDOCINV
*"     REFERENCE(ETIQUETA) TYPE  CHAR40
*"     VALUE(CANTIDAD) TYPE  MENGE_D
*"     REFERENCE(CORREGIR) TYPE  FLAG OPTIONAL
*"     REFERENCE(CHANGE) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     REFERENCE(MATNR) TYPE  MATNR
*"     REFERENCE(MAKTX) TYPE  MAKTX
*"     REFERENCE(CHARG) TYPE  CHARG_D
*"     REFERENCE(LGORT) TYPE  ZLGORT_NEW
*"     REFERENCE(LGOBE) TYPE  LGOBE
*"     REFERENCE(UBICACION) TYPE  CHAR18
*"     REFERENCE(TXT_UBICACION) TYPE  CHAR30
*"     REFERENCE(MENGE_NEW) TYPE  ZMENGE_NEW
*"     REFERENCE(MEINS) TYPE  MEINS
*"     REFERENCE(RETURN) TYPE  BAPIRET2
*"  EXCEPTIONS
*"      ERROR_LECTURA
*"      FALTA_CANTIDAD
*"----------------------------------------------------------------------
  DATA: lv_objeto_aux(20).

  CLEAR: ztinv2_ci, ztinv2_pi, ztinv2_ci_multi, mara.
  REFRESH: t_ztinv2_ci_multi.

  SELECT SINGLE * FROM ztinv2_ci
    WHERE docum EQ docum.

  IF sy-subrc NE 0.
    MESSAGE 'No existe el documento de inventario' TYPE 'E'.
  ENDIF.

  IF ztinv2_ci-status EQ 'I' AND change IS INITIAL.
    CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
      EXPORTING
        docum = docum
        msgty = 'S'
        msgid = 'ZMM'
        msgno = '158'
        msgv1 = 'En proceso'.

    UPDATE ztinv2_ci SET status = 'P' WHERE docum = docum.
    COMMIT WORK AND WAIT.
    MESSAGE 'Status del inventario modificado a "en proceso"' TYPE 'S'.
  ELSEIF ztinv2_ci-status NE 'P' AND change IS INITIAL. " si no es inicial, tiene que ser en proceso
    return-number = '151'.
    return-id     = 'ZMM'.
    return-type   = 'E'.

    CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
      EXPORTING
        id         = return-id
        number     = return-number
        language   = sy-langu
        message_v1 = return-message_v1
        textformat = 'ASC'
      IMPORTING
        message    = return-message.

*    RAISE error_lectura. " no ejecutamos el RAISE porque si no se limpia la variable return
    RAISE error_lectura.
  ENDIF.

* La primera verificación es de cantidad obligatoria
* ----------------------------------------------------------------------------------
  IF corregir IS NOT INITIAL AND cantidad LE 0. " si se ha activado la corrección de cantidad, pedimos cantidad siempre
    return-number     = '156'.
    return-id         = 'ZMM'.
    return-type       = 'E'.

    CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
      EXPORTING
        id         = return-id
        number     = return-number
        language   = sy-langu
        message_v1 = return-message_v1
        textformat = 'ASC'
      IMPORTING
        message    = return-message.

    RAISE falta_cantidad.
  ENDIF.

* Lectura del código de etiqueta
* esta rutina acaba con material y lote determinados en ZTINV2_PI
* ----------------------------------------------------------------------------------
  CALL FUNCTION 'ZMM_INV_LEER_ETIQUETA'
    EXPORTING
      etiqueta = etiqueta
      werks    = ztinv2_ci-werks
    IMPORTING
      matnr    = ztinv2_pi-matnr
      charg    = ztinv2_pi-charg
      return   = return.

* Verificamos datos maestros leídos
* ----------------------------------------------------------------------------------
  IF ztinv2_pi-charg IS NOT INITIAL. " verif gestión lotes
    SELECT SINGLE @abap_true FROM marc
      WHERE matnr EQ @ztinv2_pi-matnr
        AND werks EQ @ztinv2_ci-werks
        AND xchpf NE @space
      INTO @DATA(result).

    IF sy-subrc NE 0.
      return-number     = '152'.
      return-id         = 'ZMM'.
      return-type       = 'E'.
      return-message_v1 = ztinv2_pi-matnr.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id         = return-id
          number     = return-number
          language   = sy-langu
          message_v1 = return-message_v1
          textformat = 'ASC'
        IMPORTING
          message    = return-message.

      CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
        EXPORTING
          docum = docum
          matnr = ztinv2_pi-matnr
          charg = ztinv2_pi-charg
          msgty = 'E'
          msgid = 'ZMM'
          msgno = '152'
          msgv1 = return-message_v1.

      RAISE error_lectura.
    ENDIF.
  ELSE.
    SELECT SINGLE @abap_true FROM marc
      WHERE matnr EQ @ztinv2_pi-matnr
        AND werks EQ @ztinv2_ci-werks
        AND xchpf EQ @space
      INTO @DATA(result2).

    IF sy-subrc NE 0.
      return-number     = '152'.
      return-id         = 'ZMM'.
      return-type       = 'E'.
      return-message_v1 = ztinv2_pi-matnr.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id         = return-id
          number     = return-number
          language   = sy-langu
          message_v1 = return-message_v1
          textformat = 'ASC'
        IMPORTING
          message    = return-message.

      CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
        EXPORTING
          docum = docum
          matnr = ztinv2_pi-matnr
          charg = ztinv2_pi-charg
          msgty = 'E'
          msgid = 'ZMM'
          msgno = '152'
          msgv1 = return-message_v1.

      RAISE error_lectura.
    ELSEIF cantidad LE 0. " verificamos si nos ha llegado cantidad
      return-number     = '156'.
      return-id         = 'ZMM'.
      return-type       = 'E'.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id         = return-id
          number     = return-number
          language   = sy-langu
          message_v1 = return-message_v1
          textformat = 'ASC'
        IMPORTING
          message    = return-message.

      RAISE falta_cantidad.
    ENDIF.
  ENDIF.

  SELECT SINGLE * FROM mara
    WHERE matnr EQ ztinv2_pi-matnr.

  IF sy-subrc NE 0.
    return-number     = '152'.
    return-id         = 'ZMM'.
    return-type       = 'E'.
    return-message_v1 = ztinv2_pi-matnr.

    CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
      EXPORTING
        id         = return-id
        number     = return-number
        language   = sy-langu
        message_v1 = return-message_v1
        textformat = 'ASC'
      IMPORTING
        message    = return-message.

    CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
      EXPORTING
        docum = docum
        matnr = ztinv2_pi-matnr
        charg = ztinv2_pi-charg
        msgty = 'E'
        msgid = 'ZMM'
        msgno = '152'
        msgv1 = return-message_v1.

    RAISE error_lectura.
  ENDIF.

* En selecciones múltiples, verificamos que el material está dentro de selección
* ----------------------------------------------------------------------------------
  IF ztinv2_ci-multi IS NOT INITIAL.
    SELECT * FROM ztinv2_ci_multi
      INTO TABLE t_ztinv2_ci_multi
      WHERE docum EQ ztinv2_ci-docum.

    IF sy-subrc NE 0.
      return-number     = '153'.
      return-id         = 'ZMM'.
      return-type       = 'E'.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id         = return-id
          number     = return-number
          language   = sy-langu
          message_v1 = return-message_v1
          textformat = 'ASC'
        IMPORTING
          message    = return-message.

      CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
        EXPORTING
          docum = docum
          msgty = 'E'
          msgid = 'ZMM'
          msgno = '153'.

      RAISE error_lectura.
    ENDIF.

    LOOP AT t_ztinv2_ci_multi.
      IF ( t_ztinv2_ci_multi-matnr IS NOT INITIAL AND t_ztinv2_ci_multi-matnr NE mara-matnr )
        OR ( t_ztinv2_ci_multi-mtart IS NOT INITIAL AND t_ztinv2_ci_multi-mtart NE mara-mtart ).
        return-number     = '154'.
        return-id         = 'ZMM'.
        return-type       = 'E'.
        return-message_v1 = ztinv2_pi-matnr.

        CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
          EXPORTING
            id         = return-id
            number     = return-number
            language   = sy-langu
            message_v1 = return-message_v1
            textformat = 'ASC'
          IMPORTING
            message    = return-message.

        CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
          EXPORTING
            docum = docum
            matnr = ztinv2_pi-matnr
            charg = ztinv2_pi-charg
            msgty = 'E'
            msgid = 'ZMM'
            msgno = '154'
            msgv1 = return-message_v1.

        RAISE error_lectura.
      ENDIF.
    ENDLOOP.
  ENDIF.

* Una vez verificado, vemos situación de stock y lo damos por contado
* ----------------------------------------------------------------------------------
  IF ztinv2_pi-charg IS NOT INITIAL. " material con lote
    SELECT SINGLE * FROM mchb " se asume siempre que el lote solo está en 1 almacén a la vez
      WHERE charg EQ ztinv2_pi-charg
        AND matnr EQ ztinv2_pi-matnr
        AND werks EQ ztinv2_ci-werks
        AND lgort EQ ztinv2_ci-lgort
        AND ( clabs GT 0 OR " stock de cualquier tipo
              cumlm GT 0 OR
              cinsm GT 0 OR
              cspem GT 0 OR
              cretm GT 0 ).

    IF sy-subrc EQ 0. " existe stock en almacén correcto
      PERFORM etiqueta_contada USING 'B'
                                     ztinv2_pi-matnr
                                     ztinv2_pi-charg
                                     ztinv2_ci
                                     cantidad
                                     mchb-lgort
                                     mchb-clabs
                                     mchb-cumlm
                                     mchb-cinsm
                                     mchb-cspem
                                     mchb-cretm
                                     change
                            CHANGING return.

      IF sy-subrc NE 0.
        return-number     = '155'.
        return-id         = 'ZMM'.
        return-type       = 'E'.

        CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
          EXPORTING
            id         = return-id
            number     = return-number
            language   = sy-langu
            message_v1 = return-message_v1
            textformat = 'ASC'
          IMPORTING
            message    = return-message.

        CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
          EXPORTING
            docum = docum
            matnr = ztinv2_pi-matnr
            charg = ztinv2_pi-charg
            msgty = 'E'
            msgid = 'ZMM'
            msgno = '155'
            msgv1 = return-message_v1.

        RAISE error_lectura.
      ENDIF.
    ELSE. " no existe stock, ver si lo hubo o si está en otro almacén
      SELECT SINGLE * FROM mchb " ¿está en otro almacén?
        WHERE charg EQ ztinv2_pi-charg
          AND matnr EQ ztinv2_pi-matnr
          AND werks EQ ztinv2_ci-werks
          AND ( clabs GT 0 OR " stock de cualquier tipo
              cumlm GT 0 OR
              cinsm GT 0 OR
              cspem GT 0 OR
              cretm GT 0 ).

      IF sy-subrc EQ 0. " está en otro almacén
*        SELECT SINGLE @abap_true FROM mchb " ver si hubo en el almacén, en cuyo caso el lote ya está creado
*          WHERE charg EQ @ztinv2_pi-charg
*            AND matnr EQ @ztinv2_pi-matnr
*            AND werks EQ @ztinv2_ci-werks
*            AND lgort EQ @ztinv2_ci-lgort
*            INTO @DATA(result3).
*
*        IF sy-subrc NE 0. " hace falta crear lote
*
*        ENDIF.

        PERFORM etiqueta_contada USING 'A'
                                       ztinv2_pi-matnr
                                       ztinv2_pi-charg
                                       ztinv2_ci
                                       cantidad
                                       mchb-lgort
                                       mchb-clabs
                                       mchb-cumlm
                                       mchb-cinsm
                                       mchb-cspem
                                       mchb-cretm
                                       change
                              CHANGING return.

        IF sy-subrc NE 0.
          return-number     = '155'.
          return-id         = 'ZMM'.
          return-type       = 'E'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = return-id
              number     = return-number
              language   = sy-langu
              message_v1 = return-message_v1
              textformat = 'ASC'
            IMPORTING
              message    = return-message.

          CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
            EXPORTING
              docum = docum
              matnr = ztinv2_pi-matnr
              charg = ztinv2_pi-charg
              msgty = 'E'
              msgid = 'ZMM'
              msgno = '155'
              msgv1 = return-message_v1.

          RAISE error_lectura.
        ENDIF.
      ELSE. " no está en otro almacén, aflorar
        IF cantidad LE 0. " hay que especificar cantidad
          return-number     = '156'.
          return-id         = 'ZMM'.
          return-type       = 'E'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = return-id
              number     = return-number
              language   = sy-langu
              message_v1 = return-message_v1
              textformat = 'ASC'
            IMPORTING
              message    = return-message.

          RAISE falta_cantidad.
        ENDIF.

        PERFORM etiqueta_contada USING 'C'
                                       ztinv2_pi-matnr
                                       ztinv2_pi-charg
                                       ztinv2_ci
                                       cantidad
                                       mchb-lgort
                                       mchb-clabs
                                       mchb-cumlm
                                       mchb-cinsm
                                       mchb-cspem
                                       mchb-cretm
                                       change
                              CHANGING return.

        IF sy-subrc NE 0.
          return-number     = '155'.
          return-id         = 'ZMM'.
          return-type       = 'E'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = return-id
              number     = return-number
              language   = sy-langu
              message_v1 = return-message_v1
              textformat = 'ASC'
            IMPORTING
              message    = return-message.

          CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
            EXPORTING
              docum = docum
              matnr = ztinv2_pi-matnr
              charg = ztinv2_pi-charg
              msgty = 'E'
              msgid = 'ZMM'
              msgno = '155'
              msgv1 = return-message_v1.

          RAISE error_lectura.
        ENDIF.

*        SELECT SINGLE * FROM mchb " ¿hubo stock en el almacén?
*           WHERE charg EQ ztinv2_pi-charg
*             AND matnr EQ ztinv2_pi-matnr
*             AND werks EQ ztinv2_ci-werks
*             AND lgort EQ ztinv2_ci-lgort.
*
*        IF sy-subrc EQ 0. " no hace falta crear lote
*
*        ELSE. " ver si hubo en otro almacén
*          SELECT SINGLE * FROM mchb " ¿hubo stock en cualquier almacén?
*            WHERE charg EQ ztinv2_pi-charg
*              AND matnr EQ ztinv2_pi-matnr
*              AND werks EQ ztinv2_ci-werks.
*
*          IF sy-subrc EQ 0. " creamos el lote como copia
*
*          ELSE. " creamos el lote de cero
*
*          ENDIF.
*        ENDIF.
      ENDIF.
    ENDIF.
  ELSE. " material sin lote
    SELECT SINGLE * FROM mard
      WHERE matnr EQ ztinv2_pi-matnr
        AND werks EQ ztinv2_ci-werks
        AND lgort EQ ztinv2_ci-lgort
        AND ( labst GT 0 OR " stock de cualquier tipo
              umlme GT 0 OR
              insme GT 0 OR
              speme GT 0 OR
              retme GT 0 ).

    IF sy-subrc EQ 0. " existe stock en almacén correcto
      PERFORM etiqueta_contada USING 'B'
                                     ztinv2_pi-matnr
                                     ztinv2_pi-charg
                                     ztinv2_ci
                                     cantidad
                                     mard-lgort
                                     mard-labst
                                     mard-umlme
                                     mard-insme
                                     mard-speme
                                     mard-retme
                                     change
                            CHANGING return.

      IF sy-subrc NE 0.
        return-number     = '155'.
        return-id         = 'ZMM'.
        return-type       = 'E'.

        CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
          EXPORTING
            id         = return-id
            number     = return-number
            language   = sy-langu
            message_v1 = return-message_v1
            textformat = 'ASC'
          IMPORTING
            message    = return-message.

        CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
          EXPORTING
            docum = docum
            matnr = ztinv2_pi-matnr
            charg = ztinv2_pi-charg
            msgty = 'E'
            msgid = 'ZMM'
            msgno = '155'
            msgv1 = return-message_v1.

        RAISE error_lectura.
      ENDIF.
    ELSE. " no existe stock, ver si lo hubo o si está en otro almacén
      SELECT SINGLE * FROM mard
        WHERE matnr EQ ztinv2_pi-matnr
          AND werks EQ ztinv2_ci-werks
          AND ( labst GT 0 OR " stock de cualquier tipo
                umlme GT 0 OR
                insme GT 0 OR
                speme GT 0 OR
                retme GT 0 ).

      IF sy-subrc EQ 0. " está en otro almacén
        PERFORM etiqueta_contada USING  'C' " lo metemos como caso C, no podemos saber si lo del otro almacén está o no
                                        ztinv2_pi-matnr
                                        ztinv2_pi-charg
                                        ztinv2_ci
                                        cantidad
                                        mard-lgort
                                        mard-labst
                                        mard-umlme
                                        mard-insme
                                        mard-speme
                                        mard-retme
                                        change
                               CHANGING return.

        IF sy-subrc NE 0.
          return-number     = '155'.
          return-id         = 'ZMM'.
          return-type       = 'E'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = return-id
              number     = return-number
              language   = sy-langu
              message_v1 = return-message_v1
              textformat = 'ASC'
            IMPORTING
              message    = return-message.

          CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
            EXPORTING
              docum = docum
              matnr = ztinv2_pi-matnr
              charg = ztinv2_pi-charg
              msgty = 'E'
              msgid = 'ZMM'
              msgno = '155'
              msgv1 = return-message_v1.

          RAISE error_lectura.
        ENDIF.
      ELSE. " no está en ningún almacén
        IF cantidad LE 0. " hay que especificar cantidad
          return-number     = '156'.
          return-id         = 'ZMM'.
          return-type       = 'E'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = return-id
              number     = return-number
              language   = sy-langu
              message_v1 = return-message_v1
              textformat = 'ASC'
            IMPORTING
              message    = return-message.

          RAISE falta_cantidad.
        ENDIF.

        PERFORM etiqueta_contada USING  'C'
                                        ztinv2_pi-matnr
                                        ztinv2_pi-charg
                                        ztinv2_ci
                                        cantidad
                                        mard-lgort
                                        mard-labst
                                        mard-umlme
                                        mard-insme
                                        mard-speme
                                        mard-retme
                                        change
                               CHANGING return.

        IF sy-subrc NE 0.
          return-number     = '155'.
          return-id         = 'ZMM'.
          return-type       = 'E'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = return-id
              number     = return-number
              language   = sy-langu
              message_v1 = return-message_v1
              textformat = 'ASC'
            IMPORTING
              message    = return-message.

          CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
            EXPORTING
              docum = docum
              matnr = ztinv2_pi-matnr
              charg = ztinv2_pi-charg
              msgty = 'E'
              msgid = 'ZMM'
              msgno = '155'
              msgv1 = return-message_v1.

          RAISE error_lectura.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

* Una vez contado, rellenamos los datos para la pantalla
* ----------------------------------------------------------------------------------
  charg = ztinv2_pi-charg.
  matnr = ztinv2_pi-matnr.

  SELECT SINGLE maktx FROM makt
    INTO maktx
    WHERE matnr EQ matnr
      AND spras EQ sy-langu.

  IF mard-lgort IS NOT INITIAL.
    lgort = mard-lgort.
  ELSEIF mchb-lgort IS NOT INITIAL.
    lgort = mchb-lgort.
  ENDIF.

  SELECT SINGLE lgobe FROM t001l
    INTO lgobe
    WHERE lgort EQ lgort
      AND werks EQ ztinv2_ci-werks.

  menge_new = cantidad.
  meins = mara-meins.

ENDFUNCTION.

*&---------------------------------------------------------------------*
*&      Form  ETIQUETA_CONTADA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0331   text
*      -->P_ZTINV2_PI_MATNR  text
*      -->P_ZTINV2_PI_CHARG  text
*      -->P_DOCUM  text
*      -->P_MCHB_LGORT  text
*      -->P_MCHB_CLABS  text
*      -->P_MCHB_CUMLM  text
*      -->P_MCHB_CINSM  text
*      -->P_MCHB_CSPEM  text
*      -->P_MCHB_CRETM  text
*----------------------------------------------------------------------*
FORM etiqueta_contada  USING    VALUE(p_casuistica)
                                p_matnr
                                p_charg
                                p_ztinv2_ci TYPE ztinv2_ci
                                p_cantidad
                                p_lgort
                                p_labs
                                p_umlm
                                p_insm
                                p_spem
                                p_retm
                                p_change
                       CHANGING p_return TYPE bapiret2.

  DATA: lt_ztinv2_pi TYPE TABLE OF ztinv2_pi,
        ls_ztinv2_pi TYPE ztinv2_pi,
        lt_matnr     TYPE tty_material,
        lt_messages  LIKE bapiret2 OCCURS 0,
        lv_posnr     TYPE posnr,
        lv_msgv1     TYPE char50,
        lv_msgv2     TYPE char20,
        lv_msgv3     TYPE char20,
        lv_error     TYPE xflag,
        lv_aenam     TYPE aenam,
        lv_aedat     TYPE aedat,
        lv_aezeit    TYPE aezeit.
  FIELD-SYMBOLS: <ztinv2_pi> TYPE ztinv2_pi.

  REFRESH: lt_ztinv2_pi.
  CLEAR: lv_aenam, lv_aezeit, lv_aedat, lv_posnr, lv_error.

  CASE p_casuistica.
    WHEN 'A' OR 'C'.
      IF p_lgort IS INITIAL. " en el caso C, vendrá sin almacén, pintamos el del inventario
        p_lgort = ztinv2_ci-lgort.
      ENDIF.

      " Primero verificamos que no existe ya la entrada
      SELECT SINGLE posicion FROM ztinv2_pi
        INTO lv_posnr
        WHERE docum EQ p_ztinv2_ci-docum
          AND matnr EQ p_matnr
          AND charg EQ p_charg.

      IF sy-subrc NE 0.
        SELECT MAX( posicion ) FROM ztinv2_pi
                  INTO lv_posnr
                  WHERE docum = p_ztinv2_ci-docum.

        ADD 1 TO lv_posnr.
      ELSE.
        lv_aenam = sy-uname.
        lv_aedat = sy-datum.
        lv_aezeit = sy-uzeit.
      ENDIF.

      IF p_cantidad LE 0. " si no se ha especificado cantidad, se toma la que hay
        IF p_labs GT 0.
          MOVE p_labs TO p_cantidad.
        ELSEIF p_umlm GT 0.
          MOVE p_umlm TO p_cantidad.
        ELSEIF p_insm GT 0.
          MOVE p_insm TO p_cantidad.
        ELSEIF p_spem GT 0.
          MOVE p_spem TO p_cantidad.
        ELSEIF p_retm GT 0.
          MOVE p_retm TO p_cantidad.
        ELSE.
          SELECT SINGLE menge FROM ztinv2_pi
            INTO p_cantidad
            WHERE docum EQ p_ztinv2_ci-docum
              AND matnr EQ p_matnr
              AND charg EQ p_charg.
        ENDIF.
      ENDIF.

      PERFORM crear_posicion(zrinv0002) USING p_ztinv2_ci-docum
                                              p_ztinv2_ci-werks
                                              p_lgort
                                              p_charg
                                              p_matnr
                                              sy-uname
                                              sy-datum
                                              sy-uzeit
                                              p_insm
                                              p_spem
                                              p_retm
                                              p_cantidad " la cantidad se da de alta como libre utilización
                                              lt_matnr[]
                                     CHANGING lt_ztinv2_pi[]
                                              lv_posnr
                                              lt_messages[]
                                              lv_error.

      LOOP AT lt_ztinv2_pi ASSIGNING <ztinv2_pi>.
        <ztinv2_pi>-lgort = ztinv2_ci-lgort.
        <ztinv2_pi>-lgort_new = p_lgort.
        <ztinv2_pi>-contado = 'X'.
        <ztinv2_pi>-menge_new = p_cantidad.
        <ztinv2_pi>-casuistica = p_casuistica.
        <ztinv2_pi>-aenam = lv_aenam.
        <ztinv2_pi>-aedat = lv_aedat.
        <ztinv2_pi>-aezeit = lv_aezeit.
        <ztinv2_pi>-zero  = space.
      ENDLOOP.

      IF lt_ztinv2_pi[] IS NOT INITIAL.
        MODIFY ztinv2_pi FROM TABLE lt_ztinv2_pi[].
      ENDIF.

    WHEN 'B'.
      IF p_cantidad LE 0. " si no se ha especificado cantidad, se toma la que hay
        IF p_labs GT 0.
          MOVE p_labs TO p_cantidad.
        ELSEIF p_umlm GT 0.
          MOVE p_umlm TO p_cantidad.
        ELSEIF p_insm GT 0.
          MOVE p_insm TO p_cantidad.
        ELSEIF p_spem GT 0.
          MOVE p_spem TO p_cantidad.
        ELSEIF p_retm GT 0.
          MOVE p_retm TO p_cantidad.
        ELSE.
          SELECT SINGLE menge FROM ztinv2_pi
            INTO p_cantidad
            WHERE docum EQ p_ztinv2_ci-docum
              AND matnr EQ p_matnr
              AND charg EQ p_charg.
        ENDIF.
      ENDIF.

      UPDATE ztinv2_pi SET  contado     = 'X'
                            menge_new   = p_cantidad
                            lgort_new   = p_lgort
                            casuistica  = p_casuistica
                            zero        = space
                            aedat       = sy-datum
                            aezeit      = sy-uzeit
                            aenam       = sy-uname
                      WHERE docum EQ p_ztinv2_ci-docum
                        AND matnr EQ p_matnr
                        AND charg EQ p_charg.

  ENDCASE.

  IF lv_posnr IS INITIAL.
    SELECT SINGLE posicion FROM ztinv2_pi
      INTO lv_posnr
      WHERE docum EQ p_ztinv2_ci-docum
        AND matnr EQ p_matnr
        AND charg EQ p_charg.
  ENDIF.

  WRITE p_matnr TO lv_msgv1 NO-ZERO.
  IF p_charg IS NOT INITIAL.
    CONCATENATE lv_msgv1 '/' p_charg INTO lv_msgv1.
  ENDIF.
  CONDENSE lv_msgv1.
  WRITE lv_posnr TO lv_msgv2 NO-ZERO.
  lv_msgv3 = p_cantidad.
  CONDENSE: lv_msgv1, lv_msgv2, lv_msgv3.

  IF p_change IS INITIAL.
    CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
      EXPORTING
        docum = p_ztinv2_ci-docum
        matnr = p_matnr
        charg = p_charg
        msgty = 'S'
        msgid = 'ZMM'
        msgno = '157'
        msgv1 = lv_msgv1
        msgv2 = lv_msgv2
        msgv3 = lv_msgv3
        msgv4 = p_casuistica.
  ELSE.
    CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
      EXPORTING
        docum = p_ztinv2_ci-docum
        matnr = p_matnr
        charg = p_charg
        msgty = 'S'
        msgid = 'ZMM'
        msgno = '163'
        msgv1 = lv_msgv1
        msgv2 = lv_msgv2
        msgv3 = lv_msgv3
        msgv4 = p_casuistica.
  ENDIF.

  COMMIT WORK AND WAIT.

ENDFORM.
