FUNCTION zfm_mm_check_matnr_folder.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_MATNR) TYPE  MATNR
*"     REFERENCE(I_MTART) TYPE  MTART
*"     REFERENCE(I_MBRSH) TYPE  MBRSH
*"  EXPORTING
*"     REFERENCE(E_MATNR) TYPE  MATNR
*"----------------------------------------------------------------------

  DATA: lo_exceptions       TYPE REF TO zcx_mm_exception,
        lo_material_zpt     TYPE REF TO zcl_mm_material_zpt,
        lo_material_cups    TYPE REF TO zcl_mm_material_cups,
        lo_material_tools   TYPE REF TO zcl_mm_material_tools,
        lt_r_mtart          TYPE md_range_t_mtart,
        lv_mtext            TYPE char18,
        lv_msequ            TYPE char18,
        lv_fchar            TYPE zcodigoutil,
        lv_new_matnr        TYPE matnr,
        lv_diametro         TYPE zcupdiametro,
        lv_capacidad        TYPE zcupcapacidad,
        lv_altura           TYPE zcupaltura,
        lv_werks            TYPE werks_d,
        lv_codigoutil       TYPE zcodigoutil.

  "Ponemos chequeo por CUPS. SOlo activamos ZPTF y ZCUP. Cuando arranquemos con primera planta, eliminamos chequeo
  IF ( ( ( i_matnr(3) = 'ZPT' AND i_matnr NE 'ZPTF' ) OR i_matnr = 'ZPSE' ) ).

    IF ( sy-sysid = 'HEP' ).
      MESSAGE 'Actualmente no está permitida la creación de estos materiales. Contacte con el administrador.' TYPE 'E'.
    ENDIF.

  ENDIF.

  "Comprobamos si el material ya existe
  SELECT COUNT(*) FROM mara WHERE matnr EQ i_matnr.

  "Chequeamos resultado
  IF ( sy-subrc EQ 0 ). "Existe, estamos ampliando

    e_matnr = i_matnr.

  ELSE. "No existe

    TRY.

*    1- Comprobamos si es ZPT

        CLEAR: lt_r_mtart.

        "Obtenemos materiales compatibles con ZPT
        lt_r_mtart = zcl_mm_material_zpt=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_zpt=>_c_setname_value ).

        "Comprobamos si nuestro tipo de material es compatible
        IF ( i_mtart IN lt_r_mtart ). "Es compatible

          "Decodificamos material
          zcl_mm_material_zpt=>s_decode_matnr(
            EXPORTING
              i_matnr = i_matnr    " Número de material
            IMPORTING
              e_mtext = lv_mtext    " Parte genérica
              e_msequ = lv_msequ    " Parte secuencial
          ).

          "Creamos objeto ZPT
          lo_material_zpt = NEW zcl_mm_material_zpt( i_mtart = i_mtart i_mbrsh = i_mbrsh i_prodh = lv_mtext ).

          "Obtenemos código de material nuevo
          lv_new_matnr = lo_material_zpt->zintf_mm_material_master~get_new_matnr( ).

          "Comprobamos si se corresponden
          IF ( i_matnr NE lv_new_matnr ). "No se corresponden
            MESSAGE 'No se puede crear material con esta numeración se propondrá nueva numeración' TYPE 'W'.
            e_matnr = lv_new_matnr.
          ELSE. "Se corresponden
            e_matnr = i_matnr.
          ENDIF.

        ELSE.

          CLEAR: lt_r_mtart.

          "Obtenemos materiales compatibles con CUPS
          lt_r_mtart = zcl_mm_material_cups=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_cups=>_c_setname_value ).

          "Comprobamos si nuestro tipo de material es compatible con CUPS
          IF ( i_mtart IN lt_r_mtart ). "Es compatible

            "Decodificamos material
            zcl_mm_material_cups=>s_decode_matnr(
              EXPORTING
                i_matnr = i_matnr    " Número de material
              IMPORTING
                e_mtext = lv_mtext    " Parte genérica
                e_msequ = lv_msequ    " Parte secuencial
            ).

            IF ( lv_mtext IS NOT INITIAL AND lv_msequ IS NOT INITIAL ).

              "Creamos objeto CUPS
              lo_material_cups = NEW zcl_mm_material_cups( i_mtart = i_mtart i_mbrsh = i_mbrsh ).

              CASE i_matnr+1(1).

                WHEN zcl_mm_material_cups=>_c_typecup_tapa.

                  CLEAR: lv_diametro.
                  lv_diametro = i_matnr+2(3).

                  lo_material_cups->set_tapa( EXPORTING
                      i_diametro       = lv_diametro    " Diametro para materiales CUP
                      i_apilable       = i_matnr+5(1)   " 'A' Apilable, 'N' No apilable
                  ).

                WHEN zcl_mm_material_cups=>_c_typecup_vaso.

                  CLEAR: lv_diametro, lv_capacidad, lv_altura.
                  lv_diametro   = i_matnr+2(3).
                  lv_capacidad  = i_matnr+5(4).
                  lv_altura     = i_matnr+9(3).

                  lo_material_cups->set_vaso(
                    EXPORTING
                      i_diametro       = lv_diametro    " Diametro para materiales CUP
                      i_altura         = lv_altura      " Altura para materiales CUP
                      i_capacidad      = lv_capacidad   " Capacidad para materiales CUP
                  ).

              ENDCASE.

              "Obtenemos código de material nuevo
              lv_new_matnr = lo_material_cups->zintf_mm_material_master~get_new_matnr( ).

              "Comprobamos si se corresponden
              IF ( i_matnr NE lv_new_matnr ). "No se corresponden
                MESSAGE 'No se puede crear material con esta numeración se propondrá nueva numeración' TYPE 'W'.
                e_matnr = lv_new_matnr.
              ELSE. "Se corresponden
                e_matnr = i_matnr.
              ENDIF.

            ELSE.

              MESSAGE 'El código de material introducido no es compatible con CUPS' TYPE 'E'.

            ENDIF.

          ELSE. "No es compatible con CUPS

            CLEAR: lt_r_mtart.

            "Obtenemos materiales compatibles con CUPS
            lt_r_mtart = zcl_mm_material_tools=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_tools=>_c_setname_value ).

            "Comprobamos si nuestro tipo de material es compatible con TOOLS
            IF ( i_mtart IN lt_r_mtart ). "Es compatible

              CLEAR: lv_mtext, lv_msequ, lv_fchar.
              zcl_mm_material_tools=>s_decode_matnr(
                EXPORTING
                  i_matnr          = i_matnr    " Número de material
                IMPORTING
                  e_mtext          = lv_mtext    " Parte texto del material
                  e_msequ          = lv_msequ    " Parte secuencial del material
                  e_fchar          = lv_fchar    " Letra final (solo troqueles)
              ).

              IF ( lv_mtext IS NOT INITIAL AND lv_msequ IS NOT INITIAL ).

                MOVE lv_mtext+2(4) TO lv_werks.
                MOVE lv_mtext+6(1) TO lv_codigoutil.

                lo_material_tools = NEW zcl_mm_material_tools( i_mtart = i_mtart i_mbrsh = i_mbrsh i_werks = lv_werks i_codigoutil = lv_codigoutil ).

                IF ( lo_material_tools IS BOUND ).

                  lv_new_matnr = lo_material_tools->zintf_mm_material_master~get_new_matnr( ).

                  "Comprobamos si se corresponden
                  IF ( i_matnr NE lv_new_matnr ). "No se corresponden
                    MESSAGE 'No se puede crear material con esta numeración se propondrá nueva numeración' TYPE 'W'.
                    e_matnr = lv_new_matnr.
                  ELSE. "Se corresponden
                    e_matnr = i_matnr.
                  ENDIF.

                ELSE.

                  MESSAGE 'El código de material introducido no es compatible con UTILES' TYPE 'E'.

                ENDIF.

              ENDIF.

            ENDIF.

          ENDIF.

        ENDIF.

      CATCH zcx_mm_exception INTO lo_exceptions.

        MESSAGE lo_exceptions->if_t100_message~t100key-attr1 TYPE 'E'.

      ENDTRY.


  ENDIF.

ENDFUNCTION.
