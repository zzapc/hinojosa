FUNCTION z_fieb_905_algorithm.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_NOTE_TO_PAYEE) TYPE  STRING OPTIONAL
*"     REFERENCE(I_COUNTRY) TYPE  LAND1 OPTIONAL
*"  TABLES
*"      T_AVIP_IN STRUCTURE  AVIP OPTIONAL
*"      T_AVIP_OUT STRUCTURE  AVIP
*"      T_FILTER1 OPTIONAL
*"      T_FILTER2 OPTIONAL
*"----------------------------------------------------------------------

* Consultor: David España (Seidor) (04.01.2019)

* * Algoritmo para la búsqueda de tercero y propuesta en FEBAN (sin compensación).

  RANGES:
     r_bukrs FOR bkpf-bukrs.
  DATA:
     wl_note_to_payee TYPE string.

  " TABLES: knb1,lfb1.

  DATA: lv_kunnr LIKE knb1-kunnr,
        lv_lifnr LIKE lfb1-lifnr,
        lv_bukrs LIKE bseg-bukrs,
        lv_belnr LIKE bseg-belnr,
        lv_gjahr LIKE bseg-gjahr.

  DATA: lv_importfebep TYPE diffb_f05a,
        lt_zfi_docs_t  TYPE zseitrt_003,
        ls_zfi_docs_t  TYPE LINE OF zseitrt_003,
        lv_emensaje    TYPE msgty,
        lv_absnd       TYPE absnd_eb,
        lt_zseitrt_001 TYPE TABLE OF zseitrt_001,
        wa_zseitrt_001 TYPE zseitrt_001,
        lv_attr2       TYPE char1,
        lv_koart       TYPE char1,
        lv_cliente     TYPE kunnr,
        lv_proveedor   TYPE lifnr.

  CLEAR: lv_absnd.

  FIELD-SYMBOLS: <fs_febep> TYPE febep,
                 <fs_febko> TYPE febko.

  ASSIGN ('(RFEBBU10)FEBKO') TO <fs_febko>.
  ASSIGN ('(RFEBBU10)FEBEP') TO <fs_febep>.

  LOOP AT t_avip_in WHERE bukrs <> space.   "Si no viene la SOCIEDAD, todas serán seleccionadas.
    r_bukrs-sign = 'I'.
    r_bukrs-option = 'EQ'.
    r_bukrs-low = t_avip_in-bukrs.
    APPEND r_bukrs.
    EXIT.
  ENDLOOP.

  CASE i_country.
    WHEN 'ES'.

      lv_absnd = <fs_febko>-absnd(8). "Banco del extracto electrónico

      CLEAR lv_attr2.

      SELECT attr2
        FROM t033f
        INTO lv_attr2
        WHERE eigr1 = <fs_febep>-vgint.

        CASE lv_attr2.
          WHEN '8'. "cliente

            SELECT kunnr, stcd1 INTO TABLE @DATA(tl_kna1)
             FROM kna1
              WHERE stcd1 NE ''.

          WHEN '7'. "proveedor

            SELECT lifnr, stcd1 INTO TABLE @DATA(tl_lfa1)
             FROM lfa1
              WHERE stcd1 NE ''.

        ENDCASE.
      ENDSELECT.


      CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
        EXPORTING
          intext  = i_note_to_payee
        IMPORTING
          outtext = wl_note_to_payee.

      REPLACE ALL OCCURRENCES OF '..' IN wl_note_to_payee WITH ''.
      CONDENSE wl_note_to_payee .

      IF tl_kna1[] IS NOT INITIAL.

        LOOP AT tl_kna1 INTO DATA(xl_kna1).

          IF ( wl_note_to_payee CS xl_kna1-stcd1 ).

            IF xl_kna1-kunnr IS NOT INITIAL.

              CLEAR lv_attr2.

              SELECT attr2
                FROM t033f
                INTO lv_attr2
                WHERE eigr1 = <fs_febep>-vgint.

                CASE lv_attr2.
                  WHEN '8'.
                    MOVE 'D' TO lv_koart.
                    EXIT.
                  WHEN '7'.
                    MOVE 'K' TO lv_koart.
                    EXIT.
                ENDCASE.
              ENDSELECT.

              IF lv_koart EQ 'D'.

                lv_cliente = xl_kna1-kunnr.

                t_avip_out-koart   = 'D'.
                t_avip_out-bukrs   =  t_avip_in-bukrs.
                t_avip_out-konto   =  lv_cliente.
                t_avip_out-sfeld   =  'BELNR'.

                APPEND t_avip_out.

              ENDIF.
            ENDIF.
          ENDIF.
        ENDLOOP.

      ENDIF.

      CLEAR: tl_kna1, xl_kna1.

      IF tl_lfa1[] IS NOT INITIAL.

        LOOP AT tl_lfa1 INTO DATA(xl_lfa1).

          IF ( wl_note_to_payee CS xl_lfa1-stcd1 ).

            IF xl_lfa1-lifnr IS NOT INITIAL.

              CLEAR lv_attr2.

              SELECT attr2
                FROM t033f
                INTO lv_attr2
                WHERE eigr1 = <fs_febep>-vgint.

                CASE lv_attr2.
                  WHEN '8'.
                    MOVE 'D' TO lv_koart.
                    EXIT.
                  WHEN '7'.
                    MOVE 'K' TO lv_koart.
                    EXIT.
                ENDCASE.
              ENDSELECT.

              IF lv_koart EQ 'K'.

                lv_proveedor = xl_lfa1-lifnr.

                t_avip_out-koart   = 'K'.
                t_avip_out-bukrs   =  t_avip_in-bukrs.
                t_avip_out-konto   =  lv_proveedor.
                t_avip_out-sfeld   =  'BELNR'.

                APPEND t_avip_out.

              ENDIF.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CLEAR: tl_lfa1, xl_lfa1.

  ENDCASE.

ENDFUNCTION.
