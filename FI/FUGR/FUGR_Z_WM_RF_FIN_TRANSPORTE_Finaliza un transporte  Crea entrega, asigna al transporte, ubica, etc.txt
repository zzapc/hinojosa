FUNCTION z_wm_rf_fin_transporte.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(P_VTTK) TYPE  VTTK
*"     REFERENCE(P_EM_PO) TYPE  ZST_RF_EM_PO OPTIONAL
*"     REFERENCE(P_EKKO) TYPE  EKKO OPTIONAL
*"     REFERENCE(P_LIKP) TYPE  LIKP OPTIONAL
*"     REFERENCE(P_NOTRANSPORTE) TYPE  XFLAG DEFAULT ''
*"     REFERENCE(P_FIN_TRANSPORTE) TYPE  XFLAG DEFAULT ''
*"  CHANGING
*"     REFERENCE(RP_VBELN) TYPE  TMS_T_VBELN_RANGE
*"  EXCEPTIONS
*"      ERROR_CREATE_DELIVERY
*"      ERROR_SHIPMENT_CHANGE
*"      ERROR_EM
*"      ERROR_FIN_TRANSPORTE
*"      ERROR_UBICAR_WM
*"----------------------------------------------------------------------
  DATA: tl_zwm_rf_em_lect        TYPE TABLE OF zwm_rf_em_lect,
        wl_zwm_rf_em_lect        TYPE zwm_rf_em_lect,
        tl_zwm_rf_em_lect_result TYPE TABLE OF zwm_rf_em_lect,
        tl_zwm_rf_em_lect_fin    TYPE TABLE OF zwm_rf_em_lect.

  DATA: tl_zwm_rf_em_lect_wrk TYPE TABLE OF zwm_rf_em_lect,
        wl_zwm_rf_em_lect_wrk TYPE zwm_rf_em_lect.

  DATA: wl_vbsk    TYPE vbsk,
        tl_komdlgn TYPE TABLE OF komdlgn,
        tl_vbfs    TYPE TABLE OF vbfs,
        tl_vbls    TYPE TABLE OF vbls,
        tl_lips    TYPE TABLE OF lips.

  DATA: ls_header        TYPE bapishipmentheader,
        ls_header_action TYPE bapishipmentheaderaction,
        ls_item          TYPE bapishipmentitem,
        lt_item          TYPE TABLE OF bapishipmentitem,
        ls_item_action   TYPE bapishipmentitemaction,
        lt_item_action   TYPE TABLE OF bapishipmentitemaction,
        lt_return        TYPE TABLE OF bapiret2,
        ls_return        TYPE bapiret2.

  DATA: ls_vbkok    TYPE vbkok,
        vl_delivery LIKE  likp-vbeln,
        ls_mess     TYPE prott,
        lt_mess     TYPE TABLE OF prott,
        l_error     TYPE flag.

  DATA lv_lichn     TYPE lichn.


  IF p_notransporte IS INITIAL.
    SELECT *
      FROM zwm_rf_em_lect
      INTO CORRESPONDING FIELDS OF TABLE tl_zwm_rf_em_lect
      WHERE tknum = p_vttk-tknum AND
            finalizado <> 'X'.
  ELSE.
    SELECT *
      FROM zwm_rf_em_lect
      INTO CORRESPONDING FIELDS OF TABLE tl_zwm_rf_em_lect
      WHERE verur = p_likp-verur AND
*            ebeln = p_ekko-ebeln AND
            finalizado <> 'X'.
  ENDIF.
  "
  " Movemos a tabla de trabajo según nos interasa en cada punto.
  "
  CLEAR tl_zwm_rf_em_lect_wrk.
  LOOP AT tl_zwm_rf_em_lect INTO wl_zwm_rf_em_lect.
    MOVE-CORRESPONDING wl_zwm_rf_em_lect TO wl_zwm_rf_em_lect_wrk.
    CLEAR wl_zwm_rf_em_lect_wrk-bobina.
    APPEND wl_zwm_rf_em_lect_wrk TO tl_zwm_rf_em_lect_wrk.
  ENDLOOP.
  "
  " Creamos la entrega contra el pedido por el total de la cantidad leída y la asignamos al transporte.
  "
  SORT tl_zwm_rf_em_lect_wrk BY tknum verur ebeln ebelp charg.
  LOOP AT tl_zwm_rf_em_lect_wrk INTO wl_zwm_rf_em_lect.
    AT NEW tknum.
    ENDAT.
    AT NEW verur.
      CLEAR: tl_komdlgn, tl_vbfs, tl_vbls, tl_lips.
    ENDAT.
    AT NEW ebeln.
    ENDAT.
    AT NEW ebelp.
      SELECT SINGLE *
        INTO @DATA(wl_ekko)
        FROM ekko
        WHERE ebeln = @wl_zwm_rf_em_lect-ebeln.
      SELECT SINGLE *
        INTO @DATA(wl_ekpo)
        FROM ekpo
        WHERE ebeln = @wl_zwm_rf_em_lect-ebeln AND
              ebelp = @wl_zwm_rf_em_lect-ebelp.
      APPEND INITIAL LINE TO tl_komdlgn ASSIGNING FIELD-SYMBOL(<fs_komdlgn>).
*      <fs_komdlgn>-rfbel = wl_zwm_rf_em_lect-ebeln.
*      <fs_komdlgn>-rfpos = wl_zwm_rf_em_lect-ebelp.
      <fs_komdlgn>-lfdat = sy-datum.
      <fs_komdlgn>-lifnr = wl_ekko-lifnr.
      <fs_komdlgn>-arktx = wl_ekpo-txz01.
      <fs_komdlgn>-matnr = wl_ekpo-matnr.
*      <fs_komdlgn>-charg = wl_zwm_rf_em_lect-charg.
      <fs_komdlgn>-lfart = 'EL'.

* Quantity and Unit from Delivery
      <fs_komdlgn>-uebtk = wl_ekpo-uebtk.
      <fs_komdlgn>-uebto = wl_ekpo-uebto.
      <fs_komdlgn>-untto = wl_ekpo-untto.
      <fs_komdlgn>-werks = wl_ekpo-werks.
      <fs_komdlgn>-lgort = wl_ekpo-lgort.
      CLEAR <fs_komdlgn>-lfimg.
*      <fs_komdlgn>-lfimg = wl_ekpo-menge.
      <fs_komdlgn>-vrkme = wl_ekpo-meins.
      <fs_komdlgn>-meins = wl_ekpo-lmein.
      <fs_komdlgn>-umvkz = wl_ekpo-umrez.
      <fs_komdlgn>-umvkn = wl_ekpo-umren.
      <fs_komdlgn>-vgbel = wl_ekpo-ebeln.
      <fs_komdlgn>-vgpos = wl_ekpo-ebelp.
      <fs_komdlgn>-vgtyp = 'V'.
      <fs_komdlgn>-kzazu = 'X'.
      <fs_komdlgn>-verur = wl_zwm_rf_em_lect-verur.
      <fs_komdlgn>-lifex = wl_zwm_rf_em_lect-verur.

    ENDAT.
    AT NEW charg.
    ENDAT.
    "
    " Por cada registro, acumulamos.
    "
    ADD wl_zwm_rf_em_lect-menge_input TO <fs_komdlgn>-lfimg.
    AT END OF verur.
      CLEAR tl_zwm_rf_em_lect_result.
      "
      " Creamos entrega
      "
      CLEAR wl_vbsk.
      wl_vbsk-mandt = sy-mandt.
      wl_vbsk-ernam = sy-uname.
      wl_vbsk-erdat = sy-datum.
      wl_vbsk-uzeit = sy-uzeit.
      wl_vbsk-smart = 'L'.

      CALL FUNCTION 'GN_DELIVERY_CREATE'
        EXPORTING
          vbsk_i   = wl_vbsk
        IMPORTING
          vbsk_e   = wl_vbsk
        TABLES
          xkomdlgn = tl_komdlgn
          xvbfs    = tl_vbfs
          xvbls    = tl_vbls
          xxlips   = tl_lips
        EXCEPTIONS
          OTHERS   = 1.

      READ TABLE tl_vbfs ASSIGNING FIELD-SYMBOL(<fs_vbfs>) WITH KEY msgty = 'E'.
      IF sy-subrc IS INITIAL.
        ROLLBACK WORK.
        MESSAGE ID <fs_vbfs>-msgid TYPE <fs_vbfs>-msgty NUMBER <fs_vbfs>-msgno
                  WITH <fs_vbfs>-msgv1
                       <fs_vbfs>-msgv2
                       <fs_vbfs>-msgv3
                       <fs_vbfs>-msgv4
                 RAISING error_create_delivery.
      ELSE.
        COMMIT WORK AND WAIT.
        READ TABLE tl_vbls ASSIGNING FIELD-SYMBOL(<fs_vbls>) INDEX 1.

        APPEND INITIAL LINE TO rp_vbeln ASSIGNING FIELD-SYMBOL(<fs_tg_vbeln>).
        <fs_tg_vbeln>-sign = 'I'.
        <fs_tg_vbeln>-option = 'EQ'.
        <fs_tg_vbeln>-low = <fs_vbls>-vbeln_lif.
        "
        " Realizamos partición de lotes.
        " BAPI_INB_DELIVERY_CHANGE
        DATA: wl_header_data           LIKE  bapiibdlvhdrchg,
              wl_header_control        LIKE  bapiibdlvhdrctrlchg,
*              vl_delivery              LIKE  bapiibdlvhdrchg-deliv_numb,
              wl_techn_control         LIKE  bapidlvcontrol,
              tl_item_data             TYPE TABLE OF bapiibdlvitemchg,
              wl_item_data             LIKE LINE OF tl_item_data,
              tl_item_control          TYPE TABLE OF bapiibdlvitemctrlchg,
              wl_item_control          LIKE LINE OF tl_item_control,
              tl_return_inb_del_change TYPE TABLE OF bapiret2,
              vl_posnr                 TYPE lips-posnr.

        "Borramos result
        CLEAR: tl_zwm_rf_em_lect_result, wl_header_data, wl_header_control, tl_item_data, tl_item_control.

        vl_posnr = '900000'.
        LOOP AT tl_lips ASSIGNING FIELD-SYMBOL(<fs_lips>).
          CLEAR wl_item_data.
          wl_item_data-deliv_numb = <fs_lips>-vbeln.
          wl_item_data-deliv_item = <fs_lips>-posnr.
          wl_item_data-material = <fs_lips>-matnr.
          wl_item_data-fact_unit_nom = <fs_lips>-umvkz.
          wl_item_data-fact_unit_denom = <fs_lips>-umvkn.
          wl_item_data-dlv_qty = 0.
          APPEND wl_item_data TO tl_item_data.
          CLEAR wl_item_control.
          wl_item_control-deliv_numb = <fs_lips>-vbeln.
          wl_item_control-deliv_item = <fs_lips>-posnr.
          wl_item_control-chg_delqty = 'X'.
          APPEND wl_item_control TO tl_item_control.
          "
          " Desglose de lotes, 1 por cada lectura.
          "
          LOOP AT tl_zwm_rf_em_lect ASSIGNING FIELD-SYMBOL(<fs_lectura>) WHERE ebeln = <fs_lips>-vgbel AND ebelp = <fs_lips>-vgpos.
            ADD 1 TO vl_posnr.
            CLEAR wl_item_data.
            wl_item_data-deliv_numb = <fs_lips>-vbeln.
            wl_item_data-deliv_item = <fs_lips>-posnr.
            wl_item_data-material = <fs_lips>-matnr.
            IF <fs_lectura>-charg IS INITIAL.
              CONCATENATE 'L'  vl_posnr INTO wl_item_data-batch.
*            wl_item_data-batch = '77'.
            ELSE.
              wl_item_data-batch = <fs_lectura>-charg.
            ENDIF.
            wl_item_data-hieraritem = <fs_lips>-posnr.
            wl_item_data-usehieritm = 1.
            wl_item_data-dlv_qty = <fs_lectura>-menge_input.
            wl_item_data-dlv_qty_imunit = wl_item_data-dlv_qty.
            wl_item_data-fact_unit_nom = <fs_lips>-umvkz.
            wl_item_data-fact_unit_denom = <fs_lips>-umvkn.
            wl_item_data-sales_unit = <fs_lips>-meins.
            wl_item_data-base_uom = <fs_lips>-meins.
            wl_item_data-gross_wt = <fs_lectura>-menge_input.
            APPEND wl_item_data TO tl_item_data.
*            EXIT.

            APPEND INITIAL LINE TO tl_zwm_rf_em_lect_result ASSIGNING FIELD-SYMBOL(<fs_lect_result>).
            MOVE-CORRESPONDING <fs_lectura> TO <fs_lect_result>.
            <fs_lect_result>-charg_temp = wl_item_data-batch.
          ENDLOOP.
        ENDLOOP.

        wl_header_data-deliv_numb = <fs_vbls>-vbeln_lif.
        wl_header_control-deliv_numb = <fs_vbls>-vbeln_lif.
        wl_techn_control-upd_ind = 'X'.
        vl_delivery = <fs_vbls>-vbeln_lif.

        CALL FUNCTION 'BAPI_INB_DELIVERY_CHANGE'
          EXPORTING
            header_data    = wl_header_data
            header_control = wl_header_control
            delivery       = vl_delivery
*           techn_control  = wl_techn_control
          TABLES
*           HEADER_PARTNER =
*           HEADER_PARTNER_ADDR        =
*           HEADER_DEADLINES           =
            item_data      = tl_item_data
            item_control   = tl_item_control
*           ITEM_SERIAL_NO =
*           EXTENSION1     =
*           EXTENSION2     =
            return         = tl_return_inb_del_change.

        LOOP AT tl_return_inb_del_change INTO ls_return WHERE type = 'E' OR
                                               type = 'A'.
          EXIT.
        ENDLOOP.

        IF sy-subrc IS INITIAL.
          ROLLBACK WORK.
          MESSAGE ID ls_return-id TYPE ls_return-type NUMBER ls_return-number
                    WITH ls_return-message_v1
                         ls_return-message_v2
                         ls_return-message_v3
                         ls_return-message_v4
                   RAISING error_shipment_change.

        ELSE.

          COMMIT WORK AND WAIT.

          "
          " Nos guardamos la entrega y posición generada.
          "
          LOOP AT tl_zwm_rf_em_lect_result ASSIGNING <fs_lect_result>.
            <fs_lect_result>-vbeln_em = <fs_vbls>-vbeln_lif.
            SELECT SINGLE vbelp
              FROM ekes
              INTO <fs_lect_result>-posnr_em
              WHERE ebeln = <fs_lect_result>-ebeln AND
                    ebelp = <fs_lect_result>-ebelp AND
                    vbeln = <fs_vbls>-vbeln_lif AND
                    charg = <fs_lect_result>-charg_temp.

            CLEAR <fs_lect_result>-charg.
*            <fs_lect_result>-finalizado = 'X'.
            <fs_lect_result>-aenam = sy-uname.
            <fs_lect_result>-aedat = sy-datum.
            <fs_lect_result>-aezet = sy-uzeit.


            UPDATE ekes
            SET charg = ''
            WHERE ebeln = <fs_lect_result>-ebeln AND
                  ebelp = <fs_lect_result>-ebelp AND
                  vbeln = <fs_vbls>-vbeln_lif AND
                  charg = <fs_lect_result>-charg_temp.

            CLEAR: lv_lichn.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                input  = <fs_lect_result>-bobina
              IMPORTING
                output = lv_lichn.

            UPDATE lips
            SET lichn = lv_lichn
            WHERE vbeln = <fs_lect_result>-vbeln_em
              AND posnr = <fs_lect_result>-posnr_em.

          ENDLOOP.
          MODIFY zwm_rf_em_lect FROM TABLE tl_zwm_rf_em_lect_result.

          COMMIT WORK AND WAIT.

          UPDATE lips
          SET charg = ''", lichn = @lv_lichn
          WHERE vbeln = @<fs_vbls>-vbeln_lif.

          COMMIT WORK AND WAIT.
        ENDIF.

        "
        " Asignamos la nueva entrega creada al transporte.
        "
        IF p_notransporte IS INITIAL AND
          wl_zwm_rf_em_lect-tknum IS NOT INITIAL AND
          <fs_vbls>-vbeln_lif IS NOT INITIAL.
          CLEAR: ls_header, ls_header_action.
          ls_header-shipment_num = wl_zwm_rf_em_lect-tknum.
          ls_header-suppl_2 = sy-tcode.
          IF ls_header-suppl_2 = 'SE37'.
            ls_header-suppl_2 = 'ZWM_RF_004'. " Para poder hacer pruebas desde la SE37
          ENDIF.
          ls_header_action-suppl_2 = 'C'.

          CLEAR: ls_item, lt_item.
          CLEAR: ls_item_action, lt_item_action.
          ls_item-delivery = <fs_vbls>-vbeln_lif.
          APPEND ls_item TO lt_item.
          CLEAR ls_item.

          ls_item_action-delivery = 'A'.
          ls_item_action-itenerary = 'A'.
          APPEND ls_item_action TO lt_item_action.
          CLEAR ls_item_action.

          CALL FUNCTION 'BAPI_SHIPMENT_CHANGE'
            EXPORTING
              headerdata       = ls_header
              headerdataaction = ls_header_action
            TABLES
              itemdata         = lt_item
              itemdataaction   = lt_item_action
              return           = lt_return.
          LOOP AT lt_return INTO ls_return WHERE type = 'E' OR
                                                 type = 'A'.
            EXIT.
          ENDLOOP.

          IF sy-subrc IS INITIAL.
            ROLLBACK WORK.
            MESSAGE ID ls_return-id TYPE ls_return-type NUMBER ls_return-number
                      WITH ls_return-message_v1
                           ls_return-message_v2
                           ls_return-message_v3
                           ls_return-message_v4
                     RAISING error_shipment_change.

          ELSE.
            COMMIT WORK AND WAIT.
          ENDIF.
        ENDIF.

        "
        " Contabilizamos SM de la entrega creada
        "
        IF <fs_vbls>-vbeln_lif IS NOT INITIAL.
          CLEAR ls_vbkok.
          ls_vbkok-wadat_ist = sy-datum.
          ls_vbkok-vbeln_vl = <fs_vbls>-vbeln_lif.
          ls_vbkok-komue = 'X'.
          ls_vbkok-wabuc = 'X'.
          CALL FUNCTION 'HU_PACKING_REFRESH'.
          CALL FUNCTION 'LE_DELIVERY_REFRESH_BUFFER'
            EXCEPTIONS
              no_key_specified = 0
              OTHERS           = 0.
          vl_delivery = <fs_vbls>-vbeln_lif.
          CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
            EXPORTING
              vbkok_wa       = ls_vbkok
              delivery       = vl_delivery
              update_picking = 'X'
            IMPORTING
              ef_error_any   = l_error
            TABLES
              prot           = lt_mess.
*          READ TABLE lt_mess INTO ls_mess WITH KEY msgty = 'E'.
          LOOP AT lt_mess INTO ls_mess WHERE msgty = 'E' OR
                                                 msgty = 'A'.
            EXIT.
          ENDLOOP.
          IF sy-subrc IS INITIAL.
            MESSAGE ID ls_mess-msgid TYPE ls_mess-msgty NUMBER ls_mess-msgno
                      WITH ls_mess-msgv1
                           ls_mess-msgv2
                           ls_mess-msgv3
                           ls_mess-msgv4
                     RAISING error_em.
          ELSE.

            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.


***--> INI FCARDONA 13.06.2023 - 77768 - No se cierran entregas sin transporte

            LOOP AT tl_zwm_rf_em_lect_result ASSIGNING <fs_lect_result>.

              <fs_lect_result>-finalizado = abap_true.
              APPEND <fs_lect_result> TO tl_zwm_rf_em_lect_fin.

            ENDLOOP.
            MODIFY zwm_rf_em_lect FROM TABLE tl_zwm_rf_em_lect_result.

            COMMIT WORK AND WAIT.

***<-- FIN FCARDONA 13.06.2023 - 77768 - No se cierran entregas sin transporte

          ENDIF.
        ENDIF.

***--> INI FCARDONA 25.09.2023 - FCC 66998 - Varios albaranes en mismo transporte

        "Si no ha finalizado la lectura de todas las lineas no finalizamos transporte.
        IF ( lines( tl_zwm_rf_em_lect_fin ) NE lines( tl_zwm_rf_em_lect ) ).
          CONTINUE.
        ENDIF.

***<-- FIN FCARDONA 25.09.2023 - FCC 66998 - Varios albaranes en mismo transporte


        "
        " Actualizamos transporte como finalizado.
        "
        IF p_notransporte IS INITIAL AND
           wl_zwm_rf_em_lect-tknum IS NOT INITIAL AND
           p_fin_transporte IS NOT INITIAL.

          ls_header-shipment_num = wl_zwm_rf_em_lect-tknum.
          ls_header-status_plan = 'X'.
          ls_header_action-status_plan = 'C'.
          ls_header-status_load_end = 'X'.
          ls_header_action-status_load_end = 'C'.

          CALL FUNCTION 'BAPI_SHIPMENT_CHANGE'
            EXPORTING
              headerdata       = ls_header
              headerdataaction = ls_header_action
            TABLES
              return           = lt_return.

          READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
          IF sy-subrc IS INITIAL.
            ROLLBACK WORK.
            MESSAGE ID ls_return-id TYPE ls_return-type NUMBER ls_return-number
                      WITH ls_return-message_v1
                           ls_return-message_v2
                           ls_return-message_v3
                           ls_return-message_v4
                     RAISING error_fin_transporte.

          ELSE.

***--> INI FCARDONA 13.06.2023 - 77768 - No se cierran entregas sin transporte

            LOOP AT tl_zwm_rf_em_lect_result ASSIGNING <fs_lect_result>.

              <fs_lect_result>-finalizado = abap_true.

            ENDLOOP.

            MODIFY zwm_rf_em_lect FROM TABLE tl_zwm_rf_em_lect_result.

***<-- FIN FCARDONA 13.06.2023 - 77768 - No se cierran entregas sin transporte



            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.
          ENDIF.
        ENDIF.

*** --> INI FCARDONA 19.10.2023 - FCC 66998 - Error ubicación fin descarga (5)

        """" Comento por cambio de lógica. Subo a línea ~425 a SM de la entrega

*        "
*        " Actualizamos WM
*        "
*        DATA vl_vbeln TYPE  vbeln_vl.
*        vl_vbeln  = <fs_vbls>-vbeln_lif.
*        CALL FUNCTION 'Z_WM_RF_EM_UBICAR'
*          EXPORTING
*            vp_vbeln         = vl_vbeln
*          EXCEPTIONS
*            error            = 1
*            conf_ubic_cancel = 2
*            to_not_created   = 3
*            OTHERS           = 4.
*        IF sy-subrc = 0.
*          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*            EXPORTING
*              wait = 'X'.
*        ELSE.
*          ROLLBACK WORK.
*          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                    WITH sy-msgv1
*                         sy-msgv2
*                         sy-msgv3
*                         sy-msgv4
*                   RAISING error_ubicar_wm.
*        ENDIF.

**** Ubicamos

        IF ( p_notransporte IS INITIAL ).

          IF ( wl_zwm_rf_em_lect-tknum IS NOT INITIAL AND p_fin_transporte IS NOT INITIAL ).

            CALL FUNCTION 'Z_WM_RF_EM_UBICAR_W_TKNUM'
              EXPORTING
                i_tknum          = wl_zwm_rf_em_lect-tknum
              EXCEPTIONS
                error            = 1
                conf_ubic_cancel = 2
                to_not_created   = 3
                OTHERS           = 4.
            IF ( sy-subrc EQ 0 ).
              COMMIT WORK AND WAIT.
            ELSE.
              ROLLBACK WORK.
              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING error_ubicar_wm.
            ENDIF.

          ENDIF.

        ELSE.

          CALL FUNCTION 'Z_WM_RF_EM_UBICAR_W_VBELN'
            EXPORTING
              i_vbeln            = vl_delivery
            EXCEPTIONS
              error_import_data  = 1
              error_no_rf_data   = 2
              error_no_vbfa_data = 3
              error_no_mseg_data = 4
              error_utils_wm     = 5
              ot_no_creada       = 6
              OTHERS             = 7.
          IF ( sy-subrc EQ 0 ).
            COMMIT WORK AND WAIT.
          ELSE.
            ROLLBACK WORK.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING error_ubicar_wm.
          ENDIF.

        ENDIF.

*** <-- FIN FCARDONA 19.10.2023 - FCC 66998 - Error ubicación fin descarga (5)

      ENDIF.
    ENDAT.


  ENDLOOP.
ENDFUNCTION.
