FUNCTION zclasificar_lote.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_INPUT) TYPE  ZDT_NOTRO_L
*"     VALUE(I_CHARG) TYPE  CHARG_D
*"  EXPORTING
*"     VALUE(E_ERROR) TYPE  XFELD
*"  TABLES
*"      T_MESSAGES STRUCTURE  BAPIRET2
*"----------------------------------------------------------------------

  DATA: lv_aufnr TYPE aufnr.

  DATA: lv_object            TYPE objnum,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        ls_return            TYPE bapiret2.

  DATA: lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab.

  DATA: lv_plnbez TYPE afko-plnbez,
        lv_werks  TYPE werks_d.

  DATA: lv_extnumber TYPE balnrext.

  DATA: i_string      TYPE  char30,
        ld_e_float    TYPE f,
        ld_e_dec      TYPE string,
        ld_e_decimals TYPE i.


  CLEAR: lv_object, lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
  CLEAR: ls_alloc_values_num, ls_alloc_values_char, ls_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.



  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = i_input-ord_fab
    IMPORTING
      output = lv_aufnr.

  SELECT SINGLE plnbez FROM afko
    INTO lv_plnbez
    WHERE aufnr =  lv_aufnr.


  CONCATENATE lv_plnbez i_charg INTO lv_object.

  " DIAMETRO:
  CLEAR: i_string, ld_e_float, ld_e_dec, ld_e_decimals.

  i_string = i_input-diametro.
  CALL FUNCTION 'C14DG_CHAR_NUMBER_CONVERSION'
    EXPORTING
      i_string                   = i_string
    IMPORTING
      e_float                    = ld_e_float
      e_dec                      = ld_e_dec
      e_decimals                 = ld_e_decimals
    EXCEPTIONS
      wrong_characters           = 1
      first_character_wrong      = 2
      arithmetic_sign            = 3
      multiple_decimal_separator = 4
      thousandsep_in_decimal     = 5
      thousand_separator         = 6
      number_too_big             = 7
      OTHERS                     = 8.
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ENDIF.

  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_DIAMETRO1'.
  lv_werks = i_input-centro.
  ls_alloc_values_num-value_from = ld_e_dec. "ld_e_dec * 2 + zcl_secuenciador=>obtener_const_calc_radio_pope( i_werks = lv_werks ).
  APPEND ls_alloc_values_num TO lt_alloc_values_num.


  " TORNADAS:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_TORNADAS'.

  SELECT SINGLE valor FROM ztpp0033
    INTO @DATA(lv_valor)
    WHERE werks = @lv_werks AND
          id_parm = 'TORNADAS'.

  move lv_valor TO ls_alloc_values_num-value_from.

*  ls_alloc_values_num-value_from = '4'.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.

  "FECHA DE FABRICACION:
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'LOBM_HSDAT'.
  WRITE sy-datum TO ls_alloc_values_char-value_char.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

  " HORA DE FABRICACION:
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_HORA'.
  WRITE sy-uzeit TO ls_alloc_values_char-value_char.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

  " PESO:
  CLEAR: i_string, ld_e_float, ld_e_dec, ld_e_decimals.

  i_string = i_input-peso.
  CALL FUNCTION 'C14DG_CHAR_NUMBER_CONVERSION'
    EXPORTING
      i_string                   = i_string
    IMPORTING
      e_float                    = ld_e_float
      e_dec                      = ld_e_dec
      e_decimals                 = ld_e_decimals
    EXCEPTIONS
      wrong_characters           = 1
      first_character_wrong      = 2
      arithmetic_sign            = 3
      multiple_decimal_separator = 4
      thousandsep_in_decimal     = 5
      thousand_separator         = 6
      number_too_big             = 7
      OTHERS                     = 8.
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ENDIF.

  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_PESO1'.
  ls_alloc_values_num-value_from = ld_e_dec.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.

* Grabamos el Operario como característica del lote.
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_OPERARIO'.
  ls_alloc_values_char-value_char = i_input-operario.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.


  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_CONTRAMAESTRE'.
  ls_alloc_values_char-value_char = i_input-contramaestre.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

* CMS Recja etas Fase II se añade FSC->100% ya que en el nuevo proceso de reparto pulper,
* no se trataran las características(FSC) del rollo.
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_FSC_PORCENTAJE'.
  ls_alloc_values_num-value_from = 100.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.


  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_LOTE_MES'.
  ls_alloc_values_char-value_char = i_input-id_rollo_mes.
  APPEND ls_alloc_values_char TO lt_alloc_values_CHAR.


  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_object
      objecttable        = 'MCH1'
      classnum           = 'Z_ROLLO'
      classtype          = '023'
*     STATUS             = '1'
*     STANDARDCLASS      =
*     CHANGENUMBER       =
      keydate            = sy-datum
*     NO_DEFAULT_VALUES  = ' '
*   IMPORTING
*     CLASSIF_STATUS     =
    TABLES
      allocvaluesnumnew  = lt_alloc_values_num
      allocvaluescharnew = lt_alloc_values_char
      allocvaluescurrnew = lt_alloc_values_curr
      return             = lt_return.

  CLEAR ls_return.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF ls_return IS NOT INITIAL. " Error act. característica
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*       IMPORTING
*         RETURN        =
      .

    e_error = 'X'.

    APPEND LINES OF lt_return TO t_messages.


    CLEAR lv_extnumber.
    CONCATENATE 'Material' lv_plnbez 'Lote' i_charg INTO lv_extnumber SEPARATED BY space.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZSAP_MES'
        subobjeto = 'ZCLAS_LOTE'
        mensajes  = lt_return[]
        extnumber = lv_extnumber.

  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.


ENDFUNCTION.
