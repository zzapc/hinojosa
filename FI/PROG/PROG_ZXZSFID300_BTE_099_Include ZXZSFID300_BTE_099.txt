*&---------------------------------------------------------------------*
*&  Include           ZXZSFID300_BTE_099
*&---------------------------------------------------------------------*
FORM derivar_acc TABLES t_bseg    STRUCTURE bseg
                        t_bsegsub STRUCTURE bseg_subst
                        t_bkpf    STRUCTURE bkpf.

  DATA indice LIKE sy-tabix.

* Comprobamos que este activo el perform por parametrización
  GET PARAMETER ID 'BUK'  FIELD vbukrs.

  SELECT SINGLE * FROM zsfit300_bte_001
    WHERE bukrs     = vbukrs
    AND   progrname = program
    AND   formname  = 'DERIVAR_ACC'
    AND   act       = 'X'.

  CHECK sy-subrc = 0.

  READ TABLE t_bkpf INDEX 1.

  IF sy-cprog(7) EQ 'SAPF110'.

    ASSIGN ('(SAPF110S)PARXVORL') TO FIELD-SYMBOL(<parxvorl>).

    IF <parxvorl> = space."Solo ejecución de pago
*      DATA i TYPE i.
      DATA encontrado.
      CLEAR encontrado.
*      i = 1 / i.
      FIELD-SYMBOLS: <fs2> TYPE ANY TABLE.
      FIELD-SYMBOLS: <fs> TYPE ANY TABLE.
      DATA: BEGIN OF xausz2 OCCURS 5.
              INCLUDE STRUCTURE ausz2.
            DATA: END OF xausz2.
      DATA: BEGIN OF xausz3 OCCURS 300 .
              INCLUDE STRUCTURE ausz_clr.
            DATA: END OF xausz3.

      IF <fs2> IS ASSIGNED. UNASSIGN <fs2>. ENDIF.
      ASSIGN ('(SAPF110S)XAUSZ2[]') TO <fs2>.
      IF sy-subrc = 0.
        xausz2[] = <fs2>[].
      ENDIF.

      IF <fs> IS ASSIGNED. UNASSIGN <fs>. ENDIF.
      ASSIGN LOCAL COPY OF ('(SAPF110S)XAUSZ3[]') TO <fs>.
      IF sy-subrc = 0.
        xausz3[] = <fs>[].

        LOOP AT xausz3 INTO DATA(l_xausz3) WHERE koart = 'D'.
          SELECT SINGLE kkber INTO @DATA(v_kkber_aux) FROM bseg
            WHERE bukrs = @l_xausz3-bukrs
            AND belnr = @l_xausz3-belnr
            AND gjahr = @l_xausz3-gjahr
            AND buzei = @l_xausz3-buzei
            AND kunnr <> @space.
          IF sy-subrc = 0.
            SELECT SINGLE * INTO @DATA(aux_zsfit_cme_acc) FROM zsfit_cme_acc WHERE bukrs = @vbukrs AND umskz = @l_xausz3-umskz.
            IF sy-subrc = 0.
              encontrado = 'X'.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.
        LOOP AT xausz3 INTO DATA(l_xausz32) WHERE koart = 'D'.
          SELECT SINGLE kkber INTO @DATA(v_kkber_aux2) FROM bseg
            WHERE bukrs = @l_xausz32-bukrs
            AND belnr = @l_xausz32-belnr
            AND gjahr = @l_xausz32-gjahr
            AND buzei = @l_xausz32-buzei
            AND kunnr <> @space.
          IF sy-subrc = 0.
            SELECT SINGLE * INTO @DATA(aux_zsfit_cme_acc2) FROM zsfit_cme_acc WHERE bukrs = @vbukrs AND umskz = @l_xausz3-umskz.
            IF sy-subrc = 0.
              IF v_kkber_aux2 <> v_kkber_aux.
                MESSAGE w002(zsfiv_cme_acc).
              ENDIF.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF encontrado = 'X'.
          LOOP AT t_bseg ASSIGNING FIELD-SYMBOL(<bseg2>) WHERE ( koart = 'D' AND kunnr <> space ).
            indice = sy-tabix.
            CHECK <bseg2>-kkber IS INITIAL.
            <bseg2>-kkber = v_kkber_aux.
            READ TABLE t_bsegsub INDEX indice ASSIGNING FIELD-SYMBOL(<bsegsub2>).
            IF sy-subrc = 0.
              <bsegsub2>-kkber = <bseg2>-kkber.
            ENDIF.
          ENDLOOP.
        ENDIF.

      ENDIF.
    ENDIF.
  ELSE.
    LOOP AT t_bseg ASSIGNING FIELD-SYMBOL(<bseg>) WHERE ( koart = 'D' AND kunnr <> space ).
      indice = sy-tabix.
      CHECK <bseg>-kkber IS INITIAL.
      SELECT SINGLE * INTO @DATA(aux_zsfit_cme_acc3) FROM zsfit_cme_acc WHERE bukrs = @vbukrs AND umskz = @<bseg>-umskz.
      CHECK sy-subrc = 0.
      IF sy-batch = space.
        CLEAR vkkber.
        CALL FUNCTION 'ZSFI300_BTE_CLEAR_KKBER'.
        CALL SCREEN 2000 STARTING AT 5 5.
        IF sy-ucomm = 'OK2000'.
          CALL FUNCTION 'ZSFI300_BTE_GET_KKBER'
            IMPORTING
              kkber = vkkber.
          <bseg>-kkber = vkkber.
        ELSE.
          MESSAGE e001(zsfiv_cme_acc).
        ENDIF.
      ELSE.
        MESSAGE e001(zsfiv_cme_acc).
      ENDIF.
      READ TABLE t_bsegsub INDEX indice ASSIGNING FIELD-SYMBOL(<bsegsub>).
      IF sy-subrc = 0.
        <bsegsub>-kkber = <bseg>-kkber.

      ENDIF.
    ENDLOOP.

    CLEAR vkkber.
    LOOP AT t_bseg ASSIGNING <bseg> WHERE ( koart = 'D' AND kunnr <> space ).
      indice = sy-tabix.
      SELECT SINGLE * INTO @aux_zsfit_cme_acc FROM zsfit_cme_acc WHERE bukrs = @vbukrs AND umskz = @<bseg>-umskz.
      CHECK sy-subrc = 0.
      vkkber = <bseg>-kkber.
      EXIT.
    ENDLOOP.
    LOOP AT t_bseg ASSIGNING <bseg> WHERE ( koart = 'D' AND kunnr <> space ).
      indice = sy-tabix.
      SELECT SINGLE * INTO @aux_zsfit_cme_acc FROM zsfit_cme_acc WHERE bukrs = @vbukrs AND umskz = @<bseg>-umskz.
      CHECK sy-subrc = 0.
      IF vkkber <> <bseg>-kkber.
        MESSAGE w002(zsfiv_cme_acc).
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  STATUS_2000  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_2000 OUTPUT.

  SET PF-STATUS '2000'.
  SET TITLEBAR '2000'.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2000  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_2000 INPUT.

  CASE sy-ucomm.
    WHEN 'OK2000'.
      IF vkkber IS NOT INITIAL.
        LEAVE TO SCREEN 0.
      ELSE.
        MESSAGE s001(zsfiv_cme_acc).
      ENDIF.
    WHEN 'CA2000'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.
