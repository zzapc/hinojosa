*&---------------------------------------------------------------------*
*&  Include           ZSFII308_MOD
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0100 OUTPUT.

*** 1er ALV
  IF g_custom_container1 IS INITIAL.
    CREATE OBJECT g_custom_container1
      EXPORTING
        container_name = 'CUSTOM1'.
    CREATE OBJECT grid1
      EXPORTING
        i_parent = g_custom_container1.
    CREATE OBJECT g_application.
    CALL METHOD grid1->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_enter.

    g_repid = sy-repid.
    PERFORM initialize_variant USING '1'.
    PERFORM recoger_datos1.

  ELSE.
    CALL METHOD grid1->refresh_table_display.
    IF et_index_rows1[] IS NOT INITIAL.
      CALL METHOD grid1->set_selected_rows
        EXPORTING
          it_index_rows = et_index_rows1
          it_row_no     = et_row_no1.
    ENDIF.
  ENDIF.

*** 2º ALV
  IF g_custom_container2 IS INITIAL.
    CREATE OBJECT g_custom_container2
      EXPORTING
        container_name = 'CUSTOM2'.
    CREATE OBJECT grid2
      EXPORTING
        i_parent = g_custom_container2.
    CALL METHOD grid2->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_enter.
    g_repid = sy-repid.
    PERFORM initialize_variant USING '2'.
    PERFORM mostrar_datos1.
    PERFORM mostrar_datos2.
  ELSE.
    CALL METHOD grid2->refresh_table_display.
    IF et_index_rows2[] IS NOT INITIAL.
      CALL METHOD grid2->set_selected_rows
        EXPORTING
          it_index_rows = et_index_rows2
          it_row_no     = et_row_no2.
    ENDIF.
  ENDIF.

* Barra de menú
  DATA: t_ucomm LIKE sy-ucomm OCCURS 0 WITH HEADER LINE.
  CLEAR t_ucomm.
  REFRESH t_ucomm.
  CASE cont_auxi.
    WHEN 'X'.
      t_ucomm = 'AUX'. APPEND t_ucomm.
    WHEN ' '.
      t_ucomm = 'PRINC'. APPEND t_ucomm.
    WHEN OTHERS.

  ENDCASE.

  t_ucomm = 'ACTU'. APPEND t_ucomm. " YA NO SE USA LA RELACION DE DOCS
  SET PF-STATUS 'MENU' EXCLUDING t_ucomm.
* Establecer título
  DATA: cuentac TYPE hkont.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = cuenta
    IMPORTING
      output = cuentac.

  CONCATENATE TEXT-002 p_bukrs desc_soc INTO title(40) SEPARATED BY space.
  CONCATENATE TEXT-003 p_banco INTO title+40(40) SEPARATED BY space. "desc_ban
  CONCATENATE '(' cuentac ' )' INTO title+80(30).
  CONDENSE title.
  SET TITLEBAR 'TIT' WITH title.

ENDMODULE.                 " STATUS_0100  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  DATA  answer(1).
  DATA: return_code TYPE i.

  CASE g_ok_code.
    WHEN 'VISU'.
      PERFORM visualizar_destino_utilizacion.
    WHEN 'BACK' OR 'EXIT' OR 'CANCEL'. " Finish program
      IF NOT g_custom_container1 IS INITIAL.
        CALL METHOD g_custom_container1->free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc <> 0.
*          MESSAGE a000 WITH 'Error al abandonar el listado'.
          MESSAGE e006(zsfi308). "'Error al abandonar el listado'.
        ENDIF.
        CLEAR g_custom_container1.
      ENDIF.
      IF NOT g_custom_container2 IS INITIAL.
        CALL METHOD g_custom_container2->free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc <> 0.
*          MESSAGE a000 WITH 'Error al abandonar el listado'.
          MESSAGE e006(zsfi308). "'Error al abandonar el listado'.
        ENDIF.
        CLEAR g_custom_container2.
      ENDIF.
      SET SCREEN 0.
    WHEN 'CALC'.
* Calcularmos importes totales de las líneas seleccionadas
      PERFORM calcular_totales.
    WHEN 'CONT'.
* Calcularmos importes totales de las líneas seleccionadas
      PERFORM calcular_totales.
      IF desviacion = 0 AND et_index_rows1[] IS NOT INITIAL.
        fecha_com = sy-datum.
        CALL SCREEN 0202 STARTING AT 5 10.
      ELSE.
        IF desviacion <> 0.
          CLEAR: cuenta.
          CALL SCREEN 0205 STARTING AT 5 10.
          IF sy-ucomm = 'OK2'.
            CALL SCREEN 0202 STARTING AT 5 10.
          ENDIF.
        ELSEIF et_index_rows1[] IS INITIAL.
          CALL SCREEN 0202 STARTING AT 5 10.
*          MESSAGE w000 WITH 'Debe marcar alguna línea'.
          "MESSAGE e004(ZSFI308). "'Debe marcar alguna línea'.
        ENDIF.
        CLEAR: tcomp1, tcomp1[], tcomp2, tcomp2[].
      ENDIF.
* Selección automática
    WHEN 'AUTOM'.
      CALL SCREEN 0200 STARTING AT 5 10.
* Refrescar
    WHEN 'REFRESH'.
      PERFORM refrescar.
* Filtrar por importes
    WHEN 'IMPOR'.
      PERFORM filtrar_importes.
* Actualizar tabla de relación de tipos de documento
    WHEN 'ACTU'.
      CALL TRANSACTION c_trans_2.
* Imprimir formulario
    WHEN 'PRINT'.
      fecha_form = sy-datum.
      CALL SCREEN 0203 STARTING AT 5 10.
* Contabilidad auxiliar
    WHEN 'AUX'.
      CONCATENATE 'Solo datos Bco.Propio:' p_banco INTO zsfis308_a-texto SEPARATED BY space.
*     fin de add jtm 02.05.2010
      CALL SCREEN 0204 STARTING AT 5 10.
* Volver a contabilizdad principal
    WHEN 'PRINC'.
      cont_auxi = ' '.
      PERFORM refrescar.
    WHEN OTHERS.
  ENDCASE.
  CLEAR g_ok_code.

ENDMODULE.                 " USER_COMMAND_0100  INPUT

*&---------------------------------------------------------------------*
*&      Module  exit_command_0100  INPUT
*&---------------------------------------------------------------------*
MODULE exit_command_0100 INPUT.
  CASE g_ok_code.
    WHEN 'EXIT'. " Finish program
      IF NOT g_custom_container1 IS INITIAL.
        CALL METHOD g_custom_container1->free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc <> 0.
*          MESSAGE a000 WITH 'Error al abandonar el listado'.
          MESSAGE e006(zsfi308). "'Error al abandonar el listado'.
        ENDIF.
        CLEAR g_custom_container1.
      ENDIF.
      IF NOT g_custom_container2 IS INITIAL.
        CALL METHOD g_custom_container2->free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc <> 0.
*          MESSAGE a000 WITH 'Error al abandonar el listado'.
          MESSAGE e006(zsfi308). "'Error al abandonar el listado'.
        ENDIF.
        CLEAR g_custom_container2.
      ENDIF.
      LEAVE PROGRAM.
  ENDCASE.

ENDMODULE.                 " exit_command_0100  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS '200'.
  SET TITLEBAR 'T03'.

ENDMODULE.                 " STATUS_0200  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0200 INPUT.
  CASE ok_code_0200.
    WHEN 'CANCEL'.
      CLEAR ok_code_0200.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'OK' OR ' '.
* seleccion_automatica B = a partir del botón
      PERFORM seleccion_automatica USING fecha_val fecha_ope importe texto 'B'.
      CLEAR ok_code_0200.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0200  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0201  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0201 INPUT.

  CASE ok_code_0201.
    WHEN 'CANCEL'.
      CLEAR ok_code_0201.
      IF NOT g_custom_container_avi IS INITIAL.
        CALL METHOD g_custom_container_avi->free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc <> 0.
*          MESSAGE a000 WITH 'Error al abandonar el listado'.
          MESSAGE e006(zsfi308). "'Error al abandonar el listado'.
        ENDIF.
        CLEAR g_custom_container_avi.
      ENDIF.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'OK' OR ' '.
* Clasificar avisos seleccionados o reducir importe
      PERFORM recorrer_avisos.
* Compensar líneas de la primera pantalla
      PERFORM compensar.
      CLEAR ok_code_0201.
      IF NOT g_custom_container_avi IS INITIAL.
        CALL METHOD g_custom_container_avi->free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc <> 0.
*          MESSAGE a000 WITH 'Error al abandonar el listado'.
          MESSAGE e006(zsfi308). "'Error al abandonar el listado'.
        ENDIF.
        CLEAR g_custom_container_avi.
      ENDIF.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0201  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0201  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0201 OUTPUT.
****ALV avisos
  IF g_custom_container_avi IS INITIAL.
    CREATE OBJECT g_custom_container_avi
      EXPORTING
        container_name = 'CUSTOM_AVISOS'.
    CREATE OBJECT grid_avi
      EXPORTING
        i_parent = g_custom_container_avi.
    CREATE OBJECT g_application.
    CALL METHOD grid_avi->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_enter.

    g_repid = sy-repid.
*    is_variant-report = g_repid.
    PERFORM initialize_variant USING '3'.

  ENDIF.
* Mostrar avisos
  PERFORM mostrar_avisos.
  CALL METHOD grid_avi->refresh_table_display.

  SET PF-STATUS '200'.
  SET TITLEBAR 'T02'.

ENDMODULE.                 " STATUS_0201  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  exit_command_0201  INPUT
*&---------------------------------------------------------------------*
MODULE exit_command_0201 INPUT.
  CASE ok_code_0201.
    WHEN 'EXIT'. " Finish program
      IF NOT g_custom_container_avi IS INITIAL.
        CALL METHOD g_custom_container_avi->free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc <> 0.
*          MESSAGE a000 WITH 'Error al abandonar el listado'.
          MESSAGE e006(zsfi308). "'Error al abandonar el listado'.
        ENDIF.
        CLEAR g_custom_container_avi.
      ENDIF.
  ENDCASE.

ENDMODULE.                 " exit_command_0201  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0202  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0202 OUTPUT.
  SET PF-STATUS '200'.
  SET TITLEBAR 'T02'.
ENDMODULE.                 " STATUS_0202  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0202  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0202 INPUT.
  CASE ok_code_0202.
    WHEN 'CANCEL'.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'OK' OR ' '.
* Compensar líneas de la primera pantalla
      PERFORM compensar.
      CLEAR ok_code_0202.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0202  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0203  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0203 OUTPUT.
  SET PF-STATUS '200'.
  SET TITLEBAR 'T04'.
ENDMODULE.                 " STATUS_0203  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0203  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0203 INPUT.
  CASE ok_code_0203.
    WHEN 'CANCEL'.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'OK' OR ' '.
* Compensar líneas de la primera pantalla
      PERFORM imprimir.
      CLEAR ok_code_0203.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0202  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0204  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0204 OUTPUT.
  SET PF-STATUS '200'.
  SET TITLEBAR 'TAUX'.
  zsfis308_a-solo = 'X'.

ENDMODULE.                 " STATUS_0204  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0204  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0204 INPUT.
  CASE ok_code_0204.
    WHEN 'CANCEL'.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'OK' OR ' '.
      cont_auxi = 'X'.
* Borramos tabla de la derecha para mostrar ahí las partidas abiertas.
      PERFORM crear_rangos_pas.
      PERFORM obtener_pas USING 'X'.
      PERFORM mostrar_datos1.
      PERFORM mostrar_datos2.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'SEL'.
      PERFORM sel_multiple.
  ENDCASE.
  CLEAR ok_code_0204.

ENDMODULE.                 " USER_COMMAND_0204  INPUT

*&---------------------------------------------------------------------*
*&      Module  f4_agkon_low INPUT
*&---------------------------------------------------------------------*
MODULE f4_agkon_low INPUT.
  PERFORM matchcode_agkon USING 'R_AGKON-LOW'.
ENDMODULE.                 " f4_agkon_low INPUT

*&---------------------------------------------------------------------*
*&      Module  f4_agkon_high INPUT
*&---------------------------------------------------------------------*
MODULE f4_agkon_high INPUT.
  PERFORM matchcode_agkon USING 'R_AGKON-HIGH'.
ENDMODULE.                 " f4_agkon_high INPUT

*&---------------------------------------------------------------------*
*&      Module  caux_koart  INPUT
*&---------------------------------------------------------------------*
MODULE caux_agkoa INPUT.
  SET PARAMETER ID 'KOA' FIELD caux_agkoa.
ENDMODULE.                 " caux_koart  INPUT

*&---------------------------------------------------------------------*
*&      Module  modifica_rangos  INPUT
*&---------------------------------------------------------------------*
MODULE modifica_rangos INPUT.
  DATA: campo TYPE char50.
  DATA: campob TYPE char50.
  FIELD-SYMBOLS: <cb> TYPE any.
  FIELD-SYMBOLS: <cp> TYPE any.
  FIELD-SYMBOLS: <tp> TYPE STANDARD TABLE.

  DATA: BEGIN OF fieldtab OCCURS 10.
      INCLUDE STRUCTURE  catflist.
  DATA: END OF fieldtab.
  DATA: bdcdata TYPE TABLE OF bdcdata WITH HEADER LINE.

  CALL FUNCTION 'ECATT_GET_DYNPRO_FIELDLIST'
    EXPORTING
      mpool     = sy-cprog
      dynnr     = '0204'
    TABLES
      fieldtab  = fieldtab
      subscrdef = bdcdata.

*Borramos valores...
  LOOP AT fieldtab WHERE fnam CS 'LOW'.
    campo = fieldtab-fnam.
    REPLACE ALL OCCURRENCES OF '-LOW' IN campo WITH ''.
*   Guardamos el valor.
    CONCATENATE campo '[]' INTO campob.
    ASSIGN (campob) TO <tp>.
    REFRESH <tp>.
  ENDLOOP.

*Caso del Low.
  LOOP AT fieldtab WHERE fnam CS 'LOW'.
    ASSIGN (fieldtab-fnam) TO <cp>.
    CHECK <cp> IS NOT INITIAL.
    campo = fieldtab-fnam.
    REPLACE ALL OCCURRENCES OF '-LOW' IN campo WITH ''.
*   Sign
    CONCATENATE campo '-SIGN' INTO campob.
    ASSIGN (campob) TO <cp>.
    <cp> = 'I'.
*   Option
    CONCATENATE campo '-OPTION' INTO campob.
    ASSIGN (campob) TO <cp>.
    <cp> = 'EQ'.
*   Guardamos el valor.
    ASSIGN (campo) TO <cp>.
    CONCATENATE campo '[]' INTO campob.
    ASSIGN (campob) TO <tp>.

    APPEND  <cp> TO <tp>.
  ENDLOOP.

*Caso del High.
  LOOP AT fieldtab WHERE fnam CS 'HIGH'.
    ASSIGN (fieldtab-fnam) TO <cp>.
    CHECK <cp> IS NOT INITIAL.
    campo = fieldtab-fnam.
    REPLACE ALL OCCURRENCES OF '-HIGH' IN campo WITH ''.

*   Comprobamos el campo anterios
    CONCATENATE campo '-LOW' INTO campob.
    ASSIGN (campob) TO <cb>.
    IF <cb> > <cp>.
*      MESSAGE e000 WITH 'Compruebe que los valores introducidos'
*                            ' sean correctos.'.
      MESSAGE s007(zsfi308).
      EXIT.
    ENDIF.

*   Sign
    CONCATENATE campo '-SIGN' INTO campob.
    ASSIGN (campob) TO <cp>.
    <cp> = 'I'.

*   Option
    CONCATENATE campo '-OPTION' INTO campob.
    ASSIGN (campob) TO <cp>.
    <cp> = 'BT'.

*   Guardamos el valor.

    ASSIGN (campo) TO <cp>.
    CONCATENATE campo '[]' INTO campob.
    ASSIGN (campob) TO <tp>.
    REFRESH <tp>.
    APPEND  <cp> TO <tp>.
  ENDLOOP.
ENDMODULE.                 " modifica_rangos  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0205  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0205 OUTPUT.

  SET PF-STATUS '0205'.
  SET TITLEBAR  '0205'.

ENDMODULE.                 " STATUS_0205  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0205  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0205 INPUT.

  CASE sy-ucomm.
    WHEN 'OK2'.
      IF cuenta2 IS INITIAL.
        MESSAGE s398(00) WITH TEXT-004 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      DATA: l_skb1 TYPE skb1.
      SELECT SINGLE * INTO l_skb1 FROM skb1 CLIENT SPECIFIED
        WHERE mandt = sy-mandt
          AND bukrs = p_bukrs
          AND saknr = cuenta2
          AND xspeb = 'X'.
      IF sy-subrc <> 0.
*     Chequear si la cuente requiere imputacion de CECO
        DATA: l_ska1 TYPE ska1.
        CLEAR: l_ska1.
        SELECT SINGLE * INTO l_ska1 FROM ska1 CLIENT SPECIFIED
          WHERE mandt = sy-mandt
            AND ktopl = c_ktopl
            AND saknr = cuenta2
            AND gvtyp = 'X'.
        IF sy-subrc = 0.
          SELECT SINGLE * FROM cska CLIENT SPECIFIED
            WHERE mandt = sy-mandt
              AND ktopl = c_ktopl
              AND kstar = cuenta2.
          IF sy-subrc = 0.
            DATA: kokrs TYPE kokrs.
            CLEAR: kokrs.
            CALL FUNCTION 'RK_KOKRS_FIND'
              EXPORTING
                bukrs                  = p_bukrs
              IMPORTING
                kokrs                  = kokrs
              EXCEPTIONS
                assignment_not_allowed = 1
                insufficient_input     = 2
                no_kokrs_assigned      = 3
                no_kokrs_for_bukrs     = 4
                no_kokrs_for_bu_gb     = 5
                wrong_kokrs_for_bukrs  = 6
                wrong_kokrs_for_bu_gb  = 7
                OTHERS                 = 8.
            IF sy-subrc <> 0.
              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            ENDIF.

            SELECT SINGLE * FROM csks CLIENT SPECIFIED
              WHERE mandt = sy-mandt
                AND kokrs = kokrs
                AND kostl = kostl
                AND datbi >= sy-datum
                AND datab <= sy-datum.
            IF sy-subrc <> 0 AND kostl IS NOT INITIAL.
*              MESSAGE s000 WITH 'El Ceco' kostl 'no existe en Soc.CO' kokrs.
              MESSAGE s008(zsfi308) WITH kostl kokrs.
            ELSE.
*           ZGO_CUENTAS_EXCL Si está aquí admite cualquier CECO
              DATA: l_zscot300_coun_ex TYPE zscot300_coun_ex.
              SELECT SINGLE * INTO l_zscot300_coun_ex FROM zscot300_coun_ex CLIENT SPECIFIED
                WHERE mandt = sy-mandt
                  AND bukrs = p_bukrs
                  AND hkont = cuenta2.
              IF sy-subrc <> 0.
                DATA lv_tkaze LIKE tkaze.
                SELECT SINGLE * INTO lv_tkaze
                  FROM  tkaze CLIENT SPECIFIED
                       WHERE  mandt  = sy-mandt
                       AND    kokrs  = kokrs
                       AND    event  = '0001'
                       AND    activ  <> 0.
                IF sy-subrc = 0.
                  DATA: l_zscot300_ccoste TYPE zscot300_ccoste.
                  SELECT SINGLE * INTO l_zscot300_ccoste FROM zscot300_ccoste CLIENT SPECIFIED
                    WHERE mandt = sy-mandt
                      AND bukrs = p_bukrs
                      AND hkont = cuenta2
                      AND kostl = kostl.
                  IF sy-subrc = 0.
                    LEAVE TO SCREEN 0.
                  ELSE.
                    MESSAGE s009(zsfi308)."'Combinación cuenta/ceco no permitida'.
                  ENDIF.
                ELSE.
                  LEAVE TO SCREEN 0.
                ENDIF.
              ELSE.
                LEAVE TO SCREEN 0.
              ENDIF.
            ENDIF.
          ELSE.
            LEAVE TO SCREEN 0.
          ENDIF.
        ELSE.
          LEAVE TO SCREEN 0.
        ENDIF.
      ELSE.
        MESSAGE s010(zsfi308). " Cuenta Bloqueada
      ENDIF.

    WHEN 'CA2'. LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0205  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_205  INPUT
*&---------------------------------------------------------------------*
MODULE exit_205 INPUT.

  CASE sy-ucomm.
    WHEN 'CA2'. LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                 " EXIT_205  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_0990  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0990 OUTPUT.
  SET PF-STATUS '0990'.
  SET TITLEBAR '0990'.

  IF lo_area_note IS INITIAL.
    CREATE OBJECT lo_area_note
      EXPORTING
        container_name = 'TEXTO'
        repid          = sy-repid
        dynnr          = '990'.
    CREATE OBJECT lo_editor
      EXPORTING
        parent            = lo_area_note
        wordwrap_mode     = cl_gui_textedit=>wordwrap_at_fixed_position
        wordwrap_position = 65.
  ENDIF.

  CALL METHOD lo_editor->delete_text.
  lo_editor->set_readonly_mode( cl_gui_textedit=>true ).
  lo_editor->set_text_as_r3table( table = lt_n2p ).

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0990  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0990 INPUT.
  CASE sy-ucomm.
    WHEN 'OK990'. LEAVE TO SCREEN 0.
    WHEN 'CA990'. LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
