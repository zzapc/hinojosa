<?xml version="1.0" encoding="utf-8"?> <ENHO enhancement_id="ZENH_ADD_CUSTOMER_FIELDS_MM" shorttext="VL10: Añadir campos de cliente para pedidos MM" tooltype_id="HOOK_IMPL" orig_object="R3TR-V50R_VIEW-FUGR-SAPLV50R_VIEW">  <asx:abap xmlns:asx="http://www.
sap.com/abapxml" version="1.0">   <asx:values>    <IMPLS>     <ENH_HOOK_IMPL>      <SPOTNAME/>      <PROGRAMNAME>SAPLV50R_VIEW</PROGRAMNAME>      <EXTID>1</EXTID>      <ID>1</ID>      <OVERWRITE/>      <METHOD/>      <ENHMODE>D</ENHMODE>      <FULL_NAME>\
PR:SAPLV50R_VIEW\FO:POS_ITEM_FILL_USER_MM\SE:END\EI</FULL_NAME>      <SOURCE>       <item/>       <item>****** --&gt; FCC 80366 - Nuevos campos VL10 PAP</item>       <item/>       <item/>       <item>*******************************************************
***************</item>       <item>* Parámetros locales</item>       <item>**********************************************************************</item>       <item/>       <item>****** TABLES</item>       <item/>       <item>DATA: lt_vbadr TYPE TABLE OF
vbadr.</item>       <item/>       <item>**********************************************************************</item>       <item>* Validaciones</item>       <item>**********************************************************************</item>       <item/>
       <item>**********************************************************************</item>       <item>* Lógica</item>       <item>**********************************************************************</item>       <item/>       <item>****** PREPARE DATA<
/item>       <item/>       <item>APPEND is_vbadr TO lt_vbadr.</item>       <item/>       <item>****** GET/SET DATA 4 PAPER</item>       <item/>       <item>CALL FUNCTION &apos;ZFM_SD_GET_PAP_CDATA&apos;</item>       <item>EXPORTING</item>       <item>i_t_
vbadr_we          = lt_vbadr</item>       <item>CHANGING</item>       <item>c_shp_vl10_item       = cs_postab.</item>       <item/>       <item>****** GET/SET DATA 4 FOLDING</item>       <item/>       <item>CALL FUNCTION &apos;ZFM_SD_GET_FOL_CDATA&apos;</
item>       <item>EXPORTING</item>       <item>i_t_vbadr_we          = lt_vbadr</item>       <item>CHANGING</item>       <item>c_shp_vl10_item       = cs_postab.</item>       <item/>       <item>****** &quot;&quot;&quot;&quot;&quot; Comento para encapsula
r lógica en FM ZFM_SD_GET_PAP_CDATA</item>       <item>*</item>       <item>*</item>       <item>** Añadir campos de cliente:</item>       <item>*DATA: lt_mchb TYPE TABLE OF MCHB,</item>       <item>*      ls_mchb type mchb.</item>       <item>*</item>
    <item>*  DATA: lv_object            TYPE objnum,</item>       <item>*        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,</item>       <item>*        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,</item>       <item>*        lt_al
loc_values_curr TYPE tt_bapi1003_alloc_values_curr,</item>       <item>*        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,</item>       <item>*        lt_return            TYPE bapiret2_tab,</item>       <item>*        ls_alloc_values_char TYPE
bapi1003_alloc_values_char.</item>       <item>*</item>       <item>*</item>       <item>*  CLEAR: lt_mchb, lv_object, ls_alloc_values_char, lt_alloc_values_num, lt_alloc_values_char.</item>       <item>*  CLEAR: lt_alloc_values_curr, lt_return.</item>
    <item>*  REFRESH: lt_mchb, lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.</item>       <item>*  CLEAR: cs_postab-zzstock_papelera, cs_postab-zzmeins.</item>       <item>*</item>       <item>*  SELECT * INTO TABLE lt_mchb</
item>       <item>*    FROM mchb</item>       <item>*    WHERE matnr = cs_postab-matnr</item>       <item>*    AND werks = cs_postab-vstel</item>       <item>*    AND clabs &lt;&gt; 0.</item>       <item>*</item>       <item>*  IF lt_mchb[] IS NOT INITIAL
.</item>       <item>*    LOOP AT lt_mchb into ls_mchb.</item>       <item>*      CONCATENATE ls_mchb-matnr ls_mchb-charg INTO lv_object.</item>       <item>*</item>       <item>*    CALL FUNCTION &apos;BAPI_OBJCL_GETDETAIL&apos;</item>       <item>*    E
XPORTING</item>       <item>*      objectkey       = lv_object</item>       <item>*      objecttable     = &apos;MCH1&apos;</item>       <item>*      classnum        = &apos;Z_BOBINA&apos;</item>       <item>*      classtype       = &apos;023&apos;</item>
       <item>**     KEYDATE         = SY-DATUM</item>       <item>**     UNVALUATED_CHARS       = &apos; &apos;</item>       <item>**     LANGUAGE        = SY-LANGU</item>       <item>**   IMPORTING</item>       <item>**     STATUS          =</item>
 <item>**     STANDARDCLASS   =</item>       <item>*    TABLES</item>       <item>*      allocvaluesnum  = lt_alloc_values_num</item>       <item>*      allocvalueschar = lt_alloc_values_char</item>       <item>*      allocvaluescurr = lt_alloc_values_cur
r</item>       <item>*      return          = lt_return.</item>       <item>*</item>       <item>*</item>       <item>*    &quot; Chequeo Decisión de empleo:</item>       <item>*    CLEAR ls_alloc_values_char.</item>       <item>*    READ TABLE lt_alloc_v
alues_char INTO ls_alloc_values_char</item>       <item>*             WITH KEY charact = &apos;LOBM_UDCODE&apos;.</item>       <item>*    IF ls_alloc_values_char-value_neutral &lt;&gt; &apos;DE       A&apos;.</item>       <item>*      CONTINUE.</item>
   <item>*    ENDIF.</item>       <item>*</item>       <item>*    &quot; Chequeo cliente:</item>       <item>*    CLEAR ls_alloc_values_char.</item>       <item>*    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char</item>       <item>*
  WITH KEY charact = &apos;Z_CLIENTE&apos;.</item>       <item>*    IF ls_alloc_values_char-value_neutral &lt;&gt; cs_postab-kunwe.</item>       <item>*      CONTINUE.</item>       <item>*    ENDIF.</item>       <item>*</item>       <item>*    cs_postab-z
zstock_papelera = cs_postab-zzstock_papelera + ls_mchb-clabs.</item>       <item>*    IF cs_postab-zzmeins is initial.</item>       <item>*    select single meins into cs_postab-zzmeins</item>       <item>*      from mara</item>       <item>*      where m
atnr = cs_postab-matnr.</item>       <item>*    ENDIF.</item>       <item>*</item>       <item>*    ENDLOOP.</item>       <item>*  ENDIF.</item>       <item>*</item>       <item>**  ENDIF.</item>       <item>** Segunda calidad</item>       <item>*</item>
      <item>*  IF cs_postab-auart eq &apos;ZINT&apos;.</item>       <item>*</item>       <item>*    SELECT SINGLE zzsegcal FROM ekko INTO cs_postab-zzsegcal WHERE ebeln = cs_postab-vbelv .</item>       <item>*</item>       <item>*  ELSE.</item>       <ite
m>*</item>       <item>*     SELECT SINGLE zzsegcal FROM vbak INTO cs_postab-zzsegcal WHERE vbeln = cs_postab-vbelv .</item>       <item>*</item>       <item>*  ENDIF.</item>       <item>*  CLEAR cs_postab-zzsegcal_desc.</item>       <item>*  IF cs_postab
-zzsegcal IS NOT INITIAL.</item>       <item>*     SELECT SINGLE texto FROM ztsd0004 INTO cs_postab-zzsegcal_desc WHERE zzsegal = cs_postab-zzsegcal AND spras = sy-langu.</item>       <item>*  ENDIF.</item>       <item/>       <item/>       <item>*****&qu
ot;&quot;&quot;&quot;&quot; COmento todo este bloque para encapsular en FM ZFM_SD_GET_FOL_CDATA</item>       <item>*</item>       <item>*  &quot;Obtener info numero pallets y dimensiones</item>       <item>*  SELECT SINGLE cuobj INTO @DATA(lv_cuobj) FROM
marc as t1 INNER JOIN ekko as t2 on t1~werks eq t2~RESWK WHERE matnr eq @cs_postab-matnr.</item>       <item>*  IF sy-subrc = 0.</item>       <item>*    SELECT SINGLE tbqty, LENGTH, LENGTH_uom, width, width_uom, height, height_uom INTO @DATA(wa_idx) FROM
yhp_idx_td151 WHERE cuobj eq @lv_cuobj AND shuty eq &apos;UNIT&apos;.</item>       <item>*      IF sy-subrc = 0.</item>       <item>*        try.</item>       <item>*        cs_postab-zzcantpale = cs_postab-olfmng / wa_idx-tbqty.</item>       <item>*
   CATCH cx_root.</item>       <item>*          ENDTRY.</item>       <item>*          cs_postab-zzlength = wa_idx-length.</item>       <item>*          cs_postab-zzlength_uom = wa_idx-length_uom.</item>       <item>*          cs_postab-zzwidth = wa_idx-wi
dth.</item>       <item>*          cs_postab-zzwidth_uom = wa_idx-width_uom.</item>       <item>*          cs_postab-zzheight = wa_idx-height.</item>       <item>*          cs_postab-zzheight_uom = wa_idx-height_uom.</item>       <item>*      ENDIF.</item
>       <item>*  ENDIF.</item>       <item>*</item>       <item>*  DATA: l_posnr type posnr.</item>       <item>*</item>       <item>*  CLEAR: l_posnr.</item>       <item>*</item>       <item>*  SELECT SINGLE * into @DATA(l_ekkn) FROM ekkn WHERE ebeln = @
cs_postab-vbelv AND ebelp = @cs_postab-posnv.</item>       <item>*</item>       <item>*  CASE sy-tcode.</item>       <item>*    WHEN &apos;VL10X&apos;.</item>       <item>**     cambiar jtm 14.11.2022 el stock disponible ahora es asignado y sin asingar</i
tem>       <item>*      select SINGLE lgnum into @data(lgnum) from t320 where werks eq @CS_POSTAB-RESWK.</item>       <item>*      if lgnum is not INITIAL and sy-subrc eq 0.</item>       <item>*            data werks_aux type werks_d.</item>       <item>*
            werks_aux = CS_POSTAB-reswk.</item>       <item>*            CALL FUNCTION &apos;ZSWM_CALCULO_STOCK_DISPONIBLE&apos;</item>       <item>*              EXPORTING</item>       <item>*                lgnum               = lgnum</item>       <item
>*                matnr               = CS_POSTAB-matnr</item>       <item>*                werks               = werks_aux</item>       <item>*              IMPORTING</item>       <item>*                ZZLASBT_STOCK       = CS_POSTAB-zzlasbt_stock</item
>       <item>*                      .</item>       <item>*</item>       <item>*      else.</item>       <item>*        IF cs_postab-vbelv IS INITIAL.</item>       <item>*           SELECT SUM( kalab ) into @DATA(l_mska) FROM mska WHERE matnr = @cs_postab
-matnr</item>       <item>*                                                              AND werks = @cs_postab-reswk.</item>       <item>*        ELSE.</item>       <item>*           SELECT SUM( kalab ) into @l_mska FROM mska WHERE matnr = @cs_postab-mat
nr AND vbeln = @l_ekkn-vbeln AND posnr = @l_ekkn-vbelp AND werks = @cs_postab-reswk.</item>       <item>*        ENDIF.</item>       <item>**       add jtm 14.11.2022</item>       <item>*        IF sy-subrc = 0 AND l_mska IS NOT INITIAL.</item>       <ite
m>*          cs_postab-zzlasbt_stock = l_mska.</item>       <item>*        ELSE.</item>       <item>*           SELECT SINGLE * INTO @DATA(l_mard) FROM mard where matnr = @cs_postab-matnr AND werks = @cs_postab-reswk.</item>       <item>*          If sy-s
ubrc = 0.</item>       <item>*            cs_postab-zzlasbt_stock = l_mard-labst.</item>       <item>*          ENDIf.</item>       <item>*        ENDIF.</item>       <item>**     fin de add jtm 14.11.2022</item>       <item>*      endif.</item>       <it
em>**     fin de cambiar jtm 14.11.2022</item>       <item>*</item>       <item>*    &quot;JCB 17.11.22. Nº orden</item>       <item>*    &quot;Ir a EKKN con EBELN = Nº pedido compra &amp; EBELP = Nº Posición y obtener VBELN &amp; VBELP.</item>       <ite
m>*    &quot;Después, ir a EKPO con EBELN = Nº pedido compra &amp; EBELP = Nº Posición y obtener MATNR.</item>       <item>*</item>       <item>*    &quot;Después ir a AUFK con WERKS = CT_POSTAB-VSTEL (dato que aparece en el listado) &amp; KDAUF = EKKN 
VBELN &amp; KDPOS = EKKN  VBELP.</item>       <item>*    &quot;La orden es el valor del campo AUFNR. Por supuesto, debemos de tener en cuenta que la orden tenga el estatus correcto.</item>       <item>*    SELECT SINGLE aufk~aufnr</item>       <item>*
   INTO @cs_postab-zzaufnr</item>       <item>*      FROM ekkn INNER JOIN aufk ON aufk~werks = @cs_postab-vstel and</item>       <item>*                                   aufk~kdauf = ekkn~vbeln       and</item>       <item>*
     aufk~kdpos = ekkn~vbelp</item>       <item>*      WHERE ekkn~ebeln = @cs_postab-vbelv AND</item>       <item>*            ekkn~EBELP = @cs_postab-posnv and</item>       <item>*            NOT EXISTS ( SELECT * FROM jest WHERE jest~objnr = aufk~objnr
 AND</item>       <item>*                                                  jest~inact = @space   AND</item>       <item>*                                                  jest~stat  IN (&apos;I0045&apos;, &apos;I0076&apos;) ).    &quot;Cierre técnico, pet
ición de borrado</item>       <item>*</item>       <item>*</item>       <item>*    WHEN OTHERS.</item>       <item>*      SELECT SINGLE kalab into @l_mska FROM mska WHERE matnr = @cs_postab-matnr AND vbeln = @l_ekkn-vbeln AND posnr = @l_ekkn-vbelp AND wer
ks = @cs_postab-reswk.</item>       <item>**     add jtm 14.11.2022 subimos código</item>       <item>*      IF sy-subrc = 0 AND l_mska IS NOT INITIAL.</item>       <item>*        cs_postab-zzlasbt_stock = l_mska.</item>       <item>*      ELSE.</item>
    <item>*        SELECT SINGLE * INTO l_mard FROM mard where matnr = cs_postab-matnr AND werks = cs_postab-reswk.</item>       <item>*        If sy-subrc = 0.</item>       <item>*          cs_postab-zzlasbt_stock = l_mard-labst.</item>       <item>*
    ENDIf.</item>       <item>*      ENDIF.</item>       <item>**     fin de add jtm 14.11.2022</item>       <item>**</item>       <item>**</item>       <item>**  ENDCASE.</item>       <item>**   del jtm 14.11.2022</item>       <item>**  IF sy-subrc = 0 A
ND l_mska IS NOT INITIAL.</item>       <item>**    cs_postab-zzlasbt_stock = l_mska.</item>       <item>**  ELSE.</item>       <item>**     SELECT SINGLE * INTO @DATA(l_mard) FROM mard where matnr = @cs_postab-matnr AND werks = @cs_postab-reswk.</item>
    <item>**    If sy-subrc = 0.</item>       <item>**      cs_postab-zzlasbt_stock = l_mard-labst.</item>       <item>**    ENDIf.</item>       <item>**  ENDIF.</item>       <item>**  fin del jtm 14.11.2022</item>       <item>*</item>       <item>**  CON
VERSION DE STOCK A M2</item>       <item>*</item>       <item>**  CALL FUNCTION &apos;MD_CONVERT_MATERIAL_UNIT&apos;</item>       <item>**    EXPORTING</item>       <item>**      i_matnr              = cs_postab-matnr</item>       <item>**      i_in_me
           = cs_postab-meins</item>       <item>**      i_out_me             = &apos;M2&apos;</item>       <item>**      i_menge              = cs_postab-labst</item>       <item>**    IMPORTING</item>       <item>**      e_menge              = cs_postab-
zzlabst_m2</item>       <item>**    EXCEPTIONS</item>       <item>**      error_in_application = 1</item>       <item>**      error                = 2</item>       <item>**      others               = 3.</item>       <item>**  IF sy-subrc = 0.</item>
  <item>**    cs_postab-zzm2 = &apos;M2&apos;.</item>       <item>**  ELSE.</item>       <item>**    CLEAR: cs_postab-zzlabst_m2,cs_postab-zzm2.</item>       <item>**  ENDIF.</item>       <item>*</item>       <item>****** &lt;-- FCC 80366 - Nuevos campos
VL10 PAP</item>       <item/>       <item/>      </SOURCE>      <PARENT_FULL_NAME/>     </ENH_HOOK_IMPL>     <ENH_HOOK_IMPL>      <SPOTNAME/>      <PROGRAMNAME>SAPLV50R_VIEW</PROGRAMNAME>      <EXTID>2</EXTID>      <ID>2</ID>      <OVERWRITE/>      <METHO
D/>      <ENHMODE>D</ENHMODE>      <FULL_NAME>\PR:SAPLV50R_VIEW\FO:POSTAB_FILL_SHIP_TO_ADRESS\SE:END\EI</FULL_NAME>      <SOURCE>       <item>*</item>       <item>cs_postab-ZZSTRAS = is_vbadr-STRAS.</item>       <item>cs_postab-ZZLAND1 = is_vbadr-LAND1.</
item>       <item>cs_postab-ZZPSTLZ = is_vbadr-PSTLZ.</item>       <item>cs_postab-ZZORT01 = is_vbadr-ORT01.</item>       <item/>      </SOURCE>      <PARENT_FULL_NAME/>     </ENH_HOOK_IMPL>    </IMPLS>   </asx:values>  </asx:abap> </ENHO>
