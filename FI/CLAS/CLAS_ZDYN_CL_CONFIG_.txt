
class ZDYN_CL_CONFIG definition
  public
  create public .

public section.

  class-data MO type ref to ZDYN_CL_CONFIG read-only .

  methods GET_ACCOUNTS_RECV_CONFIG
    importing
      !IC_COMP_CODE type BUKRS optional
      !IC_USERNAME type BTC_EXT_SDL_USER optional
      !IC_ID type ETID optional
    exporting
      !EST_AR_CONFIG type ZDYN_ROUTTY_TARI .
  methods GET_ARCHIVE_OBJECT
    importing
      !IC_COMP_CODE type BUKRS optional
      !IC_USERNAME type BTC_EXT_SDL_USER optional
      !IC_ID type ETID optional
      !IC_API_KEY type ZDYN_DRSO_APIKEY optional
    returning
      value(RC_AR_OBJECT) type SAEOBJART .
  methods GET_DETERMINATIONS
    exporting
      !ET_CONFIG type ZDYN_LSTRU_DTM .
  methods GET_ROUTTY_EXP_CONFIG
    importing
      !IC_ID type ANY
    exporting
      !EST_RESULTS type ANY .
  methods GET_XML_TEMPLATE
    importing
      !IC_DOC_TYPE type ZDYN_WS_CXML-DOC_TYPE
    exporting
      !ET_TEMPLATE type ZDYN_LWS_XML .
  class-methods CLASS_CONSTRUCTOR .
  methods GET_SAP_TO_XML_MAPPING
    importing
      !IC_DOC_TYPE type ZDYN_WS_CXMP-DOC_TYPE
    exporting
      !ET_MAPPING type ZDYN_LWS_XMP .
protected section.
private section.
endclass. "ZDYN_CL_CONFIG definition
class ZDYN_CL_CONFIG implementation.
METHOD class_constructor.

  CREATE OBJECT mo.

ENDMETHOD.
METHOD get_accounts_recv_config.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF ic_id IS INITIAL.
    SELECT SINGLE application message_type archiv_type document_type FROM zdyn_routty_tari
       INTO CORRESPONDING FIELDS OF est_ar_config
      WHERE sysid    = sy-sysid
        AND bukrs    = ic_comp_code
        AND username = ic_username.
  ELSE.
    SELECT SINGLE application message_type out_doc_type FROM zdyn_rex_tari
     INTO CORRESPONDING FIELDS OF est_ar_config
    WHERE sysid = sy-sysid
      AND id    = ic_id.
  ENDIF.

ENDMETHOD.
METHOD get_archive_object.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF ic_id IS INITIAL AND ic_api_key IS INITIAL.
    SELECT SINGLE ar_object FROM zdyn_routty_tarc INTO rc_ar_object
      WHERE sysid    = sy-sysid
        AND bukrs    = ic_comp_code
        AND username = ic_username.
  ELSEIF ic_api_key IS NOT INITIAL.
    SELECT SINGLE ar_object FROM zdyn_rso_tarc INTO rc_ar_object
      WHERE sysid    = sy-sysid
        AND bukrs    = ic_comp_code
        AND username = ic_username
        AND apikey   = ic_api_key.
  ELSE.
    SELECT SINGLE ar_object FROM zdyn_rex_tarc INTO rc_ar_object
      WHERE sysid = sy-sysid
        AND id    = ic_id.
  ENDIF.

ENDMETHOD.
METHOD get_determinations.

  SELECT zdyn_ws_cdeta~attribute
         zdyn_ws_cdeta~sequence
         zdyn_ws_cdeta~id
         zdyn_ws_cdeta~add_flg
         zdyn_ws_cdeta~filter_flg
         zdyn_ws_cdeta~finish1_flg
         zdyn_ws_cdet~class
         zdyn_ws_cdet~method
    FROM zdyn_ws_cdeta AS zdyn_ws_cdeta
         INNER JOIN zdyn_ws_cdet AS zdyn_ws_cdet
         ON ( zdyn_ws_cdeta~attribute EQ zdyn_ws_cdet~attribute AND
              zdyn_ws_cdeta~id        EQ zdyn_ws_cdet~id )
    INTO CORRESPONDING FIELDS OF TABLE et_config.

ENDMETHOD.
METHOD get_routty_exp_config.

  DATA: lc_id TYPE etid.

  lc_id = ic_id.
  SELECT SINGLE * FROM ('ZDYN_REX_TGEN') INTO CORRESPONDING FIELDS OF est_results
                  WHERE sysid = sy-sysid
                    AND id    = lc_id.

ENDMETHOD.
METHOD get_sap_to_xml_mapping.

  DATA: lt_cust      TYPE TABLE OF zdyn_ws_cxmpc,
        lst_sys      LIKE LINE OF et_mapping,
        lt_new_lines LIKE et_mapping.
  FIELD-SYMBOLS: <st_cust> LIKE LINE OF lt_cust,
                 <st_sys>  LIKE LINE OF et_mapping.

  SELECT * FROM zdyn_ws_cxmp INTO TABLE et_mapping
    WHERE doc_type = ic_doc_type
    ORDER BY sap_alias sap_field xml_alias xml_field add_key. "#EC CI_BYPASS
  SELECT * FROM zdyn_ws_cxmpc INTO TABLE lt_cust
    WHERE doc_type = ic_doc_type
    ORDER BY sap_alias sap_field xml_alias xml_field add_key. "#EC CI_BYPASS

  LOOP AT lt_cust ASSIGNING <st_cust>.
    READ TABLE et_mapping ASSIGNING <st_sys>
      WITH KEY doc_type   = <st_cust>-doc_type
               sap_alias  = <st_cust>-sap_alias
               sap_field  = <st_cust>-sap_field
               xml_alias  = <st_cust>-xml_alias
               xml_field  = <st_cust>-xml_field
               add_key    = <st_cust>-add_key
      BINARY SEARCH.
    IF sy-subrc = 0 AND <st_sys> IS ASSIGNED.
      IF <st_cust>-remove = abap_true.
        DELETE et_mapping INDEX sy-index.
      ELSE.
        MOVE-CORRESPONDING <st_cust> TO <st_sys>.
      ENDIF.
    ELSE.
      MOVE-CORRESPONDING <st_cust> TO lst_sys.
      INSERT lst_sys INTO TABLE lt_new_lines.
    ENDIF.
  ENDLOOP.

  INSERT LINES OF lt_new_lines INTO TABLE et_mapping.
  SORT et_mapping BY sap_alias sap_field xml_alias xml_field add_key.

ENDMETHOD.
METHOD get_xml_template.

  DATA: lt_cust      TYPE TABLE OF zdyn_ws_cxmlc,
        lst_sys      LIKE LINE OF et_template,
        lt_new_lines LIKE et_template.
  FIELD-SYMBOLS: <st_cust> LIKE LINE OF lt_cust,
                 <st_sys>  LIKE LINE OF et_template.

  SELECT * FROM zdyn_ws_cxml INTO TABLE et_template
    WHERE doc_type = ic_doc_type
    ORDER BY line_num.
  SELECT * FROM zdyn_ws_cxmlc INTO TABLE lt_cust
    WHERE doc_type = ic_doc_type
    ORDER BY line_num.

  LOOP AT lt_cust ASSIGNING <st_cust>.
    READ TABLE et_template ASSIGNING <st_sys>
      WITH KEY doc_type = <st_cust>-doc_type
               line_num = <st_cust>-line_num
      BINARY SEARCH.
    IF sy-subrc = 0 AND <st_sys> IS ASSIGNED.
      IF <st_cust>-xml_out IS NOT INITIAL.
        MOVE-CORRESPONDING <st_cust> TO <st_sys>.
      ELSE.
        DELETE et_template INDEX sy-tabix.
      ENDIF.
    ELSE.
      MOVE-CORRESPONDING <st_cust> TO lst_sys.
      INSERT lst_sys INTO TABLE lt_new_lines.
    ENDIF.
  ENDLOOP.

  INSERT LINES OF lt_new_lines INTO TABLE et_template.
  SORT et_template BY line_num.

ENDMETHOD.
