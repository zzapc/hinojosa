
class ZSPP_COOIS_IF_NAVIGATION_PROFI definition
  public
  final
  create public .

public section.

  interfaces IF_NAVIGATION_PROFILE .
protected section.
private section.
endclass. "ZSPP_COOIS_IF_NAVIGATION_PROFI definition
class ZSPP_COOIS_IF_NAVIGATION_PROFI implementation.
  METHOD if_navigation_profile~user_command.

    DATA: lr_grid TYPE REF TO cl_gui_alv_grid.
    FIELD-SYMBOLS: <lt_table> TYPE STANDARD TABLE,   "to be able to do READ ... INDEX
                   <ls_table> TYPE any.
    DATA: lt_row TYPE         lvc_t_row.
    FIELD-SYMBOLS <ls_row> TYPE LINE OF lvc_t_row.
    FIELD-SYMBOLS <lv_aufnr> TYPE afko-aufnr.

    DATA: lv_num        TYPE bapi_order_key-order_number,
          wa_orderdata  TYPE bapi_pp_order_change,
          wa_orderdatax TYPE bapi_pp_order_changex,
          wa_return     TYPE bapiret2,
          it_return     TYPE bapiret2_tab,
          lv_read       TYPE bapiflag-bapiflag.

    FREE it_return.

    GET PARAMETER ID 'ZMDAT' FIELD DATA(lv_permiso).
    IF sy-subrc <> 0 OR ( sy-subrc = 0 AND lv_permiso <> abap_true ).
      MESSAGE i398(00) WITH text-002 DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    TRY.
        lr_grid ?= io_alv.
      CATCH cx_sy_move_cast_error.
        MESSAGE i888(navigation_profile) WITH 'CAST-Error.'.
    ENDTRY.

    DATA lv_resp TYPE c.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
*       titlebar       = SPACE    " Title of dialog box
*       diagnose_object       = SPACE    " Diagnosis text (maintain via SE61)
        text_question  = text-001    " Question text in dialog box
*       text_button_1  = TEXT-001    " Text on the first pushbutton
*       icon_button_1  = SPACE    " Icon on first pushbutton
*       text_button_2  = TEXT-002    " Text on the second pushbutton
*       icon_button_2  = SPACE    " Icon on second pushbutton
*       default_button = '1'    " Cursor position
*       display_cancel_button = 'X'    " Button for displaying cancel pushbutton
*       userdefined_f1_help   = SPACE    " User-Defined F1 Help
*       start_column   = 25    " Column in which the POPUP begins
*       start_row      = 6    " Line in which the POPUP begins
*       popup_type     =     " Icon type
*       iv_quickinfo_button_1 = SPACE    " Quick Info on First Pushbutton
*       iv_quickinfo_button_2 = SPACE    " Quick Info on Second Pushbutton
      IMPORTING
        answer         = lv_resp   " Return values: '1', '2', 'A'
*      TABLES
*       parameter      =     " Text transfer table for parameter in text
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    CHECK lv_resp = '1'.

    DATA lt_ord TYPE zspp_tt_update_ordenes.
    FREE lt_ord.

    lr_grid->get_selected_rows( IMPORTING et_index_rows = lt_row ).
    IF lt_row IS INITIAL.
      MESSAGE i017(navigation_profile).   "select at least a single line...
    ELSE.
      ASSIGN id_table->* TO <lt_table>.
      IF sy-subrc <> 0.
        MESSAGE i888(navigation_profile) WITH 'ASSIGN-Error.'.
      ELSE.
        LOOP AT lt_row ASSIGNING <ls_row>.
          READ TABLE <lt_table> ASSIGNING <ls_table> INDEX <ls_row>-index.
          ASSIGN COMPONENT 'AUFNR' OF STRUCTURE <ls_table> TO <lv_aufnr>.
          IF <lv_aufnr> IS ASSIGNED AND <lv_aufnr> IS NOT INITIAL.
*            SET PARAMETER ID 'ANR' FIELD <lv_aufnr>.
*            CALL TRANSACTION iv_parameter AND SKIP FIRST SCREEN.

            lv_num = <lv_aufnr>.
            lv_num = |{ lv_num ALPHA = IN }|.

            wa_orderdata-explode_new = abap_true.
*            wa_orderdata-explosion_date = sy-datum.
*            wa_orderdatax-explosion_date = abap_true.

            CLEAR wa_return.

            CALL FUNCTION 'BAPI_PRODORD_CHANGE'
              EXPORTING
                number           = lv_num
                orderdata        = wa_orderdata
                orderdatax       = wa_orderdatax
              IMPORTING
                return           = wa_return
*               order_type       =
*               order_status     =
                master_data_read = lv_read.

            APPEND wa_return TO it_return.
            IF lv_read IS NOT INITIAL AND wa_return IS INITIAL.
              APPEND INITIAL LINE TO it_return ASSIGNING FIELD-SYMBOL(<r>).
              <r>-type = 'S'.
              <r>-number = '398'.
              <r>-id = '00'.
              <r>-message_v1 = 'Lectura de datos maestros'.
              <r>-message_v2 = 'para orden'.
              <r>-message_v3 = |{ lv_num ALPHA = OUT }|.
              <r>-message_v4 = 'ejecutada con éxito.'.
            ENDIF.
            CLEAR lv_read.

            APPEND INITIAL LINE TO lt_ord ASSIGNING FIELD-SYMBOL(<orders>).
            <orders>-aufnr = lv_num.

          ELSE.
            MESSAGE i888(navigation_profile) WITH 'NO AUFNR in structure. ERROR'.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF it_return[] IS NOT INITIAL.
      DATA(lvlog) = NEW zspp_seidor_guardar_log( ).

      LOOP AT it_return ASSIGNING FIELD-SYMBOL(<f>) WHERE type <> space.

        lvlog->guardar_mensaje(
          EXPORTING
            i_type       = <f>-type
            i_id         = <f>-id
            i_number     = <f>-number
            i_message_v1 = <f>-message_v1
            i_message_v2 = <f>-message_v2
            i_message_v3 = <f>-message_v3
            i_message_v4 = <f>-message_v4
        ).

      ENDLOOP.
      IF sy-subrc = 0.
        CONSTANTS: c_object    TYPE balobj_d VALUE 'ZSPP_COHV',
                   c_subobject TYPE balsubobj VALUE 'ZSPP_COHV'.

        lvlog->guardar_log(
          EXPORTING
            objeto    = c_object
            subobjeto = c_subobject
*            extnumber =
          IMPORTING
            lognumber = DATA(lognumber)
        ).

        lvlog->mostrar_popup_log( lognumber = lognumber ).

      ENDIF.

    ENDIF.

    DATA is_stable  TYPE lvc_s_stbl.

    is_stable = 'XX'.


    lr_grid->refresh_table_display(
      EXPORTING
        is_stable      = is_stable
*        i_soft_refresh =
      EXCEPTIONS
        finished       = 1
        OTHERS         = 2
    ).
    IF sy-subrc <> 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF lt_ord[] IS NOT INITIAL.

      CALL FUNCTION 'ZSPP_ENVIO_ORDERS_BACKGROUND' IN BACKGROUND TASK AS SEPARATE UNIT
        EXPORTING
          it_aufnr = lt_ord.

    ENDIF.

  ENDMETHOD.
endclass. "ZSPP_COOIS_IF_NAVIGATION_PROFI definition
endclass. "ZSPP_COOIS_IF_NAVIGATION_PROFI implementation
