
class ZCL_UTILS_FILES definition
  public
  inheriting from ZCL_UTILS
  create public .

public section.

  class-data FILETYPES_EXCEL type STRING read-only value 'Microsoft Excel Files (*.XLS;*.XLSX;*.XLSM)|*.XLS;*.XLSX;*.XLSM|' ##NO_TEXT.
  class-data FILETYPES_ALL type STRING read-only value 'All Files (*.*)|*.*|' ##NO_TEXT.
  class-data FILETYPES_WORD type STRING read-only value 'Microsoft Word Files (*.DOC;*.DOCX;*.DOCM)|*.DOC;*.DOCX;*.DOCM|' ##NO_TEXT.
  class-data FILETYPES_TEXT type STRING read-only value 'Text Files (*.TXT)|*.TXT|' ##NO_TEXT.
  class-data FILETYPES_HTML type STRING read-only value 'HTML files (*.HTML, *.HTM)|*.HTML;*.HTM|' ##NO_TEXT.
  class-data FILETYPES_RTF type STRING read-only value 'RTF Files (*.RTF)|*.RTF|' ##NO_TEXT.
  class-data FILETYPE_POWERPOINT type STRING read-only value 'Microsoft PowerPoint Files (*PPT;*.PPTX;*.PPTM)|*PPT;*.PPTX;*.PPTM|' ##NO_TEXT.
  class-data FILETYPES_XML type STRING read-only value 'XML (*.XML)|*.XML|' ##NO_TEXT.

  methods GET_FILEPATH
    importing
      !I_FILE_FILTER type STRING
    returning
      value(E_FILEPATH) type LOCALFILE .
  methods MAP_XLS_2_SAP
    importing
      !I_FILEPATH type LOCALFILE
    exporting
      value(E_TABLE) type ANY .
  methods COPY_1_OF_MAP_XLS_2_SAP
    importing
      !I_FILEPATH type LOCALFILE
    exporting
      value(E_TABLE) type ANY .
  methods WRITE_FILE
    importing
      !I_FILEPATH type LOCALFILE
      !I_DATATABLE type ZTT_STRING
    exceptions
      NO_FILE_CREATED .
  methods MAP_XML_STRNG_2_SAP
    importing
      !I_STRING_XML type STRING
      !I_NODE_NAME type STRING
    exporting
      value(E_TABLE) type ANY
    exceptions
      NO_IVALUES
      ERROR_TRANSFORMATION .
protected section.
private section.
endclass. "ZCL_UTILS_FILES definition
class ZCL_UTILS_FILES implementation.
  METHOD COPY_1_OF_MAP_XLS_2_SAP.

    DATA: lv_tab TYPE truxs_t_text_data,
          lv_file TYPE localfile.

    FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

    ASSIGN e_table TO <fs_table>.

*    CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
*      EXPORTING
**       I_FIELD_SEPERATOR          =
*        I_LINE_HEADER              = abap_true
*        i_tab_raw_data             = lv_tab
*        i_filename                 = i_filepath
*      TABLES
*        i_tab_converted_data       = <fs_table>
*      EXCEPTIONS
*        CONVERSION_FAILED          = 1
*        OTHERS                     = 2.
*    IF sy-subrc <> 0.
**     Implement suitable error handling here
*    ENDIF.

DATA: obj_container TYPE REF TO cl_gui_custom_container.
DATA: o_error       TYPE REF TO i_oi_error,
      o_control     TYPE REF TO i_oi_container_control,
      o_document    TYPE REF TO i_oi_document_proxy,
      o_spreadsheet TYPE REF TO i_oi_spreadsheet.

DATA: t_files       TYPE filetable,
      s_files       TYPE file_table,
      v_doc_name    TYPE char256,
      v_changed     TYPE int4,
      v_rcode       TYPE int4,
      t_ranges      TYPE soi_range_list,
      s_ranges      TYPE soi_range_item,
      t_data        TYPE soi_generic_table,
      s_data        TYPE soi_generic_item,
      v_action      TYPE int4.

  CLASS c_oi_errors DEFINITION LOAD.

* Create Instance control for container
  CALL METHOD c_oi_container_control_creator=>get_container_control
       IMPORTING control = o_control
                 error   = o_error.

  IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.

* Create generic container linked to container in screen 100
  CREATE OBJECT obj_container
    EXPORTING
     container_name               = 'CONTAINER'
    EXCEPTIONS
     cntl_error                  = 1
     cntl_system_error           = 2
     create_error                = 3
     lifetime_error              = 4
     lifetime_dynpro_dynpro_link = 5
     others                      = 6.

  IF sy-subrc <> 0.
    MESSAGE e208(00) WITH 'Error creating container'.
  ENDIF.

*Establish connection to GUI Control
  CALL METHOD o_control->init_control
      EXPORTING r3_application_name = 'Excel Document Container'
                 inplace_enabled     = 'X'
                 parent              = obj_container
       IMPORTING error               = o_error.

  IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.

* Create Document Proxy
  CALL METHOD o_control->get_document_proxy
       EXPORTING document_type   = soi_doctype_excel_sheet
       IMPORTING document_proxy  = o_document
                 error           = o_error.

  IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.


  CONCATENATE 'FILE://' i_filepath INTO lv_file.

* Open Spreadsheet in SAPWORKDIR
  CALL METHOD o_document->open_document
       EXPORTING open_inplace     = 'X'
                 document_title   = 'Excel'
                 document_url     = lv_file
                 no_flush         = ''
       IMPORTING error            = o_error.

    IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.

* Open Spreadsheet interface
  CALL METHOD o_document->get_spreadsheet_interface
       EXPORTING no_flush        = ''
       IMPORTING sheet_interface = o_spreadsheet
                 error           = o_error.

  IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.
* Set selection for 1000 rows
  CALL METHOD o_spreadsheet->set_selection
               EXPORTING top   = 1
                         left  = 1
                         rows  = '1000'
                         columns = '36'.

* Define Range in spreadsheet
  CALL METHOD o_spreadsheet->insert_range
         EXPORTING name      = 'Test'
                   rows      = '1000'
                   columns   = '36'
                   no_flush  = ''
         IMPORTING error     = o_error.

  IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.

  s_ranges-name    = 'Test'.
  s_ranges-rows    = '1000'.
  s_ranges-columns = '36'.
  APPEND s_ranges TO t_ranges.

* Get data
  CALL METHOD o_spreadsheet->get_ranges_data
         EXPORTING all       = ''
                   no_flush  = ''
         IMPORTING contents  = t_data
                   error     = o_error
         CHANGING  ranges    = t_ranges.

  IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.

* Close document

* Close the document
  CALL METHOD o_document->close_document
         EXPORTING do_save     = ''
                   no_flush    = ''
         IMPORTING has_changed = v_changed
                   error       = o_error.



* Clear Document Resources
  CALL METHOD o_document->release_document
         EXPORTING no_flush = ''
         IMPORTING error    = o_error.

  IF o_error->has_failed = 'X'.
    CALL METHOD o_error->raise_message
         EXPORTING type = 'E'.
  ENDIF.


  ENDMETHOD.
  method GET_FILEPATH.

    DATA: lt_filetable    TYPE filetable,
          ls_filename     TYPE file_table,
          lv_message      TYPE sstring,
          lv_return       TYPE i,
          lv_user_action  TYPE i.

    TRY.

      "llamamos a la apertura de ficheros
      cl_gui_frontend_services=>file_open_dialog(
          EXPORTING
            file_filter    = i_file_filter
            multiselection = abap_false
          CHANGING
            file_table  = lt_filetable
            rc          = lv_return
            user_action = lv_user_action
      ).

      "Comprobamos si se ha pulsado ok
      IF ( lv_user_action EQ cl_gui_frontend_services=>action_ok ).

        "Comprobamos si se ha seleccionado un fichero
        IF lines( lt_filetable ) > 0.

          READ TABLE lt_filetable INTO ls_filename INDEX 1.
          e_filepath = ls_filename-filename.

        ENDIF.

      ENDIF.

    CATCH cx_root INTO DATA(e_error_message).

      CLEAR lv_message.
      MOVE e_error_message->get_text( ) TO lv_message.
      RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '001' i_msgid = 'ZFILE'  i_msgty = 'E' i_message = lv_message ).

    ENDTRY.

  endmethod.
  METHOD MAP_XLS_2_SAP.

    DATA: lv_tab TYPE truxs_t_text_data.

    FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

    ASSIGN e_table TO <fs_table>.

    CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
      EXPORTING
*       I_FIELD_SEPERATOR          =
        I_LINE_HEADER              = abap_true
        i_tab_raw_data             = lv_tab
        i_filename                 = i_filepath
      TABLES
        i_tab_converted_data       = <fs_table>
      EXCEPTIONS
        CONVERSION_FAILED          = 1
        OTHERS                     = 2.
    IF sy-subrc <> 0.
*     Implement suitable error handling here
    ENDIF.


  ENDMETHOD.
METHOD map_xml_strng_2_sap.

**********************************************************************
* Parámetros locales
**********************************************************************

   DATA: lt_data TYPE abap_trans_srcbind_tab.

   FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

   ASSIGN e_table TO <fs_table>.

**********************************************************************
* Validaciones
**********************************************************************

* Nombre del nodo a extraer

  IF ( i_node_name IS INITIAL ).
    RAISE no_ivalues.
  ENDIF.

* String de XML

  IF ( i_string_xml IS INITIAL ).
    RAISE no_ivalues.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

* Creo set de datos.

  lt_data = VALUE #( ( name = i_node_name   value = REF #( <fs_table>  ) ) ).

* Abre XML

  CALL TRANSFORMATION id
       SOURCE XML i_string_xml
       RESULT (lt_data).

ENDMETHOD.
  METHOD WRITE_FILE.

    FIELD-SYMBOLS: <fs_data> LIKE LINE OF i_datatable.

    TRY.

      OPEN DATASET i_filepath FOR OUTPUT IN TEXT MODE ENCODING DEFAULT WITH SMART LINEFEED.

      LOOP AT i_datatable ASSIGNING <fs_data>.

        IF ( <fs_data> IS ASSIGNED ).

          IF ( <fs_data> IS NOT INITIAL ).

            TRANSFER <fs_data> TO i_filepath.

          ENDIF.

        ENDIF.

      ENDLOOP.

      CLOSE DATASET i_filepath.

    CATCH cx_sy_file_open cx_sy_codepage_converter_init cx_sy_conversion_codepage cx_sy_file_authority cx_sy_pipes_not_supported
          cx_sy_too_many_files cx_sy_file_io cx_sy_file_open_mode cx_sy_pipe_reopen cx_sy_file_close.
      RAISE no_file_created.
    ENDTRY.

  ENDMETHOD.
