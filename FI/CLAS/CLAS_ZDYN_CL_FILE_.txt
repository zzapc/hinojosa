INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_FILE definition
  public
  create public .

public section.

  data MB_DOC_TO_FILE type ABAP_BOOL .
  data MB_FILE_TO_DOC type ABAP_BOOL .
  data MS_DOC_PATHNAME type STRING .
  data MS_DOC_FILENAME type STRING .

  methods IS_DOC_TO_FILE
    returning
      value(EB_RESULT) type ABAP_BOOL .
  methods IS_FILE_TO_DOC
    returning
      value(EB_RESULT) type ABAP_BOOL .
  methods SET_DOC_FILE_PARAMS
    importing
      !IB_DOC_TO_FILE type ABAP_BOOL optional
      !IB_FILE_TO_DOC type ABAP_BOOL optional
      !IS_DOC_PATHNAME type ANY optional
      !IS_DOC_FILENAME type ANY optional .
  class-methods GET_FILE_PATH
    importing
      !IS_FILE_PATH type STRING
    exporting
      !ES_FILE_PATH type STRING .
  class-methods GET_FILE_NAME
    importing
      !IS_FILE_NAME type STRING
    exporting
      !ES_FILE_NAME type STRING .
  methods GET_FILE_CONTENT
    importing
      !IS_FILE_NAME type ANY optional
    exporting
      !ES_CONTENT type STRING .
  methods GET_ID_FROM_FILE_NAME
    importing
      !IS_FILE_NAME type ANY optional
    returning
      value(RS_RESULT) type STRING .
  methods SAVE_DOC_IN_XML_FILE
    importing
      !IS_DOC_NO type ANY
      !IS_XML type STRING optional
      !IT_XML type ZDYN_LSTRING optional
      !IB_DATA_CLEAN type ABAP_BOOL default ABAP_FALSE
    returning
      value(EB_OK) type ABAP_BOOL
    exceptions
      ERROR_OCCURRED .
  methods SAVE_IMAGE_IN_FILE
    importing
      !IS_FILENAME type ANY
      !IT_DATA type RMPS_T_1024
    returning
      value(EB_OK) type ABAP_BOOL
    exceptions
      ERROR_OCCURRED .
  methods GET_FILE_NAME_USING_PATH
    importing
      !IC_LOGICAL_PATH type FILEPATH-PATHINTERN
      !IB_USE_BUFFER type ABAP_BOOL default ABAP_TRUE
      !IS_FILE_NAME type ANY
    exporting
      !ES_FULL_FILE_NAME type STRING
    exceptions
      ERROR_OCCURRED .
  methods STORE_FILE_ON_APPSERVER
    importing
      !IS_FILENAME type STRING
      !IT_DATA type RMPS_T_1024
    returning
      value(RB_OK) type ABAP_BOOL .
  methods STORE_FILE_ON_CLIENT
    importing
      !IS_FILENAME type ANY
      !IS_FILETYPE type ANY
      !II_LENGTH type INT4 optional
      !IT_DATA type STANDARD TABLE
    returning
      value(RB_OK) type ABAP_BOOL .
protected section.
private section.
endclass. "ZDYN_CL_FILE definition
class ZDYN_CL_FILE implementation.
METHOD get_file_content.

  DATA: ls_filename TYPE string,
        lt_content  TYPE STANDARD TABLE OF string.
  FIELD-SYMBOLS: <s_content> LIKE LINE OF lt_content.

  IF is_file_name IS INITIAL.
    ls_filename = ms_doc_filename.
  ELSE.
    ls_filename = is_file_name.
  ENDIF.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename = ls_filename
    TABLES
      data_tab = lt_content
    EXCEPTIONS
      OTHERS   = 1.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  LOOP AT lt_content ASSIGNING <s_content>.
    CONCATENATE es_content <s_content> INTO es_content.
  ENDLOOP.

ENDMETHOD.
METHOD get_file_name.

  CONSTANTS: con_dialog_open_file VALUE 'O',
             con_mask_win(20)     VALUE ',*.xml,*.xml.     ',
             con_mask_mf(20)      VALUE ',*    ,*.       '.
  DATA: tmp_winsys(2),
        lc_mask(20),
        lc_file_def   TYPE rlgrap-filename,
        lc_dir_def    TYPE rlgrap-filename,
        lc_file       TYPE rlgrap-filename,
        lc_tmp       .

  lc_file = is_file_name.

  CALL FUNCTION 'SO_SPLIT_FILE_AND_PATH'
    EXPORTING
      full_name     = lc_file
    IMPORTING
      stripped_name = lc_file_def
      file_path     = lc_dir_def
    EXCEPTIONS
      OTHERS        = 0.

  CALL FUNCTION 'WS_QUERY'
    EXPORTING
      query  = 'WS'
    IMPORTING
      return = tmp_winsys.

  IF tmp_winsys = 'MF'.
    lc_mask = con_mask_mf.
  ELSE.
    lc_mask = con_mask_win.
  ENDIF.

  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      def_filename     = lc_file_def
      def_path         = lc_dir_def
      mask             = lc_mask
      mode             = con_dialog_open_file
      title            = 'Input XML file'(001)
    IMPORTING
      filename         = es_file_name
      rc               = lc_tmp
    EXCEPTIONS
      no_batch         = 0 " error if run in offline mode
      selection_cancel = 0 " user pressed 'cancel'
      OTHERS           = 1.
  IF sy-subrc <> 0.
    CLEAR es_file_name.
  ENDIF.

ENDMETHOD.
METHOD get_file_name_using_path.

  CALL FUNCTION 'FILE_GET_NAME_USING_PATH'
    EXPORTING
      logical_path        = ic_logical_path
      use_buffer          = ib_use_buffer
      file_name           = is_file_name
    IMPORTING
      file_name_with_path = es_full_file_name
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD get_file_path.

  DATA: ls_title  TYPE string.

  ls_title = 'Output file path'(002).

  cl_gui_frontend_services=>directory_browse( EXPORTING  window_title     = ls_title
                                                         initial_folder   = is_file_path
                                              CHANGING   selected_folder  = es_file_path
                                              EXCEPTIONS OTHERS           = 0 ).

ENDMETHOD.
METHOD get_id_from_file_name.

  DATA: ls_filename TYPE string,
        li_pos      TYPE i,
        li_len      TYPE i.

  IF is_file_name IS INITIAL.
    ls_filename = ms_doc_filename.
  ELSE.
    ls_filename = is_file_name.
  ENDIF.

* Take the file name without extension, assuming it's a hex number, '-' characters are allowed between digits
  FIND FIRST OCCURRENCE OF REGEX '\b[a-fA-F0-9\-]+(?=\.\w{1,3})' IN ls_filename MATCH OFFSET li_pos MATCH LENGTH li_len.
  IF li_pos <> 0 AND li_len <> 0.
    rs_result = ls_filename+li_pos(li_len).
  ENDIF.

* fallback in case file name had unxpected format
  IF rs_result IS INITIAL.
    rs_result = 'abc123'.
  ENDIF.

ENDMETHOD.
METHOD is_doc_to_file.

  eb_result = mb_doc_to_file.

ENDMETHOD.
METHOD is_file_to_doc.

  eb_result = mb_file_to_doc.

ENDMETHOD.
METHOD save_doc_in_xml_file.

  DATA: lb_ok       TYPE abap_bool,
        ls_filename TYPE string,
        ls_doc_no   TYPE string,
        ls_xml      type string,
        lt_xml      TYPE zdyn_lstring.

  zdyn_cl_msg=>add_to_call_stack( ).

  ls_doc_no = is_doc_no.
  CONCATENATE ms_doc_pathname '/' ls_doc_no '.xml' INTO ls_filename.
  add_msg_long s 160 ba zdyn_cl_msg=>con_message_level_2 ls_filename.
* MESSAGE s160(ba).

  IF is_xml IS INITIAL.
    lt_xml = it_xml.
  ELSE.
    ls_xml = is_xml.
    APPEND ls_xml TO lt_xml.
  ENDIF.
  lb_ok = store_file_on_client( is_filename = ls_filename
                                is_filetype = 'ASC'
                                it_data     = lt_xml ).
  IF lb_ok = abap_false.
    zdyn_cl_msg=>add_long_msg( EXPORTING ic_msgty = 'E'
                                         ic_msgid = 'S#'
                                         ic_msgno = '383'
                                         is_param = ls_filename ).
*   MESSAGE e383(s#).
    RETURN.
  ENDIF.

  eb_ok = abap_true.

ENDMETHOD.
METHOD save_image_in_file.

  DATA: ls_filename TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  CONCATENATE ms_doc_pathname '/' is_filename INTO ls_filename.
  add_msg_long s 160 ba zdyn_cl_msg=>con_message_level_2 ls_filename.

  IF abap_false = store_file_on_client( is_filename = ls_filename
                                        is_filetype = 'BIN'
                                        it_data     = it_data ).
    zdyn_cl_msg=>add_long_msg( EXPORTING ic_msgty = 'E'
                                         ic_msgid = 'S#'
                                         ic_msgno = '383'
                                         is_param = ls_filename ).
*   MESSAGE e383(s#).
    RETURN.
  ENDIF.

  eb_ok = abap_true.

ENDMETHOD.
METHOD set_doc_file_params.

  zdyn_cl_msg=>add_to_call_stack( ).

  mb_doc_to_file  = ib_doc_to_file.
  mb_file_to_doc  = ib_file_to_doc.
  ms_doc_pathname = is_doc_pathname.
  ms_doc_filename = is_doc_filename.

ENDMETHOD.
METHOD STORE_FILE_ON_APPSERVER.

  FIELD-SYMBOLS:  <data> TYPE tbl1024.

  CHECK NOT is_filename IS INITIAL.
  OPEN DATASET is_filename FOR OUTPUT IN BINARY MODE.
  CHECK sy-subrc = 0.
* error in system message
  LOOP AT it_data ASSIGNING <data>.
    TRANSFER <data> TO is_filename.
  ENDLOOP.
  CLOSE DATASET is_filename.
  rb_ok = abap_true.

ENDMETHOD.
METHOD STORE_FILE_ON_CLIENT.

  DATA: lr_data     TYPE REF TO data,
        ls_filename TYPE string.
  FIELD-SYMBOLS <t_data> TYPE ANY TABLE.

  ls_filename = is_filename.

* Only to overcome this CHANGING in GUI_DOWNLOAD
  CREATE DATA lr_data LIKE it_data.
  ASSIGN lr_data->* TO <t_data>.
  <t_data> = it_data.
  cl_gui_frontend_services=>gui_download( EXPORTING  bin_filesize = ii_length
                                                     filename     = ls_filename
                                                     filetype     = is_filetype
                                          CHANGING   data_tab     = <t_data>
                                          EXCEPTIONS OTHERS       = 1 ).
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  rb_ok = abap_true.

ENDMETHOD.
