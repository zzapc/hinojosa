
class ZCL_HP_QM_INSPECTION_PLAN definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF ty_s_data,
        plkz TYPE plkz,
        plko TYPE plko_tt,
        plfl TYPE plfl_tt,
        mapl TYPE tt_mapl,
      END OF ty_s_data .
  types:
    BEGIN OF rc272_key,              "Key der Dialogtabelle INCLUDE LCZDITOP
             plnty    TYPE rc272-plnty,
             plnnr    TYPE rc272-plnnr,
             plnal    TYPE rc272-plnal,
             matnr    TYPE rc272-matnr,
             werks    TYPE rc272-werks,
             lifnr    TYPE rc272-lifnr,
             kunr     TYPE rc272-kunr,
             vbeln    TYPE rc272-vbeln,
             posnr    TYPE rc272-posnr,
             pspnr    TYPE rc272-pspnr,
             equnr    TYPE rc272-equnr,
             suchfeld TYPE rc272-suchfeld,
           END OF rc272_key .

  class-data S_CLASS_LABEL type SY-MSGID read-only value 'ZCL_HP_QM_IP' ##NO_TEXT.
  data _WERKS type WERKS_D read-only .
  data _PLNNR type PLNNR read-only .
  data _PLNAL type PLNAL read-only .
  data _PLNTY type PLNTY read-only value 'Q' ##NO_TEXT.
  data _T_IP_DATA type TY_S_DATA read-only .

  methods APPEND_MATERIALS_TO_MAPL
    importing
      !I_T_MATNR type ZTT_MATNR
      !I_STTAG type STTAG
      !I_TESTMODE type BOOLEAN optional
    returning
      value(R_T_BAPIRET2) type BAPIRET2_T .
  methods APPEND_MATERIAL_TO_MAPL
    importing
      !I_MATNR type MATNR
      !I_STTAG type STTAG
      !I_TESTMODE type BOOLEAN optional
    returning
      value(R_BAPIRET2) type BAPIRET2 .
  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_PLNNR type PLNNR
      !I_PLNAL type PLNAL
    raising
      ZCX_EXCEPTION .
  methods GET_MATNR_NOTIN_MAPL_BY_QPART
    importing
      !I_QPART type QPART
      !I_R_MATNR type MD_RANGE_T_MATNR optional
    returning
      value(R_T_MATNR) type ZTT_MATNR .
  methods SET_PLNAL
    importing
      !I_PLNAL type PLNAL .
  methods SET_PLNNR
    importing
      !I_PLNNR type PLNNR .
  methods SET_WERKS
    importing
      !I_WERKS type WERKS_D .
  PROTECTED SECTION.
private section.

  methods _BUILD_MAPL_4_MATNR
    importing
      !I_MATNR type MATNR
      !I_STTAG type STTAG
    returning
      value(R_MAPL) type MAPL .
  methods _CHECK_APPEND_MATERIAL
    importing
      !I_MATNR type MATNR
      !I_STTAG type STTAG
    returning
      value(R_BAPIRET2) type BAPIRET2 .
  methods _CHECK_PLNAL
    importing
      !I_PLNAL type PLNAL
    returning
      value(R_ISOK) type BOOLEAN .
  methods _CHECK_PLNNR
    importing
      !I_PLNNR type PLNNR
    returning
      value(R_ISOK) type BOOLEAN .
  methods _CHECK_STTAG
    importing
      !I_STTAG type STTAG
    returning
      value(R_ISOK) type BOOLEAN .
  methods _CHECK_WERKS
    importing
      !I_WERKS type WERKS_D
    returning
      value(R_ISOK) type BOOLEAN .
  methods _INSERT_MAPL_BD
    importing
      !I_MAPL type MAPL
      !I_TESTMODE type BOOLEAN optional
    returning
      value(R_BAPIRET2) type BAPIRET2 .
  methods _READ_IP_DATA .
endclass. "ZCL_HP_QM_INSPECTION_PLAN definition
class ZCL_HP_QM_INSPECTION_PLAN implementation.
METHOD _build_mapl_4_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

******

  DATA: lv_tabix TYPE syst_tabix.

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

  CHECK me->_werks IS NOT INITIAL.
  CHECK me->_plnty IS NOT INITIAL.
  CHECK me->_plnnr IS NOT INITIAL.
  CHECK me->_plnal IS NOT INITIAL.

****** IMPORT DATA

  CHECK i_matnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** MAP DATA

  r_mapl-matnr = i_matnr.
  r_mapl-werks = me->_werks.
  r_mapl-plnty = me->_plnty.
  r_mapl-plnnr = me->_plnnr.
  r_mapl-plnal = me->_plnal.
  r_mapl-datuv = i_sttag.
  r_mapl-andat = r_mapl-aedat = sy-datum.
  r_mapl-annam = r_mapl-aenam = sy-uname.

ENDMETHOD.
  METHOD _check_append_material.

**********************************************************************
* Parámetros locales
**********************************************************************

****** VBLES

  DATA: lv_msg_v1 TYPE symsgv.

****** STRUCTURES

  DATA: ls_rc27m TYPE rc27m,
        ls_mapl  TYPE mapl.

**********************************************************************
* Validaciones
**********************************************************************

****** MATNR EXIST IN WERKS

  SELECT COUNT(*) UP TO 1 ROWS
    FROM marc
   WHERE matnr EQ i_matnr
     AND werks EQ me->_werks.

  IF ( sy-subrc NE 0 ).
    MOVE i_matnr TO lv_msg_v1.
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'M3' i_number = '305' i_message_v1 = lv_msg_v1 ).
    EXIT.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  ls_mapl = me->_build_mapl_4_matnr( i_matnr = i_matnr i_sttag = i_sttag ).

****** CHECKS

***** MATNR NO LVORM

  CALL FUNCTION 'CZ_MATERIAL_READ'
    EXPORTING
      matnr     = i_matnr
      werks     = me->_werks
*     VERID     = ' '
*     DIR_INP_FLG       = ' '
*     NO_MESSAGE        = ' '
    IMPORTING
      rc27m_exp = ls_rc27m.

  IF ( ls_rc27m-lvorm IS NOT INITIAL ).
    MOVE i_matnr TO lv_msg_v1.
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'M3' i_number = '008' i_message_v1 = lv_msg_v1 ).
    EXIT.
  ENDIF.

***** MATNR NOT IN IP

  SELECT COUNT(*) UP TO 1 ROWS
    FROM mapl
   WHERE matnr EQ i_matnr
     AND werks EQ me->_werks
     AND plnty EQ me->_plnty
     AND plnnr EQ me->_plnnr
     AND plnal EQ me->_plnal
     AND datuv LE i_sttag
     AND loekz EQ abap_false.

  IF ( sy-subrc EQ 0 ).
    MOVE i_matnr TO lv_msg_v1.
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'QP' i_number = '304' i_message_v1 = lv_msg_v1 ).
    EXIT.
  ENDIF.

***** MATNR IN FUTURE DATE

  CALL FUNCTION 'CZ_BT_MAPL_FUTURE_CHK'
    EXPORTING
      mapl_imp = ls_mapl
      sttag    = i_sttag
    EXCEPTIONS
      failed   = 1.
  IF ( sy-subrc NE 0 ).
    MOVE i_matnr TO lv_msg_v1.
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'C9' i_number = '015' i_message_v1 = lv_msg_v1 ).
    EXIT.
  ENDIF.

ENDMETHOD.
METHOD _check_plnal.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

  CHECK i_plnal IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** CHECKS

***** EXISTS

  SELECT COUNT(*) UP TO 1 ROWS
    FROM plkz
   WHERE plnty EQ 'Q'
     AND plnnr EQ me->_plnnr
     AND plnal EQ i_plnal
     AND delkz EQ abap_false.

  CHECK sy-subrc EQ 0.

***** RETURN VALUE

  MOVE abap_true TO r_isok.

ENDMETHOD.
  METHOD _check_plnnr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

    CHECK i_plnnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** CHECKS

***** EXISTS

    SELECT COUNT(*) UP TO 1 ROWS
      FROM plko
     WHERE plnty EQ 'Q'
       AND plnnr EQ i_plnnr
       AND loekz EQ abap_false.

    CHECK sy-subrc EQ 0.

***** RETURN VALUE

    MOVE abap_true TO r_isok.


  ENDMETHOD.
METHOD _check_sttag.

**********************************************************************
* Parámetros locales
**********************************************************************

****** VBLES

  DATA: lv_msg    TYPE bapi_msg,
        lv_msg_v1 TYPE symsgv,
        lv_msg_v2 TYPE symsgv,
        lv_msg_v3 TYPE symsgv.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** CHECKS

***** INITIAL

  CHECK i_sttag IS NOT INITIAL.

***** GE VALID DATE

  READ TABLE me->_t_ip_data-plko INTO DATA(ls_plko) WITH KEY plnty = me->_plnty plnnr = me->_plnnr plnal = me->_plnal.
  CHECK sy-subrc EQ 0.
  CHECK i_sttag GE ls_plko-datuv.

***** RETURN OK

  MOVE abap_true TO r_isok.

ENDMETHOD.
  METHOD _check_werks.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

    CHECK i_werks IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** CHECKS

***** EXISTS

    SELECT COUNT(*) UP TO 1 ROWS
      FROM t001w
     WHERE werks EQ i_werks.

    CHECK sy-subrc EQ 0.

***** RETURN VALUE

    MOVE abap_true TO r_isok.

  ENDMETHOD.
METHOD _insert_mapl_bd.

**********************************************************************
* Parámetros locales
**********************************************************************

****** VBLES

  DATA: lv_msg    TYPE bapi_msg,
        lv_msg_v1 TYPE symsgv,
        lv_msg_v2 TYPE symsgv,
        lv_msg_v3 TYPE symsgv.

****** STRUCTURES

****** TABLES

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  READ TABLE me->_t_ip_data-mapl TRANSPORTING NO FIELDS WITH KEY matnr = i_mapl-matnr.
  IF ( sy-subrc EQ 0 ).
    MOVE i_mapl-matnr TO lv_msg_v1.
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'QP' i_number = '304' i_message_v1 = lv_msg_v1 ).
    ROLLBACK WORK.
    EXIT.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  TRY.

    INSERT INTO mapl VALUES i_mapl.

    IF ( sy-subrc EQ 0 ).

      IF ( i_testmode IS INITIAL ).
        COMMIT WORK AND WAIT.
      ELSE.
        ROLLBACK WORK.
      ENDIF.

      MOVE i_mapl-matnr TO lv_msg_v1.
      SHIFT lv_msg_v1 LEFT DELETING LEADING '0'.
      CONDENSE lv_msg_v1 NO-GAPS.
      MOVE i_mapl-plnnr TO lv_msg_v2.
      SHIFT lv_msg_v2 LEFT DELETING LEADING '0'.
      CONDENSE lv_msg_v2 NO-GAPS.
      MOVE i_mapl-werks TO lv_msg_v3.
      SHIFT lv_msg_v3 LEFT DELETING LEADING '0'.
      CONDENSE lv_msg_v3 NO-GAPS.
      MOVE text-001 TO lv_msg.
      REPLACE FIRST OCCURRENCE OF '&' IN lv_msg WITH lv_msg_v1.
      REPLACE FIRST OCCURRENCE OF '&' IN lv_msg WITH lv_msg_v2.
      REPLACE FIRST OCCURRENCE OF '&' IN lv_msg WITH lv_msg_v3.
      r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'S' i_id = zcl_hp_qm_inspection_plan=>s_class_label i_number = '001' i_message = lv_msg i_message_v1 = lv_msg_v1 i_message_v2 = lv_msg_v2 i_message_v3 = lv_msg_v3 ).
      EXIT.

    ELSE.

      MOVE i_mapl-matnr TO lv_msg_v1.
      r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'QP' i_number = '304' i_message_v1 = lv_msg_v1 ).
      ROLLBACK WORK.
      EXIT.

    ENDIF.

  CATCH cx_sy_itab_duplicate_key .

    MOVE i_mapl-matnr TO lv_msg_v1.
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'QP' i_number = '304' i_message_v1 = lv_msg_v1 ).
    ROLLBACK WORK.
    EXIT.

  ENDTRY.

ENDMETHOD.
  METHOD _read_ip_data.

**********************************************************************
* Parámetros locales
**********************************************************************

    DATA: ls_params TYPE /vcxi/vksr_s_param.

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

***** WERKS

    CHECK me->_werks IS NOT INITIAL.

***** PLNNR

    CHECK me->_plnnr IS NOT INITIAL.

***** PLNAL

    CHECK me->_plnal IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

    CLEAR: me->_t_ip_data-plkz, me->_t_ip_data-plko, me->_t_ip_data-plfl, me->_t_ip_data-mapl.

****** READ DATA

***** PLKZ

    SELECT SINGLE *
      FROM plkz
      INTO CORRESPONDING FIELDS OF me->_t_ip_data-plkz
     WHERE plnty EQ me->_plnty
       AND plnnr EQ me->_plnnr
       AND plnal EQ me->_plnal
       AND delkz EQ abap_false.

***** PLKO

    SELECT *
      FROM plko
      INTO CORRESPONDING FIELDS OF TABLE me->_t_ip_data-plko
     WHERE plnty EQ me->_plnty
       AND plnnr EQ me->_plnnr
       AND plnal EQ me->_plnal
       AND werks EQ me->_werks
       AND loekz EQ abap_false.

***** PLFL

    SELECT *
      FROM plfl
      INTO CORRESPONDING FIELDS OF TABLE me->_t_ip_data-plfl
     WHERE plnty EQ me->_plnty
       AND plnnr EQ me->_plnnr
       AND plnal EQ me->_plnal
       AND loekz EQ abap_false.

***** MAPL

    SELECT *
      FROM mapl
      INTO CORRESPONDING FIELDS OF TABLE me->_t_ip_data-mapl
     WHERE werks EQ me->_werks
       AND plnty EQ me->_plnty
       AND plnnr EQ me->_plnnr
       AND plnal EQ me->_plnal
       AND loekz EQ abap_false.

  ENDMETHOD.
METHOD append_material_to_mapl.

**********************************************************************
* Parámetros locales
**********************************************************************

****** STRUCTURES

  DATA: ls_mapl  TYPE mapl,
        ls_rc272 TYPE rc272.

****** VBLES

  DATA: lv_zkriz TYPE dzkriz .

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** MATNR

  r_bapiret2 = me->_check_append_material( i_matnr = i_matnr i_sttag = i_sttag ).
  CHECK r_bapiret2-type NE 'E'.

***** STTAG

  IF ( me->_check_sttag( i_sttag = i_sttag ) EQ abap_false ).
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zcl_hp_qm_inspection_plan=>s_class_label  i_number = '001' ).
    EXIT.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  ls_mapl = me->_build_mapl_4_matnr( i_matnr = i_matnr i_sttag = i_sttag ).

***** GET INDEX

  SELECT MAX( zkriz )
    FROM mapl
    INTO lv_zkriz
   WHERE plnty EQ me->_plnty.

  lv_zkriz = lv_zkriz + 1.

  MOVE lv_zkriz TO ls_mapl-zkriz.
  MOVE lv_zkriz TO ls_mapl-zaehl.

***** APPEND

  r_bapiret2 = me->_insert_mapl_bd( i_mapl = ls_mapl i_testmode = i_testmode ).

  IF ( r_bapiret2-type = 'S' ).
    me->_read_ip_data( ).
  ENDIF.

ENDMETHOD.
METHOD APPEND_MATERIALS_TO_MAPL.

**********************************************************************
* Parámetros locales
**********************************************************************

****** VARIABLES

  DATA: lv_msg TYPE bapi_msg.

****** STRUCTURES

  DATA: ls_bapiret2 TYPE bapiret2.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** MATNR LIST

  IF ( lines( i_t_matnr ) LE 0 ).
    MOVE text-002 TO lv_msg.
    ls_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zcl_hp_qm_inspection_plan=>s_class_label  i_number = '002' i_message = lv_msg ).
    APPEND ls_bapiret2 TO r_t_bapiret2.
    EXIT.
  ENDIF.

***** STTAG

  IF ( me->_check_sttag( i_sttag = i_sttag ) EQ abap_false ).
    ls_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zcl_hp_qm_inspection_plan=>s_class_label  i_number = '001' i_message = lv_msg ).
    APPEND ls_bapiret2 TO r_t_bapiret2.
    EXIT.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** APPEND LIST OF MATNR

  LOOP AT i_t_matnr INTO DATA(lv_matnr).

    CLEAR: ls_bapiret2.

    ls_bapiret2 = me->append_material_to_mapl( i_matnr = lv_matnr i_sttag = i_sttag i_testmode = i_testmode ).

    APPEND ls_bapiret2 TO r_t_bapiret2.

  ENDLOOP.


ENDMETHOD.
  METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

    IF ( i_werks IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_qm_inspection_plan=>s_class_label ) ).
    ENDIF.

***** PLNNR

    IF ( i_plnnr IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_qm_inspection_plan=>s_class_label ) ).
    ENDIF.

***** PLNAL

    IF ( i_plnal IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_qm_inspection_plan=>s_class_label ) ).
    ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

****** SET INSTANCE ATRIBUTES

***** WERKS

    me->set_werks( i_werks = i_werks ).
    IF ( me->_werks IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_qm_inspection_plan=>s_class_label ) ).
    ENDIF.

***** PLNNR

    me->set_plnnr( i_plnnr = i_plnnr ).
    IF ( me->_plnnr IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_qm_inspection_plan=>s_class_label ) ).
    ENDIF.

***** PLNAL

    me->set_plnal( i_plnal = i_plnal ).
    IF ( me->_plnal IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_qm_inspection_plan=>s_class_label ) ).
    ENDIF.

  ENDMETHOD.
METHOD GET_MATNR_NOTIN_MAPL_BY_QPART.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT

***** QPART

  CHECK i_qpart IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** GET DATA

  SELECT *
    FROM qmat
    INTO @DATA(ls_qmat)
   WHERE art   EQ @i_qpart
     AND werks EQ @me->_werks
     AND matnr IN @i_r_matnr.

    READ TABLE me->_t_ip_data-mapl TRANSPORTING NO FIELDS WITH KEY matnr = ls_qmat-matnr.
    IF ( sy-subrc NE 0 ).
      APPEND ls_qmat-matnr TO r_t_matnr.
    ENDIF.

  ENDSELECT.

  SORT r_t_matnr.

ENDMETHOD.
  METHOD set_plnal.

**********************************************************************
* Parámetros locales
**********************************************************************

****** VARIABLES

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

    CHECK me->_check_plnal( i_plnal = i_plnal ) EQ abap_true.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

****** SET DATA

    MOVE i_plnal TO me->_plnal.

***** READ DATA

    me->_read_ip_data( ).

  ENDMETHOD.
  METHOD set_plnnr.

**********************************************************************
* Parámetros locales
**********************************************************************

****** VARIABLES

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

    CHECK me->_check_plnnr( i_plnnr = i_plnnr ) EQ abap_true.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

****** SET DATA

    MOVE i_plnnr TO me->_plnnr.

***** READ DATA

    me->_read_ip_data( ).


  ENDMETHOD.
  METHOD set_werks.

**********************************************************************
* Parámetros locales
**********************************************************************

****** VARIABLES

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** WERKS

    CHECK me->_check_werks( i_werks = i_werks ) EQ abap_true.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

****** SET DATA

    MOVE i_werks TO me->_werks.

***** READ DATA

    me->_read_ip_data( ).

  ENDMETHOD.
