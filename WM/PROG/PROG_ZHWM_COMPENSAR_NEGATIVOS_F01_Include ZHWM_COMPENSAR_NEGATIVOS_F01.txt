*&---------------------------------------------------------------------*
*&  Include           ZHWM_COMPENSAR_NEGATIVOS_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  INIT_GLOBAL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_global_data .

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_wm_exception TYPE REF TO zcx_wm_exception,
        lo_mm_exception TYPE REF TO zcx_mm_exception.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** ZCL_UTILS_WM

  TRY .

    go_utils_wm = NEW zcl_utils_wm( i_werks = p_werks i_lgort = p_lgort ).

  CATCH zcx_wm_exception INTO lo_wm_exception.

    MESSAGE lo_wm_exception->if_t100_message~t100key-attr1 TYPE 'E'.

  CATCH zcx_mm_exception INTO lo_mm_exception.

    MESSAGE lo_mm_exception->if_t100_message~t100key-attr1 TYPE 'E'.

  ENDTRY.

*** COMMIT

  CLEAR: gv_commit.
  IF ( p_test EQ abap_false ).
    gv_commit = abap_true.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SELECT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_data .

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_r_dmatnr TYPE ztt_r_matnr,
        lt_r_dcharg TYPE ztt_r_charg,
        lt_r_dlgtyp TYPE ztt_r_lgtyp,
        lt_r_dlgpla TYPE ztt_r_lgpla.

  DATA: lt_r_omatnr TYPE ztt_r_matnr,
        lt_r_ocharg TYPE ztt_r_charg,
        lt_r_olgtyp TYPE ztt_r_lgtyp,
        lt_r_olgpla TYPE ztt_r_lgpla.

  DATA: ls_lqua     TYPE lqua,
        ls_r_matnr  LIKE LINE OF lt_r_dmatnr,
        ls_r_charg  LIKE LINE OF lt_r_dcharg.

**********************************************************************
* Validaciones
**********************************************************************

  IF ( go_utils_wm IS NOT BOUND ).

    MESSAGE text-001 TYPE 'E'.
    EXIT.

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** PREPARE SELECTION DATA

  lt_r_dmatnr[] = s_matnr[].
  lt_r_dcharg[] = s_charg[].
  lt_r_dlgtyp[] = s_dlgtyp[].
  lt_r_dlgpla[] = s_dlgpla[].

  lt_r_olgtyp[] = s_olgtyp[].
  lt_r_olgpla[] = s_olgpla[].

*** GET DESTINATION DATA (NEGATIVE STOCK)

  "Obtenemos datos destino LQUA
  gt_dlqua = go_utils_wm->get_wm_lqua_data(
    EXPORTING
*      i_t_r_lqnum   =     " Tabla rangos para cuantos
      i_t_r_lgtyp   = lt_r_dlgtyp    " Tabla de rangos para tipo de almacén
      i_t_r_lgpla   = lt_r_dlgpla    " Tabla de rango para ubicaciones
      i_t_r_matnr   = lt_r_dmatnr     " Tabla para rangos de materiales
      i_t_r_charg   = lt_r_dcharg     " Tabla de rangos para lotes
*      i_t_r_lenum   =     " Tabla para rangos de unidades de almacén
  ).

  DELETE gt_dlqua WHERE gesme GE 0.

*** GET ORIGIN DATA

  LOOP AT gt_dlqua INTO ls_lqua.

    CLEAR: ls_r_charg, ls_r_matnr.

    ls_r_matnr-sign   = ls_r_charg-sign   = 'I'.
    ls_r_matnr-option = ls_r_charg-option = 'EQ'.

    ls_r_matnr-material_low = ls_lqua-matnr.
    ls_r_charg-batch_low    = ls_lqua-charg.

    IF ( ls_r_matnr-material_low IS NOT INITIAL ).

      READ TABLE lt_r_omatnr TRANSPORTING NO FIELDS WITH KEY material_low = ls_r_matnr-material_low.
      IF ( sy-subrc NE 0 ).
        APPEND ls_r_matnr TO lt_r_omatnr.
      ENDIF.

    ENDIF.

    READ TABLE lt_r_ocharg TRANSPORTING NO FIELDS WITH KEY batch_low = ls_r_charg-batch_low.
    IF ( sy-subrc NE 0 ).
      APPEND ls_r_charg TO lt_r_ocharg.
    ENDIF.

  ENDLOOP.

  "Obtenemos datos origen LQUA
  gt_olqua = go_utils_wm->get_wm_lqua_data(
    EXPORTING
*      i_t_r_lqnum   =     " Tabla rangos para cuantos
      i_t_r_lgtyp   = lt_r_olgtyp    " Tabla de rangos para tipo de almacén
      i_t_r_lgpla   = lt_r_olgpla    " Tabla de rango para ubicaciones
      i_t_r_matnr   = lt_r_omatnr     " Tabla para rangos de materiales
      i_t_r_charg   = lt_r_ocharg     " Tabla de rangos para lotes
*      i_t_r_lenum   =     " Tabla para rangos de unidades de almacén
  ).

 DELETE gt_olqua WHERE gesme LE 0.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXECUTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM execute .

**********************************************************************
* Parámetros locales
**********************************************************************

  FIELD-SYMBOLS: <fs_olqua> TYPE lqua,
                 <fs_dlqua> TYPE lqua.

  DATA: lv_tanum        TYPE tanum,
        ls_return       TYPE bapiret2,
        lv_message      TYPE string,
        lv_ogesme       TYPE lqua_gesme,
        lv_gesme_cal    TYPE lqua_gesme,
        lv_gesme_st(18) TYPE c.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK lines( gt_dlqua ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

*** LOOP LQUA NEGATIVOS

  LOOP AT gt_dlqua ASSIGNING <fs_dlqua>.

    CLEAR: lv_tanum, lv_message, ls_return, lv_gesme_cal, lv_ogesme.

    "Chequeamos que el valor sea negativo
    CHECK <fs_dlqua>-gesme LT 0.

    "Movemos cantidad negativa a positiva
    lv_ogesme = ABS( <fs_dlqua>-gesme ).

    "Comprobamos si existe cantidad exacta en bulto.
    READ TABLE gt_olqua ASSIGNING <fs_olqua> WITH KEY lgnum = <fs_dlqua>-lgnum werks = <fs_dlqua>-werks lgort = <fs_dlqua>-lgort matnr = <fs_dlqua>-matnr
                                                      charg = <fs_dlqua>-charg sobkz = <fs_dlqua>-sobkz sonum = <fs_dlqua>-sonum "letyp = <fs_dlqua>-letyp
                                                      gesme = lv_ogesme        meins = <fs_dlqua>-meins.
    IF ( sy-subrc EQ 0 ). "Existe bulto con cantidad exacta.

      lv_tanum = go_utils_wm->create_to_move_su(
        EXPORTING
          i_lenum     = <fs_olqua>-lenum    " Número de unidad de almacén
          i_letyp     = <fs_olqua>-letyp    " Tipo de unidad de almacén
          i_new_lgtyp = <fs_dlqua>-lgtyp    " Tipo almacén
          i_new_lgpla = <fs_dlqua>-lgpla    " Ubicación
          i_commit    = gv_commit    " Guardar cambios
        IMPORTING
          e_return    = ls_return    " Parámetro de retorno
      ).

      "Recalculo cantidad destino y pinto resultado
      IF ( lv_tanum IS NOT INITIAL ).

        <fs_dlqua>-gesme = <fs_dlqua>-gesme + <fs_olqua>-gesme.

        CLEAR: lv_gesme_st, lv_message.
        CONCATENATE: 'OT:' lv_tanum INTO lv_message SEPARATED BY space.
        WRITE: / lv_message.

        CLEAR: lv_message.
        MOVE <fs_olqua>-gesme TO lv_gesme_st.
        CONDENSE lv_gesme_st NO-GAPS.
        CONCATENATE: 'ORIGEN:' <fs_olqua>-matnr <fs_olqua>-charg <fs_olqua>-lgtyp <fs_olqua>-lgpla <fs_olqua>-bestq <fs_olqua>-sobkz <fs_olqua>-sonum lv_gesme_st <fs_olqua>-meins INTO lv_message SEPARATED BY space.
        WRITE: / lv_message.

        CLEAR: lv_gesme_st, lv_message.
        MOVE <fs_dlqua>-gesme TO lv_gesme_st.
        CONDENSE lv_gesme_st NO-GAPS.
        CONCATENATE: 'DESTINO:' <fs_dlqua>-matnr <fs_dlqua>-charg <fs_dlqua>-lgtyp <fs_dlqua>-lgpla <fs_dlqua>-bestq <fs_dlqua>-sobkz <fs_dlqua>-sonum lv_gesme_st <fs_dlqua>-meins INTO lv_message SEPARATED BY space.
        WRITE: / lv_message.

        "Eliminamos registro pq ya lo hemos consumido
        DELETE gt_olqua WHERE lgnum = <fs_olqua>-lgnum AND lqnum = <fs_olqua>-lqnum.

      ELSE.

        CLEAR: lv_gesme_st, lv_message.
        CONCATENATE: 'ERROR:' ls_return-message INTO lv_message SEPARATED BY space.
        WRITE: / lv_message.

        CLEAR: lv_gesme_st, lv_message.
        MOVE <fs_olqua>-gesme TO lv_gesme_st.
        CONDENSE lv_gesme_st NO-GAPS.
        CONCATENATE: 'ORIGEN:' <fs_olqua>-matnr <fs_olqua>-charg <fs_olqua>-lgtyp <fs_olqua>-lgpla <fs_olqua>-bestq <fs_olqua>-sobkz <fs_olqua>-sonum lv_gesme_st <fs_olqua>-meins INTO lv_message SEPARATED BY space.
        WRITE: / lv_message.

        CLEAR: lv_gesme_st, lv_message.
        MOVE <fs_dlqua>-gesme TO lv_gesme_st.
        CONDENSE lv_gesme_st NO-GAPS.
        CONCATENATE: 'DESTINO:' <fs_dlqua>-matnr <fs_dlqua>-charg <fs_dlqua>-lgtyp <fs_dlqua>-lgpla <fs_dlqua>-bestq <fs_dlqua>-sobkz <fs_dlqua>-sonum lv_gesme_st <fs_dlqua>-meins INTO lv_message SEPARATED BY space.
        WRITE: / lv_message.

      ENDIF.

      SKIP.

      CONTINUE.

    ELSE. "No existe bulto con cantidad exacta.

      "Buscamos UA para compensar.
      LOOP AT gt_olqua ASSIGNING <fs_olqua>.

        CLEAR: ls_return, lv_tanum, lv_message, lv_gesme_cal.

        "Chequeamos que haya cantidad a compensar.
        CHECK <fs_dlqua>-gesme LT 0.

        "Chequeo que la UA sea compatible
        CHECK <fs_olqua>-lgnum = <fs_dlqua>-lgnum AND <fs_olqua>-werks = <fs_dlqua>-werks AND <fs_olqua>-lgort = <fs_dlqua>-lgort
          AND <fs_olqua>-matnr = <fs_dlqua>-matnr AND <fs_olqua>-charg = <fs_dlqua>-charg AND <fs_olqua>-sobkz = <fs_dlqua>-sobkz
          AND <fs_olqua>-sonum = <fs_dlqua>-sonum "AND <fs_olqua>-letyp = <fs_dlqua>-letyp
          AND <fs_olqua>-meins = <fs_dlqua>-meins.

        "Separamos lógicas:
        " 1. Cantidad destino mayor que cantidad origen
        " 2. Cantidad destino menor que cantidad origen
        IF ( ABS( <fs_dlqua>-gesme ) GT <fs_olqua>-gesme ).

          "CASO 1: Muevo toda la UA y continúo LOOP

          lv_tanum = go_utils_wm->create_to_single(
             EXPORTING i_bwlvs = '999'            i_matnr = <fs_olqua>-matnr i_charg = <fs_olqua>-charg i_bestq = <fs_olqua>-bestq
                       i_sobkz = <fs_olqua>-sobkz i_sonum = <fs_olqua>-sonum i_letyp = <fs_olqua>-letyp                             "stocks especiales
                       i_anfme = <fs_olqua>-gesme i_altme = <fs_olqua>-meins                                                        "cantidad
                       i_vltyp = <fs_olqua>-lgtyp i_vlpla = <fs_olqua>-lgpla i_vlenr = <fs_olqua>-lenum                             "origen
                       i_nltyp = <fs_dlqua>-lgtyp i_nlpla = <fs_dlqua>-lgpla i_nlenr = <fs_dlqua>-lenum                             "destino
                       i_commit = gv_commit
             IMPORTING
               e_return = ls_return    " Parámetro de retorno
           ).

          "Recalculo cantidad destino y pinto resultado
          IF ( lv_tanum IS NOT INITIAL ).

            <fs_dlqua>-gesme = <fs_dlqua>-gesme + <fs_olqua>-gesme.

            CLEAR: lv_gesme_st, lv_message.
            CONCATENATE: 'OT:' lv_tanum INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_message.
            MOVE <fs_olqua>-gesme TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'ORIGEN:' <fs_olqua>-matnr <fs_olqua>-charg <fs_olqua>-lgtyp <fs_olqua>-lgpla <fs_olqua>-bestq <fs_olqua>-sobkz <fs_olqua>-sonum lv_gesme_st <fs_olqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_gesme_st, lv_message.
            MOVE <fs_dlqua>-gesme TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'DESTINO:' <fs_dlqua>-matnr <fs_dlqua>-charg <fs_dlqua>-lgtyp <fs_dlqua>-lgpla <fs_dlqua>-bestq <fs_dlqua>-sobkz <fs_dlqua>-sonum lv_gesme_st <fs_dlqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.
            SKIP.

            "Eliminamos registro pq ya lo hemos consumido
            DELETE gt_olqua WHERE lgnum = <fs_olqua>-lgnum AND lqnum = <fs_olqua>-lqnum.

          ELSE.

            CLEAR: lv_gesme_st, lv_message.
            CONCATENATE: 'ERROR:' ls_return-message INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_gesme_st, lv_message.
            MOVE <fs_olqua>-gesme TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'ORIGEN:' <fs_olqua>-matnr <fs_olqua>-charg <fs_olqua>-lgtyp <fs_olqua>-lgpla <fs_olqua>-bestq <fs_olqua>-sobkz <fs_olqua>-sonum lv_gesme_st <fs_olqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_gesme_st, lv_message.
            MOVE <fs_dlqua>-gesme TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'DESTINO:' <fs_dlqua>-matnr <fs_dlqua>-charg <fs_dlqua>-lgtyp <fs_dlqua>-lgpla <fs_dlqua>-bestq <fs_dlqua>-sobkz <fs_dlqua>-sonum lv_gesme_st <fs_dlqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.
            SKIP.

          ENDIF.

        ELSE.

          "CASO 2: Muevo cantidad parcial de UA (cantidad destino) y salgo de LOOP.

          lv_gesme_cal = ABS( <fs_dlqua>-gesme ).

          lv_tanum = go_utils_wm->create_to_single(
             EXPORTING i_bwlvs = '999'            i_matnr = <fs_olqua>-matnr i_charg = <fs_olqua>-charg i_bestq = <fs_olqua>-bestq
                       i_sobkz = <fs_olqua>-sobkz i_sonum = <fs_olqua>-sonum i_letyp = <fs_olqua>-letyp                             "stocks especiales
                       i_anfme = lv_gesme_cal i_altme = <fs_olqua>-meins                                                            "cantidad
                       i_vltyp = <fs_olqua>-lgtyp i_vlpla = <fs_olqua>-lgpla i_vlenr = <fs_olqua>-lenum                             "origen
                       i_nltyp = <fs_dlqua>-lgtyp i_nlpla = <fs_dlqua>-lgpla i_nlenr = <fs_dlqua>-lenum                             "destino
                       i_commit = gv_commit
             IMPORTING
               e_return = ls_return    " Parámetro de retorno
           ).

          "Recalculo cantidad destino y pinto resultado
          IF ( lv_tanum IS NOT INITIAL ).

            <fs_dlqua>-gesme = <fs_dlqua>-gesme + lv_gesme_cal.

            CLEAR: lv_gesme_st, lv_message.
            CONCATENATE: 'OT:' lv_tanum INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_gesme_st, lv_message.
            MOVE lv_gesme_cal TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'ORIGEN:' <fs_olqua>-matnr <fs_olqua>-charg <fs_olqua>-lgtyp <fs_olqua>-lgpla <fs_olqua>-bestq <fs_olqua>-sobkz <fs_olqua>-sonum lv_gesme_st <fs_olqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_gesme_st, lv_message.
            MOVE <fs_dlqua>-gesme TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'DESTINO:' <fs_dlqua>-matnr <fs_dlqua>-charg <fs_dlqua>-lgtyp <fs_dlqua>-lgpla <fs_dlqua>-bestq <fs_dlqua>-sobkz <fs_dlqua>-sonum lv_gesme_st <fs_dlqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            "Recalculo cantidad origen
            <fs_olqua>-gesme = <fs_olqua>-gesme - lv_gesme_cal.

          ELSE.

            CLEAR: lv_gesme_st, lv_message.
            CONCATENATE: 'ERROR:' ls_return-message INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_gesme_st, lv_message.
            MOVE <fs_olqua>-gesme TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'ORIGEN:' <fs_olqua>-matnr <fs_olqua>-charg <fs_olqua>-lgtyp <fs_olqua>-lgpla <fs_olqua>-bestq <fs_olqua>-sobkz <fs_olqua>-sonum lv_gesme_st <fs_olqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

            CLEAR: lv_gesme_st, lv_message.
            MOVE <fs_dlqua>-gesme TO lv_gesme_st.
            CONDENSE lv_gesme_st NO-GAPS.
            CONCATENATE: 'DESTINO:' <fs_dlqua>-matnr <fs_dlqua>-charg <fs_dlqua>-lgtyp <fs_dlqua>-lgpla <fs_dlqua>-bestq <fs_dlqua>-sobkz <fs_dlqua>-sonum lv_gesme_st <fs_dlqua>-meins INTO lv_message SEPARATED BY space.
            WRITE: / lv_message.

          ENDIF.

          SKIP.
          EXIT.

        ENDIF.

      ENDLOOP.

    ENDIF.

  ENDLOOP.

ENDFORM.
