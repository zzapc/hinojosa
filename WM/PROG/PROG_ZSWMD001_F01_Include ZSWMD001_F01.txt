*&---------------------------------------------------------------------*
*&  Include           ZSWMD001_F01
*&---------------------------------------------------------------------*
*&--------------------------------------------------------------------
*&      Form  load_data_into_grid
*&--------------------------------------------------------------------
FORM load_data_into_grid TABLES tabla       TYPE STANDARD TABLE
                         USING contenedor  TYPE REF TO cl_gui_custom_container
                               nombre_cont TYPE        scrfname
                               variant     LIKE        disvariant
                               estruc      LIKE        dd02l-tabname
                     CHANGING  alv         TYPE REF TO cl_gui_alv_grid
                               layout      TYPE        lvc_s_layo
                               it_fieldcat TYPE        lvc_t_fcat
                               excludin    TYPE        ui_functions.

  IF alv IS INITIAL.
    IF cl_gui_alv_grid=>offline( ) IS INITIAL.

      "CREATE OBJECT eventos.

      CREATE OBJECT contenedor
        EXPORTING
          container_name = nombre_cont
        EXCEPTIONS
          OTHERS         = 1.

      CREATE OBJECT alv
        EXPORTING
          i_parent = contenedor
        EXCEPTIONS
          OTHERS   = 1.

      CALL METHOD alv->register_edit_event
        EXPORTING
          i_event_id = cl_gui_alv_grid=>mc_evt_modified
        EXCEPTIONS
          error      = 1
          OTHERS     = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.


      CALL METHOD alv->register_edit_event
        EXPORTING
          i_event_id = cl_gui_alv_grid=>mc_evt_enter
        EXCEPTIONS
          error      = 1
          OTHERS     = 2.
      IF sy-subrc <> 0.
*       MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.


    ELSE.

*      CREATE OBJECT alv
*        EXPORTING
*          i_parent = or_doc.

    ENDIF.

    PERFORM preparefieldcatalog USING    estruc
                                CHANGING it_fieldcat.

    PERFORM preparelayout       CHANGING layout.
    PERFORM rellenar_toolbar    CHANGING excludin.

    "SET HANDLER eventos->hotspot_click         FOR alv.



    CALL METHOD alv->set_table_for_first_display
      EXPORTING
        is_variant           = variant
        i_save               = 'A'
        is_layout            = layout
        it_toolbar_excluding = excludin
      CHANGING
        it_outtab            = tabla[]
        it_fieldcatalog      = it_fieldcat
      EXCEPTIONS
        OTHERS               = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    DATA: BEGIN OF ls_stable,
            row TYPE c,
            col TYPE c,
          END OF ls_stable.

    ls_stable-row = 'X'.
    ls_stable-col = 'X'.

    CALL METHOD alv->refresh_table_display
      EXPORTING
        is_stable = ls_stable.
  ENDIF.

ENDFORM.                    "load_data_into_grid

*&--------------------------------------------------------------------
*&      Form  preparefieldcatalog
*&--------------------------------------------------------------------
FORM preparefieldcatalog USING    estruc       LIKE dd02l-tabname
                         CHANGING it_fieldcat1 TYPE lvc_t_fcat.

  DATA: l_fieldcat TYPE LINE OF lvc_t_fcat.

  REFRESH it_fieldcat1.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active        = 'X'
      i_structure_name       = estruc
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_fieldcat1[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT it_fieldcat1 INTO l_fieldcat.
    CASE l_fieldcat-fieldname.
      WHEN 'VBELN'.
        l_fieldcat-hotspot = 'X'.
      WHEN 'VBELN_VA_AUX' OR 'POSNR_VA_AUX'.
        l_fieldcat-edit = 'X'.
    ENDCASE.
    MODIFY it_fieldcat1 FROM l_fieldcat.
  ENDLOOP.

ENDFORM.                    "preparefieldcatalog

*&--------------------------------------------------------------------
*&      Form  preparelayout
*---------------------------------------------------------------------
FORM preparelayout CHANGING cwa_layout TYPE lvc_s_layo.

  cwa_layout-zebra      = 'X'.
  cwa_layout-sel_mode   = 'D'.
  cwa_layout-cwidth_opt = 'X'.
  cwa_layout-stylefname = 'T_FIELDS'.

ENDFORM.                    "preparelayout

*&--------------------------------------------------------------------
*&      Form  rellenar_toolbar
*&--------------------------------------------------------------------
FORM rellenar_toolbar CHANGING excluirtool TYPE ui_functions.

  REFRESH: excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_append_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_cut TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_move_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_paste TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_paste_new_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_undo TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_refresh TO excluirtool.

ENDFORM.                    "rellenar_toolbar
*&---------------------------------------------------------------------*
*&      Form  SELEC_DATOS
*&---------------------------------------------------------------------*
FORM selec_datos .



  CALL METHOD alv->get_selected_rows
    IMPORTING
      et_index_rows = DATA(t_rows).

  REFRESH: gt_datos_aux, gt_stock_aux.

  LOOP AT t_rows INTO DATA(l_rows).
    CASE abap_true.
      WHEN r_cuan.
        READ TABLE gt_lqua INTO DATA(l_dato) INDEX l_rows-index.
        CHECK sy-subrc = 0.
        APPEND l_dato TO gt_datos_aux.

      WHEN r_acum OR r_agru OR r_tota.
        READ TABLE gt_stock INTO DATA(l_stock) INDEX l_rows-index.
        CHECK sy-subrc EQ 0.
        APPEND l_stock TO gt_stock_aux.
    ENDCASE.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CLEAR_DATA
*&---------------------------------------------------------------------*
FORM clear_data .

  REFRESH: gt_lqua.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SHEARCH_DATA
*&---------------------------------------------------------------------*
FORM search_data .

  DATA: ls_lqua  TYPE zswms001_alv,
        ls_stock TYPE zswms001_alv_dos,
        ls_edit  TYPE lvc_s_styl.
  CLEAR gt_stock[].
  CLEAR gt_lqua[].
  DATA: tr_mtart TYPE fip_t_mtart_range.

  DATA: l_err TYPE flag.

  CALL FUNCTION 'ZSWM_SET_GET_VALUES'
    EXPORTING
      shortname = 'ZSWM_PLANCHA_MTART'
    IMPORTING
      error     = l_err
      rr_mtart  = tr_mtart.


  SELECT a~lgnum,lqnum,a~matnr,werks,charg,bestq,sobkz,sonum,a~lgtyp,a~lgpla,plpos,skzue,skzua,skzse,
     skzsa,skzsi,spgru,zeugn,bdatu,bzeit,btanr,btaps,edatu,ezeit,adatu,azeit,zdatu,wdatu,
     wenum,wepos,letyp,a~meins,gesme,verme,einme,ausme,mgewi,a~gewei,tbnum,ivnum,ivpos,betyp,
     benum,lenum,qplos,vfdat,qkapv,a~kober,lgort,virgo,trame,kzhuq,vbeln,posnr,idatu,msr_insp_guid, b~maktx
    INTO TABLE @DATA(t_lqua)
    FROM lqua AS a
    LEFT OUTER JOIN makt AS b ON a~matnr = b~matnr AND b~spras = @sy-langu
    INNER JOIN mara AS c ON a~matnr = c~matnr
    INNER JOIN mlgn AS m ON a~matnr = m~matnr AND  a~lgnum = m~lgnum
    WHERE a~lgnum = @p_lgnum
      AND ( m~bsskz = 'T' OR m~bsskz = 'S')
      AND a~matnr IN @s_matnr
      AND charg IN @s_charg
      AND a~lgtyp IN @s_lgtyp
      AND a~lgpla IN @s_lgpla
      AND a~lenum IN @s_lenum
      AND c~mtart IN @tr_mtart.


  REFRESH: gt_lqua.

  LOOP AT t_lqua INTO DATA(l_lqua).

    CLEAR: ls_lqua.

    MOVE-CORRESPONDING l_lqua TO ls_lqua.

    ls_lqua-vbeln_va = ls_lqua-vbeln_va_aux = l_lqua-sonum(10).
    ls_lqua-posnr_va = ls_lqua-posnr_va_aux = l_lqua-sonum+10(6).

    APPEND ls_lqua TO gt_lqua.
  ENDLOOP.

  DELETE gt_lqua WHERE vbeln NOT IN s_vbeln AND posnr NOT IN s_posnr.
  DATA rt_stock TYPE zswms001_alv_comun.
  DATA tt_stock TYPE TABLE OF zswms001_alv_comun.
  DATA edit     TYPE flag.
  LOOP AT gt_lqua ASSIGNING FIELD-SYMBOL(<lqua>).
    MOVE abap_false TO edit.
    CASE <lqua>-lgtyp.
      WHEN '200' OR '201' OR '120' OR '230'.
        IF <lqua>-bestq EQ space.
          edit = abap_true.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
    CASE abap_true.
      WHEN r_acum OR r_agru OR r_tota.
        IF r_agru EQ abap_true
        OR r_tota EQ abap_true.
          IF <lqua>-sonum IS NOT INITIAL.
            <lqua>-sonum    = 'XXXXXXXXXXXXXXXX'.
            <lqua>-vbeln_va = 'XXXXXXXXXX'.
            <lqua>-posnr_va = 'XXXXXX'.
          ENDIF.
        ENDIF.
        IF r_tota EQ abap_true.
          <lqua>-charg = 'XXXXXXXXXX'.
        ENDIF.
        DATA sw_tabix_stock TYPE sy-tabix.
        READ TABLE tt_stock INTO rt_stock WITH KEY matnr = <lqua>-matnr
                                                   charg = <lqua>-charg
                                                   bestq = <lqua>-bestq
                                                   sobkz = <lqua>-sobkz
                                                   sonum = <lqua>-sonum
                                                   werks = <lqua>-werks
                                                   lgort = <lqua>-lgort
                                                   edit  = edit.

        IF sy-subrc EQ 0.
          MOVE sy-tabix TO sw_tabix_stock.
          IF <lqua>-lenum IS NOT INITIAL.
            APPEND <lqua>-lenum TO rt_stock-tt_lenum.
            ADD 1 TO rt_stock-n_matriculas.
          ENDIF.
          ADD <lqua>-verme TO rt_stock-verme.
          MODIFY tt_stock FROM rt_stock INDEX sw_tabix_stock.
        ELSE.

          MOVE 0 TO sw_tabix_stock.
          CLEAR rt_stock.
          MOVE-CORRESPONDING <lqua> TO rt_stock.
          rt_stock-edit  = edit.
          IF <lqua>-lenum IS NOT INITIAL.
            APPEND <lqua>-lenum TO rt_stock-tt_lenum.
            rt_stock-n_matriculas = 1.
          ENDIF.
          APPEND rt_stock TO tt_stock.
        ENDIF.
      WHEN r_cuan.
*    COLLECT rt_stock INTO tt_stock.
*    CHECK r_cuan EQ abap_true.
        IF <lqua>-bestq = 'Q' OR <lqua>-bestq = 'S'.
          REFRESH: <lqua>-t_fields.

          CLEAR: ls_edit.
          ls_edit-fieldname = 'POSNR_VA_AUX'.
          ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

          APPEND ls_edit TO <lqua>-t_fields.

          CLEAR: ls_edit.
          ls_edit-fieldname = 'VBELN_VA_AUX'.
          ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

          APPEND ls_edit TO <lqua>-t_fields.
          CONTINUE.
        ENDIF.

        IF <lqua>-lgtyp(1) = '9'.
          REFRESH: <lqua>-t_fields.

          CLEAR: ls_edit.
          ls_edit-fieldname = 'POSNR_VA_AUX'.
          ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

          APPEND ls_edit TO <lqua>-t_fields.

          CLEAR: ls_edit.
          ls_edit-fieldname = 'VBELN_VA_AUX'.
          ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

          APPEND ls_edit TO <lqua>-t_fields.
          CONTINUE.
        ENDIF.

        IF <lqua>-lgtyp = 'MUE'.
          REFRESH: <lqua>-t_fields.

          CLEAR: ls_edit.
          ls_edit-fieldname = 'POSNR_VA_AUX'.
          ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

          APPEND ls_edit TO <lqua>-t_fields.

          CLEAR: ls_edit.
          ls_edit-fieldname = 'VBELN_VA_AUX'.
          ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

          APPEND ls_edit TO <lqua>-t_fields.
          CONTINUE.
        ENDIF.
*    collect ls_stock into _stock.
    ENDCASE.
  ENDLOOP.
  CHECK r_acum EQ abap_true
     OR r_agru EQ abap_true
     OR r_tota EQ abap_true.
  LOOP AT tt_stock INTO rt_stock WHERE edit EQ abap_true.
    DATA(sw_tabix) = sy-tabix.
    CHECK rt_stock-bestq NE space.
    CLEAR rt_stock-edit.
    MODIFY tt_stock FROM rt_stock INDEX sw_tabix.
  ENDLOOP.
  LOOP AT tt_stock INTO rt_stock.
    CLEAR ls_stock.
    MOVE-CORRESPONDING rt_stock TO ls_stock.
    CASE rt_stock-edit.
      WHEN abap_true.


      WHEN OTHERS.
        REFRESH: ls_stock-t_fields.

        CLEAR: ls_edit.
        ls_edit-fieldname = 'POSNR_VA_AUX'.
        ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

        APPEND ls_edit TO ls_stock-t_fields.

        CLEAR: ls_edit.
        ls_edit-fieldname = 'VBELN_VA_AUX'.
        ls_edit-style = cl_gui_alv_grid=>mc_style_disabled.

        APPEND ls_edit TO ls_stock-t_fields.

    ENDCASE.
    APPEND ls_stock TO gt_stock.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LOAD_SCREEN
*&---------------------------------------------------------------------*
FORM load_screen .

  CALL SCREEN 0001.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXECUTE
*&---------------------------------------------------------------------*
FORM execute .

  PERFORM selec_datos.

  DATA: p_libera TYPE flag.

  DATA: error      TYPE flag,
        tt_log     TYPE bapiret2_t,
        tt_log_acu TYPE bapiret2_t,
        error_aux  TYPE flag,
        tt_log_aux TYPE bapiret2_t,
        libera.
  DATA: tt_lenum TYPE zswm_change_lenum_sonum_tt,
        rt_lenum TYPE zswm_change_lenum_sonum_scr.
  CLEAR: tt_lenum[], rt_lenum, tt_log_acu[].

  CASE abap_true.
    WHEN r_acum OR r_agru OR r_tota.
      LOOP AT gt_stock_aux INTO DATA(l_stock).
        LOOP AT l_stock-tt_lenum INTO DATA(reg_lenum).
          CLEAR rt_lenum.
          rt_lenum-lenum = reg_lenum-lenum.
          IF l_stock-vbeln_va_aux IS INITIAL
          AND l_stock-posnr_va_aux IS INITIAL.
            CLEAR rt_lenum-new_sonum.
          ELSE.
            rt_lenum-new_sonum+0(10) = l_stock-vbeln_va_aux.
            rt_lenum-new_sonum+10(6) = l_stock-posnr_va_aux.
          ENDIF.
          APPEND rt_lenum TO tt_lenum.
        ENDLOOP.
      ENDLOOP.
      CLEAR: error, tt_log[].
      CALL FUNCTION 'ZSWM_CHANGE_SONUM_LENUM'
        EXPORTING
          tt_lenum = tt_lenum
        IMPORTING
*         GM_HEADRET       =
          error    = error
          tt_log   = tt_log.
      IF tt_log[] IS NOT INITIAL.
        APPEND LINES OF tt_log TO tt_log_acu.
      ENDIF.
    WHEN r_cuan.
      LOOP AT gt_datos_aux INTO DATA(l_datos).
        CLEAR rt_lenum.
        rt_lenum-lenum = l_datos-lenum.
        IF l_datos-vbeln_va_aux IS INITIAL
        AND l_datos-posnr_va_aux IS INITIAL.
          CLEAR rt_lenum-new_sonum.
        ELSE.
          rt_lenum-new_sonum+0(10) = l_datos-vbeln_va_aux.
          rt_lenum-new_sonum+10(6) = l_datos-posnr_va_aux.
        ENDIF.
        APPEND rt_lenum TO tt_lenum.

      ENDLOOP.
      CLEAR: error, tt_log[].
      CALL FUNCTION 'ZSWM_CHANGE_SONUM_LENUM'
        EXPORTING
          tt_lenum = tt_lenum
        IMPORTING
*         GM_HEADRET       =
          error    = error
          tt_log   = tt_log.
      IF tt_log[] IS NOT INITIAL.
        APPEND LINES OF tt_log TO tt_log_acu.
      ENDIF.

  ENDCASE.
  PERFORM show_log TABLES tt_log_acu[].


  DATA: tl_vbap TYPE TABLE OF vbap,
        wl_vbap LIKE LINE OF tl_vbap.

  CLEAR tl_vbap.

  LOOP AT gt_datos_aux INTO l_datos.
    IF l_datos-vbeln_va IS INITIAL AND
          l_datos-posnr_va IS INITIAL AND
          l_datos-vbeln_va_aux IS NOT INITIAL AND
           l_datos-posnr_va_aux IS NOT INITIAL.
      CLEAR wl_vbap.
      wl_vbap-vbeln = l_datos-vbeln_va_aux.
      wl_vbap-posnr = l_datos-posnr_va_aux.
      COLLECT wl_vbap INTO tl_vbap.
    ENDIF.
    IF l_datos-vbeln_va IS NOT INITIAL AND
          l_datos-posnr_va IS NOT INITIAL AND
          l_datos-vbeln_va_aux IS INITIAL AND
           l_datos-posnr_va_aux IS INITIAL.
      CLEAR wl_vbap.
      wl_vbap-vbeln = l_datos-vbeln_va.
      wl_vbap-posnr = l_datos-posnr_va.
      COLLECT wl_vbap INTO tl_vbap.
    ENDIF.
  ENDLOOP.
  LOOP AT gt_stock_aux INTO l_stock.
    IF l_stock-vbeln_va IS INITIAL AND
          l_stock-posnr_va IS INITIAL AND
          l_stock-vbeln_va_aux IS NOT INITIAL AND
           l_stock-posnr_va_aux IS NOT INITIAL.
      CLEAR wl_vbap.
      wl_vbap-vbeln = l_stock-vbeln_va_aux.
      wl_vbap-posnr = l_stock-posnr_va_aux.
      COLLECT wl_vbap INTO tl_vbap.
    ENDIF.
    IF l_stock-vbeln_va IS NOT INITIAL AND
          l_stock-posnr_va IS NOT INITIAL AND
          l_stock-vbeln_va_aux IS INITIAL AND
           l_stock-posnr_va_aux IS INITIAL.
      CLEAR wl_vbap.
      wl_vbap-vbeln = l_stock-vbeln_va.
      wl_vbap-posnr = l_stock-posnr_va.
      COLLECT wl_vbap INTO tl_vbap.
    ENDIF.
  ENDLOOP.

  LOOP AT tl_vbap INTO wl_vbap.
    CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_VBEP_RE'
      IN UPDATE TASK
      EXPORTING
        vp_vbeln = wl_vbap-vbeln
        vp_posnr = wl_vbap-posnr.
  ENDLOOP.

ENDFORM.
FORM mensaje  USING    VALUE(p_type)        LIKE bapireturn-type
                       VALUE(p_id)          LIKE sy-msgid
                       VALUE(p_number)      LIKE sy-msgno
                       val1
                       val2
                       val3
                       val4
              CHANGING tt_log_men TYPE bapiret2_tt.
  DATA: p_val1 LIKE sy-msgv1,
        p_val2 LIKE sy-msgv2,
        p_val3 LIKE sy-msgv3,
        p_val4 LIKE sy-msgv4.
  p_val1 = val1.
  p_val2 = val2.
  p_val3 = val3.
  p_val4 = val4.

  DATA r_men TYPE bapiret2.
  CLEAR r_men.
  CALL FUNCTION 'BALW_BAPIRETURN_GET2'
    EXPORTING
      type   = p_type
      cl     = p_id
      number = p_number
      par1   = p_val1
      par2   = p_val2
      par3   = p_val3
      par4   = p_val4
*     LOG_NO = ' '
*     LOG_MSG_NO       = ' '
*     PARAMETER        = ' '
*     ROW    = 0
*     FIELD  = ' '
    IMPORTING
      return = r_men.
  APPEND r_men TO tt_log_men.
ENDFORM.
FORM show_log  TABLES   t_log STRUCTURE bapiret2.
  CHECK t_log[] IS NOT INITIAL.
  CALL FUNCTION 'SUSR_DISPLAY_LOG'
    EXPORTING
      display_in_popup = abap_true
**     LOG_TITLE                  =
**     DISPLAY_IN_SUBSCREEN       =
    TABLES
*     IT_LOG_SPROT     =
      it_log_bapiret2  = t_log
    EXCEPTIONS
      parameter_error  = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
