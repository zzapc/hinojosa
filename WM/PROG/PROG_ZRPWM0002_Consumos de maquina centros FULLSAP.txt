***********************************************************************
* TIPO : LISTADO
* TITULO : Consumos de máquina centros FULLSAP
* DESCRIPCION : Consumos de máquina centros FULLSAP
*
* AUTOR: Andrés Picazo                                FECHA: 12/11/2024
* ANALISTA: Francisco Cardona
*
***********************************************************************
REPORT zrpwm0002.

TABLES: zwm_intf_bhs, lqua, *lqua, zwm_intf_omp_sap, *zwm_intf_omp_sap.

CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check                 TYPE xfeld,
             lights                TYPE zico_estado_mensaje,
             id                    TYPE zwm_intf_bhs-id,
             fecha                 TYPE zwm_intf_bhs-fecha,
             hora                  TYPE zwm_intf_bhs-hora,
             pos_fich              TYPE zwm_intf_bhs-pos_fich,
             lgnum                 TYPE zwm_intf_bhs-lgnum,
             werks                 TYPE zwm_intf_bhs-werks,
             manual                TYPE zwm_intf_bhs-manual,
             cod_consumo           TYPE zwm_intf_bhs-cod_consumo,
             codigo_consumo_t      TYPE string,
             porta_bobinas         TYPE zwm_intf_bhs-porta_bobinas,
             cod_etiqueta          TYPE zwm_intf_bhs-cod_etiqueta,
             metros_restantes      TYPE zwm_intf_bhs-metros_restantes,
             orden_bhs             TYPE zwm_intf_bhs-orden_bhs,
             calidad               TYPE zwm_intf_bhs-calidad,
             matnr                 TYPE zwm_intf_bhs-matnr,
             maktx                 TYPE maktx,
             charg                 TYPE zwm_intf_bhs-charg,
             cod_maquina_principal TYPE zwm_intf_bhs-cod_maquina_principal,
             cod_operario          TYPE zwm_intf_bhs-cod_operario,
             stock_sap             TYPE zwm_intf_bhs-stock_sap,
             cant_dif              TYPE zwm_intf_bhs-cant_dif,
             cant_consumo          TYPE zwm_intf_bhs-cant_consumo,
             meinh                 TYPE zwm_intf_bhs-meinh,
             metros_desarrollados  TYPE zwm_intf_bhs-metros_desarrollados,
             metros_des_inicio_ci  TYPE zwm_intf_bhs-metros_des_inicio_ci,
             consumo_notificar     TYPE zwm_intf_bhs-consumo_notificar,
             consumo_notificar_kg  TYPE zwm_intf_bhs-consumo_notificar_kg,
             tolerancia            TYPE zwm_intf_bhs-tolerancia,
             meins_tol             TYPE zwm_intf_bhs-meins_tol,
             tolerancia_kg         TYPE zwm_intf_bhs-tolerancia,
             stock_sap_kg          TYPE zwm_intf_bhs-stock_sap_kg,
             cant_dif_kg           TYPE zwm_intf_bhs-cant_dif_kg,
             cant_consumo_kg       TYPE zwm_intf_bhs-cant_consumo_kg,
             procesado             TYPE zwm_intf_bhs-procesado,
             contabilizado         TYPE zwm_intf_bhs-contabilizado,
             bwart                 TYPE zwm_intf_bhs-bwart,
             mblnr                 TYPE zwm_intf_bhs-mblnr,
             mjahr                 TYPE zwm_intf_bhs-mjahr,
             tbnum                 TYPE zwm_intf_bhs-tbnum,
             tbpos                 TYPE zwm_intf_bhs-tbpos,
             tanum                 TYPE zwm_intf_bhs-tanum,
             tapos                 TYPE zwm_intf_bhs-tapos,
             aufnr1                TYPE zwm_intf_bhs-aufnr1,
             aufnr1_menge          TYPE zwm_intf_bhs-aufnr1_menge,
             aufnr2                TYPE zwm_intf_bhs-aufnr2,
             aufnr2_menge          TYPE zwm_intf_bhs-aufnr2_menge,
             rsnum                 TYPE zwm_intf_bhs-rsnum,
             rspos                 TYPE zwm_intf_bhs-rspos,
             rsart                 TYPE zwm_intf_bhs-rsart,
             diametro_rest         TYPE zwm_intf_bhs-diametro_rest,
             ua_producida          TYPE zwm_intf_bhs-ua_producida,
             matnr_prod            TYPE zwm_intf_bhs-matnr_prod,
             cod_parte_rebob       TYPE zwm_intf_bhs-cod_parte_rebob,
             msgguid               TYPE zwm_intf_bhs-msgguid,
             message               TYPE zwm_intf_bhs-message,
             color                 TYPE lvc_t_scol,
             tabix                 TYPE sy-tabix,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos IMPORTING tabix TYPE sy-tabix OPTIONAL.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b0 WITH FRAME TITLE text-s00.
PARAMETERS p_lgnum LIKE zwm_intf_bhs-lgnum MEMORY ID lgn.

SELECT-OPTIONS: s_fecha FOR zwm_intf_bhs-fecha DEFAULT sy-datum,
                s_hora FOR zwm_intf_bhs-hora.

SELECT-OPTIONS: s_etiq FOR zwm_intf_bhs-cod_etiqueta,
                s_calid FOR zwm_intf_bhs-calidad,
                s_orden FOR zwm_intf_bhs-orden_bhs,
                s_estac FOR zwm_intf_bhs-porta_bobinas,
                s_maqui FOR zwm_intf_bhs-cod_maquina_principal MATCHCODE OBJECT rman_prsp_arbpl,
                s_aufnr FOR zwm_intf_bhs-aufnr1.

SELECT-OPTIONS: s_matnr FOR zwm_intf_bhs-matnr,
                s_werks FOR zwm_intf_bhs-werks,
                s_charg FOR zwm_intf_bhs-charg.

SELECT-OPTIONS s_id FOR zwm_intf_bhs-id NO-DISPLAY. " cvivo -  62668-Verificación BHS si pte procesar etiqueta

SELECTION-SCREEN SKIP.
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-s08.
PARAMETERS: p_proc   TYPE zwm_intf_bhs-procesado RADIOBUTTON GROUP grp1,
            p_noproc TYPE zwm_intf_bhs-procesado RADIOBUTTON GROUP grp1, " DEFAULT 'X',
            p_all    TYPE zwm_intf_bhs-procesado RADIOBUTTON GROUP grp1 DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK b1.
SELECTION-SCREEN END OF BLOCK b0.


SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE text-s02.
PARAMETERS p_vari TYPE slis_vari.
SELECTION-SCREEN END OF BLOCK b3.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA: l_list   TYPE o_prog->t_listado,
          ztwm0001 TYPE ztwm0001.
    DATA: l_clave TYPE zlog-clave,
          r_clave TYPE RANGE OF zlog-clave.
    DATA r_fecha TYPE RANGE OF sy-datum.

    l_list = list.
    CASE column.
      WHEN 'LIGHTS'.
        SELECT SINGLE fecha_hora trabajo_interno_bhs codigo_etiqueta FROM ztwm0001
          INTO CORRESPONDING FIELDS OF ztwm0001
         WHERE id    = l_list-id
           AND fecha = l_list-fecha
           AND hora  = l_list-hora
           AND linea = l_list-pos_fich.

        DATA(l_claves) = |{ ztwm0001-codigo_etiqueta }\|{ ztwm0001-trabajo_interno_bhs }\|{ ztwm0001-fecha_hora }|.
        REPLACE ALL OCCURRENCES OF '.' IN l_claves WITH ``.
        CONDENSE l_claves NO-GAPS.
        l_clave = l_claves.
        APPEND VALUE #( option = 'EQ' sign = 'I' low = l_clave ) TO r_clave.

        IF NOT l_list-msgguid IS INITIAL.
          l_clave = l_list-msgguid && '-' && l_list-pos_fich.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = l_clave ) TO r_clave.
        ENDIF.
        SUBMIT zlog
        AND RETURN
               WITH s_proces = 'PROXY_BHS'
               WITH s_clave IN r_clave
               WITH s_fecha IN r_fecha.

      WHEN 'MSGGUID'.
        DATA: im_msgkey TYPE sxmsmkey,
              pay_bytes TYPE xstring,
              payload   TYPE string.
        im_msgkey-msgid = l_list-msgguid.
        im_msgkey-pid   = 'RECEIVER'.
        CALL FUNCTION 'SXMB_GET_MESSAGE_PAYLOAD'
          EXPORTING
            im_msgkey      = im_msgkey
            im_archive     = ''
            im_version     = '000'
          IMPORTING
            ex_msg_bytes   = pay_bytes
          EXCEPTIONS
            not_authorized = 1
            no_message     = 2
            internal_error = 3
            no_payload     = 4
            OTHERS         = 5.
        IF sy-subrc <> 0.
          MESSAGE 'Error recuperando payload' TYPE 'I'.
          RETURN.
        ENDIF.

        TRY.
            CALL FUNCTION 'ECATT_CONV_XSTRING_TO_STRING'
              EXPORTING
                im_xstring = pay_bytes
*               IM_ENCODING = 'UTF-8'
              IMPORTING
                ex_string  = payload.
            cl_demo_output=>display( payload ).
          CATCH cx_root INTO DATA(o_root).                  "#EC *
            MESSAGE o_root->get_text( ) TYPE 'I'.
        ENDTRY.


      WHEN 'COD_ETIQUETA'.
        SET PARAMETER ID 'LEN' FIELD l_list-cod_etiqueta.
        CALL TRANSACTION 'LS33' AND SKIP FIRST SCREEN.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    DATA: input    TYPE zdt_bhs_consum_bob_mat_prima_i,
          intf_bhs TYPE zwm_intf_bhs.

    check_ucomm_sel = 'REPROC,PROCESADO,CAMBIO_UA,CAMBIO_CI'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'PROCESADO'.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          IF <listado>-procesado IS INITIAL.
            <listado>-procesado = abap_true.
            <listado>-message   = |Marcado como procesado el { sy-datum DATE = USER } { sy-uzeit TIME = USER } por { sy-uname }|.
            DATA(l_icono) = icon_okay.
          ELSE.
            IF <listado>-mblnr IS INITIAL AND <listado>-mjahr IS INITIAL.
              CLEAR <listado>-procesado.
              <listado>-message = |Marcado como NO procesado el { sy-datum DATE = USER } { sy-uzeit TIME = USER } por { sy-uname }|.
              l_icono = icon_yellow_light.
            ELSE.
              MESSAGE 'Este registro tiene un documento de material, no es posible marcar como no procesado' TYPE 'I'.
              CONTINUE.
            ENDIF.
          ENDIF.
          o_prog->set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
          UPDATE zwm_intf_bhs
             SET procesado = <listado>-procesado
                 message = <listado>-message
           WHERE id       = <listado>-id
             AND fecha    = <listado>-fecha
             AND hora     = <listado>-hora
             AND pos_fich = <listado>-pos_fich
             AND cod_etiqueta = <listado>-cod_etiqueta.
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.

      WHEN 'REPROC'.
        IF line_exists( o_prog->i_listado[ check = 'X' procesado = 'X' ] ).
          MESSAGE 'No seleccione registros procesados' TYPE 'I'.
          RETURN.
        ENDIF.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          IF <listado>-bwart = '261'.
            MOVE-CORRESPONDING <listado> TO intf_bhs.

            zhcl_bhs=>consumo_contra_orden( CHANGING  zwm_intf_bhs   = intf_bhs ).
          ELSE.
            SUBMIT zrwm_intf_bhs
              AND RETURN
                   WITH p_lgnum = p_lgnum
                   WITH s_id = <listado>-id
                   WITH s_fecha = <listado>-fecha
                   WITH s_hora = <listado>-hora
                   WITH s_pos = <listado>-pos_fich
                   WITH p_repro = 'Y'
                   WITH p_proc = ''
                   WITH p_noproc = 'X'
                   WITH p_all = ''.
          ENDIF.
          DATA(l_tabix) = <listado>-tabix.
          o_prog->seleccionar_datos(  tabix = l_tabix ).
        ENDLOOP.
        refresh( ).

      WHEN 'MANUAL'.

        SELECT DISTINCT werks FROM t320 JOIN zparametros ON zparametros~valor = t320~werks
                                                        AND zparametros~clave = 'BHS'
                                                        AND zparametros~campo = 'CENTRO'
          INTO TABLE @DATA(i_werks)
         WHERE lgnum = @p_lgnum.
        IF sy-subrc = 0.
          CLEAR zwm_intf_bhs.
          zwm_intf_bhs-lgnum = p_lgnum.
          CALL FUNCTION 'ZFMWM0001_0001'
            IMPORTING
              message = zwm_intf_bhs-message
            CHANGING
              intf    = zwm_intf_bhs.

        ELSE.
          CALL TRANSACTION 'ZWM2047'.
        ENDIF.
        o_prog->seleccionar_datos(  ).
        refresh( ).

      WHEN 'CAMBIO_UA'.
        IF line_exists( o_prog->i_listado[ check = 'X' procesado = 'X' ] ).
          MESSAGE 'No seleccione registros procesados' TYPE 'I'.
          RETURN.
        ENDIF.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          CLEAR: lqua, *lqua.
          MOVE-CORRESPONDING <listado> TO zwm_intf_bhs.
          SELECT SINGLE lenum matnr charg verme meins FROM lqua
            INTO CORRESPONDING FIELDS OF lqua
           WHERE lgnum = p_lgnum
             AND lenum = zwm_intf_bhs-cod_etiqueta.
          IF sy-subrc NE 0.
            lqua-lenum = zwm_intf_bhs-cod_etiqueta.
            MESSAGE |No existe la UA { zwm_intf_bhs-cod_etiqueta }| TYPE 'S'.
          ENDIF.
          CALL SCREEN 0200 STARTING AT 3 3 ENDING AT 60 6.
          IF <listado>-cod_etiqueta NE zwm_intf_bhs-cod_etiqueta.
            l_tabix = <listado>-tabix.
            o_prog->seleccionar_datos(  tabix = l_tabix ).
          ENDIF.
        ENDLOOP.
        refresh( ).

      WHEN 'CAMBIO_CI'.
        IF line_exists( o_prog->i_listado[ check = 'X' procesado = 'X' ] ).
          MESSAGE 'No seleccione registros procesados' TYPE 'I'.
          RETURN.
        ENDIF.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          CLEAR: zwm_intf_omp_sap, *zwm_intf_omp_sap.
          MOVE-CORRESPONDING <listado> TO zwm_intf_bhs.
          SELECT SINGLE * FROM zwm_intf_omp_sap
            INTO CORRESPONDING FIELDS OF zwm_intf_omp_sap
           WHERE lgnum = p_lgnum
             AND benum = <listado>-id.
          IF sy-subrc NE 0.
            zwm_intf_omp_sap-benum = zwm_intf_bhs-id.
            MESSAGE |No existe el CI Number { <listado>-orden_bhs }| TYPE 'S'.
          ENDIF.
          CALL SCREEN 0300 STARTING AT 3 3 ENDING AT 60 6.
          IF <listado>-id  NE zwm_intf_bhs-id.
            l_tabix = <listado>-tabix.
            o_prog->seleccionar_datos(  tabix = l_tabix ).
          ENDIF.
        ENDLOOP.
        refresh( ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA: r_proc         TYPE RANGE OF zwm_intf_bhs-procesado,
          i_list         TYPE tt_listado,
          l_campos_rojo  TYPE string,
          l_campos_verde TYPE string,
          l_icono        TYPE icon_d,
          l_msg_icono    TYPE string.
    DATA r_pos TYPE RANGE OF zwm_intf_bhs-pos_fich.

    sgpi_texto( 'Seleccionando datos'(sda) ).

    IF tabix IS INITIAL.
      CLEAR i_listado.
      DATA(r_fecha) = s_fecha[].
      DATA(r_hora) = s_hora[].
      DATA(r_id) = s_id[].
      IF p_proc IS NOT INITIAL.
        r_proc = VALUE #( ( option = 'EQ' sign = 'I' low = 'X' ) ).
      ELSEIF p_noproc IS NOT INITIAL.
        r_proc = VALUE #( ( option = 'EQ' sign = 'I' low = '' ) ).
      ENDIF.
    ELSE.
      READ TABLE i_listado INTO DATA(l_list) WITH KEY tabix = tabix.
      IF sy-subrc = 0.
        r_fecha = VALUE #( ( option = 'EQ' sign = 'I' low = l_list-fecha ) ).
        r_hora = VALUE #( ( option = 'EQ' sign = 'I' low = l_list-hora ) ).
        r_id = VALUE #( ( option = 'EQ' sign = 'I' low = l_list-id ) ).
        r_pos = VALUE #( ( option = 'EQ' sign = 'I' low = l_list-pos_fich ) ).
      ELSE.
        RETURN.
      ENDIF.
    ENDIF.

    SELECT * FROM zwm_intf_bhs
      INTO CORRESPONDING FIELDS OF TABLE i_list
      WHERE id                    IN r_id
        AND lgnum                  = p_lgnum
        AND fecha                 IN r_fecha
        AND hora                  IN r_hora
        AND pos_fich              IN r_pos
        AND cod_etiqueta          IN s_etiq
        AND calidad               IN s_calid
        AND orden_bhs             IN s_orden
        AND matnr                 IN s_matnr
        AND charg                 IN s_charg
        AND porta_bobinas         IN s_estac
        AND procesado             IN r_proc
        AND cod_maquina_principal IN s_maqui
        AND ( aufnr1 IN s_aufnr OR aufnr2 IN s_aufnr ).

    o_prog->o_sgpi->get_filas_tabla( i_list ).
    LOOP AT i_list ASSIGNING FIELD-SYMBOL(<listado>).
      IF tabix IS INITIAL.
        <listado>-tabix = sy-tabix.
      ELSE.
        <listado>-tabix = tabix.
      ENDIF.
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).
      CLEAR: l_campos_rojo, l_campos_verde, l_icono, l_msg_icono.

      <listado>-codigo_consumo_t = get( tabla = 'D ZWM_COD_CONSUMO' clave = <listado>-cod_consumo ).

      get_descripciones( EXPORTING campos = 'MAKTX' CHANGING list = <listado> ).

      IF <listado>-procesado IS INITIAL AND NOT <listado>-message IS INITIAL.
        SELECT SINGLE lenum FROM lqua
          INTO <listado>-cod_etiqueta
         WHERE lgnum = p_lgnum
           AND lenum = <listado>-cod_etiqueta.
        IF sy-subrc NE 0.
          __add_lista l_campos_rojo 'COD_ETIQUETA'.
        ENDIF.

        SELECT SINGLE benum FROM zwm_intf_omp_sap
          INTO <listado>-id
         WHERE lgnum = p_lgnum
           AND benum = <listado>-id.
        IF sy-subrc NE 0.
          __add_lista l_campos_rojo 'ID,ORDEN_BHS'.
        ENDIF.
      ENDIF.

      <listado>-tolerancia_kg = o_cache->get_mat( matnr = <listado>-matnr unidad_destino = 'KG' unidad_origen = <listado>-meins_tol cantidad = <listado>-tolerancia ).
      IF <listado>-procesado IS INITIAL.
        IF NOT <listado>-message IS INITIAL. __add_lista l_campos_rojo 'MESSAGE,MBLNR,MJAHR,TBNUM,TBPOS'. ENDIF.
      ENDIF.
      IF <listado>-metros_desarrollados IS INITIAL.
        __add_lista l_campos_rojo 'METROS_DESARROLLADOS'.
      ENDIF.
      IF <listado>-stock_sap_kg IS INITIAL. __add_lista l_campos_rojo 'STOCK_SAP_KG'. ENDIF.
      IF <listado>-consumo_notificar IS INITIAL. __add_lista l_campos_rojo 'CONSUMO_NOTIFICAR'. ENDIF.
      IF <listado>-contabilizado IS INITIAL. __add_lista l_campos_rojo 'CONTABILIZADO'. ENDIF.
      IF NOT l_campos_rojo IS INITIAL.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = l_campos_rojo colorc = 'R' CHANGING tabla_color = <listado>-color ).
      ENDIF.
      IF <listado>-cant_dif_kg <> 0.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'CANT_DIF_KG' colorc = 'N' CHANGING tabla_color = <listado>-color ).
        IF <listado>-tolerancia_kg <> 0 AND <listado>-cant_dif_kg > 0 AND <listado>-stock_sap_kg > <listado>-stock_sap_kg.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'TOLERANCIA_KG' colorc = 'N' CHANGING tabla_color = <listado>-color ).
        ELSEIF <listado>-consumo_notificar_kg > <listado>-stock_sap_kg.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'STOCK_SAP_KG' colorc = 'R' CHANGING tabla_color = <listado>-color ).
        ENDIF.
        IF <listado>-cant_dif_kg > 0.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'CONSUMO_NOTIFICAR_KG,CANT_CONSUMO_KG' colorc = 'V' CHANGING tabla_color = <listado>-color ).
        ELSE.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'CONSUMO_NOTIFICAR_KG,CANT_CONSUMO_KG' colorc = 'N' int = 1 CHANGING tabla_color = <listado>-color ).
        ENDIF.
      ENDIF.
      IF <listado>-manual = 'X'.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'MANUAL' colorc = 'AMARILLO' int = 1 CHANGING tabla_color = <listado>-color ).
      ENDIF.

      IF NOT <listado>-procesado IS INITIAL. __add_lista l_campos_verde 'PROCESADO'. ENDIF.
      IF NOT <listado>-mblnr IS INITIAL. __add_lista l_campos_verde 'MBLNR,MJAHR'. ENDIF.
      IF NOT <listado>-tanum IS INITIAL. __add_lista l_campos_verde 'TANUM'. ENDIF.
      IF NOT l_campos_verde IS INITIAL.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = l_campos_verde colorc = 'V' CHANGING tabla_color = <listado>-color ).
      ENDIF.

      IF <listado>-procesado IS INITIAL.
        IF <listado>-message IS INITIAL.
          l_icono = icon_yellow_light.
          l_msg_icono = 'Entrada no procesada'.
        ELSE.
          l_icono = icon_red_light.
          l_msg_icono = <listado>-message.
        ENDIF.
      ELSE.
        IF <listado>-mblnr IS INITIAL.
          l_icono = icon_dummy.
          l_msg_icono = 'Sin consumos'.
        ELSE.
          l_icono = icon_okay.
          l_msg_icono = 'Consumo realizado'.
        ENDIF.
      ENDIF.

      <listado>-lights = zcl_ap_alv=>set_icono(  icono = l_icono mensaje = l_msg_icono ).

      IF tabix IS INITIAL.
        APPEND <listado> TO i_listado.
      ELSE.
        i_listado[ tabix = tabix ] = <listado>.
      ENDIF.
    ENDLOOP.

    IF tabix IS INITIAL.
      SORT i_listado BY fecha hora pos_fich.
    ENDIF.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Reprocesar linea'  icon = icon_submit ucomm = 'REPROC' ).
    o_alv->add_button( button = 'F02' text = 'Procesado/Desprocesado'  icon = icon_allow ucomm = 'PROCESADO' ).
    o_alv->add_button( button = 'F03' text = 'Cambiar UA'  icon = icon_ws_whse_stock ucomm = 'CAMBIO_UA' ).
    o_alv->add_button( button = 'F04' text = 'Cambiar CI Number'  icon = icon_change_number ucomm = 'CAMBIO_CI' ).
    o_alv->add_button( button = 'F05' text = 'Registrar consumo manual'  icon = icon_new_org_unit ucomm = 'MANUAL' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page(
*    i_param = VALUE #( ( tipo = 'R' param = 'S_CREDAT' texto = 'F.Creación IDOC' tabla = '' campo = '' )
                          ).

    o_alv->set_field_hotspot( campo = 'MBLNR,TBNUM,TANUM,MATNR,CHARG,COD_ETIQUETA,MSGGUID' auto = 'X' ).
    o_alv->set_field_hotspot( campo = 'AUFNR1,AUFNR2' valor = 'CO02' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,TABIX' ).
    o_alv->set_field_text( campo = 'CODIGO_CONSUMO_T' valor = 'Descripción evento' ).
    o_alv->set_field_text( campo = 'MATNR_PROD' valor = 'Mat.Prod.' valor2 = 'Material producido' ).
    o_alv->set_field_text( campo = 'COD_MAQUINA_PRINCIPAL' valor = 'Máquina' ).
    o_alv->set_field_text( campo = 'COD_OPERARIO' valor = 'Operario' ).
    o_alv->set_field_text( campo = 'STOCK_SAP_KG' valor = 'StkSAP Kg' valor2 = 'Stock SAP en kilos' ).
    o_alv->set_field_text( campo = 'CANT_DIF_KG' valor = 'CtdDif.Kg' valor2 = 'Cantidad no consumida en kilos' ).
    o_alv->set_field_text( campo = 'CANT_CONSUMO_KG' valor = 'CtdConsFinal.Kg' valor2 = 'Cantidad consumo final en kilos' ).
    o_alv->set_field_text( campo = 'CONSUMO_NOTIFICAR_KG' valor = 'CtdNotif.Kg' valor2 = 'Cantidad teorica a notificar en kilos' ).
    o_alv->set_field_text( campo = 'AUFNR1_MENGE' valor = 'Ctd.ConsOrd' valor2 = 'Cantidad consumida en orden' ).
    o_alv->set_field_text( campo = 'AUFNR2_MENGE' valor = 'Ctd.ConsOrd' valor2 = 'Cantidad consumida en orden' ).
    o_alv->set_field_text( campo = 'TOLERANCIA_KG' valor = 'Tol.KG' valor2 = 'Tolerancia en KG' ).
    o_alv->set_field_text( campo = 'ORDEN_BHS' valor = 'CI Number' valor2 = 'CI Number' ).

    o_alv->set_field( campo = 'STOCK_SAP_KG,CANT_DIF_KG,METROS_DES_INICIO_CI,CANT_CONSUMO_KG,METROS_DESARROLLADOS' op = 'NO_CERO' ).
    o_alv->set_field( campo = 'CONSUMO_NOTIFICAR,CONSUMO_NOTIFICAR_KG,TOLERANCIA,TOLERANCIA_KG,AUFNR1_MENGE,AUFNR2_MENGE,DIAMETRO_REST' op = 'NO_CERO' ).

    o_alv->set_field_noout( 'STOCK_SAP,CANT_DIF,CANT_CONSUMO,RSNUM,RSPOS,RSART,TOLERANCIA,MEINS_TOL,MSGGUID' ).

    o_alv->set_orden( 'FECHA,HORA,POS_FICH' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         color              = 'COLOR'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->parametros_por_defecto( CHANGING r_werks = s_werks[]
                                           p_lgnum = p_lgnum ).
  IF p_lgnum IS INITIAL.
    p_lgnum = '200'.
  ENDIF.

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).


AT SELECTION-SCREEN OUTPUT.



AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = 'S_FECHA,S_ETIQ,S_ORDEN,S_CALID,S_MAQUI,S_AUFNR,S_MATNR,S_CHARG' msgty = 'E' ).
      o_prog->validar_centro( r_werks = s_werks[] obligatorio = '' ).
      o_prog->validar_num_almacen( r_werks = s_werks[] lgnum = p_lgnum obligatorio = 'X' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  SET PARAMETER ID 'LGN' FIELD p_lgnum.
  o_prog->main( ).

*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS 'OK_CANCEL' OF PROGRAM 'ZAP_STATUS'.
  SET TITLEBAR '200'.


  *lqua = lqua.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE sy-ucomm.
    WHEN 'OK'.
      IF lqua-lenum NE zwm_intf_bhs-cod_etiqueta.
        DATA(l_ua) = zwm_intf_bhs-cod_etiqueta.
        zwm_intf_bhs-cod_etiqueta = lqua-lenum.
        PERFORM f_dame_valores IN PROGRAM zrwm_intf_bhs CHANGING zwm_intf_bhs.
        UPDATE zwm_intf_bhs SET cod_etiqueta = zwm_intf_bhs-cod_etiqueta
                                matnr = zwm_intf_bhs-matnr
                                charg = zwm_intf_bhs-charg
                                stock_sap = zwm_intf_bhs-stock_sap
                                stock_sap_kg = zwm_intf_bhs-stock_sap_kg
                                cant_dif = zwm_intf_bhs-cant_dif
                                cant_dif_kg = zwm_intf_bhs-cant_dif_kg
                                cant_consumo = zwm_intf_bhs-cant_consumo
                                cant_consumo_kg = zwm_intf_bhs-cant_consumo_kg
                                metros_restantes = zwm_intf_bhs-metros_restantes
                                message = zwm_intf_bhs-message
         WHERE id = zwm_intf_bhs-id
           AND fecha = zwm_intf_bhs-fecha
           AND hora = zwm_intf_bhs-hora
           AND pos_fich = zwm_intf_bhs-pos_fich
           AND cod_etiqueta = zwm_intf_bhs-cod_etiqueta.

        zcl_ap_log=>set_log( proceso = 'PROXY_BHS'
                             clave = zwm_intf_bhs-msgguid && '-' && zwm_intf_bhs-pos_fich
                             p1 = 'Se modifica la anterior UA' p2 = l_ua p3 = 'por la nueva' p4 = lqua-lenum  msgty = 'I' ).

      ENDIF.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_LENUM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_lenum INPUT.

  CHECK sy-ucomm NE 'CANCEL'.

  IF lqua-lenum IS INITIAL AND sy-ucomm = 'OK'.
    MESSAGE 'Informe UA' TYPE 'E'.
  ELSE.
    DATA(l_lenum) = lqua-lenum.
    SELECT SINGLE lenum matnr charg verme meins FROM lqua
      INTO CORRESPONDING FIELDS OF lqua
     WHERE lgnum = p_lgnum
       AND lenum = lqua-lenum.
    IF sy-subrc NE 0.
      CLEAR lqua.
      lqua-lenum = l_lenum.
      MESSAGE 'UA no existe' TYPE 'E'.
    ENDIF.
  ENDIF.
ENDMODULE.


MODULE status_0300 OUTPUT.
  SET PF-STATUS 'OK_CANCEL' OF PROGRAM 'ZAP_STATUS'.
  SET TITLEBAR '300'.


  *zwm_intf_omp_sap = zwm_intf_omp_sap.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

  CASE sy-ucomm.
    WHEN 'OK'.
      IF zwm_intf_omp_sap-benum NE zwm_intf_bhs-id.
        UPDATE zwm_intf_bhs
           SET id = zwm_intf_omp_sap-benum
               orden_bhs = zwm_intf_omp_sap-cinumber
        WHERE id = zwm_intf_bhs-id
          AND fecha = zwm_intf_bhs-fecha
          AND hora = zwm_intf_bhs-hora
          AND pos_fich = zwm_intf_bhs-pos_fich
          AND cod_etiqueta = zwm_intf_bhs-cod_etiqueta.
        IF sy-subrc NE 0.
          MESSAGE 'Error actualizando CI Number' TYPE 'I'.
        ELSE.
          zcl_ap_log=>set_log( proceso = 'PROXY_BHS'
                               clave = zwm_intf_bhs-msgguid && '-' && zwm_intf_bhs-pos_fich
                               p1 = 'Se modifica el anterior CI_NUMBER' p2 = zwm_intf_bhs-id p3 = 'por el nuevo' p4 = zwm_intf_omp_sap-benum msgty = 'I' ).
          UPDATE ztwm0001
            SET id = zwm_intf_omp_sap-benum
            WHERE id = zwm_intf_bhs-id
              AND fecha = zwm_intf_bhs-fecha
              AND hora = zwm_intf_bhs-hora
              AND lgnum = zwm_intf_bhs-lgnum
              AND linea  = zwm_intf_bhs-pos_fich
              AND codigo_etiqueta = zwm_intf_bhs-cod_etiqueta.
        ENDIF.
      ENDIF.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_LENUM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_benum INPUT.

  CHECK sy-ucomm NE 'CANCEL'.

  IF zwm_intf_omp_sap-benum IS INITIAL.
    IF sy-ucomm = 'OK'.
      MESSAGE 'Informe CI Number' TYPE 'E'.
    ENDIF.
  ELSE.
    DATA(l_benum) = zwm_intf_omp_sap-benum.
    SELECT SINGLE * FROM zwm_intf_omp_sap
      INTO CORRESPONDING FIELDS OF zwm_intf_omp_sap
     WHERE lgnum = p_lgnum
       AND benum = zwm_intf_omp_sap-benum.
    IF sy-subrc NE 0.
      CLEAR zwm_intf_omp_sap.
      zwm_intf_omp_sap-benum = l_benum.
      MESSAGE 'CI Number no existe' TYPE 'E'.
    ENDIF.
  ENDIF.
ENDMODULE.
