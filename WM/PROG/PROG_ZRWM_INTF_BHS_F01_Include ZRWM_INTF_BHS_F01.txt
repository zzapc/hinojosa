*&---------------------------------------------------------------------*
*&  Include           ZRWM_INTF_BHS_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_data .
  DATA: lv_bhs_bobina TYPE repid VALUE 'INTF_BHS_BOBINA',
        lv_param1     TYPE zeparam VALUE '01',
        lv_proc       TYPE xfeld.

  IF p_proc IS NOT INITIAL.
    lv_proc = abap_true.
  ELSEIF p_noproc IS NOT INITIAL.
    lv_proc = abap_false.
  ENDIF.

  IF p_all IS INITIAL.
* seleccionamos procesados o no procesados
    SELECT * FROM zwm_intf_bhs
      INTO CORRESPONDING FIELDS OF TABLE gt_data
      WHERE id IN s_id AND
            lgnum = p_lgnum AND
            fecha IN s_fecha AND
            hora  IN s_hora AND
            pos_fich IN s_pos AND
            cod_etiqueta IN s_etiq AND
            calidad IN s_calid AND
            orden_bhs IN s_orden AND
            matnr IN s_matnr AND
            charg IN s_charg AND
            porta_bobinas IN s_estac AND
            procesado = lv_proc.
  ELSE.
* seleccionamos todo
    SELECT * FROM zwm_intf_bhs
      INTO CORRESPONDING FIELDS OF TABLE gt_data
      WHERE id IN s_id AND
            lgnum = p_lgnum AND
            fecha IN s_fecha AND
            hora  IN s_hora AND
            pos_fich IN s_pos AND
            calidad IN s_calid AND
            orden_bhs IN s_orden AND
            matnr IN s_matnr AND
            charg IN s_charg AND
            porta_bobinas IN s_estac AND
            cod_etiqueta IN s_etiq .
  ENDIF.

  SELECT *
    FROM ztwm001
    INTO CORRESPONDING FIELDS OF TABLE gt_hard
    WHERE cprog  = lv_bhs_bobina AND
          param2 = lv_param1.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARI  text
*----------------------------------------------------------------------*
FORM f_dame_variant  CHANGING pc_vari TYPE slis_vari.
  DATA: ls_variant TYPE disvariant,
        lv_exit    TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'LVC_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = lv_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    CHECK lv_exit EQ space.
    pc_vari = ls_variant-variant.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SHOW_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_show_data .
* mostrar ALV con datos de GT_data
  DATA: lv_functions        TYPE REF TO cl_salv_functions_list,
        lv_title            TYPE lvc_title,
        lv_display_settings TYPE REF TO cl_salv_display_settings,
        lv_selections       TYPE REF TO cl_salv_selections,
        lv_events           TYPE REF TO cl_salv_events_table,
        lv_layout           TYPE REF TO cl_salv_layout,
        lv_lay              TYPE slis_vari,
        lv_key              TYPE salv_s_layout_key.

  IF gt_data[] IS NOT INITIAL.

    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = go_table
          CHANGING
            t_table      = gt_data.           "internal table


        lv_display_settings = go_table->get_display_settings( ).
        lv_title = 'Consumos de máquina recibidos'.
        lv_display_settings->set_list_header( lv_title ).
        lv_display_settings->set_fit_column_to_table_size( abap_true ).
        lv_display_settings->set_striped_pattern( abap_true ).

* grabamos el layout
        lv_layout = go_table->get_layout( ).
        lv_key-report = sy-repid.
        lv_layout->set_key( lv_key ).
        lv_layout->set_default( abap_true ).
        lv_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
        IF p_vari IS NOT INITIAL.
          MOVE p_vari TO lv_lay.
          lv_layout->set_initial_layout( lv_lay ).
        ENDIF.

        lv_functions = go_table->get_functions( ).
        lv_functions->set_all( abap_true ).
        lv_functions->set_export_xml( abap_true ).
        lv_functions->set_export_spreadsheet( abap_true ).
        lv_functions->set_view_lotus( abap_false ).
        lv_functions->set_graphics( abap_false ).
        lv_functions->set_export_localfile( abap_true ).
        lv_functions->set_view_excel( abap_true ).

* Enable cell selection mode
        lv_selections = go_table->get_selections( ).
        lv_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).
        go_table->set_screen_status( pfstatus = 'ZALV_STATUS'
                                    report = sy-repid
                                    set_functions = go_table->c_functions_all ).

        lv_events = go_table->get_event( ).
        IF go_handler IS NOT BOUND.
          CREATE OBJECT go_handler.
        ENDIF.
        SET HANDLER go_handler->on_link_click FOR lv_events.
        SET HANDLER go_handler->on_user_command FOR lv_events.

        PERFORM f_modifica_cabeceras.
* Display table
        go_table->display( ).
      CATCH cx_salv_msg.
    ENDTRY.
  ELSE.
    MESSAGE text-e01 TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIFICA_CABECERAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_modifica_cabeceras .
  DATA: lo_cols       TYPE REF TO cl_salv_columns,
        lo_column_tab TYPE REF TO cl_salv_column_table,
        lt_dd03l      TYPE enh_t_dd03l,
        lv_text       TYPE string,
        lo_column     TYPE REF TO cl_salv_column.

  SELECT *
  INTO CORRESPONDING FIELDS OF TABLE lt_dd03l
  FROM dd03l
  WHERE tabname = 'ZWM_INTF_BHS'.

  lo_cols = go_table->get_columns( ).
  lo_cols->set_optimize( abap_true ).

  LOOP AT lt_dd03l ASSIGNING FIELD-SYMBOL(<wa_field>).
    TRY.
        CASE <wa_field>-fieldname.
          WHEN 'MANDT'.
            lo_column = lo_cols->get_column( <wa_field>-fieldname ).
            lo_column->set_technical( abap_true ).
          WHEN OTHERS.

*            lo_column = lo_cols->get_column( <wa_field>-fieldname ).
            lv_text = <wa_field>-fieldname.
            PERFORM f_modif_columna USING <wa_field>-fieldname lv_text lo_cols.
*                                    CHANGING lo_column.
        ENDCASE.
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER

    ENDTRY.
  ENDLOOP.

  PERFORM f_modif_columna USING 'MATNR' 'Material' lo_cols.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'MATNR' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).

  PERFORM f_modif_columna USING 'COD_ETIQUETA' 'Unidad almacén' lo_cols.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'COD_ETIQUETA' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).

  PERFORM f_modif_columna USING 'TANUM' 'Número OT' lo_cols.
  PERFORM f_modif_columna USING 'TBNUM' 'Número NT' lo_cols.
  PERFORM f_modif_columna USING 'MBLNR' 'Doc. material' lo_cols.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'MBLNR' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).

  PERFORM f_modif_columna USING 'FECHA' 'Fecha' lo_cols.
  PERFORM f_modif_columna USING 'POS_FICH' 'Posición ID' lo_cols.
  PERFORM f_modif_columna USING 'UA_PRODUCIDA' 'UA producida' lo_cols.
  PERFORM f_modif_columna USING 'MATNR_PROD' 'Material producido' lo_cols.
  PERFORM f_modif_columna USING 'HORA' 'Hora' lo_cols.
  PERFORM f_modif_columna USING 'PORTA_BOBINAS' 'Estación' lo_cols.
  PERFORM f_modif_columna USING 'METROS_RESTANTES' 'M.restantes' lo_cols.
  PERFORM f_modif_columna USING 'METROS_DESARROLLADOS' 'M.desarrollados' lo_cols.
  PERFORM f_modif_columna USING 'CALIDAD' 'Calidad' lo_cols.
  PERFORM f_modif_columna USING 'ORDEN_BHS' 'Orden' lo_cols.
  PERFORM f_modif_columna USING 'CHARG' 'Lote' lo_cols.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'CHARG' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'UA_PRODUCIDA' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).

  PERFORM f_modif_columna USING 'MJAHR' 'Ejercicio' lo_cols.
  PERFORM f_modif_columna USING 'MESSAGE' 'Mensaje' lo_cols.
  PERFORM f_modif_columna USING 'CANT_CONSUMO' 'Consumo' lo_cols.
  PERFORM f_modif_columna USING 'CANT_CONSUMO_KG' 'Consumo kg.' lo_cols.
  PERFORM f_modif_columna USING 'CANT_DIF' 'Diferencia' lo_cols.
  PERFORM f_modif_columna USING 'CANT_DIF_KG' 'Diferencia kg.' lo_cols.
  PERFORM f_modif_columna USING 'COD_CONSUMO' 'Código consumo' lo_cols.
  PERFORM f_modif_columna USING 'STOCK_SAP' 'Stock SAP' lo_cols.
  PERFORM f_modif_columna USING 'STOCK_SAP_KG' 'Stock kg. SAP' lo_cols.
  PERFORM f_modif_columna USING 'TOLERANCIA' 'Tolerancia' lo_cols.
  PERFORM f_modif_columna USING 'PROCESADO' 'Procesado' lo_cols.
  PERFORM f_modif_columna USING 'CONTABILIZADO' 'Contabilizado' lo_cols.
  PERFORM f_modif_columna USING 'MEINH' 'UM alt.' lo_cols.
  PERFORM f_modif_columna USING 'MEINS_TOL' 'UM tol.' lo_cols.
  PERFORM f_modif_columna USING 'LGNUM' 'Núm.alm.' lo_cols.
  PERFORM f_modif_columna USING 'WERKS' 'Centro' lo_cols.
  PERFORM f_modif_columna USING 'DIAMETRO_REST' 'Diámetro rest.' lo_cols.
  PERFORM f_modif_columna USING 'COD_MAQUINA_PRINCIPAL' 'Máquina' lo_cols.
  PERFORM f_modif_columna USING 'COD_OPERARIO' 'Operario' lo_cols.
  PERFORM f_modif_columna USING 'RSNUM' 'Reserva' lo_cols.
  PERFORM f_modif_columna USING 'RSPOS' 'Pos.res.' lo_cols.
  PERFORM f_modif_columna USING 'RSART' 'Clase reg.' lo_cols.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'PROCESADO' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>checkbox ).

  TRY.
      lo_column_tab ?= lo_cols->get_column( 'CONTABILIZADO' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>checkbox ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIF_COLUMNA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_TEXT  text
*      <--P_LO_COLUMN  text
*----------------------------------------------------------------------*
FORM f_modif_columna USING  pe_field TYPE name_feld
                            pe_text TYPE string
                            po_cols TYPE REF TO cl_salv_columns.
  DATA: lv_short      TYPE scrtext_s,
        lv_med        TYPE scrtext_m,
        lv_long       TYPE scrtext_l,
        lv_len        TYPE lvc_outlen,
        lv_tool       TYPE lvc_tip,
        lo_column     TYPE REF TO cl_salv_column,
        lo_column_tab TYPE REF TO cl_salv_column_table.

  lo_column = po_cols->get_column( pe_field ).

  lv_long  = pe_text.
  lv_med   = pe_text.
  lv_short = pe_text.
  lo_column->set_long_text( lv_long ). "40
  lo_column->set_fixed_header_text( abap_true ).
  lo_column->set_medium_text( lv_med ). "20
  lo_column->set_short_text( lv_short ). "10
  lo_column->set_tooltip( lv_tool ).
  lv_len = strlen( pe_text ).
  lo_column->set_output_length( lv_len ).
  lo_column->set_zero( abap_true ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREA_MOV_291
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_LQUA  text
*      -->P_LS_ALV_ORDEN_BHS  text
*      -->P_LS_ALV_FECHA  text
*      -->P_LS_ALV_CANT_CONSUMO  text
*      <--P_LS_ALV_MBLNR  text
*      <--P_LS_ALV_MJAHR  text
*      <--P_LS_ALV_MESSAGE  text
*----------------------------------------------------------------------*
FORM f_crea_mov_291  USING    pi_lqua TYPE lqua
                              pi_id TYPE zwm_intf_bhs-id
                              pi_orden_bhs TYPE zwm_orden_bhs
                              pi_fecha TYPE dats
                              pi_stock_kg TYPE zwm_cant_consumo
                              pi_restantes TYPE zwm_metros_restantes
                              pi_rsnum TYPE rsnum " Kyvor - RDM - 20191107
                              pi_rspos TYPE rspos " Kyvor - RDM - 20191107
                              pi_rsart TYPE rsart " Kyvor - RDM - 20191107
                              pi_bloq TYPE flag
                              pi_alv  TYPE zwm_intf_bhs "APC20240422
                    CHANGING  pe_matnr TYPE matnr
                              pe_charg TYPE charg_d
                              pe_mblnr TYPE mblnr
                              pe_mjahr TYPE mjahr
                              pe_tolerancia TYPE zwm_valor_tolerancia
                              pe_meins_tol  TYPE zwm_um_tol
                              pe_stock TYPE zwm_intf_bhs-stock_sap
                              pe_cantdif TYPE zwm_intf_bhs-cant_dif
                              pe_cantcons TYPE zwm_intf_bhs-cant_consumo
                              pe_meinh TYPE meinh
                              pe_cantdifkg TYPE zwm_intf_bhs-cant_dif_kg
                              pe_cantconskg TYPE zwm_intf_bhs-cant_consumo_kg
                              pe_message TYPE bapi_msg
                              pe_procesado TYPE xfeld.

  CONSTANTS: lc_03         TYPE gm_code VALUE '03'. " MB1A - Goods Issue

  TYPES:
    gtty_res_itm_new  TYPE TABLE OF bapi2093_res_item_new WITH DEFAULT KEY .
  DATA: lt_itm_chg  TYPE TABLE OF bapi2093_res_item_change WITH DEFAULT KEY,
        lt_itm_chgx TYPE TABLE OF bapi2093_res_item_changex WITH DEFAULT KEY.

  CLEAR pe_message .
  DATA: ls_header TYPE bapi2017_gm_head_01,
        ls_code   TYPE bapi2017_gm_code,
        ls_ewm    TYPE /spe/bapi2017_gm_ref_ewm,
        lt_item   TYPE STANDARD TABLE OF bapi2017_gm_item_create,
        ls_item   TYPE bapi2017_gm_item_create,
        lt_ret    TYPE bapiret2_t.
  DATA l_restantes TYPE zwm_cant_dif.
  DATA l_menge_in TYPE bstmg.
  DATA: l_restantes_kg TYPE bstmg.
  DATA: l_ancho   TYPE i,
        l_gramaje TYPE i.
  DATA: lt_sel TYPE TABLE OF rsparamsl_255.

  IF pi_lqua IS NOT INITIAL.
* cabecera de Movimiento con referencia a Orden BHS
    ls_header-pstng_date = pi_fecha.
    ls_header-doc_date   = pi_fecha.
    ls_header-ref_doc_no = pi_orden_bhs.
    ls_header-pr_uname   = sy-uname.
    READ TABLE gt_hard ASSIGNING FIELD-SYMBOL(<hc>)
                        WITH KEY param1 = 'HEADER_TEXT'.
    IF sy-subrc EQ 0.
      ls_header-header_txt = <hc>-valor1.
    ENDIF.

* datos de la UA que genera el movimiento
    ls_item-plant    = pi_lqua-werks.
    ls_item-stge_loc = pi_lqua-lgort.
    ls_item-material = pe_matnr = pi_lqua-matnr.
    ls_item-batch  = pe_charg = pi_lqua-charg.
    READ TABLE gt_hard ASSIGNING <hc>
                        WITH KEY param1 = 'MOVEMENT_TYPE'.
    IF sy-subrc EQ 0.
      ls_item-move_type = <hc>-valor1.
    ENDIF.
* codigo de tipo de movimiento de mercancias
    ls_code-gm_code = lc_03.

    l_restantes = pi_restantes. " metros/unidades restantes
    l_menge_in = pi_stock_kg. " kilogramos en stock

*   Convertimos de KG a la unidad de medida que corresponda
    SELECT matnr, meinh INTO TABLE @DATA(lt_marm)
    FROM marm
    WHERE matnr = @pi_lqua-matnr.

    READ TABLE lt_marm INTO DATA(ls_marm) WITH KEY meinh = 'M'.
    IF sy-subrc = 0.
      pe_meinh = ls_marm-meinh.
    ELSE.
      CLEAR: ls_marm.
      READ TABLE lt_marm INTO ls_marm WITH KEY meinh = 'ST'.
      IF sy-subrc = 0.
        pe_meinh = ls_marm-meinh.
      ELSE.
        pe_message = 'Error en UMA para el material, no tiene M o UN'.
        EXIT.
      ENDIF.
    ENDIF.

*   Convertimos a KG
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = pi_lqua-matnr
        i_in_me              = pe_meinh
        i_out_me             = 'KG'
        i_menge              = l_restantes
      IMPORTING
        e_menge              = l_restantes_kg
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.

*   Verificamos la tolerancia
    SELECT SINGLE *
      INTO @DATA(ls_tolerancia)
      FROM zwm_tolerancia
      WHERE werks = @pi_lqua-werks AND
            lgort = @pi_lqua-lgort AND
            meins = @pe_meinh.

    IF ls_tolerancia-dinamico IS INITIAL.
      MOVE ls_tolerancia-tolerancia TO pe_tolerancia.
      MOVE pe_meinh TO pe_meins_tol.
    ELSE.
      MOVE ls_item-material+10(4) TO l_gramaje.
      MOVE ls_item-material+14(4) TO l_ancho.
      pe_tolerancia = ( ls_tolerancia-minutos * ls_tolerancia-velocidad * l_gramaje * l_ancho ) / 1000000.
      pe_tolerancia = trunc( pe_tolerancia ).
      MOVE 'KG' TO pe_meins_tol.
    ENDIF.

    IF abs( l_restantes ) LE pe_tolerancia AND ls_tolerancia-dinamico IS INITIAL. " consumo total no dinámico
      ls_item-entry_qnt = l_menge_in.
      ls_item-entry_uom = 'KG'.
    ELSEIF abs( l_restantes_kg ) LE pe_tolerancia AND ls_tolerancia-dinamico IS NOT INITIAL.  " consumo total dinámico
      ls_item-entry_qnt = l_menge_in.
      ls_item-entry_uom = 'KG'.
    ELSE. " calculamos diferencia entre kgs restantes y actuales (cvivo), consumo parcial
      ls_item-entry_qnt = l_menge_in - l_restantes_kg.

      IF ls_item-entry_qnt BETWEEN 0 AND 1.
        ls_item-entry_qnt = 1. " para evitar decimales
      ELSEIF ls_item-entry_qnt GE 1.
        ls_item-entry_qnt = trunc( ls_item-entry_qnt ). " para evitar decimales
      ENDIF.
      ls_item-entry_uom = 'KG' .
    ENDIF.

* cvivo - rellenar datos adicionales de consumo
    pe_cantdifkg = pi_stock_kg - l_restantes_kg.
    pe_cantconskg = ls_item-entry_qnt. " a nivel informativo para actualizar tabla

    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = pi_lqua-matnr
        i_in_me              = 'KG'
        i_out_me             = pe_meinh
        i_menge              = pi_stock_kg
      IMPORTING
        e_menge              = pe_stock " stock en M/UN
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.

    pe_cantdif = pe_stock - l_restantes.

    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = pi_lqua-matnr
        i_in_me              = 'KG'
        i_out_me             = pe_meinh
        i_menge              = pe_cantconskg
      IMPORTING
        e_menge              = pe_cantcons " consumo en M/UN
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.

    " cvivo - 58678 Incidencia si la reserva no existe, pasamos de ella
    SELECT SINGLE @abap_true FROM resb
      WHERE rsnum EQ @pi_rsnum
      INTO @DATA(result).

    IF sy-subrc EQ 0.
      SELECT SINGLE @abap_true FROM resb
        INTO @result
        WHERE rsnum EQ @pi_rsnum
          AND rspos EQ @pi_rspos
          AND matnr EQ @ls_item-material.

      IF sy-subrc NE 0." si pertenece a otro material, añadimos este material a la reserva
        DATA(lt_itm_new) = VALUE gtty_res_itm_new( (
              material = ls_item-material
              plant = ls_item-plant
              stge_loc = ls_item-stge_loc
              entry_qnt = ls_item-entry_qnt
              entry_uom = ls_item-entry_uom
              movement = abap_true
              item_text = 'Pos.añadida desde reintento ZWM_CONSUMO'
              ) ).

        CALL FUNCTION 'BAPI_RESERVATION_CHANGE'
          EXPORTING
            reservation               = pi_rsnum
          TABLES
            reservationitems_changed  = lt_itm_chg
            reservationitems_changedx = lt_itm_chgx
            reservationitems_new      = lt_itm_new
            return                    = lt_ret.

        LOOP AT lt_ret TRANSPORTING NO FIELDS WHERE type CA 'XAE'.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ENDLOOP.
        IF sy-subrc NE 0.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.
          WAIT UP TO 1 SECONDS.

          SELECT SINGLE rspos FROM resb
          INTO @DATA(lv_rspos)
          WHERE rsnum EQ @pi_rsnum
          AND matnr EQ @ls_item-material.
        ENDIF.
      ENDIF.

      "BEG Kyvor - RDM - 20191107
      " add reservation info
      ls_item-reserv_no = pi_rsnum.
      ls_item-res_item = COND #( WHEN lv_rspos EQ space THEN pi_rspos ELSE lv_rspos ).
      ls_item-res_type = pi_rsart.
      "END Kyvor - RDM - 20191107
    ENDIF.

    IF pi_bloq IS NOT INITIAL. " cvivo - WM Pacs
*      zcl_wm_gestion_stocks=>create_transf_stock(
*      EXPORTING
*        iv_lgnum            = pi_lqua-lgnum    " Núm.almacén/Complejo alm.
*        iv_lgtyp            = pi_lqua-lgtyp    " Tipo almacén
*        iv_bwlvs            = '853'    " Cl.movim.gestión almacenes -> 853
*        iv_lenum            = pi_lqua-lenum    " Número de unidad de almacén
*      EXCEPTIONS
*        no_authority        = 1
*        no_enqueue_possible = 2
*        error_wm_posting    = 3
*        error_im_posting    = 4
*        OTHERS              = 5 ).
*
*      WAIT UP TO 1 SECONDS.
      ls_item-stck_type = 'S'.
    ENDIF.



*    DATA(wl_centro) = zcl_wm_nt_generic=>get_instance( )->centros_getdetail( ls_item-plant ).
    IF ls_item-entry_qnt GT l_menge_in OR ls_item-entry_qnt LE 0.
*      "JCB 10.11.20. Desactivar esta funcionalidad. Se va a hacer con una function import distinta
*      " implementar aquí la lógica para verificar si se puede regularizar unidad de almacén (ZWM_RF_FUNC)
*
*      IF wl_centro-consumos_puede_regularizar_ua = 'X'.
*        "Obtener tipo movimiento para inventario
*        READ TABLE gt_hard ASSIGNING <hc> WITH KEY param1 = 'MOVEMENT_TYPE_INV'.
*        IF sy-subrc EQ 0.
*          ls_item-move_type = <hc>-valor1.
*          ls_item-stge_bin  = pi_lqua-lgpla.
*
*        ELSE.
*          pe_message = 'No se ha parametrizado el tipo de movimiento de inventario'.
*        ENDIF.
*
*      ELSE.
      pe_message = 'Cantidad en stock menor que cantidad a consumir'.
      RETURN.
*      ENDIF.
    ENDIF.

* ini - cvivo - 05.11.2020 62668 Primero verificar si existe un registro pte de procesar
    IF p_retry IS NOT INITIAL.
      SELECT SINGLE @abap_true FROM zwm_intf_bhs
      WHERE cod_etiqueta EQ @pi_lqua-lenum
        AND lgnum EQ @pi_lqua-lgnum
      AND procesado EQ @space
      INTO @DATA(previous).

      IF sy-subrc EQ 0. " hay algún registro pendiente de procesar para esa etiqueta, intentamos procesar primero
        REFRESH: lt_sel.

        lt_sel = VALUE #(
        ( selname = 'P_REPRO'   kind = 'P' sign = 'I' option = 'EQ' low = abap_true  ) " Reprocess parameter
        ( selname = 'P_PROC'    kind = 'P' sign = 'I' option = 'EQ' low = abap_false  )
        ( selname = 'P_NOPROC'  kind = 'P' sign = 'I' option = 'EQ' low = abap_true  ) " Only not processed
        ( selname = 'P_ALL'     kind = 'P' sign = 'I' option = 'EQ' low = abap_false  )
        ( selname = 'P_LGNUM'   kind = 'P' sign = 'I' option = 'EQ' low = pi_lqua-lgnum  ) " Whse number
        ( selname = 'S_ETIQ'    kind = 'S' sign = 'I' option = 'EQ' low = pi_lqua-lenum  ) " UA
        ( selname = 'S_ID'      kind = 'S' sign = 'E' option = 'EQ' low = pi_id ) " Excluímos este ID
        ( selname = 'P_VARI'    kind = 'P' sign = 'I' option = 'EQ' low = '/ASCENDENTE' ) " variante ascendente para reprocesar en orden
        ).

        " 1 - must do a submit to tcode ZWM_CONSUMO
        SUBMIT zrwm_intf_bhs
        WITH SELECTION-TABLE lt_sel
        EXPORTING LIST TO MEMORY
          AND RETURN.
      ENDIF.
    ENDIF.
* fin - cvivo - 05.11.2020

    APPEND ls_item TO lt_item.

    IF pi_alv-bwart = '261'.
* Pendiente de decidir que hacer con el reproceso

    ELSE.
      CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
        EXPORTING
          goodsmvt_header  = ls_header
          goodsmvt_code    = ls_code
        IMPORTING
          materialdocument = pe_mblnr
          matdocumentyear  = pe_mjahr
        TABLES
          goodsmvt_item    = lt_item
          return           = lt_ret.

      LOOP AT lt_ret INTO DATA(ls_ret) WHERE type = 'E' OR
                                             type = 'A'.
        EXIT.
      ENDLOOP.
      IF sy-subrc IS INITIAL.
        pe_message = ls_ret-message.
      ENDIF.
      IF pe_mblnr IS NOT INITIAL AND pe_mjahr IS NOT INITIAL.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREA_OT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_LQUA  text
*      -->P_LS_ALV_MBLNR  text
*      -->P_LS_ALV_MJAHR  text
*      <--P_LS_ALV_TBNUM  text
*      <--P_LS_ALV_TANUM  text
*----------------------------------------------------------------------*
FORM f_crea_ot  USING    pi_lqua TYPE lqua
                         pi_mblnr TYPE mblnr
                         pi_mjahr TYPE mjahr.
*                CHANGING pe_tbnum TYPE tbnum " DEL - cvivo- NUNCA se debe cambiar TBNUM ni RSNUM de la tabla, lo usa UI5 para identificar
*                         pe_tanum TYPE tanum.
  DATA: ls_ltbk  TYPE ltbk,
        lt_ltbp  TYPE STANDARD TABLE OF ltbp,
        lt_trite TYPE l03b_trite_t,
        ls_trite TYPE l03b_trite,
        l_tanum  TYPE tanum.

  SELECT SINGLE *
   INTO ls_ltbk
   FROM ltbk
   WHERE lgnum = pi_lqua-lgnum AND
         mblnr = pi_mblnr AND
         mjahr = pi_mjahr.

  IF sy-subrc EQ 0.

    SELECT * INTO TABLE lt_ltbp
               FROM ltbp
               WHERE lgnum = pi_lqua-lgnum AND
                     tbnum = ls_ltbk-tbnum.

    LOOP AT lt_ltbp INTO DATA(ls_ltbp).
      ls_trite-tbpos = ls_ltbp-tbpos.
      ls_trite-altme = ls_ltbp-meins.
      ls_trite-anfme = ls_ltbp-menge.
      ls_trite-charg = ls_ltbp-charg.
      ls_trite-nltyp = ls_ltbk-nltyp.
      ls_trite-nlpla = ls_ltbk-nlpla.

      ls_trite-vlpla = pi_lqua-lgpla.
      ls_trite-vltyp = pi_lqua-lgtyp.
      ls_trite-letyp = pi_lqua-letyp.

      APPEND ls_trite TO lt_trite.
    ENDLOOP.

    CALL FUNCTION 'L_TO_CREATE_TR'
      EXPORTING
        i_lgnum                        = pi_lqua-lgnum
        i_tbnum                        = ls_ltbk-tbnum
        i_squit                        = abap_true
        i_tbeli                        = abap_true
        it_trite                       = lt_trite
      IMPORTING
        e_tanum                        = l_tanum
      EXCEPTIONS
        foreign_lock                   = 1
        qm_relevant                    = 2
        tr_completed                   = 3
        xfeld_wrong                    = 4
        ldest_wrong                    = 5
        drukz_wrong                    = 6
        tr_wrong                       = 7
        squit_forbidden                = 8
        no_to_created                  = 9
        update_without_commit          = 10
        no_authority                   = 11
        preallocated_stock             = 12
        partial_transfer_req_forbidden = 13
        input_error                    = 14
        error_message                  = 16
        OTHERS                         = 15.

    IF l_tanum IS NOT INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_REPROCESA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_reprocesa .
  DATA: ls_alv   TYPE  zwm_intf_bhs,
        lv_index TYPE syst_tabix.

  SORT gt_data BY fecha hora ASCENDING.

  LOOP AT gt_data INTO ls_alv WHERE procesado EQ space AND contabilizado EQ space.
    lv_index = sy-tabix.

    PERFORM f_reprocesa_linea CHANGING ls_alv .

    MODIFY gt_data FROM ls_alv INDEX lv_index.

    IF ls_alv-contabilizado IS INITIAL.
      IF ls_alv-message IS INITIAL. " cvivo - 57939 Si no hay doc.mat. ni mensaje, informamos nuestro mensaje
        ls_alv-message = 'No se ha podido contabilizar, el registro permanece pendiente de procesar'.
      ENDIF.

      UPDATE zwm_intf_bhs SET message = ls_alv-message
                              procesado = space " cvivo - 57939 Si no hay doc.mat. no marcamos nunca procesado
                              contabilizado = ls_alv-contabilizado
                              cod_etiqueta = ls_alv-cod_etiqueta
                              matnr = ls_alv-matnr
                              charg = ls_alv-charg
                              tolerancia = ls_alv-tolerancia
*                              rsnum = ls_alv-rsnum "KYV/RDM - 20191126 " DEL - cvivo - Respetar estos datos de origen
*                              rspos = ls_alv-rspos "KYV/RDM - 20191126 " DEL - cvivo - Respetar estos datos de origen
*                              rsart = ls_alv-rsart "KYV/RDM - 20191126 " DEL - cvivo - Respetar estos datos de origen
                              diametro_rest = ls_alv-diametro_rest "KYV/RDM - 20191126
                              WHERE id = ls_alv-id AND
                                    fecha = ls_alv-fecha AND
                                    hora = ls_alv-hora AND
                                    pos_fich = ls_alv-pos_fich AND
                                    cod_etiqueta = ls_alv-cod_etiqueta.
    ELSE.
      UPDATE zwm_intf_bhs SET message = ls_alv-message
                              procesado = ls_alv-procesado
                              contabilizado = ls_alv-contabilizado
                              mblnr = ls_alv-mblnr
                              mjahr = ls_alv-mjahr
*                              tbnum = ls_alv-tbnum " DEL - cvivo - Respetar estos datos de origen
                              tanum = ls_alv-tanum
                              cod_etiqueta = ls_alv-cod_etiqueta
                              matnr = ls_alv-matnr
                              charg = ls_alv-charg
                              tolerancia = ls_alv-tolerancia
                              meins_tol = ls_alv-meins_tol
                              stock_sap = ls_alv-stock_sap
                              cant_dif = ls_alv-cant_dif
                              cant_consumo = ls_alv-cant_consumo
                              meinh = ls_alv-meinh
                              stock_sap_kg = ls_alv-stock_sap_kg
                              cant_dif_kg = ls_alv-cant_dif_kg
                              cant_consumo_kg = ls_alv-cant_consumo_kg
*                              rsnum = ls_alv-rsnum "KYV/RDM - 20191126 " DEL - cvivo - Respetar estos datos de origen
*                              rspos = ls_alv-rspos "KYV/RDM - 20191126 " DEL - cvivo - Respetar estos datos de origen
*                              rsart = ls_alv-rsart "KYV/RDM - 20191126 " DEL - cvivo - Respetar estos datos de origen
                              diametro_rest = ls_alv-diametro_rest "KYV/RDM - 20191126
                        WHERE id = ls_alv-id AND
                              fecha = ls_alv-fecha AND
                              hora = ls_alv-hora AND
                                    pos_fich = ls_alv-pos_fich AND
                                    cod_etiqueta = ls_alv-cod_etiqueta.
    ENDIF.
    COMMIT WORK AND WAIT.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_REPROCESA_LINEA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_ALV  text
*----------------------------------------------------------------------*
FORM f_reprocesa_linea  CHANGING pc_alv TYPE zwm_intf_bhs.

  DATA: ls_lqua                TYPE lqua,
        l_text                 TYPE char20,
        lv_bwlvs_exp           TYPE ltak-bwlvs,
        lv_nltyp_exp           TYPE ltap-nltyp,
        lv_nlber_exp           TYPE  ltap-nlber,
        lv_nlpla_exp           TYPE  ltap-nlpla,
        lv_lenum               TYPE lein-lenum,
        lv_tanum               TYPE  ltak-tanum,
        lv_nltyp               TYPE ltap-nltyp,
        lv_nlber               TYPE  ltap-nlber,
        lv_nlpla               TYPE  ltap-nlpla,
        lv_nppos               TYPE  ltap-nppos,
        lt_ltap_move_su        TYPE TABLE OF ltap_move_su,
        lt_ltak                TYPE TABLE OF ltak_vb,
        lt_ltap_vb             TYPE TABLE OF ltap_vb,
        lref_exc               TYPE REF TO cx_root,
        lv_error               TYPE string,
        lv_vengo_inter_consumo TYPE xfeld,
        lv_cod_maq_portabo     TYPE zwm_param-maquina,
        lt_rspar               TYPE TABLE OF rsparams,
        ls_rspar               TYPE rsparams.

  CLEAR ls_lqua.

  SELECT SINGLE * INTO ls_lqua
  FROM lqua
  WHERE lgnum = p_lgnum AND
        lenum = pc_alv-cod_etiqueta AND
        verme > 0.

  SELECT * FROM ltap
    INTO TABLE @DATA(lt_ltap)
    UP TO 1 ROWS
    WHERE lgnum EQ @p_lgnum
       AND ( nlenr EQ @pc_alv-cod_etiqueta
       OR vlenr EQ @pc_alv-cod_etiqueta )
    ORDER BY tanum DESCENDING. " coger última OT

  IF sy-subrc EQ 0.
    DATA(ls_ltap) = lt_ltap[ 1 ].

    pc_alv-matnr = ls_ltap-matnr.
    pc_alv-charg = ls_ltap-charg.

    SELECT SINGLE * FROM mchb
      WHERE charg EQ @ls_ltap-charg
        AND lgort EQ @ls_ltap-lgort
        AND werks EQ @g_werks
        AND clabs > 0
      INTO @DATA(ls_mchb).

    IF sy-subrc NE 0.      " cvivo - la UA existe, pero ya no está en stock.
*      pc_alv-procesado = abap_true. " lo marcamos como procesado " 58201 - No se marca procesado, que se vea como error
      SELECT SINGLE * FROM mchb
        INTO ls_mchb
        WHERE charg EQ ls_ltap-charg
        AND lgort EQ ls_ltap-lgort
        AND werks EQ g_werks
        AND cspem > 0. " stock bloqueado

      IF sy-subrc NE 0.
        pc_alv-message = 'La UA existe pero ya está consumida'.
        EXIT.
      ENDIF.
    ENDIF.

    IF ls_mchb IS NOT INITIAL AND ls_lqua IS INITIAL. " existe pero con otra UA, la buscamos
      SELECT SINGLE * FROM lqua
        INTO ls_lqua
        WHERE charg EQ ls_ltap-charg
          AND lgnum EQ p_lgnum
          AND gesme > 0.

      IF sy-subrc EQ 0 AND ls_lqua-lenum NE space. " copiamos el nuevo número de UA
        pc_alv-matnr = ls_lqua-matnr.
        pc_alv-charg = ls_lqua-charg.
        pc_alv-cod_etiqueta = ls_lqua-lenum.
      ENDIF.
    ENDIF.
  ENDIF.

  IF NOT ls_lqua-lenum IS INITIAL AND ls_mchb IS NOT INITIAL.
    pc_alv-stock_sap_kg = ls_mchb-clabs + ls_mchb-cspem. " cvivo - incluímos stock bloqueado

    IF pc_alv-contabilizado IS INITIAL.
      IF ls_mchb-cspem > 0.
        DATA(bloq) = 'X'.
      ENDIF.

      PERFORM f_crea_mov_291
                       USING ls_lqua
                              pc_alv-id
                              pc_alv-orden_bhs
                              pc_alv-fecha
                              pc_alv-stock_sap_kg
                              pc_alv-metros_restantes
                              pc_alv-rsnum " Kyvor - RDM - 20191107
                              pc_alv-rspos " Kyvor - RDM - 20191107
                              pc_alv-rsart " Kyvor - RDM - 20191107
                              bloq
                              pc_alv "APC20240422
                    CHANGING pc_alv-matnr
                             pc_alv-charg
                             pc_alv-mblnr
                             pc_alv-mjahr
                             pc_alv-tolerancia
                             pc_alv-meins_tol
                             pc_alv-stock_sap
                             pc_alv-cant_dif
                             pc_alv-cant_consumo
                             pc_alv-meinh
                             pc_alv-cant_dif_kg
                             pc_alv-cant_consumo_kg
                             pc_alv-message
                             pc_alv-procesado.
    ENDIF.

    IF pc_alv-mblnr IS NOT INITIAL AND pc_alv-mjahr IS NOT INITIAL.
      pc_alv-procesado = abap_true.
      pc_alv-contabilizado = abap_true. "" cvivo - 61834 - Añado control de contabilización para entendimiento de usuarios
      PERFORM f_crea_ot USING ls_lqua
                         pc_alv-mblnr
                         pc_alv-mjahr.
*               CHANGING pc_alv-tbnum " DEL - cvivo- NUNCA se debe cambiar TBNUM ni RSNUM de la tabla, lo usa UI5 para identificar
*                        pc_alv-tanum .
*      IF pc_alv-tanum IS INITIAL.
*        pc_alv-message = 'Contabilizado, pero error al crear OT'.
*      ENDIF.
    ENDIF.

***********INI RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
    IF pc_alv-metros_restantes > 0.
*      Hay picos
      SELECT SINGLE *
             FROM ztwm001
             INTO @DATA(ls_ztwm001_bwlvs)
             WHERE cprog  = @gc_nemesis_aprov
               AND param1 = @gc_param1_bwlvs_aprov
               AND param2 = @gc_param2_nemesis_aprov
               AND param3 = @p_lgnum.

      IF sy-subrc = 0.
        SELECT SINGLE *
          FROM ztwm001
          INTO @DATA(ls_ztwm001_nltyp)
          WHERE cprog  = @gc_nemesis_aprov
            AND param1 = @gc_param1_nltyp_aprov
            AND param2 = @gc_param2_nemesis_aprov
            AND param3 = @p_lgnum.

        IF sy-subrc = 0.
          SELECT SINGLE *
          FROM tvarvc
          INTO @DATA(ls_tvarvc)
          WHERE name = @gc_param1_tvarvc_name
            AND low = @pc_alv-porta_bobinas.  " cod_maquina
        ENDIF.
      ENDIF.

      IF ls_ztwm001_bwlvs IS NOT INITIAL AND ls_ztwm001_nltyp IS NOT INITIAL
      AND ls_tvarvc IS NOT INITIAL AND pc_alv-mblnr IS NOT INITIAL AND pc_alv-mjahr IS NOT INITIAL.
        CLEAR: lv_bwlvs_exp, lv_nltyp_exp, lv_nlpla_exp, lv_tanum,
                    lv_nltyp, lv_nlber, lv_nlpla, lv_nppos.

        REFRESH: lt_ltap_move_su, lt_ltak, lt_ltap_vb.

        WRITE ls_ztwm001_bwlvs-valor1 TO lv_bwlvs_exp.
        CONDENSE lv_bwlvs_exp.

        WRITE ls_ztwm001_nltyp-valor1 TO lv_nltyp_exp.
        CONDENSE lv_nltyp_exp.

        WRITE ls_tvarvc-high TO lv_nlpla_exp.
        CONDENSE lv_nlpla_exp.

        TRY.
            CALL FUNCTION 'L_TO_CREATE_MOVE_SU'
              EXPORTING
                i_lenum               = pc_alv-cod_etiqueta
                i_bwlvs               = lv_bwlvs_exp
                i_nltyp               = lv_nltyp_exp
                i_nlpla               = lv_nlpla_exp
              IMPORTING
                e_tanum               = lv_tanum
                e_nltyp               = lv_nltyp
                e_nlber               = lv_nlber
                e_nlpla               = lv_nlpla
                e_nppos               = lv_nppos
              TABLES
                t_ltap_move_su        = lt_ltap_move_su
                t_ltak                = lt_ltak
                t_ltap_vb             = lt_ltap_vb
              EXCEPTIONS
                not_confirmed_to      = 1
                foreign_lock          = 2
                bwlvs_wrong           = 3
                betyp_wrong           = 4
                nltyp_wrong           = 5
                nlpla_wrong           = 6
                nltyp_missing         = 7
                nlpla_missing         = 8
                squit_forbidden       = 9
                lgber_wrong           = 10
                xfeld_wrong           = 11
                drukz_wrong           = 12
                ldest_wrong           = 13
                no_stock_on_su        = 14
                su_not_found          = 15
                update_without_commit = 16
                no_authority          = 17
                benum_required        = 18
                ltap_move_su_wrong    = 19
                lenum_wrong           = 20
                error_message         = 22
                OTHERS                = 21.

            IF lv_tanum IS INITIAL.
              pc_alv-message = 'Procesado, pero error al crear segunda OT'.
            ENDIF.

            DATA(lv_impresion) = zcl_wm_rf_func=>check_parameter(
            EXPORTING
              iv_func   =  'CONSUMO_IMPRESION_MONITOR'   " ABA: Nombre de variables en variante
              iv_lgnum  =  pc_alv-lgnum   " Núm.almacén/Complejo alm.
              ).

            IF lv_impresion EQ abap_true.
*             Se lanza la impresión y se setea el Número de unidad de almacén
*            con el código de etiqueta
              SET PARAMETER ID 'LEN' FIELD pc_alv-cod_etiqueta.

*          Se exporta a memoria esta variable para no tocar
*          pantalla selección del programa de impresión ZIMPRESION_UA
*          En dicho programa, se hace el import
              lv_vengo_inter_consumo = 'X'.

              EXPORT lv_vengo_inter_consumo = lv_vengo_inter_consumo
              TO MEMORY ID 'VENGO_CONSUMO' .

              lv_cod_maq_portabo = pc_alv-porta_bobinas.

              EXPORT lv_cod_maq_portabo = lv_cod_maq_portabo
              TO MEMORY ID 'MAQUINA' .

              CLEAR: ls_rspar.
              REFRESH: lt_rspar.

              ls_rspar-kind = 'P'.
              ls_rspar-selname = 'P_LGNUM'.
              ls_rspar-sign = 'I'.
              ls_rspar-option = 'EQ'.
              ls_rspar-low = pc_alv-lgnum.
              APPEND ls_rspar TO lt_rspar.

              ls_rspar-kind = 'S'.
              ls_rspar-selname = 'S_LENUM'.
              ls_rspar-sign = 'I'.
              ls_rspar-option = 'EQ'.
              ls_rspar-low = pc_alv-cod_etiqueta.
              APPEND ls_rspar TO lt_rspar.

              SUBMIT zimpresion_ua WITH SELECTION-TABLE lt_rspar AND RETURN.
            ENDIF.

          CATCH cx_root INTO lref_exc.
            lv_error = lref_exc->get_text( ).
        ENDTRY.
      ENDIF.
    ENDIF.
***********FIN RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
  ENDIF.

* cvivo - 60590 - Log SLG1 en consumos
  FIELD-SYMBOLS: <l_s_my_context>  TYPE c.
  DATA: ls_log TYPE zwm_intf_bhs_log.
  CLEAR: g_msg, ls_log.
  IF pc_alv-message IS NOT INITIAL.
    IF pc_alv-procesado IS INITIAL. " error
      g_msg-msgty = 'E'.
    ELSE. " success
      g_msg-msgty = 'S'.
    ENDIF.

    g_msg-msgid = 'ZWM_CONSUMO'.
    g_msg-msgno = 000.
    g_msg-msgv1 = pc_alv-message(50).
    g_msg-msgv2 = pc_alv-message+50(50).
    g_msg-msgv3 = pc_alv-message+100(50).
    g_msg-msgv4 = pc_alv-message+150(50).

    g_msg-context-tabname = 'ZWM_INTF_BHS_LOG'.
    MOVE-CORRESPONDING pc_alv TO ls_log.
    ASSIGN ls_log TO <l_s_my_context> CASTING.
    g_msg-context-value = <l_s_my_context>. " id consumo en tabla

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = g_log_handle
        i_s_msg          = g_msg
      EXCEPTIONS
        log_not_found    = 1
        msg_inconsistent = 2
        log_is_full      = 3
        OTHERS           = 4.

    APPEND g_log_handle TO gt_log_handle.

    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_t_log_handle   = gt_log_handle
      EXCEPTIONS
        log_not_found    = 1
        save_not_allowed = 2
        numbering_error  = 3
        OTHERS           = 4.

    REFRESH: gt_log_handle.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_POP_UP_LENUM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LV_LENUM  text
*----------------------------------------------------------------------*
FORM f_popup_get_lenum  CHANGING pc_lenum TYPE lenum
                                 pc_error TYPE abap_bool.
  DATA: lt_vals       TYPE TABLE OF sval,
        lv_retcode(1),
        ls_vals       TYPE sval.
  CLEAR pc_error.

  CLEAR ls_vals.
  ls_vals-tabname   = 'LQUA'.
  ls_vals-fieldname = 'LENUM'.
  ls_vals-fieldtext = 'Nº UA (etiqueta)'.
  ls_vals-value = pc_lenum.
  APPEND ls_vals TO lt_vals.

  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
      popup_title     = 'Cambia la UA'
    IMPORTING
      returncode      = lv_retcode
    TABLES
      fields          = lt_vals
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.

  IF lv_retcode <> 'A'.
    READ TABLE lt_vals INTO ls_vals INDEX 1.
    IF sy-subrc EQ 0.
      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = ls_vals-value
        IMPORTING
          output          = pc_lenum
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      IF sy-subrc <> 0.
        pc_error = abap_true.
      ENDIF.

    ENDIF.
  ELSE.
    pc_error = abap_true.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_VALORES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_ALV  text
*      <--P_ENDIF  text
*----------------------------------------------------------------------*
FORM f_dame_valores  CHANGING pc_alv TYPE zwm_intf_bhs.
  DATA: ls_lqua     TYPE lqua,
        lv_aux      TYPE lein_mgewi,
        lv_unidad   TYPE meins,
        l_text      TYPE char20,
        l_restantes TYPE zwm_cant_dif.
  DATA: l_ancho      TYPE i,
        l_gramaje    TYPE i,
        lv_diam_rest TYPE bstmg.

  DATA: lv_gmein  TYPE gewei.


  READ TABLE gt_hard ASSIGNING FIELD-SYMBOL(<hc>) WITH KEY param1 = 'UNIDAD_TOLERANCIA'.
  IF sy-subrc EQ 0.
    lv_unidad = <hc>-valor1.
  ENDIF.

  SELECT SINGLE * INTO ls_lqua
    FROM lqua
    WHERE lgnum = p_lgnum AND
          lenum = pc_alv-cod_etiqueta AND
          verme > 0.

  IF NOT ls_lqua-lenum IS INITIAL.
    pc_alv-matnr = ls_lqua-matnr.
    pc_alv-charg = ls_lqua-charg.

* ini - cvivo - 57924 Si tiene diámetro, hay que recalcular los metros al cambiar la UA
    IF pc_alv-diametro_rest GT 0. " baja por diámetro: recalcular
      lv_diam_rest = pc_alv-diametro_rest.

      zcl_wm_nt_generic=>calc_base_diametro(
        EXPORTING
          iv_matnr          = pc_alv-matnr
          iv_werks          = pc_alv-werks
          iv_diam           = lv_diam_rest
        IMPORTING
          ev_m              = DATA(lv_m)
*          ev_dia            = DATA(lv_dia)
        EXCEPTIONS
          um_no_valid       = 1
          missing_constants = 2
          missing_matnr     = 3
          OTHERS            = 4 ).

*      PERFORM f_cambia_unidad USING pc_alv-matnr " convertimos a metros
*                                    lv_kg
*                                    'KG'
*                                    'M'
*                                    CHANGING lv_aux.

      pc_alv-metros_restantes = lv_m.
    ELSEIF pc_alv-diametro_rest EQ 0 AND pc_alv-metros_restantes IS INITIAL. " baja por diámetro igual a 0
      pc_alv-metros_restantes = 0.
    ENDIF.
* fin - cvivo - 57924
***********INI RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
*    Cambiamos a la unidad de medida que corresponda
    CLEAR: lv_gmein.

    SELECT matnr, meinh INTO TABLE @DATA(lt_marm)
    FROM marm
    WHERE matnr = @ls_lqua-matnr.

    READ TABLE lt_marm INTO DATA(ls_marm) WITH KEY meinh = 'M'.

    IF sy-subrc = 0.
      lv_gmein = ls_marm-meinh.
    ELSE.
      CLEAR: ls_marm.
      READ TABLE lt_marm INTO ls_marm WITH KEY meinh = 'ST'.

      IF sy-subrc = 0.
        lv_gmein = ls_marm-meinh.
      ENDIF.
    ENDIF.

    IF ls_lqua-meins <> lv_gmein.

      PERFORM f_cambia_unidad USING ls_lqua-matnr
                                    ls_lqua-verme
                                    ls_lqua-meins
                                    lv_gmein
                           CHANGING lv_aux .


***** cambiamos a M
****    IF ls_lqua-meins <> 'M'.
****      PERFORM f_cambia_unidad USING ls_lqua-matnr
****                                    ls_lqua-verme
****                                    ls_lqua-meins
****                                    'M'
****                      CHANGING lv_aux .

***********FIN RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
      pc_alv-stock_sap = lv_aux . " ls_lqua-gesme.
    ELSE.
      pc_alv-stock_sap = ls_lqua-verme.
    ENDIF.
    IF lv_unidad IS NOT INITIAL.
      SELECT SINGLE *
        INTO @DATA(ls_tolerancia)
        FROM zwm_tolerancia
        WHERE werks = @ls_lqua-werks AND
              lgort = @ls_lqua-lgort AND
              meins = @lv_unidad.

      IF ls_tolerancia-dinamico IS INITIAL.
        MOVE ls_tolerancia-tolerancia TO pc_alv-tolerancia.
        MOVE lv_unidad TO pc_alv-meins_tol.
      ELSE.
        MOVE ls_lqua-matnr+10(4) TO l_gramaje.
        MOVE ls_lqua-matnr+14(4) TO l_ancho.
        pc_alv-tolerancia = ( ls_tolerancia-minutos * ls_tolerancia-velocidad * l_gramaje * l_ancho ) / 1000000.
        pc_alv-tolerancia = trunc( pc_alv-tolerancia ).
        MOVE lv_gmein TO pc_alv-meins_tol.
      ENDIF.
    ENDIF.
    pc_alv-stock_sap_kg = ls_lqua-verme.
  ENDIF.


  pc_alv-cant_dif = pc_alv-stock_sap - pc_alv-metros_restantes.

* calculamos la diferencia
  CLEAR lv_aux.

  PERFORM f_cambia_unidad USING ls_lqua-matnr
                                pc_alv-cant_dif
***********INI RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
*                              'M'
                                lv_gmein
***********FIN RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
                                'KG'
                  CHANGING lv_aux .

  pc_alv-cant_dif_kg = lv_aux.

  l_restantes = pc_alv-metros_restantes.


  IF abs( l_restantes ) LE pc_alv-tolerancia.
    pc_alv-cant_consumo = pc_alv-stock_sap .
  ELSE.
    pc_alv-cant_consumo = pc_alv-cant_dif .
  ENDIF.

  CLEAR lv_aux.
  PERFORM f_cambia_unidad USING ls_lqua-matnr
                                pc_alv-cant_consumo
***********INI RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
*                              'M'
                                lv_gmein
***********FIN RGUILLOT GAP WM18 Bernabeu 6-5-19*********************
                                'KG'
                  CHANGING lv_aux .

  pc_alv-cant_consumo_kg = lv_aux.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CAMBIA_UNIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MARA_MATNR  text
*      -->P_LS_LEIN_MGEWI  text
*      -->P_LS_LEIN_GEWEI  text
*      -->P_0627   text
*      <--P_LV_AUX  text
*----------------------------------------------------------------------*
FORM f_cambia_unidad  USING pe_matnr TYPE matnr
                            pe_cant TYPE lqua_verme
                            pe_gmein TYPE gewei
                            pe_unit_conv TYPE gewei
                      CHANGING pc_cant TYPE lein_mgewi.
  DATA: lv_aux  TYPE bstmg,
        lv_aux2 TYPE bstmg.
  CLEAR pc_cant.

  MOVE pe_cant TO lv_aux.
  CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
    EXPORTING
      i_matnr              = pe_matnr
      i_in_me              = pe_gmein
      i_out_me             = pe_unit_conv
      i_menge              = lv_aux
    IMPORTING
      e_menge              = lv_aux2
    EXCEPTIONS
      error_in_application = 1
      error                = 2
      OTHERS               = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
    MOVE lv_aux2 TO pc_cant.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  UPDATE_CONTABILIZADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM update_contabilizado .

  SELECT * FROM zwm_intf_bhs
    WHERE mblnr NE @space
      AND contabilizado EQ @space
    INTO TABLE @DATA(ztable).

  LOOP AT ztable ASSIGNING FIELD-SYMBOL(<table>).
    <table>-contabilizado = abap_true.
  ENDLOOP.

  UPDATE zwm_intf_bhs FROM TABLE ztable. " lo lanzamos en esta versión para evitar inconsistencias con el nuevo campo "contabilizado"
  COMMIT WORK AND WAIT.

ENDFORM.

FORM f_reprocesa_linea_261  CHANGING pc_alv TYPE zwm_intf_bhs.
  DATA: input    TYPE zdt_bhs_consum_bob_mat_prima_i,
        intf_bhs TYPE zwm_intf_bhs.

  MOVE-CORRESPONDING pc_alv TO input.

  SELECT SINGLE * FROM ztwm0001
    INTO @DATA(ztwm0001)
   WHERE id = @pc_alv-id
     AND fecha = @pc_alv-fecha
     AND hora  = @pc_alv-hora
     AND linea = @pc_alv-pos_fich.
  IF sy-subrc = 0.
    MOVE-CORRESPONDING ztwm0001 TO input.
  ELSE.
    input-fecha_hora = |{ pc_alv-fecha(4) }.{ pc_alv-fecha+4(2) }.{ pc_alv-fecha+6(2) }.{ pc_alv-hora(2) }.{ pc_alv-hora+2(2) }.{ pc_alv-hora+4(2) }|.
    input-centro = pc_alv-werks.
    input-almacen = pc_alv-lgnum.
    input-portabobinas = pc_alv-porta_bobinas.
    input-codigo_etiqueta = pc_alv-cod_etiqueta.
  ENDIF.

*
  MOVE-CORRESPONDING pc_alv TO intf_bhs.

  CLEAR intf_bhs-message.
  zcl_si_bhs_consum_bob_mat_prim=>consumo_contra_orden( EXPORTING input = input
                                                        CHANGING  intf_bhs   = intf_bhs ).

  MOVE intf_bhs TO pc_alv.

  IF NOT intf_bhs-message IS INITIAL.
    MESSAGE intf_bhs-message TYPE 'I'.
  ENDIF.

ENDFORM.
