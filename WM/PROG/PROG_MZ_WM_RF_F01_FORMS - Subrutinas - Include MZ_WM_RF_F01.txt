*&---------------------------------------------------------------------*
*&  Include           MZ_WM_RF_F01
*&---------------------------------------------------------------------*
FORM mensajes USING id TYPE msgid
                    type TYPE msgty
                    number TYPE msgno
                    msgv1 TYPE symsgv
                    msgv2 TYPE symsgv
                    msgv3 TYPE symsgv
                    msgv4 TYPE symsgv.

  DATA ls_msg_text TYPE t100.
  DATA: l_line_in         LIKE sprot-line,
        l_line_out        LIKE sprot-line,
        l_field_name      LIKE dd03d-fieldname,
        l_message_length  TYPE i,
        l_line_count      TYPE i VALUE 1,
        l_line_count_c(2) TYPE c,
        l_mess_pos        TYPE i VALUE 0,
        l_line_pos        TYPE i,
        l_from_pos        TYPE i,
        l_length          TYPE i,
        l_test_char(1)    TYPE c,
        l_line_offset     TYPE i,
        l_msgid           LIKE t100-arbgb,
        l_lang            LIKE t100-sprsl,
        l_msgno           LIKE t100-msgnr,
        l_msgv1           LIKE sprot_u-var1,
        l_msgv2           LIKE sprot_u-var2,
        l_msgv3           LIKE sprot_u-var3,
        l_msgv4           LIKE sprot_u-var4,
        l_seperate        LIKE sprot_i-xfeld,
        l_condense        LIKE sprot_i-xfeld,
        l_message_screen  LIKE sy-dynnr,
        l_line_size       TYPE i,
        l_lines           TYPE i,
        l_non_lmob_envt   TYPE c,
        l_modpl           LIKE t3130c-modpl.

  FIELD-SYMBOLS:
    <mess_field>.

  CLEAR:  g_message1,
          g_message2,
          g_message3,
          g_message4,
          g_message5,
          g_message6,
          g_message7.

  IF g_msgid = space.
    l_msgid                = 'ZWM_RF'.
  ELSE.
    l_msgid = id.
  ENDIF.
  l_lang                 = 'S'.
  l_msgno                = number.
  l_msgv1                = msgv1.
  l_msgv2                = msgv2.
  l_msgv3                = msgv3.
  l_msgv4                = msgv4.


  l_line_size = 30.
  l_lines  = 4.

*  REFRESH lt_msg_text.
  SELECT SINGLE * FROM t100 INTO ls_msg_text
        WHERE  sprsl   =  l_lang
        AND    arbgb   =  l_msgid
        AND    msgnr   =  l_msgno.

  MOVE ls_msg_text-text TO l_line_in.

* insert message variables
  CALL FUNCTION 'TRINT_PUT_VARS_INTO_LINE'
    EXPORTING
      iv_line          = l_line_in
      iv_var1          = l_msgv1
      iv_var2          = l_msgv2
      iv_var3          = l_msgv3
      iv_var4          = l_msgv4
      iv_with_sep      = l_seperate  "to put param in quotes
      iv_condense_vars = l_condense
    IMPORTING
      ev_line          = l_line_out.

  l_message_length  = strlen( l_line_out ).

  IF 1 > 3.
*........Unable to process message ID number...........................*
  ENDIF.

* split message text into lines.........................................
  l_line_offset = l_line_size - 1.

  WHILE l_line_count <= l_lines AND l_mess_pos < l_message_length.

    l_line_count_c = l_line_count.
    CONCATENATE 'G_MESSAGE' l_line_count_c INTO l_field_name.
    ASSIGN (l_field_name) TO <mess_field>.
    l_line_pos = 0.

    WHILE l_line_pos < l_line_size AND l_mess_pos < l_message_length.
      <mess_field>+l_line_pos(1) = l_line_out+l_mess_pos(1).
      l_line_pos = l_line_pos + 1.
      l_mess_pos = l_mess_pos + 1.
    ENDWHILE.

    IF  l_mess_pos < l_message_length.
      l_test_char = abap_true.

      WHILE ( NOT ( l_test_char IS INITIAL ) ) AND  ( l_line_pos > 0 ).
        l_line_pos = l_line_pos - 1.
        l_mess_pos = l_mess_pos - 1.
        l_test_char = <mess_field>+l_line_pos(1).
      ENDWHILE.

      IF l_line_pos > 0 AND l_line_pos < l_line_offset.
        CLEAR <mess_field>.
        l_from_pos = l_mess_pos - l_line_pos.
        l_length   = l_line_pos + 1.
        <mess_field> =  l_line_out+l_from_pos(l_length).
      ELSEIF l_line_pos = 0.
        l_mess_pos = l_mess_pos + l_line_offset.
      ENDIF.

      l_mess_pos = l_mess_pos + 1.

      IF NOT ( <mess_field> IS INITIAL ).
        l_line_count = l_line_count + 1.
      ENDIF.
    ENDIF.
  ENDWHILE.

  " cvivo - 60831 - 06.05.2020
  IF type = 'A'.
    oo_descarga->set_mensaje(  number = number
                            id = id
                            type = 'S'
                            msgv1 = msgv1
                            msgv2 = msgv2
                            msgv3 = msgv3
                            msgv4 = msgv4 ).
  ELSE.
    oo_descarga->set_mensaje( number = number
                              id = id
                              type = type
                              msgv1 = msgv1
                              msgv2 = msgv2
                              msgv3 = msgv3
                              msgv4 = msgv4 ).
  ENDIF.

*  g_msg-msgty = g_message_type.
*  g_msg-msgid = l_msgid.
*  g_msg-msgno = g_message_number.
*  g_msg-msgv1 = g_msgv1.
*  g_msg-msgv2 = g_msgv2.
*  g_msg-msgv3 = g_msgv3.
*  g_msg-msgv4 = g_msgv4.
*
*  CALL FUNCTION 'BAL_LOG_MSG_ADD'
*    EXPORTING
*      i_log_handle     = g_log_handle
*      i_s_msg          = g_msg
*    EXCEPTIONS
*      log_not_found    = 1
*      msg_inconsistent = 2
*      log_is_full      = 3
*      OTHERS           = 4.
*
*  CLEAR g_msg.
*  APPEND g_log_handle TO gt_log_handle.
*
*  CALL FUNCTION 'BAL_DB_SAVE'
*    EXPORTING
*      i_t_log_handle   = gt_log_handle
*    EXCEPTIONS
*      log_not_found    = 1
*      save_not_allowed = 2
*      numbering_error  = 3
*      OTHERS           = 4.
*
*  REFRESH: gt_log_handle.

  CLEAR: l_msgv1,
         l_msgv2,
         l_msgv3,
         l_msgv4,
         g_msgid.

  IF type = 'E'.
    LEAVE TO SCREEN '9999'.
  ELSEIF type = 'W'.
    CALL SCREEN '9998'.
  ELSEIF type = 'A'.
    CALL SCREEN '9999'.
  ELSE.
    CALL SCREEN '9999'.
  ENDIF.

ENDFORM.                    " MENSAJES
*&---------------------------------------------------------------------*
*&      Form  LISTAR_PENDIENTES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM listar_pendientes .
  g_local_previous_screen = '0010'.
  DATA lt_vttk TYPE TABLE OF vttk.


** KYVOR(AG) - INI - 28.07.2019 - Desenganchar funcionalidad transportes. Quitar
** mensajes Transporte no existe.
  IF g_no_transporte IS INITIAL.
    IF gs_param-shtyp IS INITIAL OR gs_param-tplst IS INITIAL.
      MESSAGE 'Faltan parámetros en ZWM_RF_PARAM para la selección de transportes' TYPE 'E'. " 11.03.2019 - cvivo - WM CB

    ENDIF.
  ELSE.
    FREE: gt_select_list[], gt_select_list, gt_vttk.
    FREE: g_partial_list, g_partial_list_0086, g_partial_list_0091.
    CHECK 1 = 2.
  ENDIF.
** KYVOR(AG) - FIM - 28.07.2019

** KYVOR(AG) - INI - COMMENT - 28.07.2019
*    IF gs_param-shtyp IS INITIAL OR gs_param-tplst IS INITIAL.
*      MESSAGE 'Faltan parámetros en ZWM_RF_PARAM para la selección de transportes' TYPE 'E'. " 11.03.2019 - cvivo - WM CB
*
*    ENDIF.
** KYVOR(AG) - FIM - COMMENT - 28.07.2019


  SELECT * INTO TABLE lt_vttk
           FROM vttk
           WHERE tplst = gs_param-tplst AND " 11.03.2019 - cvivo - WM CB
                 shtyp = gs_param-shtyp AND " 11.03.2019 - cvivo - WM CB
                 abfer = '2' AND  " de entrada
                 sdabw = '0010' AND " Solo materia prima
                 stdis = space AND
                 stlad = space AND  "sin fin de carga
               ( add02 = space OR
                 add02 = sy-tcode ).
  SORT lt_vttk BY tknum ASCENDING.

  CLEAR: gt_select_list[],gt_select_list.

******* INI GAP WM16 Bernabeu  /  RGUILLOT 27-3-19
  REFRESH: gt_vttk.
  gt_vttk[] = lt_vttk[].
******* FIN GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

  LOOP AT lt_vttk INTO DATA(ls_vttk).
    gt_select_list-cod = 'TR'.

    gt_select_list-obj_number = ls_vttk-tknum.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_vttk-tknum
      IMPORTING
        output = ls_vttk-tknum.
    gt_select_list-obj_numberc = ls_vttk-tknum.
    CONCATENATE ls_vttk-text4 '-'
                 text-015 ls_vttk-text1 '-'
                 ls_vttk-signi
                 INTO gt_select_list-obj_number_alt SEPARATED BY space.
*    gt_select_list-obj_number_alt = ls_vttk-signi.

*    INI GAP WM16 - Bernabeu  / RGUILLOT 25-3-19
    gt_select_list-zzpeso_alb = ls_vttk-zzpeso_alb.
    gt_select_list-dtmeg = ls_vttk-dtmeg.
*    FIN GAP WM16 - Bernabeu  / RGUILLOT 25-3-19
    APPEND gt_select_list.
  ENDLOOP.
  CLEAR g_partial_list.
  CLEAR g_partial_list_0086.
  CLEAR g_partial_list_0091.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTAR_PENDIENTES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM listar_necesidades_pendientes .
  DATA l_quality TYPE string.
  DATA l_flute_type TYPE string.
  DATA l_trim TYPE string.
  DATA l_trim_i TYPE i.
  DATA l_reelwidth TYPE string.
  DATA l_ctd_char TYPE char7.

  " NAC
  DATA: lv_tbnum TYPE tbnum.
  DATA: ls_ltbk LIKE LINE OF gt_ltbk.



  PERFORM selecciona_necesidades.

  CLEAR: gt_select_list[],gt_select_list.


  READ TABLE gt_func INTO DATA(ls_func_bobina_nt)
  WITH KEY func = 'VER_BENUM_BOTON_APROV_NT'
       (gv_lgnum_lg) = 'X'.

* NAC -> WM11 4. Mostrar en la transacción ZWM_RF_014, el pedido

* Si NO esta activa la funcionalidad.
  IF ls_func_bobina_nt IS INITIAL.
    LOOP AT gt_nts INTO DATA(ls_nts).
      CLEAR gt_select_list.
      gt_select_list-cod = 'NT'.
      gt_select_list-obj_number = sy-tabix.
      SPLIT ls_nts-lznum AT '/' INTO l_reelwidth l_quality l_flute_type l_trim.
      gt_select_list-obj_numberc(8) = ls_nts-nlpla.
      gt_select_list-obj_numberc+9(1) = '-'.
      gt_select_list-obj_numberc+13(5) = l_reelwidth.
      gt_select_list-obj_numberc+22(2) = l_flute_type.
      gt_select_list-obj_numberc+28(5) = 'Trim:'.
      l_trim_i = l_trim .
      l_trim = l_trim_i.
      gt_select_list-obj_numberc+34(3) = l_trim.


      IF ls_nts-comment NE space.
        gt_select_list-obj_numberc+41(3) = '(*)'. " Versión de CB
        " cuando desactivada
      ENDIF.
*    ENDIF.

      WRITE ls_nts-menga TO l_ctd_char DECIMALS 0 RIGHT-JUSTIFIED.
*      gt_select_list-obj_number_alt(28) =  ls_nts-maktx.
*      gt_select_list-obj_number_alt+31(7) =  l_ctd_char.
*      gt_select_list-obj_number_alt+39(1) =  'm'.
      gt_select_list-obj_number_alt(7) =  l_ctd_char.
      gt_select_list-obj_number_alt+7(1) =  'm'.
      gt_select_list-obj_number_alt+10(28) =  ls_nts-maktx.
      APPEND gt_select_list.
    ENDLOOP.
*************************************************************************
*************************************************************************
*************************************************************************
*************************************************************************
  ELSE.
    " Si esta activa la funcionalidad, dibuja diferente el texto
    " del botón.
    LOOP AT gt_nts INTO ls_nts.
      CLEAR gt_select_list.
      gt_select_list-cod = 'NT'.
      gt_select_list-obj_number = sy-tabix.
      SPLIT ls_nts-lznum AT '/' INTO l_reelwidth l_quality l_flute_type l_trim.
      gt_select_list-obj_numberc(8) = ls_nts-nlpla.
      gt_select_list-obj_numberc+9(1) = '-'.
      gt_select_list-obj_numberc+12(5) = l_reelwidth.
      gt_select_list-obj_numberc+19(2) = l_flute_type.
      gt_select_list-obj_numberc+33(5) = 'Trim:'.
      l_trim_i = l_trim .
      l_trim = l_trim_i.
      gt_select_list-obj_numberc+39(3) = l_trim.

      READ TABLE ls_nts-lt_tbnum INTO lv_tbnum INDEX 1.
      READ TABLE gt_ltbk INTO ls_ltbk WITH KEY
      tbnum = lv_tbnum.

      gt_select_list-obj_numberc+22(10) = ls_ltbk-benum.



      IF ls_nts-comment NE space.
        gt_select_list-obj_numberc+47(3) = '(*)'. " WM11
      ENDIF.

      WRITE ls_nts-menga TO l_ctd_char DECIMALS 0 RIGHT-JUSTIFIED.
*      gt_select_list-obj_number_alt(28) =  ls_nts-maktx.
*      gt_select_list-obj_number_alt+31(7) =  l_ctd_char.
*      gt_select_list-obj_number_alt+39(1) =  'M'.
      gt_select_list-obj_number_alt(7) =  l_ctd_char.
      gt_select_list-obj_number_alt+7 = 'm'.
      gt_select_list-obj_number_alt+10(28) =  ls_nts-maktx.
      APPEND gt_select_list.
    ENDLOOP.

  ENDIF.

  CLEAR g_partial_list.
  CLEAR g_partial_list_0091.
  CLEAR g_partial_list_0086.
  CLEAR sw_confirmado.

ENDFORM.

FORM listar_inv_pendientes .


  SELECT * INTO TABLE gt_link
           FROM link
           WHERE lgnum = gs_param-lgnum AND
               ( istat = 'N' OR
                 istat = 'A' ) AND
                 pdatu LE sy-datum.

  SORT gt_link BY pdatu ASCENDING.

  CLEAR: gt_select_list[],gt_select_list.

  LOOP AT gt_link INTO DATA(ls_link).
    gt_select_list-cod = 'IN'.
    gt_select_list-obj_number = ls_link-ivnum.
    gt_select_list-obj_numberc = ls_link-ivnum.
*    gt_select_list-obj_number_alt = ls_vttk-signi.
    APPEND gt_select_list.
  ENDLOOP.
  CLEAR g_partial_list.
  CLEAR g_partial_list_0086.
  CLEAR g_partial_list_0091.
  g_local_previous_screen = sy-dynnr.

  CALL SCREEN 9997.

  LEAVE TO SCREEN 0.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  NEXT_PROCESS_FROM_LIST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM next_process_from_list .

  DATA: lv_hay_peso TYPE xfeld.

*         INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
*          Se actuliza con los datos que se tienen también

*****MODIF INI 3-6-19*************
*  gs_vttk-zzpeso_alb = gt_select_list-zzpeso_alb.
  IF gt_select_list-zzpeso_alb IS NOT INITIAL.
    gs_vttk-zzpeso_alb = gt_select_list-zzpeso_alb.
  ENDIF.
*****MODIF FIN 3-6-19*************
  gs_vttk-dtmeg = gt_select_list-dtmeg.
*         FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

  CASE g_local_previous_screen.
    WHEN '0010'.
      SELECT SINGLE * FROM vttk " cvivo - WM CB - Recuperamos todos los datos del transporte
        INTO gs_vttk
        WHERE tknum EQ g_select_object.

      IF gs_vttk-tknum IS NOT INITIAL. " 60587 - cvivo
        oo_descarga->vttk = gs_vttk.
* ini - cvivo - 58684 Bloquear transporte
        CALL FUNCTION 'ENQUEUE_EVVTTKE'
          EXPORTING
            mode_vttk      = 'E'
            tknum          = gs_vttk-tknum
*           X_TKNUM        = ' '
*           _SCOPE         = '2'
*           _WAIT          = ' '
*           _COLLECT       = ' '
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
*          el transporte está siendo bloqueado por otro usuario.
          g_message_number = '084'.
          g_message_type = 'A'.
          g_msgv1 = sy-msgv1.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        ENDIF.
* fin - cvivo - 58684 Bloquear transporte
      ENDIF.

* hojas de descarga
      CASE sy-tcode.
* Descarga papeleras propias
        WHEN  'ZWM_RF_001'.
*          gs_vttk-tknum = g_select_object.
          g_previous_screen = g_local_previous_screen.
          PERFORM chequea_nueva_descarga.
        WHEN  'ZWM_RF_004' OR
              'ZWM_RF_009'.
*Descarga SAICA y OTROS llamamoss la pantalla de lectura de pedido
*          gs_vttk-tknum = g_select_object.
          PERFORM recupera_entregas_transporte.
          CALL SCREEN '0013'.

        WHEN  'ZWM_RF_008'.
*Descargas de puerto
*          gs_vttk-tknum = g_select_object.
          CALL SCREEN '0015'.
          LEAVE TO SCREEN 0.
        WHEN  'ZWM_RF_015'.
* subcontrataciones y entregas entrantes
*Descargas de puerto
*          gs_vttk-tknum = g_select_object.
          CALL SCREEN '0060'.
          LEAVE TO SCREEN 0.
      ENDCASE.
    WHEN '0014'.
      READ TABLE gt_em_po INTO gs_em_po WITH KEY ebeln = gs_ekko-ebeln
                                                ebelp = g_select_object.
      LEAVE TO SCREEN 0.

    WHEN '0022' OR
         '0023'.
      g_lenum = g_select_object.
      LEAVE TO SCREEN 0.
    WHEN '0016' .
      READ TABLE gt_em_puerto INTO gs_em_puerto WITH KEY  charg = g_select_object.
      g_index = sy-tabix.
      LEAVE TO SCREEN 0.
    WHEN '0030' .
      READ TABLE gt_zwm_rf_mat_pend INTO gs_zwm_rf_mat_pend WITH KEY lgpla = g_select_object.
      gs_reubic-nlpla = gs_zwm_rf_mat_pend-lgpla.
      g_index = sy-tabix.
      LEAVE TO SCREEN 0.
    WHEN '0041' .
      READ TABLE gt_recuento INTO gs_recuento WITH KEY lenum = g_select_object.
      PERFORM get_makt USING gs_recuento-matnr.
      LEAVE TO SCREEN 0.
    WHEN '0042'.
      READ TABLE gt_link INTO gs_link WITH KEY ivnum = g_select_object.
      IF gs_link-ivakt = abap_false.
        PERFORM activar_inventario.
      ENDIF.
      WAIT UP TO 1 SECONDS.
      PERFORM recupera_datos_inv.
      CALL SCREEN 0043.
    WHEN '0050'.
      READ TABLE gt_nts INTO gs_nts INDEX g_select_object.

      PERFORM stock_nts_ap.
      CALL SCREEN 0051.
    WHEN '9996'. " cvivo - WM CB
      READ TABLE gt_em_po INTO gs_em_po WITH KEY ebeln = gs_ekko-ebeln
                                                ebelp = g_select_object.

      CALL SCREEN 0014.
    WHEN OTHERS.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_VALID_BATCHS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_valid_batchs .
  DATA l_menge TYPE menge_d.
  DATA ls_lips TYPE lips.
  DATA lt_lips TYPE TABLE OF lips.
  DATA lt_ekbe TYPE TABLE OF ekbe.
  DATA lt_ekes TYPE TABLE OF ekes.
  DATA ls_ekes TYPE ekes.
  DATA sw_ok.
  DATA lr_dlv_inb LIKE LINE OF gr_dlv_inb.

  CLEAR gt_dlv.

  SELECT SINGLE wbstk INTO @DATA(l_sm) FROM vbuk WHERE vbeln = @gs_likp-vbeln.
  IF l_sm <> 'C'.
*No se ha contabilizado la salida de mercancias para el albarán &.
    g_message_number = '004'.
    g_message_type = 'E'.
    g_msgv1 = gs_likp-vbeln.
    CLEAR gs_vttk.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.

*El albarán & no contiene bobinas pendientes de descargar
    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE gt_dlv
             FROM lips
             WHERE vbeln = gs_likp-vbeln AND
                   charg <> space.


    LOOP AT gt_dlv INTO DATA(ls_dlv) WHERE vbeln = gs_likp-vbeln.

      SELECT * INTO TABLE lt_ekbe
               FROM ekbe
               WHERE ebeln =  ls_dlv-vgbel  AND
                     ebelp =  ls_dlv-vgpos AND
                     charg = ls_dlv-charg AND
                   ( bwart = '101' OR
                     bwart = '102' OR
                     bwart = '161' ).

      l_menge = ls_dlv-lgmng.

* restamos y sumamos las entradas y anulaciones de mercancia

      LOOP AT lt_ekbe INTO DATA(ls_ekbe).
        IF ls_ekbe-bwart = '101'.
          l_menge = l_menge - ls_ekbe-menge.
        ELSE.
          l_menge = l_menge + ls_ekbe-menge.
        ENDIF.
      ENDLOOP.

      IF l_menge IS INITIAL.
        ls_dlv-descargada = abap_true.
*        ls_dlv-completa = abap_true. " cvivo - 12.06.19
      ELSE.
* chequeamos si ya se ha hecho la ot para ese lote en la entrega entrante que estamos tratando
        SELECT SINGLE vbup~lvsta INTO ls_dlv-lvsta
               FROM ( vbup INNER JOIN lips ON
                      vbup~vbeln = lips~vbeln AND
                      vbup~posnr = lips~posnr ) INNER JOIN
                      vttp ON vttp~vbeln = lips~vbeln
                    WHERE vttp~tknum = gs_vttk-tknum
                      AND lips~charg = ls_dlv-charg
                      AND lips~werks = gs_param-werks.
* chequeamos si ya se ha hecho la ot y el lote se encuentra en el sustema
        SELECT SINGLE charg INTO ls_dlv-charg FROM lqua WHERE lgnum = gs_param-lgnum AND
                                                              charg = ls_dlv-charg.
        IF sy-subrc IS INITIAL. " la marcamos como leída porque es de esta misma entrega
*          ls_dlv-descargada = abap_true. " DEL cvivo - 23/01/2020 - No puede estar descargada si L_MENGE <> 0
*          ls_dlv-completa = abap_true. " cvivo - 12.06.19
          ls_dlv-read = abap_true. " cvivo - 12.06.19
        ELSE. " cvivo - 12.06.19
* chequeamos si ya se ha hecho la ot para ese lote en otra entrega entrante
          SELECT SINGLE vbup~lvsta INTO ls_dlv-lvsta
                 FROM ( vbup INNER JOIN lips ON
                        vbup~vbeln = lips~vbeln AND
                        vbup~posnr = lips~posnr ) INNER JOIN
                        vttp ON vttp~vbeln = lips~vbeln
                      WHERE lips~charg = ls_dlv-charg AND
                            lips~werks = gs_param-werks.
* chequeamos si ya se ha hecho la ot y el lote se encuentra en el sustema
          SELECT SINGLE charg INTO ls_dlv-charg FROM lqua WHERE lgnum = gs_param-lgnum AND
                                                                charg = ls_dlv-charg.
          IF sy-subrc IS INITIAL. " la marcamos como descargada, pero no leída pues no es de esta entrega
*            ls_dlv-descargada = abap_true. " DEL cvivo - 23/01/2020 - No puede estar descargada si L_MENGE <> 0
*            ls_dlv-completa = abap_true. " cvivo - 12.06.19
          ENDIF.
        ENDIF.
      ENDIF.
      SELECT SINGLE maktx INTO ls_dlv-maktx
             FROM makt
             WHERE matnr = ls_dlv-matnr AND
                   spras = sy-langu.

      MODIFY gt_dlv FROM ls_dlv.
    ENDLOOP.
  ENDIF.

* ini - cvivo - 09.03.2020 56911 Múltiples albaranes por transporte
  SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_dlv_multi " cogemos ahora los albaranes del transporte ya asignados
    FROM ( vbup INNER JOIN lips ON
    vbup~vbeln = lips~vbeln AND
    vbup~posnr = lips~posnr ) INNER JOIN
    vttp ON vttp~vbeln = lips~vbeln
    WHERE vttp~tknum = gs_vttk-tknum.

  LOOP AT gt_dlv_multi ASSIGNING FIELD-SYMBOL(<dlv>).
    IF <dlv>-lvsta EQ 'C'. " cvivo - 24.03.20 - Sólo las que han sido confirmadas
*      <dlv>-completa = 'X'.
      <dlv>-read = 'X'.
    ENDIF.

    SELECT SINGLE maktx INTO <dlv>-maktx
      FROM makt
      WHERE matnr = <dlv>-matnr AND
            spras = sy-langu.

    SELECT * INTO TABLE lt_ekbe
      FROM ekbe
      WHERE ebeln =  <dlv>-vgbel  AND
      ebelp =  <dlv>-vgpos AND
      charg = <dlv>-charg AND
      ( bwart = '101' OR
      bwart = '102' OR
      bwart = '161' ).

    l_menge = <dlv>-lgmng.

* restamos y sumamos las entradas y anulaciones de mercancia

    LOOP AT lt_ekbe INTO ls_ekbe.
      IF ls_ekbe-bwart = '101'.
        l_menge = l_menge - ls_ekbe-menge.
      ELSE.
        l_menge = l_menge + ls_ekbe-menge.
      ENDIF.
    ENDLOOP.

    IF l_menge IS INITIAL.
      <dlv>-descargada = abap_true.
    ENDIF.
  ENDLOOP.
* fin - cvivo 56911

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GRABAR_EM_SAICA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM grabar_em_saica.
  DATA l_tanum TYPE tanum.
  DATA lt_items TYPE TABLE OF l03b_delit.
  DATA ls_item TYPE l03b_delit.
  DATA ls_header_action TYPE bapishipmentheaderaction.
  DATA lt_dlv_inb TYPE TABLE OF lips.
  DATA ls_dlv_inb TYPE lips.
  DATA lr_dlv_inb LIKE LINE OF gr_dlv_inb.
  DATA l_add_to_tr.

  CHECK NOT gs_em_po-menge_input IS INITIAL.

* cheuqemos si hay que crear entrega.
  SELECT SINGLE lips~vbeln INTO g_vbeln_inb
         FROM ( vttp INNER JOIN lips ON
                vttp~vbeln = lips~vbeln ) INNER JOIN
                vbuk ON vttp~vbeln = vbuk~vbeln
         WHERE vttp~tknum = gs_vttk-tknum AND
               lips~vgbel = gs_ekko-ebeln AND
               lips~vgpos = gs_em_po-ebelp AND
               vbuk~wbstk <> 'C'.
  IF NOT sy-subrc IS INITIAL.
    PERFORM create_dlv_inbound_from_po USING gs_ekko-ebeln
                                             gs_likp-verur  CHANGING lt_dlv_inb.
    READ TABLE lt_dlv_inb INTO ls_dlv_inb INDEX 1.
    lr_dlv_inb = 'IEQ'.
    lr_dlv_inb-low = ls_dlv_inb-vbeln.
    COLLECT lr_dlv_inb INTO gr_dlv_inb.
    l_add_to_tr = abap_true.
  ELSE.
    SELECT * INTO TABLE lt_dlv_inb FROM lips WHERE vbeln = g_vbeln_inb .
    lr_dlv_inb = 'IEQ'.
    lr_dlv_inb-low = g_vbeln_inb.
    COLLECT lr_dlv_inb INTO gr_dlv_inb.
  ENDIF.



  READ TABLE lt_dlv_inb INTO ls_dlv_inb WITH KEY vgbel = gs_em_po-ebeln
                                                 vgpos = gs_em_po-ebelp
                                                 uecha = space. " cvivo - 05.03.2019 - no seleccionar partición lotes
  IF sy-subrc EQ 0.
* si la cantidad de entrega ya no admite mas bobinas, la ampliamos
    IF   ls_dlv_inb-lfimg < gs_em_po-menge_input.
      ls_dlv_inb-lfimg = ls_dlv_inb-lfimg  + ( gs_em_po-menge_input - ls_dlv_inb-lfimg ) + 1.
      PERFORM change_dlv_inbound USING ls_dlv_inb.
    ENDIF.

    ls_item-posnr = ls_dlv_inb-posnr.
    ls_item-anfme = gs_em_po-menge_input.
    ls_item-altme = gs_em_po-meins.
    ls_item-charg = gs_em_po-charg.
    IF NOT g_bobina IS INITIAL.
      ls_item-nlenr = g_bobina.
    ENDIF.

* ini - cvivo - WM CB Detectar tipo de UA en materia prima
    SELECT SINGLE @abap_true FROM mara
      WHERE matnr EQ @ls_dlv_inb-matnr
        AND zzlargo GT 0
        INTO @DATA(check).

    IF sy-subrc EQ 0.
      ls_item-letyp =  'PL'.
    ELSE.
      ls_item-letyp =  'BB'.
    ENDIF.
* ini - cvivo - WM CB Detectar tipo de UA en materia prima

    APPEND ls_item TO lt_items.
    PERFORM create_ot_dn TABLES lt_items
                         USING ls_dlv_inb-vbeln
                               l_add_to_tr
                         CHANGING l_tanum.
*    IF NOT l_tanum IS INITIAL AND
    IF l_add_to_tr = abap_true. " cvivo - 55810 - la asignación se verifica dentro de la rutina
* añadimos la entrega al transporte
      PERFORM add_dlv_to_tr USING gs_vttk-tknum
                                  ls_dlv_inb-vbeln.

    ENDIF.
  ELSE. " cvivo - 05.03.2019 - no seleccionar partición lotes
    READ TABLE lt_dlv_inb INTO ls_dlv_inb WITH KEY vgbel = gs_em_po-ebeln
                                                 vgpos = gs_em_po-ebelp.

    g_message_type = 'A'.
    g_message_number = '000'.
    g_msgv1 = 'No se encuentra el material en la entrega'.
    g_msgv2 = ls_dlv_inb-vbeln.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.

  IF ( g_bobina IS INITIAL AND l_tanum IS NOT INITIAL ).

    SELECT SINGLE nlenr
      FROM ltap
      INTO g_bobina
     WHERE lgnum EQ gs_param-lgnum
       AND tanum EQ l_tanum
       AND tapos EQ '1'.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GRABAR_EM_PAPELERAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM grabar_em_papeleras.
  DATA l_tanum TYPE tanum.
  DATA lt_items TYPE TABLE OF l03b_delit.
  DATA ls_item TYPE l03b_delit.
  DATA ls_header_action TYPE bapishipmentheaderaction.
  DATA lt_dlv_inb TYPE TABLE OF lips.
  DATA ls_dlv_inb TYPE lips.
  DATA lr_dlv_inb LIKE LINE OF gr_dlv_inb.
  DATA l_add_tr.
  DATA ls_dlv TYPE zst_rf_em.
  DATA l_vcode TYPE qvcode.
  DATA l_memoria(30).

  READ TABLE gt_dlv INTO ls_dlv WITH KEY  read = abap_true
                                          descargada = space. " cvivo - 12.06.19 - Sólo si ya se ha descargado no
  IF sy-subrc IS INITIAL.
* cheuqemos si hay que crear entrega.
    SELECT SINGLE lips~vbeln INTO g_vbeln_inb
           FROM vttp INNER JOIN lips ON
                vttp~vbeln = lips~vbeln
           WHERE vttp~tknum = gs_vttk-tknum AND
                 lips~charg = ls_dlv-charg.

    IF NOT sy-subrc IS INITIAL.
      PERFORM create_dlv_inbound CHANGING lt_dlv_inb
                                          gs_likp-vbeln. "nota de entrega (cvivo)
      READ TABLE lt_dlv_inb INTO ls_dlv_inb INDEX 1.
      l_add_tr = abap_true.
      lr_dlv_inb = 'IEQ'.
      lr_dlv_inb-low = ls_dlv_inb-vbeln.
      COLLECT lr_dlv_inb INTO gr_dlv_inb.
    ELSE.
      SELECT * INTO TABLE lt_dlv_inb FROM lips WHERE vbeln = g_vbeln_inb .
      lr_dlv_inb = 'IEQ'.
      lr_dlv_inb-low = g_vbeln_inb.
      COLLECT lr_dlv_inb INTO gr_dlv_inb.

    ENDIF.
    LOOP AT gt_dlv INTO ls_dlv WHERE read = abap_true
                                 AND lvsta NE 'C' " cvivo - 24.03.2020 - Sólo si no están ya procesadas
                                 AND descargada NE abap_true. " cvivo - 12.06.19 - Sólo si ya se ha descargado no
      CLEAR: l_vcode.
      READ TABLE lt_dlv_inb INTO ls_dlv_inb WITH KEY charg = ls_dlv-charg.
      IF sy-subrc IS INITIAL.
        ls_item-posnr = ls_dlv_inb-posnr.
        ls_item-anfme = ls_dlv_inb-lgmng.
        ls_item-altme = ls_dlv_inb-meins.
        ls_item-charg = ls_dlv_inb-charg.
        IF NOT g_dc IS INITIAL.
          CONCATENATE ls_dlv_inb-charg g_dc INTO ls_item-nlenr.
        ELSE.
          ls_item-nlenr = ls_dlv_inb-charg.
        ENDIF.

* ini - cvivo - WM CB Detectar tipo de UA en materia prima
        SELECT SINGLE @abap_true FROM mara
          WHERE matnr EQ @ls_dlv_inb-matnr
            AND zzlargo GT 0
            INTO @DATA(check).

        IF sy-subrc EQ 0.
          ls_item-letyp =  'PL'.
        ELSE.
          ls_item-letyp =  'BB'.
        ENDIF.
* ini - cvivo - WM CB Detectar tipo de UA en materia prima

        " ini - cvivo - Proyecto CB WM - 15.03.2019
        PERFORM caract_lote USING ls_dlv-matnr
                                  ls_item-charg
                         CHANGING l_vcode.

        CLEAR l_memoria.
        CONCATENATE 'CERTIFICADO' ls_item-charg INTO l_memoria.

        IF l_vcode EQ 'DE R'.
          EXPORT p1 = 'SEGUNDA' TO MEMORY ID l_memoria.
        ENDIF.
        " fin - cvivo - Proyecto CB WM - 15.03.2019

        APPEND ls_item TO lt_items.
      ENDIF.
    ENDLOOP.
    IF NOT lt_items IS INITIAL.
      PERFORM create_ot_dn TABLES lt_items
                           USING ls_dlv_inb-vbeln
                                 l_add_tr
                           CHANGING l_tanum.
*      IF NOT l_tanum IS INITIAL.
      IF l_add_tr = abap_true. " cvivo - 55810 - la asignación se verifica dentro de la rutina
        PERFORM add_dlv_to_tr USING gs_vttk-tknum
                                         ls_dlv_inb-vbeln.
      ENDIF.
      IF ok_code = 'SAVE'.
        g_message_number = '008'.
        g_message_type = 'E'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ENDIF.
*      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  OT_A_ENTREGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_ot_dn TABLES lt_items STRUCTURE l03b_delit
                  USING p_vbeln
                        p_dele_dlv
                  CHANGING p_tanum.
  DATA ls_item TYPE l03b_delit.
  DATA lt_messages LIKE wmgrp_msg OCCURS 0 WITH HEADER LINE.
  DATA lt_ltap LIKE ltap_vb OCCURS 0 WITH HEADER LINE.
  DATA lt_ltak LIKE ltak_vb OCCURS 0 WITH HEADER LINE.

  " cvivo - 55810 corregimos situación en que no hay que crear ya OT para ninguna posición
  SELECT SINGLE @abap_true
    FROM vbup
    WHERE vbeln EQ @p_vbeln
      AND ( lvsta EQ 'A' " WM pte
       OR   lvsta EQ 'B' ) " WM parcialmente pte
    INTO @DATA(check).

  IF sy-subrc NE 0. " no hay posiciones pendientes
    EXIT.
  ENDIF.

  " cvivo - 54093-WM-Lote prov en EM SAICA
  IF gs_param-lichn_rf NE space.
    DESCRIBE TABLE lt_items LINES sy-tabix.
    IF sy-tabix GT 1.
      MESSAGE 'Error al identificar el lote de proveedor, contacte con Sistemas' TYPE 'E'.
    ENDIF.
    EXPORT p1 = lt_items[] TO MEMORY ID 'ZLICHN_DELIVERY'.
  ENDIF.

  " cvivo - 65428 - Segundo punto de contingencia, es redundante pero no consigo atajarlo: volvemos a verificar que no está duplicada la UA
  ls_item = lt_items[ 1 ].

  SELECT SINGLE @abap_true FROM lqua
    WHERE lgnum EQ @gs_param-lgnum
      AND lenum EQ @ls_item-nlenr
    INTO @DATA(verificacion).

  IF sy-subrc EQ 0 AND ls_item-nlenr IS NOT INITIAL.
    MESSAGE 'La bobina ya se ha leído anteriormente' TYPE 'E'.
    EXIT.
  ENDIF.

  sy-binpt = abap_true.
  CALL FUNCTION 'L_TO_CREATE_DN'
    EXPORTING
      i_lgnum                    = gs_param-lgnum
      i_vbeln                    = p_vbeln
      i_update_task              = ' '
      i_commit_work              = 'X'
      i_squit                    = 'X'
      it_delit                   = lt_items[]
    IMPORTING
      e_tanum                    = p_tanum
    TABLES
      t_ltak                     = lt_ltak
      t_ltap_vb                  = lt_ltap
      t_wmgrp_msg                = lt_messages
    EXCEPTIONS
      foreign_lock               = 1
      dn_completed               = 2
      partial_delivery_forbidden = 3
      xfeld_wrong                = 4
      ldest_wrong                = 5
      drukz_wrong                = 6
      dn_wrong                   = 7
      squit_forbidden            = 8
      no_to_created              = 9
      teilk_wrong                = 10
      update_without_commit      = 11
      no_authority               = 12
      error_message              = 13
      OTHERS                     = 14.


  IF sy-subrc <> 0 OR p_tanum IS INITIAL.
    PERFORM crear_mensaje_sistema USING sy-msgid
                                        sy-msgno
                                        sy-msgv1
                                        sy-msgv2
                                        sy-msgv3
                                        sy-msgv4
                               CHANGING g_msgv1
                                        g_msgv2
                                        g_msgv3
                                        g_msgv4.

    ROLLBACK WORK.
    IF p_dele_dlv  = abap_true.
      PERFORM delete_dlv USING p_vbeln.
    ENDIF.

    g_message_type = 'E'.
    g_message_number = '000'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    COMMIT WORK AND WAIT.
    CALL FUNCTION 'DEQUEUE_ALL'
      EXPORTING
        _synchron = 'X'.

    READ TABLE lt_ltap[] INTO DATA(ls_ltap) INDEX 1.

    DO 10 TIMES. " cvivo - hasta 10 veces
      SELECT SINGLE * FROM lqua " verificamos que se ha grabado
        WHERE charg EQ @ls_ltap-charg
          AND lgnum EQ @gs_param-lgnum
        INTO @DATA(ls_lqua_aux).

      IF sy-subrc EQ 0.
        EXIT.
      ELSE.
        g_msg-msgty = 'W'.
        g_msg-msgid = 'ZWM_RF'.
        g_msg-msgno = '082'.

        CALL FUNCTION 'BAL_LOG_MSG_ADD'
          EXPORTING
            i_log_handle     = g_log_handle
            i_s_msg          = g_msg
          EXCEPTIONS
            log_not_found    = 1
            msg_inconsistent = 2
            log_is_full      = 3
            OTHERS           = 4.

        CLEAR g_msg.
        APPEND g_log_handle TO gt_log_handle.

        CALL FUNCTION 'BAL_DB_SAVE'
          EXPORTING
            i_t_log_handle   = gt_log_handle
          EXCEPTIONS
            log_not_found    = 1
            save_not_allowed = 2
            numbering_error  = 3
            OTHERS           = 4.

        REFRESH: gt_log_handle.
      ENDIF.

      WAIT UP TO 1 SECONDS.
    ENDDO.
  ENDIF.
  sy-binpt = abap_false.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_MENSAJE_SISTEMA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SY_MSGID  text
*      -->P_SY_MSGNO  text
*      -->P_SY_MSGV1  text
*      -->P_SY_MSGV2  text
*      -->P_SY_MSGV3  text
*      -->P_SY_MSGV4  text
*      <--P_MSGV1  text
*      <--P_MSGV2  text
*      <--P_MSGV3  text
*      <--P_MSGV4  text
*----------------------------------------------------------------------*
FORM crear_mensaje_sistema  USING    pe_msgid
                                     pe_msgno
                                     pe_msgv1
                                     pe_msgv2
                                     pe_msgv3
                                     pe_msgv4
                            CHANGING ps_msgv1
                                     ps_msgv2
                                     ps_msgv3
                                     ps_msgv4.
  DATA: lw_message(200).
  CLEAR lw_message.
  CALL FUNCTION 'MESSAGE_TEXT_BUILD'
    EXPORTING
      msgid               = pe_msgid
      msgnr               = pe_msgno
      msgv1               = pe_msgv1
      msgv2               = pe_msgv2
      msgv3               = pe_msgv3
      msgv4               = pe_msgv4
    IMPORTING
      message_text_output = lw_message.

  ps_msgv1 = lw_message(50).
  ps_msgv2 = lw_message+50(50).
  ps_msgv3 = lw_message+100(50).
  ps_msgv4 = lw_message+150(50).

ENDFORM.                    " CREAR_MENSAJE_SISTEMA
*&---------------------------------------------------------------------*
*&      Form  CREATE_DLV_INBOUND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_dlv_inbound CHANGING lt_lips TYPE  tab_lips
                                 vbeln   TYPE vbeln_vl. " nota de entrega (cvivo)
  DATA lt_vbeln TYPE TABLE OF range_vbeln.
  DATA ls_vbeln TYPE range_vbeln.
  DATA l_lifnr TYPE lifnr.
  DATA l_rfpos TYPE rfpos_vl.
*** Local itabs
  DATA lt_komdlgn TYPE TABLE OF komdlgn.
  DATA lt_vbfs TYPE TABLE OF vbfs.
  DATA lt_vbls TYPE TABLE OF vbls.
***Local structures
  DATA ls_vbsk TYPE vbsk.
  DATA ls_komdlgn TYPE komdlgn.
  DATA ls_vbfs TYPE  vbfs.
  DATA ls_vbls TYPE vbls.
  DATA ls_ekpo TYPE ekpo.

  CLEAR l_rfpos.


  LOOP AT gt_dlv INTO DATA(ls_dlv) WHERE descargada = abap_false.
    ADD 1 TO l_rfpos.
    IF l_lifnr IS INITIAL.
      SELECT SINGLE lifnr INTO l_lifnr FROM ekko WHERE ebeln = ls_dlv-vgbel.
    ENDIF.
    ls_komdlgn-lfdat = sy-datum.
    ls_komdlgn-rfpos = l_rfpos.

    ls_komdlgn-lifnr = l_lifnr.
    ls_komdlgn-verur = vbeln.
    ls_komdlgn-lifex = vbeln. " añadir posición externa a posiciones - CVIVO 11.06.19
    ls_komdlgn-arktx = ls_dlv-maktx.
    ls_komdlgn-matnr = ls_dlv-matnr.
    ls_komdlgn-charg = ls_dlv-charg.
    ls_komdlgn-lfart = 'EL'.

* buscamos la info de conversion del pedido de compras
    SELECT SINGLE * INTO ls_ekpo
           FROM ekpo
           WHERE ebeln = ls_dlv-vgbel AND
                 ebelp = ls_dlv-vgpos.

* Quantity and Unit from Delivery
    ls_komdlgn-uebtk = ls_ekpo-uebtk.
    ls_komdlgn-uebto = ls_ekpo-uebto.
    ls_komdlgn-untto = ls_ekpo-untto.
    ls_komdlgn-werks = ls_ekpo-werks.
    ls_komdlgn-lgort = ls_ekpo-lgort.
*    ls_komdlgn-lfimg = ls_dlv-lfimg +
*                      ls_dlv-lfimg * .

    ls_komdlgn-lfimg = ls_dlv-lfimg.
    ls_komdlgn-vrkme = ls_ekpo-meins.
    ls_komdlgn-meins = ls_ekpo-lmein.
    ls_komdlgn-umvkz = ls_ekpo-umrez.
    ls_komdlgn-umvkn = ls_ekpo-umren.
    ls_komdlgn-vgbel = ls_ekpo-ebeln.
    ls_komdlgn-vgpos = ls_ekpo-ebelp.
    ls_komdlgn-vgtyp = 'V'.
    ls_komdlgn-kzazu = 'X'.
    APPEND ls_komdlgn TO lt_komdlgn.
    CLEAR ls_komdlgn.
  ENDLOOP.

* Sammelgangsnummer vergeben
  ls_vbsk-mandt = sy-mandt.
  ls_vbsk-ernam = sy-uname.
  ls_vbsk-erdat = sy-datum.
  ls_vbsk-uzeit = sy-uzeit.
  ls_vbsk-smart = 'L'.

**** Call Core Function GN_DELIVERY_CREATE.
  CALL FUNCTION 'GN_DELIVERY_CREATE'
    EXPORTING
      vbsk_i   = ls_vbsk
    IMPORTING
      vbsk_e   = ls_vbsk
    TABLES
      xkomdlgn = lt_komdlgn
      xvbfs    = lt_vbfs
      xvbls    = lt_vbls
    EXCEPTIONS
      OTHERS   = 1.
*** Error Handling
  READ TABLE lt_vbfs INTO ls_vbfs WITH KEY msgty = 'E'.
  IF sy-subrc IS INITIAL.
    ROLLBACK WORK.
    MESSAGE ID ls_vbfs-msgid TYPE ls_vbfs-msgty NUMBER ls_vbfs-msgno
              WITH ls_vbfs-msgv1
                   ls_vbfs-msgv2
                   ls_vbfs-msgv3
                   ls_vbfs-msgv4.
  ELSE.
    COMMIT WORK AND WAIT.
    READ TABLE lt_vbls INTO ls_vbls INDEX 1.

    SELECT * INTO TABLE lt_lips
             FROM lips
             WHERE vbeln = ls_vbls-vbeln_lif.
  ENDIF.
ENDFORM.
FORM create_dlv_inbound_from_po USING p_ebeln p_verur CHANGING lt_lips TYPE  tab_lips.
  DATA lt_vbeln TYPE TABLE OF range_vbeln.
  DATA ls_vbeln TYPE range_vbeln.
  DATA l_lifnr TYPE lifnr.
  DATA l_rfpos TYPE rfpos_vl.
*** Local itabs
  DATA lt_komdlgn TYPE TABLE OF komdlgn.
  DATA lt_vbfs TYPE TABLE OF vbfs.
  DATA lt_vbls TYPE TABLE OF vbls.
***Local structures
  DATA ls_vbsk TYPE vbsk.
  DATA ls_komdlgn TYPE komdlgn.
  DATA ls_vbfs TYPE  vbfs.
  DATA ls_vbls TYPE vbls.
  DATA ls_ekpo TYPE ekpo.

  CLEAR l_rfpos.


* buscamos la info de conversion del pedido de compras
  LOOP AT  gt_em_po INTO DATA(ls_item) WHERE ebeln = gs_ekko-ebeln.

    SELECT SINGLE * INTO ls_ekpo
           FROM ekpo
           WHERE ebeln = ls_item-ebeln AND
                 ebelp = ls_item-ebelp.

    ls_komdlgn-lfdat = sy-datum.
    ls_komdlgn-rfpos = l_rfpos.
    ls_komdlgn-lifnr = gs_ekko-lifnr.
    ls_komdlgn-arktx = ls_ekpo-txz01.
    ls_komdlgn-matnr = ls_ekpo-matnr.
    ls_komdlgn-charg = ls_item-charg. " 61764-lote pedido en rf
    ls_komdlgn-lfart = 'EL'.

* Quantity and Unit from Delivery
    ls_komdlgn-uebtk = ls_ekpo-uebtk.
    ls_komdlgn-uebto = ls_ekpo-uebto.
    ls_komdlgn-untto = ls_ekpo-untto.
    ls_komdlgn-werks = ls_ekpo-werks.
    ls_komdlgn-lgort = ls_ekpo-lgort.
    ls_komdlgn-lfimg = ls_ekpo-menge.
    ls_komdlgn-vrkme = ls_ekpo-meins.
    ls_komdlgn-meins = ls_ekpo-lmein.
    ls_komdlgn-umvkz = ls_ekpo-umrez.
    ls_komdlgn-umvkn = ls_ekpo-umren.
    ls_komdlgn-vgbel = ls_ekpo-ebeln.
    ls_komdlgn-vgpos = ls_ekpo-ebelp.
    ls_komdlgn-vgtyp = 'V'.
    ls_komdlgn-kzazu = 'X'.
    ls_komdlgn-verur = p_verur.
    ls_komdlgn-lifex = p_verur. " añadir posición externa a posiciones - CVIVO 11.06.19
    APPEND ls_komdlgn TO lt_komdlgn.
    CLEAR ls_komdlgn.
  ENDLOOP.

* Sammelgangsnummer vergeben
  ls_vbsk-mandt = sy-mandt.
  ls_vbsk-ernam = sy-uname.
  ls_vbsk-erdat = sy-datum.
  ls_vbsk-uzeit = sy-uzeit.
  ls_vbsk-smart = 'L'.

**** Call Core Function GN_DELIVERY_CREATE.
  CALL FUNCTION 'GN_DELIVERY_CREATE'
    EXPORTING
      vbsk_i   = ls_vbsk
    IMPORTING
      vbsk_e   = ls_vbsk
    TABLES
      xkomdlgn = lt_komdlgn
      xvbfs    = lt_vbfs
      xvbls    = lt_vbls
    EXCEPTIONS
      OTHERS   = 1.
*** Error Handling
  READ TABLE lt_vbfs INTO ls_vbfs WITH KEY msgty = 'E'.
  IF sy-subrc IS INITIAL.
    ROLLBACK WORK.
    MESSAGE ID ls_vbfs-msgid TYPE ls_vbfs-msgty NUMBER ls_vbfs-msgno
              WITH ls_vbfs-msgv1
                   ls_vbfs-msgv2
                   ls_vbfs-msgv3
                   ls_vbfs-msgv4.
  ELSE.
    COMMIT WORK AND WAIT.
    READ TABLE lt_vbls INTO ls_vbls INDEX 1.

    SELECT * INTO TABLE lt_lips
             FROM lips
             WHERE vbeln = ls_vbls-vbeln_lif.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHEQUEA_NUEVA_DESCARGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM chequea_nueva_descarga .
  DATA lr_dlv_out LIKE LINE OF gr_dlv_inb.
  DATA lr_dlv_inb LIKE LINE OF gr_dlv_inb.

*  DATA lt_vbeln TYPE TABLE OF vbeln.
  CLEAR gt_dlv.
  CLEAR: gr_dlv_inb,
         gr_dlv_out,
         g_vbeln_inb,
         gs_likp,
*         gs_vttk,
         gs_dlv.
*  SELECT SINGLE vbeln INTO g_vbeln_inb FROM vttp WHERE tknum = gs_vttk-tknum.
*  IF g_vbeln_inb IS INITIAL.
* Llamamos la pantalla de lectura albaran
*  lr_dlv_inb = 'IEQ'. " DEL - cvivo - 56911 No hace falta, se detecta más adelante
*  SELECT SINGLE vbeln INTO lr_dlv_inb-low FROM vttp WHERE tknum = gs_vttk-tknum.
*  IF sy-subrc IS INITIAL.
*    COLLECT lr_dlv_inb INTO gr_dlv_inb.
*  ENDIF.
  CALL SCREEN '0011'.
*  ELSE.
*    lr_dlv_inb = 'IEQ'.
*    lr_dlv_inb-low = g_vbeln_inb.
*    COLLECT lr_dlv_inb INTO gr_dlv_inb.
** tenemos que recuperar la entrega saliente que introdujeron la primera vez
*
** recuperamos todas las entregas salientes del pedido
*    lr_dlv_out = 'IEQ'.
*    SELECT belnr INTO lr_dlv_out-low
*           FROM ( ekbe INNER JOIN lips ON
*                  ekbe~ebeln =  lips~vgbel ) INNER JOIN vbuk ON
*                  vbuk~vbeln =  ekbe~belnr
*           WHERE  lips~vbeln =  g_vbeln_inb AND
*                  ekbe~bewtp = 'L' AND
*                  ekbe~menge > 0 AND
*                  vbuk~wbstk = 'C'.
*      APPEND lr_dlv_out TO gr_dlv_out.
*    ENDSELECT.
*    DELETE ADJACENT DUPLICATES FROM gr_dlv_out.
** de las salientes chequeamos cual tiene el lote de
**    la primera lectura que se hizo cuando empezaron la descarga
*    SELECT SINGLE charg INTO @DATA(l_charg_in)
*           FROM lips
*           WHERE vbeln = @g_vbeln_inb  AND
*                 charg <> @space.
*    IF sy-subrc IS INITIAL.
*      SELECT SINGLE vbeln INTO gs_likp-vbeln
*                   FROM lips
*                   WHERE vbeln IN gr_dlv_out AND
*                         charg = l_charg_in.
*
*      IF sy-subrc IS INITIAL.
** recuperamos el digito de control para el proveedor.
*        PERFORM recupera_dc.
** recuperamos las posiciones de entrega (lotes) de las que se puede hacer entrada.
*        PERFORM get_valid_batchs.
*        IF NOT gt_dlv IS INITIAL.
*          LOOP AT gt_dlv ASSIGNING FIELD-SYMBOL(<item>).
** chequeamos si ya se ha hecho la ot para ese lote.
*            SELECT SINGLE lvsta INTO <item>-lvsta
*                   FROM vbup INNER JOIN lips ON
*                        vbup~vbeln = lips~vbeln AND
*                        vbup~posnr = lips~posnr
*                        WHERE vbup~vbeln = g_vbeln_inb AND
*                              lips~charg = <item>-charg.
*          ENDLOOP.
** Llamamos la pantalla de lectura de bobinas.
*          CALL SCREEN '0012'.
*        ELSE.
*          g_message_number = '004'.
*          g_message_type = 'E'.
*          g_msgv1 = gs_likp-vbeln.
*          CLEAR gs_vttk.
*          PERFORM mensajes.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ADD_DLV_TO_TR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_VTTK_TKNUM  text
*      -->P_LS_DLV_INB_VBELN  text
*----------------------------------------------------------------------*
FORM add_dlv_to_tr  USING p_tknum
                          p_vbeln.

  DATA: l_vbeln          TYPE vbeln,
        ls_header        TYPE bapishipmentheader,
        ls_header_action TYPE bapishipmentheaderaction,
        ls_item          TYPE bapishipmentitem,
        lt_item          TYPE TABLE OF bapishipmentitem,
        ls_item_action   TYPE bapishipmentitemaction,
        lt_item_action   TYPE TABLE OF bapishipmentitemaction,
        lt_return        TYPE TABLE OF bapiret2,
        ls_return        TYPE bapiret2.


** KYVOR(AG) - 29.07.2019 - INI - So atualiza se tiver transporte asignado
  CHECK g_no_transporte IS INITIAL.
** KYVOR(AG) - 29.07.2019 - FIM

  " cvivo - 55810 Verificar transporte asignado
  SELECT SINGLE @abap_true FROM vbuk
    WHERE vbeln EQ @p_vbeln
      AND trsta EQ 'A'
    INTO @DATA(check).

  IF sy-subrc NE 0.
    EXIT.
  ENDIF.

* datos de cabecera
  ls_header-shipment_num = p_tknum.
  ls_header-suppl_2 = sy-tcode.
  ls_header_action-suppl_2 = 'C'.

* Entregas aociadas
  ls_item-delivery = p_vbeln.

  APPEND ls_item TO lt_item.
  CLEAR ls_item.

  ls_item_action-delivery = 'A'.
  ls_item_action-itenerary = 'A'.
  APPEND ls_item_action TO lt_item_action.
  CLEAR ls_item_action.



  CALL FUNCTION 'BAPI_SHIPMENT_CHANGE'
    EXPORTING
      headerdata       = ls_header
      headerdataaction = ls_header_action
    TABLES
      itemdata         = lt_item
      itemdataaction   = lt_item_action
      return           = lt_return.
  LOOP AT lt_return INTO ls_return WHERE type = 'E' OR
                                         type = 'A'.
    EXIT.
  ENDLOOP.

  IF sy-subrc IS INITIAL.
    ROLLBACK WORK.
    PERFORM crear_mensaje_sistema USING ls_return-id
                                        ls_return-number
                                        ls_return-message_v1
                                        ls_return-message_v2
                                        ls_return-message_v3
                                        ls_return-message_v4
                               CHANGING g_msgv1
                                        g_msgv2
                                        g_msgv3
                                        g_msgv4.

    g_message_type = 'E'.
    g_message_number = '000'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    COMMIT WORK AND WAIT.
  ENDIF.
ENDFORM.
FORM fin_descarga_saica.
  "
  " SEIS 07.06022 Adaptaciones.
  "
*  perform grabar_em_saica.
  CALL FUNCTION 'Z_WM_RF_VALIDAR_LECTURA'
    EXPORTING
      p_em_po         = gs_em_po
      p_vttk          = gs_vttk
      p_ekko          = gs_ekko
      p_likp          = gs_likp
      p_notransporte  = space
      p_bobina        = g_bobina
      p_fefco         = g_fefco
      p_lgnum         = gs_param-lgnum
      p_nlpla         = gs_reubic-nlpla
    EXCEPTIONS
      bobina_ya_leida = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
    g_message_number = '010'.
    g_message_type = 'W'.
    g_msgv1 = g_bobina.
    CLEAR: g_msgv2, g_msgv3, g_msgv4.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    CALL FUNCTION 'Z_WM_RF_NUEVA_LECTURA'
      EXPORTING
        p_em_po        = gs_em_po
        p_vttk         = gs_vttk
        p_ekko         = gs_ekko
        p_likp         = gs_likp
        p_notransporte = space
        p_bobina       = g_bobina
        p_fefco        = g_fefco
        p_lgnum        = gs_param-lgnum
        p_nlpla        = gs_reubic-nlpla.

*         INI GAP WM16 - Bernabeu  / RGUILLOT 1-4-19

*    Activación o desactivación de funcionalidad
    READ TABLE gt_func INTO DATA(ls_func)
    WITH KEY func = 'CAMBIA_ACCION_FINALIZAR'
            (gv_lgnum_lg) = 'X'.

    IF sy-subrc = 0.
      PERFORM listar_palets_descargados USING abap_true.
    ELSE.
      PERFORM fin_transporte_new USING abap_false.
    ENDIF.
  ENDIF.
*         FIN GAP WM16 - Bernabeu  / RGUILLOT 1-4-19


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FIN_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fin_transporte USING iv_call_frm_pap.
  TYPES: BEGIN OF ty_vbeln,
           vbeln TYPE vbeln,
           wm(1) TYPE c,
         END OF ty_vbeln.
  DATA ls_mess TYPE prott.
  DATA lt_mess TYPE TABLE OF prott.
  DATA ls_vbkok TYPE vbkok .
  DATA lt_vbpok TYPE TABLE OF vbpok.
  DATA ls_vbpok TYPE vbpok.
  DATA l_error TYPE flag.
  DATA ls_return TYPE bapiret2.
  DATA lt_return TYPE TABLE OF bapiret2.
  DATA ls_header TYPE bapishipmentheader.
  DATA ls_header_action TYPE bapishipmentheaderaction .
  DATA lt_vbeln TYPE TABLE OF ty_vbeln.
  DATA ls_vbeln TYPE ty_vbeln.
  DATA lr_dlv_inb LIKE LINE OF gr_dlv_inb.

** KYVOR(AG) - 06.08.2019 - INI - Listagem se Segundas
  DATA lv_segundas_exists TYPE xfeld.
** KYVOR(AG) - 06.08.2019 - FIM - Listagem se Segundas

** KYVOR(AG) - 06.08.2019 - INI - Listagem se Segundas
  FREE lv_segundas_exists.
** KYVOR(AG) - 06.08.2019 - FIM - Listagem se Segundas


  DATA(lv_fin_seg) = zcl_wm_rf_func=>check_parameter(
EXPORTING
 iv_func   =  zcl_wm_rf_func=>gc_func_cambia_acc_fin_seg   " ABA: Nombre de variables en variante
 iv_lgnum  =  CONV #( gv_lgnum_lg+2 )   " Núm.almacén/Complejo alm.
).

  IF gr_dlv_inb[] IS INITIAL. " cvivo - 12.03.2019
*>>>>>>>Ini udefinedes - 12.03.2019
* si no encuentra ninguna entrega entrante es porque no se ha asignado al transporte.
* recuperamos la entrega entrante chequeando si ya se ha hecho una ot para algun lote.

    IF gt_dlv[] IS INITIAL. " cvivo - 15.01.2020 Incidencia Pacs
      IF g_nuevas_func_em_sin IS NOT INITIAL AND g_no_transporte IS NOT INITIAL.
        PERFORM listar_palets_descarg_no_trans USING space.
      ELSE.
*buscamos las entregas asociadas al transporte
        lr_dlv_inb = 'IEQ'.
        SELECT vbeln FROM vbfa
          INTO lr_dlv_inb-low
          WHERE vbeln = gs_vttk-tknum
            AND vbtyp_n = '8'.

          APPEND lr_dlv_inb TO gr_dlv_inb.
        ENDSELECT.
*        PERFORM listar_palets_descargados USING space. " cvivo - sustituyo por el select superior directamente
      ENDIF.
    ELSE.
      lr_dlv_inb = 'IEQ'.
      SELECT vbeln UP TO 1 ROWS INTO lr_dlv_inb-low
             FROM lqua FOR ALL ENTRIES IN gt_dlv
             WHERE  lgnum = gs_param-lgnum AND
                    matnr = gt_dlv-matnr AND
                    charg = gt_dlv-charg.
        APPEND lr_dlv_inb TO gr_dlv_inb.
      ENDSELECT.
      IF sy-subrc IS INITIAL.

        PERFORM add_dlv_to_tr USING gs_vttk-tknum
                                         lr_dlv_inb-low.
      ELSE.
        " cvivo - 12.03.2019
*Error al seleccionar entrega, contacte con Sistemas
        g_message_type = 'E'.
        g_message_number = '069'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ENDIF.
*<<<<<<<<<fin udefinedes - 12.03.2019
    ENDIF.
  ENDIF.

  CHECK NOT gr_dlv_inb IS INITIAL.

  SELECT * INTO TABLE @DATA(lt_likp) FROM likp WHERE vbeln IN @gr_dlv_inb.

  " KYV/RDM - 20191125
  IF lv_fin_seg = abap_true AND lines( lt_likp ) > 0
    AND iv_call_frm_pap = abap_false.
    lv_segundas_exists = abap_false.
    SELECT lenum
     FROM lqua
      INTO @DATA(lv_dumm)
      FOR ALL ENTRIES IN @lt_likp
     WHERE lgnum = @gs_param-lgnum AND
           vbeln = @lt_likp-vbeln AND
           zeugn = 'SEGUNDA'.
      lv_segundas_exists = abap_true.
      EXIT.
    ENDSELECT.
    IF lv_segundas_exists = abap_true.
      PERFORM listar_palets_papeleras.
      RETURN.
    ENDIF.
  ENDIF.
  " KYV/RDM - 20191125



  LOOP AT lt_likp INTO DATA(ls_likp).
    ls_vbkok-wadat_ist = sy-datum.
    ls_vbkok-vbeln_vl = ls_likp-vbeln.
    ls_vbkok-komue = 'X'.
    ls_vbkok-wabuc = 'X'.
* borramos posiciones que no tengan picking
    CLEAR lt_vbpok.
    SELECT vbeln
           posnr INTO (ls_vbpok-vbeln_vl, ls_vbpok-posnr_vl)
                 FROM vbup
                 WHERE vbup~vbeln = ls_likp-vbeln AND
                       vbup~lvsta = 'A'.
*chequeamos que no sea posicion princial
      SELECT SINGLE vbeln
             INTO ls_vbpok-vbeln_vl
             FROM lips
             WHERE vbeln = ls_likp-vbeln AND
                   uecha = ls_vbpok-posnr_vl.
      IF NOT sy-subrc IS INITIAL.
        ls_vbpok-lips_del = abap_true.
        APPEND ls_vbpok TO lt_vbpok.
      ENDIF.
    ENDSELECT.
    CALL FUNCTION 'HU_PACKING_REFRESH'.
    CALL FUNCTION 'LE_DELIVERY_REFRESH_BUFFER'
      EXCEPTIONS
        no_key_specified = 0
        OTHERS           = 0.
    CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
      EXPORTING
        vbkok_wa       = ls_vbkok
        delivery       = ls_likp-vbeln
        update_picking = 'X'
      IMPORTING
        ef_error_any   = l_error
      TABLES
        vbpok_tab      = lt_vbpok
        prot           = lt_mess.
    READ TABLE lt_mess INTO ls_mess WITH KEY msgty = 'E'.
    IF sy-subrc IS INITIAL.
      PERFORM crear_mensaje_sistema USING ls_mess-msgid
                                          ls_mess-msgno
                                          ls_mess-msgv1
                                          ls_mess-msgv2
                                          ls_mess-msgv3
                                          ls_mess-msgv4
                                 CHANGING g_msgv1
                                          g_msgv2
                                          g_msgv3
                                          g_msgv4.

      g_message_type = 'E'.
      g_message_number = '000'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.
* impresion de las etiquetas de las bobinas.
* buscamos en las UAs de la entrega
    IF sy-tcode <> 'ZWM_RF_004' AND
        sy-tcode <> 'ZWM_RF_001'.
* para SAICA y descargas grupo no se imprime etiqueta.
      SELECT * INTO TABLE @DATA(lt_lqua)
               FROM lqua
               WHERE lgnum = @gs_param-lgnum AND
                     vbeln = @ls_likp-vbeln.
      IF sy-subrc IS INITIAL.
        LOOP AT lt_lqua INTO DATA(ls_lqua).
          DATA(lv_impresion) = 'X'.
          PERFORM imprimir_etiqueta USING  ls_lqua-lenum.
        ENDLOOP.
      ENDIF.
* ini - cvivo - WM CB Imprimir etiqueta en segundas
    ELSEIF sy-tcode EQ 'ZWM_RF_001'.
      SELECT * INTO TABLE lt_lqua
         FROM lqua
         WHERE lgnum = gs_param-lgnum AND
               vbeln = ls_likp-vbeln AND
               zeugn = 'SEGUNDA'.
      IF sy-subrc IS INITIAL.
** KYVOR(AG) - 06.08.2019 - INI - Listagem Segundas
        lv_segundas_exists = abap_true.
** KYVOR(AG) - 06.08.2019 - FIM - Listagem Segundas

        LOOP AT lt_lqua INTO ls_lqua.
          lv_impresion = 'X'.
          PERFORM imprimir_etiqueta USING  ls_lqua-lenum.
        ENDLOOP.
      ENDIF.
* fin - cvivo - WM CB Imprimir etiqueta en segundas
* ini - cvivo - Imprimir etiquetas proveedores FSC MIX sin etiqueta correcta
    ELSEIF sy-tcode EQ 'ZWM_RF_004'.
      SELECT SINGLE * FROM tvarvc
        WHERE name EQ 'ZMM_ETIQUETA_FSC_EM'
          AND low EQ @ls_likp-lifnr
        INTO @DATA(resultado).

      IF sy-subrc EQ 0 AND ( resultado-high IS INITIAL OR resultado-high EQ g_lgnum ).
        SELECT * INTO TABLE lt_lqua
          FROM lqua
          WHERE lgnum = gs_param-lgnum AND
          vbeln = ls_likp-vbeln.

        LOOP AT lt_lqua INTO ls_lqua.
          lv_impresion = 'X'.
          PERFORM imprimir_etiqueta USING  ls_lqua-lenum.
        ENDLOOP.
      ENDIF.
* fin - cvivo - Imprimir etiquetas proveedores FSC MIX sin etiqueta correcta
    ENDIF.
  ENDLOOP.

* modificamos estatus de transporte.
  ls_header-shipment_num = gs_vttk-tknum.
  ls_header-status_plan = 'X'.
  ls_header_action-status_plan = 'C'.
  ls_header-status_load_end = 'X'.
  ls_header_action-status_load_end = 'C'.

* damos fin de transporte
** KYVOR(AG) - 29.07.2019 - INI - So atualiza se tiver transporte asignado
  IF g_no_transporte IS INITIAL.
** KYVOR(AG) - 29.07.2019 - FIM

    IF sy-ucomm NE 'FINALB'. " cvivo - 56911 - Gestionar >1 albarán por transporte

      CALL FUNCTION 'BAPI_SHIPMENT_CHANGE'
        EXPORTING
          headerdata       = ls_header
          headerdataaction = ls_header_action
        TABLES
          return           = lt_return.

      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      IF sy-subrc IS INITIAL.
        ROLLBACK WORK.
        PERFORM crear_mensaje_sistema USING ls_return-id
                                          ls_return-number
                                          ls_return-message_v1
                                          ls_return-message_v1
                                          ls_return-message_v1
                                          ls_return-message_v1
                                 CHANGING g_msgv1
                                          g_msgv2
                                          g_msgv3
                                          g_msgv4.

        g_message_type = 'E'.
        g_message_number = '000'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
        g_message_number = '011'.
        g_message_type = 'A'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        LEAVE TO TRANSACTION 'LM01'.
      ENDIF.

    ELSE.
      LEAVE TO SCREEN '0011'.
    ENDIF.

** KYVOR(AG) - 29.07.2019 - INI - So atualiza se tiver transporte asignado
  ELSE.
    IF lv_impresion IS INITIAL.
      g_message_number = '011'.
    ELSE.
      g_message_number = '083'.
    ENDIF.
    g_message_type = 'A'.

    IF g_trasp_bloq_segundas IS NOT INITIAL AND sy-tcode EQ 'ZWM_RF_001'.
      LOOP AT lt_lqua INTO ls_lqua WHERE  zeugn EQ gc_zeugn_segunda.
        "        DATA(lv_tabix) = COND #( WHEN lv_fin_seg = abap_false THEN sy-tabix ELSE 2 ). " KYV/RDM - 20191122
        PERFORM transf_stock USING space
                                   gs_param-lgnum
                                   ls_lqua-lgtyp
                                   gc_bwlvs-bloq
                                   ls_lqua-lenum.
      ENDLOOP.
      IF g_msgid <> '00' OR g_message_number <> '398'. " KYV/RDM - 20191118
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ENDIF. " KYV/RDM - 20191118
    ELSE.
      CLEAR g_msgid. " Kyvor - 20190925 - RDM
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ENDIF.

    LEAVE TO TRANSACTION 'LM01'.
  ENDIF.
** KYVOR(AG) - 29.07.2019 - FIM
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FIN_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fin_transporte_new USING iv_call_frm_pap.
  TYPES: BEGIN OF ty_vbeln,
           vbeln TYPE vbeln,
           wm(1) TYPE c,
         END OF ty_vbeln.
  DATA ls_mess TYPE prott.
  DATA lt_mess TYPE TABLE OF prott.
  DATA ls_vbkok TYPE vbkok .
  DATA lt_vbpok TYPE TABLE OF vbpok.
  DATA ls_vbpok TYPE vbpok.
  DATA l_error TYPE flag.
  DATA ls_return TYPE bapiret2.
  DATA lt_return TYPE TABLE OF bapiret2.
  DATA ls_header TYPE bapishipmentheader.
  DATA ls_header_action TYPE bapishipmentheaderaction .
  DATA lt_vbeln TYPE TABLE OF ty_vbeln.
  DATA ls_vbeln TYPE ty_vbeln.
  DATA lr_dlv_inb LIKE LINE OF gr_dlv_inb.

** KYVOR(AG) - 06.08.2019 - INI - Listagem se Segundas
  DATA lv_segundas_exists TYPE xfeld.
** KYVOR(AG) - 06.08.2019 - FIM - Listagem se Segundas

** KYVOR(AG) - 06.08.2019 - INI - Listagem se Segundas
  FREE lv_segundas_exists.
** KYVOR(AG) - 06.08.2019 - FIM - Listagem se Segundas


  DATA(lv_fin_seg) = zcl_wm_rf_func=>check_parameter(
EXPORTING
 iv_func   =  zcl_wm_rf_func=>gc_func_cambia_acc_fin_seg   " ABA: Nombre de variables en variante
 iv_lgnum  =  CONV #( gv_lgnum_lg+2 )   " Núm.almacén/Complejo alm.
).

  DATA: vl_fin_transporte TYPE xflag,
        vl_notransporte   TYPE xflag.
  CLEAR: vl_fin_transporte,
        vl_notransporte.

  IF sy-ucomm NE 'FINALB'.
    vl_fin_transporte = 'X'.
  ENDIF.
  IF g_no_transporte IS NOT INITIAL.
    vl_notransporte = 'X'.
  ENDIF.

  DATA rl_vbeln TYPE tms_t_vbeln_range.

  "
  " SEIS 05.09.22 Validar en FIN TRANSPORTE que sólo tenemos un albarán pdte por cerrar.
  "
  IF vl_fin_transporte IS NOT INITIAL AND vl_notransporte IS INITIAL.
    SELECT DISTINCT verur
      FROM zwm_rf_em_lect
      INTO TABLE @DATA(tl_albaranes_pdtes)
      WHERE tknum = @gs_vttk-tknum AND
            finalizado <> 'X'.
    DATA vl_num_albaranes TYPE i.
    vl_num_albaranes = lines( tl_albaranes_pdtes ).
    IF vl_num_albaranes > 1.
*      g_message_type = 'E'.
*      g_message_number = '000'.
*      g_msgv1 = 'Existe más de un albarán sin cerrar.'.
*      g_msgv2 = 'No se puede finalizar el transporte.'.
*      g_msgv3 = ''.
*      g_msgv4 = ''.
*      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ENDIF.
  ENDIF.

  CALL FUNCTION 'Z_WM_RF_FIN_TRANSPORTE'
    EXPORTING
      p_vttk                = gs_vttk
      p_em_po               = gs_em_po
      p_ekko                = gs_ekko
      p_likp                = gs_likp
      p_notransporte        = vl_notransporte
      p_fin_transporte      = vl_fin_transporte
    CHANGING
      rp_vbeln              = rl_vbeln
    EXCEPTIONS
      error_create_delivery = 1
      error_shipment_change = 2
      error_em              = 3
      error_fin_transporte  = 4
      error_ubicar_wm       = 5
      OTHERS                = 6.


  IF sy-subrc <> 0.
    PERFORM crear_mensaje_sistema USING sy-msgid
                                        sy-msgno
                                        sy-msgv1
                                        sy-msgv2
                                        sy-msgv3
                                        sy-msgv4
                               CHANGING g_msgv1
                                        g_msgv2
                                        g_msgv3
                                        g_msgv4.

    g_message_type = 'E'.
    g_message_number = '000'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.

  CHECK NOT rl_vbeln IS INITIAL.

  SELECT * INTO TABLE @DATA(lt_likp) FROM likp WHERE vbeln IN @rl_vbeln.

  " KYV/RDM - 20191125
  IF lv_fin_seg = abap_true AND lines( lt_likp ) > 0
    AND iv_call_frm_pap = abap_false.
    lv_segundas_exists = abap_false.

    SELECT DISTINCT vbeln
      INTO TABLE @DATA(tl_vbfa_all)
      FROM vbfa FOR ALL ENTRIES IN @lt_likp
      WHERE vbelv = @lt_likp-vbeln AND
            vbtyp_n = 'R'.

    SELECT lenum
     FROM lqua
      INTO @DATA(lv_dumm)
      FOR ALL ENTRIES IN @tl_vbfa_all
     WHERE lgnum = @gs_param-lgnum AND
           wenum = @tl_vbfa_all-vbeln AND
           zeugn = 'SEGUNDA'.
      lv_segundas_exists = abap_true.
      EXIT.
    ENDSELECT.
    IF lv_segundas_exists = abap_true.
      PERFORM listar_palets_papeleras.
      RETURN.
    ENDIF.
  ENDIF.
  " KYV/RDM - 20191125



  LOOP AT lt_likp INTO DATA(ls_likp).
    SELECT DISTINCT vbeln
      FROM vbfa
      INTO TABLE @DATA(tl_vbfa)
      WHERE vbelv = @ls_likp-vbeln AND
            vbtyp_n = 'R'.
* impresion de las etiquetas de las bobinas.
* buscamos en las UAs de la entrega
    IF sy-tcode <> 'ZWM_RF_004' AND
        sy-tcode <> 'ZWM_RF_001'.
* para SAICA y descargas grupo no se imprime etiqueta.
      SELECT * INTO TABLE @DATA(lt_lqua)
               FROM lqua FOR ALL ENTRIES IN @tl_vbfa
               WHERE lgnum = @gs_param-lgnum AND
                     wenum = @tl_vbfa-vbeln.
      IF sy-subrc IS INITIAL.
        LOOP AT lt_lqua INTO DATA(ls_lqua).
          DATA(lv_impresion) = 'X'.
          PERFORM imprimir_etiqueta USING  ls_lqua-lenum.
        ENDLOOP.
      ENDIF.
* ini - cvivo - WM CB Imprimir etiqueta en segundas
    ELSEIF sy-tcode EQ 'ZWM_RF_001'.


      SELECT * INTO TABLE lt_lqua
         FROM lqua FOR ALL ENTRIES IN tl_vbfa
         WHERE lgnum = gs_param-lgnum AND
               wenum = tl_vbfa-vbeln AND
               zeugn = 'SEGUNDA'.
      IF sy-subrc IS INITIAL.
** KYVOR(AG) - 06.08.2019 - INI - Listagem Segundas
        lv_segundas_exists = abap_true.
** KYVOR(AG) - 06.08.2019 - FIM - Listagem Segundas

        LOOP AT lt_lqua INTO ls_lqua.
          lv_impresion = 'X'.
          PERFORM imprimir_etiqueta USING  ls_lqua-lenum.
        ENDLOOP.
      ENDIF.
* fin - cvivo - WM CB Imprimir etiqueta en segundas
* ini - cvivo - Imprimir etiquetas proveedores FSC MIX sin etiqueta correcta
    ELSEIF sy-tcode EQ 'ZWM_RF_004'.
      SELECT SINGLE * FROM tvarvc
        WHERE name EQ 'ZMM_ETIQUETA_FSC_EM'
          AND low EQ @ls_likp-lifnr
        INTO @DATA(resultado).

      IF sy-subrc EQ 0 AND ( resultado-high IS INITIAL OR resultado-high EQ g_lgnum ).
        SELECT * INTO TABLE lt_lqua
          FROM lqua FOR ALL ENTRIES IN tl_vbfa
          WHERE lgnum = gs_param-lgnum AND
          wenum = tl_vbfa-vbeln.

        LOOP AT lt_lqua INTO ls_lqua.
          lv_impresion = 'X'.
          PERFORM imprimir_etiqueta USING  ls_lqua-lenum.
        ENDLOOP.
      ENDIF.
* fin - cvivo - Imprimir etiquetas proveedores FSC MIX sin etiqueta correcta
    ENDIF.
  ENDLOOP.


  IF g_no_transporte IS INITIAL.

    IF sy-ucomm NE 'FINALB'. " cvivo - 56911 - Gestionar >1 albarán por transporte

      g_message_number = '011'.
      g_message_type = 'A'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      LEAVE TO TRANSACTION 'LM01'.

    ELSE.
      LEAVE TO SCREEN '0011'.
    ENDIF.

  ELSE.
    IF lv_impresion IS INITIAL.
      g_message_number = '011'.
    ELSE.
      g_message_number = '083'.
    ENDIF.
    g_message_type = 'A'.

    IF g_trasp_bloq_segundas IS NOT INITIAL AND sy-tcode EQ 'ZWM_RF_001'.
      LOOP AT lt_lqua INTO ls_lqua WHERE  zeugn EQ gc_zeugn_segunda.
        "        DATA(lv_tabix) = COND #( WHEN lv_fin_seg = abap_false THEN sy-tabix ELSE 2 ). " KYV/RDM - 20191122
        PERFORM transf_stock USING space
                                   gs_param-lgnum
                                   ls_lqua-lgtyp
                                   gc_bwlvs-bloq
                                   ls_lqua-lenum.
      ENDLOOP.
      IF g_msgid <> '00' OR g_message_number <> '398'. " KYV/RDM - 20191118
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ENDIF. " KYV/RDM - 20191118
    ELSE.
      CLEAR g_msgid. " Kyvor - 20190925 - RDM
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ENDIF.

    LEAVE TO TRANSACTION 'LM01'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_VALID_BATCHS_FROM_PO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_valid_items_from_po
  USING iv_no_err "Kyvor - RDM - 20190917
  .
  DATA l_menge TYPE menge_d.
  DATA lt_ekbe TYPE TABLE OF ekbe.
  DATA lt_ekpo TYPE TABLE OF ekpo.
  DATA lt_ekes TYPE TABLE OF ekes.
  DATA ls_vbfa TYPE vbfa.
  DATA lt_vbfa TYPE TABLE OF vbfa.
  DATA ls_ekes TYPE ekes.
  DATA: l_qty  TYPE mdr1menge.
  "BEG Kyvor - RDM - 20190911 - check batch split
  DATA: lv_valid_ekes     TYPE boolean.
*        lv_cond           TYPE c LENGTH 20,
*        lv_valid_ekes_chk TYPE boolean.
  "END Kyvor - RDM - 20190911 - check batch split
  CLEAR g_bobina.
  CLEAR gs_em_po.
  CLEAR g_fefco.
  CLEAR gt_em_po.

  DATA(lv_no_err) = CONV boolean( iv_no_err ). "Kyvor - RDM - 20190911

*chequeamos si el pedido tiene cantiadad pendiente por descargar
  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_ekpo
           FROM ekpo
           WHERE ebeln = gs_ekko-ebeln AND
                 elikz = space AND
                 erekz = space AND
                 loekz = space AND
                 bstae = '0004' AND " control conf.
                 lblkz = space. " subcontratista

  "BEG Kyvor - RDM - 20190911 - check batch split
  lv_valid_ekes = zcl_wm_rf_func=>check_parameter(
    EXPORTING
      iv_func   =  'NUEVAS_FUNC_EM_SIN'   " ABA: Nombre de variables en variante
      iv_lgnum  =  gs_param-lgnum   " Núm.almacén/Complejo alm.
  ).
  "END Kyvor - RDM - 20190911 - check batch split

  LOOP AT lt_ekpo INTO DATA(ls_ekpo).
    "BEG Kyvor - RDM - 20190911 - check batch split
*    IF lv_valid_ekes_chk = abap_false.
*      lv_valid_ekes_chk = abap_true.
*      SELECT SINGLE lgnum FROM t320 INTO @DATA(lv_lgnum)
*        WHERE werks = @ls_ekpo-werks
*        AND lgort = @ls_ekpo-lgort.
*      lv_cond = |LG{ lv_lgnum } = 'X'|.
*
*      SELECT SINGLE @abap_true
*        FROM zwm_rf_func
*        INTO @lv_valid_ekes
*        WHERE func = 'NUEVAS_FUNC_EM_SIN'
*        AND (lv_cond).
*    ENDIF.
    "END Kyvor - RDM - 20190911 - check batch split
    CLEAR gs_em_po.
    MOVE-CORRESPONDING ls_ekpo TO gs_em_po.

    " 61764 - recuperar lote de pedido
    SELECT SINGLE charg INTO gs_em_po-charg
      FROM eket
      WHERE ebeln EQ gs_em_po-ebeln
        AND ebelp EQ gs_em_po-ebelp
        AND charg NE space.

    gs_em_po-menge_org = ls_ekpo-menge.
    SELECT * INTO TABLE lt_ekbe
             FROM ekbe
             WHERE ebeln =  ls_ekpo-ebeln  AND
                   ebelp =  ls_ekpo-ebelp AND
                 ( bwart = '101' OR
                   bwart = '102' OR
                   bwart = '161' ).
* leemos las confirmaciones del pedido
    SELECT * INTO TABLE  lt_ekes
             FROM ekes
             WHERE ebeln = ls_ekpo-ebeln AND
                   ebelp = ls_ekpo-ebelp AND
                   vbeln <> space.

    CLEAR l_menge.
    LOOP AT lt_ekbe INTO DATA(ls_ekbe).
* buscamos en el flujo de documentos a que entrega pertenece
      SELECT SINGLE * INTO ls_vbfa
             FROM vbfa
             WHERE vbeln = ls_ekbe-belnr AND
                   posnn = ls_ekbe-buzei AND
                   vbtyp_n = 'R'.
      IF sy-subrc IS INITIAL.
        READ TABLE lt_ekes INTO ls_ekes
                           WITH KEY vbeln = ls_vbfa-vbelv
                                    vbelp = ls_vbfa-posnv.
        IF sy-subrc IS INITIAL.
*borramos los 101 de las entregas
          DELETE lt_ekes WHERE vbeln = ls_vbfa-vbelv AND
                               vbelp = ls_vbfa-posnv..
        ENDIF.
      ENDIF.
      IF ls_ekbe-bwart = '101'.
        gs_em_po-menge = gs_em_po-menge + ls_ekbe-menge.
      ELSE.
        gs_em_po-menge = gs_em_po-menge - ls_ekbe-menge.
      ENDIF.

    ENDLOOP.
* restamos las cantidades de las confirmaciones sin EM, salvo que sea la que estamos tratando
* o sea una entrega del pedido sin asociar a transporte
    LOOP AT lt_ekes INTO ls_ekes.
      READ TABLE gr_dlv_inb INTO DATA(lr_dlv_inb) WITH KEY low = ls_ekes-vbeln.
      IF NOT sy-subrc IS INITIAL.
* chequeamos si es una entrega sin asociar al transporte
*        SELECT SINGLE vbeln INTO ls_ekes-vbeln FROM vttp WHERE vbeln = ls_ekes-vbeln.
*        IF NOT sy-subrc IS INITIAL.
*          lr_dlv_inb = 'IEQ'.
*          lr_dlv_inb-low = ls_ekes-vbeln.
*          COLLECT lr_dlv_inb INTO gr_dlv_inb.
*        ELSE.

        "BEG Kyvor - RDM - 20190906 - check batch split
        " if batch split exists, should consider only the batch items
        " otherwise, consider item


        IF lv_valid_ekes = abap_true.
          IF ls_ekes-uecha IS INITIAL.
            CHECK NOT line_exists( lt_ekes[ uecha = ls_ekes-ebelp ] ).
          ENDIF.

          " check status for inbound delivery item
          SELECT SINGLE lvsta FROM vbup
            INTO @DATA(lv_lvsta)
            WHERE vbeln = @ls_ekes-vbeln
            AND posnr = @ls_ekes-vbelp.

          CHECK lv_lvsta = 'C'.

        ENDIF.

        "END Kyvor - RDM - 20190906 - check batch split


        gs_em_po-menge =  gs_em_po-menge  - ls_ekes-menge.
*        ENDIF.
      ELSE.
* leemos la cantidad e picking de la posicion de pedido
*  para saber la cantidad que queda realmente por descargar
        SELECT * INTO TABLE lt_vbfa
          FROM vbfa
          WHERE vbelv = ls_ekes-vbeln AND
                posnv = ls_ekes-vbelp AND
                vbtyp_n = gc_vbtyp_n_q.
        LOOP AT lt_vbfa INTO ls_vbfa.
          IF ls_vbfa-plmin = '-'.
            ls_vbfa-rfmng = ls_vbfa-rfmng  * -1.
          ENDIF.
          gs_em_po-menge_pick = gs_em_po-menge_pick  + ls_vbfa-rfmng.
          SELECT * APPENDING TABLE gs_em_po-t_lqua
                   FROM lqua
                   WHERE btanr = ls_vbfa-vbeln AND
                         btaps = ls_vbfa-posnn+2(4) AND
                         lenum <> space.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    gs_em_po-menge = gs_em_po-menge - gs_em_po-menge_pick.

    "
    " SEIS 27.05.22 Adaptaciones para tener en cuenta la nueva tabla donde
    " se están almacenando las lecturas.
    "
    DATA vl_menge_lecturas LIKE gs_em_po-menge_pick.
    SELECT SUM( menge_input )
      INTO vl_menge_lecturas
      FROM zwm_rf_em_lect
      WHERE ebeln = ls_ekpo-ebeln AND
            ebelp = ls_ekpo-ebelp AND
            finalizado = ''.
    gs_em_po-menge_pick = gs_em_po-menge_pick + vl_menge_lecturas.
    gs_em_po-menge = gs_em_po-menge - vl_menge_lecturas.


    IF gs_em_po-menge GT 0 OR
       gs_em_po-uebtk = abap_true OR "si no tiene limite no calculamos cantidad pendiente
       gs_param-uebtk_rf = abap_true. " cvivo - 14.06.19 - Trabajar simultáneamente sobre el mismo pedido

      SELECT SINGLE maktx INTO gs_em_po-maktx
             FROM makt
             WHERE matnr = gs_em_po-matnr AND
                   spras = sy-langu.
      APPEND gs_em_po TO gt_em_po.
    ENDIF.


  ENDLOOP.

  "BEG Kyvor - RDM - 20190911 - check delivery GR made
  IF gt_em_po IS INITIAL AND lv_valid_ekes = abap_true
    AND lines( lt_ekes ) > 0 AND lv_no_err = abap_false
    .
    SELECT vbeln
      FROM vbuk
      INTO @DATA(lv_vbeln_chck)
      FOR ALL ENTRIES IN @lt_ekes
      WHERE vbeln = @lt_ekes-vbeln
      AND wbstk = 'A'.
      lv_no_err = abap_true.
      EXIT.
    ENDSELECT.
  ENDIF.
  "END Kyvor - RDM - 20190911 - check delivery GR made

  IF gt_em_po IS INITIAL.

    g_message_number = '013'.
    "g_message_type = 'E'. "Kyvor - RDM - 20190911
    g_message_type = COND #( WHEN lv_no_err = abap_true THEN 'A' ELSE 'E' ). "Kyvor - RDM - 20190911
    g_msgid = COND #( WHEN lv_no_err = abap_true THEN VALUE #( ) ELSE g_msgid ). "Kyvor - RDM - 20190911
    g_msgv1 = gs_ekko-ebeln.

    IF lv_no_err IS INITIAL. " si vamos a salir limpiamos el transporte, si no no
      CLEAR gs_vttk.
    ENDIF.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
*    LOOP AT gt_em_po INTO gs_em_po.
** recuperamos las OTs de las entregas y restamos cantidades
*      SELECT vbfa~rfmng_flo, vbfa~meins, ltap~nlenr INTO TABLE @DATA(lt_ots)
*          FROM ( vbfa INNER JOIN lips ON
*                 vbfa~vbelv = lips~vbeln AND
*                 vbfa~posnv = lips~posnr ) INNER JOIN ltap ON
*                 ltap~tanum = vbfa~vbeln
*          WHERE vbfa~vbelv = @gs_em_po-vbeln AND
*              ( vbfa~posnv = @gs_em_po-posnr OR
*                lips~uecha = @gs_em_po-posnr ) AND
*                vbtyp_n = 'Q'.
*
*      LOOP AT lt_ots INTO DATA(ls_ot).
*        CALL FUNCTION 'MD_CONV_QUANTITY_FLOAT_TO_PACK'
*          EXPORTING
*            iv_menge = ls_ot-rfmng_flo
*          IMPORTING
*            ev_menge = l_qty.
*
*      ENDLOOP.
*      gs_em_po-menge = gs_em_po-menge - l_qty.
*      MODIFY gt_em_po FROM gs_em_po.
*    ENDLOOP.
  ENDIF.

*** INI FCARDONA 05.03.2021 - 62805 - WM ER Reubicar directo en EM

  "Inserto chequeo para que no me borre estos datos si estamos insertando peso.
  CLEAR gs_em_po.

*** INI FCARDONA 05.03.2021 - 62805 - WM ER Reubicar directo en EM

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RECUPERA_ENTREGAS_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recupera_entregas_transporte .
  DATA lr_dlv_inb LIKE LINE OF gr_dlv_inb.
  CLEAR gr_dlv_inb.
  lr_dlv_inb = 'IEQ'.
  SELECT vttp~vbeln INTO lr_dlv_inb-low
               FROM vttp INNER JOIN vbuk
                 ON vttp~vbeln = vbuk~vbeln
              WHERE vttp~tknum = gs_vttk-tknum AND
                     vbuk~wbstk <> 'C'.
    COLLECT lr_dlv_inb INTO gr_dlv_inb.
  ENDSELECT.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ENTER_EM_SAICA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM enter_em_saica .
  DATA l_matnr TYPE matnr.
  DATA lt_matnr TYPE matnr OCCURS 0.
  DATA lt_matkl TYPE TABLE OF matkl WITH HEADER LINE.
  DATA ls_item LIKE gs_em_po.
  DATA l_bobina(20).
  DATA l_ctd_pendiente TYPE menge_d.
  DATA l_ctd_str TYPE char20.
  DATA l_lifnr TYPE lifnr.
  DATA length TYPE sytabix.
  DATA l_calidades(50).


  DATA: lv_dc_length TYPE i. " FCARDONA 17.10.2023 - Bug proveedores compatibles

  IF "NOT g_bobina IS INITIAL AND
     NOT g_fefco IS INITIAL.
    length = strlen( g_fefco ).
* ini 08.04.2019 - cvivo - WM CB: CEPI(FEFCO) por proveedor
* Descomponemos el codigo CEPI, primero del proveedor
    SORT gt_ztmm0002 BY lifnr DESCENDING. " para que coja primero las de proveedor

    LOOP AT gt_ztmm0002 INTO DATA(ls_ztmm0002) WHERE zzcalidad(2) = g_fefco(2).
*                                                 AND lifnr = gs_ekko-lifnr. " DEL - cvivo - 65484 Cogemos todos, ya nos restringirá el pedido
      IF length GT 18. " pallet
        CONCATENATE ls_ztmm0002-matkl  '0' g_fefco+2(3) g_fefco+5(4) g_fefco+9(4) INTO l_matnr.
      ELSE.
        CONCATENATE ls_ztmm0002-matkl  '0' g_fefco+2(3) g_fefco+5(4) INTO l_matnr.
      ENDIF.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = l_matnr
        IMPORTING
          output = l_matnr.
      SELECT SINGLE matnr INTO l_matnr FROM mara WHERE matnr = l_matnr.
      IF sy-subrc IS INITIAL.
        APPEND ls_ztmm0002-matkl TO lt_matkl.
        APPEND l_matnr TO lt_matnr.
      ENDIF.
    ENDLOOP.
    " DEL - cvivo - 65484 Cogemos todos, ya nos restringirá el pedido
*    IF lt_matnr[] IS INITIAL. " no hay propias del proveedor, buscamos genéricas
** fin 08.04.2019 - cvivo - WM CB: CEPI(FEFCO) por proveedor
** Descomponemos el codigo FEFCO.
*      LOOP AT gt_ztmm0002 INTO ls_ztmm0002 WHERE zzcalidad(2) = g_fefco(2)
*                                              AND lifnr = space.
*        IF length GT 18. " pallet
*          CONCATENATE ls_ztmm0002-matkl  '0' g_fefco+2(3) g_fefco+5(4) g_fefco+9(4) INTO l_matnr.
*        ELSE.
*          CONCATENATE ls_ztmm0002-matkl  '0' g_fefco+2(3) g_fefco+5(4) INTO l_matnr.
*        ENDIF.
*        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*          EXPORTING
*            input  = l_matnr
*          IMPORTING
*            output = l_matnr.
*        SELECT SINGLE matnr INTO l_matnr FROM mara WHERE matnr = l_matnr.
*        IF sy-subrc IS INITIAL.
*          APPEND ls_ztmm0002-matkl TO lt_matkl.
*          APPEND l_matnr TO lt_matnr.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
    IF sy-subrc IS INITIAL.
      IF lt_matnr[] IS INITIAL.
        g_message_number = '021'.
        g_message_type = 'A'.
        g_msgv1 = l_matnr.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
* recuperamos el material del codigo de barras
        LOOP AT lt_matnr INTO l_matnr.
          READ TABLE gt_em_po INTO gs_em_po WITH KEY matnr = l_matnr.
          IF NOT sy-subrc IS INITIAL.
            DELETE lt_matnr.
          ENDIF.
        ENDLOOP.
        IF lt_matnr[] IS INITIAL.
          " cvivo 15/07/2019
          LOOP AT lt_matkl.
            IF l_calidades IS INITIAL.
              WRITE lt_matkl TO l_calidades.
            ELSE.
              CONCATENATE l_calidades ',' INTO l_calidades.
              CONCATENATE l_calidades lt_matkl INTO l_calidades SEPARATED BY space.
            ENDIF.
            READ TABLE gt_em_po INTO gs_em_po WITH KEY matkl = lt_matkl.
            IF NOT sy-subrc IS INITIAL.
              DELETE lt_matkl.
            ENDIF.
          ENDLOOP.
          DESCRIBE TABLE lt_matkl LINES sy-tabix.
          IF sy-tabix EQ 1. " si se ha encontrado la calidad, pero no gramaje y ancho
            WRITE g_fefco+2(3) TO g_msgv1 NO-ZERO.
            WRITE g_fefco+5(4) TO g_msgv2 NO-ZERO.
            g_message_number = '080'.
            g_message_type = 'A'.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
            CLEAR: gs_em_po, g_fefco, g_bobina.
          ELSEIF sy-tabix EQ 0.
            g_msgv1 = l_calidades.
            g_message_number = '081'.
            g_message_type = 'A'.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
            CLEAR: gs_em_po, g_fefco, g_bobina.
          ELSE.
            CLEAR: gs_em_po, g_fefco, g_bobina.
*No se encuentra cantidad pendiente en el pedido & para el material &
            g_message_number = '017'.
            g_message_type = 'A'.
            g_msgv1 = gs_em_po-ebeln.
            g_msgv2 = l_matnr.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          ENDIF.
        ELSE.
          CLEAR: gt_select_list[],gt_select_list.
          READ TABLE lt_matnr INTO l_matnr INDEX 2.
          IF sy-subrc IS INITIAL.
* hay mas de dos posibles materiales para el pedido, deben seleccionar
            LOOP AT lt_matnr INTO l_matnr.
              LOOP AT gt_em_po INTO ls_item WHERE matnr = l_matnr.
                gt_select_list-cod = 'MT'.
                gt_select_list-obj_number = ls_item-ebelp.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                  EXPORTING
                    input  = ls_item-matnr
                  IMPORTING
                    output = ls_item-matnr.
                CONCATENATE text-014 ls_item-ebelp '-' ls_item-matnr INTO gt_select_list-obj_numberc SEPARATED BY space.
*                gt_select_list-obj_numberc = ls_item-matnr.
                gt_select_list-obj_number_alt = ls_item-maktx.
                APPEND gt_select_list.
              ENDLOOP.
            ENDLOOP.
            CLEAR g_process.
            g_process = text-013.
            g_local_previous_screen = sy-dynnr.
            CLEAR g_partial_list.
            CLEAR g_partial_list_0086.
            CLEAR g_partial_list_0091.
            CALL SCREEN 9997.
            IF length GT 18. "pallet
              gs_em_po-menge_input = g_fefco+13(4).
            ELSE.
              gs_em_po-menge_input = g_fefco+9(4).
            ENDIF.
          ELSE.
            LOOP AT gt_em_po INTO ls_item WHERE matnr = l_matnr.
              gt_select_list-cod = 'MT'.
              gt_select_list-obj_number = ls_item-ebelp.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                EXPORTING
                  input  = ls_item-matnr
                IMPORTING
                  output = ls_item-matnr.
              CONCATENATE text-014 ls_item-ebelp '-' ls_item-matnr INTO gt_select_list-obj_numberc SEPARATED BY space.

*              gt_select_list-obj_numberc = ls_item-matnr.
              gt_select_list-obj_number_alt = ls_item-maktx.
              APPEND gt_select_list.
            ENDLOOP.
            READ TABLE gt_select_list INDEX 2.
            IF sy-subrc IS INITIAL.
              g_local_previous_screen = sy-dynnr.
              CLEAR g_process.
              g_process = text-013.
              CLEAR g_partial_list.
              CLEAR g_partial_list_0086.
              CLEAR g_partial_list_0091.
              CALL SCREEN 9997.
            ENDIF.
            IF length GT 18. "pallet
              gs_em_po-menge_input = g_fefco+13(4).
            ELSE.
              gs_em_po-menge_input = g_fefco+9(4).
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
*No se encontro entrada en la tabla ZTMM0002 para la calidad &
      g_message_number = '020'.
      g_message_type = 'A'.
      g_msgv1 = g_fefco(2).
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      CLEAR g_fefco.
    ENDIF.
  ELSEIF NOT g_bobina IS INITIAL AND
             g_fefco IS INITIAL AND
             gs_em_po-menge_input IS INITIAL.
    "
    " SEIS 07.09.22
    " Incluimos nueva validación sobre tabla Z.
    "
    DATA vl_notransporte TYPE xflag.
    IF ( g_no_transporte IS NOT INITIAL ).
      vl_notransporte = 'X'.
    ELSE.
      CLEAR vl_notransporte.
    ENDIF.
    CALL FUNCTION 'Z_WM_RF_VALIDAR_LECTURA'
      EXPORTING
        p_em_po         = gs_em_po
        p_vttk          = gs_vttk
        p_ekko          = gs_ekko
        p_likp          = gs_likp
        p_notransporte  = vl_notransporte
        p_bobina        = g_bobina
        p_fefco         = g_fefco
        p_lgnum         = gs_param-lgnum
        p_nlpla         = gs_reubic-nlpla
      EXCEPTIONS
        bobina_ya_leida = 1
        OTHERS          = 2.
    IF sy-subrc <> 0.
      g_message_number = '062'.
      g_message_type = 'A'.
      g_msgv1 = g_bobina.
      CLEAR: g_msgv2, g_msgv3, g_msgv4.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      CLEAR g_bobina.
    ELSE.

*** --> INI FCARDONA 25.09.2023 - Bug lectura cuando proveedor no compatible.

* " Comento por nueva lógica
*
*      IF NOT gr_dc_saica IS INITIAL.
*        l_bobina = g_bobina.
*        WRITE l_bobina TO l_bobina RIGHT-JUSTIFIED.
*        IF l_bobina+16(4) NOT IN gr_dc_saica.
** etan introduciendo el codigo fefco en el campo bobina
*          g_message_number = '061'.
*          g_message_type = 'A'.
**      g_msgv1 = g_fefco(2).
*          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*          CLEAR g_bobina.
*        ENDIF.
*      ENDIF.

      IF ( gs_param-tcode EQ 'ZWM_RF_004' ). "Sin reetiquetaje

        IF ( gr_dc_saica IS INITIAL ).

          "estan introduciendo codigo fefco en el campo bobina
          g_message_number = '061'.
          g_message_type = 'A'.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          CLEAR g_bobina.

        ELSE.

*** --> INI FCARDONA 17.10.2023 - Bug lectura cuando proveedor no compatible.

*"""" Comento por nueva lógica.
*
*          l_bobina = g_bobina.
*          WRITE l_bobina TO l_bobina RIGHT-JUSTIFIED.
*          IF l_bobina+16(4) NOT IN gr_dc_saica.
*          IF l_bobina+16(lv_dc_length) NOT IN gr_dc_saica.
*            "estan introduciendo el codigo fefco en el campo bobina
*            g_message_number = '061'.
*            g_message_type = 'A'.
*            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*            CLEAR g_bobina.
*
*          ENDIF.
*
*        ENDIF.

          DATA: lv_check TYPE bool.

          l_bobina = g_bobina.
          WRITE l_bobina TO l_bobina RIGHT-JUSTIFIED.

          sy-subrc = 4.

          LOOP AT gr_dc_saica INTO DATA(lv_dc_bobina).

            CLEAR: lv_dc_length.
            lv_dc_length = strlen( lv_dc_bobina-low ).

            IF ( lv_dc_length GT 0 ).

              IF ( l_bobina+16(lv_dc_length) EQ lv_dc_bobina-low ).
                MOVE abap_true TO lv_check.
                EXIT.
              ENDIF.

            ELSE.

              MOVE abap_true TO lv_check.
              EXIT.

            ENDIF.

          ENDLOOP.

          IF lv_check EQ abap_false.
            "estan introduciendo el codigo fefco en el campo bobina
            g_message_number = '061'.
            g_message_type = 'A'.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
            CLEAR g_bobina.

          ENDIF.

        ENDIF.

*** <-- FIN FCARDONA 17.10.2023 - Bug lectura cuando proveedor no compatible.

      ENDIF.

    ENDIF.

*** <-- FIN FCARDONA 25.09.2023 - Bug lectura cuando proveedor no compatible.

*      IF NOT gr_dc_saica IS INITIAL.
*        l_bobina = g_bobina.
*        WRITE l_bobina TO l_bobina RIGHT-JUSTIFIED.
*        IF l_bobina+16(4) NOT IN gr_dc_saica.
** etan introduciendo el codigo fefco en el campo bobina
*          g_message_number = '061'.
*          g_message_type = 'A'.
**      g_msgv1 = g_fefco(2).
*          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*          CLEAR g_bobina.
*        ENDIF.
*      ENDIF.
*    ENDIF.
* chequeamos si la UA ha sido leida ya.
*    SELECT SINGLE lenum INTO g_bobina
*           FROM lqua WHERE lgnum = gs_param-lgnum AND
*                            lenum = g_bobina.
*    IF sy-subrc IS INITIAL.
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = g_bobina
*        IMPORTING
*          output = l_bobina.
*
*      "BEG Kyvor - RDM - 20190918
*      IF zcl_wm_rf_func=>check_parameter(
*       iv_func   = zcl_wm_rf_func=>gc_func_nuevas_func_en_sin
*       iv_lgnum  = gs_param-lgnum
*   ) = abap_true.
*        CLEAR g_msgid.
*      ENDIF.
*      "END Kyvor - RDM - 20190918
**El codigo de bobina & ya ha sido leido.
*      g_message_number = '062'.
*      g_message_type = 'A'.
*      g_msgv1 = g_bobina.
*      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*      CLEAR g_bobina.
*    ELSE.
*      IF NOT gr_dc_saica IS INITIAL.
*        l_bobina = g_bobina.
*        WRITE l_bobina TO l_bobina RIGHT-JUSTIFIED.
*        IF l_bobina+16(4) NOT IN gr_dc_saica.
** etan introduciendo el codigo fefco en el campo bobina
*          g_message_number = '061'.
*          g_message_type = 'A'.
**      g_msgv1 = g_fefco(2).
*          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*          CLEAR g_bobina.
*        ENDIF.
*      ENDIF.
*    ENDIF.
  ELSEIF NOT g_bobina IS INITIAL AND
             g_fefco IS INITIAL AND
             gs_em_po-menge_input IS NOT INITIAL.
    CHECK gs_em_po-uebtk IS INITIAL. "sin suministro ilimitado
* chequeamos cantiddad
    l_ctd_pendiente = ( gs_em_po-menge  + (  ( gs_em_po-menge_org  * gs_em_po-uebto ) / 100 ) ).
    IF gs_em_po-menge_input > l_ctd_pendiente.
* excede el limite de stock de pedido incluso con la tolerancia.
*El codigo de bobina & ya ha sido leido.
*Cantidad a entrar excede el pedido. Cantidad disponible en pedido &
      WRITE l_ctd_pendiente TO l_ctd_str UNIT gs_em_po-meins.
      CONDENSE l_ctd_str NO-GAPS.
      CONCATENATE l_ctd_str gs_em_po-meins INTO l_ctd_str SEPARATED BY space.
      g_message_number = '064'.
      g_message_type = 'A'.
      g_msgv1 = l_ctd_str.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      CLEAR ok_code.
      CLEAR gs_em_po-matnr.
      CLEAR gs_em_po-menge_input.
*      CLEAR g_bobina.
      CLEAR g_fefco.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTA_MATERIALES_PO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lista_materiales_po .

  CLEAR: gt_select_list[],gt_select_list.

  LOOP AT gt_em_po INTO DATA(ls_item).
    gt_select_list-cod = 'MT'.
    gt_select_list-obj_number = ls_item-ebelp.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_item-matnr
      IMPORTING
        output = ls_item-matnr.
    CONCATENATE text-014 ls_item-ebelp '-' ls_item-matnr INTO gt_select_list-obj_numberc SEPARATED BY space.

*    gt_select_list-obj_numberc = ls_item-matnr.
    gt_select_list-obj_number_alt = ls_item-maktx.
    APPEND gt_select_list.
  ENDLOOP.
  CLEAR g_process.
  g_process = text-013.

  g_local_previous_screen = sy-dynnr.
  CLEAR g_partial_list.
  CLEAR g_partial_list_0086.
  CLEAR g_partial_list_0091.

  CALL SCREEN 9997.


ENDFORM.
* ini - cvivo - WM CB en otros proveedores, directamente a pantalla de posiciones de pedido
*&---------------------------------------------------------------------*
*&      Form  LISTA_MATERIALES_PO_COMPLETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lista_materiales_po_completa .
  DATA: st   TYPE string,
        text TYPE char10.

  IF gt_po_list[] IS INITIAL..
    CLEAR: gt_select_list[],gt_select_list.

    LOOP AT gt_em_po INTO DATA(ls_item).
      gt_po_list-cod = 'MT'.
      gt_po_list-obj_number = ls_item-ebelp.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = ls_item-matnr
        IMPORTING
          output = ls_item-matnr.

      MOVE ls_item-ebelp TO st. SHIFT st LEFT DELETING LEADING '0'.
      CONCATENATE text-014 st '-' ls_item-matnr INTO gt_po_list-obj_numberc SEPARATED BY space.

*    gt_select_list-obj_numberc = ls_item-matnr.
      gt_po_list-obj_number_alt = ls_item-maktx.

      WRITE ls_item-menge TO text UNIT 'KG'.
      MOVE text TO st. SHIFT st LEFT DELETING LEADING '0'.
      CONCATENATE st text-017 INTO st SEPARATED BY space.
      DATA(length) = strlen( st ).

      DATA(offset) = 50 - length.

      gt_po_list-obj_number_alt+offset(length) = st.

      APPEND gt_po_list.
    ENDLOOP.
    CLEAR g_process.
    g_process = text-013.

    gt_select_list[] = gt_po_list[].
    g_local_previous_screen = sy-dynnr.

    CLEAR g_partial_list.
    CLEAR g_partial_list_0086.
    CLEAR g_partial_list_0091.
  ENDIF.

ENDFORM.
* fin - cvivo - WM CB en otros proveedores, directamente a pantalla de posiciones de pedido
*&---------------------------------------------------------------------*
*&      Form  RECUPERA_BOBINAS_PUERTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recupera_bobinas_puerto .
  DATA lr_puerto TYPE RANGE OF lgort_d.
  DATA ls_puerto LIKE LINE OF lr_puerto.

  CLEAR gt_em_puerto.
* recuperamos los almacenes de puerto

  SELECT * INTO TABLE @DATA(lt_tvarvc) FROM tvarvc
    WHERE name = 'ZWM_ALMACENES_PUERTO'
      AND low EQ @g_werks.

  LOOP AT lt_tvarvc INTO DATA(ls_tvarvc).
    ls_puerto-sign = ls_tvarvc-sign.
    ls_puerto-option = 'CP'.
    ls_puerto-low = ls_tvarvc-high.
    APPEND ls_puerto TO lr_puerto.
  ENDLOOP.

  SELECT a~xblnr,
         b~lifnr,
         b~menge,
         b~meins,
         c~clabs, " 55627 - cvivo
         c~matnr,
         c~charg,
         c~werks,
         c~lgort,
         b~mblnr,  " cvivo - 68264 - no tener en cuenta anulaciones
         b~mjahr,  " cvivo - 68264 - no tener en cuenta anulaciones
         b~zeile    " cvivo - 68264 - no tener en cuenta anulaciones
         INTO TABLE @DATA(lt_101_puerto)
         FROM mkpf AS a
         INNER JOIN mseg AS b ON ( b~mblnr = a~mblnr AND
                                   b~mjahr = a~mjahr )
         INNER JOIN mchb AS c ON ( c~matnr = b~matnr AND
                                   c~werks = b~werks AND
                                   c~charg = b~charg )
         WHERE a~xblnr = @g_xblnr
         AND c~lgort IN @lr_puerto
         AND c~clabs > 0
         AND c~lvorm = ' '.

  IF lt_101_puerto[] IS INITIAL.
    CLEAR: g_xblnr, g_licha.
    g_message_number = '018'.
    g_message_type = 'A'.
    g_msgv1 = g_xblnr.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.

* Recuperamos los datos que faltan para el listado:
    LOOP AT lt_101_puerto INTO DATA(ls_101_puerto).
      SELECT SINGLE @abap_true FROM mseg  " cvivo - 68264 - no tener en cuenta anulaciones
        WHERE smbln EQ @ls_101_puerto-mblnr
          AND sjahr EQ @ls_101_puerto-mjahr
          AND smblp EQ @ls_101_puerto-zeile
        INTO @DATA(check).

      IF sy-subrc EQ 0.
        CONTINUE.
      ENDIF.

      CLEAR gs_em_puerto.
      MOVE-CORRESPONDING ls_101_puerto TO gs_em_puerto.
      gs_em_puerto-menge = ls_101_puerto-clabs. " 55627 - cvivo
      " Lote proveedor:
      IF ls_101_puerto-lifnr CP 'P*'. " si es intercompany no hay lote prov, es el lote SAP
        gs_em_puerto-licha = ls_101_puerto-charg.
      ELSE.
        SELECT SINGLE licha INTO gs_em_puerto-licha
          FROM mch1
          WHERE matnr = ls_101_puerto-matnr
          AND charg = ls_101_puerto-charg.
      ENDIF.

      " Descripción de material:
      SELECT SINGLE maktx INTO gs_em_puerto-maktx
        FROM makt
        WHERE matnr = ls_101_puerto-matnr
        AND spras = sy-langu.


      " Nombre del proveedor:
      SELECT SINGLE name1 INTO gs_em_puerto-name1
        FROM lfa1
        WHERE lifnr = ls_101_puerto-lifnr.

      APPEND gs_em_puerto TO gt_em_puerto.

    ENDLOOP.

******* INI GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

*    Activación o desactivación de funcionalidad
    READ TABLE gt_func INTO DATA(ls_func)
    WITH KEY func = 'PESO_ALBARAN'
            (gv_lgnum_lg) = 'X'.

    IF gs_vttk-zzpeso_alb IS INITIAL
    AND sy-subrc = 0.

      CALL SCREEN '0076'.

    ENDIF.

******* FIN GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

    READ TABLE gt_em_puerto INTO gs_em_puerto INDEX 1.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RECUPERA_BOBINAS_EXTERIOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recupera_bobinas_exterior .
  DATA lr_almacen TYPE RANGE OF lgort_d.
  DATA ls_almacen LIKE LINE OF lr_almacen.

  CLEAR gt_em_puerto.
* recuperamos los almacenes de puerto

  SELECT * INTO TABLE @DATA(lt_tvarvc) FROM tvarvc WHERE name = 'ZWM_ALMACENES_EXTERIOR'.

  LOOP AT lt_tvarvc INTO DATA(ls_tvarvc).
    ls_almacen-sign = ls_tvarvc-sign.
    ls_almacen-option = ls_tvarvc-opti.
    ls_almacen-low = ls_tvarvc-low.
    ls_almacen-high = ls_tvarvc-high.
    APPEND ls_almacen TO lr_almacen.
  ENDLOOP.

  SELECT SINGLE c~xblnr_mkpf,
   c~lifnr,
   c~menge,
   c~meins,
   a~matnr,
   a~charg,
   b~werks,
   b~lgort,
   b~clabs " 55627 - cvivo
   INTO @DATA(ls_101_exterior)
   FROM mch1 AS a
   INNER JOIN mchb AS b ON ( b~matnr = a~matnr  AND
                             b~charg = a~charg )
   INNER JOIN mseg AS c ON ( c~matnr = a~matnr  AND
                             c~charg = a~charg  AND
                             c~werks = b~werks  AND
                             c~bwart = '101' )
   WHERE a~charg = @g_licha(10) "primero probamos si es de intercompany
   AND b~lgort IN @lr_almacen
   AND b~clabs > 0
   AND b~lvorm = ' '.

  IF sy-subrc IS NOT INITIAL.
    SELECT SINGLE c~xblnr_mkpf,
     c~lifnr,
     c~menge,
     c~meins,
     a~matnr,
     a~charg,
     b~werks,
     b~lgort,
     b~clabs " 55627 - cvivo
     INTO @DATA(ls_101_exterior_2)
     FROM mch1 AS a
     INNER JOIN mchb AS b ON ( b~matnr = a~matnr  AND
                               b~charg = a~charg )
     INNER JOIN mseg AS c ON ( c~matnr = a~matnr  AND
                               c~charg = a~charg  AND
                               c~werks = b~werks  AND
                               c~bwart = '101' )
     WHERE a~licha = @g_licha "luego probamos para el resto de proveedores
     AND b~lgort IN @lr_almacen
     AND b~clabs > 0
     AND b~lvorm = ' '.

    ls_101_exterior = ls_101_exterior_2.
  ENDIF.

  IF ls_101_exterior IS INITIAL.
    CLEAR: g_xblnr, g_licha.
    g_message_number = '066'.
    g_message_type = 'A'.
    g_msgv1 = g_licha.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.

* Recuperamos los datos que faltan para el listado:
    CLEAR gs_em_puerto.
    MOVE-CORRESPONDING ls_101_exterior TO gs_em_puerto.
    " Cantidad libre utilización
    gs_em_puerto-menge = ls_101_exterior-clabs. " 55627 - cvivo
    " Lote proveedor:
    MOVE g_licha TO gs_em_puerto-licha.

    " Descripción de material:
    SELECT SINGLE maktx INTO gs_em_puerto-maktx
      FROM makt
      WHERE matnr = ls_101_exterior-matnr
      AND spras = sy-langu.

    " Nombre del proveedor:
    SELECT SINGLE name1 INTO gs_em_puerto-name1
      FROM lfa1
      WHERE lifnr = ls_101_exterior-lifnr.

    APPEND gs_em_puerto TO gt_em_puerto.

    READ TABLE gt_em_puerto INTO gs_em_puerto INDEX 1.
    CLEAR g_licha.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FIN_DESCARGA_PUERTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fin_descarga_puerto USING p_fin_tr .
  DATA: ls_header TYPE         bapi2017_gm_head_01,
        ls_code   TYPE         bapi2017_gm_code,
        lt_item   LIKE         bapi2017_gm_item_create OCCURS 0,
        ls_head   TYPE         bapi2017_gm_head_ret,
        lv_doc    LIKE         bapi2017_gm_head_ret-mat_doc,
        lv_year   LIKE         bapi2017_gm_head_ret-doc_year,
        ls_item   TYPE         bapi2017_gm_item_create,
        lt_return LIKE         bapiret2 OCCURS 0,
        ls_return TYPE         bapiret2,
        lv_index  LIKE         sy-tabix.
  DATA lt_trite  TYPE l03b_trite_t.
  DATA ls_trite TYPE l03b_trite.
  DATA ls_tvarvc TYPE tvarvc.
  DATA: l_tanum             TYPE tanum,
        ls_header_sp        TYPE bapishipmentheader,
        ls_header_action_sp TYPE bapishipmentheaderaction.

  CLEAR ls_header.

  ls_header-pstng_date = sy-datum.
  ls_header-doc_date = sy-datum.
  ls_header-ver_gr_gi_slip = '1'.
  ls_header-ver_gr_gi_slipx = 'X'.
  ls_header-pr_uname = sy-uname.

  CLEAR ls_code.
  ls_code-gm_code = '04'.

  CLEAR: lt_item, ls_item.
  REFRESH: lt_item.
  LOOP AT gt_em_puerto INTO DATA(ls_em_puerto) WHERE read = abap_true.
    CLEAR ls_item.
    ls_item-material = ls_em_puerto-matnr.
    ls_item-batch = ls_em_puerto-charg.
    ls_item-plant = ls_em_puerto-werks.
    ls_item-stge_loc = ls_em_puerto-lgort.
    ls_item-move_type = gs_param-bwart.
    ls_item-entry_qnt = ls_em_puerto-menge.
    ls_item-entry_uom = ls_em_puerto-meins.
    ls_item-move_stloc = gs_param-lgort.
    WRITE gs_vttk-tknum TO ls_item-unload_pt NO-ZERO. " cvivo - CB WM - En puerto marcamos aquí el transporte para trazar
    APPEND ls_item TO lt_item.
  ENDLOOP.

  CLEAR: ls_head, lv_doc, lv_year, lt_return, ls_return.
  REFRESH: lt_return.
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_header
      goodsmvt_code    = ls_code
    IMPORTING
      goodsmvt_headret = ls_head
      materialdocument = lv_doc
      matdocumentyear  = lv_year
    TABLES
      goodsmvt_item    = lt_item
      return           = lt_return.

*   Comprobamos errores
  CLEAR ls_return.
  READ TABLE lt_return INTO ls_return
  WITH KEY type = 'E'.
  IF sy-subrc = 0.

    PERFORM crear_mensaje_sistema USING ls_return-id
                                        ls_return-number
                                        ls_return-message_v1
                                        ls_return-message_v2
                                        ls_return-message_v3
                                        ls_return-message_v4
                               CHANGING g_msgv1
                                        g_msgv2
                                        g_msgv3
                                        g_msgv4.

    g_message_type = 'E'.
    g_message_number = '000'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
* creamos las OTs
* recuperamos las NT
    SELECT SINGLE * INTO @DATA(ls_ltbk)
                    FROM ltbk
                    WHERE lgnum = @gs_param-lgnum AND
                          mblnr = @lv_doc AND
                          mjahr = @lv_year AND
                          bwart = '311'.

    IF sy-subrc IS INITIAL.

      SELECT * INTO TABLE @DATA(lt_ltbp)
               FROM ltbp
               WHERE lgnum = @ls_ltbk-lgnum AND
                     tbnum = @ls_ltbk-tbnum.

      LOOP AT lt_ltbp INTO DATA(ls_ltbp).
        CLEAR: ls_tvarvc, ls_em_puerto.
        READ TABLE gt_em_puerto INTO ls_em_puerto WITH KEY charg = ls_ltbp-charg.

        IF sy-subrc EQ 0.
          SELECT SINGLE * FROM tvarvc
            INTO ls_tvarvc
            WHERE name EQ 'ZWM_DC'
              AND low EQ ls_em_puerto-lifnr
              AND high NE space.
        ENDIF.

        ls_trite-tbpos = ls_ltbp-tbpos.
        ls_trite-altme = ls_ltbp-meins.
        ls_trite-anfme = ls_ltbp-menge.
        ls_trite-charg = ls_ltbp-charg.
        ls_trite-vltyp = ls_ltbk-vltyp.
        ls_trite-vlpla = ls_ltbk-vlpla.
        IF ls_tvarvc IS INITIAL.
          ls_trite-nlenr = ls_ltbp-charg.
        ELSE.
          CONCATENATE ls_ltbp-charg ls_tvarvc-high(4) INTO ls_trite-nlenr.
        ENDIF.
        ls_trite-nlpla = gs_param-nlpla.
        ls_trite-nltyp = gs_param-nltyp.

        " 68264 - cvivo - tipo UA en función de tipo material
        SELECT SINGLE tvarvc~name FROM mara
          INNER JOIN tvarvc
            ON  tvarvc~low EQ mara~mtart
            AND tvarvc~name LIKE 'ZWM_TIPO_MAT%'
          WHERE matnr EQ @ls_ltbp-matnr
          INTO @DATA(tipo_ua).

        IF tipo_ua EQ 'ZWM_TIPO_MAT_BOBINA'.
          ls_trite-letyp = 'BB'.
        ELSEIF tipo_ua EQ 'ZWM_TIPO_MAT_PALLET'.
          ls_trite-letyp = 'PL'.
        ENDIF.

        APPEND ls_trite TO lt_trite.
      ENDLOOP.

      CALL FUNCTION 'L_TO_CREATE_TR'
        EXPORTING
          i_lgnum                        = ls_ltbk-lgnum
          i_tbnum                        = ls_ltbk-tbnum
*         i_bname                        = gst_zwm005-bname
          i_squit                        = abap_true
          i_tbeli                        = abap_true
          it_trite                       = lt_trite
        IMPORTING
          e_tanum                        = l_tanum
        EXCEPTIONS
          foreign_lock                   = 1
          qm_relevant                    = 2
          tr_completed                   = 3
          xfeld_wrong                    = 4
          ldest_wrong                    = 5
          drukz_wrong                    = 6
          tr_wrong                       = 7
          squit_forbidden                = 8
          no_to_created                  = 9
          update_without_commit          = 10
          no_authority                   = 11
          preallocated_stock             = 12
          partial_transfer_req_forbidden = 13
          input_error                    = 14
          OTHERS                         = 15.
      IF sy-subrc <> 0.
        PERFORM crear_mensaje_sistema USING ls_return-id
                                            ls_return-number
                                            ls_return-message_v1
                                            ls_return-message_v2
                                            ls_return-message_v3
                                            ls_return-message_v4
                                   CHANGING g_msgv1
                                            g_msgv2
                                            g_msgv3
                                            g_msgv4.

        g_message_type = 'E'.
        g_message_number = '000'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
* Imprimimos etiquetas
        LOOP AT lt_trite INTO ls_trite.
          CLEAR: ls_tvarvc, ls_em_puerto.
          READ TABLE gt_em_puerto INTO ls_em_puerto WITH KEY charg = ls_trite-charg.

          IF sy-subrc EQ 0.
            SELECT SINGLE * FROM tvarvc
              INTO ls_tvarvc
              WHERE name EQ 'ZWM_DC'
                AND low EQ ls_em_puerto-lifnr
                AND high NE space.
            IF sy-subrc NE 0.
              PERFORM imprimir_etiqueta USING  ls_trite-nlenr.
            ENDIF.
          ELSE.
            PERFORM imprimir_etiqueta USING  ls_trite-nlenr.
          ENDIF.
        ENDLOOP.
        IF p_fin_tr = abap_true.
* marcamos el fin de transporte
          ls_header_sp-shipment_num = gs_vttk-tknum.
          ls_header_sp-status_plan = 'X'.
          ls_header_action_sp-status_plan = 'C'.

          ls_header_sp-status_load_end = 'X'.
          ls_header_action_sp-status_load_end = 'C'.

          ls_header_sp-suppl_2 = sy-tcode.
          ls_header_action_sp-suppl_2 = 'C'.

* damos fin de transporte
          CALL FUNCTION 'BAPI_SHIPMENT_CHANGE'
            EXPORTING
              headerdata       = ls_header_sp
              headerdataaction = ls_header_action_sp
            TABLES
              return           = lt_return.

          READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
          IF sy-subrc IS INITIAL.
            ROLLBACK WORK.
            PERFORM crear_mensaje_sistema USING ls_return-id
                                              ls_return-number
                                              ls_return-message_v1
                                              ls_return-message_v1
                                              ls_return-message_v1
                                              ls_return-message_v1
                                     CHANGING g_msgv1
                                              g_msgv2
                                              g_msgv3
                                              g_msgv4.

            g_message_type = 'E'.
            g_message_number = '000'.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.
            g_message_number = '019'.
            g_message_type = 'A'.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
            LEAVE TO TRANSACTION 'LM01'.
          ENDIF.
        ELSE.
          " KYV/RDM - 20191220 - BEG
          CLEAR ls_return.
          PERFORM crear_mensaje_sistema USING 'ZWM_RF'
                                       '011'
                                       ls_return-message_v1
                                       ls_return-message_v2
                                       ls_return-message_v3
                                       ls_return-message_v4
                              CHANGING g_msgv1
                                       g_msgv2
                                       g_msgv3
                                       g_msgv4.

          g_message_type = 'E'.
          g_message_number = '008'.
          sy-tcode = 'LM01'.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          "LEAVE TO TRANSACTION sy-tcode.

          " KYV/RDM - 20191220 - END


        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTA_CONFIRMADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lista_confirmados .

*         INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

*    Activación o desactivación de funcionalidad
  READ TABLE gt_func INTO DATA(ls_func)
  WITH KEY func = 'CAMBIA_LIST_BULTOS_LEIDOS'
          (gv_lgnum_lg) = 'X'.

*         FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

  CLEAR: gt_select_list[],gt_select_list.
  LOOP AT gt_em_puerto INTO DATA(ls_em_puerto) WHERE read = abap_true.
    gt_select_list-cod = 'CN'.
    gt_select_list-obj_number = ls_em_puerto-charg.
    gt_select_list-obj_numberc = ls_em_puerto-maktx.
    gt_select_list-obj_number_alt = ls_em_puerto-maktx.

*         INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
    gt_select_list-zzpeso_alb = ls_em_puerto-menge.
    gt_select_list-dtmeg = ls_em_puerto-meins.
    gt_select_list-matnr = ls_em_puerto-matnr.
    IF ls_func IS NOT INITIAL.
      gt_select_list-obj_numberc = ls_em_puerto-charg.
    ENDIF.
*         FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
    APPEND gt_select_list.
  ENDLOOP.

  g_local_previous_screen = sy-dynnr.
  CLEAR g_partial_list.
  CLEAR g_partial_list_0091.
  CLEAR g_partial_list_0086.


*         INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19 y 9-5-19
*  Se restringe que 'ZWM_RF_008' no se quiere lo nuevo

* NAC -> Se añade comprobación, si se pulsa FIN Descarga
* Que no salte a ninguna pantalla sino que siga la ejecución
* al PERFORM grabar_puerto.
  IF sy-ucomm NE 'FIN'.
    IF ls_func IS NOT INITIAL AND sy-tcode NE 'ZWM_RF_008'.
      CALL SCREEN 0077.
    ELSE.
      CALL SCREEN 9997.
    ENDIF.
  ENDIF.

*         FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19  y 9-5-19
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTAR_UBICACIONES_MP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM listar_ubicaciones_mp .

  CLEAR: gt_select_list[],gt_select_list.
  SELECT * INTO TABLE gt_zwm_rf_mat_pend FROM zwm_rf_mat_pend
    WHERE lgnum EQ g_lgnum.
  LOOP AT gt_zwm_rf_mat_pend INTO DATA(ls_ubicacion).
    gt_select_list-cod = 'CN'.
    gt_select_list-obj_number = ls_ubicacion-lgpla.
    gt_select_list-obj_numberc = ls_ubicacion-descripcion.
    gt_select_list-obj_number_alt = ls_ubicacion-descripcion.
    APPEND gt_select_list.
  ENDLOOP.

  g_local_previous_screen = sy-dynnr.
  CLEAR g_partial_list.
  CLEAR g_partial_list_0086.
  CLEAR g_partial_list_0091.
  CALL SCREEN 9997.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_CANTIDAD_UA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM modificar_cantidad_ua .
  DATA: ls_header TYPE         bapi2017_gm_head_01,
        ls_code   TYPE         bapi2017_gm_code,
        lt_item   LIKE         bapi2017_gm_item_create OCCURS 0,
        ls_head   TYPE         bapi2017_gm_head_ret,
        lv_doc    LIKE         bapi2017_gm_head_ret-mat_doc,
        lv_year   LIKE         bapi2017_gm_head_ret-doc_year,
        ls_item   TYPE         bapi2017_gm_item_create,
        lt_return LIKE         bapiret2 OCCURS 0,
        ls_return TYPE         bapiret2,
        lv_index  LIKE         sy-tabix.
  DATA lt_trite  TYPE l03b_trite_t.
  DATA ls_trite TYPE l03b_trite.
  DATA l_tanum TYPE tanum.
  DATA ls_zwm_rf_mat_pend TYPE zwm_rf_mat_pend.
  DATA l_menge_in TYPE bstmg.
  DATA l_menge_out TYPE bstmg.

  l_menge_in = gs_reubic-verme.
* convertimos la cantidad de m a KG
  CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
    EXPORTING
      i_matnr              = gs_reubic-matnr
      i_in_me              = gs_reubic-meins_wm
      i_out_me             = gs_reubic-meins
      i_menge              = l_menge_in
    IMPORTING
      e_menge              = l_menge_out
    EXCEPTIONS
      error_in_application = 1
      error                = 2
      OTHERS               = 3.

  IF l_menge_out > gs_lqua-verme.
*La cantidad a modificar no puede ser mayor que la actual
    g_message_number = '023'.
    g_message_type = 'A'.
    g_msgv1 = gs_reubic-nlpla.
    CLEAR g_msgv2.
    CLEAR g_msgv3.
    CLEAR g_msgv4.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    CLEAR ls_header.

*** --> INI FCARDONA - 27.09.2023 - Ajuste cantidad auxiliares

*""" Comento por cambio de lógica
*
*    SELECT SINGLE * INTO ls_zwm_rf_mat_pend
*           FROM zwm_rf_mat_pend
*           WHERE lgnum = gs_param-lgnum AND
*                 lgpla = gs_reubic-lgpla.

    "Comprobamos si es un auxiliar de ISC
    "
    " NOTA: Hardcodeamos para arranque. Hay que mejorar esta logica.
    IF ( gs_param-lgnum EQ '270' AND gs_reubic-lgtyp EQ '500' AND gs_reubic-lgtyp EQ '500' ).

      "Comprobamos si es un axuliar.
      SELECT COUNT(*) UP TO 1 ROWS
        FROM mara
       WHERE matnr EQ gs_reubic-matnr
         AND mtart IN ('ZAUX','ZMAP','ZEMB').

      IF ( sy-subrc EQ 0 ).

        CLEAR: ls_zwm_rf_mat_pend.
        ls_zwm_rf_mat_pend-lgnum = gs_param-lgnum.
        ls_zwm_rf_mat_pend-lgpla = gs_reubic-lgpla.
        ls_zwm_rf_mat_pend-bwart = '551'.

      ENDIF.

    ELSE.

      "Aplicamos lógica de siempre.
      SELECT SINGLE * INTO ls_zwm_rf_mat_pend
        FROM zwm_rf_mat_pend
        WHERE lgnum = gs_param-lgnum AND
              lgpla = gs_reubic-lgpla.

    ENDIF.


*** <-- INI FCARDONA - 27.09.2023 - Ajuste cantidad auxiliares

    IF sy-subrc IS INITIAL.
      ls_header-pstng_date = sy-datum.
      ls_header-doc_date = sy-datum.
      ls_header-ver_gr_gi_slip = '1'.
      ls_header-ver_gr_gi_slipx = 'X'.
      ls_header-pr_uname = sy-uname.

      CLEAR ls_code.
      ls_code-gm_code = '03'.

      CLEAR: lt_item, ls_item.
      REFRESH: lt_item.
      CLEAR ls_item.
      ls_item-material = gs_reubic-matnr.
      ls_item-batch = gs_reubic-charg.
      ls_item-plant = gs_reubic-werks.
      ls_item-stge_loc = gs_reubic-lgort.
      ls_item-move_type = ls_zwm_rf_mat_pend-bwart.
      ls_item-entry_qnt = gs_lqua-verme  - l_menge_out.

      IF gs_reubic-verme GT 0.
        ls_item-entry_qnt = trunc( ls_item-entry_qnt ). " cvivo 19.06.19 - quitar decimales
      ENDIF.

      ls_item-entry_uom = gs_reubic-meins.
      ls_item-move_stloc = gs_reubic-lgort.

** KYVOR(AG) - INI - 12.08.2019 - Mov. Almacén-Ajustar cantidad
      IF g_ajustar_cantidad_bloq IS NOT INITIAL.
        ls_item-stck_type = gs_lqua-bestq.
      ENDIF.
** KYVOR(AG) - FIM - 12.08.2019 - Mov. Almacén-Ajustar cantidad


      APPEND ls_item TO lt_item.

      CLEAR: ls_head, lv_doc, lv_year, lt_return, ls_return.
      REFRESH: lt_return.
      CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
        EXPORTING
          goodsmvt_header  = ls_header
          goodsmvt_code    = ls_code
        IMPORTING
          goodsmvt_headret = ls_head
          materialdocument = lv_doc
          matdocumentyear  = lv_year
        TABLES
          goodsmvt_item    = lt_item
          return           = lt_return.

*   Comprobamos errores
      CLEAR ls_return.
      READ TABLE lt_return INTO ls_return
      WITH KEY type = 'E'.
      IF sy-subrc = 0.

        PERFORM crear_mensaje_sistema USING ls_return-id
                                            ls_return-number
                                            ls_return-message_v1
                                            ls_return-message_v2
                                            ls_return-message_v3
                                            ls_return-message_v4
                                   CHANGING g_msgv1
                                            g_msgv2
                                            g_msgv3
                                            g_msgv4.

        g_message_type = 'E'.
        g_message_number = '000'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
* creamos las OTs
* recuperamos las NT
        SELECT SINGLE * INTO @DATA(ls_ltbk)
                        FROM ltbk
                        WHERE lgnum = @gs_param-lgnum AND
                              mblnr = @lv_doc AND
                              mjahr = @lv_year AND
                              bwart = @ls_zwm_rf_mat_pend-bwart.

        IF sy-subrc IS INITIAL.
          SELECT * INTO TABLE @DATA(lt_ltbp)
                   FROM ltbp
                   WHERE lgnum = @ls_ltbk-lgnum AND
                         tbnum = @ls_ltbk-tbnum.

          LOOP AT lt_ltbp INTO DATA(ls_ltbp).
            ls_trite-tbpos = '1'.
            ls_trite-altme = ls_ltbp-meins.
            ls_trite-anfme = ls_ltbp-menge.
            ls_trite-charg = ls_ltbp-charg.
            ls_trite-vltyp = gs_lqua-lgtyp.
            ls_trite-vlpla = gs_lqua-lgpla.
            ls_trite-nlenr = gs_reubic-lenum.
            ls_trite-nlpla = ls_ltbk-nlpla.
            ls_trite-nltyp = ls_ltbk-nltyp.
            ls_trite-letyp = gs_param-letyp.
            APPEND ls_trite TO lt_trite.
          ENDLOOP.
          CALL FUNCTION 'L_TO_CREATE_TR'
            EXPORTING
              i_lgnum                        = ls_ltbk-lgnum
              i_tbnum                        = ls_ltbk-tbnum
*             i_bname                        = gst_zwm005-bname
              i_squit                        = abap_true
              i_tbeli                        = abap_true
              it_trite                       = lt_trite
            IMPORTING
              e_tanum                        = l_tanum
            EXCEPTIONS
              foreign_lock                   = 1
              qm_relevant                    = 2
              tr_completed                   = 3
              xfeld_wrong                    = 4
              ldest_wrong                    = 5
              drukz_wrong                    = 6
              tr_wrong                       = 7
              squit_forbidden                = 8
              no_to_created                  = 9
              update_without_commit          = 10
              no_authority                   = 11
              preallocated_stock             = 12
              partial_transfer_req_forbidden = 13
              input_error                    = 14
              OTHERS                         = 15.
          IF sy-subrc <> 0.
*            PERFORM anular_movimiento USING lv_doc lv_year.
            PERFORM crear_mensaje_sistema USING sy-msgid
                                                sy-msgno
                                                sy-msgv1
                                                sy-msgv2
                                                sy-msgv3
                                                sy-msgv4
                                       CHANGING g_msgv1
                                                g_msgv2
                                                g_msgv3
                                                g_msgv4.

            g_message_type = 'E'.
            g_message_number = '000'.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          ELSE.
*Se ha modificado la cantidad de la bobina &
            g_message_number = '024'.
            g_message_type = 'A'. " si no no ejecuta la impresión porque sale a otra pantalla
            g_msgv1 = gs_reubic-lenum.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
* Reimprimimos la etiqueta
            PERFORM imprimir_etiqueta USING gs_lqua-lenum.
            LEAVE TO TRANSACTION sy-tcode.
          ENDIF.
        ELSE.
          PERFORM anular_movimiento USING lv_doc lv_year.
        ENDIF.
      ENDIF.
    ELSE.
*La bobina no se encuentra en una ubicación de material pendiente
      g_message_number = '058'.
      g_message_type = 'A'.
      g_msgv1 = gs_reubic-lenum.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ANULAR_MOVIMIENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_DOC  text
*      -->P_LV_YEAR  text
*----------------------------------------------------------------------*
FORM anular_movimiento  USING    p_doc
                                 p_year.
  DATA lt_return TYPE TABLE OF bapiret2.
  CALL FUNCTION 'BAPI_GOODSMVT_CANCEL'
    EXPORTING
      materialdocument = p_doc
      matdocumentyear  = p_year
    TABLES
      return           = lt_return.
  READ TABLE lt_return INTO DATA(ls_return)  WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHEQUEAR_UBICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM chequear_ubicacion .

  DATA: lv_datatype TYPE dd01v-datatype.

  IF ( gs_param-lgnum EQ '210' ).

    "fcc-13.04.21 - Quitar ceros izquierda ubicacion.
    CALL FUNCTION 'NUMERIC_CHECK'
      EXPORTING
        string_in = gs_lagp-lgpla
      IMPORTING
*       STRING_OUT       =
        htype     = lv_datatype.

    IF ( lv_datatype EQ 'NUMC' ).

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = gs_lagp-lgpla
        IMPORTING
          output = gs_lagp-lgpla.

      IF ( strlen( gs_lagp-lgpla ) LT 3 ).
        UNPACK gs_lagp-lgpla TO gs_lagp-lgpla(3).
      ENDIF.

    ENDIF.

  ENDIF.

  SELECT SINGLE *
    INTO CORRESPONDING FIELDS OF gs_lagp
    FROM lagp
    WHERE lgnum = gs_param-lgnum AND
          lgpla = gs_lagp-lgpla.
  IF sy-subrc <> 0.
    g_msgv1 = gs_lagp-lgpla.
    g_message_type = 'A'.
    g_message_number = '025'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    RETURN.
  ENDIF.

  "JCB 09.07.24. Comprobar bloqueo ubicación
  IF gs_lagp-skzua = 'X' OR gs_lagp-skzue = 'X'.
    g_msgv1 = gs_lagp-lgpla.
    g_message_type = 'A'.
    g_message_number = '093'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    RETURN.
  ENDIF.

  SELECT SINGLE vlpla FROM ltap INTO gs_lagp-lgpla
    WHERE lgnum = gs_param-lgnum
      AND pquit = ' '
      AND vltyp = gs_lagp-lgtyp
      AND vlpla = gs_lagp-lgpla.
  IF sy-subrc = 0.
    g_message_type = 'A'.
    g_message_number = '026'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    RETURN.
  ENDIF.

  SELECT SINGLE nlpla
    FROM ltap INTO gs_lagp-lgpla
    WHERE lgnum = gs_param-lgnum
      AND pquit = ' '
      AND nltyp = gs_lagp-lgtyp
      AND nlpla = gs_lagp-lgpla.
  IF sy-subrc = 0.
    g_message_type = 'A'.
    g_message_number = '027'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    RETURN.
  ENDIF.

  PERFORM bloquear_ubicacion USING abap_true '1'.
  CALL SCREEN 0041.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  AJUSTAR_UBICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ajustar_ubicacion .
  DATA l_tanum TYPE tanum.
  DATA l_error.
  DATA lt_lein TYPE TABLE OF lein.
  DATA ls_lagp_upd TYPE lagpv.
* desbloqueamos la ubicación para inventario
  PERFORM bloquear_ubicacion USING space '1'.

* Recuperamos todas las UAS que están en la ubicación tratada
  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_lein
  FROM lein INNER JOIN lqua ON
       lein~lgnum = lqua~lgnum AND
       lein~lenum = lqua~lenum AND
       lein~lgtyp = lqua~lgtyp AND
       lein~lgpla = lqua~lgpla
  WHERE lqua~lgnum = gs_param-lgnum
    AND lqua~lgtyp = gs_lagp-lgtyp
    AND lqua~lgpla = gs_lagp-lgpla
    AND lqua~verme > 0.

  SORT lt_lein BY lenum.

  DELETE ADJACENT DUPLICATES FROM lt_lein COMPARING lenum.

* Todas las que estén en la BBDD y no se hayan seleccionado, se
* sacan de la ubicación y se mandan al almacén 999
  LOOP AT lt_lein INTO DATA(ls_lein).
    READ TABLE gt_recuento INTO gs_recuento WITH KEY lgnum = ls_lein-lgnum
                                                    lenum = ls_lein-lenum.
    IF sy-subrc = 0.
*     La UA está en los dos sitios, la borramos y no se hace nada
      DELETE gt_recuento INDEX sy-tabix.
      DELETE lt_lein.
    ELSE.
*     La UA está en la BBDD pero no se ha encontrado físicamente.
*     Se saca del almacén
      CLEAR l_tanum.
      CALL FUNCTION 'L_TO_CREATE_MOVE_SU'
        EXPORTING
          i_lenum               = ls_lein-lenum
          i_bwlvs               = gs_param-bwlvs   "'999'
          i_nltyp               = gs_param-nltyp   " '999'
          i_nlpla               = gs_param-nlpla   "'DIFERENCIA'
          i_squit               = 'X'
          i_commit_work         = ' '
*         i_bname               = g_bname
        IMPORTING
          e_tanum               = l_tanum
        EXCEPTIONS
          not_confirmed_to      = 1
          foreign_lock          = 2
          bwlvs_wrong           = 3
          betyp_wrong           = 4
          nltyp_wrong           = 5
          nlpla_wrong           = 6
          nltyp_missing         = 7
          nlpla_missing         = 8
          squit_forbidden       = 9
          lgber_wrong           = 10
          xfeld_wrong           = 11
          drukz_wrong           = 12
          ldest_wrong           = 13
          no_stock_on_su        = 14
          su_not_found          = 15
          update_without_commit = 16
          no_authority          = 17
          benum_required        = 18
          ltap_move_su_wrong    = 19
          lenum_wrong           = 20
          error_message         = 21
          OTHERS                = 22.

      IF sy-subrc <> 0.
*       ERROR
        l_error = abap_true.
        PERFORM crear_mensaje_sistema USING sy-msgid
                                            sy-msgno
                                            sy-msgv1
                                            sy-msgv2
                                            sy-msgv3
                                            sy-msgv4
                                   CHANGING g_msgv1
                                            g_msgv2
                                            g_msgv3
                                            g_msgv4.

        g_message_type = 'A'.
        g_message_number = '000'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*        PERFORM bloquear_ubicacion USING 'X' '1'.
      ENDIF.
    ENDIF.
  ENDLOOP.
* Todas las bobinas encontradas en la ubicacion y con ubicacion distinta deben moverse a la ubicacion ajustada
  LOOP AT gt_recuento INTO gs_recuento WHERE lgnum <> gs_lagp-lgnum OR
                                             lgtyp <> gs_lagp-lgtyp OR
                                             lgpla <> gs_lagp-lgpla.
    CLEAR l_tanum.
    CALL FUNCTION 'L_TO_CREATE_MOVE_SU'
      EXPORTING
        i_lenum               = gs_recuento-lenum
        i_bwlvs               = gs_param-bwlvs   "'999'
        i_nltyp               = gs_lagp-lgtyp
        i_nlpla               = gs_lagp-lgpla
        i_squit               = 'X'
        i_commit_work         = ' '
*       i_bname               = g_bname
      IMPORTING
        e_tanum               = l_tanum
      EXCEPTIONS
        not_confirmed_to      = 1
        foreign_lock          = 2
        bwlvs_wrong           = 3
        betyp_wrong           = 4
        nltyp_wrong           = 5
        nlpla_wrong           = 6
        nltyp_missing         = 7
        nlpla_missing         = 8
        squit_forbidden       = 9
        lgber_wrong           = 10
        xfeld_wrong           = 11
        drukz_wrong           = 12
        ldest_wrong           = 13
        no_stock_on_su        = 14
        su_not_found          = 15
        update_without_commit = 16
        no_authority          = 17
        benum_required        = 18
        ltap_move_su_wrong    = 19
        lenum_wrong           = 20
        error_message         = 21
        OTHERS                = 22.
    IF sy-subrc <> 0.
*       ERROR
      l_error = abap_true.
      PERFORM crear_mensaje_sistema USING sy-msgid
                                          sy-msgno
                                          sy-msgv1
                                          sy-msgv2
                                          sy-msgv3
                                          sy-msgv4
                                 CHANGING g_msgv1
                                          g_msgv2
                                          g_msgv3
                                          g_msgv4.

      g_message_type = 'A'.
      g_message_number = '000'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*      PERFORM bloquear_ubicacion USING 'X' '1'.
    ENDIF.
  ENDLOOP.

  IF l_error IS INITIAL.
* modificamos la fehca de ultimo inventario para la ubicacion
    UPDATE lagp SET idatu = sy-datum
                    kzinv = 'MA' " cvivo - 19/02/2019 - Marcamos inventario manual, para que aparezca en LX25
                WHERE lgnum = gs_lagp-lgnum AND
                      lgtyp = gs_lagp-lgtyp AND
                      lgpla = gs_lagp-lgpla.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
*Se ha ajustado la ubicación &
    g_message_number = '030'.
    g_message_type = 'A'.
    g_msgv1 = gs_reubic-lenum.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    LEAVE TO TRANSACTION sy-tcode.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  OK_AJUSTE_UBICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ok_ajuste_ubicacion .
  DATA l_text TYPE char20.
  IF NOT g_lenum IS INITIAL.
    SELECT SINGLE * INTO @DATA(ls_lein)
           FROM lein
           WHERE lgnum = @gs_param-lgnum AND
                  lenum = @g_lenum.
    IF NOT sy-subrc IS INITIAL.
** si no ha encontrado la bobina buscamos con el mismo
**codigo sin el ultimo digito.
*      WRITE g_lenum(19) TO l_text RIGHT-JUSTIFIED.
*      CLEAR g_lenum.
*      l_text(1) = 0.
*      g_lenum = l_text.
*      SELECT SINGLE * INTO ls_lein
*             FROM lein
*             WHERE lgnum = gs_param-lgnum AND
*                    lenum = g_lenum.
*      IF sy-subrc IS INITIAL.
** Buscamos la bobina en el sistema
*      SELECT SINGLE * INTO gs_recuento FROM lqua WHERE lgnum = gs_param-lgnum AND
*                    lenum = g_lenum.
*
*      IF sy-subrc IS INITIAL.
*        READ TABLE gt_recuento INTO gs_recuento WITH KEY lenum = gs_recuento-lenum.
*        IF NOT sy-subrc IS INITIAL.
*          PERFORM convertir_uni USING gs_recuento-matnr CHANGING gs_recuento-verme gs_recuento-meins .
*          APPEND gs_recuento TO gt_recuento.
*          PERFORM get_makt USING gs_recuento-matnr.
*        ENDIF.
*      ENDIF.
*      ELSE.
*La bobina & no se encuentra en el sistema.
      g_msgv1 = g_lenum.
      CLEAR g_lenum.
      g_message_type = 'A'.
      g_message_number = '028'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      CLEAR g_bobina.
*      ENDIF.
      CLEAR g_lenum.
    ELSE.
* Buscamos la bobina en el sistema
      SELECT SINGLE * INTO gs_recuento FROM lqua WHERE lgnum = gs_param-lgnum AND
                    lenum = g_lenum.

      IF sy-subrc IS INITIAL.
        READ TABLE gt_recuento INTO gs_recuento WITH KEY lenum = gs_recuento-lenum.
        IF NOT sy-subrc IS INITIAL.
          PERFORM convertir_uni USING gs_recuento-matnr CHANGING gs_recuento-verme gs_recuento-meins .

          IF gs_recuento-meins <> 'KG'.
            gs_recuento-meins = 'KG'.
          ELSE.
            gs_recuento-meins_kg = 'M'.
          ENDIF.

          CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
            EXPORTING
              i_matnr              = gs_recuento-matnr
              i_in_me              = gs_recuento-meins
              i_out_me             = gs_recuento-meins_kg
              i_menge              = gs_recuento-verme
            IMPORTING
              e_menge              = gs_recuento-verme_kg
            EXCEPTIONS
              error_in_application = 1
              error                = 2
              OTHERS               = 3.
          IF sy-subrc <> 0.
            CLEAR gs_recuento-verme_kg.
          ENDIF.

          APPEND gs_recuento TO gt_recuento.
        ENDIF.
        PERFORM get_makt USING gs_recuento-matnr.
      ENDIF.
    ENDIF.
  ENDIF.
  CLEAR g_lenum.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BLOQUEAR_UBICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_4218   text
*----------------------------------------------------------------------*
FORM bloquear_ubicacion USING p_bloquear p_motivo.
  DATA: lw_lbinh TYPE          e1lbinh,
        lt_lbini TYPE TABLE OF e1lbini WITH HEADER LINE,
        l_motivo LIKE          lagp-spgru.
  DATA ls_lagp TYPE lagp.

  REFRESH lt_lbini.
  CLEAR: lw_lbinh,lt_lbini.

  SELECT SINGLE * INTO ls_lagp FROM lagp WHERE lgnum = gs_lagp-lgnum AND
                                               lgtyp = gs_lagp-lgtyp AND
                                               lgpla = gs_lagp-lgpla.

*--> INI FCARDONA - 84320  Bloqueo de ubicaciones en inventarios

*"" Comento por cambio de lógica
*
*  IF ( p_bloquear IS INITIAL AND
*        ls_lagp-spgru IS INITIAL ) OR
*     ( p_bloquear <> space AND
*       ls_lagp-spgru <> space ).
*    EXIT.
*  ENDIF.

  "Rambleños pide no bloquear la ubicación.

  IF ( p_bloquear = abap_true AND ls_lagp-lgnum = '210' ).
    EXIT.
  ENDIF.

*<-- FIN FCARDONA - 84320  Bloqueo de ubicaciones en inventarios

"" Comento por cambio de lógica

  IF ( p_bloquear IS INITIAL AND
        ls_lagp-spgru IS INITIAL ) OR
     ( p_bloquear <> space AND
       ls_lagp-spgru <> space ).
    EXIT.
  ENDIF.

  lw_lbinh-lgnum = gs_lagp-lgnum.
  lw_lbinh-lgtyp = gs_lagp-lgtyp.
  lt_lbini-lgpla = gs_lagp-lgpla.
  lt_lbini-spgru = p_motivo.

  IF p_bloquear IS INITIAL.
    lw_lbinh-deblo = 'X'.        "Desbloquear ubicación
  ENDIF.
* Bloqueo para inventario sin referencia.
  lw_lbinh-block = p_bloquear.  "Bloquear ubicación
  lt_lbini-skzua = 'X'.    "Bloqueo de salidas
  lt_lbini-skzue = 'X'.    "Bloqueo de entradas
  APPEND lt_lbini.

  CALL FUNCTION 'L_BLOCK_AISLE'
    EXPORTING
      lbinh             = lw_lbinh
    TABLES
      lbini             = lt_lbini
    EXCEPTIONS
      consistency_check = 1
      OTHERS            = 2.
  IF sy-subrc <> 0.
    g_msgv1 = g_bobina.
    g_message_type = 'E'.
    g_message_number = '029'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LECTURAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_lecturas .

  CLEAR: gt_select_list[],gt_select_list.

  LOOP AT gt_recuento INTO DATA(ls_recuento).
*    gt_select_list-cod = 'MT'.
    gt_select_list-obj_number = ls_recuento-lenum.
    gt_select_list-obj_numberc = ls_recuento-lenum.
    PERFORM get_makt USING ls_recuento-matnr.
    gt_select_list-obj_number_alt = gs_makt-maktx.
    APPEND gt_select_list.
  ENDLOOP.
  PERFORM get_makt USING gs_recuento-matnr.

  g_local_previous_screen = sy-dynnr.
  CLEAR g_partial_list.
  CLEAR g_partial_list_0086.
  CLEAR g_partial_list_0091.
  CALL SCREEN 9997.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RECUPERA_DATOS_INV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recupera_datos_inv .
  CLEAR sw_nueva.
  SELECT * INTO TABLE gt_linp FROM linp WHERE lgnum = gs_link-lgnum AND
                                        ivnum = gs_link-ivnum AND
                                      ( istat = 'A' OR
                                        istat = 'N' ).

  SELECT * INTO TABLE gt_linv FROM linv WHERE lgnum = gs_link-lgnum AND
                                        ivnum = gs_link-ivnum AND
                                      ( istat = 'A' OR
                                        istat = 'N' ).
  DESCRIBE TABLE gt_linp LINES g_lineas.
  READ TABLE gt_linp INTO gs_linp INDEX 1.
  g_index_linp = 1.
  CLEAR gs_linv.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ACTIVAR_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*

FORM activar_inventario .
  DATA: l_modo     VALUE 'N',
        lt_messtab TYPE TABLE OF bdcmsgcoll WITH HEADER LINE.

  REFRESH: bdcdata,lt_messtab.

  PERFORM bdc_insert USING: 'SAPML04I'    '1041'     'X',
                            'LINK-LGNUM'  gs_link-lgnum ' ',
                            'LINK-IVNUM'  gs_link-ivnum ' ',
*                            'RL04I-DUNKL' 'D'        ' ',
                            'BDC_OKCODE'  '/00'      ' ',
                            'SAPML04I'    '1021'     'X',
                            'BDC_OKCODE'  '=AK'      ' ',
                            'LINK-UNAME' sy-uname ' '.


  REFRESH lt_messtab.

  CALL TRANSACTION 'LI02N' USING bdcdata MODE l_modo
    MESSAGES INTO lt_messtab.
  LOOP AT lt_messtab WHERE msgtyp = 'E' OR
                           msgtyp = 'A'.
    EXIT.
  ENDLOOP.
  IF sy-subrc IS INITIAL.
    PERFORM crear_mensaje_sistema USING sy-msgid
                                        sy-msgno
                                        sy-msgv1
                                        sy-msgv2
                                        sy-msgv3
                                        sy-msgv4
                               CHANGING g_msgv1
                                        g_msgv2
                                        g_msgv3
                                        g_msgv4.
    g_message_type = 'E'. " salir de pantalla
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  OK_BUSCAR_UA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ok_buscar_ua .
  IF NOT g_lenum IS INITIAL.
    SELECT SINGLE * INTO @DATA(ls_lein) FROM lein WHERE lenum = @g_lenum.
    IF sy-subrc IS INITIAL.
*      IF ls_lein-lgnum <> gs_linp-lgnum OR
*          ls_lein-lgtyp <> gs_link-lgtyp OR
*          ls_lein-lgpla <> gs_linp-lgpla.
*        g_msgv1 = ls_lein-lgpla.
*        g_message_type = 'E'.
*        g_message_number = '031'.
*        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      SELECT SINGLE * INTO CORRESPONDING FIELDS OF gs_lqua
             FROM lqua
             WHERE lgnum = ls_lein-lgnum AND
                   lgtyp = ls_lein-lgtyp AND
                   lgpla = ls_lein-lgpla AND
                   lenum = g_lenum.
*      MOVE-CORRESPONDING gs_lqua TO gs_recuento.
      MOVE-CORRESPONDING gs_lqua TO gs_linv.
    ELSE.
      READ TABLE gt_linv INTO gs_linv WITH KEY lenum = g_lenum.
    ENDIF.
  ELSE.
    CHECK sw_nueva IS INITIAL.
    g_msgv1 = g_lenum.
    g_message_type = 'A'.
    g_message_number = '028'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.
  CLEAR g_lenum.
ENDFORM.
FORM ok_ua_aprovisionamiento.
*  DATA: text(20).
*
*  WRITE g_lenum(19) TO text RIGHT-JUSTIFIED.
*  text(1) = 0.

  IF NOT g_lenum IS INITIAL.
    SELECT SINGLE * INTO @DATA(ls_lein) FROM lein WHERE lenum = @g_lenum.
    IF sy-subrc IS INITIAL.
      SELECT SINGLE * FROM lqua INTO @DATA(ls_lqua) WHERE lgnum = @gs_param-lgnum AND
      lenum = @ls_lein-lenum.
      IF ls_lqua-matnr <> gs_nts-matnr.
*        g_msgv1 = ls_lein-lgpla.
        g_message_type = 'W'.
        g_message_number = '039'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        IF ok_code = 'NEXT'.
          PERFORM reubicar.
        ENDIF.
      ELSE.
* NAC -> WM09 NO_MOVER_STOCK_BLOQUEADO  ZWM_RF_014 "Aprovisionamiento a producción guiado"
* Comprueba si la funcionalidad esta activada.
        READ TABLE gt_func INTO DATA(ls_func_016)
          WITH KEY func = 'NO_MOVER_STOCK_BLOQUEADO'
                  (gv_lgnum_lg) = 'X'.
        IF ls_func_016 IS NOT INITIAL.
          IF ls_lqua-bestq IS NOT INITIAL.
            MESSAGE ID 'ZWM_RF' TYPE 'E' NUMBER '073'.

          ENDIF.
        ENDIF.
        IF gt_stock_nts[] IS INITIAL.
          MOVE-CORRESPONDING ls_lqua TO gs_stock_nts.
          PERFORM convertir_uni USING gs_stock_nts-matnr CHANGING gs_stock_nts-verme gs_stock_nts-meins .
          sw_confirmado = abap_true.
        ELSE.
* NAC <- WM09 NO_MOVER_STOCK_BLOQUEADO  ZWM_RF_014 "Aprovisionamiento a producción guiado"
          READ TABLE gt_stock_nts INTO gs_stock_nts WITH KEY lenum = ls_lein-lenum.
          IF sy-subrc IS INITIAL.
            sw_confirmado = abap_true.
          ELSE.
            g_msgv1 = g_lenum.
            g_msgv2 = gs_param-vltyp.
            g_message_type = 'E'.
            g_message_number = '067'.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
      g_msgv1 = g_lenum.
      g_message_type = 'E'.
      g_message_number = '028'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ENDIF.
  ENDIF.
  CLEAR g_lenum.
  CLEAR g_lgpla.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GRABAR_RECUENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM grabar_recuento.
  DATA:lt_linv TYPE TABLE OF e1linvx WITH HEADER LINE.
  DATA ls_linv TYPE linv.
  DATA l_error.
  LOOP    AT   gt_linv_save INTO ls_linv.
    MOVE-CORRESPONDING ls_linv TO lt_linv.
    IF lt_linv-lqnum = '0000000000'.
      lt_linv-wdatu = sy-datum.
    ENDIF.
    lt_linv-menga = ls_linv-gesme.
    lt_linv-altme = ls_linv-meins.
    APPEND lt_linv.
  ENDLOOP.
  LOOP    AT   gt_linv INTO DATA(ls_linv_org).
* añadimos las posiciones no contadas
    READ TABLE gt_linv_save INTO ls_linv WITH KEY lenum = ls_linv_org-lenum.
    IF NOT sy-subrc IS INITIAL.
      MOVE-CORRESPONDING ls_linv_org TO lt_linv.
      IF lt_linv-lqnum = '0000000000'.
        lt_linv-wdatu = sy-datum.
      ENDIF.
      lt_linv-kznul = abap_true.
*      lt_linv-menga = ls_linv-gesme.
      lt_linv-altme = ls_linv-meins.
      APPEND lt_linv.
    ENDIF.
  ENDLOOP.
  CALL FUNCTION 'L_INV_COUNT_EXT'
    TABLES
      s_linv                       = lt_linv
    EXCEPTIONS
      either_quantity_or_empty_bin = 1
      ivnum_not_found              = 2
      check_problem                = 3
      no_count_allowed             = 4
      l_inv_read                   = 5
      bin_not_in_ivnum             = 6
      counts_not_updated           = 7
      lock_error                   = 8
      OTHERS                       = 9.

  IF sy-subrc = 0.
*     Cancelar las diferencias para las ubicaciones tratadas
    PERFORM eliminar_diferencias_inv USING gs_link-lgnum
                                           gs_link-ivnum
                                  CHANGING l_error.
    IF l_error = 0.
      WAIT UP TO 1 SECONDS.
      PERFORM ajustar_ubicacion_doc_inv.
      g_message_number = '035'.
      g_message_type = 'A'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      LEAVE TO TRANSACTION sy-tcode.
    ELSE.
      ROLLBACK WORK.
      IF sy-msgno IS INITIAL.
        g_message_number = '036'.
        g_message_type = 'E'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        PERFORM crear_mensaje_sistema USING sy-msgid
                                            sy-msgno
                                            sy-msgv1
                                            sy-msgv2
                                            sy-msgv3
                                            sy-msgv4
                                   CHANGING g_msgv1
                                            g_msgv2
                                            g_msgv3
                                            g_msgv4.
        g_message_type = 'E'.
        g_message_number = '000'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ENDIF.
    ENDIF.
  ELSE.
    PERFORM crear_mensaje_sistema USING sy-msgid
                                      sy-msgno
                                      sy-msgv1
                                      sy-msgv2
                                      sy-msgv3
                                      sy-msgv4
                             CHANGING g_msgv1
                                      g_msgv2
                                      g_msgv3
                                      g_msgv4.
    g_message_type = 'E'.
    g_message_number = '000'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CONFIRMAR_LINV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM confirmar_linv .
* chqueamos que han rellenado el material y cantidad
  IF gs_linv-matnr IS INITIAL.
    g_message_type = 'A'.
    g_message_number = '032'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    IF gs_linv-gesme IS INITIAL.
      g_message_type = 'A'.
      g_message_number = '033'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ELSE.
* confirmamos la lectura de recuento
      IF sw_nueva = abap_true.
        MOVE-CORRESPONDING gs_link TO gs_linv.
        MOVE-CORRESPONDING gs_linp TO gs_linv.
        MOVE-CORRESPONDING gs_param TO gs_linv.
      ENDIF.
      IF gs_lqua-lgpla <> gs_linp-lgpla AND
        sw_nueva = abap_false.
* es una UA que esta en otra ubicacion, tienen que moverla.
        MOVE-CORRESPONDING gs_lqua TO gs_recuento.
        gs_recuento-nlpla = gs_linp-lgpla.
        gs_recuento-nltyp = gs_link-lgtyp.
        APPEND gs_recuento TO gt_recuento.
      ELSE.
* es una UA nueva o que ya existe en la ubciacion
        APPEND gs_linv TO gt_linv_save.
      ENDIF.

      CLEAR gs_lqua.
      CLEAR gs_linv.
      CLEAR sw_nueva.

    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_DIFERENCIAS_INV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LINK_LGNUM  text
*      -->P_LINK_IVNUM  text
*----------------------------------------------------------------------*
FORM eliminar_diferencias_inv  USING    pe_lgnum
                                        pe_ivnum
                            CHANGING    ps_subrc.
  DATA: l_modo     VALUE 'N',
        lt_messtab TYPE TABLE OF bdcmsgcoll WITH HEADER LINE.
*    NINO
* PARECE QUE LA FUNCION 'L_ZAEHLUNG_BUCHEN' DESBLOQUEA EL DOCUMENTO INVE
* SÓLO EN CASO DE QUE SE HAYA TENIDO UNA DIFFERENCIA!!!
*     Desbloqueamos el documento de inventario
  CALL FUNCTION 'DEQUEUE_ELLINKE'
    EXPORTING
      lgnum = gs_link-lgnum
      ivnum = gs_link-ivnum.
*
  ps_subrc = 0.

  REFRESH: bdcdata,lt_messtab.

  PERFORM bdc_insert USING: 'SAPML04I'    '0222'     'X',
                            'LINV-LGNUM'  pe_lgnum ' ',
                            'LINV-IVNUM'  pe_ivnum ' ',
                            'RL04I-DUNKL' 'D'        ' ',
                            'BDC_OKCODE'  '/00'      ' '.

  REFRESH lt_messtab.

  CALL TRANSACTION 'LI20' USING bdcdata MODE l_modo
    MESSAGES INTO lt_messtab.
  LOOP AT lt_messtab WHERE msgtyp = 'E' OR
                           msgtyp = 'A'.
    ps_subrc = 4.
    EXIT.
  ENDLOOP.
*
*    PERFORM crear_mensaje_sistema USING sy-msgid
*                                        sy-msgno
*                                        sy-msgv1
*                                        sy-msgv2
*                                        sy-msgv3
*                                        sy-msgv4
*                               CHANGING g_msgv1
*                                        g_msgv2
*                                        g_msgv3
*                                        g_msgv4.
*    PERFORM mensajes.

ENDFORM.                    " ELIMINAR_DIFERENCIAS_INV
*&---------------------------------------------------------------------*
*&      Form  BDC_INSERT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0680   text
*      -->P_0681   text
*      -->P_0682   text
*----------------------------------------------------------------------*
FORM bdc_insert  USING p1
                       p2
                       p3.

  CLEAR bdcdata.

  IF p3 = 'X'.
    bdcdata-program  = p1.
    bdcdata-dynpro   = p2.
    bdcdata-dynbegin = 'X'.
  ELSE.
    bdcdata-fnam     = p1.
    bdcdata-fval     = p2.
    bdcdata-dynbegin = space.
  ENDIF.

  APPEND bdcdata.
  CLEAR bdcdata.
ENDFORM.                    " BDC_INSERT
*&---------------------------------------------------------------------*
*&      Form  CHEQUEAR_RECUENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM chequear_recuento .
  DATA ls_linv TYPE linv.
  DATA l_save VALUE abap_true..
  DATA l_kznul TYPE kznul.

  LOOP AT gt_linv INTO DATA(ls_linv_org).
    READ TABLE gt_linv_save INTO ls_linv WITH KEY lenum = ls_linv_org-lenum.
    IF NOT sy-subrc IS INITIAL.
      g_message_number = '037'.
      g_message_type = 'W'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      IF ok_code = 'NEXT'.
        PERFORM grabar_recuento.
        CLEAR l_save.
        EXIT.
      ELSE.
        CLEAR l_save.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.
  IF l_save = abap_true.
    PERFORM grabar_recuento.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_CTD_NT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM modificar_ctd_nt .
  DATA lt_ltbc TYPE TABLE OF ltbc.
  DATA ls_ltbc TYPE ltbc.
  DATA l_ctd TYPE menge_d.

  l_ctd = gs_nts-menga - gs_nts-menge_usr.

  LOOP AT gs_nts-lt_tbnum INTO DATA(l_tbnum).
    LOOP AT gt_ltbp INTO DATA(ls_ltbp) WHERE tbnum = l_tbnum.
      MOVE-CORRESPONDING ls_ltbp TO ls_ltbc.
      IF ls_ltbp-menga GE  l_ctd.
        ls_ltbc-menga = l_ctd.
        ls_ltbc-altme = gs_nts-altme.
        APPEND ls_ltbc TO lt_ltbc.
        CLEAR l_ctd.
      ELSE.
        ls_ltbc-altme = gs_nts-altme.
        APPEND ls_ltbc TO lt_ltbc.
        l_ctd = l_ctd - ls_ltbc-menga.
      ENDIF.
      IF l_ctd IS INITIAL.
        EXIT.
      ENDIF.
    ENDLOOP.
    IF l_ctd IS INITIAL.
      EXIT.
    ENDIF.
  ENDLOOP.

  CALL FUNCTION 'L_TR_CHANGE'
    TABLES
      t_ltbc                   = lt_ltbc
    EXCEPTIONS
      item_error               = 1
      no_update_item_error     = 2
      no_update_no_entry       = 3
      no_update_without_commit = 4
      tr_locked                = 5
      OTHERS                   = 6.
  IF sy-subrc <> 0.
    PERFORM crear_mensaje_sistema USING sy-msgid
                                        sy-msgno
                                        sy-msgv1
                                        sy-msgv2
                                        sy-msgv3
                                        sy-msgv4
                               CHANGING g_msgv1
                                        g_msgv2
                                        g_msgv3
                                        g_msgv4.
    g_message_type = 'E'.
    g_message_number = '000'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    gs_nts-menga = gs_nts-menge_usr.
    CLEAR sw_ctd.
    MODIFY gt_nts FROM gs_nts TRANSPORTING menga WHERE  lznum = gs_nts-lznum.
    g_message_number = '038'.
    g_message_type = 'A'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
* refrescamos cantidades.
    PERFORM listar_necesidades_pendientes.
    IF gs_nts-menga = 0.
      LEAVE TO SCREEN 0.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTA_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lista_stock .

  DATA l_ctd_char TYPE char18.
  DATA l_bobinas TYPE char3.
  DATA l_metros TYPE i.
  PERFORM selecciona_necesidades.

  CLEAR: gt_select_list[],gt_select_list.
* NAC -> WM015 No proponer stock segundas, bloqueado o zona roja
*    Activación o desactivación de funcionalidad
  READ TABLE gt_func INTO DATA(ls_func_014)
  WITH KEY func = 'NO_PROPONER_SEGUNDAS_BLOQ_ZROJ'
          (gv_lgnum_lg) = 'X'.

  IF ls_func_014 IS NOT INITIAL.
* " Si está habilitada la func.
* Descarta bobinas que son "Segundas", las que están
* bloqueadas y las que están en zona Roja.
    DELETE gt_stock_nts WHERE
    zeugn IS NOT INITIAL OR
    bestq IS NOT INITIAL OR
    lgtyp = '030'.
  ENDIF.
* NAC <- WM015 No proponer stock segundas, bloqueado o zona roja

  LOOP AT gt_stock_nts INTO DATA(ls_stock) WHERE matnr = gs_nts-matnr.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_stock-lenum
      IMPORTING
        output = ls_stock-lenum.

    IF ls_stock-verme LT 1000.
      gt_select_list-cod = 'ST'.
      gt_select_list-obj_number = sy-tabix.
      CONCATENATE ls_stock-lgpla '|' ls_stock-lenum INTO gt_select_list-obj_numberc SEPARATED BY space.
      PERFORM convertir_uni USING ls_stock-matnr CHANGING ls_stock-verme ls_stock-meins.
      WRITE ls_stock-verme TO l_ctd_char DECIMALS 0.
      CONDENSE l_ctd_char.
      CONCATENATE l_ctd_char ls_stock-meins INTO gt_select_list-obj_number_alt SEPARATED BY space.
      APPEND gt_select_list.
    ELSE.
      ADD 1 TO l_bobinas.
      PERFORM convertir_uni USING ls_stock-matnr CHANGING ls_stock-verme ls_stock-meins.
      l_metros = l_metros + ls_stock-verme.
    ENDIF.
  ENDLOOP.
* al final del listado informamos el numero de bobinas totales
  IF NOT l_bobinas IS INITIAL.
    gt_select_list-cod = 'ST'.
    CONCATENATE text-009 l_bobinas INTO gt_select_list-obj_numberc SEPARATED BY space.
    WRITE l_metros TO l_ctd_char DECIMALS 0.
    CONDENSE l_ctd_char.
    CONCATENATE l_ctd_char 'M' INTO gt_select_list-obj_number_alt SEPARATED BY space.
    APPEND gt_select_list.

  ENDIF.

  CLEAR g_partial_list.
  CLEAR g_partial_list_0086.
  CLEAR g_partial_list_0091.


*  g_local_previous_screen = sy-dynnr.

  CALL SCREEN 9997.

*  LEAVE TO SCREEN 0.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SAVE_AP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM save_ap .
* creamos la OT
  DATA lt_ltbc TYPE TABLE OF ltbc.
  DATA ls_ltbc TYPE ltbc.
  DATA lt_trite  TYPE l03b_trite_t.
  DATA ls_trite TYPE l03b_trite.
  DATA l_tanum TYPE tanum.
  DATA l_ctd TYPE menge_d.
  DATA ls_ltbk TYPE ltbk.
  DATA ls_ltbp TYPE ltbp.
  DATA l_error.
  DATA l_tbnum TYPE tbnum.
  DATA l_lenum TYPE lenum.
  DATA l_indice TYPE i.

* chequeamos si han leido la ubicacion destino
  IF NOT g_lgpla IS INITIAL.

* chequeamos si hay varias NTs juntas y incrementamos la primera dejando a 0 las siguientes.
    READ TABLE gs_nts-lt_tbnum INTO l_tbnum INDEX 2 .
    IF sy-subrc IS INITIAL.
      CLEAR l_indice.
      LOOP AT gs_nts-lt_tbnum INTO l_tbnum.
        ADD 1 TO l_indice.
        READ TABLE gt_ltbp INTO ls_ltbp WITH KEY tbnum = l_tbnum.
        MOVE-CORRESPONDING ls_ltbp TO ls_ltbc.
        IF l_indice = 1.
          ls_ltbc-menga = ls_ltbc-menga - gs_nts-menga.
* si la bobona supera a la necesidad aumentamos la necesidad
          IF gs_nts-menga LT gs_stock_nts-verme.
            ls_ltbc-menga = ls_ltbc-menga - gs_stock_nts-verme.
          ENDIF.
        ENDIF.
        APPEND ls_ltbc TO lt_ltbc.
      ENDLOOP.
    ELSE.
      IF gs_nts-menga LT gs_stock_nts-verme.
        READ TABLE gs_nts-lt_tbnum INTO l_tbnum INDEX 1.
        READ TABLE gt_ltbp INTO ls_ltbp WITH KEY tbnum = l_tbnum.
        MOVE-CORRESPONDING ls_ltbp TO ls_ltbc.
        ls_ltbc-menga =  gs_nts-menga - gs_stock_nts-verme.
        APPEND ls_ltbc TO lt_ltbc.
      ENDIF.
    ENDIF.

    IF NOT lt_ltbc[] IS INITIAL.
      CALL FUNCTION 'L_TR_CHANGE'
        TABLES
          t_ltbc                   = lt_ltbc
        EXCEPTIONS
          item_error               = 1
          no_update_item_error     = 2
          no_update_no_entry       = 3
          no_update_without_commit = 4
          tr_locked                = 5
          OTHERS                   = 6.
      IF sy-subrc <> 0.
        PERFORM crear_mensaje_sistema USING sy-msgid
                                            sy-msgno
                                            sy-msgv1
                                            sy-msgv2
                                            sy-msgv3
                                            sy-msgv4
                                   CHANGING g_msgv1
                                            g_msgv2
                                            g_msgv3
                                            g_msgv4.
        g_message_type = 'E'.
        g_message_number = '000'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        COMMIT WORK AND WAIT.
      ENDIF.
    ENDIF.

* refrescamos cantidades.
    PERFORM selecciona_necesidades.

* creamos la OT
    READ TABLE gs_nts-lt_tbnum INTO l_tbnum INDEX 1.

    LOOP AT gt_ltbp INTO ls_ltbp WHERE tbnum = l_tbnum.
*recuperamos el stock por la conversion de kg a m
      ls_trite-tbpos = ls_ltbp-tbpos.
      ls_trite-altme = ls_ltbp-altme.
      ls_trite-anfme = gs_stock_nts-verme.
      ls_trite-charg = ls_ltbp-charg.
      ls_trite-vltyp = gs_stock_nts-lgtyp.
      ls_trite-vlpla = gs_stock_nts-lgpla.
      ls_trite-vlenr = gs_stock_nts-lenum.
      ls_trite-nlenr = gs_stock_nts-lenum.
      ls_trite-nlpla = ls_ltbk-nlpla.
      ls_trite-nltyp = ls_ltbk-nltyp.
      ls_trite-letyp = gs_param-letyp.
      APPEND ls_trite TO lt_trite.

      CALL FUNCTION 'L_TO_CREATE_TR'
        EXPORTING
          i_lgnum                        = ls_ltbp-lgnum
          i_tbnum                        = ls_ltbp-tbnum
          i_squit                        = abap_true
          it_trite                       = lt_trite
        IMPORTING
          e_tanum                        = l_tanum
        EXCEPTIONS
          foreign_lock                   = 1
          qm_relevant                    = 2
          tr_completed                   = 3
          xfeld_wrong                    = 4
          ldest_wrong                    = 5
          drukz_wrong                    = 6
          tr_wrong                       = 7
          squit_forbidden                = 8
          no_to_created                  = 9
          update_without_commit          = 10
          no_authority                   = 11
          preallocated_stock             = 12
          partial_transfer_req_forbidden = 13
          input_error                    = 14
          OTHERS                         = 15.
      IF sy-subrc <> 0.
        PERFORM crear_mensaje_sistema USING sy-msgid
                                            sy-msgno
                                            sy-msgv1
                                            sy-msgv2
                                            sy-msgv3
                                            sy-msgv4
                                   CHANGING g_msgv1
                                            g_msgv2
                                            g_msgv3
                                            g_msgv4.

        g_message_type = 'E'.
        g_message_number = '000'.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        l_error = abap_true.
      ELSE.
        COMMIT WORK AND WAIT.
*        g_message_number = '040'.
*        g_message_type = 'E'.
*        g_msgv1 = ls_ltbk-nlpla.
*        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        MESSAGE s040(zwm_rf) WITH ls_ltbk-nlpla. " cvivo - 10/07/2019 - Agilizar
        IF gs_nts-menga LE gs_stock_nts-verme. " si se finaliza la NT
          LEAVE TO TRANSACTION sy-tcode.
        ELSE.
          CLEAR: g_bobina, g_lgpla, sw_confirmado. " nos quedamos en la misma pantalla pero reiniciamos datos
          gs_nts-menga = gs_nts-menga - gs_stock_nts-ausme. " refrescamos cantidad
          PERFORM stock_nts_ap.
          LEAVE TO SCREEN 0051.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ELSE.
*Debe leer ubicación destino
    g_message_number = '055'.
    g_message_type = 'A'.
*    g_msgv1 = ls_ltbk-nlpla.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECCIONA_NECESIDADES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selecciona_necesidades .
  DATA ls_ltbk TYPE ltbk.
  DATA ls_ltbp TYPE ltbp.
  DATA ls_nts LIKE gt_nts.
  DATA lt_ultimo_trabajo LIKE gt_nts OCCURS 0.
  DATA ls_ultimo_trabajo LIKE gt_nts.
  DATA l_indx_ultimo_trabajo TYPE i.
  CLEAR gt_ltbk[].
  CLEAR gt_ltbp[].
  CLEAR gt_nts.
  CLEAR gt_nts[].
  DATA l_ayer TYPE datum.
  DATA l_rows TYPE sytabix.

  l_ayer = sy-datum - 1.

  SELECT SINGLE * FROM tvarvc
    WHERE name EQ 'ZMAX_ROWS_OMP_200'
    INTO @DATA(tvarvc).

  IF sy-subrc EQ 0.
    l_rows = tvarvc-low.
  ELSE.
    l_rows = 100.
  ENDIF.

*seleccionar todas las nts y luego borrar las entradas de GT_nts que tengan cantidad a aprovisionar 0
  SELECT *
    FROM ltbk
    INTO CORRESPONDING FIELDS OF TABLE gt_ltbk
    UP TO l_rows ROWS
    WHERE ( bdatu GT l_ayer OR
          ( statu = space OR
            statu = 'T' )  ) AND  "error -> valores: E  Entrega final , T Entrega parcial
            betyp = 'O' AND
            lgnum EQ gs_param-lgnum.

  IF sy-subrc IS INITIAL.
    SELECT * INTO TABLE gt_ltbp
      FROM ltbp FOR ALL ENTRIES IN gt_ltbk
      WHERE lgnum = gt_ltbk-lgnum AND
            tbnum = gt_ltbk-tbnum AND
             menga > 0.

    SORT gt_ltbk BY pdatu pzeit nlpla ASCENDING.

    LOOP AT gt_ltbk INTO ls_ltbk.
      LOOP AT gt_ltbp INTO ls_ltbp WHERE tbnum = ls_ltbk-tbnum.
* leemos la ultima entrada para esa estacion para saber la ultima calidad, si coincide con la actual, la sumamos
        READ TABLE lt_ultimo_trabajo INTO ls_nts WITH KEY nlpla = ls_ltbk-nlpla.
        IF sy-subrc IS INITIAL AND
          ls_nts-matnr = ls_ltbp-matnr.
          l_indx_ultimo_trabajo = sy-tabix.
          ls_nts-menga = ls_nts-menga + ls_ltbp-menga - ls_ltbp-tamea.
          APPEND ls_ltbk-tbnum TO ls_nts-lt_tbnum.
          MODIFY lt_ultimo_trabajo FROM ls_nts INDEX l_indx_ultimo_trabajo.
          MODIFY gt_nts FROM ls_nts TRANSPORTING menga lt_tbnum WHERE lznum = ls_nts-lznum AND
          nlpla = ls_nts-nlpla AND
          pdatu = ls_nts-pdatu AND
          pzeit = ls_nts-pzeit.
        ELSE.
          CLEAR ls_nts.
          MOVE-CORRESPONDING ls_ltbk TO ls_nts.
          MOVE-CORRESPONDING ls_ltbp TO ls_nts.

          IF ls_ltbk-tbktx NE space.
            ls_nts-comment = 'X'. " marcamos si hay comentario
          ENDIF.

          ls_nts-menga = ls_ltbp-menga - ls_ltbp-tamea.
          SELECT SINGLE maktx INTO ls_nts-maktx
                 FROM makt
                 WHERE matnr = ls_nts-matnr AND
                       spras = sy-langu.
          APPEND ls_ltbk-tbnum TO ls_nts-lt_tbnum.
          APPEND ls_nts TO gt_nts.
* guardamos el ultimo material para esta estacion
          READ TABLE lt_ultimo_trabajo INTO ls_ultimo_trabajo WITH KEY nlpla = ls_ltbk-nlpla.
          IF NOT sy-subrc IS INITIAL.
            APPEND ls_nts TO lt_ultimo_trabajo.
          ELSE.
            MODIFY lt_ultimo_trabajo FROM ls_nts INDEX sy-tabix.
          ENDIF.
        ENDIF.
        CLEAR ls_nts.
      ENDLOOP.
    ENDLOOP.

    DELETE gt_nts WHERE menga LE 1. " borramos las necesidades de menos de 1 m
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  STOCK_NTS_AP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM stock_nts_ap .
* NAC -> WM015 No proponer stock segundas, bloqueado o zona roja
*    Activación o desactivación de funcionalidad
*  DATA: lr_vltyp   TYPE RANGE OF vltyp,
  DATA: lr_vltyp        TYPE RANGE OF lgtyp,
        ls_r_vltyp      LIKE LINE OF lr_vltyp,
        gt_nparam       TYPE TABLE OF zwm_param,
        gs_nparam       LIKE LINE OF gt_nparam,
        lv_result_resta TYPE menge_d,
        bobina_ok       TYPE bool VALUE abap_false,
        lv_index        TYPE sy-tabix.

  SELECT * FROM zwm_param INTO TABLE gt_nparam
    WHERE tcode = sy-tcode
      AND lgnum = g_lgnum.
  LOOP AT gt_nparam INTO gs_nparam WHERE vltyp IS NOT INITIAL.
    ls_r_vltyp-sign = 'I'.
    ls_r_vltyp-option = 'EQ'.
    ls_r_vltyp-low =  gs_nparam-vltyp.
    APPEND ls_r_vltyp TO lr_vltyp.
  ENDLOOP.

  READ TABLE gt_func INTO DATA(ls_func_014)
  WITH KEY func = 'NO_PROPONER_SEGUNDAS_BLOQ_ZROJ'
          (gv_lgnum_lg) = 'X'.

  IF ls_func_014 IS NOT INITIAL.
* Si esta activa la funcionalidad, filtra vltyp con el rango.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_stock_nts
             FROM lqua INNER JOIN lagp ON
                  lqua~lgnum = lagp~lgnum AND
                   lqua~lgtyp = lagp~lgtyp AND
                   lqua~lgpla = lagp~lgpla
             WHERE lqua~lgnum = gs_param-lgnum AND
                   lqua~lgtyp IN lr_vltyp AND
                   lqua~matnr = gs_nts-matnr AND
                   lqua~verme > 0.
* NAC <- WM015 No proponer stock segundas, bloqueado o zona roja
*    Activación o desactivación de funcionalidad
  ELSE.
* si no esta activa la funcionalidad, SELECT anterior
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_stock_nts
           FROM lqua INNER JOIN lagp ON
                lqua~lgnum = lagp~lgnum AND
                 lqua~lgtyp = lagp~lgtyp AND
                 lqua~lgpla = lagp~lgpla
           WHERE lqua~lgnum = gs_param-lgnum AND
                 lqua~lgtyp IN lr_vltyp AND
                 lqua~matnr = gs_nts-matnr AND
                 lqua~verme > 0.
  ENDIF.
  SORT gt_stock_nts BY reihf verme ASCENDING.
  CLEAR gs_stock_nts.
  LOOP AT gt_stock_nts ASSIGNING FIELD-SYMBOL(<stock>).
    PERFORM convertir_uni USING <stock>-matnr CHANGING <stock>-verme <stock>-meins .
  ENDLOOP.

* NAC -> WM015 No proponer stock segundas, bloqueado o zona roja
*    Activación o desactivación de funcionalidad
*  READ TABLE gt_func INTO DATA(ls_func_014)
*  WITH KEY func = 'NO_PROPONER_SEGUNDAS_BLOQ_ZROJ'
*          (gv_lgnum_lg) = 'X'.

  IF ls_func_014 IS NOT INITIAL.
* " Si está habilitada la func.
* Descarta bobinas que son "Segundas", las que están
* bloqueadas y las que están en zona Roja.
    DELETE gt_stock_nts WHERE
    zeugn IS NOT INITIAL OR
    bestq IS NOT INITIAL OR
    lgtyp = '030'.
  ENDIF.

** NAC <- WM015 No proponer stock segundas, bloqueado o zona roja

** NAC -> WM11 3. Propuesta Bobinas NT.
*    clear ls_func_bobina_nt.
  READ TABLE gt_func INTO DATA(ls_func_bobina_nt)
  WITH KEY func = 'PROPUESTA_BOBINA_APROV_NT'
       (gv_lgnum_lg) = 'X'.
* Si esta activa la funcionalidad.
  IF ls_func_bobina_nt IS NOT INITIAL.

* Recupera el intervalo.
    SELECT SINGLE low
      FROM tvarvc
      INTO @DATA(lv_intervalo)
      WHERE name = 'ZWM_RANGO_PROPUESTA_BOBINA'.

* Recorre las bobinas.
    SORT gt_stock_nts BY verme ASCENDING.
    LOOP AT gt_stock_nts INTO gs_stock_nts
      WHERE matnr = gs_nts-matnr.

* Resta a la cantidad necesaria la cantidad de la bobina.
      lv_result_resta = abs( gs_nts-menga - gs_stock_nts-verme ).

* Si la resta es menor que la cantidad del intervalo, no se propone bobina.
      IF lv_result_resta LT lv_intervalo.
        CONTINUE.
      ENDIF.
** Si la bobina si se puede proponer, compara cantidades.
*      IF gs_stock_nts-verme le gs_nts-menga.
*        " Si la cantidad de la bobina es mayor/igual a la necesidad.
*        " Marca como buena la bobina en cuestión y sale del bucle.
*        bobina_ok = abap_true.
*        lv_index = sy-tabix.
*        EXIT.

      bobina_ok = abap_true.
      EXIT.
*      ENDIF.
    ENDLOOP.

* Si se ha determinado bobina, la lee.
    IF bobina_ok EQ abap_true.
      READ TABLE gt_stock_nts INTO gs_stock_nts
      INDEX lv_index.
    ELSE.
* Si no, borra la estructura.
      CLEAR gs_stock_nts.
    ENDIF.


  ELSE. " Si no esta activa la funcionalidad.
    READ TABLE gt_stock_nts INTO gs_stock_nts WITH KEY matnr = gs_nts-matnr.
  ENDIF.
** NAC <- WM11 3. Propuesta Bobinas NT.


** Esta línea estaba antes de aplicar WM11, la he puesto en el else superior para que si
** no esta activa la funcionalidad, haga lo que antes hacia.
*  READ TABLE gt_stock_nts INTO gs_stock_nts WITH KEY matnr = gs_nts-matnr.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  REUBICAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reubicar .
  DATA: l_modo     VALUE 'N',
        lt_messtab TYPE TABLE OF bdcmsgcoll WITH HEADER LINE.

  REFRESH: bdcdata,lt_messtab.

  PERFORM bdc_insert USING 'SAPMZ_WM_RF'    '0020'     'X'.
  IF NOT g_lenum IS INITIAL.
    PERFORM bdc_insert USING 'G_LENUM'  g_lenum ' '.
    PERFORM bdc_insert USING 'BDC_OKCODE'  '/00'      ' '.
    CALL TRANSACTION 'ZWM_RF_003' USING bdcdata MODE 'E'
      MESSAGES INTO lt_messtab.
    LOOP AT lt_messtab WHERE msgtyp = 'E' OR
                             msgtyp = 'A'.
      EXIT.
    ENDLOOP.
    IF sy-subrc IS INITIAL.
      PERFORM crear_mensaje_sistema USING sy-msgid
                                          sy-msgno
                                          sy-msgv1
                                          sy-msgv2
                                          sy-msgv3
                                          sy-msgv4
                                 CHANGING g_msgv1
                                          g_msgv2
                                          g_msgv3
                                          g_msgv4.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ENDIF.
  ELSE.
    CALL TRANSACTION 'ZWM_RF_003'.
  ENDIF.

  REFRESH lt_messtab.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CONVERTIR_UNI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<STOCK>_MATNR  text
*      -->P_<STOCK>_MEINS  text
*      <--P_<STOCK>_VERME  text
*----------------------------------------------------------------------*
FORM convertir_uni  USING    p_matnr
                    CHANGING p_verme
                             p_meins.

  DATA ls_mlgn TYPE mlgn.
  DATA l_menge_in TYPE bstmg.
  DATA l_menge_out TYPE bstmg.

  CHECK g_lgnum NE '270'. "FCARDONA 02.11.2023 - Pedidos subco en KG.

  l_menge_in = p_verme.
  CLEAR l_menge_out.

  SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_mlgn
    FROM mlgn
    WHERE  matnr = p_matnr AND
           lgnum = gs_param-lgnum.
  IF ls_mlgn-lvsme <> p_meins.
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = p_matnr
        i_in_me              = p_meins
        i_out_me             = ls_mlgn-lvsme
        i_menge              = l_menge_in
      IMPORTING
        e_menge              = l_menge_out
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    IF sy-subrc IS INITIAL.
      p_verme = l_menge_out.
      p_meins =  ls_mlgn-lvsme.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTAR_PALETS_DESCARGADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM listar_palets_papeleras.
  DATA l_ctd_char TYPE char18.
  CLEAR: gt_select_list[],gt_select_list.

*         INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
  REFRESH: gt_sel_list_final.
*         FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

  DATA(lv_fin_seg) = zcl_wm_rf_func=>check_parameter(
EXPORTING
iv_func   =  zcl_wm_rf_func=>gc_func_cambia_acc_fin_seg   " ABA: Nombre de variables en variante
iv_lgnum  =  CONV #( gv_lgnum_lg+2 )   " Núm.almacén/Complejo alm.
).

  IF gt_dlv_multi[] IS INITIAL.
    gt_dlv_multi[] = gt_dlv[]. " cvivo - 09.03.2020 56911 Múltiples albaranes por transporte
  ENDIF.

  LOOP AT gt_dlv_multi INTO DATA(ls_dlv) WHERE read = abap_true. " cvivo - 12.06.19 - Sólo listar las leídas en esta entrega
    " cvivo - 09.03.2020 56911 Múltiples albaranes por transporte
*                                         lvsta = 'C' OR
*                                         descargada = abap_true.
    gt_select_list-cod = 'ST'.
    gt_select_list-obj_number = sy-tabix.
    gt_select_list-obj_numberc = ls_dlv-charg.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = gt_select_list-obj_numberc
      IMPORTING
        output = gt_select_list-obj_numberc.
    WRITE ls_dlv-lfimg TO l_ctd_char DECIMALS 0.
    CONDENSE l_ctd_char.
    CONCATENATE l_ctd_char ls_dlv-meins INTO gt_select_list-obj_number_alt SEPARATED BY space.

*         INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
    gt_select_list-zzpeso_alb = ls_dlv-lfimg.
    gt_select_list-dtmeg = ls_dlv-vrkme.
    gt_select_list-matnr = ls_dlv-matnr.


*        Se añaden estos campos, para preparar listado cuando se finaliza
    CLEAR: ls_sel_list_final.
    MOVE-CORRESPONDING gt_select_list TO ls_sel_list_final.
    ls_sel_list_final-tknum = gs_vttk-tknum.
    ls_sel_list_final-codigo_bobina = gt_select_list-obj_numberc.

    CONDENSE ls_sel_list_final-codigo_bobina.

** KYVOR(AG) - INI - 02.08.2019 - Detalhe SEGUNDAS
    IF g_nuevas_func_segunda IS NOT INITIAL.
      SELECT SINGLE zeugn INTO gt_select_list-zeugn
         FROM lqua
         WHERE lgnum EQ gs_param-lgnum
           AND matnr EQ ls_dlv-matnr
           AND charg EQ ls_dlv-charg.

      ls_sel_list_final-zeugn = gt_select_list-zeugn.
    ELSE.
      FREE gt_select_list-zeugn.
    ENDIF.
** KYVOR(AG) - FIM - 02.08.2019 - Detalhe SEGUNDAS


    APPEND ls_sel_list_final TO gt_sel_list_final.

*         FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
    APPEND gt_select_list.
  ENDLOOP.

** KYVOR(AG) - INI - 01.09.2019
  IF g_nuevas_func_segunda IS NOT INITIAL. " cvivo - lo muevo aquí porque en el otro mòdulo desordenaba al hacerlo cada vez
    SORT: gt_select_list BY zeugn DESCENDING,
          gt_sel_list_final BY zeugn DESCENDING.
  ENDIF.
** KYVOR(AG) - FIM - 01.09.2019

  CLEAR g_partial_list.
  CLEAR g_partial_list_0086.
  CLEAR g_partial_list_0091.

*         INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

*    Activación o desactivación de funcionalidad
  READ TABLE gt_func INTO DATA(ls_func)
  WITH KEY func = 'CAMBIA_LIST_BULTOS_LEIDOS'
          (gv_lgnum_lg) = 'X'.


  IF sy-subrc = 0.
    IF sy-ucomm = 'FIN' OR sy-ucomm = 'NEXT'.
      .
* NAC ->  Añadido NEXT por si llega de la pantalla
* que avisa que el albarán contiene bobinas pendientes
* de descarga. (Si se pulsa en SI).
*      CALL SCREEN 0078. "-->  SIN GRID

** KYVOR(AG) - INI - 02.08.2019 - Detalhe SEGUNDAS
      IF g_nuevas_func_segunda IS NOT INITIAL.
        CALL SCREEN 9989. "-->  CON GRID
      ELSE.
** KYVOR(AG) - FIM - 02.08.2019 - Detalhe SEGUNDAS

        CALL SCREEN 0089. "-->  CON GRID

** KYVOR(AG) - INI - 02.08.2019 - Detalhe SEGUNDAS
      ENDIF.
** KYVOR(AG) - FIM - 02.08.2019 - Detalhe SEGUNDAS

    ELSE.
*          Estoy sólo listando
*      CALL SCREEN 0077.  -->  SIN GRID

** KYVOR(AG) - INI - 02.08.2019 - Detalhe SEGUNDAS
      IF g_nuevas_func_segunda IS NOT INITIAL.
        CALL SCREEN 9985.  "-->  CON GRID
      ELSE.
** KYVOR(AG) - FIM - 02.08.2019 - Detalhe SEGUNDAS

        CALL SCREEN 0085.  "-->  CON GRID

** KYVOR(AG) - INI - 02.08.2019 - Detalhe SEGUNDAS
      ENDIF.
** KYVOR(AG) - FIM - 02.08.2019 - Detalhe SEGUNDAS

    ENDIF.
  ELSE.
    CALL SCREEN 9997.
  ENDIF.

*         FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTAR_PALETS_DESCARGADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM listar_palets_descargados USING display TYPE flag. " cvivo - 15.01.2020 Incidencia Pacs (usar form para cargar datos sin cargar pantalla)
  DATA l_ctd_char TYPE char18.
  DATA: ls_sel_list_final LIKE LINE OF gt_sel_list_final.

  "
  " SEIS 27.05.22 Adaptaciones para buscar en tabla Z.
  "
  IF g_no_transporte IS INITIAL.
    SELECT *
    FROM zwm_rf_em_lect
    INTO TABLE @DATA(tl_zwm_rf_em_lect)
    WHERE tknum = @gs_vttk-tknum AND
    finalizado = ''.
  ELSE.
    SELECT *
      FROM zwm_rf_em_lect
      INTO CORRESPONDING FIELDS OF TABLE tl_zwm_rf_em_lect
      WHERE ebeln = gs_ekko-ebeln AND
            verur = gs_likp-verur AND
    finalizado = ''.
  ENDIF.
  DATA vl_lecturas TYPE i.
  vl_lecturas = lines( tl_zwm_rf_em_lect ).
  IF vl_lecturas > 0.
    "
    " Nuevo cálculo según tabla Z
    "
    READ TABLE gt_vttk ASSIGNING FIELD-SYMBOL(<fs_vttk>)
WITH KEY tknum = gs_vttk-tknum.

*--> INI FCARDONA 05.09.2022 - 63534 - Tratar picking EM nueva lógica

* Comentamos, ya que el peso de albarán debe ser el que viene en VTTK
*
*    IF <fs_vttk> IS ASSIGNED.
*      CLEAR <fs_vttk>-zzpeso_alb.
*    ENDIF.

*--> FIN FCARDONA 05.09.2022 - 63534 - Tratar picking EM nueva lógica

    CLEAR: gt_select_list[],gt_select_list.
    REFRESH: gt_sel_list_final.
    SORT tl_zwm_rf_em_lect BY bobina.
    LOOP AT tl_zwm_rf_em_lect ASSIGNING FIELD-SYMBOL(<fs_lectura>).
      gt_select_list-cod = 'ST'.
      "gt_select_list-obj_number = sy-tabix. RMM. Cambiado el 17.08.22 tras pruebas validación.
      gt_select_list-obj_number = <fs_lectura>-ebelp.
      IF <fs_lectura>-bobina IS NOT INITIAL.
        gt_select_list-obj_numberc = <fs_lectura>-bobina.
      ELSE.
        gt_select_list-obj_numberc = <fs_lectura>-matnr. "<fs_lectura>-bobina .
      ENDIF.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = gt_select_list-obj_numberc
        IMPORTING
          output = gt_select_list-obj_numberc.
      WRITE <fs_lectura>-menge_input TO l_ctd_char DECIMALS 0.
      CONDENSE l_ctd_char.
      "CONCATENATE <fs_lectura>-charg '-' l_ctd_char <fs_lectura>-meins INTO gt_select_list-obj_number_alt SEPARATED BY space.
      CONCATENATE <fs_lectura>-ebeln '-' <fs_lectura>-ebelp '-' l_ctd_char <fs_lectura>-meins INTO gt_select_list-obj_number_alt SEPARATED BY space.
      gt_select_list-zzpeso_alb = <fs_lectura>-menge_input.
      gt_select_list-matnr = <fs_lectura>-matnr.
      gt_select_list-dtmeg = <fs_lectura>-meins.

*--> INI FCARDONA 05.09.2022 - 63534 - Tratar picking EM nueva lógica

* Comentamos, ya que el peso de albarán debe ser el que viene en VTTK
*
*      IF <fs_vttk> IS ASSIGNED.
*        ADD gt_select_list-zzpeso_alb TO <fs_vttk>-zzpeso_alb.
*      ENDIF.

*<-- FIN FCARDONA 05.09.2022 - 63534 - Tratar picking EM nueva lógica

*          Se añaden estos campos, para preparar listado cuando se finaliza
      CLEAR: ls_sel_list_final.
      MOVE-CORRESPONDING gt_select_list TO ls_sel_list_final.
      ls_sel_list_final-tknum = gs_vttk-tknum.
      ls_sel_list_final-codigo_bobina = gt_select_list-obj_numberc.

      CONDENSE ls_sel_list_final-codigo_bobina.
      APPEND ls_sel_list_final TO gt_sel_list_final.

*           FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
      APPEND gt_select_list.
    ENDLOOP.
    CLEAR g_partial_list.
    CLEAR g_partial_list_0086.
    CLEAR g_partial_list_0091.

*           INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

*      Activación o desactivación de funcionalidad
    READ TABLE gt_func INTO DATA(ls_func2)
    WITH KEY func = 'CAMBIA_LIST_BULTOS_LEIDOS'
            (gv_lgnum_lg) = 'X'.

    IF sy-subrc = 0.
      IF sy-ucomm = 'FIN'.
*            CALL SCREEN 0078. " SIN GRID
        CALL SCREEN 0089. " CON GRID
      ELSE.
*            Estoy sólo listando
*            CALL SCREEN 0077. " SIN GRID
*            CALL SCREEN 0085. " CON GRID
        CALL SCREEN 0085. " CON GRID
      ENDIF.

    ELSE.
      g_local_previous_screen = '0014'.
      CALL SCREEN 9997.
    ENDIF.
  ELSE.
    "
    " SEIS 27.05.22
    " Calculo antiguo. Ver de borrar al final.
    "
*  buscamos las entregas asociadas al transporte
    SELECT * INTO TABLE @DATA(lt_vbfa)
             FROM vbfa WHERE vbeln = @gs_vttk-tknum AND
                             vbtyp_n = '8'.
*   buscamos las UAs descargadas para esas enregas en la lqua
    IF NOT lt_vbfa IS INITIAL.
      SELECT * INTO TABLE @DATA(lt_lqua)
               FROM lqua FOR ALL ENTRIES IN @lt_vbfa
               WHERE lgnum = @gs_param-lgnum AND
                     vbeln = @lt_vbfa-vbelv AND
                     verme > 0.
    ELSEIF g_no_transporte IS NOT INITIAL. " CVJ-Si no hay transportes seguimos
      SELECT SINGLE lips~vbeln INTO g_vbeln_inb
           FROM   lips INNER JOIN vbuk ON
                  lips~vbeln = vbuk~vbeln
           WHERE lips~vgbel = gs_ekko-ebeln AND
                 vbuk~wbstk <> 'C'.

      IF sy-subrc EQ 0.
        SELECT * INTO TABLE lt_lqua
               FROM lqua
               WHERE lgnum = gs_param-lgnum AND
                     vbeln = g_vbeln_inb AND
                     verme > 0.
      ENDIF.
    ENDIF.

    IF  sy-subrc IS INITIAL AND display IS NOT INITIAL.
      CLEAR: gt_select_list[],gt_select_list.
*           INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
      REFRESH: gt_sel_list_final.
*           FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
      SORT lt_lqua BY lenum.
      DELETE ADJACENT DUPLICATES FROM lt_lqua COMPARING lenum.
      LOOP AT lt_lqua INTO DATA(ls_stock).
        gt_select_list-cod = 'ST'.
        gt_select_list-obj_number = sy-tabix.
        gt_select_list-obj_numberc = ls_stock-lenum .
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = gt_select_list-obj_numberc
          IMPORTING
            output = gt_select_list-obj_numberc.
        WRITE ls_stock-verme TO l_ctd_char DECIMALS 0.
        CONDENSE l_ctd_char.
        CONCATENATE ls_stock-charg '-' l_ctd_char ls_stock-meins INTO gt_select_list-obj_number_alt SEPARATED BY space.

*           INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
*          se añaden estos campos en esta tabla interna para reutilizarla
        gt_select_list-zzpeso_alb = ls_stock-gesme.
        gt_select_list-matnr = ls_stock-matnr.
        gt_select_list-dtmeg = ls_stock-meins.

*          Se añaden estos campos, para preparar listado cuando se finaliza
        CLEAR: ls_sel_list_final.
        MOVE-CORRESPONDING gt_select_list TO ls_sel_list_final.
        ls_sel_list_final-tknum = gs_vttk-tknum.
        ls_sel_list_final-codigo_bobina = gt_select_list-obj_numberc.

        CONDENSE ls_sel_list_final-codigo_bobina.
        APPEND ls_sel_list_final TO gt_sel_list_final.

*           FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19
        APPEND gt_select_list.
      ENDLOOP.
      CLEAR g_partial_list.
      CLEAR g_partial_list_0086.
      CLEAR g_partial_list_0091.

*           INI GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

*      Activación o desactivación de funcionalidad
      READ TABLE gt_func INTO DATA(ls_func)
      WITH KEY func = 'CAMBIA_LIST_BULTOS_LEIDOS'
              (gv_lgnum_lg) = 'X'.

      IF sy-subrc = 0.
        IF sy-ucomm = 'FIN'.
*            CALL SCREEN 0078. " SIN GRID
          CALL SCREEN 0089. " CON GRID
        ELSE.
*            Estoy sólo listando
*            CALL SCREEN 0077. " SIN GRID
*            CALL SCREEN 0085. " CON GRID
          CALL SCREEN 0085. " CON GRID
        ENDIF.

      ELSE.
        CALL SCREEN 9997.
      ENDIF.

*           FIN GAP WM16 - Bernabeu  / RGUILLOT 28-3-19

    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTAR_BOBINAS_PUERTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM listar_bobinas_puerto .
  DATA l_ctd_char TYPE char7.
  CLEAR: gt_select_list[],gt_select_list.
  SORT gt_em_puerto BY matnr menge.
  LOOP AT gt_em_puerto INTO DATA(ls_puerto).
    gt_select_list-cod = 'PT'.
    gt_select_list-obj_number = sy-tabix.
*    gt_select_list-obj_numberc = ls_puerto-matnr.
    gt_select_list-obj_numberc = ls_puerto-licha. " cvivo - Proyecto CB WM - 15.03.2019
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*      EXPORTING
*        input  = gt_select_list-obj_numberc
*      IMPORTING
*        output = gt_select_list-obj_numberc.

    WRITE ls_puerto-menge TO l_ctd_char DECIMALS 0.
    CONDENSE l_ctd_char.
*    CONCATENATE ls_puerto-maktx(15) '-' ls_puerto-licha '-' l_ctd_char '-' ls_puerto-meins INTO gt_select_list-obj_number_alt SEPARATED BY space.
    CONCATENATE ls_puerto-maktx '-' l_ctd_char '-' ls_puerto-meins INTO gt_select_list-obj_number_alt SEPARATED BY space.

*         INI GAP WM16 - Bernabeu  / RGUILLOT 1-4-19
    gt_select_list-dtmeg = ls_puerto-meins.
    gt_select_list-zzpeso_alb = ls_puerto-menge.
    gt_select_list-matnr = ls_puerto-matnr.
*         FIN GAP WM16 - Bernabeu  / RGUILLOT 1-4-19

    APPEND gt_select_list.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  CHECK_LGPLA_AP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE check_lgpla_ap INPUT.
  IF g_lgpla <> gs_nts-nlpla.
*La ubicacion leida no se corresponde con la de la necesidad
    g_message_number = '063'.
    g_message_type = 'A'.
*    g_msgv1 = ls_ltbk-nlpla.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    CLEAR g_lgpla.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_LQUA_LENUM  text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta  USING    p_lenum.
  DATA lt_lein LIKE lein OCCURS 0.
  DATA lt_lqua LIKE lqua OCCURS 0.
  DATA lt_rspar TYPE TABLE OF rsparams.
  DATA ls_rspar TYPE rsparams.

  ls_rspar-kind = 'P'.
  ls_rspar-selname = 'P_LGNUM'.
  ls_rspar-sign = 'I'.
  ls_rspar-option = 'EQ'.
  ls_rspar-low = g_lgnum.
  APPEND ls_rspar TO lt_rspar.

  ls_rspar-kind = 'S'.
  ls_rspar-selname = 'S_LENUM'.
  ls_rspar-sign = 'I'.
  ls_rspar-option = 'EQ'.
  ls_rspar-low = p_lenum.
  APPEND ls_rspar TO lt_rspar.

  SUBMIT zimpresion_ua WITH SELECTION-TABLE lt_rspar AND RETURN.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  AJUSTAR_UBICACION_DOC_INV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ajustar_ubicacion_doc_inv .
  DATA l_tanum TYPE tanum.
* Todas las bobinas encontradas en la ubicacion y con ubicacion distinta deben moverse a la ubicacion ajustada
  LOOP AT gt_recuento INTO gs_recuento.
    CLEAR l_tanum.
    CALL FUNCTION 'L_TO_CREATE_MOVE_SU'
      EXPORTING
        i_lenum               = gs_recuento-lenum
        i_bwlvs               = gs_param-bwlvs   "'999'
        i_nltyp               = gs_recuento-nltyp
        i_nlpla               = gs_recuento-nlpla
        i_squit               = 'X'
        i_commit_work         = ' '
*       i_bname               = g_bname
      IMPORTING
        e_tanum               = l_tanum
      EXCEPTIONS
        not_confirmed_to      = 1
        foreign_lock          = 2
        bwlvs_wrong           = 3
        betyp_wrong           = 4
        nltyp_wrong           = 5
        nlpla_wrong           = 6
        nltyp_missing         = 7
        nlpla_missing         = 8
        squit_forbidden       = 9
        lgber_wrong           = 10
        xfeld_wrong           = 11
        drukz_wrong           = 12
        ldest_wrong           = 13
        no_stock_on_su        = 14
        su_not_found          = 15
        update_without_commit = 16
        no_authority          = 17
        benum_required        = 18
        ltap_move_su_wrong    = 19
        lenum_wrong           = 20
        error_message         = 21
        OTHERS                = 22.
    IF sy-subrc <> 0.
*       ERROR
*      l_error = abap_true.
      PERFORM crear_mensaje_sistema USING sy-msgid
                                          sy-msgno
                                          sy-msgv1
                                          sy-msgv2
                                          sy-msgv3
                                          sy-msgv4
                                 CHANGING g_msgv1
                                          g_msgv2
                                          g_msgv3
                                          g_msgv4.

      g_message_type = 'A'.
      g_message_number = '000'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CONSUMO_MATERIAL_AUX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_REUBIC_LENUM  text
*----------------------------------------------------------------------*
FORM consumo_material_aux .
  CONSTANTS: lc_03         TYPE gm_code VALUE '03'. " MB1A - Goods Issue

  DATA: ls_header TYPE bapi2017_gm_head_01,
        ls_code   TYPE bapi2017_gm_code,
        ls_ewm    TYPE /spe/bapi2017_gm_ref_ewm,
        lt_item   TYPE STANDARD TABLE OF bapi2017_gm_item_create,
        ls_item   TYPE bapi2017_gm_item_create,
        lt_ret    TYPE bapiret2_t,
        ls_return TYPE bapiret2,
        lv_mblnr  TYPE mblnr,
        lv_mjahr  TYPE mjahr.
  DATA: ls_ltbk  TYPE ltbk,
        lt_ltbp  TYPE STANDARD TABLE OF ltbp,
        lt_trite TYPE l03b_trite_t,
        ls_trite TYPE l03b_trite,
        lv_tanum TYPE tanum.

  IF gs_reubic-lenum IS NOT INITIAL.

    ls_header-pstng_date = sy-datum.
    ls_header-doc_date   = sy-datum.
    ls_header-ref_doc_no = gs_reubic-lenum.
    ls_header-pr_uname   = sy-uname.
    ls_header-header_txt = 'Cons mat. aux. desde cuanto' .

* codigo de tipo de movimiento de mercancias
    ls_code-gm_code = lc_03.

* datos de la UA que genera el movimiento
    ls_item-plant    = gs_reubic-werks.
    ls_item-stge_loc = gs_reubic-lgort.
    ls_item-move_reas = '1'. " consumo manual
    ls_item-material = gs_reubic-matnr.
    ls_item-batch    = gs_reubic-charg.
    ls_item-move_type = gs_param-bwart.
    ls_item-entry_qnt = gs_reubic-gesme.
*    ls_item-entry_uom = gs_reubic-gewei.
    ls_item-entry_uom = gs_reubic-meins. " cvivo - 56033 - consumo con UM, no de peso

    APPEND ls_item TO lt_item.

    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_header
        goodsmvt_code    = ls_code
*       goodsmvt_ref_ewm = ls_ewm
      IMPORTING
        materialdocument = lv_mblnr
        matdocumentyear  = lv_mjahr
      TABLES
        goodsmvt_item    = lt_item
        return           = lt_ret.


*   Comprobamos errores
    CLEAR ls_return.
    READ TABLE lt_ret INTO ls_return
    WITH KEY type = 'E'.
    IF sy-subrc = 0.

      PERFORM crear_mensaje_sistema USING ls_return-id
                                          ls_return-number
                                          ls_return-message_v1
                                          ls_return-message_v2
                                          ls_return-message_v3
                                          ls_return-message_v4
                                 CHANGING g_msgv1
                                          g_msgv2
                                          g_msgv3
                                          g_msgv4.

      g_message_type = 'E'.
      g_message_number = '000'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
* creamos la OT
      SELECT SINGLE *
        INTO ls_ltbk
        FROM ltbk
        WHERE lgnum = gs_reubic-lgnum AND
              mblnr = lv_mblnr AND
              mjahr = lv_mjahr.

      IF sy-subrc EQ 0.

        SELECT * INTO TABLE lt_ltbp
                   FROM ltbp
                   WHERE lgnum = gs_reubic-lgnum AND
                         tbnum = ls_ltbk-tbnum.

        LOOP AT lt_ltbp INTO DATA(ls_ltbp).
          ls_trite-tbpos = ls_ltbp-tbpos.
          ls_trite-altme = ls_ltbp-meins.
          ls_trite-anfme = ls_ltbp-menge.
          ls_trite-charg = ls_ltbp-charg.
          ls_trite-nltyp = ls_ltbk-nltyp.
          ls_trite-nlpla = ls_ltbk-nlpla.
          ls_trite-vlenr = gs_lqua-lenum.
          ls_trite-vlpla = gs_lqua-lgpla.
          ls_trite-vltyp = gs_lqua-lgtyp.
          ls_trite-letyp = gs_lqua-letyp.
          APPEND ls_trite TO lt_trite.
        ENDLOOP.

        CALL FUNCTION 'L_TO_CREATE_TR'
          EXPORTING
            i_lgnum                        = gs_reubic-lgnum
            i_tbnum                        = ls_ltbk-tbnum
*           i_bname                        = gst_zwm005-bname
            i_squit                        = abap_true
            i_tbeli                        = abap_true
            it_trite                       = lt_trite
          IMPORTING
            e_tanum                        = lv_tanum
          EXCEPTIONS
            foreign_lock                   = 1
            qm_relevant                    = 2
            tr_completed                   = 3
            xfeld_wrong                    = 4
            ldest_wrong                    = 5
            drukz_wrong                    = 6
            tr_wrong                       = 7
            squit_forbidden                = 8
            no_to_created                  = 9
            update_without_commit          = 10
            no_authority                   = 11
            preallocated_stock             = 12
            partial_transfer_req_forbidden = 13
            input_error                    = 14
            OTHERS                         = 15.

        IF sy-subrc <> 0.
          PERFORM crear_mensaje_sistema USING ls_return-id
                                              ls_return-number
                                              ls_return-message_v1
                                              ls_return-message_v2
                                              ls_return-message_v3
                                              ls_return-message_v4
                                     CHANGING g_msgv1
                                              g_msgv2
                                              g_msgv3
                                              g_msgv4.

          g_message_type = 'E'.
          g_message_number = '000'.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        ELSE.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.
*Se ha consumido la UA &
          g_message_type = 'E'.
          g_message_number = '059'.
          g_msgv1 =  gs_lqua-lenum.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        ENDIF.

      ENDIF.

    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DELETE_DLV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_VBELN  text
*----------------------------------------------------------------------*
FORM delete_dlv  USING    p_vbeln.
  DATA ls_mess TYPE prott.
  DATA lt_mess TYPE TABLE OF prott.
  DATA ls_vbkok TYPE vbkok.
  DATA l_error TYPE xfeld.

  ls_vbkok-vbeln_vl = p_vbeln.
  ls_vbkok-likp_del = abap_true.
  CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
    EXPORTING
      vbkok_wa     = ls_vbkok
      delivery     = p_vbeln
*     update_picking = 'X'
    IMPORTING
      ef_error_any = l_error
    TABLES
      prot         = lt_mess.
  COMMIT WORK AND WAIT.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RECUPERA_DC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recupera_dc .
  READ TABLE gt_dlv INTO DATA(ls_dlv) INDEX 1.
  SELECT SINGLE lifnr INTO @DATA(l_lifnr) FROM ekko WHERE ebeln = @ls_dlv-vgbel.

  SELECT * INTO TABLE @DATA(lt_tvarvc) FROM tvarvc WHERE name = 'ZWM_DC'.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = l_lifnr
    IMPORTING
      output = l_lifnr.

  READ TABLE lt_tvarvc INTO DATA(ls_tvarvc) WITH KEY low = l_lifnr.

  IF sy-subrc IS INITIAL.
    g_dc = ls_tvarvc-high.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GRABAR_PUERTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ABAP_FALSE  text
*----------------------------------------------------------------------*
FORM grabar_puerto  USING    p_fin_tr.
  DATA: ls_sel_list_final LIKE LINE OF gt_sel_list_final.

*  LOOP AT gt_em_puerto  INTO DATA(ls_puerto) WHERE read =  abap_false.
*    EXIT.
*  ENDLOOP.
*
*  IF sy-subrc IS INITIAL.
*    g_message_number = '044'.
*    g_message_type = 'W'.
*    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*    IF ok_code = 'NEXT'.
*      PERFORM fin_descarga_puerto USING p_fin_tr.
*    ENDIF.
*  ELSE.


*         INI GAP WM16 - Bernabeu  / RGUILLOT 1-4-19

*    Activación o desactivación de funcionalidad
  READ TABLE gt_func INTO DATA(ls_func)
  WITH KEY func = 'CAMBIA_ACCION_FINALIZAR'
          (gv_lgnum_lg) = 'X'.

  IF sy-subrc = 0.
    REFRESH: gt_sel_list_final.

    LOOP AT gt_select_list.
      READ TABLE gt_em_puerto INTO DATA(ls_em_puerto)
      WITH KEY charg = gt_select_list-obj_numberc
               read = 'X'.

      IF sy-subrc = 0.

        CLEAR: ls_sel_list_final.
        ls_sel_list_final-codigo_bobina = gt_select_list-obj_numberc.
        MOVE-CORRESPONDING gt_select_list TO ls_sel_list_final.
        MOVE gs_vttk-tknum TO ls_sel_list_final-tknum.

        APPEND ls_sel_list_final TO gt_sel_list_final.

      ENDIF.
    ENDLOOP.


* NAC -> LLama nueva dynpro con GRID

    IF sy-ucomm = 'FIN'.
*     call screen 0078. " SIN GRID
      CALL SCREEN 0089. " CON GRID*

* Si se ha pulsado Grabar.
    ELSE.
      PERFORM fin_descarga_puerto USING p_fin_tr.
    ENDIF.
* Si no esta activa la funcionalidad.
  ELSE.
    PERFORM fin_descarga_puerto USING p_fin_tr.
  ENDIF.

*         FIN GAP WM16 - Bernabeu  / RGUILLOT 1-4-19


*  ENDIF.




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RECUPERA_DC_SAICA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recupera_dc_saica .
  DATA ls_dc_saica LIKE LINE OF gr_dc_saica.
  DATA l_lifnr TYPE lifnr.

  SELECT * INTO TABLE @DATA(lt_tvarvc) FROM tvarvc WHERE name = 'ZWM_DC'.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = gs_ekko-lifnr
    IMPORTING
      output = l_lifnr.

  CLEAR gr_dc_saica.
  ls_dc_saica = 'IEQ'.

*** --> INI FCARDONA 25.09.2023 - Bug lectura cuando proveedor no compatible.

*"""" Comento para reescribir lógica
*
*  LOOP AT lt_tvarvc INTO DATA(ls_tvarvc) WHERE low = l_lifnr AND
*                                               high <> space.
*    ls_dc_saica-low = ls_tvarvc-high.
*    APPEND ls_dc_saica TO gr_dc_saica.
*  ENDLOOP.

  LOOP AT lt_tvarvc INTO DATA(ls_tvarvc) WHERE low = l_lifnr.

    ls_dc_saica-low = ls_tvarvc-high.
    APPEND ls_dc_saica TO gr_dc_saica.

  ENDLOOP.

*** <-- INI FCARDONA 25.09.2023 - Bug lectura cuando proveedor no compatible.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHANGE_DLV_INBOUND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DLV_INB  text
*----------------------------------------------------------------------*
FORM change_dlv_inbound  USING    ls_dlv_inb TYPE lips.
  DATA: ls_header         TYPE bapiibdlvhdrchg,
        ls_header_control TYPE bapiibdlvhdrctrlchg.
  DATA lt_item LIKE bapiibdlvitemchg OCCURS 0  WITH HEADER LINE.
  DATA lt_item_control LIKE bapiibdlvitemctrlchg OCCURS 0 WITH HEADER LINE.
  DATA lt_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE.
  DATA ls_return TYPE bapiret2 .


  lt_item-deliv_numb = ls_dlv_inb-vbeln.
  lt_item-deliv_item = ls_dlv_inb-posnr.
  lt_item-dlv_qty = ls_dlv_inb-lfimg.
  lt_item-fact_unit_denom = ls_dlv_inb-umvkn.
  lt_item-fact_unit_nom	= ls_dlv_inb-umvkz.
  lt_item-sales_unit = ls_dlv_inb-vrkme.
  lt_item-base_uom = ls_dlv_inb-meins.
  APPEND lt_item.

  lt_item_control-deliv_numb = ls_dlv_inb-vbeln.
  lt_item_control-deliv_item = ls_dlv_inb-posnr.
  lt_item_control-chg_delqty = abap_true.
  APPEND lt_item_control.

  ls_header-deliv_numb = ls_dlv_inb-vbeln.
  ls_header_control-deliv_numb = ls_dlv_inb-vbeln.

  CALL FUNCTION 'BAPI_INB_DELIVERY_CHANGE'
    EXPORTING
      header_data    = ls_header
      header_control = ls_header_control
      delivery       = ls_dlv_inb-vbeln
    TABLES
      item_data      = lt_item
      item_control   = lt_item_control
      return         = lt_return.
  LOOP AT lt_return INTO ls_return WHERE type = 'E' OR
                                         type = 'A'.
    EXIT.
  ENDLOOP.
  IF sy-subrc IS INITIAL.

    PERFORM crear_mensaje_sistema USING ls_return-id
                                        ls_return-number
                                        ls_return-message_v1
                                        ls_return-message_v2
                                        ls_return-message_v3
                                        ls_return-message_v4
                               CHANGING g_msgv1
                                        g_msgv2
                                        g_msgv3
                                        g_msgv4.

    g_message_type = 'E'.
    g_message_number = '000'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.
    WAIT UP TO '0.5' SECONDS.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PEDIR_NOTA_ENTREGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_VTTK_TKNUM  text
*      -->P_GS_EKKO_EBELN  text
*----------------------------------------------------------------------*
FORM pedir_nota_entrega  USING    p_tknum TYPE tknum
                                  p_ebeln TYPE ebeln.

*** --> INI FCARDONA 03.10.2023 - FCC Error número albarán

* """Comento por cambio de lógica
*
*  IF gs_vttk-exti1 IS NOT INITIAL. " cvivo - WM CB - Si está en el transporte, no lo pedimos

  IF ( gs_vttk-tplst EQ '2040' AND gs_vttk-exti1 IS NOT INITIAL ).


    TRANSLATE gs_vttk-exti1 TO UPPER CASE. " cvivo - 60014 - no se admiten minúsculas en los no.albaran
    gs_likp-verur = gs_vttk-exti1.

******* INI GAP WM16 Bernabeu  /  RGUILLOT 27-3-19
*    Activación o desactivación de funcionalidad
    oo_descarga->check_funcionalidad( EXPORTING func = 'PESO_ALBARAN'
                                   EXCEPTIONS inactive = 1 ).

*    READ TABLE gt_func INTO ls_func
*    WITH KEY func = 'PESO_ALBARAN'
*            (gv_lgnum_lg) = 'X'.

*****MODIF INI 3-6-19*************
*    IF gt_select_list-zzpeso_alb IS INITIAL
*    AND sy-subrc = 0.

    IF gt_select_list-zzpeso_alb IS INITIAL
    AND gs_vttk-zzpeso_alb IS INITIAL
    AND sy-subrc = 0.

*    Se comprueba ya que al ir hacia delante en el proceso
*    y volver para atrás, las variables globales de arriba
*    se han cambiado y no tienen los datos correctos.
      SELECT SINGLE zzpeso_alb INTO gs_vttk-zzpeso_alb
      FROM vttk
      WHERE tknum = gs_vttk-tknum.

      IF gs_vttk-zzpeso_alb IS INITIAL.
        CALL SCREEN '0076'.
      ENDIF.

*****MODIF FIN 3-6-19*************
    ENDIF.
******* FIN GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

*    SELECT SINGLE verur
*      INTO @gs_likp-verur
*      FROM zwm_rf_em_lect
*     WHERE tknum = @gs_vttk-tknum
*       AND ebeln = @p_ebeln
*       AND finalizado = @abap_false.
*
*    IF ( sy-subrc EQ 0 AND gs_likp-verur IS NOT INITIAL ).
*
*      TRANSLATE gs_likp-verur TO UPPER CASE.
*
*      "Activación o desactivación de funcionalidad
*      oo_descarga->check_funcionalidad( EXPORTING func = 'PESO_ALBARAN' EXCEPTIONS inactive = 1 ).
*
*      "Se comprueba
*      " - No se ha informado peso albarán
*      " - No se ha rellenado peso albarán en camión
*      " - Se ha encontrado la funcionalidad 'PESO_ALBARAN'
*      IF ( gt_select_list-zzpeso_alb IS INITIAL AND gs_vttk-zzpeso_alb IS INITIAL AND sy-subrc = 0 ).
*
**     Se comprueba ya que al ir hacia delante en el proceso
**     y volver para atrás, las variables globales de arriba
**     se han cambiado y no tienen los datos correctos.
*        SELECT SINGLE zzpeso_alb
*          INTO gs_vttk-zzpeso_alb
*          FROM vttk
*         WHERE tknum = gs_vttk-tknum.
*
*        IF gs_vttk-zzpeso_alb IS INITIAL.
*          CALL SCREEN '0076'.
*        ENDIF.
*
*      ENDIF.
*
*    ELSE.
*
*      CALL SCREEN '0073'.
*
*    ENDIF.

*** <-- FIN FCARDONA 03.10.2023 - FCC Error número albarán

  ELSE.

*** --> INI FCARDONA 03.10.2023 - FCC Error número albarán

* """Comento por cambio de lógica
*
*    "
*    " SEIS 30.05.2022. Utilizamos la tabla Z donde guardamos el número de entrega.
*    "
*    SELECT SINGLE verur
*      INTO gs_likp-verur
*      FROM zwm_rf_em_lect
*      WHERE tknum = gs_vttk-tknum AND
*            ebeln = p_ebeln AND
*            finalizado = ''.

    SELECT SINGLE verur
      INTO @gs_likp-verur
      FROM zwm_rf_em_lect
     WHERE tknum = @gs_vttk-tknum
       AND ebeln = @p_ebeln
       AND finalizado = @abap_false.

*** <-- FIN FCARDONA 03.10.2023 - FCC Error número albarán


*    select single lips~vbeln into g_vbeln_inb
*           from ( vttp inner join lips on
*                  vttp~vbeln = lips~vbeln ) inner join
*                  vbuk on vttp~vbeln = vbuk~vbeln
*           where vttp~tknum = p_tknum and
*                 lips~vgbel = p_ebeln and
*                 vbuk~wbstk <> 'C'.

    IF sy-subrc NE 0. " si no hay entrega creada
      CALL SCREEN '0073'.

******* INI GAP WM16 Bernabeu  /  RGUILLOT 27-3-19
*    Activación o desactivación de funcionalidad
      READ TABLE gt_func INTO DATA(ls_func)
      WITH KEY func = 'PESO_ALBARAN'
              (gv_lgnum_lg) = 'X'.

*****MODIF INI 4-6-19*************

*      IF gt_select_list-zzpeso_alb IS INITIAL
*      AND sy-subrc = 0.
*        CALL SCREEN '0076'.
*      ENDIF.


      IF gt_select_list-zzpeso_alb IS INITIAL
      AND gs_vttk-zzpeso_alb IS INITIAL
      AND sy-subrc = 0
      AND gs_vttk-tknum IS NOT INITIAL.

*    Se comprueba ya que al ir hacia delante en el proceso
*    y volver para atrás, las variables globales de arriba
*    se han cambiado y no tienen los datos correctos.
        SELECT SINGLE zzpeso_alb INTO gs_vttk-zzpeso_alb
        FROM vttk
        WHERE tknum = gs_vttk-tknum.

        IF gs_vttk-zzpeso_alb IS INITIAL .
          CALL SCREEN '0076'.
        ENDIF.

      ENDIF.

*****MODIF FIN 4-6-19*************

******* FIN GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

    ELSE.
      "
      " SEIS. 30.05.2022. Ya no hace falta pedirlo. Lo sacamos de la tabla Z.
      "
*      select single verur from likp " si está creada pero no tiene nota de entrega
*        into gs_likp-verur
*        where vbeln eq g_vbeln_inb.


      IF gs_likp-verur EQ space.
        CALL SCREEN '0073'.
      ENDIF.

******* INI GAP WM16 Bernabeu  /  RGUILLOT 27-3-19
*    Activación o desactivación de funcionalidad
      CLEAR: ls_func.
      READ TABLE gt_func INTO ls_func
      WITH KEY func = 'PESO_ALBARAN'
              (gv_lgnum_lg) = 'X'.


*****MODIF INI 4-6-19*************

*      IF gt_select_list-zzpeso_alb IS INITIAL
*      AND sy-subrc = 0.
*        CALL SCREEN '0076'.
*      ENDIF.


      IF gt_select_list-zzpeso_alb IS INITIAL
      AND gs_vttk-zzpeso_alb IS INITIAL
      AND sy-subrc = 0.

*    Se comprueba ya que al ir hacia delante en el proceso
*    y volver para atrás, las variables globales de arriba
*    se han cambiado y no tienen los datos correctos.
        SELECT SINGLE zzpeso_alb INTO gs_vttk-zzpeso_alb
        FROM vttk
        WHERE tknum = gs_vttk-tknum.

        IF gs_vttk-zzpeso_alb IS INITIAL.
          CALL SCREEN '0076'.
        ENDIF.

      ENDIF.

*****MODIF FIN 4-6-19*************

******* FIN GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CARACT_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ITEM_MATNR  text
*      -->P_LS_ITEM_CHARG  text
*      <--P_L_VCODE  text
*----------------------------------------------------------------------*
FORM caract_lote  USING    p_matnr
                           p_charg
                  CHANGING p_vcode.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.

  REFRESH: lt_alloc_values_num, lt_alloc_values_char.
  REFRESH: lt_alloc_values_curr, lt_return.
  CLEAR: lv_object, ls_alloc_values_char.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char.
  CLEAR: lt_alloc_values_curr, lt_return.

  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

* RECUPERAR DECISION DE EMPLEO
  CLEAR ls_alloc_values_char.
  READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
             WITH KEY charact = 'LOBM_UDCODE'.

  IF ls_alloc_values_char-value_neutral IS NOT INITIAL.
    CONDENSE ls_alloc_values_char-value_neutral.
    p_vcode = ls_alloc_values_char-value_neutral.
  ELSE.
    CLEAR p_vcode.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  LISTAR_GRAMAJE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM listar_gramaje.

  RANGES: lrng_matnr FOR mara-matnr.

  DATA: lv_gramaje(4),
        lv_num_chars           TYPE i,
        lv_num_dif             TYPE i,
        lv_matkl_zzgramaje(30),
        lsrng_matnr            LIKE LINE OF lrng_matnr,
        ls_gramajes            TYPE gtyp_gramajes.


  LOOP AT gt_mara_red INTO DATA(ls_mara_red)
  WHERE matkl = ls_mara_mard_red-matkl.

    lv_num_chars = strlen( ls_mara_red-zzgramaje ).

    lv_num_dif = 4 - lv_num_chars.

    DO lv_num_dif TIMES.
      CONCATENATE '0' ls_mara_red-zzgramaje INTO ls_mara_red-zzgramaje.
      CONDENSE ls_mara_red-zzgramaje.
    ENDDO.

    CONCATENATE '*' ls_mara_red-matkl ls_mara_red-zzgramaje '*' INTO lv_matkl_zzgramaje.
    CONDENSE lv_matkl_zzgramaje.

    lsrng_matnr-sign = 'I'.
    lsrng_matnr-option = 'CP'.
    lsrng_matnr-low = lv_matkl_zzgramaje.

    APPEND lsrng_matnr TO lrng_matnr.

  ENDLOOP.

  DELETE ADJACENT DUPLICATES FROM lrng_matnr COMPARING low.


  SELECT d~matnr, d~werks, d~lgort, d~labst
  INTO TABLE @DATA(lt_mard_red)
  FROM mard AS d
  WHERE matnr IN @lrng_matnr
    AND werks = @gs_param-werks
    AND lgort = @gs_param-lgort
    AND d~labst > 0.

  IF sy-subrc = 0.

    REFRESH: gt_gramajes.
    LOOP AT lt_mard_red INTO ls_mard_red.
      CLEAR: ls_gramajes.
      MOVE-CORRESPONDING ls_mard_red TO ls_gramajes.


      CLEAR: ls_mara_red.
      READ TABLE gt_mara_red INTO ls_mara_red
      WITH KEY matnr = ls_mard_red-matnr.

      IF ls_mara_red-mtart NOT IN lrng_mtart.
        CONTINUE.
      ENDIF.


      MOVE-CORRESPONDING ls_mara_red TO ls_gramajes.

      WRITE ls_mara_red-zzgramaje TO ls_gramajes-zzgramaje NO-ZERO.
      CONDENSE ls_gramajes-zzgramaje.

      APPEND ls_gramajes TO gt_gramajes.
    ENDLOOP.

* cvivo - Para ordenar deben llevar ceros el tipo NUMC
    LOOP AT gt_gramajes ASSIGNING FIELD-SYMBOL(<grama>).
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = <grama>-zzgramaje
        IMPORTING
          output = <grama>-zzgramaje.
    ENDLOOP.

    SORT gt_gramajes BY zzgramaje.

    LOOP AT gt_gramajes ASSIGNING <grama>.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = <grama>-zzgramaje
        IMPORTING
          output = <grama>-zzgramaje.
    ENDLOOP.

    DELETE ADJACENT DUPLICATES FROM gt_gramajes COMPARING zzgramaje.

    IF gt_gramajes[] IS INITIAL.
*    No se ha encontrado stock para el valor seleccionado
      g_message_number = '076'.
      g_message_type = 'A'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

    ELSE.
      CALL SCREEN '0081'.
    ENDIF.


  ELSE.
*    No se ha encontrado stock para el valor seleccionado
    g_message_number = '076'.
    g_message_type = 'A'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  LISTAR_GRAMAJE_ANCHO_LARGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM listar_gramaje_ancho_largo.

  RANGES: lrng_matnr FOR mara-matnr.

  DATA: lv_gramaje(4),
        lv_num_chars           TYPE i,
        lv_num_dif             TYPE i,
        lv_matkl_zzgramaje(30),
        lsrng_matnr            LIKE LINE OF lrng_matnr,
*        ls_gramajes            TYPE gtyp_gramajes,
        lv_index               TYPE i,
        lv_index_list          TYPE i,
        lv_gramaje_3_cabecera  TYPE i.

  RANGES: lrng_zzgramaje_grama FOR mara-zzgramaje.

  DATA: lsrng_zzgramaje_grama LIKE LINE OF lrng_zzgramaje_grama,
        lv_conc_matkl(50).

  REFRESH: grng_matnr_grama.
  CLEAR: gsrng_matnr_grama.

  lv_num_chars = strlen( ls_gramajes-zzgramaje ).
  lv_gramaje_3_cabecera = ls_gramajes-zzgramaje.
  lv_num_dif = 4 - lv_num_chars.

  DO lv_num_dif TIMES.
    CONCATENATE '0' ls_gramajes-zzgramaje INTO ls_gramajes-zzgramaje.
    CONDENSE ls_gramajes-zzgramaje.
  ENDDO.

  LOOP AT gt_gramajes INTO DATA(ls_gramajes_list).
*    lv_index_list = lv_index_list + 1.

    CLEAR: lv_num_chars, lv_num_dif.

    lv_num_chars = strlen( ls_gramajes_list-zzgramaje ).

    lv_num_dif = 4 - lv_num_chars.

    DO lv_num_dif TIMES.
      CONCATENATE '0' ls_gramajes_list-zzgramaje INTO ls_gramajes_list-zzgramaje.
      CONDENSE ls_gramajes_list-zzgramaje.
    ENDDO.

    lsrng_zzgramaje_grama-sign = 'I'.
    lsrng_zzgramaje_grama-option = 'EQ'.
    lsrng_zzgramaje_grama-low = ls_gramajes_list-zzgramaje.
    APPEND lsrng_zzgramaje_grama TO lrng_zzgramaje_grama.


*    MODIFY gt_gramajes FROM ls_gramajes_list index lv_index_list.

  ENDLOOP.

  REFRESH: gt_mara_gramaje.
  SELECT matnr mtart matkl zzancho zzlargo zzgramaje
  INTO TABLE gt_mara_gramaje
  FROM mara
  WHERE matkl = ls_gramajes-matkl AND zzgramaje IN lrng_zzgramaje_grama.

  PERFORM prepara_rng_matnr_grama USING space.

  SELECT d~matnr, d~werks, d~lgort, d~labst
  INTO TABLE @DATA(lt_mard_red)
  FROM mard AS d
*  WHERE matnr LIKE @lv_conc_matkl
  WHERE matnr IN @grng_matnr_grama
    AND werks = @gs_param-werks
    AND lgort = @gs_param-lgort
    AND d~labst > 0.

  IF sy-subrc = 0.
    REFRESH: gt_gramajes.

    LOOP AT lt_mard_red INTO DATA(ls_mard_red_gram).
      CLEAR:  ls_gramajes.

      READ TABLE gt_mara_gramaje INTO DATA(ls_mara_gramaje)
      WITH KEY matnr = ls_mard_red_gram-matnr.

      MOVE-CORRESPONDING ls_mard_red_gram TO ls_gramajes.
      MOVE-CORRESPONDING ls_mara_gramaje TO ls_gramajes.

      APPEND ls_gramajes TO gt_gramajes.

    ENDLOOP.

    SORT gt_gramajes BY zzancho zzlargo ASCENDING.

    CALL SCREEN '0082'.
  ELSE.
*    No se ha encontrado stock para el valor seleccionado
    g_message_number = '076'.
    g_message_type = 'A'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  LISTAR_UAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM listar_uas.

  SELECT tcode, lgnum, vltyp
  INTO TABLE @DATA(lt_zwm_param)
  FROM zwm_param
  WHERE tcode = @sy-tcode
  AND lgnum = @g_lgnum.

  IF sy-subrc = 0.

    PERFORM prepara_rng_matnr_grama USING ls_gramajes-matnr.

    SELECT lgnum, lqnum, matnr, werks, charg, lenum, lgpla,
           verme, meins, wdatu, zeugn, bestq, lgtyp
    FROM lqua
    INTO TABLE @gt_lqua_red
    FOR ALL ENTRIES IN @lt_zwm_param
    WHERE lgnum = @gs_param-lgnum
      AND lgtyp = @lt_zwm_param-vltyp
*      AND matnr LIKE @gv_matnr_concat.
      AND matnr IN @grng_matnr_grama.


    IF sy-subrc = 0.

********INI WM15 - No proponer stock segundas, bloqueado o zona roja*****

      READ TABLE gt_func INTO DATA(ls_func)
      WITH KEY func = 'NO_PROPONER_SEGUNDAS_BLOQ_ZROJ'
               (gv_lgnum_lg) = 'X'.

      IF ls_func IS NOT INITIAL.
*        Descarta bobinas que son "Segundas", las que están
*        bloqueadas y las que están en zona Roja
        DELETE gt_lqua_red
        WHERE zeugn IS NOT INITIAL
           OR bestq IS NOT INITIAL
           OR lgtyp = '030'.
      ENDIF.

********FIN WM15 - No proponer stock segundas, bloqueado o zona roja*****

      REFRESH: gt_grid_uas.  "--> tabla donde se guardan los datos para el grid
      CALL SCREEN '0083'.
    ELSE.
*    No se ha encontrado stock para el valor seleccionado
      g_message_number = '076'.
      g_message_type = 'A'.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ENDIF.

  ELSE.
*    No se ha encontrado stock para el valor seleccionado
    g_message_number = '076'.
    g_message_type = 'A'.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  PREPARA_ALVS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM prepara_alvs.


  DATA: ls_fcat TYPE lvc_s_fcat,
        lt_cat  TYPE lvc_t_fcat.

  CLEAR: gs_layout.
  REFRESH: gt_catalog.

*LAYOUT
*  MOVE text-t05 TO gs_layout_cab-grid_title.
  gs_layout-col_opt = 'X'.
  gs_layout-numc_total = 'X'.
  gs_layout-zebra = 'X'.
  gs_layout-sel_mode = 'A'. "pone el botón para seleccionar varias líneas


*CATÁLOGO DE CAMPOS
  PERFORM prepara_fieldcat.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  PREPARA_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepara_fieldcat.

  DATA :
    lv_table_name    TYPE string,
    lw_fieldcat      TYPE LINE OF lvc_t_fcat,
    lo_ref_table_des TYPE REF TO cl_abap_tabledescr,
    lo_ref_table_aux TYPE REF TO cl_abap_structdescr,
    lo_ref_elem_des  TYPE REF TO cl_abap_elemdescr,
    lw_dfies         TYPE dfies,
    lt_idetails      TYPE abap_compdescr_tab,
    ls_xdetails      TYPE abap_compdescr,
    lt_typedesc      TYPE REF TO cl_abap_typedescr,
    lv_cont          TYPE i,
    lv_href          TYPE char62,
    lpe_table        TYPE tabname,
    l_mnsj           TYPE bapiret2.

*  FIELD-SYMBOLS: <tab_name> TYPE tabname.

  CLEAR lt_idetails. REFRESH lt_idetails.

*  ASSIGN ptab_name TO <tab_name>.


  lo_ref_table_des ?= cl_abap_tabledescr=>describe_by_data( gt_alv_uas ).


  lv_table_name = lo_ref_table_des->get_relative_name( ).

  TRY.
      lo_ref_table_aux ?= lo_ref_table_des->get_table_line_type( ).
    CATCH cx_sy_move_cast_error .
  ENDTRY.

  lt_idetails[] = lo_ref_table_aux->components[].

  LOOP AT lt_idetails INTO ls_xdetails WHERE type_kind NE 'h'.
    lt_typedesc ?= lo_ref_table_aux->get_component_type( ls_xdetails-name ).
    lv_href = lt_typedesc->get_relative_name( ).
    IF NOT lv_href IS INITIAL.
      lo_ref_elem_des ?= cl_abap_typedescr=>describe_by_name( lv_href ).
      CALL METHOD lo_ref_elem_des->get_ddic_field
        EXPORTING
          p_langu    = sy-langu
        RECEIVING
          p_flddescr = lw_dfies.
      CLEAR lw_fieldcat.
      MOVE-CORRESPONDING lw_dfies TO lw_fieldcat.
      lw_fieldcat-fieldname = ls_xdetails-name.
      lw_fieldcat-ref_field = ls_xdetails-name.
*      lpe_table = 'GT_ALV_CAB'.
      lw_fieldcat-tabname   = 'GT_ALV_UAS'.
      lw_fieldcat-col_opt   = 'X'.


      APPEND lw_fieldcat TO gt_catalog.

    ENDIF.

  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  MUESTRA_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM muestra_alv .

  DATA: l_variant_cab TYPE disvariant,
        l_variant_det TYPE disvariant,
        lstbl         TYPE lvc_s_stbl.

*  l_variant_cab-report = sy-cprog.
*  CONCATENATE sy-cprog '_DET' INTO l_variant_det-report.
*
*  IF p_vardet IS NOT INITIAL.
*    l_variant_det-variant = p_vardet.
*  ENDIF.
*
*  IF p_varia IS NOT INITIAL.
*    l_variant_cab-variant = p_varia.
*  ENDIF.


  IF sy-ucomm NE 'UPD'.

* Carga los datos en el ALV
    CALL METHOD g_alv->set_table_for_first_display
      EXPORTING
*       i_buffer_active               =
*       i_bypassing_buffer            =
*       i_consistency_check           =
*       i_structure_name              =
*       is_variant                    = l_variant
        i_save                        = 'A'  " aparece opción guardar disposición
*       i_default                     = 'X'
        is_layout                     = gs_layout
*       is_print                      =
*       it_special_groups             =
*       it_toolbar_excluding          =
*       it_hyperlink                  =
*       it_alv_graphics               =
*       it_except_qinfo               =
*       ir_salv_adapter               =
      CHANGING
        it_outtab                     = gt_alv_uas
        it_fieldcatalog               = gt_catalog
*       it_sort                       =
*       it_filter                     =
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ELSE.
    CALL METHOD g_alv->refresh_table_display
      EXPORTING
        is_stable = lstbl.
*      i_soft_refresh = soft.
  ENDIF.
*
** Toolbar Cabecera Modificado
*  CALL METHOD g_alv_cabecera->set_toolbar_interactive.
*
*  IF sy-ucomm NE 'UPD'.
*
** Carga los datos en las posiciones
*    CALL METHOD g_alv_detalle->set_table_for_first_display
*      EXPORTING
**       i_buffer_active               =
**       i_bypassing_buffer            =
**       i_consistency_check           =
**       i_structure_name              =
*        is_variant                    = l_variant_det
*        i_save                        = 'A'  " aparece opción guardar disposición
**       i_default                     = 'X'
*        is_layout                     = gs_layout_pos
**       is_print                      =
**       it_special_groups             =
**       it_toolbar_excluding          =
**       it_hyperlink                  =
**       it_alv_graphics               =
**       it_except_qinfo               =
**       ir_salv_adapter               =
*      CHANGING
*        it_outtab                     = gt_alv_pos
*        it_fieldcatalog               = gt_catalog_pos
**       it_sort                       =
**       it_filter                     =
*      EXCEPTIONS
*        invalid_parameter_combination = 1
*        program_error                 = 2
*        too_many_lines                = 3
*        OTHERS                        = 4.
*    IF sy-subrc <> 0.
** Implement suitable error handling here
*    ENDIF.
*
*  ELSE.
*    CALL METHOD g_alv_detalle->refresh_table_display
*      EXPORTING
*        is_stable = lstbl.
**      i_soft_refresh = soft.
*  ENDIF.
*
** Toolbar posiciones Modificado
*  CALL METHOD g_alv_detalle->set_toolbar_interactive.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  PREPARA_RNG_MATNR_GRAMA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepara_rng_matnr_grama USING p_matnr TYPE mara-matnr .

  DATA: lv_gramaje(4),
        lv_num_chars           TYPE i,
        lv_num_dif             TYPE i,
        lv_matkl_zzgramaje(30),
        lsrng_matnr            LIKE LINE OF lrng_matnr,
*        ls_gramajes            TYPE gtyp_gramajes,
        lv_index               TYPE i,
        lv_index_list          TYPE i.

  RANGES: lrng_zzgramaje_grama FOR mara-zzgramaje.

  DATA: lsrng_zzgramaje_grama LIKE LINE OF lrng_zzgramaje_grama,
        lv_conc_matkl(50).


  REFRESH: grng_matnr_grama.

  CASE gv_tipo_mat.

    WHEN 'BOBINA'.

      LOOP AT gt_mara_gramaje INTO DATA(ls_mara_gramaje).

        IF p_matnr IS INITIAL AND ls_mara_gramaje-zzgramaje NE ls_gramajes-zzgramaje.
          CONTINUE.
        ENDIF.

        IF p_matnr IS NOT INITIAL AND ls_mara_gramaje-matnr NE p_matnr.
          CONTINUE.
        ENDIF.

        CLEAR: lv_num_chars, lv_num_dif, lv_conc_matkl, gsrng_matnr_grama.

        lv_num_chars = strlen( ls_mara_gramaje-zzancho ).

        lv_num_dif = 4 - lv_num_chars.

        DO lv_num_dif TIMES.
          CONCATENATE '0' ls_mara_gramaje-zzancho INTO ls_mara_gramaje-zzancho.
          CONDENSE ls_mara_gramaje-zzancho.
        ENDDO.

        CONCATENATE '*' ls_mara_gramaje-matkl ls_mara_gramaje-zzgramaje ls_mara_gramaje-zzancho '*'
        INTO lv_conc_matkl.

        gsrng_matnr_grama-sign = 'I'.
        gsrng_matnr_grama-option = 'CP'.
        gsrng_matnr_grama-low = lv_conc_matkl.

        APPEND gsrng_matnr_grama TO grng_matnr_grama.
      ENDLOOP.


***********+INI HABÍA ANTES DEL 9-5-19*************************************
*      lv_num_chars = strlen( ls_gramajes-zzgramaje ).
*
*      lv_num_dif = 4 - lv_num_chars.
*
*      DO lv_num_dif TIMES.
*        CONCATENATE '0' ls_gramajes-zzgramaje INTO ls_gramajes-zzgramaje.
*        CONDENSE ls_gramajes-zzgramaje.
*      ENDDO.
*
*      lv_num_chars = strlen( ls_gramajes-zzancho ).
*
*      lv_num_dif = 4 - lv_num_chars.
*
*      DO lv_num_dif TIMES.
*        CONCATENATE '0' ls_gramajes-zzancho INTO ls_gramajes-zzancho.
*        CONDENSE ls_gramajes-zzancho.
*      ENDDO.
*
*      CONCATENATE '%' ls_gramajes-matkl ls_gramajes-zzgramaje ls_gramajes-zzancho '%'
*      INTO lv_conc_matkl.
*
*      CONDENSE lv_conc_matkl.
*
**      CONCATENATE ls_gramajes-matkl ls_gramajes-zzgramaje ls_gramajes-zzancho
**      INTO gv_matnr_concat.
**
**      condense gv_matnr_concat.
***********+FIN HABÍA ANTES DEL 9-5-19*************************************

    WHEN 'PAL'.

      LOOP AT gt_mara_gramaje INTO ls_mara_gramaje .

        IF p_matnr IS INITIAL AND ls_mara_gramaje-zzgramaje NE ls_gramajes-zzgramaje.
          CONTINUE.
        ENDIF.

        IF p_matnr IS NOT INITIAL AND ls_mara_gramaje-matnr NE p_matnr.
          CONTINUE.
        ENDIF.

        CLEAR: lv_num_chars, lv_num_dif, lv_conc_matkl, gsrng_matnr_grama.

        lv_num_chars = strlen( ls_mara_gramaje-zzancho ).

        lv_num_dif = 4 - lv_num_chars.

        DO lv_num_dif TIMES.
          CONCATENATE '0' ls_mara_gramaje-zzancho INTO ls_mara_gramaje-zzancho.
          CONDENSE ls_mara_gramaje-zzancho.
        ENDDO.

        lv_num_chars = strlen( ls_mara_gramaje-zzlargo ).

        lv_num_dif = 4 - lv_num_chars.

        DO lv_num_dif TIMES.
          CONCATENATE '0' ls_mara_gramaje-zzlargo INTO ls_mara_gramaje-zzlargo.
          CONDENSE ls_mara_gramaje-zzlargo.
        ENDDO.


        CONCATENATE '*' ls_mara_gramaje-matkl ls_mara_gramaje-zzgramaje ls_mara_gramaje-zzancho ls_mara_gramaje-zzlargo '*'
        INTO lv_conc_matkl.

        CONDENSE lv_conc_matkl.

        gsrng_matnr_grama-sign = 'I'.
        gsrng_matnr_grama-option = 'CP'.
        gsrng_matnr_grama-low = lv_conc_matkl.

        APPEND gsrng_matnr_grama TO grng_matnr_grama.
      ENDLOOP.

***********+INI HABÍA ANTES DEL 9-5-19*************************************

*      lv_num_chars = strlen( ls_gramajes-zzgramaje ).
*
*      lv_num_dif = 4 - lv_num_chars.
*
*      DO lv_num_dif TIMES.
*        CONCATENATE '0' ls_gramajes-zzgramaje INTO ls_gramajes-zzgramaje.
*        CONDENSE ls_gramajes-zzgramaje.
*      ENDDO.
*
*      lv_num_chars = strlen( ls_gramajes-zzancho ).
*
*      lv_num_dif = 4 - lv_num_chars.
*
*      DO lv_num_dif TIMES.
*        CONCATENATE '0' ls_gramajes-zzancho INTO ls_gramajes-zzancho.
*        CONDENSE ls_gramajes-zzancho.
*      ENDDO.
*
*      lv_num_chars = strlen( ls_gramajes-zzlargo ).
*
*      lv_num_dif = 4 - lv_num_chars.
*
*      DO lv_num_dif TIMES.
*        CONCATENATE '0' ls_gramajes-zzlargo INTO ls_gramajes-zzlargo.
*        CONDENSE ls_gramajes-zzlargo.
*      ENDDO.
*
*
*      CONCATENATE '%' ls_gramajes-matkl ls_gramajes-zzgramaje ls_gramajes-zzancho ls_gramajes-zzlargo '%'
*      INTO lv_conc_matkl.
*
*      CONDENSE lv_conc_matkl.
*
**      CONCATENATE ls_gramajes-matkl ls_gramajes-zzancho ls_gramajes-zzlargo
**      INTO gv_matnr_concat.
**
**      condense gv_matnr_concat.
***********+FIN HABÍA ANTES DEL 9-5-19*************************************

*  	WHEN OTHERS.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREATE_DLV_INBOUND_NO_TRANS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_dlv_inbound_no_trans CHANGING lt_lips TYPE  tab_lips
                                          vbeln   TYPE vbeln_vl. " nota de entrega (cvivo)
  DATA lt_vbeln TYPE TABLE OF range_vbeln.
  DATA ls_vbeln TYPE range_vbeln.
  DATA l_lifnr TYPE lifnr.
  DATA l_rfpos TYPE rfpos_vl.
*** Local itabs
  DATA lt_komdlgn TYPE TABLE OF komdlgn.
  DATA lt_vbfs TYPE TABLE OF vbfs.
  DATA lt_vbls TYPE TABLE OF vbls.
***Local structures
  DATA ls_vbsk TYPE vbsk.
  DATA ls_komdlgn TYPE komdlgn.
  DATA ls_vbfs TYPE  vbfs.
  DATA ls_vbls TYPE vbls.
  DATA ls_ekpo TYPE ekpo.

  CLEAR l_rfpos.


  LOOP AT gt_dlv INTO DATA(ls_dlv) WHERE descargada = abap_false.
    ADD 1 TO l_rfpos.
    IF l_lifnr IS INITIAL.
      SELECT SINGLE lifnr INTO l_lifnr FROM ekko WHERE ebeln = ls_dlv-vgbel.
    ENDIF.
    ls_komdlgn-lfdat = sy-datum.
    ls_komdlgn-rfpos = l_rfpos.

    ls_komdlgn-lifnr = l_lifnr.
    ls_komdlgn-verur = vbeln.
    ls_komdlgn-lifex = vbeln. " añadir posición externa a posiciones - CVIVO 11.06.19
    ls_komdlgn-arktx = ls_dlv-maktx.
    ls_komdlgn-matnr = ls_dlv-matnr.
    ls_komdlgn-charg = ls_dlv-charg.
    ls_komdlgn-lfart = 'EL'.

* buscamos la info de conversion del pedido de compras
    SELECT SINGLE * INTO ls_ekpo
           FROM ekpo
           WHERE ebeln = ls_dlv-vgbel AND
                 ebelp = ls_dlv-vgpos.

* Quantity and Unit from Delivery
    ls_komdlgn-uebtk = ls_ekpo-uebtk.
    ls_komdlgn-uebto = ls_ekpo-uebto.
    ls_komdlgn-untto = ls_ekpo-untto.
    ls_komdlgn-werks = ls_ekpo-werks.
    ls_komdlgn-lgort = ls_ekpo-lgort.
*    ls_komdlgn-lfimg = ls_dlv-lfimg +
*                      ls_dlv-lfimg * .

    ls_komdlgn-lfimg = ls_dlv-lfimg.
    ls_komdlgn-vrkme = ls_ekpo-meins.
    ls_komdlgn-meins = ls_ekpo-lmein.
    ls_komdlgn-umvkz = ls_ekpo-umrez.
    ls_komdlgn-umvkn = ls_ekpo-umren.
    ls_komdlgn-vgbel = ls_ekpo-ebeln.
    ls_komdlgn-vgpos = ls_ekpo-ebelp.
    ls_komdlgn-vgtyp = 'V'.
    ls_komdlgn-kzazu = 'X'.
    APPEND ls_komdlgn TO lt_komdlgn.
    CLEAR ls_komdlgn.
  ENDLOOP.

* Sammelgangsnummer vergeben
  ls_vbsk-mandt = sy-mandt.
  ls_vbsk-ernam = sy-uname.
  ls_vbsk-erdat = sy-datum.
  ls_vbsk-uzeit = sy-uzeit.
  ls_vbsk-smart = 'L'.

**** Call Core Function GN_DELIVERY_CREATE.
  CALL FUNCTION 'GN_DELIVERY_CREATE'
    EXPORTING
      vbsk_i   = ls_vbsk
    IMPORTING
      vbsk_e   = ls_vbsk
    TABLES
      xkomdlgn = lt_komdlgn
      xvbfs    = lt_vbfs
      xvbls    = lt_vbls
    EXCEPTIONS
      OTHERS   = 1.
*** Error Handling
  READ TABLE lt_vbfs INTO ls_vbfs WITH KEY msgty = 'E'.
  IF sy-subrc IS INITIAL.
    ROLLBACK WORK.
    MESSAGE ID ls_vbfs-msgid TYPE ls_vbfs-msgty NUMBER ls_vbfs-msgno
              WITH ls_vbfs-msgv1
                   ls_vbfs-msgv2
                   ls_vbfs-msgv3
                   ls_vbfs-msgv4.
  ELSE.
    COMMIT WORK AND WAIT.
    READ TABLE lt_vbls INTO ls_vbls INDEX 1.

    SELECT * INTO TABLE lt_lips
             FROM lips
             WHERE vbeln = ls_vbls-vbeln_lif.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHECK_ENTREGA_EXITS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LV_CREATE  text
*      <--P_LV_EXISTS  text
*      <--P_LV_MOD  text
*      <--P_G_VBELN_INB  text
*----------------------------------------------------------------------*
FORM check_entrega_exits  USING    ls_dlv LIKE LINE OF gt_dlv
                          CHANGING ch_create
                                   ch_exists
                                   ch_vbeln_inb.

  DATA lt_lips TYPE STANDARD TABLE OF lips.
  DATA lt_ekes TYPE STANDARD TABLE OF ekes.

  FREE: ch_create, ch_exists, ch_vbeln_inb.

  IF gt_dlv[] IS NOT INITIAL. "WBSTA
** obtener todos os lotes
    SELECT lips~vbeln lips~charg lips~vgbel " cvivo - 23/01/2020- Sólo tomar en cuenta entregas entrantes no contabilizadas
      INTO CORRESPONDING FIELDS OF TABLE lt_lips
      FROM lips
      INNER JOIN vbup
        ON lips~vbeln EQ vbup~vbeln
      FOR ALL ENTRIES IN gt_dlv
      WHERE lips~charg EQ gt_dlv-charg
        AND vbup~wbsta NE 'C'
        AND lips~vgbel EQ gt_dlv-vgbel. " cvivo - 60831

*    IF sy-subrc EQ 0.
*** obtener documento por lote
*      SELECT vbeln charg vgbel FROM lips
*        INTO CORRESPONDING FIELDS OF TABLE lt_lips
*        FOR ALL ENTRIES IN lt_lips
*         WHERE charg EQ lt_lips-charg.

    IF sy-subrc EQ 0.
** Valida se já existe entrega
      SELECT ebeln
             vbeln
             charg
         FROM ekes INTO CORRESPONDING FIELDS OF TABLE lt_ekes
        FOR ALL ENTRIES IN lt_lips
        WHERE ebeln EQ lt_lips-vgbel
          AND vbeln EQ lt_lips-vbeln
          AND charg EQ lt_lips-charg.

      IF sy-subrc EQ 0.
        TRY.
            DATA(ls_ekes) = lt_ekes[ charg = ls_dlv-charg ].
            ch_exists    = abap_true.
            ch_vbeln_inb = ls_ekes-vbeln.

          CATCH cx_sy_itab_line_not_found.
            " já existe entrega mas no para lote
            TRY .
                ls_ekes = lt_ekes[ 1 ].
                ch_vbeln_inb = ls_ekes-vbeln.
                ch_exists    = abap_true.

              CATCH cx_sy_itab_line_not_found.
                " no existe entrega
                ch_create = abap_true.
            ENDTRY.
        ENDTRY.

      ELSE. " no existe entrega
        ch_create = abap_true.
      ENDIF.
*      ELSE. " no existe documento para lote
*        ch_create = abap_true.
*      ENDIF.
    ELSE. " No encontra
      ch_create = abap_true.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHECK_STATUS_UPDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_<FS_DLV>  text
*----------------------------------------------------------------------*
FORM check_status_update  CHANGING ch_dlv LIKE LINE OF gt_dlv.

  DATA lv_charg TYPE lqua-charg.
  DATA l_menge  TYPE menge_d.
  DATA lt_ekbe  TYPE TABLE OF ekbe.

  SELECT * INTO TABLE lt_ekbe
           FROM ekbe
           WHERE ebeln = ch_dlv-vgbel  AND
                 ebelp = ch_dlv-vgpos AND
                 charg = ch_dlv-charg AND
               ( bwart = '101' OR
                 bwart = '102' OR
                 bwart = '161' ).

  l_menge = ch_dlv-lgmng.

* restamos y sumamos las entradas y anulaciones de mercancia

  LOOP AT lt_ekbe INTO DATA(ls_ekbe).
    IF ls_ekbe-bwart = '101'.
      l_menge = l_menge - ls_ekbe-menge.
    ELSE.
      l_menge = l_menge + ls_ekbe-menge.
    ENDIF.
  ENDLOOP.

  IF l_menge IS INITIAL.
    ch_dlv-descargada = abap_true.
*    ch_dlv-completa = abap_true. " cvivo - 12.06.19
  ELSE.
* chequeamos si ya se ha hecho la ot para ese lote en la entrega entrante que estamos tratando
    SELECT SINGLE vbup~lvsta INTO ch_dlv-lvsta
           FROM   vbup INNER JOIN lips ON
                  vbup~vbeln = lips~vbeln AND
                  vbup~posnr = lips~posnr
                WHERE lips~charg = ch_dlv-charg AND
                      lips~werks = gs_param-werks.

* chequeamos si ya se ha hecho la ot y el lote se encuentra en el sustema
    SELECT SINGLE charg INTO lv_charg FROM lqua WHERE lgnum EQ gs_param-lgnum AND
                                                      charg EQ ch_dlv-charg.
    IF sy-subrc IS INITIAL. " la marcamos como leída porque es de esta misma entrega
      ch_dlv-descargada = abap_true.
*      ch_dlv-completa   = abap_true. " cvivo - 12.06.19
      ch_dlv-read       = abap_true. " cvivo - 12.06.19
    ELSE. " cvivo - 12.06.19
* chequeamos si ya se ha hecho la ot para ese lote en otra entrega entrante
      SELECT SINGLE vbup~lvsta INTO ch_dlv-lvsta
             FROM ( vbup INNER JOIN lips ON
                    vbup~vbeln = lips~vbeln AND
                    vbup~posnr = lips~posnr ) INNER JOIN
                    vttp ON vttp~vbeln = lips~vbeln
                  WHERE lips~charg = ch_dlv-charg AND
                        lips~werks = gs_param-werks.
* chequeamos si ya se ha hecho la ot y el lote se encuentra en el sustema
      SELECT SINGLE charg INTO lv_charg FROM lqua WHERE lgnum = gs_param-lgnum AND
                                                        charg = ch_dlv-charg.
      IF sy-subrc IS INITIAL. " la marcamos como descargada, pero no leída pues no es de esta entrega
        ch_dlv-descargada = abap_true.
*        ch_dlv-completa = abap_true. " cvivo - 12.06.19
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PEDIR_NOTA_ENTREGA_NO_TRANS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_EKKO_EBELN  text
*----------------------------------------------------------------------*
FORM pedir_nota_entrega_no_trans  USING p_ebeln TYPE ebeln.
  "
  " SEIS 30.05.2022. Utilizamos la tabla Z donde guardamos el número de entrega.
  "
  SELECT SINGLE verur
    INTO gs_likp-verur
    FROM zwm_rf_em_lect
    WHERE ebeln = p_ebeln AND
          finalizado = ''.
*  select single lips~vbeln into g_vbeln_inb
*         from   lips inner join vbuk on
*                lips~vbeln = vbuk~vbeln
*         where lips~vgbel = p_ebeln and
*               vbuk~wbstk <> 'C'.

  IF sy-subrc NE 0. " si no hay entrega creada
    CALL SCREEN '0073'.

******* INI GAP WM16 Bernabeu  /  RGUILLOT 27-3-19
*    Activación o desactivación de funcionalidad
    READ TABLE gt_func INTO DATA(ls_func)
    WITH KEY func = 'PESO_ALBARAN'
            (gv_lgnum_lg) = 'X'.

*****MODIF INI 4-6-19*************

*      IF gt_select_list-zzpeso_alb IS INITIAL
*      AND sy-subrc = 0.
*        CALL SCREEN '0076'.
*      ENDIF.


    IF gt_select_list-zzpeso_alb IS INITIAL
    AND gs_vttk-zzpeso_alb IS INITIAL
    AND sy-subrc = 0
    AND gs_vttk-tknum IS NOT INITIAL.

*    Se comprueba ya que al ir hacia delante en el proceso
*    y volver para atrás, las variables globales de arriba
*    se han cambiado y no tienen los datos correctos.
      SELECT SINGLE zzpeso_alb INTO gs_vttk-zzpeso_alb
      FROM vttk
      WHERE tknum = gs_vttk-tknum.

      IF gs_vttk-zzpeso_alb IS INITIAL .
        CALL SCREEN '0076'.
      ENDIF.

    ENDIF.

*****MODIF FIN 4-6-19*************

******* FIN GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

  ELSE.
    "
    " SEIS. 30.05.2022. Ya no hace falta pedirlo. Lo sacamos de la tabla Z.
    "
*    select single verur from likp " si está creada pero no tiene nota de entrega
*      into gs_likp-verur
*      where vbeln eq g_vbeln_inb.

    IF gs_likp-verur EQ space.
      CALL SCREEN '0073'.
    ENDIF.

******* INI GAP WM16 Bernabeu  /  RGUILLOT 27-3-19
*    Activación o desactivación de funcionalidad
    CLEAR: ls_func.
    READ TABLE gt_func INTO ls_func
    WITH KEY func = 'PESO_ALBARAN'
            (gv_lgnum_lg) = 'X'.


*****MODIF INI 4-6-19*************

*      IF gt_select_list-zzpeso_alb IS INITIAL
*      AND sy-subrc = 0.
*        CALL SCREEN '0076'.
*      ENDIF.


    IF gt_select_list-zzpeso_alb IS INITIAL
    AND gs_vttk-zzpeso_alb IS INITIAL
    AND sy-subrc = 0.

*    Se comprueba ya que al ir hacia delante en el proceso
*    y volver para atrás, las variables globales de arriba
*    se han cambiado y no tienen los datos correctos.
      SELECT SINGLE zzpeso_alb INTO gs_vttk-zzpeso_alb
      FROM vttk
      WHERE tknum = gs_vttk-tknum.

      IF gs_vttk-zzpeso_alb IS INITIAL.
        CALL SCREEN '0076'.
      ENDIF.

    ENDIF.

*****MODIF FIN 4-6-19*************

******* FIN GAP WM16 Bernabeu  /  RGUILLOT 27-3-19

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FIN_DESCARGA_SAICA_NO_TRANSP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fin_descarga_saica_no_transp .

*         INI GAP WM16 - Bernabeu  / RGUILLOT 1-4-19

*    Activación o desactivación de funcionalidad
  READ TABLE gt_func INTO DATA(ls_func)
  WITH KEY func = 'CAMBIA_ACCION_FINALIZAR'
          (gv_lgnum_lg) = 'X'.

  IF sy-subrc = 0.
    PERFORM listar_palets_descarg_no_trans USING abap_true.
  ELSE.
    PERFORM fin_transporte_new USING abap_false.
  ENDIF.

*         FIN GAP WM16 - Bernabeu  / RGUILLOT 1-4-19


ENDFORM.
** KYVOR(AG) - FIM - 28.07.2019 - funcionalidad gravar sin transportes.
*&---------------------------------------------------------------------*
*&      Form  SAVE_POS_MAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_ITEMS  text
*      -->P_LT_RF_MAT  text
*      -->P_<DESCARGA>_VBELN  text
*----------------------------------------------------------------------*
FORM save_pos_mat  USING  ls_descarga TYPE  zst_rf_em
                          ls_rf_mat TYPE zwm_rf_mat_alm.

  SELECT SINGLE * INTO gs_zwm_rf_mat_alm
         FROM zwm_rf_mat_alm
         WHERE vgbel = ls_descarga-vgbel
           AND vgpos = ls_descarga-vgpos
           AND vbeln = ls_descarga-vbeln
           AND posnr = ls_descarga-posnr
           AND matnr = ls_descarga-matnr
           AND charg = ls_descarga-charg.

  IF sy-subrc <> 0.
    gs_zwm_rf_mat_alm-vgbel = ls_descarga-vgbel.
    gs_zwm_rf_mat_alm-vgpos = ls_descarga-vgpos.
    gs_zwm_rf_mat_alm-vbeln = ls_descarga-vbeln.
    gs_zwm_rf_mat_alm-posnr = ls_descarga-posnr.
    gs_zwm_rf_mat_alm-matnr = ls_descarga-matnr.
    gs_zwm_rf_mat_alm-charg = ls_descarga-charg.
    gs_zwm_rf_mat_alm-matkl = ls_descarga-matkl.
    gs_zwm_rf_mat_alm-werks = ls_descarga-werks.
    gs_zwm_rf_mat_alm-lgort = ls_descarga-lgort.
    gs_zwm_rf_mat_alm-lfimg = ls_descarga-lfimg.
    gs_zwm_rf_mat_alm-vrkme = ls_descarga-vrkme.
    gs_zwm_rf_mat_alm-lgmng = ls_descarga-lgmng.
    gs_zwm_rf_mat_alm-meins = ls_descarga-meins.
    INSERT zwm_rf_mat_alm FROM gs_zwm_rf_mat_alm.
  ENDIF.

  MOVE-CORRESPONDING gs_zwm_rf_mat_alm TO ls_rf_mat.

ENDFORM.
