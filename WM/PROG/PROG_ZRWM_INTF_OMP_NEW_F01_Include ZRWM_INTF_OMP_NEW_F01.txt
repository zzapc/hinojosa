*----------------------------------------------------------------------*
***INCLUDE ZRWM_INTF_OMP_NEW_F01
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_DAME_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARI  text
*----------------------------------------------------------------------*
FORM f_dame_variant  CHANGING pc_vari TYPE slis_vari.
  DATA: ls_variant TYPE disvariant,
        lv_exit    TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'LVC_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = lv_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    CHECK lv_exit EQ space.
    pc_vari = ls_variant-variant.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_data USING p_repid.
  DATA: ls_dat_mat   TYPE zdt_omp_mat_move_out_sap_to_o7,
        ls_action    TYPE zdt_omp_mat_move_out_sap_to_o9,
        ls_message   TYPE zdt_omp_mat_move_out_sap_to_o8,
        ls_data      TYPE zmt_omp_mat_move_out_sap_to_om,
        ls_alv       TYPE tr_data,
        ls_mara      TYPE mara,
        lv_lvsme     TYPE lvs_lvsme,
        lt_hard      TYPE STANDARD TABLE OF ztwm001,
        lv_aux       TYPE lein_mgewi,
        lv_ancho     TYPE lein_mgewi,
        lv_str       TYPE string,
        lv_aux_grama TYPE lqua_gesme,
        lv_int       TYPE i,
        lv_ua7(7),
        lv_lenum     TYPE lenum,
        lv_datatype  TYPE datatype_d.

  TYPES: BEGIN OF lot,
           matnr TYPE matnr,
           charg TYPE charg_d,
           lifnr TYPE mch1-lifnr,
           name1 TYPE lfa1-name1,
         END OF lot.

  DATA: t_lot TYPE SORTED TABLE OF lot WITH UNIQUE KEY matnr charg.


  SELECT * FROM ztwm001
    INTO TABLE lt_hard
    WHERE cprog = p_repid AND "sy-repid AND
          param2 = '01'.
*
*  SELECT * FROM ltak
*    INTO CORRESPONDING FIELDS OF TABLE gt_ltak
*    WHERE lgnum = p_lgnum AND
*          bdatu IN s_bdatu AND
*          bzeit IN s_bzeit AND
*          bwart IN s_bwart AND
*          kquit EQ gc_x.
*
*  IF gt_ltak[] IS NOT INITIAL.
*    SELECT * FROM ltap
*      INTO CORRESPONDING FIELDS OF TABLE gt_ltap
*      FOR ALL ENTRIES IN gt_ltak
*      WHERE lgnum = gt_ltak-lgnum AND
*            tanum = gt_ltak-tanum AND
*            werks = p_werks.
*
*    IF gt_ltap[] IS NOT INITIAL.
**      SELECT * FROM lein
**        INTO CORRESPONDING FIELDS OF TABLE gt_lein
**        FOR ALL ENTRIES IN gt_ltap
**        WHERE ( lenum = gt_ltap-vlenr OR
**                lenum = gt_ltap-nlenr ) AND
**              lgtyp IN s_lgtyp .
*      SELECT * FROM lqua
*        INTO CORRESPONDING FIELDS OF TABLE gt_lqua
*        FOR ALL ENTRIES IN gt_ltap
*        WHERE lgnum = p_lgnum AND
*              matnr = gt_ltap-matnr AND
*              werks = p_werks AND
*              lgtyp IN s_lgtyp AND
*             ( lenum = gt_ltap-vlenr OR
*               lenum = gt_ltap-nlenr ).
*
*    ENDIF.
*  ENDIF.

  SELECT * FROM lqua
   INTO CORRESPONDING FIELDS OF TABLE gt_lqua
   WHERE lgnum = p_lgnum AND
         werks = p_werks AND
         lgtyp IN s_lgtyp AND
         verme GT 0.

  REFRESH: grg_rang.

  IF line_exists( lt_hard[ param1 = 'SUPPLIER_NAME' param3 = p_werks ] ). " cvivo - 65978 - proveedor en etiqueta BHS
    SELECT mch1~matnr mch1~charg mch1~lifnr lfa1~name1 FROM mch1
      INNER JOIN lfa1
      ON mch1~lifnr EQ lfa1~lifnr
      INTO CORRESPONDING FIELDS OF TABLE t_lot
      FOR ALL ENTRIES IN gt_lqua
      WHERE matnr EQ gt_lqua-matnr
        AND charg EQ gt_lqua-charg
        AND mch1~lifnr NE space.
  ENDIF.

  LOOP AT gt_lqua INTO DATA(ls_lqua).

*    READ TABLE gt_ltap INTO DATA(ls_ltap) WITH KEY vlenr = ls_lqua-lenum.
*    IF sy-subrc NE 0.
*      READ TABLE gt_ltap INTO ls_ltap WITH KEY nlenr = ls_lqua-lenum.
*      IF sy-subrc NE 0.
*        CONTINUE.
*      ENDIF.
*    ENDIF.
*    READ TABLE gt_ltak INTO DATA(ls_ltak) WITH KEY lgnum = ls_ltap-lgnum
*                                                   tanum = ls_ltap-tanum.

    " del - cvivo - 62813: pasamos a gestionar compatibilidades vía tabla ZWM_COMPATIBLES
** 57924 - cvivo - Si es compatible (grupo prod.) o reemplazado, ponemos el principal
*    SELECT SINGLE * FROM marc
*      WHERE matnr EQ @ls_lqua-matnr
*        AND werks EQ @ls_lqua-werks
*        AND nfmat NE @space
*        AND ausdt LT @sy-datum
*      INTO @DATA(ls_marc).
*
*    IF sy-subrc EQ 0.
*      ls_lqua-matnr = ls_marc-nfmat. " mat.reemplazante
*    ENDIF.
*
*    SELECT SINGLE * FROM pgmi
*      WHERE nrmit EQ @ls_lqua-matnr
*        AND werks EQ @ls_lqua-werks
*        AND antei EQ 0
*        AND datum GE @sy-datum
*      INTO @DATA(pgmi_sub).
*
*    IF sy-subrc EQ 0. " está subordinado
*      SELECT SINGLE * FROM pgmi
*        WHERE prgrp EQ @pgmi_sub-prgrp
*          AND werks EQ @ls_lqua-werks
*          AND antei EQ 1
*        INTO @DATA(pgmi_principal). " cogemos el principal
*
*      IF sy-subrc EQ 0.
*        ls_lqua-matnr = pgmi_principal-nrmit.
*      ENDIF.
*    ENDIF.
** 57924 - cvivo

    " cvivo - 62813 - Verificar si es compatible
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_werks    = ls_lqua-werks
        iv_matnr    = ls_lqua-matnr
      IMPORTING
        e_principal = DATA(l_principal)
      RECEIVING
        et_compat   = DATA(t_compat).

    IF t_compat IS NOT INITIAL AND l_principal IS INITIAL. " hay compatibles y éste no es el principal
      ls_lqua-matnr = t_compat[ principal = abap_true ]-matnr. " sustituyo por el principal
    ENDIF.

    SELECT SINGLE * INTO ls_mara
      FROM mara
      WHERE matnr = ls_lqua-matnr.

    READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'OPERATION_MAT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-operation_mat = <h>-valor1.
    ENDIF.
    PERFORM f_dame_materialid USING ls_mara
                                    ls_lqua-werks
                              CHANGING ls_dat_mat-materialid_mat.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'UNITID'.
    IF sy-subrc EQ 0.
      ls_dat_mat-unitid = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LEADTIME'.
    IF sy-subrc EQ 0.
      ls_dat_mat-leadtime = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MATERIALTYPE'.
    IF sy-subrc EQ 0.
      ls_dat_mat-materialtype = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100'.
    IF sy-subrc EQ 0.
      ls_dat_mat-thickness100 = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-thickness100_unit = <h>-valor1.
    ENDIF.

    CLEAR lv_aux_grama.
    IF ls_mara-zzgramaje IS NOT INITIAL.
      lv_aux_grama = ls_mara-zzgramaje / 1000.
    ENDIF.
    ls_dat_mat-grammage = lv_aux_grama.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRAMMAGE_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-grammage_unit = <h>-valor1.
    ENDIF.

    ls_dat_mat-standardlength = ls_mara-zzlargo.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'STANDARDLENGTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-standardlength_unit = <h>-valor1.
    ENDIF.

    IF ls_mara-mtart EQ 'ZPIM'.
      ls_dat_mat-preprint = 'YES'.
    ELSE.
      ls_dat_mat-preprint = 'NO'.
    ENDIF.

    ls_dat_mat-comments = ''.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY'.
    IF sy-subrc EQ 0.
      ls_dat_mat-minstockquantity = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-minstockquantity_unit = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY'.
    IF sy-subrc EQ 0.
      ls_dat_mat-targetstockquantity = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-targetstockquantity_unit = <h>-valor1.
    ENDIF.

    PERFORM f_get_white_top USING ls_mara-matkl CHANGING lv_str.
    ls_dat_mat-white_top = lv_str.

    ls_dat_mat-erpmaterialid = ''.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_MATMOV'.
    IF sy-subrc EQ 0.
      ls_dat_mat-operation_matmov = <h>-valor1.
    ENDIF.
    PERFORM f_dame_materialid USING ls_mara
                                    ls_lqua-werks
                              CHANGING ls_dat_mat-materialid_matmov.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MOVEMENTTYPE'.
    IF sy-subrc EQ 0.
      ls_dat_mat-movementtype = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'FROMWHID'.
    IF sy-subrc EQ 0.
      ls_dat_mat-fromwhid = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'.
    IF sy-subrc EQ 0.
      ls_dat_mat-towhid  = <h>-valor1.
    ENDIF.

    PERFORM f_dame_fecha_hora CHANGING ls_dat_mat-eventdate.

*   De KG -> a M
    PERFORM f_cambia_unidad USING ls_mara-matnr
                                  ls_lqua-verme
                                  ls_lqua-gewei
                                  'M'
                                  ls_mara-zzancho
                            CHANGING lv_aux.
*   el ancho viene en MM en la MARA, pasamos a M
    lv_ancho = ls_mara-zzancho / 1000.

*   M * Ancho(M) -> M2
    lv_aux = lv_aux * lv_ancho.

    ls_dat_mat-quantity = lv_aux .

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'QUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-quantity_unit = <h>-valor1.
    ENDIF.
    ls_dat_mat-width = ls_mara-zzancho.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'WIDTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-width_unit = <h>-valor1.
    ENDIF.
* 13/11/2018 Cambio en campo LOT_ID , enviar la UA en vez del lote.
*    ls_dat_mat-lot_id = ls_ltap-charg.
    CALL FUNCTION 'CONVERSION_EXIT_LENUM_OUTPUT'
      EXPORTING
        input           = ls_lqua-lenum
      IMPORTING
        output          = ls_dat_mat-lot_id
      EXCEPTIONS
        t344_get_failed = 1
        OTHERS          = 2.
    lv_lenum = ls_dat_mat-lot_id.
    lv_int = strlen( lv_lenum ).
    IF lv_int EQ 7.
      lv_ua7 = lv_lenum.
      CALL FUNCTION 'NUMERIC_CHECK'
        EXPORTING
          string_in  = lv_lenum
        IMPORTING
          string_out = lv_lenum
          htype      = lv_datatype.

      IF lv_datatype EQ 'NUMC'.
        CONCATENATE '0' lv_ua7 INTO ls_dat_mat-lot_id .
      ENDIF.
    ENDIF.
* 13/11/2018
* 58943 - cvivo - 15.01.20 - lectura UAs SAICA 2020 en BHS con ceros a la izquierda, es una excepción, por eso el hardcode
    IF ls_lqua-lgnum EQ '200'
      AND lv_lenum CO '09876543210 '
      AND ( lv_lenum CP '*2703' OR " SAICA
            lv_lenum CP '*2702' OR
            lv_lenum CP '*1301' ).
      IF strlen( lv_lenum ) EQ 12.
        CONCATENATE '00' lv_lenum INTO ls_dat_mat-lot_id.
      ELSEIF strlen( lv_lenum ) EQ 13.
        CONCATENATE '0' lv_lenum INTO ls_dat_mat-lot_id.
      ENDIF.
    ENDIF.

    PERFORM f_dame_supplier_lot_id2 USING ls_lqua-matnr
                                          ls_lqua-charg
                                    CHANGING lv_str.
    ls_dat_mat-supplier_lot_id = lv_str.

    " cvivo - 65978 - Proveedor para OMP para que BHS lo imprima
    READ TABLE t_lot WITH TABLE KEY matnr = ls_lqua-matnr
                                    charg = ls_lqua-charg INTO DATA(ls_lot).

    IF sy-subrc EQ 0.
      ls_dat_mat-supplier_name = ls_lot-name1.
    ENDIF.


    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action-name =  <h>-valor1.
    ENDIF.
    APPEND ls_dat_mat TO ls_action-action.

    MOVE-CORRESPONDING ls_dat_mat TO ls_alv.
    ls_alv-matnr = ls_mara-matnr.
    ls_alv-lenum = ls_lqua-lenum.
*    ls_alv-tanum = ls_lqua-tanum.
    ls_alv-lgnum = ls_lqua-lgnum.
    ls_alv-thickness100        = ls_dat_mat-thickness100.
    ls_alv-grammage            = ls_dat_mat-grammage.
    ls_alv-standardlength      = ls_dat_mat-standardlength.
    ls_alv-comments            = ls_dat_mat-comments.
    ls_alv-minstockquantity    = ls_dat_mat-minstockquantity.
    ls_alv-targetstockquantity = ls_dat_mat-targetstockquantity.
    ls_alv-quantity            = ls_dat_mat-quantity.
    APPEND ls_alv TO gt_data.
    CLEAR ls_alv.
  ENDLOOP.

  IF ls_action IS NOT INITIAL.
    ls_message-message = ls_action.
    ls_data-mt_omp_mat_move_out_sap_to_omp = ls_message.
    gs_tab_omp = ls_data.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SEND_TO_OMP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_send_to_omp USING p_send p_repid p_werks
                         gs_tab_omp gs_tab_omp_2_pacs
                         p_commit.
  DATA: lo_proxy    TYPE REF TO cl_proxy_client,
        lv_log_port TYPE prx_logical_port_name.


  IF gs_tab_omp IS INITIAL  AND gs_tab_omp_2_pacs IS INITIAL.
    i_return_log = VALUE #( ( message = 'No se han seleccionado datos' type = 'E' ) ).
    RETURN.
  ENDIF.


  SELECT SINGLE valor1
    FROM ztwm001
    INTO lv_log_port
    WHERE cprog = p_repid AND "sy-repid AND
          param1 = 'LOGICAL_PORT_NAME'.

  IF ( p_send IS NOT INITIAL ) AND ( lv_log_port IS NOT INITIAL ) .

    " Kyvor - 20190925 - RDM
    " fetch configuration
    SELECT SINGLE *  FROM ztwm001
      INTO  @DATA(ls_cfg)
      WHERE cprog = @p_repid "sy-repid
      AND
      param1 = 'PROXY'
      AND valor1 = @p_werks .

    IF sy-subrc NE 0 OR ls_cfg-valor2 IS INITIAL.
      i_return_log = VALUE #( ( message = text-001 type = 'E' ) ).
      IF p_auto IS INITIAL.
        MESSAGE e001(00) WITH text-001.
      ENDIF.
      RETURN.
    ENDIF.
    TRY.
        GET TIME.
        CONVERT DATE sy-datum TIME sy-uzeit
                INTO TIME STAMP DATA(l_timestamp)
                TIME ZONE sy-zonlo.

        CREATE OBJECT lo_proxy
        TYPE (ls_cfg-valor2).
*        CREATE OBJECT lo_proxy
*        TYPE (ls_cfg-valor2)
*        EXPORTING logical_port_name = lv_log_port.

        IF ls_cfg-valor1 = '2000'. " Xativa
*>> JJR 03.08.2023
*          IF gs_tab_omp IS NOT INITIAL .
*            CAST zco_si_omp_mat_move_out_sap_to( lo_proxy )->si_omp_mat_move_out_sap_to_omp( output =
*            gs_tab_omp
*            ).
*          ENDIF.
          IF gs_tab_omp_2_pacs IS NOT INITIAL .
            CAST zco_si_mat_move_sapto_omp_out( lo_proxy )->si_mat_move_sapto_omp_out( output =
            gs_tab_omp_2_pacs
            ).
          ENDIF.
*<< JJR 03.08.2023
        ELSEIF ls_cfg-valor1 = '2001'. "PACS
***          IF gs_tab_omp IS NOT INITIAL .
***            CAST zco_si_omp_mat_out_sap_to_omp( lo_proxy )->si_omp_mat_out_sap_to_omp_pacs( output =
***            gs_tab_omp
***            ).
***          ENDIF.
          IF gs_tab_omp_2_pacs IS NOT INITIAL .
            CAST zco_si_mat_move_sapto_omp_out( lo_proxy )->si_mat_move_sapto_omp_out( output =
            gs_tab_omp_2_pacs
            ).
          ENDIF.
        ELSEIF ls_cfg-valor1 = '2010'. "RAMBLEÑOS
          IF gs_tab_omp IS NOT INITIAL .
            CAST zco_si_omp_mat_out_sap_to_omp1( lo_proxy )->si_omp_mat_out_sap_to_omp_er( output =
            gs_tab_omp
            ).
          ENDIF.
        ELSEIF ls_cfg-valor1 = '2070'. "SAN CAYETANO
***          IF gs_tab_omp IS NOT INITIAL .
***            CAST zco_si_omp_mat_out_sap_to_omp2( lo_proxy )->SI_OMP_MAT_OUT_SAP_TO_OMP_ISC( output =
***            gs_tab_omp
***            ).
***          ENDIF.
          IF gs_tab_omp_2_pacs IS NOT INITIAL .
            CAST zco_si_mat_move_sapto_omp_out( lo_proxy )->si_mat_move_sapto_omp_out( output =
            gs_tab_omp_2_pacs
            ).
          ENDIF.
*          IF gs_tab_omp_2_sc IS NOT INITIAL .
*            CAST ZCO_SI_MAT_MOVE_SAPTO_OMP_OUT1( lo_proxy )->SI_MAT_MOVE_SAPTO_OMP_OUT_SC( output =
*            gs_tab_omp_2_sc
*            ).
*          ENDIF.
        ENDIF.

        i_return_log = VALUE #( ( message = |Se ha ejecutado proxy { ls_cfg-valor2 }| type = 'S' ) ).

        IF p_commit = 'X'.
          COMMIT WORK AND WAIT.

          IF p_auto = 'X'.
            DO 10 TIMES.
              SELECT mast~msgguid
                INTO v_msgguid
                UP TO 1 ROWS
                FROM sxmspmast AS mast  INNER JOIN sxmspemas AS emas ON emas~msgguid       = mast~msgguid
                                                                    AND emas~pid           = mast~pid
                WHERE mast~pid             = 'SENDER'
                  AND mast~exetimest       >= l_timestamp
                 AND  mast~adminuser       = sy-uname
               ORDER BY exetimest DESCENDING.
              ENDSELECT.
              IF sy-subrc = 0.
                EXIT.
              ELSE.
                WAIT UP TO 1 SECONDS.
              ENDIF.
            ENDDO.
          ENDIF.


        ENDIF.

      CATCH cx_root INTO DATA(lr_exc).
        i_return_log = VALUE #( ( message = |{ text-e02 } tratando proxy { ls_cfg-valor2 }| type = 'E' ) ).
        IF p_auto IS INITIAL.
          MESSAGE text-e02 TYPE 'S' DISPLAY LIKE 'E'.
        ENDIF.
        EXIT.

    ENDTRY.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SHOW_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_show_data .
* mostrar ALV con datos de GT_data
  DATA: lv_functions        TYPE REF TO cl_salv_functions_list,
        lv_title            TYPE lvc_title,
        lv_display_settings TYPE REF TO cl_salv_display_settings,
        lv_selections       TYPE REF TO cl_salv_selections,
        lv_events           TYPE REF TO cl_salv_events_table,
        lv_layout           TYPE REF TO cl_salv_layout,
        lv_lay              TYPE slis_vari,
        lv_key              TYPE salv_s_layout_key.


  IF gt_data[] IS NOT INITIAL.
    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = go_table
          CHANGING
            t_table      = gt_data.           "internal table
      CATCH cx_salv_msg.
    ENDTRY.
  ELSEIF gt_data_2[] IS NOT INITIAL.
    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = go_table
          CHANGING
            t_table      = gt_data_2.         "internal table
      CATCH cx_salv_msg.
    ENDTRY.

* >> JJR
  ELSEIF gt_data_3[] IS NOT INITIAL.
    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = go_table
          CHANGING
            t_table      = gt_data_3.         "internal table
      CATCH cx_salv_msg.
    ENDTRY.

*<< JJR
  ENDIF.

  IF ( gt_data[] IS NOT INITIAL ) OR ( gt_data_2[] IS NOT INITIAL ) OR
     ( gt_data_3[] IS NOT INITIAL ). "JJR
    TRY.
        lv_display_settings = go_table->get_display_settings( ).
        lv_title = 'Datos a enviar a OMP'.
        lv_display_settings->set_list_header( lv_title ).
        lv_display_settings->set_fit_column_to_table_size( abap_true ).
        lv_display_settings->set_striped_pattern( abap_true ).

* grabamos el layout
        lv_layout = go_table->get_layout( ).
        lv_key-report = sy-repid.
        lv_layout->set_key( lv_key ).
        lv_layout->set_default( abap_true ).
        lv_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
        IF p_vari IS NOT INITIAL.
          MOVE p_vari TO lv_lay.
          lv_layout->set_initial_layout( lv_lay ).
        ENDIF.

        lv_functions = go_table->get_functions( ).
        lv_functions->set_all( abap_true ).
        lv_functions->set_export_xml( abap_true ).
        lv_functions->set_export_spreadsheet( abap_true ).
        lv_functions->set_view_lotus( abap_false ).
        lv_functions->set_graphics( abap_false ).
        lv_functions->set_export_localfile( abap_true ).
        lv_functions->set_view_excel( abap_true ).

* Enable cell selection mode
        lv_selections = go_table->get_selections( ).
        lv_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).

        lv_events = go_table->get_event( ).
        IF go_handler IS NOT BOUND.
          CREATE OBJECT go_handler.
        ENDIF.
        SET HANDLER go_handler->on_link_click FOR lv_events.

        PERFORM f_modifica_cabeceras.
* Display table
        go_table->display( ).
      CATCH cx_salv_msg.
    ENDTRY.
  ELSE.
    MESSAGE text-e01 TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GRABA_ULTIMA_EJEC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_S_BDATU  text
*      -->P_S_BZEIT  text
*----------------------------------------------------------------------*
FORM f_graba_ultima_ejec .
*solo actualizamos si el lanzamiento es en fondo

  IF sy-batch IS NOT INITIAL.

    UPDATE tvarvc SET sign = gc_i
                      opti = gc_ge
                      low = sy-datum WHERE name = 'ZWM_OMP_ULTIMA_FECHA' AND
                                           type = 'S' AND
                                           numb = '0000'.

    UPDATE tvarvc SET sign = gc_i
                      opti = gc_ge
                      low = sy-timlo WHERE name = 'ZWM_OMP_ULTIMA_HORA' AND
                                           type = 'S' AND
                                           numb = '0000'.
    COMMIT WORK.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_FECHA_HORA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_DAT_MAT_EVENTDATE  text
*----------------------------------------------------------------------*
FORM f_dame_fecha_hora  CHANGING pc_str TYPE string.
  DATA: lv_str(10), lv_str2(8).
  WRITE sy-datum TO lv_str USING EDIT MASK '__/__/____'.
  WRITE sy-timlo TO lv_str2 USING EDIT MASK '__:__:__'.
  CONCATENATE lv_str lv_str2 INTO pc_str SEPARATED BY space.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_MATERIALID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MAT_MATNR  text
*      <--P_MATERIALID_MAT  text
*----------------------------------------------------------------------*
FORM f_dame_materialid  USING    pe_mara TYPE mara
                                 pe_werks TYPE werks_d
                        CHANGING pc_matid TYPE string.
  DATA: lv_str        TYPE string,
        lv_calidad(3),
        lv_ebeln      TYPE ebeln.
  CLEAR pc_matid.

  IF pe_mara-mtart <> 'ZPIM'.

    PERFORM f_dame_calidad USING pe_werks pe_mara-matkl CHANGING lv_calidad.

    CONCATENATE 'PAP/' lv_calidad INTO pc_matid .
    CONDENSE pc_matid.
    CONCATENATE pe_mara-zzgramaje+1(3) '/' pe_mara-zzancho+0(4) INTO lv_str.
    CONCATENATE pc_matid lv_str INTO pc_matid SEPARATED BY space.

  ELSE.

    MOVE pe_mara-matnr+1(5) TO lv_str .
    CONCATENATE 'PAP/' lv_str INTO lv_str.
    CONDENSE lv_str.
    CONCATENATE lv_str '/' pe_mara-zzancho+0(4) INTO pc_matid.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIFICA_CABECERAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_modifica_cabeceras .
  DATA: lo_cols       TYPE REF TO cl_salv_columns,
        lo_column_tab TYPE REF TO cl_salv_column_table,
        lt_dd03l      TYPE enh_t_dd03l,
        lv_text       TYPE string,
        lo_column     TYPE REF TO cl_salv_column.

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_dd03l
    FROM dd03l
   WHERE tabname = 'ZDT_OMP_MAT_MOVE_OUT_SAP_TO_O7'
*      OR tabname = 'ZMESSAGE'
*      OR tabname = 'ZSI_MAT_MOVE_SAPTO_OMP_OUT_CCS'
*      OR tabname = 'ZSI_MAT_MOVE_SAPTO_OMP_OUT_CCP'
*      OR tabname = 'ZSI_MAT_MOVE_SAPTO_OMP_OUT_CCM'
      OR tabname = 'ZDT_MAT_MOVE_NEW_FORMAT'
      OR tabname = 'ZDT_MAT_MOVE_NEW_FORMAT_CCSTOC'
      OR tabname = 'ZDT_MAT_MOVE_NEW_FORMAT_CCPROD'
      OR tabname = 'ZDT_MAT_MOVE_NEW_FORMAT_CCMATE'.

  lo_cols = go_table->get_columns( ).
  lo_cols->set_optimize( abap_true ).

  LOOP AT lt_dd03l ASSIGNING FIELD-SYMBOL(<wa_field>).
    TRY.
        CASE <wa_field>-fieldname.
          WHEN 'CONTROLLER'.
          WHEN OTHERS.

            lo_column = lo_cols->get_column( <wa_field>-fieldname ).
            lv_text = <wa_field>-fieldname.
            PERFORM f_modif_columna USING lv_text
                                    CHANGING lo_column.
        ENDCASE.
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER

    ENDTRY.
  ENDLOOP.

* Operación
  TRY.
      lo_column = lo_cols->get_column( 'OPERATION' ).
      lv_text = 'OPERATION'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Product ID
  TRY.
      lo_column = lo_cols->get_column( 'PRODUCTID' ).
      lv_text = 'PRODUCTID'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Paper ID
  TRY.
      lo_column = lo_cols->get_column( 'PAPERID' ).
      lv_text = 'PAPERID'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Stock Group ID
  TRY.
      lo_column = lo_cols->get_column( 'STOCKGROUPID' ).
      lv_text = 'STOCKGROUPID'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Coste
  TRY.
      lo_column = lo_cols->get_column( 'COST_TXT' ).
      lv_text = 'COST'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lo_column = lo_cols->get_column( 'COST_UNIT' ).
      lv_text = 'COST_UNIT'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Gramaje
  TRY.
      lo_column = lo_cols->get_column( 'GRAMMAGE_TXT' ).
      lv_text = 'GRAMMAGE'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Thickness 100
  TRY.
      lo_column = lo_cols->get_column( 'THICKNESS100_TXT' ).
      lv_text = 'THICKNESS100'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Longitud
  TRY.
      lo_column = lo_cols->get_column( 'STANDARDLENGTH' ).
      lv_text = 'MATERIALLENGTH'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lo_column = lo_cols->get_column( 'STANDARDLENGTH_UNIT' ).
      lv_text = 'MATERIALLENGTH_UNIT'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Anchura
  TRY.
      lo_column = lo_cols->get_column( 'WIDTH' ).
      lv_text = 'MATERIALWIDTH'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lo_column = lo_cols->get_column( 'WIDTH_UNIT' ).
      lv_text = 'MATERIALWIDTH_UNIT'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Cantidad Mínima Stock (opcional)
  TRY.
      lo_column = lo_cols->get_column( 'MINSTOCKQUANTITY_TXT' ).
      lv_text = 'MINSTOCKQUANTITY'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Cantidad Objetivo Stock (opcional)
  TRY.
      lo_column = lo_cols->get_column( 'TARGETSTOCKQUANTITY_TXT' ).
      lv_text = 'TARGETSTOCKQUANTITY'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Cantidad
  TRY.
      lo_column = lo_cols->get_column( 'QUANTITY_TXT' ).
      lv_text = 'QUANTITY'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* material
  TRY.
      lo_column = lo_cols->get_column( 'MATNR' ).
      lv_text = 'Material'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'MATNR' ).
      lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* Lenum
  TRY.
      lo_column = lo_cols->get_column( 'LENUM' ).
      lv_text = 'Unidad almacén'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'LENUM' ).
      lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* tanum
  TRY.
      lo_column = lo_cols->get_column( 'TANUM' ).
      lv_text = 'Número de OT'.
      PERFORM f_modif_columna USING lv_text
                              CHANGING lo_column.
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'TANUM' ).
      lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

* LGNUM
  TRY.
      lo_column = lo_cols->get_column( 'LGNUM' ).
      lo_column->set_technical( abap_true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIF_COLUMNA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<WA_FIELD>_FIELDNAME  text
*      <--P_LO_COLUMN  text
*----------------------------------------------------------------------*
FORM f_modif_columna USING    pe_text TYPE string
                      CHANGING pc_column TYPE REF TO cl_salv_column.
  DATA: lv_short TYPE scrtext_s,
        lv_med   TYPE scrtext_m,
        lv_long  TYPE scrtext_l,
        lv_len   TYPE lvc_outlen,
        lv_tool  TYPE lvc_tip.


  lv_long  = pe_text.
  lv_med   = pe_text.
  lv_short = pe_text.
  pc_column->set_long_text( lv_long ). "40
  pc_column->set_fixed_header_text( abap_true ).
  pc_column->set_medium_text( lv_med ). "20
  pc_column->set_short_text( lv_short ). "10
  pc_column->set_tooltip( lv_tool ).
  lv_len = strlen( pe_text ).
  pc_column->set_output_length( lv_len ).
  pc_column->set_zero( abap_true ).
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CAMBIA_UNIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MARA_MATNR  text
*      -->P_LS_LEIN_MGEWI  text
*      -->P_LS_LEIN_GEWEI  text
*      -->P_0627   text
*      <--P_LV_AUX  text
*----------------------------------------------------------------------*
FORM f_cambia_unidad  USING pe_matnr TYPE matnr
                            pe_cant TYPE lqua_verme
                            pe_gmein TYPE gewei
                            pe_unit_conv TYPE gewei
                            pe_zzancho TYPE zancho
                      CHANGING pc_cant TYPE lein_mgewi.
  DATA: lv_aux  TYPE bstmg,
        lv_unit TYPE gewei VALUE 'M',
        lv_aux2 TYPE bstmg.
  CLEAR: pc_cant, lv_aux2.

  MOVE pe_cant TO lv_aux.
  CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
    EXPORTING
      i_matnr              = pe_matnr
      i_in_me              = pe_gmein
      i_out_me             = pe_unit_conv
      i_menge              = lv_aux
    IMPORTING
      e_menge              = lv_aux2
    EXCEPTIONS
      error_in_application = 1
      error                = 2
      OTHERS               = 3.
  IF sy-subrc <> 0 AND pe_unit_conv = 'M2'.
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = pe_matnr
        i_in_me              = pe_gmein
        i_out_me             = lv_unit
        i_menge              = lv_aux
      IMPORTING
        e_menge              = lv_aux2
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    pc_cant = lv_aux2 * pe_zzancho / 1000.
  ELSE.
    MOVE lv_aux2 TO pc_cant.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_CALIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PE_WERKS  text
*      -->P_PE_MARA_MATKL  text
*      <--P_LV_CALIDAD  text
*----------------------------------------------------------------------*
FORM f_dame_calidad  USING    pe_werks TYPE werks_d
                              pe_matkl TYPE matkl
                     CHANGING pc_cal TYPE char03.
  CONSTANTS: lc_calidad TYPE zedpi0002 VALUE 'CALIDAD'.

  DATA: lv_cod     TYPE zedpi0001,
        lv_val_ext TYPE zedpi0005.

  CLEAR pc_cal.

  SELECT SINGLE zcodigo INTO lv_cod
    FROM ztpi0001
    WHERE zdescripcion = lc_calidad.

  IF lv_cod IS NOT INITIAL.
    SELECT SINGLE zvalor_externo
      INTO lv_val_ext
      FROM ztpi0003
      WHERE zcodigo = lv_cod AND
            werks = pe_werks AND
            zvalor_sap  = pe_matkl.

    IF sy-subrc EQ 0.
      SELECT SINGLE calidad
        INTO pc_cal
        FROM ztpi0013
        WHERE valor_externo = lv_val_ext.
    ELSE.
      SELECT SINGLE ztpi0014~calidad
        FROM ztpi0014
        INTO pc_cal
        WHERE matkl EQ pe_matkl
        AND werks EQ pe_werks.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_SUPPLIER_LOT_ID2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_LTAP_CHARG  text
*      <--P_LV_STR  text
*----------------------------------------------------------------------*
FORM f_dame_supplier_lot_id2  USING  pe_matnr TYPE matnr
                                     pe_charg TYPE charg_d
                              CHANGING pc_lot_id TYPE string.

  CLEAR pc_lot_id.

  SELECT SINGLE licha
    FROM mch1
    INTO pc_lot_id
    WHERE matnr = pe_matnr AND
          charg = pe_charg.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_WHITE_TOP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MARA_MTART  text
*      <--P_LV_STR  text
*----------------------------------------------------------------------*
FORM f_get_white_top  USING    pe_matkl TYPE matkl
                      CHANGING pc_str TYPE string.
  CONSTANTS: lc_name TYPE rvari_vnam VALUE 'INTF_OMP_WHITETOP_YES'.

  DATA: ls_rang LIKE LINE OF grg_rang,
        lt_vals TYPE tvarvc_t.

  CLEAR pc_str.

  IF grg_rang[] IS INITIAL.
    SELECT * INTO TABLE lt_vals
      FROM tvarvc
      WHERE name = lc_name .

    LOOP AT lt_vals ASSIGNING FIELD-SYMBOL(<ls>).
      MOVE <ls>-sign TO ls_rang-sign.
      MOVE <ls>-opti TO ls_rang-option.
      MOVE <ls>-low TO ls_rang-low.
      MOVE <ls>-high TO ls_rang-high.
      IF ls_rang IS NOT INITIAL.
        APPEND ls_rang TO grg_rang.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF pe_matkl IN grg_rang.
    pc_str = 'YES'.
  ELSE.
    pc_str = 'NO'.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_data_2 USING p_repid.
  DATA: ls_dat_mat                   TYPE zdt_omp_mat_move_out_sap_to_o7,
        ls_action                    TYPE zdt_omp_mat_move_out_sap_to_o9,
        ls_message                   TYPE zdt_omp_mat_move_out_sap_to_o8,
        ls_data                      TYPE zmt_omp_mat_move_out_sap_to_om,
*** --> Inicio Estructuras para proxy nuevo PACS
        ls_data_pc                   TYPE zmt_mat_move_new_format,
        ls_action_pc                 TYPE zdt_mat_move_new_format,
        ls_choice_pc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_pc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_pc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_pc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_pc          TYPE zdt_mat_move_new_format_ccprod,
        ls_ccmaterialmovement_pc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_pc TYPE zdt_mat_move_new_format_ccmate,
        ls_cc_lot_command_pc         TYPE  zdt_mat_move_new_format_cc_lot, "JJR
        ls_cclot_pc                  TYPE zdt_mat_move_new_format_cclot,  "JJR
*** <-- Fin Estructuras para proxy nuevo PACS
*** --> Inicio Estructuras para proxy nuevo SAN CAYETANO
        ls_data_sc                   TYPE zmt_mat_move_new_format,
        ls_action_sc                 TYPE zdt_mat_move_new_format,
        ls_choice_sc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_sc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_sc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_sc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_sc          TYPE zdt_mat_move_new_format_ccprod,
        ls_ccmaterialmovement_sc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_sc TYPE zdt_mat_move_new_format_ccmate,
*** <-- Fin Estructuras para proxy nuevo SAN CAYETANO
        ls_alv                       TYPE tr_data_2,
        ls_tipo                      LIKE LINE OF grg_tipo,
        wl_lqua                      TYPE lqua,
        ls_mara                      TYPE mara,
        lv_lvsme                     TYPE lvs_lvsme,
        lt_hard                      TYPE STANDARD TABLE OF ztwm001,
        tl_lqua                      TYPE STANDARD TABLE OF lqua,
        lv_aux                       TYPE lein_mgewi,
        lv_textauxp                  TYPE text50,
        lv_ancho                     TYPE lein_mgewi,
        lv_str                       TYPE string,
        lv_str2                      TYPE string,
        lv_aux_grama                 TYPE lqua_gesme,
        lv_aux_cost                  TYPE netwr,
        lv_int                       TYPE i,
        lv_aux_in                    TYPE bstmg,
        lv_unit_in                   TYPE gewei,
        lv_unit_out                  TYPE gewei,
**********        lv_aux_out   TYPE bstmg,
        lv_ua7(7),
        lv_lenum                     TYPE lenum,
        lv_qunit                     TYPE gewei,
        lv_datatype                  TYPE datatype_d.

  TYPES: BEGIN OF lot,
           matnr TYPE matnr,
           charg TYPE charg_d,
           lifnr TYPE mch1-lifnr,
           name1 TYPE lfa1-name1,
         END OF lot.

  DATA: t_lot TYPE SORTED TABLE OF lot WITH UNIQUE KEY matnr charg.

  SELECT * FROM ztwm001
    INTO TABLE lt_hard
    WHERE cprog = p_repid AND "sy-repid AND
          param2 = '01'.

  CLEAR: grg_tipo, grg_tipo[].
  LOOP AT lt_hard ASSIGNING FIELD-SYMBOL(<ls2>)
                                   WHERE param1 = 'PAP_MTART'
                                     AND valor1 = p_tpmat.
    CLEAR: ls_tipo.
    MOVE 'I' TO ls_tipo-sign.
    MOVE 'EQ' TO ls_tipo-option.
    MOVE <ls2>-param3  TO ls_tipo-low.
    IF ls_tipo IS NOT INITIAL.
      APPEND ls_tipo TO grg_tipo.
    ENDIF.
  ENDLOOP.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_lqua
    FROM lqua
   WHERE lgnum = p_lgnum AND
         werks = p_werks AND
         lgtyp IN s_lgtyp AND
         verme GT 0.

  IF gt_lqua[] IS NOT INITIAL.
    SELECT matnr INTO TABLE @DATA(tl_mara)
      FROM mara FOR ALL ENTRIES IN @gt_lqua
     WHERE matnr  = @gt_lqua-matnr
       AND mtart IN @grg_tipo.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: tl_mara, tl_mara[].
    ELSE.
      SORT tl_mara BY matnr.
      DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
    ENDIF.
  ENDIF.

  LOOP AT gt_lqua ASSIGNING FIELD-SYMBOL(<fs_lqua>).
    READ TABLE tl_mara INTO DATA(wl_mara) WITH KEY matnr = <fs_lqua>-matnr.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: <fs_lqua>-mandt, <fs_lqua>-lgnum, <fs_lqua>-lqnum.
    ENDIF.
  ENDLOOP.
  DELETE gt_lqua WHERE lqnum IS INITIAL.

  REFRESH: grg_rang.

  IF line_exists( lt_hard[ param1 = 'SUPPLIER_NAME' param3 = p_werks ] ). " cvivo - 65978 - proveedor en etiqueta BHS
    SELECT mch1~matnr mch1~charg mch1~lifnr lfa1~name1 FROM mch1
      INNER JOIN lfa1
      ON mch1~lifnr EQ lfa1~lifnr
      INTO CORRESPONDING FIELDS OF TABLE t_lot
      FOR ALL ENTRIES IN gt_lqua
      WHERE matnr EQ gt_lqua-matnr
        AND charg EQ gt_lqua-charg
        AND mch1~lifnr NE space.
  ENDIF.

  CLEAR: tl_lqua, tl_lqua[].
  LOOP AT gt_lqua ASSIGNING <fs_lqua>.
    CLEAR: wl_lqua.
    wl_lqua-lgnum = <fs_lqua>-lgnum.
    wl_lqua-matnr = <fs_lqua>-matnr.
    wl_lqua-werks = <fs_lqua>-werks.
    wl_lqua-verme = <fs_lqua>-verme.
    wl_lqua-gewei = <fs_lqua>-gewei.
    wl_lqua-lgort = <fs_lqua>-lgort.
    " cvivo - 62813 - Verificar si es compatible
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_werks    = wl_lqua-werks
        iv_matnr    = wl_lqua-matnr
      IMPORTING
        e_principal = DATA(l_principal)
      RECEIVING
        et_compat   = DATA(t_compat).

    IF t_compat IS NOT INITIAL AND l_principal IS INITIAL. " hay compatibles y éste no es el principal
      wl_lqua-matnr = t_compat[ principal = abap_true ]-matnr. " sustituyo por el principal
    ELSE.
      CLEAR: l_principal, t_compat, t_compat[].
    ENDIF.

    COLLECT wl_lqua INTO tl_lqua.
  ENDLOOP.
  gt_lqua[] = tl_lqua[].

  CLEAR: ls_data_pc, ls_action_pc, ls_choice_pc,
         ls_data_sc, ls_action_sc, ls_choice_sc.

  LOOP AT gt_lqua INTO DATA(ls_lqua).

    SELECT SINGLE * INTO ls_mara
      FROM mara
      WHERE matnr = ls_lqua-matnr.

    SELECT SINGLE mbew~matnr, mbew~bwkey, mbew~bwtar, mbew~verpr,
                  mbew~peinh, t001~waers
      INTO @DATA(ls_mbew)
      FROM t001w INNER JOIN mbew  ON t001w~bwkey = mbew~bwkey
            LEFT OUTER JOIN t001k ON mbew~bwkey  = t001k~bwkey
            LEFT OUTER JOIN t001  ON t001k~bukrs = t001~bukrs
     WHERE t001w~werks = @ls_lqua-werks
       AND mbew~matnr  = @ls_lqua-matnr
*       AND mbew~bwtar  = ''
       AND mbew~lvorm  = ''.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: ls_mbew.
    ENDIF.

*********************************************
**********  CABECERA DEL MENSAJE   **********
**********        (Inicio)         **********
**********                         **********
    AT FIRST.
      CLEAR: ls_ccstockcommanddata_pc.

* PRODUCTID 1 Type  CHAR  60
* WAREHOUSEID 1 Type  CHAR  100
* ERPMATERIALID 1 Type STRING

*      READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'MATERIALTYPE'.
*      IF sy-subrc EQ 0.
*        ls_CCSTOCKCOMMANDDATA_pc-materialtype = <h>-valor1.     " 'PAP' / 'COM'
*      ENDIF.
      ls_ccstockcommanddata_pc-materialtype = p_tpmat.          " 'PAP' / 'COM'

      IF p_tpmat = 'PAP'.
        READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'PAP_PARAMS'
                                                                param3 = p_werks.
        IF sy-subrc EQ 0.
          ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
          ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
        ENDIF.
      ELSEIF p_tpmat = 'COM'.
        READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'COM_PARAMS'
                                                  param3 = p_werks.
        IF sy-subrc EQ 0.
          ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
          ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
        ENDIF.
      ENDIF.

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_STCKCMD'.
      IF sy-subrc EQ 0.
        ls_ccstockcommanddata_pc-operation = <h>-valor1.
      ENDIF.

      PERFORM f_dame_fecha_hora CHANGING lv_str.
      ls_ccstockcommanddata_pc-eventdateforzerolevel = lv_str.

*      ls_CCSTOCKCOMMANDDATA_pc-erpmaterialid = ''.

      MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
      ls_ccstockcommand_pc-ccstockcommanddata = ls_ccstockcommanddata_pc.
*      APPEND ls_CCSTOCKCOMMAND_pc TO ls_choice_pc-CCSTOCKCOMMAND.
      ls_choice_pc-ccstockcommand = ls_ccstockcommand_pc.

      ls_ccstockcommanddata_sc = ls_ccstockcommanddata_pc.
      ls_ccstockcommand_sc-ccstockcommanddata = ls_ccstockcommanddata_sc.
*      APPEND ls_CCSTOCKCOMMAND_sc TO ls_choice_sc-CCSTOCKCOMMAND.
      ls_choice_sc-ccstockcommand = ls_ccstockcommand_sc.
    ENDAT.
**********                         **********
**********  CABECERA DEL MENSAJE   **********
**********        (Fin)            **********
*********************************************

*********************************************
**********    DATOS DE MATERIAL    **********
**********        (Inicio)         **********
**********                         **********
    CLEAR: ls_ccproductdata_pc.

* MATERIALMANAGEMENT    (STRING)
* GRADEID               (STRING)
* ARTICLEREF            (STRING)
* MAXSTOCKQUANTITY      (CONTENT-UNIT)

    PERFORM obtener_productid USING ls_mara
                                    ls_lqua-werks
                                    ls_ccstockcommanddata_pc-stockcommandid
                                    ls_lqua-lgort           "  '1000'
                              CHANGING lv_str
                                       lv_str2.
    ls_ccproductdata_pc-productid = lv_str.
    ls_ccproductdata_pc-paperid = lv_str2.
    IF ls_ccstockcommanddata_pc-materialtype NE 'PAP'.
      CLEAR: ls_ccproductdata_pc-paperid.
    ENDIF.

************************************************************************
***
***  ¡¡¡ PROVISIONAL !!! (Estos campos son obligatorios, hay que ver de
***                       dónde sacarlos)
***
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MATERIALMANAGEMENT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialmanagement = <h>-valor1.
    ENDIF.
**********
**********    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRADEID'.
**********    IF sy-subrc EQ 0.
**********      ls_CCPRODUCTDATA_pc-gradeid = <h>-valor1.
**********    ENDIF.
**********
**********    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'ARTICLEREF'.
**********    IF sy-subrc EQ 0.
**********      ls_CCPRODUCTDATA_pc-articleref = <h>-valor1.
**********    ENDIF.
***
************************************************************************

    ls_ccproductdata_pc-materialtype = ls_ccstockcommanddata_pc-materialtype.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'UNITID'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-unitid = <h>-valor1.
    ENDIF.

    ls_alv-width = ls_mara-zzancho * 1.
    CONDENSE ls_alv-width NO-GAPS.
    ls_ccproductdata_pc-materialwidth-content = ls_alv-width.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'WIDTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialwidth-unit = <h>-valor1.
      ls_alv-width_unit = <h>-valor1.
    ENDIF.

*    ls_CCPRODUCTDATA_pc-materiallength-content = ls_mara-zzlargo * 1.
*    condense ls_CCPRODUCTDATA_pc-materiallength-content no-gaps.
*    ls_alv-standardlength_txt = ls_CCPRODUCTDATA_pc-materiallength-content.
    lv_aux = ls_mara-zzlargo * 1.
    ls_alv-standardlength = ls_mara-zzlargo * 1.
    CONDENSE ls_alv-standardlength NO-GAPS.
    ls_ccproductdata_pc-materiallength-content = ls_alv-standardlength.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LENGTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materiallength-unit = <h>-valor1.
      ls_alv-standardlength_unit = <h>-valor1.
    ENDIF.

    CLEAR lv_aux_grama.
    IF ls_mara-zzgramaje IS NOT INITIAL.
*      lv_aux_grama = ls_mara-zzgramaje / 1000.
      lv_aux_grama = ls_mara-zzgramaje * 1.
      ls_alv-grammage_txt = ls_mara-zzgramaje * 1.
      CONDENSE ls_alv-grammage_txt NO-GAPS.
    ENDIF.
    ls_ccproductdata_pc-grammage-content = ls_alv-grammage_txt.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRAMMAGE_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-grammage-unit = <h>-valor1.
      ls_alv-grammage_unit = <h>-valor1.
    ENDIF.

*   Cálculo del Coste

***   De KG -> a M2 (para cálculo de Coste)
    lv_aux_in   = 1.
    lv_unit_in  = 'KG'.
    lv_unit_out = 'M2'.
**********    clear: lv_aux_out.
**********    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
**********      EXPORTING
**********        i_matnr              = ls_mbew-matnr
**********        i_in_me              = lv_unit_in
**********        i_out_me             = lv_unit_out
**********        i_menge              = lv_aux_in
**********      IMPORTING
**********        e_menge              = lv_aux_out
**********      EXCEPTIONS
**********        error_in_application = 1
**********        error                = 2
**********        OTHERS               = 3.

    IF ( ls_mbew-matnr IS NOT INITIAL ) AND ( ls_mbew-peinh NE 0 ) .
      lv_aux_grama = ls_mara-zzgramaje / 1000.
*      lv_aux_cost  = ( ls_mbew-VERPR * lv_aux_grama ) / ls_mbew-PEINH.
*      ls_alv-cost_txt = lv_aux_cost * 1.
      ls_alv-cost_txt = ( ls_mbew-verpr * lv_aux_grama ) / ( ls_mbew-peinh ) .
**********      IF lv_aux_out NE 0.
**********        ls_alv-cost_txt = ( ls_mbew-VERPR * lv_aux_grama ) / ( ls_mbew-PEINH * lv_aux_out ) .
**********      ELSE.
***********        ls_alv-cost_txt = ( ls_mbew-VERPR * lv_aux_grama ) / ls_mbew-PEINH.
**********        ls_alv-cost_txt = '0'.
**********      ENDIF.
      CONDENSE ls_alv-cost_txt NO-GAPS.
    ELSE.
      ls_alv-cost_txt = '0'.
    ENDIF.
    ls_ccproductdata_pc-cost-content = ls_alv-cost_txt.

*    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'COST_UNIT'.
*    IF sy-subrc EQ 0.
*      ls_CCPRODUCTDATA_pc-cost-unit = <h>-valor1.
*    ENDIF.
    CONCATENATE ls_mbew-waers '/m2' INTO ls_ccproductdata_pc-cost-unit.
*    ls_CCPRODUCTDATA_pc-cost-unit = ls_mbew-waers.
    ls_alv-cost_unit = ls_ccproductdata_pc-cost-unit.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LEADTIME'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-leadtime = <h>-valor1.
    ENDIF.

    IF ls_mara-mtart EQ 'ZPIM' OR ls_mara-mtart EQ 'ZPAH'.
      ls_ccproductdata_pc-preprint = 'YES'.
    ELSE.
      ls_ccproductdata_pc-preprint = 'NO'.
    ENDIF.

*    ls_CCPRODUCTDATA_pc-comments-content = ''.
    ls_ccproductdata_pc-comments = ''.
    ls_alv-comments = ls_ccproductdata_pc-comments.

****    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_MAT'.
****    IF sy-subrc EQ 0.
****      ls_CCPRODUCTDATA_pc-operation_mat = <h>-valor1.
****    ENDIF.
****    PERFORM f_dame_materialid USING ls_mara
****                                    ls_lqua-werks
****                              CHANGING ls_CCPRODUCTDATA_pc-materialid_mat.

***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-thickness100-content = <h>-valor1.
***      ls_alv-thickness100_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-thickness100-unit = <h>-valor1.
***      ls_alv-thickness100_unit = <h>-valor1.
***    ENDIF.

***    ls_CCPRODUCTDATA_pc-standardlength-content = ls_mara-zzlargo * 1.
***    condense ls_CCPRODUCTDATA_pc-standardlength-content no-gaps.
***    ls_alv-standardlength = ls_CCPRODUCTDATA_pc-standardlength-content.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'STANDARDLENGTH_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-standardlength-unit = <h>-valor1.
***      ls_alv-standardlength_unit = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-minstockquantity-content = <h>-valor1.
***      ls_alv-minstockquantity_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-minstockquantity-unit = <h>-valor1.
***      ls_alv-minstockquantity_unit = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-targetstockquantity-content = <h>-valor1.
***      ls_alv-targetstockquantity_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-targetstockquantity-unit = <h>-valor1.
***      ls_alv-targetstockquantity_unit = <h>-valor1.
***    ENDIF.
***
***    PERFORM f_get_white_top USING ls_mara-matkl CHANGING lv_str.
***    ls_CCPRODUCTDATA_pc-whitetop = lv_str.
***    ls_alv-whitetop = lv_str.
***
***    ls_CCPRODUCTDATA_pc-erpmaterialid = ''.
***

    MOVE-CORRESPONDING ls_ccproductdata_pc TO ls_alv.
    ls_ccproduct_pc-ccproductdata = ls_ccproductdata_pc.
    ls_ccproduct_pc-operation = ls_ccstockcommanddata_pc-operation.
**********    clear: ls_CCPRODUCT_pc-CCMATERIALMOVEMENT, ls_CCPRODUCT_pc-CCMATERIALMOVEMENT[].
*    APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct."7000060583


    ls_ccproductdata_sc = ls_ccproductdata_pc.
    ls_ccproduct_sc-ccproductdata = ls_ccproductdata_sc.
    ls_ccproduct_sc-operation = ls_ccstockcommanddata_sc-operation.
**********    clear: ls_CCPRODUCT_sc-CCMATERIALMOVEMENT, ls_CCPRODUCT_sc-CCMATERIALMOVEMENT[].
*    APPEND ls_ccproduct_sc TO ls_choice_sc-ccproduct."7000060583
**********                         **********
**********    DATOS DE MATERIAL    **********
**********          (Fin)          **********
*********************************************

*********************************************
********** MOVIMIENTOS DE MATERIAL **********
**********        (Inicio)         **********
**********                         **********

    CLEAR: ls_ccmaterialmovementdata_pc.

    ls_ccmaterialmovementdata_pc-stockcommandid = ls_ccstockcommanddata_pc-stockcommandid.

    ls_ccmaterialmovementdata_pc-productid = ls_ccproductdata_pc-productid.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'QUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-quantity-unit = <h>-valor1.
      ls_alv-quantity_unit = <h>-valor1.
    ENDIF.

    lv_qunit = ls_ccmaterialmovementdata_pc-quantity-unit.
    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
      EXPORTING
        input          = lv_qunit
      IMPORTING
        output         = lv_qunit
      EXCEPTIONS
        unit_not_found = 1
        OTHERS         = 2.

*   De KG -> a M
    PERFORM f_cambia_unidad USING ls_mara-matnr
                                  ls_lqua-verme
                                  ls_lqua-gewei
                                  lv_qunit
                                  ls_mara-zzancho
                            CHANGING lv_aux.
*********   el ancho viene en MM en la MARA, pasamos a M
********    lv_ancho = ls_mara-zzancho / 1000.
*********   M * Ancho(M) -> M2
********    lv_aux = lv_aux * lv_ancho.


********    ls_alv-quantity_txt = lv_aux * ls_mara-zzancho / 1000.
    ls_alv-quantity_txt = lv_aux * 1.
    CONDENSE ls_alv-quantity_txt NO-GAPS.
    ls_ccmaterialmovementdata_pc-quantity-content = ls_alv-quantity_txt.



********    write lv_aux to lv_textauxp LEFT-JUSTIFIED.
********    ls_CCMATERIALMOVEMENTDATA_pc-quantity-content = lv_textauxp.
********    condense ls_CCMATERIALMOVEMENTDATA_pc-quantity-content no-gaps.
********    ls_alv-quantity_txt = ls_CCMATERIALMOVEMENTDATA_pc-quantity-content.




    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'FROMWHID'.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-fromwhid = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'
                                              param3 = p_werks.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-towhid  = <h>-valor1.
    ENDIF.
**********    concatenate ls_lqua-lgnum ls_lqua-lgtyp into ls_CCMATERIALMOVEMENTDATA_pc-towhid.

    PERFORM f_dame_fecha_hora CHANGING lv_str.
    ls_ccmaterialmovementdata_pc-eventdate = lv_str.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MOVEMENTTYPE'.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-movementtype = <h>-valor1.     " En el viejo era 'I', ahora 'L'
    ENDIF.

    MOVE-CORRESPONDING ls_ccmaterialmovementdata_pc TO ls_alv.

    ls_ccmaterialmovement_pc-ccmaterialmovementdata = ls_ccmaterialmovementdata_pc.
    APPEND ls_ccmaterialmovement_pc TO ls_choice_pc-ccmaterialmovement.
**********    APPEND ls_CCMATERIALMOVEMENT_pc TO ls_CCPRODUCT_pc-CCMATERIALMOVEMENT.
    APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct.

    ls_ccmaterialmovementdata_sc = ls_ccmaterialmovementdata_pc.
    ls_ccmaterialmovement_sc-ccmaterialmovementdata = ls_ccmaterialmovementdata_sc.
    APPEND ls_ccmaterialmovement_sc TO ls_choice_sc-ccmaterialmovement.
**********    APPEND ls_CCMATERIALMOVEMENT_sc TO ls_CCPRODUCT_sc-CCMATERIALMOVEMENT.
    APPEND ls_ccproduct_sc TO ls_choice_sc-ccproduct.
**********                         **********
********** MOVIMIENTOS DE MATERIAL **********
**********         (Fin)           **********
*********************************************

    MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
    ls_alv-matnr = ls_mara-matnr.
*    ls_alv-lenum = ls_lqua-lenum.
*    ls_alv-tanum = ls_lqua-tanum.
    ls_alv-lgnum = ls_lqua-lgnum.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_alv-name =  <h>-valor1.
    ENDIF.


** >> JJR
**    CC_LOT_COMMAND
*    ls_cc_lot_command_pc-cclotcommanddata-lotcommandid = 1. "Fijo
*    ls_cc_lot_command_pc-cclotcommanddata-operation = 'Replace'. "fijo
*    IF p_tpmat = 'PAP'.
*      ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'PaperGroup'.
*    ELSEIF p_tpmat = 'COM'.
*      ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'StockCom'.
*    ENDIF.
*
**    CCLOT
*    ls_cclot_pc-cclotdata-lotid = ls_alv-charg. "Numero de lote
*
*    ls_cclot_pc-cclotdata-erpreference = ls_lqua-lenum. "Numero de UA del lote
**ls_cclot_pc-CCLOTDATA-LEAFQUANTITY "en m2. Conversion a m2 de la cantidad del lote
*    lv_unit_in  = 'KG'.
*    lv_unit_out = 'M2'.
*    DATA lv_aux_out TYPE ekpo-menge.
*    lv_aux_in = ls_lqua-verme.
*    CLEAR: lv_aux_out.
*    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*      EXPORTING
*        i_matnr              = ls_alv-matnr
*        i_in_me              = lv_unit_in
*        i_out_me             = lv_unit_out
*        i_menge              = lv_aux_in
*      IMPORTING
*        e_menge              = lv_aux_out
*      EXCEPTIONS
*        error_in_application = 1
*        error                = 2
*        OTHERS               = 3.
*
*    ls_cclot_pc-cclotdata-leafquantity-content  = lv_aux_out.
*    ls_cclot_pc-cclotdata-leafquantity-unit = lv_unit_out. "M2
*    ls_cclot_pc-cclotdata-length-CONTENT = ls_mara-zzlargo."Largo del material  ZZLARGO de MARA (vacio o 0 en ZPAP)
*    ls_cclot_pc-cclotdata-length-UNIT = 'MM'.
*    ls_cclot_pc-cclotdata-lotcommandid = 1. "fijo
***ls_cclot_pc-CCLOTDATA-OWNERSHIPSTATUS " A confirmar
***ls_cclot_pc-CCLOTDATA-PARENTLOTID "A confirmar
*    ls_cclot_pc-cclotdata-productid = ls_alv-matnr."Número de material
*    IF p_tpmat = 'PAP'.
*      ls_cclot_pc-cclotdata-stock_group_id = 'PaperGroup'.
*    ELSEIF p_tpmat = 'COM'.
*      ls_cclot_pc-cclotdata-stock_group_id = 'StockCom'.
*    ENDIF.
*
*    SELECT SINGLE licha
*      FROM mch1
*      INTO ls_cclot_pc-cclotdata-supplierlotid ""Número de lote proveedor
*      WHERE matnr = ls_alv-matnr AND
*            charg = ls_alv-charg.
*
*    SELECT ebeln, xblnr_mkpf, mblnr, mjahr UP TO 1 ROWS  FROM mseg INTO @DATA(ls_mseg)
*           WHERE bwart = '101' AND matnr = @ls_alv-matnr AND charg = @ls_alv-charg ORDER BY mjahr DESCENDING, mblnr DESCENDING. "Numero de pedido de compras
*      EXIT.
*    ENDSELECT.
*    ls_cclot_pc-cclotdata-supplierorderlineid = ls_mseg-ebeln.
*
*    ls_cclot_pc-cclotdata-delivery_note = ls_mseg-xblnr_mkpf."Nota de entrega de la EM
*    ls_cclot_pc-cclotdata-weight-content = ls_lqua-mgewi."Peso en Kg del lote
*    ls_cclot_pc-cclotdata-weight-unit = ls_lqua-gewei.
*    ls_cclot_pc-cclotdata-wh_id = ls_alv-lgnum. "numero de Almacen WM
*    ls_cclot_pc-cclotdata-width-content = ls_alv-width."ancho del material ZZANCHO/MARA
*    ls_cclot_pc-cclotdata-width-unit = 'MM'.
*
*    APPEND ls_cc_lot_command_pc TO ls_choice_pc-cc_lot_command.
*    APPEND ls_cclot_pc TO ls_choice_pc-cclot.
*
*
** << JJR

    APPEND ls_alv TO gt_data_2.
    CLEAR ls_alv.
  ENDLOOP.

  IF ls_choice_pc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_pc, ls_data_pc.
    ls_action_pc-action = ls_choice_pc.
    ls_action_pc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_pc-name =  <h>-valor1.
    ENDIF.
    ls_data_pc-mt_mat_move_new_format = ls_action_pc.
    gs_tab_omp_2_pacs = ls_data_pc.
  ENDIF.

  IF ls_choice_sc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_sc, ls_data_sc.
    ls_action_sc-action = ls_choice_sc.
    ls_action_sc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_sc-name =  <h>-valor1.
    ENDIF.
    ls_data_sc-mt_mat_move_new_format = ls_action_sc.
    gs_tab_omp_2_sc = ls_data_sc.
  ENDIF.

ENDFORM.

FORM obtener_productid USING i_mara      TYPE mara
                             i_werks     TYPE werks_d
                             i_option    TYPE string
                             i_lgort     TYPE lgort_d
                       CHANGING o_str    TYPE string
                                o_str2   TYPE string.

  DATA: lo_utils_interfaces TYPE REF TO zcl_utils_interfaces,
        lv_paperid_nav      TYPE char24,
        ls_matnr            TYPE zmatnr_external,
        lt_matnr            TYPE ztt_zmatnr_external.

  CLEAR: o_str, o_str2, ls_matnr, lt_matnr, lt_matnr[], lv_paperid_nav,
         lo_utils_interfaces.
  FREE: lo_utils_interfaces.

  IF i_werks = '2001' OR "PACS
     i_werks = '2000'. "cgijon - 22.08.23 - 7000055471, TICKET 78613 - XATIVA

    CONCATENATE i_mara-matkl i_mara-zzgramaje '/' i_mara-zzancho INTO o_str.
    CONCATENATE i_mara-matkl i_mara-zzgramaje INTO o_str2.

  ELSEIF i_werks = '2070'. "SAN CAYETANO

    lo_utils_interfaces = NEW zcl_utils_interfaces( ).
    IF ( lo_utils_interfaces IS NOT BOUND ).
*      RAISE e_sin_valor.
      EXIT.
    ENDIF.

**   Obtenemos material NAV
    lo_utils_interfaces->map_matnr_sap_2_nav(
      EXPORTING
        i_matnr                     = i_mara-matnr " Campo de texto, longitud 24
        i_werks                     = i_werks      " Centro
        i_lgort                     = i_lgort      " '1000'   " Almacén  --> Hardcodeamos, en principio no hará falta cambiarlo pero si hiciera crearemos lógica.
        i_omp_format                = abap_true
      RECEIVING
        e_t_matnr_nav               = lt_matnr     " Tabla de materiales Navision
      EXCEPTIONS
        no_value                    = 1
        internal_error              = 2
        no_valid_value              = 3
        OTHERS                      = 4
    ).

**   Obtenemos material
    IF ( lines( lt_matnr ) GT 0 ).
      "De momento obtenemos primer registro de la tabla.
      " si nos indican una lógica corregimos.
      READ TABLE lt_matnr INTO ls_matnr INDEX 1.
      o_str = ls_matnr.
*    ELSE.
*      RAISE no_material_found.
    ENDIF.

    IF ls_matnr IS NOT INITIAL.
**     Obtenemos material NAV
      lo_utils_interfaces->get_paperid_nav(
        EXPORTING
          i_matnr_nav                 = ls_matnr
        RECEIVING
          e_paperid_nav               = lv_paperid_nav
        EXCEPTIONS
          no_value                    = 1
          no_paperid                  = 2
          OTHERS                      = 3
      ).
      o_str2 = lv_paperid_nav.
    ENDIF.

    CLEAR: lo_utils_interfaces.
    FREE: lo_utils_interfaces.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_data_3 USING p_repid p_matnr p_werks p_lgnum p_tpmat
                  CHANGING gs_tab_omp_2_pacs.
  DATA: ls_dat_mat                   TYPE zdt_omp_mat_move_out_sap_to_o7,
        ls_action                    TYPE zdt_omp_mat_move_out_sap_to_o9,
        ls_message                   TYPE zdt_omp_mat_move_out_sap_to_o8,
        ls_data                      TYPE zmt_omp_mat_move_out_sap_to_om,
*** --> Inicio Estructuras para proxy nuevo PACS
        ls_data_pc                   TYPE zmt_mat_move_new_format,
        ls_action_pc                 TYPE zdt_mat_move_new_format,
        ls_choice_pc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_pc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_pc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_pc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_pc          TYPE zdt_mat_move_new_format_ccprod,
        ls_ccmaterialmovement_pc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_pc TYPE zdt_mat_move_new_format_ccmate,
        ls_cc_lot_command_pc         TYPE  zdt_mat_move_new_format_cc_lot, "JJR
        ls_cclot_pc                  TYPE zdt_mat_move_new_format_cclot,  "JJR
*** <-- Fin Estructuras para proxy nuevo PACS
*** --> Inicio Estructuras para proxy nuevo SAN CAYETANO
        ls_data_sc                   TYPE zmt_mat_move_new_format,
        ls_action_sc                 TYPE zdt_mat_move_new_format,
        ls_choice_sc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_sc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_sc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_sc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_sc          TYPE zdt_mat_move_new_format_ccprod,
        ls_ccmaterialmovement_sc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_sc TYPE zdt_mat_move_new_format_ccmate,
*** <-- Fin Estructuras para proxy nuevo SAN CAYETANO
        ls_alv                       TYPE tr_data_3,
        ls_tipo                      LIKE LINE OF grg_tipo,
        wl_lqua                      TYPE lqua,
        ls_mara                      TYPE mara,
        lv_lvsme                     TYPE lvs_lvsme,
        lt_hard                      TYPE STANDARD TABLE OF ztwm001,
        tl_lqua                      TYPE STANDARD TABLE OF lqua,
        lv_aux                       TYPE lein_mgewi,
        lv_textauxp                  TYPE text50,
        lv_ancho                     TYPE lein_mgewi,
        lv_str                       TYPE string,
        lv_str2                      TYPE string,
        lv_aux_grama                 TYPE lqua_gesme,
        lv_aux_cost                  TYPE netwr,
        lv_int                       TYPE i,
        lv_aux_in                    TYPE bstmg,
        lv_unit_in                   TYPE gewei,
        lv_unit_out                  TYPE gewei,
**********        lv_aux_out   TYPE bstmg,
        lv_ua7(7),
        lv_lenum                     TYPE lenum,
        lv_qunit                     TYPE gewei,
        lv_datatype                  TYPE datatype_d.

  TYPES: BEGIN OF lot,
           matnr TYPE matnr,
           charg TYPE charg_d,
           lifnr TYPE mch1-lifnr,
           name1 TYPE lfa1-name1,
         END OF lot.

  DATA: t_lot TYPE SORTED TABLE OF lot WITH UNIQUE KEY matnr charg.

  SELECT * FROM ztwm001
    INTO TABLE lt_hard
    WHERE cprog = p_repid AND "sy-repid AND
          param2 = '01'.

  CLEAR: grg_tipo, grg_tipo[].
  LOOP AT lt_hard ASSIGNING FIELD-SYMBOL(<ls2>)
                                   WHERE param1 = 'PAP_MTART'
                                     AND valor1 = p_tpmat.
    CLEAR: ls_tipo.
    MOVE 'I' TO ls_tipo-sign.
    MOVE 'EQ' TO ls_tipo-option.
    MOVE <ls2>-param3  TO ls_tipo-low.
    IF ls_tipo IS NOT INITIAL.
      APPEND ls_tipo TO grg_tipo.
    ENDIF.
  ENDLOOP.

* >> JJR 31.07.2023
  IF  p_matnr IS NOT INITIAL.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_lqua
      FROM lqua
     WHERE lgnum = p_lgnum AND
           werks = p_werks AND
           verme GT 0 AND
           matnr = p_matnr.
    IF gt_lqua[] IS NOT INITIAL.
      SELECT matnr INTO TABLE @DATA(tl_mara)
        FROM mara FOR ALL ENTRIES IN @gt_lqua
       WHERE matnr  = @gt_lqua-matnr.
      IF sy-subrc IS NOT INITIAL.
        CLEAR: tl_mara, tl_mara[].
      ELSE.
        SORT tl_mara BY matnr.
        DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
      ENDIF.
    ENDIF.
  ELSE.
* << JJR 31.07.2023
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_lqua
      FROM lqua
     WHERE lgnum = p_lgnum AND
           werks = p_werks AND
           lgtyp IN s_lgtyp AND
           verme GT 0.

    IF gt_lqua[] IS NOT INITIAL.
      SELECT matnr INTO TABLE tl_mara
        FROM mara FOR ALL ENTRIES IN gt_lqua
       WHERE matnr  = gt_lqua-matnr
         AND mtart IN grg_tipo.
      IF sy-subrc IS NOT INITIAL.
        CLEAR: tl_mara, tl_mara[].
      ELSE.
        SORT tl_mara BY matnr.
        DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
      ENDIF.
    ENDIF.
  ENDIF. "JJR 31.07.2023

  LOOP AT gt_lqua ASSIGNING FIELD-SYMBOL(<fs_lqua>).
    READ TABLE tl_mara INTO DATA(wl_mara) WITH KEY matnr = <fs_lqua>-matnr.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: <fs_lqua>-mandt, <fs_lqua>-lgnum, <fs_lqua>-lqnum.
    ENDIF.
  ENDLOOP.
  DELETE gt_lqua WHERE lqnum IS INITIAL.

  REFRESH: grg_rang.

  IF line_exists( lt_hard[ param1 = 'SUPPLIER_NAME' param3 = p_werks ] ). " cvivo - 65978 - proveedor en etiqueta BHS
    SELECT mch1~matnr mch1~charg mch1~lifnr lfa1~name1 FROM mch1
      INNER JOIN lfa1
      ON mch1~lifnr EQ lfa1~lifnr
      INTO CORRESPONDING FIELDS OF TABLE t_lot
      FOR ALL ENTRIES IN gt_lqua
      WHERE matnr EQ gt_lqua-matnr
        AND charg EQ gt_lqua-charg
        AND mch1~lifnr NE space.
  ENDIF.

  CLEAR: tl_lqua, tl_lqua[].
  LOOP AT gt_lqua ASSIGNING <fs_lqua>.
    CLEAR: wl_lqua.
    wl_lqua-lgnum = <fs_lqua>-lgnum.
    wl_lqua-matnr = <fs_lqua>-matnr.
    wl_lqua-werks = <fs_lqua>-werks.
    wl_lqua-verme = <fs_lqua>-verme.
    wl_lqua-gewei = <fs_lqua>-gewei.
    wl_lqua-lenum = <fs_lqua>-lenum. "JJR 31.07.2023
    wl_lqua-mgewi = <fs_lqua>-mgewi. "JJR 31.07.2023
    wl_lqua-lgort = <fs_lqua>-lgort.
    wl_lqua-charg = <fs_lqua>-charg. "JJR 31.07.2023
    wl_lqua-wenum = <fs_lqua>-wenum. "JJR 31.07.2023
    wl_lqua-wdatu = <fs_lqua>-wdatu. "JJR 31.07.2023
    " cvivo - 62813 - Verificar si es compatible
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_werks    = wl_lqua-werks
        iv_matnr    = wl_lqua-matnr
      IMPORTING
        e_principal = DATA(l_principal)
      RECEIVING
        et_compat   = DATA(t_compat).

    IF t_compat IS NOT INITIAL AND l_principal IS INITIAL. " hay compatibles y éste no es el principal
      wl_lqua-matnr = t_compat[ principal = abap_true ]-matnr. " sustituyo por el principal
    ELSE.
      CLEAR: l_principal, t_compat, t_compat[].
    ENDIF.

    COLLECT wl_lqua INTO tl_lqua.
  ENDLOOP.
  gt_lqua[] = tl_lqua[].

  CLEAR: ls_data_pc, ls_action_pc, ls_choice_pc,
         ls_data_sc, ls_action_sc, ls_choice_sc.

  LOOP AT gt_lqua INTO DATA(ls_lqua).

    SELECT SINGLE * INTO ls_mara
      FROM mara
      WHERE matnr = ls_lqua-matnr.

    SELECT SINGLE mbew~matnr, mbew~bwkey, mbew~bwtar, mbew~verpr,
                  mbew~peinh, t001~waers
      INTO @DATA(ls_mbew)
      FROM t001w INNER JOIN mbew  ON t001w~bwkey = mbew~bwkey
            LEFT OUTER JOIN t001k ON mbew~bwkey  = t001k~bwkey
            LEFT OUTER JOIN t001  ON t001k~bukrs = t001~bukrs
     WHERE t001w~werks = @ls_lqua-werks
       AND mbew~matnr  = @ls_lqua-matnr
*       AND mbew~bwtar  = ''
       AND mbew~lvorm  = ''.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: ls_mbew.
    ENDIF.

*********************************************
**********  CABECERA DEL MENSAJE   **********
**********        (Inicio)         **********
**********                         **********
    AT FIRST.
      CLEAR: ls_ccstockcommanddata_pc.

* PRODUCTID 1 Type  CHAR  60
* WAREHOUSEID 1 Type  CHAR  100
* ERPMATERIALID 1 Type STRING

*      READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'MATERIALTYPE'.
*      IF sy-subrc EQ 0.
*        ls_CCSTOCKCOMMANDDATA_pc-materialtype = <h>-valor1.     " 'PAP' / 'COM'
*      ENDIF.
      ls_ccstockcommanddata_pc-materialtype = p_tpmat.          " 'PAP' / 'COM'

      IF p_tpmat = 'PAP'.
        READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'PAP_PARAMS'
                                                                param3 = p_werks.
        IF sy-subrc EQ 0.
          ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
          ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
        ENDIF.
      ELSEIF p_tpmat = 'COM'.
        READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'COM_PARAMS'
                                                  param3 = p_werks.
        IF sy-subrc EQ 0.
          ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
          ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
        ENDIF.
      ENDIF.

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_STCKCMD'.
      IF sy-subrc EQ 0.
        ls_ccstockcommanddata_pc-operation = <h>-valor1.
      ENDIF.

      PERFORM f_dame_fecha_hora CHANGING lv_str.
      ls_ccstockcommanddata_pc-eventdateforzerolevel = lv_str.

*      ls_CCSTOCKCOMMANDDATA_pc-erpmaterialid = ''.

      MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
      ls_ccstockcommand_pc-ccstockcommanddata = ls_ccstockcommanddata_pc.
*      APPEND ls_CCSTOCKCOMMAND_pc TO ls_choice_pc-CCSTOCKCOMMAND.
      ls_choice_pc-ccstockcommand = ls_ccstockcommand_pc.

      ls_ccstockcommanddata_sc = ls_ccstockcommanddata_pc.
      ls_ccstockcommand_sc-ccstockcommanddata = ls_ccstockcommanddata_sc.
*      APPEND ls_CCSTOCKCOMMAND_sc TO ls_choice_sc-CCSTOCKCOMMAND.
      ls_choice_sc-ccstockcommand = ls_ccstockcommand_sc.
    ENDAT.
**********                         **********
**********  CABECERA DEL MENSAJE   **********
**********        (Fin)            **********
*********************************************

*********************************************
**********    DATOS DE MATERIAL    **********
**********        (Inicio)         **********
**********                         **********
    CLEAR: ls_ccproductdata_pc.

* MATERIALMANAGEMENT    (STRING)
* GRADEID               (STRING)
* ARTICLEREF            (STRING)
* MAXSTOCKQUANTITY      (CONTENT-UNIT)

    PERFORM obtener_productid USING ls_mara
                                    ls_lqua-werks
                                    ls_ccstockcommanddata_pc-stockcommandid
                                    ls_lqua-lgort           "  '1000'
                              CHANGING lv_str
                                       lv_str2.
    ls_ccproductdata_pc-productid = lv_str.
    ls_ccproductdata_pc-paperid = lv_str2.
    IF ls_ccstockcommanddata_pc-materialtype NE 'PAP'.
      CLEAR: ls_ccproductdata_pc-paperid.
    ENDIF.

************************************************************************
***
***  ¡¡¡ PROVISIONAL !!! (Estos campos son obligatorios, hay que ver de
***                       dónde sacarlos)
***
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MATERIALMANAGEMENT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialmanagement = <h>-valor1.
    ENDIF.
**********
**********    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRADEID'.
**********    IF sy-subrc EQ 0.
**********      ls_CCPRODUCTDATA_pc-gradeid = <h>-valor1.
**********    ENDIF.
**********
**********    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'ARTICLEREF'.
**********    IF sy-subrc EQ 0.
**********      ls_CCPRODUCTDATA_pc-articleref = <h>-valor1.
**********    ENDIF.
***
************************************************************************

    ls_ccproductdata_pc-materialtype = ls_ccstockcommanddata_pc-materialtype.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'UNITID'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-unitid = <h>-valor1.
    ENDIF.

    ls_alv-width = ls_mara-zzancho * 1.
    CONDENSE ls_alv-width NO-GAPS.
    ls_ccproductdata_pc-materialwidth-content = ls_alv-width.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'WIDTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialwidth-unit = <h>-valor1.
      ls_alv-width_unit = <h>-valor1.
    ENDIF.

*    ls_CCPRODUCTDATA_pc-materiallength-content = ls_mara-zzlargo * 1.
*    condense ls_CCPRODUCTDATA_pc-materiallength-content no-gaps.
*    ls_alv-standardlength_txt = ls_CCPRODUCTDATA_pc-materiallength-content.
    lv_aux = ls_mara-zzlargo * 1.
    ls_alv-standardlength = ls_mara-zzlargo * 1.
    CONDENSE ls_alv-standardlength NO-GAPS.
    ls_ccproductdata_pc-materiallength-content = ls_alv-standardlength.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LENGTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materiallength-unit = <h>-valor1.
      ls_alv-standardlength_unit = <h>-valor1.
    ENDIF.

    CLEAR lv_aux_grama.
    IF ls_mara-zzgramaje IS NOT INITIAL.
*      lv_aux_grama = ls_mara-zzgramaje / 1000.
      lv_aux_grama = ls_mara-zzgramaje * 1.
      ls_alv-grammage_txt = ls_mara-zzgramaje * 1.
      CONDENSE ls_alv-grammage_txt NO-GAPS.
    ENDIF.
    ls_ccproductdata_pc-grammage-content = ls_alv-grammage_txt.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRAMMAGE_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-grammage-unit = <h>-valor1.
      ls_alv-grammage_unit = <h>-valor1.
    ENDIF.

*   Cálculo del Coste

***   De KG -> a M2 (para cálculo de Coste)
    lv_aux_in   = 1.
    lv_unit_in  = 'KG'.
    lv_unit_out = 'M2'.
**********    clear: lv_aux_out.
**********    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
**********      EXPORTING
**********        i_matnr              = ls_mbew-matnr
**********        i_in_me              = lv_unit_in
**********        i_out_me             = lv_unit_out
**********        i_menge              = lv_aux_in
**********      IMPORTING
**********        e_menge              = lv_aux_out
**********      EXCEPTIONS
**********        error_in_application = 1
**********        error                = 2
**********        OTHERS               = 3.

    IF ( ls_mbew-matnr IS NOT INITIAL ) AND ( ls_mbew-peinh NE 0 ) .
      lv_aux_grama = ls_mara-zzgramaje / 1000.
*      lv_aux_cost  = ( ls_mbew-VERPR * lv_aux_grama ) / ls_mbew-PEINH.
*      ls_alv-cost_txt = lv_aux_cost * 1.
      ls_alv-cost_txt = ( ls_mbew-verpr * lv_aux_grama ) / ( ls_mbew-peinh ) .
**********      IF lv_aux_out NE 0.
**********        ls_alv-cost_txt = ( ls_mbew-VERPR * lv_aux_grama ) / ( ls_mbew-PEINH * lv_aux_out ) .
**********      ELSE.
***********        ls_alv-cost_txt = ( ls_mbew-VERPR * lv_aux_grama ) / ls_mbew-PEINH.
**********        ls_alv-cost_txt = '0'.
**********      ENDIF.
      CONDENSE ls_alv-cost_txt NO-GAPS.
    ELSE.
      ls_alv-cost_txt = '0'.
    ENDIF.
    ls_ccproductdata_pc-cost-content = ls_alv-cost_txt.

*    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'COST_UNIT'.
*    IF sy-subrc EQ 0.
*      ls_CCPRODUCTDATA_pc-cost-unit = <h>-valor1.
*    ENDIF.
    CONCATENATE ls_mbew-waers '/m2' INTO ls_ccproductdata_pc-cost-unit.
*    ls_CCPRODUCTDATA_pc-cost-unit = ls_mbew-waers.
    ls_alv-cost_unit = ls_ccproductdata_pc-cost-unit.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LEADTIME'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-leadtime = <h>-valor1.
    ENDIF.

    IF ls_mara-mtart EQ 'ZPIM' OR ls_mara-mtart EQ 'ZPAH'.
      ls_ccproductdata_pc-preprint = 'YES'.
    ELSE.
      ls_ccproductdata_pc-preprint = 'NO'.
    ENDIF.

*    ls_CCPRODUCTDATA_pc-comments-content = ''.
    ls_ccproductdata_pc-comments = ''.
    ls_alv-comments = ls_ccproductdata_pc-comments.

****    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_MAT'.
****    IF sy-subrc EQ 0.
****      ls_CCPRODUCTDATA_pc-operation_mat = <h>-valor1.
****    ENDIF.
****    PERFORM f_dame_materialid USING ls_mara
****                                    ls_lqua-werks
****                              CHANGING ls_CCPRODUCTDATA_pc-materialid_mat.

***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-thickness100-content = <h>-valor1.
***      ls_alv-thickness100_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-thickness100-unit = <h>-valor1.
***      ls_alv-thickness100_unit = <h>-valor1.
***    ENDIF.

***    ls_CCPRODUCTDATA_pc-standardlength-content = ls_mara-zzlargo * 1.
***    condense ls_CCPRODUCTDATA_pc-standardlength-content no-gaps.
***    ls_alv-standardlength = ls_CCPRODUCTDATA_pc-standardlength-content.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'STANDARDLENGTH_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-standardlength-unit = <h>-valor1.
***      ls_alv-standardlength_unit = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-minstockquantity-content = <h>-valor1.
***      ls_alv-minstockquantity_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-minstockquantity-unit = <h>-valor1.
***      ls_alv-minstockquantity_unit = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-targetstockquantity-content = <h>-valor1.
***      ls_alv-targetstockquantity_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-targetstockquantity-unit = <h>-valor1.
***      ls_alv-targetstockquantity_unit = <h>-valor1.
***    ENDIF.
***
***    PERFORM f_get_white_top USING ls_mara-matkl CHANGING lv_str.
***    ls_CCPRODUCTDATA_pc-whitetop = lv_str.
***    ls_alv-whitetop = lv_str.
***
***    ls_CCPRODUCTDATA_pc-erpmaterialid = ''.
***

    MOVE-CORRESPONDING ls_ccproductdata_pc TO ls_alv.
    ls_ccproduct_pc-ccproductdata = ls_ccproductdata_pc.
    ls_ccproduct_pc-operation = ls_ccstockcommanddata_pc-operation.
**********    clear: ls_CCPRODUCT_pc-CCMATERIALMOVEMENT, ls_CCPRODUCT_pc-CCMATERIALMOVEMENT[].
*    APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct.

    ls_ccproductdata_sc = ls_ccproductdata_pc.
    ls_ccproduct_sc-ccproductdata = ls_ccproductdata_sc.
    ls_ccproduct_sc-operation = ls_ccstockcommanddata_sc-operation.
**********    clear: ls_CCPRODUCT_sc-CCMATERIALMOVEMENT, ls_CCPRODUCT_sc-CCMATERIALMOVEMENT[].
*    APPEND ls_ccproduct_sc TO ls_choice_sc-ccproduct.
**********                         **********
**********    DATOS DE MATERIAL    **********
**********          (Fin)          **********
*********************************************

*********************************************
********** MOVIMIENTOS DE MATERIAL **********
**********        (Inicio)         **********
**********                         **********
    "cgijon - 24.04.24 - sat 7000060583, Ticket 82536
    "agrupamos por material los movimientos.

    CLEAR: ls_ccmaterialmovementdata_pc.

    ls_ccmaterialmovementdata_pc-stockcommandid = ls_ccstockcommanddata_pc-stockcommandid.

    ls_ccmaterialmovementdata_pc-productid = ls_ccproductdata_pc-productid.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'QUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-quantity-unit = <h>-valor1.
      ls_alv-quantity_unit = <h>-valor1.
    ENDIF.

    lv_qunit = ls_ccmaterialmovementdata_pc-quantity-unit.
    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
      EXPORTING
        input          = lv_qunit
      IMPORTING
        output         = lv_qunit
      EXCEPTIONS
        unit_not_found = 1
        OTHERS         = 2.

*   De KG -> a M
    PERFORM f_cambia_unidad USING ls_mara-matnr
                                  ls_lqua-verme
                                  ls_lqua-gewei
                                  lv_qunit
                                  ls_mara-zzancho
                            CHANGING lv_aux.

    ls_alv-quantity_txt = lv_aux * 1.
    CONDENSE ls_alv-quantity_txt NO-GAPS.
    ls_ccmaterialmovementdata_pc-quantity-content = ls_alv-quantity_txt.


    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'FROMWHID'.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-fromwhid = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'
                                              param3 = p_werks.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-towhid  = <h>-valor1.
    ENDIF.
**********    concatenate ls_lqua-lgnum ls_lqua-lgtyp into ls_CCMATERIALMOVEMENTDATA_pc-towhid.

    PERFORM f_dame_fecha_hora CHANGING lv_str.
    ls_ccmaterialmovementdata_pc-eventdate = lv_str.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MOVEMENTTYPE'.
    IF sy-subrc EQ 0.
      ls_ccmaterialmovementdata_pc-movementtype = <h>-valor1.     " En el viejo era 'I', ahora 'L'
    ENDIF.

    MOVE-CORRESPONDING ls_ccmaterialmovementdata_pc TO ls_alv.

    ls_ccmaterialmovement_pc-ccmaterialmovementdata = ls_ccmaterialmovementdata_pc.
    APPEND ls_ccmaterialmovement_pc TO ls_choice_pc-ccmaterialmovement.



**********    APPEND ls_CCMATERIALMOVEMENT_pc TO ls_CCPRODUCT_pc-CCMATERIALMOVEMENT.
    APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct.

    ls_ccmaterialmovementdata_sc = ls_ccmaterialmovementdata_pc.
    ls_ccmaterialmovement_sc-ccmaterialmovementdata = ls_ccmaterialmovementdata_sc.
    APPEND ls_ccmaterialmovement_sc TO ls_choice_sc-ccmaterialmovement.
**********    APPEND ls_CCMATERIALMOVEMENT_sc TO ls_CCPRODUCT_sc-CCMATERIALMOVEMENT.
    APPEND ls_ccproduct_sc TO ls_choice_sc-ccproduct.
**********                         **********
********** MOVIMIENTOS DE MATERIAL **********
**********         (Fin)           **********
*********************************************

    MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
    ls_alv-matnr = ls_mara-matnr.
*    ls_alv-lenum = ls_lqua-lenum.
*    ls_alv-tanum = ls_lqua-tanum.
    ls_alv-lgnum = ls_lqua-lgnum.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_alv-name =  <h>-valor1.
    ENDIF.
    ls_alv-charg = ls_lqua-charg. "25.07.2023

* >> JJR
*    CC_LOT_COMMAND
    ls_cc_lot_command_pc-cclotcommanddata-lotcommandid = 1. "Fijo
    ls_cc_lot_command_pc-cclotcommanddata-operation = 'Replace'. "fijo
    IF p_tpmat = 'PAP'.
      ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'PaperGroup'.
    ELSEIF p_tpmat = 'COM'.
      ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'StockCom'.
    ENDIF.

*    CCLOT
    ls_cclot_pc-operation = 'Replace'.
    ls_cclot_pc-cclotdata-lotid = ls_alv-charg. "Numero de lote

    ls_cclot_pc-cclotdata-erpreference = ls_lqua-lenum. "Numero de UA del lote
*ls_cclot_pc-CCLOTDATA-LEAFQUANTITY "en m2. Conversion a m2 de la cantidad del lote
    lv_unit_in  = 'KG'.
    lv_unit_out = 'M2'.
    DATA lv_aux_out TYPE ekpo-menge.
    lv_aux_in = ls_lqua-verme.
    CLEAR: lv_aux_out.
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = ls_alv-matnr
        i_in_me              = lv_unit_in
        i_out_me             = lv_unit_out
        i_menge              = lv_aux_in
      IMPORTING
        e_menge              = lv_aux_out
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.

    ls_cclot_pc-cclotdata-leafquantity-content  = lv_aux_out.

    TRANSLATE lv_unit_out TO LOWER CASE. "cgijon - 22.08.23 - 7000055471, TICKET 78613
    ls_cclot_pc-cclotdata-leafquantity-unit = lv_unit_out. "M2

    ls_cclot_pc-cclotdata-length-content = ls_mara-zzlargo."Largo del material  ZZLARGO de MARA (vacio o 0 en ZPAP)
    ls_cclot_pc-cclotdata-length-unit = 'mm'.
    ls_cclot_pc-cclotdata-lotcommandid = 1. "fijo
**ls_cclot_pc-CCLOTDATA-OWNERSHIPSTATUS " A confirmar
**ls_cclot_pc-CCLOTDATA-PARENTLOTID "A confirmar

*   ini cgijon - 22.08.23 - 7000055471, TICKET 78613
*    ls_cclot_pc-cclotdata-productid = ls_alv-matnr."Número de material
    ls_cclot_pc-cclotdata-productid = ls_ccproductdata_pc-productid."Número de material
*   fin cgijon - 22.08.23 - 7000055471, TICKET 78613

    IF p_tpmat = 'PAP'.
      ls_cclot_pc-cclotdata-stock_group_id = 'PaperGroup'.
    ELSEIF p_tpmat = 'COM'.
      ls_cclot_pc-cclotdata-stock_group_id = 'StockCom'.
    ENDIF.

    SELECT SINGLE licha
      FROM mch1
      INTO ls_cclot_pc-cclotdata-supplierlotid ""Número de lote proveedor
      WHERE matnr = ls_alv-matnr AND
            charg = ls_alv-charg.

    SELECT ebeln, xblnr_mkpf, mblnr, mjahr UP TO 1 ROWS  FROM mseg INTO @DATA(ls_mseg)
           WHERE bwart = '101' AND matnr = @ls_alv-matnr AND charg = @ls_alv-charg ORDER BY mjahr DESCENDING, mblnr DESCENDING. "Numero de pedido de compras
      EXIT.
    ENDSELECT.
    ls_cclot_pc-cclotdata-supplierorderlineid = ls_mseg-ebeln.

    ls_cclot_pc-cclotdata-delivery_note = ls_mseg-xblnr_mkpf."Nota de entrega de la EM
    ls_cclot_pc-cclotdata-weight-content = ls_lqua-mgewi."Peso en Kg del lote
    ls_cclot_pc-cclotdata-weight-unit = ls_lqua-gewei.
    TRANSLATE ls_cclot_pc-cclotdata-weight-unit TO LOWER CASE. "cgijon - 22.08.23 - 7000055471, TICKET 78613

    "ini cgijon - 22.08.23 - 7000055471, TICKET 78613
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'
                                              param3 = p_werks.
    IF sy-subrc = 0.
      ls_cclot_pc-cclotdata-wh_id = <h>-valor1.
    ENDIF.
*    ls_cclot_pc-cclotdata-wh_id = ls_alv-lgnum. "numero de Almacen WM carla.
    "fin cgijon - 22.08.23 - 7000055471, TICKET 78613

    ls_cclot_pc-cclotdata-width-content = ls_alv-width."ancho del material ZZANCHO/MARA
    ls_cclot_pc-cclotdata-width-unit = 'mm'.

*    APPEND ls_cc_lot_command_pc TO ls_choice_pc-cc_lot_command. "comentada linea cgijon - 22.08.23
    APPEND ls_cclot_pc TO ls_choice_pc-cclot.


* << JJR

    APPEND ls_alv TO gt_data_3.
    CLEAR ls_alv.
  ENDLOOP.

  APPEND ls_cc_lot_command_pc TO ls_choice_pc-cc_lot_command. "insertada linea cgijon - 22.08.23 -
  "7000055471, TICKET 78613

  IF ls_choice_pc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_pc, ls_data_pc.
    ls_action_pc-action = ls_choice_pc.
    ls_action_pc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_pc-name =  <h>-valor1.
    ENDIF.
    ls_data_pc-mt_mat_move_new_format = ls_action_pc.
    gs_tab_omp_2_pacs = ls_data_pc.
  ENDIF.

  IF ls_choice_sc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_sc, ls_data_sc.
    ls_action_sc-action = ls_choice_sc.
    ls_action_sc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_sc-name =  <h>-valor1.
    ENDIF.
    ls_data_sc-mt_mat_move_new_format = ls_action_sc.
    gs_tab_omp_2_sc = ls_data_sc.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA_4
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SY_REPID  text
*      -->P_P_MATNR  text
*      -->P_P_WERKS  text
*      -->P_P_LGNUM  text
*      -->P_P_TPMAT  text
*      <--P_GS_TAB_OMP_2_PACS  text
*----------------------------------------------------------------------*
FORM f_get_data_4  USING p_repid p_matnr p_werks p_lgnum p_tpmat
                  CHANGING gs_tab_omp_2_pacs.
  DATA: ls_dat_mat                   TYPE zdt_omp_mat_move_out_sap_to_o7,
        ls_action                    TYPE zdt_omp_mat_move_out_sap_to_o9,
        ls_message                   TYPE zdt_omp_mat_move_out_sap_to_o8,
        ls_data                      TYPE zmt_omp_mat_move_out_sap_to_om,
*** --> Inicio Estructuras para proxy nuevo PACS
        ls_data_pc                   TYPE zmt_mat_move_new_format,
        ls_action_pc                 TYPE zdt_mat_move_new_format,
        ls_choice_pc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_pc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_pc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_pc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_pc          TYPE zdt_mat_move_new_format_ccprod,
        ls_ccmaterialmovement_pc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_pc TYPE zdt_mat_move_new_format_ccmate,
        ls_cc_lot_command_pc         TYPE  zdt_mat_move_new_format_cc_lot, "JJR
        ls_cclot_pc                  TYPE zdt_mat_move_new_format_cclot,  "JJR
*** <-- Fin Estructuras para proxy nuevo PACS
*** --> Inicio Estructuras para proxy nuevo SAN CAYETANO
        ls_data_sc                   TYPE zmt_mat_move_new_format,
        ls_action_sc                 TYPE zdt_mat_move_new_format,
        ls_choice_sc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_sc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_sc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_sc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_sc          TYPE zdt_mat_move_new_format_ccprod,
        ls_ccmaterialmovement_sc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_sc TYPE zdt_mat_move_new_format_ccmate,
*** <-- Fin Estructuras para proxy nuevo SAN CAYETANO
        ls_alv                       TYPE tr_data_3,
        ls_tipo                      LIKE LINE OF grg_tipo,
        wl_lqua                      TYPE lqua,
        ls_mara                      TYPE mara,
        lv_lvsme                     TYPE lvs_lvsme,
        lt_hard                      TYPE STANDARD TABLE OF ztwm001,
        tl_lqua                      TYPE STANDARD TABLE OF lqua,
        lv_aux                       TYPE lein_mgewi,
        lv_textauxp                  TYPE text50,
        lv_ancho                     TYPE lein_mgewi,
        lv_str                       TYPE string,
        lv_str2                      TYPE string,
        lv_aux_grama                 TYPE lqua_gesme,
        lv_aux_cost                  TYPE netwr,
        lv_int                       TYPE i,
        lv_aux_in                    TYPE bstmg,
        lv_unit_in                   TYPE gewei,
        lv_unit_out                  TYPE gewei,
**********        lv_aux_out   TYPE bstmg,
        lv_ua7(7),
        lv_lenum                     TYPE lenum,
        lv_qunit                     TYPE gewei,
        lv_datatype                  TYPE datatype_d.

  TYPES: BEGIN OF lot,
           matnr TYPE matnr,
           charg TYPE charg_d,
           lifnr TYPE mch1-lifnr,
           name1 TYPE lfa1-name1,
         END OF lot.

  DATA: t_lot TYPE SORTED TABLE OF lot WITH UNIQUE KEY matnr charg.

  SELECT * FROM ztwm001
    INTO TABLE lt_hard
    WHERE cprog = p_repid AND "sy-repid AND
          param2 = '01'.

  CLEAR: grg_tipo, grg_tipo[].
  LOOP AT lt_hard ASSIGNING FIELD-SYMBOL(<ls2>)
                                   WHERE param1 = 'PAP_MTART'
                                     AND valor1 = p_tpmat.
    CLEAR: ls_tipo.
    MOVE 'I' TO ls_tipo-sign.
    MOVE 'EQ' TO ls_tipo-option.
    MOVE <ls2>-param3  TO ls_tipo-low.
    IF ls_tipo IS NOT INITIAL.
      APPEND ls_tipo TO grg_tipo.
    ENDIF.
  ENDLOOP.

* >> JJR 31.07.2023
  IF  p_matnr IS NOT INITIAL.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_lqua
      FROM lqua
     WHERE lgnum = p_lgnum AND
           werks = p_werks AND
           verme GT 0 AND
           matnr = p_matnr.
    IF gt_lqua[] IS NOT INITIAL.
      SELECT matnr INTO TABLE @DATA(tl_mara)
        FROM mara FOR ALL ENTRIES IN @gt_lqua
       WHERE matnr  = @gt_lqua-matnr.
      IF sy-subrc IS NOT INITIAL.
        CLEAR: tl_mara, tl_mara[].
      ELSE.
        SORT tl_mara BY matnr.
        DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
      ENDIF.
    ENDIF.
  ELSE.
* << JJR 31.07.2023
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_lqua
      FROM lqua
     WHERE lgnum = p_lgnum AND
           werks = p_werks AND
           lgtyp IN s_lgtyp AND
           verme GT 0.

    IF gt_lqua[] IS NOT INITIAL.
      SELECT matnr INTO TABLE tl_mara
        FROM mara FOR ALL ENTRIES IN gt_lqua
       WHERE matnr  = gt_lqua-matnr
         AND mtart IN grg_tipo.
      IF sy-subrc IS NOT INITIAL.
        CLEAR: tl_mara, tl_mara[].
      ELSE.
        SORT tl_mara BY matnr.
        DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
      ENDIF.
    ENDIF.
  ENDIF. "JJR 31.07.2023

  LOOP AT gt_lqua ASSIGNING FIELD-SYMBOL(<fs_lqua>).
    READ TABLE tl_mara INTO DATA(wl_mara) WITH KEY matnr = <fs_lqua>-matnr.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: <fs_lqua>-mandt, <fs_lqua>-lgnum, <fs_lqua>-lqnum.
    ENDIF.
  ENDLOOP.
  DELETE gt_lqua WHERE lqnum IS INITIAL.

  REFRESH: grg_rang.

  IF line_exists( lt_hard[ param1 = 'SUPPLIER_NAME' param3 = p_werks ] ). " cvivo - 65978 - proveedor en etiqueta BHS
    SELECT mch1~matnr mch1~charg mch1~lifnr lfa1~name1 FROM mch1
      INNER JOIN lfa1
      ON mch1~lifnr EQ lfa1~lifnr
      INTO CORRESPONDING FIELDS OF TABLE t_lot
      FOR ALL ENTRIES IN gt_lqua
      WHERE matnr EQ gt_lqua-matnr
        AND charg EQ gt_lqua-charg
        AND mch1~lifnr NE space.
  ENDIF.

  CLEAR: tl_lqua, tl_lqua[].
  LOOP AT gt_lqua ASSIGNING <fs_lqua>.
    CLEAR: wl_lqua.
    wl_lqua-lgnum = <fs_lqua>-lgnum.
    wl_lqua-matnr = <fs_lqua>-matnr.
    wl_lqua-werks = <fs_lqua>-werks.
    wl_lqua-verme = <fs_lqua>-verme.
    wl_lqua-gewei = <fs_lqua>-gewei.
    wl_lqua-lenum = <fs_lqua>-lenum. "JJR 31.07.2023
    wl_lqua-mgewi = <fs_lqua>-mgewi. "JJR 31.07.2023
    wl_lqua-lgort = <fs_lqua>-lgort.
    wl_lqua-charg = <fs_lqua>-charg. "JJR 31.07.2023
    wl_lqua-wenum = <fs_lqua>-wenum. "JJR 31.07.2023
    wl_lqua-wdatu = <fs_lqua>-wdatu. "JJR 31.07.2023
    " cvivo - 62813 - Verificar si es compatible
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_werks    = wl_lqua-werks
        iv_matnr    = wl_lqua-matnr
      IMPORTING
        e_principal = DATA(l_principal)
      RECEIVING
        et_compat   = DATA(t_compat).

    IF t_compat IS NOT INITIAL AND l_principal IS INITIAL. " hay compatibles y éste no es el principal
      wl_lqua-matnr = t_compat[ principal = abap_true ]-matnr. " sustituyo por el principal
    ELSE.
      CLEAR: l_principal, t_compat, t_compat[].
    ENDIF.

    COLLECT wl_lqua INTO tl_lqua.
  ENDLOOP.
  gt_lqua[] = tl_lqua[].

  CLEAR: ls_data_pc, ls_action_pc, ls_choice_pc,
         ls_data_sc, ls_action_sc, ls_choice_sc.

  LOOP AT gt_lqua INTO DATA(ls_lqua).

    SELECT SINGLE * INTO ls_mara
      FROM mara
      WHERE matnr = ls_lqua-matnr.

    SELECT SINGLE mbew~matnr, mbew~bwkey, mbew~bwtar, mbew~verpr,
                  mbew~peinh, t001~waers
      INTO @DATA(ls_mbew)
      FROM t001w INNER JOIN mbew  ON t001w~bwkey = mbew~bwkey
            LEFT OUTER JOIN t001k ON mbew~bwkey  = t001k~bwkey
            LEFT OUTER JOIN t001  ON t001k~bukrs = t001~bukrs
     WHERE t001w~werks = @ls_lqua-werks
       AND mbew~matnr  = @ls_lqua-matnr
*       AND mbew~bwtar  = ''
       AND mbew~lvorm  = ''.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: ls_mbew.
    ENDIF.

*********************************************
**********  CABECERA DEL MENSAJE   **********
**********        (Inicio)         **********
**********                         **********
    AT FIRST.
      CLEAR: ls_ccstockcommanddata_pc.

      ls_ccstockcommanddata_pc-materialtype = p_tpmat.          " 'PAP' / 'COM'

      IF p_tpmat = 'PAP'.
        READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'PAP_PARAMS'
                                                                param3 = p_werks.
        IF sy-subrc EQ 0.
          ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
          ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
        ENDIF.
      ELSEIF p_tpmat = 'COM'.
        READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'COM_PARAMS'
                                                  param3 = p_werks.
        IF sy-subrc EQ 0.
          ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
          ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
        ENDIF.
      ENDIF.

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_STCKCMD'.
      IF sy-subrc EQ 0.
        ls_ccstockcommanddata_pc-operation = <h>-valor1.
      ENDIF.

      PERFORM f_dame_fecha_hora CHANGING lv_str.
      ls_ccstockcommanddata_pc-eventdateforzerolevel = lv_str.

*      ls_CCSTOCKCOMMANDDATA_pc-erpmaterialid = ''.

      MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
      ls_ccstockcommand_pc-ccstockcommanddata = ls_ccstockcommanddata_pc.
*      APPEND ls_CCSTOCKCOMMAND_pc TO ls_choice_pc-CCSTOCKCOMMAND.
      ls_choice_pc-ccstockcommand = ls_ccstockcommand_pc.

      ls_ccstockcommanddata_sc = ls_ccstockcommanddata_pc.
      ls_ccstockcommand_sc-ccstockcommanddata = ls_ccstockcommanddata_sc.
*      APPEND ls_CCSTOCKCOMMAND_sc TO ls_choice_sc-CCSTOCKCOMMAND.
      ls_choice_sc-ccstockcommand = ls_ccstockcommand_sc.
    ENDAT.
**********                         **********
**********  CABECERA DEL MENSAJE   **********
**********        (Fin)            **********
*********************************************

*********************************************
**********    DATOS DE MATERIAL    **********
**********        (Inicio)         **********
**********                         **********
    CLEAR: ls_ccproductdata_pc.

* MATERIALMANAGEMENT    (STRING)
* GRADEID               (STRING)
* ARTICLEREF            (STRING)
* MAXSTOCKQUANTITY      (CONTENT-UNIT)

    PERFORM obtener_productid USING ls_mara
                                    ls_lqua-werks
                                    ls_ccstockcommanddata_pc-stockcommandid
                                    ls_lqua-lgort           "  '1000'
                              CHANGING lv_str
                                       lv_str2.
    ls_ccproductdata_pc-productid = lv_str.
    ls_ccproductdata_pc-paperid = lv_str2.
    IF ls_ccstockcommanddata_pc-materialtype NE 'PAP'.
      CLEAR: ls_ccproductdata_pc-paperid.
    ENDIF.

************************************************************************
***
***  ¡¡¡ PROVISIONAL !!! (Estos campos son obligatorios, hay que ver de
***                       dónde sacarlos)
***
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MATERIALMANAGEMENT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialmanagement = <h>-valor1.
    ENDIF.
**********
**********    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRADEID'.
**********    IF sy-subrc EQ 0.
**********      ls_CCPRODUCTDATA_pc-gradeid = <h>-valor1.
**********    ENDIF.
**********
**********    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'ARTICLEREF'.
**********    IF sy-subrc EQ 0.
**********      ls_CCPRODUCTDATA_pc-articleref = <h>-valor1.
**********    ENDIF.
***
************************************************************************

    ls_ccproductdata_pc-materialtype = ls_ccstockcommanddata_pc-materialtype.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'UNITID'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-unitid = <h>-valor1.
    ENDIF.

    ls_alv-width = ls_mara-zzancho * 1.
    CONDENSE ls_alv-width NO-GAPS.
    ls_ccproductdata_pc-materialwidth-content = ls_alv-width.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'WIDTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialwidth-unit = <h>-valor1.
      ls_alv-width_unit = <h>-valor1.
    ENDIF.

*    ls_CCPRODUCTDATA_pc-materiallength-content = ls_mara-zzlargo * 1.
*    condense ls_CCPRODUCTDATA_pc-materiallength-content no-gaps.
*    ls_alv-standardlength_txt = ls_CCPRODUCTDATA_pc-materiallength-content.
    lv_aux = ls_mara-zzlargo * 1.
    ls_alv-standardlength = ls_mara-zzlargo * 1.
    CONDENSE ls_alv-standardlength NO-GAPS.
    ls_ccproductdata_pc-materiallength-content = ls_alv-standardlength.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LENGTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materiallength-unit = <h>-valor1.
      ls_alv-standardlength_unit = <h>-valor1.
    ENDIF.

    CLEAR lv_aux_grama.
    IF ls_mara-zzgramaje IS NOT INITIAL.
*      lv_aux_grama = ls_mara-zzgramaje / 1000.
      lv_aux_grama = ls_mara-zzgramaje * 1.
      ls_alv-grammage_txt = ls_mara-zzgramaje * 1.
      CONDENSE ls_alv-grammage_txt NO-GAPS.
    ENDIF.
    ls_ccproductdata_pc-grammage-content = ls_alv-grammage_txt.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRAMMAGE_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-grammage-unit = <h>-valor1.
      ls_alv-grammage_unit = <h>-valor1.
    ENDIF.

*   Cálculo del Coste

***   De KG -> a M2 (para cálculo de Coste)
    lv_aux_in   = 1.
    lv_unit_in  = 'KG'.
    lv_unit_out = 'M2'.
**********    clear: lv_aux_out.
**********    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
**********      EXPORTING
**********        i_matnr              = ls_mbew-matnr
**********        i_in_me              = lv_unit_in
**********        i_out_me             = lv_unit_out
**********        i_menge              = lv_aux_in
**********      IMPORTING
**********        e_menge              = lv_aux_out
**********      EXCEPTIONS
**********        error_in_application = 1
**********        error                = 2
**********        OTHERS               = 3.

    IF ( ls_mbew-matnr IS NOT INITIAL ) AND ( ls_mbew-peinh NE 0 ) .
      lv_aux_grama = ls_mara-zzgramaje / 1000.
*      lv_aux_cost  = ( ls_mbew-VERPR * lv_aux_grama ) / ls_mbew-PEINH.
*      ls_alv-cost_txt = lv_aux_cost * 1.
      ls_alv-cost_txt = ( ls_mbew-verpr * lv_aux_grama ) / ( ls_mbew-peinh ) .
**********      IF lv_aux_out NE 0.
**********        ls_alv-cost_txt = ( ls_mbew-VERPR * lv_aux_grama ) / ( ls_mbew-PEINH * lv_aux_out ) .
**********      ELSE.
***********        ls_alv-cost_txt = ( ls_mbew-VERPR * lv_aux_grama ) / ls_mbew-PEINH.
**********        ls_alv-cost_txt = '0'.
**********      ENDIF.
      CONDENSE ls_alv-cost_txt NO-GAPS.
    ELSE.
      ls_alv-cost_txt = '0'.
    ENDIF.
    ls_ccproductdata_pc-cost-content = ls_alv-cost_txt.

*    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'COST_UNIT'.
*    IF sy-subrc EQ 0.
*      ls_CCPRODUCTDATA_pc-cost-unit = <h>-valor1.
*    ENDIF.
    CONCATENATE ls_mbew-waers '/m2' INTO ls_ccproductdata_pc-cost-unit.
*    ls_CCPRODUCTDATA_pc-cost-unit = ls_mbew-waers.
    ls_alv-cost_unit = ls_ccproductdata_pc-cost-unit.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LEADTIME'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-leadtime = <h>-valor1.
    ENDIF.

    IF ls_mara-mtart EQ 'ZPIM' OR ls_mara-mtart EQ 'ZPAH'.
      ls_ccproductdata_pc-preprint = 'YES'.
    ELSE.
      ls_ccproductdata_pc-preprint = 'NO'.
    ENDIF.

*    ls_CCPRODUCTDATA_pc-comments-content = ''.
    ls_ccproductdata_pc-comments = ''.
    ls_alv-comments = ls_ccproductdata_pc-comments.

****    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_MAT'.
****    IF sy-subrc EQ 0.
****      ls_CCPRODUCTDATA_pc-operation_mat = <h>-valor1.
****    ENDIF.
****    PERFORM f_dame_materialid USING ls_mara
****                                    ls_lqua-werks
****                              CHANGING ls_CCPRODUCTDATA_pc-materialid_mat.

***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-thickness100-content = <h>-valor1.
***      ls_alv-thickness100_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-thickness100-unit = <h>-valor1.
***      ls_alv-thickness100_unit = <h>-valor1.
***    ENDIF.

***    ls_CCPRODUCTDATA_pc-standardlength-content = ls_mara-zzlargo * 1.
***    condense ls_CCPRODUCTDATA_pc-standardlength-content no-gaps.
***    ls_alv-standardlength = ls_CCPRODUCTDATA_pc-standardlength-content.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'STANDARDLENGTH_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-standardlength-unit = <h>-valor1.
***      ls_alv-standardlength_unit = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-minstockquantity-content = <h>-valor1.
***      ls_alv-minstockquantity_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-minstockquantity-unit = <h>-valor1.
***      ls_alv-minstockquantity_unit = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-targetstockquantity-content = <h>-valor1.
***      ls_alv-targetstockquantity_txt = <h>-valor1.
***    ENDIF.
***
***    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY_UNIT'.
***    IF sy-subrc EQ 0.
***      ls_CCPRODUCTDATA_pc-targetstockquantity-unit = <h>-valor1.
***      ls_alv-targetstockquantity_unit = <h>-valor1.
***    ENDIF.
***
***    PERFORM f_get_white_top USING ls_mara-matkl CHANGING lv_str.
***    ls_CCPRODUCTDATA_pc-whitetop = lv_str.
***    ls_alv-whitetop = lv_str.
***
***    ls_CCPRODUCTDATA_pc-erpmaterialid = ''.
***

    MOVE-CORRESPONDING ls_ccproductdata_pc TO ls_alv.
    ls_ccproduct_pc-ccproductdata = ls_ccproductdata_pc.
    ls_ccproduct_pc-operation = ls_ccstockcommanddata_pc-operation.
**********    clear: ls_CCPRODUCT_pc-CCMATERIALMOVEMENT, ls_CCPRODUCT_pc-CCMATERIALMOVEMENT[].
*    APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct.

    ls_ccproductdata_sc = ls_ccproductdata_pc.
    ls_ccproduct_sc-ccproductdata = ls_ccproductdata_sc.
    ls_ccproduct_sc-operation = ls_ccstockcommanddata_sc-operation.
**********                         **********
**********    DATOS DE MATERIAL    **********
**********          (Fin)          **********
*********************************************

********************************************
********* MOVIMIENTOS DE MATERIAL **********
*********        (Inicio)         **********
*********                         **********

    "ini cgijon - sat 7000060583, Ticket 82536 - totalizamos los movientos por material
    DATA: lt_ccmaterialmovement TYPE zdt_mat_move_new_format_cc_tab,
          lv_new                TYPE xfeld.

*    CLEAR: lv_new.
    IF ls_choice_pc-ccmaterialmovement[] IS NOT INITIAL.
      lt_ccmaterialmovement[] = ls_choice_pc-ccmaterialmovement[].
      LOOP AT lt_ccmaterialmovement INTO DATA(wa_ccmaterialmovement).
        IF wa_ccmaterialmovement-ccmaterialmovementdata-productid = ls_ccproductdata_pc-productid.
          DATA(lv_index) = sy-tabix.

          ls_ccmaterialmovementdata_pc = wa_ccmaterialmovement-ccmaterialmovementdata.

          DATA: lv_menge TYPE lein_mgewi.
*          lv_menge = wa_ccmaterialmovement-ccmaterialmovementdata-quantity-content.

          "De KG -> a M
          PERFORM f_cambia_unidad USING ls_mara-matnr
                                        ls_lqua-verme
                                        ls_lqua-gewei
                                        lv_qunit
                                        ls_mara-zzancho
                                  CHANGING lv_aux.

          lv_menge = lv_menge + ( lv_aux * 1 ).
          ls_alv-quantity_txt = lv_menge.
          CONDENSE ls_alv-quantity_txt NO-GAPS.
          ls_ccmaterialmovementdata_pc-quantity-content = ls_alv-quantity_txt.

          ls_ccmaterialmovement_pc-ccmaterialmovementdata = ls_ccmaterialmovementdata_pc.

          DELETE ls_choice_pc-ccmaterialmovement INDEX lv_index.
          APPEND ls_ccmaterialmovement_pc TO ls_choice_pc-ccmaterialmovement.

          APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct.

          ls_ccmaterialmovementdata_sc = ls_ccmaterialmovementdata_pc.
          ls_ccmaterialmovement_sc-ccmaterialmovementdata = ls_ccmaterialmovementdata_sc.

          DELETE ls_choice_sc-ccmaterialmovement INDEX lv_index.
          APPEND ls_ccmaterialmovement_sc TO ls_choice_sc-ccmaterialmovement.

          APPEND ls_ccproduct_sc TO ls_choice_sc-ccproduct.
        ELSE.
          lv_new = 'X'.
        ENDIF.
      ENDLOOP.
    ELSE.
      lv_new = 'X'.
    ENDIF.
    "fin cgijon - sat 7000060583, Ticket 82536

    IF lv_new = 'X'.
      CLEAR: ls_ccmaterialmovementdata_pc.

      ls_ccmaterialmovementdata_pc-stockcommandid = ls_ccstockcommanddata_pc-stockcommandid.

      ls_ccmaterialmovementdata_pc-productid = ls_ccproductdata_pc-productid.

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'QUANTITY_UNIT'.
      IF sy-subrc EQ 0.
        ls_ccmaterialmovementdata_pc-quantity-unit = <h>-valor1.
        ls_alv-quantity_unit = <h>-valor1.
      ENDIF.

      lv_qunit = ls_ccmaterialmovementdata_pc-quantity-unit.
      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
        EXPORTING
          input          = lv_qunit
        IMPORTING
          output         = lv_qunit
        EXCEPTIONS
          unit_not_found = 1
          OTHERS         = 2.

*   De KG -> a M
      PERFORM f_cambia_unidad USING ls_mara-matnr
                                    ls_lqua-verme
                                    ls_lqua-gewei
                                    lv_qunit
                                    ls_mara-zzancho
                              CHANGING lv_aux.

      ls_alv-quantity_txt = lv_aux * 1.
      CONDENSE ls_alv-quantity_txt NO-GAPS.
      ls_ccmaterialmovementdata_pc-quantity-content = ls_alv-quantity_txt.

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'FROMWHID'.
      IF sy-subrc EQ 0.
        ls_ccmaterialmovementdata_pc-fromwhid = <h>-valor1.
      ENDIF.

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'
                                                param3 = p_werks.
      IF sy-subrc EQ 0.
        ls_ccmaterialmovementdata_pc-towhid  = <h>-valor1.
      ENDIF.

      PERFORM f_dame_fecha_hora CHANGING lv_str.
      ls_ccmaterialmovementdata_pc-eventdate = lv_str.

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MOVEMENTTYPE'.
      IF sy-subrc EQ 0.
        ls_ccmaterialmovementdata_pc-movementtype = <h>-valor1.     " En el viejo era 'I', ahora 'L'
      ENDIF.

      ls_ccmaterialmovement_pc-ccmaterialmovementdata = ls_ccmaterialmovementdata_pc.
      APPEND ls_ccmaterialmovement_pc TO ls_choice_pc-ccmaterialmovement.

      APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct.

      ls_ccmaterialmovementdata_sc = ls_ccmaterialmovementdata_pc.
      ls_ccmaterialmovement_sc-ccmaterialmovementdata = ls_ccmaterialmovementdata_sc.
      APPEND ls_ccmaterialmovement_sc TO ls_choice_sc-ccmaterialmovement.
      APPEND ls_ccproduct_sc TO ls_choice_sc-ccproduct.

    ENDIF.




**********                         **********
********** MOVIMIENTOS DE MATERIAL **********
**********         (Fin)           **********
*********************************************

    MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
    ls_alv-matnr = ls_mara-matnr.
*    ls_alv-lenum = ls_lqua-lenum.
*    ls_alv-tanum = ls_lqua-tanum.
    ls_alv-lgnum = ls_lqua-lgnum.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_alv-name =  <h>-valor1.
    ENDIF.
    ls_alv-charg = ls_lqua-charg. "25.07.2023

* >> JJR
*    CC_LOT_COMMAND
    ls_cc_lot_command_pc-cclotcommanddata-lotcommandid = 1. "Fijo
    ls_cc_lot_command_pc-cclotcommanddata-operation = 'Replace'. "fijo
    IF p_tpmat = 'PAP'.
      ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'PaperGroup'.
    ELSEIF p_tpmat = 'COM'.
      ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'StockCom'.
    ENDIF.

*    CCLOT
    ls_cclot_pc-operation = 'Replace'.
    ls_cclot_pc-cclotdata-lotid = ls_alv-charg. "Numero de lote

    ls_cclot_pc-cclotdata-erpreference = ls_lqua-lenum. "Numero de UA del lote
*ls_cclot_pc-CCLOTDATA-LEAFQUANTITY "en m2. Conversion a m2 de la cantidad del lote
    lv_unit_in  = 'KG'.
    lv_unit_out = 'M2'.
    DATA lv_aux_out TYPE ekpo-menge.
    lv_aux_in = ls_lqua-verme.
    CLEAR: lv_aux_out.
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = ls_alv-matnr
        i_in_me              = lv_unit_in
        i_out_me             = lv_unit_out
        i_menge              = lv_aux_in
      IMPORTING
        e_menge              = lv_aux_out
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.

    ls_cclot_pc-cclotdata-leafquantity-content  = lv_aux_out.

    TRANSLATE lv_unit_out TO LOWER CASE. "cgijon - 22.08.23 - 7000055471, TICKET 78613
    ls_cclot_pc-cclotdata-leafquantity-unit = lv_unit_out. "M2

    ls_cclot_pc-cclotdata-length-content = ls_mara-zzlargo."Largo del material  ZZLARGO de MARA (vacio o 0 en ZPAP)
    ls_cclot_pc-cclotdata-length-unit = 'mm'.
    ls_cclot_pc-cclotdata-lotcommandid = 1. "fijo
**ls_cclot_pc-CCLOTDATA-OWNERSHIPSTATUS " A confirmar
**ls_cclot_pc-CCLOTDATA-PARENTLOTID "A confirmar

*   ini cgijon - 22.08.23 - 7000055471, TICKET 78613
*    ls_cclot_pc-cclotdata-productid = ls_alv-matnr."Número de material
    ls_cclot_pc-cclotdata-productid = ls_ccproductdata_pc-productid."Número de material
*   fin cgijon - 22.08.23 - 7000055471, TICKET 78613

    IF p_tpmat = 'PAP'.
      ls_cclot_pc-cclotdata-stock_group_id = 'PaperGroup'.
    ELSEIF p_tpmat = 'COM'.
      ls_cclot_pc-cclotdata-stock_group_id = 'StockCom'.
    ENDIF.

    SELECT SINGLE licha
      FROM mch1
      INTO ls_cclot_pc-cclotdata-supplierlotid ""Número de lote proveedor
      WHERE matnr = ls_alv-matnr AND
            charg = ls_alv-charg.

    SELECT ebeln, xblnr_mkpf, mblnr, mjahr UP TO 1 ROWS  FROM mseg INTO @DATA(ls_mseg)
           WHERE bwart = '101' AND matnr = @ls_alv-matnr AND charg = @ls_alv-charg ORDER BY mjahr DESCENDING, mblnr DESCENDING. "Numero de pedido de compras
      EXIT.
    ENDSELECT.
    ls_cclot_pc-cclotdata-supplierorderlineid = ls_mseg-ebeln.

    ls_cclot_pc-cclotdata-delivery_note = ls_mseg-xblnr_mkpf."Nota de entrega de la EM
    ls_cclot_pc-cclotdata-weight-content = ls_lqua-mgewi."Peso en Kg del lote
    ls_cclot_pc-cclotdata-weight-unit = ls_lqua-gewei.
    TRANSLATE ls_cclot_pc-cclotdata-weight-unit TO LOWER CASE. "cgijon - 22.08.23 - 7000055471, TICKET 78613

    "ini cgijon - 22.08.23 - 7000055471, TICKET 78613
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'
                                              param3 = p_werks.
    IF sy-subrc = 0.
      ls_cclot_pc-cclotdata-wh_id = <h>-valor1.
    ENDIF.
*    ls_cclot_pc-cclotdata-wh_id = ls_alv-lgnum. "numero de Almacen WM carla.
    "fin cgijon - 22.08.23 - 7000055471, TICKET 78613

    ls_cclot_pc-cclotdata-width-content = ls_alv-width."ancho del material ZZANCHO/MARA
    ls_cclot_pc-cclotdata-width-unit = 'mm'.

*    APPEND ls_cc_lot_command_pc TO ls_choice_pc-cc_lot_command. "comentada linea cgijon - 22.08.23
    APPEND ls_cclot_pc TO ls_choice_pc-cclot.


* << JJR

    APPEND ls_alv TO gt_data_3.
    CLEAR ls_alv.
  ENDLOOP.

  APPEND ls_cc_lot_command_pc TO ls_choice_pc-cc_lot_command. "insertada linea cgijon - 22.08.23 -
  "7000055471, TICKET 78613


  IF ls_choice_pc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_pc, ls_data_pc.
    ls_action_pc-action = ls_choice_pc.
    ls_action_pc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_pc-name =  <h>-valor1.
    ENDIF.
    ls_data_pc-mt_mat_move_new_format = ls_action_pc.
    gs_tab_omp_2_pacs = ls_data_pc.
  ENDIF.

  IF ls_choice_sc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_sc, ls_data_sc.
    ls_action_sc-action = ls_choice_sc.
    ls_action_sc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_sc-name =  <h>-valor1.
    ENDIF.
    ls_data_sc-mt_mat_move_new_format = ls_action_sc.
    gs_tab_omp_2_sc = ls_data_sc.
  ENDIF..

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA_5
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SY_REPID  text
*      -->P_P_MATNR  text
*      -->P_P_WERKS  text
*      -->P_P_LGNUM  text
*      -->P_P_TPMAT  text
*      <--P_GS_TAB_OMP_2_PACS  text
*----------------------------------------------------------------------*
FORM f_get_data_5  USING p_repid p_matnr p_werks p_lgnum p_tpmat
                         p_charg p_lenum
                  CHANGING gs_tab_omp_2_pacs.
  DATA: ls_dat_mat                   TYPE zdt_omp_mat_move_out_sap_to_o7,
        ls_action                    TYPE zdt_omp_mat_move_out_sap_to_o9,
        ls_message                   TYPE zdt_omp_mat_move_out_sap_to_o8,
        ls_data                      TYPE zmt_omp_mat_move_out_sap_to_om,

*** --> Inicio Estructuras para proxy nuevo PACS
        ls_data_pc                   TYPE zmt_mat_move_new_format,
        ls_action_pc                 TYPE zdt_mat_move_new_format,
        ls_choice_pc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_pc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_pc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_pc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_pc          TYPE zdt_mat_move_new_format_ccprod,
        lt_ccmaterialmovement_pc     TYPE TABLE OF zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovement_pc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_pc TYPE zdt_mat_move_new_format_ccmate,
        ls_cc_lot_command_pc         TYPE  zdt_mat_move_new_format_cc_lot, "JJR
        ls_cclot_pc                  TYPE zdt_mat_move_new_format_cclot,  "JJR
*** <-- Fin Estructuras para proxy nuevo PACS

*** --> Inicio Estructuras para proxy nuevo SAN CAYETANO
        ls_data_sc                   TYPE zmt_mat_move_new_format,
        ls_action_sc                 TYPE zdt_mat_move_new_format,
        ls_choice_sc                 TYPE zdt_mat_move_new_format_action,
        ls_ccstockcommand_sc         TYPE zdt_mat_move_new_format_ccsto1,
        ls_ccstockcommanddata_sc     TYPE zdt_mat_move_new_format_ccstoc,
        ls_ccproduct_sc              TYPE zdt_mat_move_new_format_ccpro1,
        ls_ccproductdata_sc          TYPE zdt_mat_move_new_format_ccprod,
        lt_ccmaterialmovement_sc     TYPE TABLE OF zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovement_sc     TYPE zdt_mat_move_new_format_ccmat1,
        ls_ccmaterialmovementdata_sc TYPE zdt_mat_move_new_format_ccmate,
*** <-- Fin Estructuras para proxy nuevo SAN CAYETANO

        ls_alv                       TYPE tr_data_3,
        ls_tipo                      LIKE LINE OF grg_tipo,
        wl_lqua                      TYPE lqua,
        ls_mara                      TYPE mara,
        lv_lvsme                     TYPE lvs_lvsme,
        lt_hard                      TYPE STANDARD TABLE OF ztwm001,
        tl_lqua                      TYPE STANDARD TABLE OF lqua,
        lv_aux                       TYPE lein_mgewi,
        lv_textauxp                  TYPE text50,
        lv_ancho                     TYPE lein_mgewi,
        lv_str                       TYPE string,
        lv_str2                      TYPE string,
        lv_aux_grama                 TYPE lqua_gesme,
        lv_aux_cost                  TYPE netwr,
        lv_int                       TYPE i,
        lv_aux_in                    TYPE bstmg,
        lv_unit_in                   TYPE gewei,
        lv_unit_out                  TYPE gewei,
        lv_ua7(7),
        lv_lenum                     TYPE lenum,
        lv_qunit                     TYPE gewei,
        lv_datatype                  TYPE datatype_d.

  TYPES: BEGIN OF lot,
           matnr TYPE matnr,
           charg TYPE charg_d,
           lifnr TYPE mch1-lifnr,
           name1 TYPE lfa1-name1,
         END OF lot.

  DATA: t_lot TYPE SORTED TABLE OF lot WITH UNIQUE KEY matnr charg.


  TYPES: BEGIN OF tipo_material,
           matnr TYPE matnr,
           werks TYPE werks_d,
           lgort TYPE lgort_d.
  TYPES: END OF tipo_material.
  TYPES: tty_material TYPE TABLE OF tipo_material.
  DATA: lt_material TYPE tty_material,
        wa_material TYPE LINE OF tty_material.


  DATA: lt_ccmaterialmovement TYPE zdt_mat_move_new_format_cc_tab,
        lv_new                TYPE xfeld,
        lv_menge              TYPE lein_mgewi,
        r_lenum               TYPE RANGE OF lqua-lenum,
        r_charg               TYPE RANGE OF lqua-charg.

  CLEAR: lv_new.

  IF p_auto = 'X'.
    DATA i_sel_mat TYPE TABLE OF lqua.
    IMPORT i_sel_mat TO i_sel_mat FROM MEMORY ID 'ZINTF_OMP_SEL'.
    FREE MEMORY ID 'ZINTF_OMP_SEL'.
    IF i_sel_mat IS INITIAL AND p_matnr IS INITIAL.
      i_return_log = VALUE #( ( message = 'No se han pasado datos de selección' type = 'E' ) ).
    ENDIF.
  ENDIF.


  SELECT * FROM ztwm001
    INTO TABLE lt_hard
    WHERE cprog = p_repid AND
          param2 = '01'.

  CLEAR: grg_tipo, grg_tipo[].
  LOOP AT lt_hard ASSIGNING FIELD-SYMBOL(<ls2>)
                                   WHERE param1 = 'PAP_MTART'
                                     AND valor1 = p_tpmat.
    CLEAR: ls_tipo.
    MOVE 'I' TO ls_tipo-sign.
    MOVE 'EQ' TO ls_tipo-option.
    MOVE <ls2>-param3  TO ls_tipo-low.
    IF ls_tipo IS NOT INITIAL.
      APPEND ls_tipo TO grg_tipo.
    ENDIF.
  ENDLOOP.

  IF NOT p_lenum IS INITIAL.
    r_lenum = VALUE #( ( option = 'EQ' sign = 'I' low = p_lenum ) ).
  ENDIF.

  IF NOT p_charg IS INITIAL.
    r_charg = VALUE #( ( option = 'EQ' sign = 'I' low = p_charg ) ).
  ENDIF.

* >> JJR 31.07.2023
  IF  p_matnr IS NOT INITIAL.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_lqua
      FROM lqua
     WHERE lgnum = p_lgnum AND
           werks = p_werks AND
           verme GT 0 AND
           matnr = p_matnr
       AND lenum IN r_lenum
       AND charg IN r_charg.
    IF gt_lqua[] IS NOT INITIAL.
      SELECT matnr INTO TABLE @DATA(tl_mara)
        FROM mara FOR ALL ENTRIES IN @gt_lqua
       WHERE matnr  = @gt_lqua-matnr.
      IF sy-subrc IS NOT INITIAL.
        CLEAR: tl_mara, tl_mara[].
      ELSE.
        SORT tl_mara BY matnr.
        DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
      ENDIF.
    ENDIF.
  ELSEIF NOT i_sel_mat IS INITIAL.
*APC20250103 Selección por interfaz
    SELECT * FROM lqua
      INTO CORRESPONDING FIELDS OF TABLE gt_lqua
     FOR ALL ENTRIES IN i_sel_mat
     WHERE lgnum = i_sel_mat-lgnum
       AND werks = i_sel_mat-werks
       AND lgort = i_sel_mat-lgort
       AND matnr = i_sel_mat-matnr
       AND charg = i_sel_mat-charg
       AND lenum = i_sel_mat-lenum
       AND verme GT 0.
    IF gt_lqua[] IS INITIAL.
      i_return_log = VALUE #( ( message = 'No se ha seleccionado nada de LQUA' type = 'E' ) ).
      RETURN.
    ELSE.
      SELECT matnr INTO TABLE @tl_mara
        FROM mara FOR ALL ENTRIES IN @gt_lqua
       WHERE matnr  = @gt_lqua-matnr.
      SORT tl_mara BY matnr.
      DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
    ENDIF.
  ELSE.
* << JJR 31.07.2023
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_lqua
      FROM lqua
     WHERE lgnum = p_lgnum AND
           werks = p_werks AND
           lgtyp IN s_lgtyp AND
           verme GT 0.

    IF gt_lqua[] IS NOT INITIAL.
      SELECT matnr INTO TABLE tl_mara
        FROM mara FOR ALL ENTRIES IN gt_lqua
       WHERE matnr  = gt_lqua-matnr
         AND mtart IN grg_tipo.
      IF sy-subrc IS NOT INITIAL.
        CLEAR: tl_mara, tl_mara[].
      ELSE.
        SORT tl_mara BY matnr.
        DELETE ADJACENT DUPLICATES FROM tl_mara COMPARING matnr.
      ENDIF.
    ENDIF.
  ENDIF. "JJR 31.07.2023

  LOOP AT gt_lqua ASSIGNING FIELD-SYMBOL(<fs_lqua>).
    READ TABLE tl_mara INTO DATA(wl_mara) WITH KEY matnr = <fs_lqua>-matnr.
    IF sy-subrc IS NOT INITIAL.
      CLEAR: <fs_lqua>-mandt, <fs_lqua>-lgnum, <fs_lqua>-lqnum.
    ENDIF.
  ENDLOOP.
  DELETE gt_lqua WHERE lqnum IS INITIAL.

  REFRESH: grg_rang.

  IF line_exists( lt_hard[ param1 = 'SUPPLIER_NAME' param3 = p_werks ] ). " cvivo - 65978 - proveedor en etiqueta BHS
    SELECT mch1~matnr mch1~charg mch1~lifnr lfa1~name1 FROM mch1
      INNER JOIN lfa1
      ON mch1~lifnr EQ lfa1~lifnr
      INTO CORRESPONDING FIELDS OF TABLE t_lot
      FOR ALL ENTRIES IN gt_lqua
      WHERE matnr EQ gt_lqua-matnr
        AND charg EQ gt_lqua-charg
        AND mch1~lifnr NE space.
  ENDIF.

  CLEAR: tl_lqua, tl_lqua[].
  LOOP AT gt_lqua ASSIGNING <fs_lqua>.
    CLEAR: wl_lqua.
    wl_lqua-lgnum = <fs_lqua>-lgnum.
    wl_lqua-matnr = <fs_lqua>-matnr.
    wl_lqua-werks = <fs_lqua>-werks.
    wl_lqua-verme = <fs_lqua>-verme.
    wl_lqua-gewei = <fs_lqua>-gewei.
    wl_lqua-lenum = <fs_lqua>-lenum. "JJR 31.07.2023
    wl_lqua-mgewi = <fs_lqua>-mgewi. "JJR 31.07.2023
    wl_lqua-lgort = <fs_lqua>-lgort.
    wl_lqua-charg = <fs_lqua>-charg. "JJR 31.07.2023
    wl_lqua-wenum = <fs_lqua>-wenum. "JJR 31.07.2023
    wl_lqua-wdatu = <fs_lqua>-wdatu. "JJR 31.07.2023
    " cvivo - 62813 - Verificar si es compatible
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_werks    = wl_lqua-werks
        iv_matnr    = wl_lqua-matnr
      IMPORTING
        e_principal = DATA(l_principal)
      RECEIVING
        et_compat   = DATA(t_compat).

    IF t_compat IS NOT INITIAL AND l_principal IS INITIAL. " hay compatibles y éste no es el principal
      wl_lqua-matnr = t_compat[ principal = abap_true ]-matnr. " sustituyo por el principal
    ELSE.
      CLEAR: l_principal, t_compat, t_compat[].
    ENDIF.

    COLLECT wl_lqua INTO tl_lqua.
  ENDLOOP.

  CHECK tl_lqua[] IS NOT INITIAL.

  gt_lqua[] = tl_lqua[].

  CLEAR: ls_data_pc, ls_action_pc, ls_choice_pc.


  LOOP AT gt_lqua INTO DATA(wa_lqua).
    wa_material-matnr = wa_lqua-matnr.
    wa_material-werks = wa_lqua-werks.
    wa_material-lgort = wa_lqua-lgort.
    APPEND wa_material TO lt_material.
  ENDLOOP.

  SORT lt_material BY matnr werks lgort ASCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_material.

  CHECK lt_material[] IS NOT INITIAL.


  SELECT mbew~matnr, mbew~bwkey, mbew~bwtar, mbew~verpr, mbew~peinh, t001~waers, t001w~werks
   FROM t001w INNER JOIN mbew  ON t001w~bwkey = mbew~bwkey
              LEFT OUTER JOIN t001k ON mbew~bwkey  = t001k~bwkey
              LEFT OUTER JOIN t001  ON t001k~bukrs = t001~bukrs
   INTO TABLE @DATA(lt_mbew)
   FOR ALL ENTRIES IN @lt_material
   WHERE t001w~werks = @lt_material-werks AND
         mbew~matnr  = @lt_material-matnr AND
         mbew~lvorm  = ''.


  SELECT * FROM mara
    INTO TABLE @DATA(lt_mara)
    FOR ALL ENTRIES IN @lt_material
    WHERE matnr = @lt_material-matnr.



*********************************************
**********  CABECERA DEL MENSAJE   **********
**********        (Inicio)         **********
**********                         **********
  CLEAR: ls_ccstockcommanddata_pc.

  ls_ccstockcommanddata_pc-materialtype = p_tpmat.

  IF p_tpmat = 'PAP'.
    READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'PAP_PARAMS'
                                                            param3 = p_werks.
    IF sy-subrc EQ 0.
      ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
      ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
    ENDIF.
  ELSEIF p_tpmat = 'COM'.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'COM_PARAMS'
                                              param3 = p_werks.
    IF sy-subrc EQ 0.
      ls_ccstockcommanddata_pc-stockcommandid = <h>-valor2.
      ls_ccstockcommanddata_pc-stockgroupid   = <h>-valor1.
    ENDIF.
  ENDIF.

  READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_STCKCMD'.
  IF sy-subrc EQ 0.
    ls_ccstockcommanddata_pc-operation = <h>-valor1.
  ENDIF.

  PERFORM f_dame_fecha_hora CHANGING lv_str.
  ls_ccstockcommanddata_pc-eventdateforzerolevel = lv_str.


  MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
  ls_ccstockcommand_pc-ccstockcommanddata = ls_ccstockcommanddata_pc.
  ls_choice_pc-ccstockcommand = ls_ccstockcommand_pc.

  ls_ccstockcommanddata_sc = ls_ccstockcommanddata_pc.
  ls_ccstockcommand_sc-ccstockcommanddata = ls_ccstockcommanddata_sc.
  ls_choice_sc-ccstockcommand = ls_ccstockcommand_sc.
**********                         **********
**********  CABECERA DEL MENSAJE   **********
**********        (Fin)            **********
*********************************************


  LOOP AT lt_material INTO wa_material.
    READ TABLE lt_mara INTO ls_mara WITH KEY matnr = wa_material-matnr.

    READ TABLE lt_mbew INTO DATA(ls_mbew) WITH KEY matnr = wa_material-matnr
                                                   werks = wa_material-werks.

*********************************************
**********    DATOS DE MATERIAL    **********
**********        (Inicio)         **********
**********                         **********
    CLEAR: ls_ccproductdata_pc.

    PERFORM obtener_productid USING ls_mara
                                    wa_material-werks
                                    ls_ccstockcommanddata_pc-stockcommandid
                                    wa_material-lgort
                              CHANGING lv_str
                                       lv_str2.

    ls_ccproductdata_pc-productid = lv_str.
    ls_ccproductdata_pc-paperid = lv_str2.
    IF ls_ccstockcommanddata_pc-materialtype NE 'PAP'.
      CLEAR: ls_ccproductdata_pc-paperid.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MATERIALMANAGEMENT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialmanagement = <h>-valor1.
    ENDIF.

    ls_ccproductdata_pc-materialtype = ls_ccstockcommanddata_pc-materialtype.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'UNITID'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-unitid = <h>-valor1.
    ENDIF.

    ls_alv-width = ls_mara-zzancho * 1.
    CONDENSE ls_alv-width NO-GAPS.
    ls_ccproductdata_pc-materialwidth-content = ls_alv-width.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'WIDTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materialwidth-unit = <h>-valor1.
      ls_alv-width_unit = <h>-valor1.
    ENDIF.

    lv_aux = ls_mara-zzlargo * 1.
    ls_alv-standardlength = ls_mara-zzlargo * 1.
    CONDENSE ls_alv-standardlength NO-GAPS.
    ls_ccproductdata_pc-materiallength-content = ls_alv-standardlength.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LENGTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-materiallength-unit = <h>-valor1.
      ls_alv-standardlength_unit = <h>-valor1.
    ENDIF.

    CLEAR lv_aux_grama.
    IF ls_mara-zzgramaje IS NOT INITIAL.
      lv_aux_grama = ls_mara-zzgramaje * 1.
      ls_alv-grammage_txt = ls_mara-zzgramaje * 1.
      CONDENSE ls_alv-grammage_txt NO-GAPS.
    ENDIF.
    ls_ccproductdata_pc-grammage-content = ls_alv-grammage_txt.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRAMMAGE_UNIT'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-grammage-unit = <h>-valor1.
      ls_alv-grammage_unit = <h>-valor1.
    ENDIF.

*   Cálculo del Coste
***   De KG -> a M2 (para cálculo de Coste)
    lv_aux_in   = 1.
    lv_unit_in  = 'KG'.
    lv_unit_out = 'M2'.

    IF ( ls_mbew-matnr IS NOT INITIAL ) AND ( ls_mbew-peinh NE 0 ) .
      lv_aux_grama = ls_mara-zzgramaje / 1000.
      ls_alv-cost_txt = ( ls_mbew-verpr * lv_aux_grama ) / ( ls_mbew-peinh ) .
      CONDENSE ls_alv-cost_txt NO-GAPS.
    ELSE.
      ls_alv-cost_txt = '0'.
    ENDIF.
    ls_ccproductdata_pc-cost-content = ls_alv-cost_txt.


    CONCATENATE ls_mbew-waers '/m2' INTO ls_ccproductdata_pc-cost-unit.
    ls_alv-cost_unit = ls_ccproductdata_pc-cost-unit.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LEADTIME'.
    IF sy-subrc EQ 0.
      ls_ccproductdata_pc-leadtime = <h>-valor1.
    ENDIF.

    IF ls_mara-mtart EQ 'ZPIM' OR ls_mara-mtart EQ 'ZPAH'.
      ls_ccproductdata_pc-preprint = 'YES'.
    ELSE.
      ls_ccproductdata_pc-preprint = 'NO'.
    ENDIF.

    ls_ccproductdata_pc-comments = ''.
    ls_alv-comments = ls_ccproductdata_pc-comments.

    MOVE-CORRESPONDING ls_ccproductdata_pc TO ls_alv.
    ls_ccproduct_pc-ccproductdata = ls_ccproductdata_pc.
    ls_ccproduct_pc-operation = ls_ccstockcommanddata_pc-operation.


    ls_ccproductdata_sc = ls_ccproductdata_pc.
    ls_ccproduct_sc-ccproductdata = ls_ccproductdata_sc.
    ls_ccproduct_sc-operation = ls_ccstockcommanddata_sc-operation.

    APPEND ls_ccproduct_sc TO ls_choice_sc-ccproduct.
    APPEND ls_ccproduct_pc TO ls_choice_pc-ccproduct.

**********                         **********
**********    DATOS DE MATERIAL    **********
**********          (Fin)          **********
*********************************************




    CLEAR: lv_menge, lt_ccmaterialmovement_pc, lt_ccmaterialmovement_sc.

    LOOP AT gt_lqua INTO DATA(ls_lqua) WHERE matnr = wa_material-matnr AND
                                             werks = wa_material-werks.

*********************************************
********** MOVIMIENTOS DE MATERIAL **********
**********        (Inicio)         **********
**********                         **********
      IF lt_ccmaterialmovement_sc[] IS INITIAL.

        CLEAR: ls_ccmaterialmovementdata_pc.

        ls_ccmaterialmovementdata_pc-stockcommandid = ls_ccstockcommanddata_pc-stockcommandid.

        ls_ccmaterialmovementdata_pc-productid = ls_ccproductdata_pc-productid.

        READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'QUANTITY_UNIT'.
        IF sy-subrc EQ 0.
          ls_ccmaterialmovementdata_pc-quantity-unit = <h>-valor1.
          ls_alv-quantity_unit = <h>-valor1.
        ENDIF.

        lv_qunit = ls_ccmaterialmovementdata_pc-quantity-unit.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            input          = lv_qunit
          IMPORTING
            output         = lv_qunit
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.

*   De KG -> a M
        PERFORM f_cambia_unidad USING ls_mara-matnr
                                      ls_lqua-verme
                                      ls_lqua-gewei
                                      lv_qunit
                                      ls_mara-zzancho
                                CHANGING lv_aux.

        ls_alv-quantity_txt = lv_aux * 1.
        CONDENSE ls_alv-quantity_txt NO-GAPS.
        ls_ccmaterialmovementdata_pc-quantity-content = ls_alv-quantity_txt.

        lv_menge = ls_alv-quantity_txt.


        READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'FROMWHID'.
        IF sy-subrc EQ 0.
          ls_ccmaterialmovementdata_pc-fromwhid = <h>-valor1.
        ENDIF.

        READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'
                                                  param3 = p_werks.
        IF sy-subrc EQ 0.
          ls_ccmaterialmovementdata_pc-towhid  = <h>-valor1.
        ENDIF.

        PERFORM f_dame_fecha_hora CHANGING lv_str.
        ls_ccmaterialmovementdata_pc-eventdate = lv_str.

        READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MOVEMENTTYPE'.
        IF sy-subrc EQ 0.
          ls_ccmaterialmovementdata_pc-movementtype = <h>-valor1.     " En el viejo era 'I', ahora 'L'
        ENDIF.

        MOVE-CORRESPONDING ls_ccmaterialmovementdata_pc TO ls_alv.

        ls_ccmaterialmovement_pc-ccmaterialmovementdata = ls_ccmaterialmovementdata_pc.
        APPEND ls_ccmaterialmovement_pc TO lt_ccmaterialmovement_pc.


        ls_ccmaterialmovementdata_sc = ls_ccmaterialmovementdata_pc.
        ls_ccmaterialmovement_sc-ccmaterialmovementdata = ls_ccmaterialmovementdata_sc.
        APPEND ls_ccmaterialmovement_sc TO lt_ccmaterialmovement_sc.
      ELSE.
        LOOP AT lt_ccmaterialmovement_pc ASSIGNING FIELD-SYMBOL(<wa_ccmaterialmovement>).
          IF <wa_ccmaterialmovement>-ccmaterialmovementdata-productid = ls_ccproductdata_pc-productid.

            lv_qunit = <wa_ccmaterialmovement>-ccmaterialmovementdata-quantity-unit.
            CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
              EXPORTING
                input          = lv_qunit
              IMPORTING
                output         = lv_qunit
              EXCEPTIONS
                unit_not_found = 1
                OTHERS         = 2.

            PERFORM f_cambia_unidad USING ls_mara-matnr
                                          ls_lqua-verme
                                          ls_lqua-gewei
                                          lv_qunit
                                          ls_mara-zzancho
                                    CHANGING lv_aux.





            lv_menge = lv_menge + ( lv_aux * 1 ).
            <wa_ccmaterialmovement>-ccmaterialmovementdata-quantity-content = lv_menge.
            CONDENSE  <wa_ccmaterialmovement>-ccmaterialmovementdata-quantity-content.


            MOVE-CORRESPONDING <wa_ccmaterialmovement>-ccmaterialmovementdata TO ls_alv.
            ls_alv-quantity_txt = ( lv_aux * 1 ).

            MOVE-CORRESPONDING <wa_ccmaterialmovement>-ccmaterialmovementdata TO ls_ccstockcommanddata_pc.


          ENDIF.
        ENDLOOP.

        lt_ccmaterialmovement_sc[] = lt_ccmaterialmovement_pc[].


      ENDIF.

**********                         **********
********** MOVIMIENTOS DE MATERIAL **********
**********         (Fin)           **********
*********************************************
      MOVE-CORRESPONDING ls_ccstockcommanddata_pc TO ls_alv.
      ls_alv-matnr = ls_mara-matnr.
      ls_alv-lgnum = ls_lqua-lgnum.
      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
      IF sy-subrc EQ 0.
        ls_alv-name =  <h>-valor1.
      ENDIF.

      ls_alv-charg = ls_lqua-charg. "25.07.2023

      ls_cc_lot_command_pc-cclotcommanddata-lotcommandid = 1. "Fijo
      ls_cc_lot_command_pc-cclotcommanddata-operation = 'Replace'. "fijo
      IF p_tpmat = 'PAP'.
        ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'PaperGroup'.
      ELSEIF p_tpmat = 'COM'.
        ls_cc_lot_command_pc-cclotcommanddata-stockgroupid = 'StockCom'.
      ENDIF.

      ls_cclot_pc-operation = 'Replace'.

*--> INI FCARDONA - 291024 Envíar UA y no lote

*      ls_cclot_pc-cclotdata-lotid = ls_alv-charg. "Numero de lote

      ls_alv-lenum = |{ ls_lqua-lenum ALPHA = OUT }|.
      ls_cclot_pc-cclotdata-lotid = |{ ls_lqua-lenum ALPHA = OUT }|.

*--> FIN FCARDONA - 291024 Envíar UA y no lote


      ls_cclot_pc-cclotdata-erpreference = ls_lqua-lenum. "Numero de UA del lote
      lv_unit_in  = 'KG'.
      lv_unit_out = 'M2'.
      DATA lv_aux_out TYPE ekpo-menge.
      lv_aux_in = ls_lqua-verme.
      CLEAR: lv_aux_out.
      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
        EXPORTING
          i_matnr              = ls_alv-matnr
          i_in_me              = lv_unit_in
          i_out_me             = lv_unit_out
          i_menge              = lv_aux_in
        IMPORTING
          e_menge              = lv_aux_out
        EXCEPTIONS
          error_in_application = 1
          error                = 2
          OTHERS               = 3.

      ls_cclot_pc-cclotdata-leafquantity-content  = lv_aux_out.

      TRANSLATE lv_unit_out TO LOWER CASE.
      ls_cclot_pc-cclotdata-leafquantity-unit = lv_unit_out. "M2

      ls_cclot_pc-cclotdata-length-content = ls_mara-zzlargo.
      ls_cclot_pc-cclotdata-length-unit = 'mm'.
      ls_cclot_pc-cclotdata-lotcommandid = 1.
      ls_cclot_pc-cclotdata-productid = ls_ccproductdata_pc-productid.

      IF p_tpmat = 'PAP'.
        ls_cclot_pc-cclotdata-stock_group_id = 'PaperGroup'.
      ELSEIF p_tpmat = 'COM'.
        ls_cclot_pc-cclotdata-stock_group_id = 'StockCom'.
      ENDIF.

      SELECT SINGLE licha
        FROM mch1
        INTO ls_cclot_pc-cclotdata-supplierlotid ""Número de lote proveedor
        WHERE matnr = ls_alv-matnr AND
              charg = ls_alv-charg.

      SELECT ebeln, xblnr_mkpf, mblnr, mjahr UP TO 1 ROWS  FROM mseg INTO @DATA(ls_mseg)
             WHERE bwart = '101' AND matnr = @ls_alv-matnr AND charg = @ls_alv-charg ORDER BY mjahr DESCENDING, mblnr DESCENDING. "Numero de pedido de compras
        EXIT.
      ENDSELECT.
      ls_cclot_pc-cclotdata-supplierorderlineid = ls_mseg-ebeln.

      ls_cclot_pc-cclotdata-delivery_note = ls_mseg-xblnr_mkpf."Nota de entrega de la EM
      ls_cclot_pc-cclotdata-weight-content = ls_lqua-mgewi."Peso en Kg del lote
      ls_cclot_pc-cclotdata-weight-unit = ls_lqua-gewei.
      TRANSLATE ls_cclot_pc-cclotdata-weight-unit TO LOWER CASE. "cgijon - 22.08.23 - 7000055471, TICKET 78613

      READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'
                                                param3 = p_werks.
      IF sy-subrc = 0.
        ls_cclot_pc-cclotdata-wh_id = <h>-valor1.
      ENDIF.

      ls_cclot_pc-cclotdata-width-content = ls_alv-width."ancho del material ZZANCHO/MARA
      ls_cclot_pc-cclotdata-width-unit = 'mm'.

      APPEND ls_cclot_pc TO ls_choice_pc-cclot.

      APPEND ls_alv TO gt_data_3.
*      CLEAR ls_alv.

    ENDLOOP.

    APPEND LINES OF lt_ccmaterialmovement_sc TO ls_choice_sc-ccmaterialmovement.
    APPEND LINES OF lt_ccmaterialmovement_pc TO ls_choice_pc-ccmaterialmovement.


  ENDLOOP.

  APPEND ls_cc_lot_command_pc TO ls_choice_pc-cc_lot_command.

  IF ls_choice_pc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_pc, ls_data_pc.
    ls_action_pc-action = ls_choice_pc.
    ls_action_pc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_pc-name =  <h>-valor1.
    ENDIF.
    ls_data_pc-mt_mat_move_new_format = ls_action_pc.
    gs_tab_omp_2_pacs = ls_data_pc.
  ENDIF.

  IF ls_choice_sc-ccproduct[] IS NOT INITIAL.
    CLEAR: ls_action_sc, ls_data_sc.
    ls_action_sc-action = ls_choice_sc.
    ls_action_sc-centro = p_werks.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action_sc-name =  <h>-valor1.
    ENDIF.
    ls_data_sc-mt_mat_move_new_format = ls_action_sc.
    gs_tab_omp_2_sc = ls_data_sc.
  ENDIF.


ENDFORM.
