*&---------------------------------------------------------------------*
*&  Include           MZ_WM_RF_I02
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0020b  INPUT
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
MODULE user_command_0020 INPUT.
  CASE ok_code(2).
    WHEN 'OK'.
      IF g_lenum IS INITIAL.
*Rellene una UA
        g_message_number = '005'.
        g_message_type = 'A'.
        CLEAR g_msgv1.
        CLEAR g_msgv2.
        CLEAR g_msgv3.
        CLEAR g_msgv4.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        PERFORM get_su_data
              USING g_lenum
           CHANGING g_error.

        IF g_error IS INITIAL.
* NAC -> WM09 NO_MOVER_STOCK_BLOQUEADO •  ZWM_RF_007 “Ubicar”
*    Activación o desactivación de funcionalidad

          READ TABLE gt_func INTO DATA(ls_func_003)
          WITH KEY func = 'NO_MOVER_STOCK_BLOQUEADO'
                  (gv_lgnum_lg) = 'X'.
          READ TABLE gt_lqua INTO DATA(ls_lqua_003) INDEX 1.
          IF ls_func_003 IS NOT INITIAL.
            IF ls_lqua_003-bestq IS INITIAL.
              " Si está habilitada la func. y LS_LQUA-BESTQ está vacío.
* NAC <- WM09 NO_MOVER_STOCK_BLOQUEADO -> ZWM_RF_007 “Ubicar”
              IF sy-tcode = gc_tcode_reubprop OR sy-tcode = gc_tcode_reubic. " 61663 - cvivo - propuesta también en reubicar
                PERFORM get_ubic_prop.
              ENDIF.
              CASE sy-tcode.
                WHEN 'ZWM_RF_010' .
* envio a material pendiente
                  CALL SCREEN 0030.
                  CLEAR g_lenum.
                WHEN 'ZWM_RF_011' .
* AQjuste de cantidad
                  CLEAR gs_reubic-verme.
                  CALL SCREEN 0031.
                  CLEAR g_lenum.

                WHEN 'ZWM_RF_017'.
* Consumo de material auxiliar
                  CLEAR  g_lenum.
                  CALL SCREEN 0032.
                WHEN OTHERS.
                  CALL SCREEN 0021.
                  CLEAR g_lenum.
              ENDCASE.
*          IF sy-tcode <> 'ZWM_RF_010' AND
*             sy-tcode <> 'ZWM_RF_011'.
*            CALL SCREEN 0021.
*          ELSEIF sy-tcode = 'ZWM_RF_010' .
** envio a material pendiente
*            CALL SCREEN 0030.
*          ELSEIF sy-tcode = 'ZWM_RF_011' .
** AQjuste de cantidad
*            CALL SCREEN 0031.
*          ENDIF.

* NAC -> WM09 NO_MOVER_STOCK_BLOQUEADO •  ZWM_RF_003 “Reubicar”
            ELSEIF ls_lqua_003-bestq IS NOT INITIAL AND ls_func_003 IS NOT INITIAL.
* " Si está habilitada la func. y LS_LQUA-BESTQ no está vacío.
              IF sy-tcode = 'ZWM_RF_003' OR sy-tcode = 'ZWM_RF_007' OR sy-tcode = 'ZWM_RF_014'
              OR sy-tcode = 'ZWM_RF_010' OR sy-tcode = 'ZWM_RF_017' OR sy-tcode = 'ZWM_RF_016'.
                MESSAGE ID 'ZWM_RF' TYPE 'E' NUMBER '073'.
              ELSE.
                CALL SCREEN 0021.
                CLEAR g_lenum.
              ENDIF.

            ENDIF.
* NAC <- WM09 NO_MOVER_STOCK_BLOQUEADO •  ZWM_RF_003 “Reubicar”

* Si no esta activada la func.
          ELSE.
            IF sy-tcode = gc_tcode_reubprop OR sy-tcode = gc_tcode_reubic. " 61663 - cvivo - propuesta también en reubiar.
              PERFORM get_ubic_prop.
            ENDIF.
            CASE sy-tcode.
              WHEN 'ZWM_RF_010' .
* envio a material pendiente
                CALL SCREEN 0030.
                CLEAR g_lenum.
              WHEN 'ZWM_RF_011' .
* AQjuste de cantidad
                CLEAR gs_reubic-verme.
                CALL SCREEN 0031.
                CLEAR g_lenum.

              WHEN 'ZWM_RF_017'.
* Consumo de material auxiliar
                CLEAR  g_lenum.
                CALL SCREEN 0032.
              WHEN OTHERS.
                CALL SCREEN 0021.
                CLEAR g_lenum.
            ENDCASE.
          ENDIF.
* Else -> g_error is not initial.
        ELSE.
          CLEAR g_lenum.
        ENDIF.
      ENDIF.
    WHEN 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
MODULE user_command_0023 INPUT.
  CASE ok_code(2).
    WHEN 'OK'.
      IF g_matnr IS INITIAL.
*Rellene una UA
        g_message_number = '015'.
        g_message_type = 'A'.
        CLEAR g_msgv1.
        CLEAR g_msgv2.
        CLEAR g_msgv3.
        CLEAR g_msgv4.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        CLEAR gs_lqua.
        gs_lqua-matnr = g_matnr.
        PERFORM list_ua
              USING gs_lqua
                    'M'
           CHANGING g_error.
        IF g_error IS INITIAL.
          CALL SCREEN 0021.
        ENDIF.
      ENDIF.
    WHEN 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
MODULE user_command_0022 INPUT.
  CASE ok_code(2).
    WHEN 'OK'.
      IF g_lgpla IS INITIAL.
*Rellene una UA
        g_message_number = '014'.
        g_message_type = 'A'.
        CLEAR g_msgv1.
        CLEAR g_msgv2.
        CLEAR g_msgv3.
        CLEAR g_msgv4.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        CLEAR gs_lqua.
        gs_lqua-lgpla = g_lgpla.
        PERFORM list_ua
              USING gs_lqua
                    'U'
           CHANGING g_error.
        IF g_error IS INITIAL.
          CALL SCREEN 0021.
        ENDIF.
      ENDIF.
    WHEN 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0021  INPUT
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
MODULE user_command_0021 INPUT.
  CASE ok_code.
    WHEN 'NEXT'.
      IF g_lqua_index = 1.
      ELSE.
        ADD 1 TO g_lqua_index.
        READ TABLE gt_reubic INTO gs_reubic
          INDEX g_lqua_index.
        IF sy-subrc IS INITIAL.
          CLEAR gs_lqua.
          MOVE-CORRESPONDING gs_reubic TO gs_lqua.
        ENDIF.
      ENDIF.
    WHEN 'PREV'.
      IF g_lqua_index < g_lqua_tot.
      ELSE.
        SUBTRACT 1 FROM g_lqua_index.
        READ TABLE gt_reubic INTO gs_reubic
          INDEX g_lqua_index.
        IF sy-subrc IS INITIAL.
          CLEAR gs_lqua.
          MOVE-CORRESPONDING gs_reubic TO gs_lqua.
        ENDIF.
      ENDIF.
    WHEN 'PRINT'.
      CLEAR ok_code.
      PERFORM imprimir_etiqueta USING gs_lqua-lenum.

      g_message_number = '048'.
      g_message_type = 'A'.
      g_msgv1 = gs_lqua-lenum.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    WHEN 'PRINT2'. " 58185 - cvivo
      CLEAR ok_code.
      SET PARAMETER ID 'LEN' FIELD gs_lqua-lenum.
      EXPORT lv_vengo_inter_consumo = abap_true TO MEMORY ID 'VENGO_CONSUMO'.
* INI fcc 15.04.2021 - 62805 - WM Rambleños

*     ini old code
*      EXPORT lv_cod_maq_portabo = 'BHS' TO MEMORY ID 'MAQUINA'.
*     end old code

*     ini new code
      DATA: lv_param TYPE tvarvc-name.

      CONCATENATE 'ZWM_RF_IMPRIMIR_MAQUINA_' gs_lqua-lgnum INTO lv_param.

      SELECT SINGLE low
        FROM tvarvc
        INTO @DATA(lv_maquina)
       WHERE name = @lv_param
         AND type = 'S'.

      EXPORT lv_cod_maq_portabo = lv_maquina TO MEMORY ID 'MAQUINA'.

* FIN fcc 15.04.2021 - 62805 - WM Rambleños

      PERFORM imprimir_etiqueta USING gs_lqua-lenum.

      FREE MEMORY ID: 'VENGO_CONSUMO', 'MAQUINA'.

      g_message_number = '048'.
      g_message_type = 'A'.
      g_msgv1 = gs_lqua-lenum.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.


** KYVOR(AG) - INI - COMMENT
*    WHEN 'SAVE'.
** KYVOR(AG) - FIM - COMMENT

** KYVOR(AG) - INI - Quitar la funcionalidad del botón Grabar, al leer la
** ubicación destino ya debe de hacerse la OT. Ahora lo hace cuando se da a a grabar.
    WHEN 'SAVE' OR 'OK'.
      IF ok_code EQ 'OK'.
        CHECK ( sy-tcode EQ gc_tcode_reubprop AND g_bt_grabar_ubicar   IS NOT INITIAL )
           OR ( sy-tcode EQ gc_tcode_reubic   AND g_bt_grabar_reubicar IS NOT INITIAL ).

        CHECK gs_reubic-nlpla IS NOT INITIAL.
      ENDIF.
** KYVOR(AG) - FIM

      LOOP AT gt_reubic
      WHERE nlpla IS INITIAL.
        EXIT.
      ENDLOOP.
      IF NOT sy-subrc IS INITIAL.
        PERFORM create_ot_su
          USING g_lgnum
                g_lenum
                gs_reubic-nltyp
                gs_reubic-nlpla
                gs_reubic-nlber
                gc_bwlvs_999
       CHANGING g_tanum
                g_error.
        IF g_error IS INITIAL AND
           NOT g_tanum IS INITIAL.
*          g_message_number = '009'.
*          g_message_type = 'S'.
          g_msgv1 = g_lenum.
          g_msgv2 = gs_reubic-nlpla.
          g_msgv3 = g_tanum.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = g_msgv1
            IMPORTING
              output = g_msgv1.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = g_msgv3
            IMPORTING
              output = g_msgv3.

*          CLEAR g_msgv4.
*          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          MESSAGE ID 'ZWM_RF' TYPE 'S' NUMBER '009' WITH g_msgv1 g_msgv2 g_msgv3.
** KYVOR(AG) - INI - En el caso de que salga una bobina de zona roja (030),
** hay que hacer posteriormente a la OT, un traspaso mediante LQ02 mov 853,
** para dejarlo a libre. zona roja, esto se identificará si en la tabla de posición OT:
** LTAP el tipo de almacén de procedencia es: LTAP-VLTYP= 030, y el tipo de almacén
** destino LTAP-NLTYP# 030, así se identifica que sale del 030 a otro tipo de almacén,
          IF sy-tcode EQ gc_tcode_reubic AND g_trasp_libre_segundas IS NOT INITIAL
            AND gs_reubic-vltyp EQ gc_zona_roja AND gs_reubic-nltyp NE gc_zona_roja.

** Exibir a mensagem anterior antes de transferencia stock
            g_message_number = '009'.
            g_message_type = 'E'.
*            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

            "PERFORM transf_stock USING 1                " Message before output " Kyvor - RDM - 20190925
            PERFORM transf_stock USING 2                " Message before output " Kyvor - RDM - 20190925
                                       g_lgnum          " Núm.almacén/Complejo alm.
                                       gs_reubic-nltyp  " Tipo almacén
                                       gc_bwlvs-libre   " Cl.movim.gestión almacenes
                                       gs_reubic-lenum. " Número de unidad de almacén
            IF zcl_wm_rf_func=>check_parameter(
       iv_func   = zcl_wm_rf_func=>gc_func_no_boton_grab_reubicar
       iv_lgnum  = g_lgnum
   ) = abap_false. ""Kyvor(RDM) - 20190916
              PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
            ENDIF. ""Kyvor(RDM) - 20190916
          ENDIF.
** KYVOR(AG) - FIM

          CLEAR gs_lein.
          CLEAR gs_lqua.
          CLEAR gs_makt.
          CLEAR gs_reubic.
          CLEAR g_lenum.
          REFRESH gt_lqua.
          REFRESH gt_reubic.
          LEAVE TO SCREEN 0.
        ELSE.
          g_msgid = sy-msgid.
          g_message_number = sy-msgno.
          g_message_type = 'E'.
          CLEAR g_msgv1.
          CLEAR g_msgv2.
          CLEAR g_msgv3.
          CLEAR g_msgv4.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          g_msgid = 'ZWM_RF'.
        ENDIF.
      ENDIF.
    WHEN 'CANC'.
      CLEAR gs_lein.
      CLEAR gs_lqua.
      CLEAR gs_makt.
      CLEAR gs_reubic.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0072  INPUT
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
MODULE user_command_0072 INPUT.
  CASE ok_code.
    WHEN 'OK'.
      IF g_lenum IS INITIAL.
*Rellene una UA
        g_message_number = '005'.
        g_message_type = 'A'.
        CLEAR g_msgv1.
        CLEAR g_msgv2.
        CLEAR g_msgv3.
        CLEAR g_msgv4.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      ELSE.
        PERFORM get_su_data
              USING g_lenum
           CHANGING g_error.
        IF g_error IS INITIAL.

* NAC -> WM09 NO_MOVER_STOCK_BLOQUEADO •  ZWM_RF_016 "Expediciones"
*    Activación o desactivación de funcionalidad
          READ TABLE gt_func INTO DATA(ls_func_016)
          WITH KEY func = 'NO_MOVER_STOCK_BLOQUEADO'
                  (gv_lgnum_lg) = 'X'.
          READ TABLE gt_lqua INTO DATA(ls_lqua_016) INDEX 1.
          IF ls_func_016 IS NOT INITIAL.
            " Si está habilitada la func.
            IF ls_lqua_016-bestq IS INITIAL.
              " Si LS_LQUA-BESTQ está vacío.

              CLEAR g_lenum.
            ELSE.
* " Si está habilitada la func. y LS_LQUA-BESTQ no está vacío.
              MESSAGE ID 'ZWM_RF' TYPE 'E' NUMBER '073'.
            ENDIF.
          ELSE.
            " Si no esta habilitada la func.
            CLEAR g_lenum.

            IF ls_lqua_016-bestq EQ 'S'.
              PERFORM transf_stock USING 2      " cvivo - 61169 - Desbloquear
                    g_lgnum          " Núm.almacén/Complejo alm.
                    gs_reubic-lgtyp  " Tipo almacén
                    gc_bwlvs-libre   " Cl.movim.gestión almacenes
                    gs_reubic-lenum. " Número de unidad de almacén
            ENDIF.
          ENDIF.
* NAC <- WM09 NO_MOVER_STOCK_BLOQUEADO -> ZWM_RF_016 "Expediciones"
        ELSE.
          CLEAR gs_reubic.
          READ TABLE gt_reubic INTO gs_reubic
            INDEX g_lqua_index.
        ENDIF.
      ENDIF.
    WHEN 'NEXT'.
      IF g_lqua_index >= g_lqua_tot.
      ELSE.
        ADD 1 TO g_lqua_index.
        READ TABLE gt_reubic INTO gs_reubic
          INDEX g_lqua_index.
        IF sy-subrc IS INITIAL.
          CLEAR gs_lqua.
          MOVE-CORRESPONDING gs_reubic TO gs_lqua.
        ENDIF.
      ENDIF.

    WHEN 'PREV'.
      IF g_lqua_index > g_lqua_tot.
      ELSEIF g_lqua_index =< 1.
*        g_lqua_index = 1.
      ELSE.
        SUBTRACT 1 FROM g_lqua_index.
        READ TABLE gt_reubic INTO gs_reubic
          INDEX g_lqua_index.
        IF sy-subrc IS INITIAL.
          CLEAR gs_lqua.
          MOVE-CORRESPONDING gs_reubic TO gs_lqua.
        ENDIF.
      ENDIF.
    WHEN 'DEL'.
      IF NOT gt_reubic[] IS INITIAL.
        LOOP AT gt_reubic
          WHERE lenum = g_lenum. " cvivo
          LOOP AT gt_lips
             WHERE posnr = gt_reubic-posnrv.
            g_tabix = sy-tabix.
            IF gt_lips-lfimg > gt_lips-ormng.
              gt_lips-ormng = gt_lips-ormng
                            + gt_reubic-ctd_conf.
              IF gt_lips-ormng > gt_lips-lfimg.
                CONTINUE.
              ELSE.
                MODIFY gt_lips INDEX g_tabix
                  TRANSPORTING ormng.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
        DELETE gt_reubic
          WHERE lenum = gs_reubic-lenum.
        DESCRIBE TABLE gt_reubic LINES g_lqua_tot.
        IF g_lqua_index > g_lqua_tot.
          g_lqua_index = g_lqua_tot.
        ENDIF.
        CLEAR gs_reubic.
        IF NOT g_lqua_index IS INITIAL.
          READ TABLE gt_reubic INTO gs_reubic
            INDEX g_lqua_index.
        ENDIF.
      ENDIF.
    WHEN 'SAVE'.
      PERFORM post_out_delivery USING gs_likp-vbeln.
    WHEN 'DET'.
      IF NOT gs_reubic-matnr IS INITIAL.
        READ TABLE gt_lips WITH KEY matnr = gs_reubic-matnr.
        IF sy-subrc IS INITIAL.
          g_index = sy-tabix.
        ENDIF.
      ENDIF.
      PERFORM assign_lips_detail USING g_index.
      CALL SCREEN 0071.
      IF gs_reubic IS INITIAL.
        CLEAR gs_makt.
      ENDIF.
    WHEN 'CANC'.
      CLEAR gs_lein.
      CLEAR gs_lqua.
      CLEAR gs_makt.
      CLEAR gs_reubic.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
MODULE user_command_0030 INPUT.
  CASE ok_code.
    WHEN 'SAVE'.
      CLEAR ok_code.
      IF NOT gs_zwm_rf_mat_pend-lgpla IS INITIAL.
* seleccionamos los datos de ubicacion
        SELECT SINGLE lgber lgtyp lgpla
          INTO ( gs_reubic-nlber, gs_reubic-nltyp, gs_reubic-nlpla )
          FROM lagp
          WHERE lgpla = gs_reubic-nlpla AND
                lgnum = gs_param-lgnum.
        IF NOT sy-subrc IS INITIAL.
*   No existe la ubicación &
          g_message_number = '022'.
          g_message_type = 'A'.
          g_msgv1 = gs_reubic-nlpla.
          CLEAR g_msgv3.
          CLEAR g_msgv4.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        ELSE.
          PERFORM create_ot_su
            USING gs_param-lgnum
                  g_lenum
                  gs_reubic-nltyp
                  gs_reubic-nlpla
                  gs_reubic-nlber
                  gc_bwlvs_999
         CHANGING g_tanum
                  g_error.
          IF g_error IS INITIAL AND
             NOT g_tanum IS INITIAL.
            g_message_number = '009'.
            g_message_type = 'A'.
            g_msgv1 = g_lenum.
            g_msgv2 = gs_reubic-nlpla.
            g_msgv3 = g_tanum.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                input  = g_msgv1
              IMPORTING
                output = g_msgv1.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                input  = g_msgv3
              IMPORTING
                output = g_msgv3.

            CLEAR g_msgv4.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

            CLEAR gs_lein.
            CLEAR gs_lqua.
            CLEAR gs_makt.
            CLEAR gs_reubic.
            CLEAR g_lenum.
            REFRESH gt_lqua.
            REFRESH gt_reubic.
            LEAVE TO SCREEN 0.
          ELSE.
            g_msgid = sy-msgid.
            g_message_number = sy-msgno.
            g_message_type = 'E'.
            CLEAR g_msgv1.
            CLEAR g_msgv2.
            CLEAR g_msgv3.
            CLEAR g_msgv4.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
            g_msgid = 'ZWM_RF'.
          ENDIF.
        ENDIF.
      ENDIF.
    WHEN 'UBICACION'.
      PERFORM listar_ubicaciones_mp.

** KYVOR(AG) - INI - Una vez confirmada la OT, deberá de hacer un  traspaso a
** bloqueado movimiento 854 mediante la función asociada a la LQ02,
** funcionalmente hace así:
      PERFORM save_without_bt.
** KYVOR(AG) - FIM


    WHEN 'CANC'.
      CLEAR gs_lein.
      CLEAR gs_lqua.
      CLEAR gs_makt.
      CLEAR gs_reubic.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.

MODULE user_command_0031 INPUT.
  CASE ok_code.
    WHEN 'SAVE'.
      CLEAR ok_code.
      PERFORM modificar_cantidad_ua.
    WHEN 'CANC'.
      CLEAR gs_lein.
      CLEAR gs_lqua.
      CLEAR gs_makt.
      CLEAR gs_reubic.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.

MODULE check_nlpla.
  IF gs_reubic-nlpla IS INITIAL.
    CLEAR gs_reubic-nlpla.
    MODIFY gt_reubic FROM gs_reubic
*          INDEX g_lqua_index
        TRANSPORTING nltyp nlpla
        WHERE nltyp <> gs_reubic-nltyp AND
              nlpla <> gs_reubic-nlpla.
  ELSE.
    SELECT SINGLE lgnum lgtyp lgpla lgber
      INTO (g_lgnum_aux, gs_reubic-nltyp, gs_reubic-nlpla,
            gs_reubic-nlber)
      FROM lagp
      WHERE lgnum = g_lgnum AND
            lgpla = gs_reubic-nlpla.
    IF sy-subrc IS INITIAL.
      MODIFY gt_reubic FROM gs_reubic
*          INDEX g_lqua_index
          TRANSPORTING nltyp nlpla
          WHERE nltyp <> gs_reubic-nltyp AND
                nlpla <> gs_reubic-nlpla.
    ELSE.
*   La Ubicación & no existe en el Almacén &
      g_message_number = '077'.
      g_message_type = 'A'.
      g_msgv1 = gs_reubic-nlpla.
      g_msgv1 = g_lgnum.
      CLEAR g_msgv2.
      CLEAR g_msgv3.
      CLEAR g_msgv4.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
      CLEAR: gs_reubic-nlpla, ok_code. " 61754 - para que no se pierda la lectura de la UA
    ENDIF.
  ENDIF.
ENDMODULE.
MODULE exit_screen.
  LEAVE TO SCREEN 0.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0060  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0060 INPUT.
  CLEAR g_error.
  CASE ok_code.
    WHEN 'OK'.
      CLEAR ok_code.
      PERFORM check_delivery_pend
          USING gs_likp-vbeln.
      IF g_error IS INITIAL.
        PERFORM show_delivery USING gs_likp-vbeln.
      ENDIF.
    WHEN 'PENDIENTES'.
      PERFORM get_delivery_pend_list.
    WHEN OTHERS.
      CLEAR ok_code.
  ENDCASE.
ENDMODULE.
MODULE user_command_0070 INPUT.
  CLEAR g_error.
  CASE ok_code.
    WHEN 'OK'.
      CLEAR ok_code.
      PERFORM check_out_delivery_pend
          USING gs_likp-vbeln.
      IF g_error IS INITIAL.
        PERFORM show_out_delivery USING gs_likp-vbeln.
      ENDIF.
    WHEN 'PENDIENTES'.
      PERFORM get_out_delivery_pend_list.
    WHEN OTHERS.
      CLEAR ok_code.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0061  INPUT
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
MODULE user_command_0061 INPUT.
  CASE ok_code.
    WHEN 'NEXT'.
      IF g_index >= g_lineas.
      ELSE.
        ADD 1 TO g_index.
        PERFORM assign_lips_detail USING g_index.
      ENDIF.

    WHEN 'PREV'.
      IF g_index <= 1.
        g_index = 1.
      ELSE.
        SUBTRACT 1 FROM g_index.
        PERFORM assign_lips_detail USING g_index.
      ENDIF.
    WHEN 'SAVE'.
      PERFORM post_delivery USING gs_likp-vbeln.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0071  INPUT
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
MODULE user_command_0071 INPUT.
  CASE ok_code.
    WHEN 'NEXT'.
      IF g_index >= g_lineas.
      ELSE.
        ADD 1 TO g_index.
        PERFORM assign_lips_detail USING g_index.
      ENDIF.

    WHEN 'PREV'.
      IF g_index <= 1.
        g_index = 1.
      ELSE.
        SUBTRACT 1 FROM g_index.
        PERFORM assign_lips_detail USING g_index.
      ENDIF.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0032  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0032 INPUT.
  CASE ok_code.
    WHEN 'SAVE'.
      CLEAR ok_code.
      PERFORM consumo_material_aux.
    WHEN 'CANC'.
      CLEAR  g_lenum.
      CLEAR gs_lein.
      CLEAR gs_lqua.
      CLEAR gs_makt.
      CLEAR gs_reubic.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.



MODULE user_command_0076 INPUT.

  DATA: lt_xvttk                TYPE TABLE OF vttkvb,
        lt_yvttk                TYPE TABLE OF vttkvb,
        ls_yvttk                TYPE vttkvb,
        ls_xvttk_new            TYPE vttkvb,
        ls_tvtk                 TYPE tvtk,
        lt_xvttp                TYPE vttpvb_tab,
        lt_yvttp                TYPE vttpvb_tab,
        lt_xvtts                TYPE vttsvb_tab,
        lt_yvtts                TYPE vttsvb_tab,
        lt_xvtsp                TYPE vtspvb_tab,
        lt_yvtsp                TYPE vtspvb_tab,
        lt_xvbpa                TYPE vbpa_tab,
        lt_yvbpa                TYPE vbpa_tab,
        lt_xvbadr               TYPE tt_sadrvb,
        lt_yvbadr               TYPE tt_sadrvb,
        lt_xtrlk                TYPE vtrlk_tab,
        lt_xtrlp                TYPE vtrlp_tab,
        lv_log_always           TYPE  c,
        lv_log_on_error_warning TYPE  c,
        lv_save_log             TYPE  c,
        ls_split_dialog_wa      TYPE  ledsp_all,
        lv_tabix                TYPE sy-tabix.


  CASE ok_code.
    WHEN 'OK'.
      IF gt_select_list-zzpeso_alb IS INITIAL.
*       Debe rellenar el peso
        g_message_number = '071'.
        g_message_type = 'A'.
        CLEAR g_msgv1.
        CLEAR g_msgv2.
        CLEAR g_msgv3.
        CLEAR g_msgv4.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

      ELSE.

        CLEAR: lv_tabix.
        READ TABLE gt_vttk INTO DATA(ls_vttk)
        WITH KEY tknum = gt_select_list-obj_number.

        lv_tabix = sy-tabix.

        IF sy-subrc = 0.

          APPEND ls_vttk TO lt_xvttk.

          ls_vttk-zzpeso_alb = gt_select_list-zzpeso_alb.

          MODIFY gt_vttk FROM ls_vttk
          INDEX lv_tabix TRANSPORTING zzpeso_alb .

          APPEND ls_vttk TO lt_yvttk.
          MOVE-CORRESPONDING ls_vttk TO ls_xvttk_new.

          MOVE-CORRESPONDING ls_vttk TO ls_tvtk.

*        Se informa al transporte
          CALL FUNCTION 'SD_SHIPMENT_HEADER_CHANGE'
            EXPORTING
              i_tvtk                       = ls_tvtk
*             I_DESTINATION                =
*             I_DEPARTURE                  =
*             OPT_DIALOG                   = 'X'
*         IMPORTING
*             E_SERV_AGENT_FROM_DELIVERY   =
*             E_ROUTE_FROM_DELIVERY        =
*             E_LEG_DETERMINATION_DONE     =
*             E_NUMBER_OF_CHANGED_LEGS     =
            TABLES
              c_xvttk                      = lt_xvttk
              c_yvttk                      = lt_yvttk
              c_xvttp                      = lt_xvttp
              c_yvttp                      = lt_yvttp
              c_xvtts                      = lt_xvtts
              c_yvtts                      = lt_yvtts
              c_xvtsp                      = lt_xvtsp
              c_yvtsp                      = lt_yvtsp
              c_xvbpa                      = lt_xvbpa
              c_yvbpa                      = lt_yvbpa
              c_xvbadr                     = lt_xvbadr
              c_yvbadr                     = lt_yvbadr
              i_xtrlk                      = lt_xtrlk
              i_xtrlp                      = lt_xtrlp
*             I_DEPARTURE_SEQUENCE         =
*             I_XVTFA                      =
*             I_YVTFA                      =
            CHANGING
              c_xvttk_new                  = ls_xvttk_new
            EXCEPTIONS
              invalid_change               = 1
              route_insert_failed          = 2
              tdlnr_insert_failed          = 3
              status_planned_failed        = 4
              status_registrated_failed    = 5
              status_loading_start_failed  = 6
              status_loading_end_failed    = 7
              status_completion_failed     = 8
              status_shipment_start_failed = 9
              status_shipment_end_failed   = 10
              OTHERS                       = 11.
          IF sy-subrc <> 0.
*           No se ha podido modificar el transporte &
            g_message_number = '072'.
            g_message_type = 'E'.
            MOVE gt_select_list-obj_number TO g_msgv1.
            CLEAR g_msgv2.
            CLEAR g_msgv3.
            CLEAR g_msgv4.
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

          ELSE.

            CLEAR: ls_yvttk.
            MOVE-CORRESPONDING ls_vttk TO ls_yvttk.
            APPEND ls_yvttk TO lt_yvttk.

            CALL FUNCTION 'SD_SHIPMENTS_SAVE'
              EXPORTING
                i_transaktionstyp      = 'V'
*               I_UPD_DEADLINES        = 'X'
*               I_UPD_TEXTS            = 'X'
*               I_UPD_SHIPPING_UNITS   = 'X'
*               I_UPD_OUTPUT           = 'X'
*               I_OPT_UPDATE_TASK      = 'X'
*               I_OPT_ACTIVITIES       = 'X'
*               I_OPT_NO_STATISTICS    = ' '
*               I_OPT_READ_SHIP_UNITS  = 'X'
*****               I_FLAG_TRA_COMPLETE          = 'X'
                i_flag_tra_complete    = 'C'
*               I_TRA_SAVE_CALLER      =
                i_tra_save_caller      = 'DIA'
              IMPORTING
                e_log_always           = lv_log_always
                e_log_on_error_warning = lv_log_on_error_warning
                e_save_log             = lv_save_log
              TABLES
                i_xvttk                = lt_xvttk
                i_yvttk                = lt_yvttk
                i_xvttp                = lt_xvttp
                i_yvttp                = lt_yvttp
*               I_VTRLK                =
*               I_VTRLP                =
*               I_XVTTS                =
*               I_YVTTS                =
*               I_XVTSP                =
*               I_YVTSP                =
*               I_XVBPA                =
*               I_YVBPA                =
*               I_XSADR                =
*               I_YSADR                =
*               I_XVTFA                =
*               I_YVTFA                =
*               I_XVEKP                =
*               I_YVEKP                =
*               I_XVEPO                =
*               I_YVEPO                =
              CHANGING
                c_split_dialog_wa      = ls_split_dialog_wa
              EXCEPTIONS
                no_change              = 1
                delivery_split_error   = 2
                OTHERS                 = 3.
            IF sy-subrc <> 0.
*           No se ha podido modificar el transporte &
              g_message_number = '072'.
              g_message_type = 'E'.
              MOVE gt_select_list-obj_number TO g_msgv1.
              CLEAR g_msgv2.
              CLEAR g_msgv3.
              CLEAR g_msgv4.
              PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
            ENDIF.

          ENDIF.

        ENDIF.


        LEAVE TO SCREEN 0.
      ENDIF.
    WHEN 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0079  INPUT
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
MODULE user_command_0079 INPUT.

  RANGES: lrng_mtart FOR mara-mtart,
          lrng_matkl FOR mara-matkl,
          lrng_matnr FOR mara-matnr.

  DATA: lsrng_mtart LIKE LINE OF lrng_mtart,
        lsrng_matkl LIKE LINE OF lrng_matkl,
        lsrng_matnr LIKE LINE OF lrng_matnr,
*        lt_mara          TYPE TABLE OF mara,
        ls_mara     TYPE mara.


  CLEAR: ls_mara_mard_red.

*  CASE ok_code.
  IF ok_code EQ  'BOBINA' OR g_option EQ 01.
*      Se parametrizará como select options
    SELECT * FROM tvarvc INTO TABLE @DATA(lt_tvarvc)
      WHERE name EQ 'ZWM_TIPO_MAT_BOBINA'.
    ok_code = 'BOBINA'.
  ENDIF.
  IF ok_code EQ  'PAL' OR g_option EQ 02.

*      Se parametrizará como select options
    SELECT * FROM tvarvc INTO TABLE lt_tvarvc
      WHERE name EQ 'ZWM_TIPO_MAT_PALLET'.
    ok_code = 'PAL'.
  ENDIF.
*    WHEN 'CANC'.
*      LEAVE TO SCREEN 0.
*  ENDCASE.


**  CASE ok_code.
**    WHEN 'BOBINA'.
**
***      Se parametrizará como select options
**      SELECT * FROM tvarvc INTO TABLE @DATA(lt_tvarvc)
**        WHERE name EQ 'ZWM_TIPO_MAT_BOBINA'.
**
**    WHEN 'PAL'.
**
***      Se parametrizará como select options
**      SELECT * FROM tvarvc INTO TABLE lt_tvarvc
**        WHERE name EQ 'ZWM_TIPO_MAT_PALLET'.
**
***    WHEN 'CANC'.
***      LEAVE TO SCREEN 0.
**  ENDCASE.

  gv_tipo_mat = ok_code.

  IF lt_tvarvc[] IS INITIAL.
*    No está configurada la tabla 'TVARVC'
    g_message_number = '074'.
    g_message_type = 'A'.
    CLEAR g_msgv1.
    CLEAR g_msgv2.
    CLEAR g_msgv3.
    CLEAR g_msgv4.
    PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

  ELSE.
    REFRESH: lrng_mtart, gt_mara_mard_red.

*    LOOP AT lt_tvarvc INTO DATA(ls_tvarvc).
    CLEAR: ls_tvarvc.
    LOOP AT lt_tvarvc INTO ls_tvarvc.
      MOVE-CORRESPONDING ls_tvarvc TO lsrng_mtart.
      lsrng_mtart-option = ls_tvarvc-opti.
      APPEND lsrng_mtart TO lrng_mtart.
    ENDLOOP.

*    REFRESH: gt_mara_red.
*    SELECT matnr mtart matkl zzgramaje zzancho zzlargo
*    INTO TABLE gt_mara_red
*    FROM mara
*    WHERE mtart IN lrng_mtart.
*
    LOOP AT gt_mara_red INTO DATA(ls_mara_red).
*      CLEAR: lsrng_matnr.
*      lsrng_matnr-option = 'CP'.
*      lsrng_matnr-sign = 'I'.
*
*      CONCATENATE '*' ls_mara_red-matkl '*' INTO lsrng_matnr-low.
*
*      APPEND lsrng_matnr TO lrng_matnr.
    ENDLOOP.
*
*    SORT lrng_matnr BY low.
*    DELETE ADJACENT DUPLICATES FROM lrng_matnr COMPARING low.
*
*
*    IF lrng_matnr[] IS NOT INITIAL.

*      Se tiene que sacar más materiales de los que se quieren
*      porque se busca con '*' por delante y por detrás
*      Y sacar todos los MARD's para luego filtrar, tardaría
*      más en tiempo ejecución
    SELECT d~matnr, d~werks, d~lgort, d~labst, a~matkl, a~mtart,
           b~wgbez60, a~zzgramaje, a~zzancho, a~zzlargo
      INTO TABLE @DATA(lt_mard_red)
      FROM mard AS d
        INNER JOIN mara AS a
        ON d~matnr EQ a~matnr
        INNER JOIN t023t AS b
        ON a~matkl EQ b~matkl
      WHERE d~matnr IN @lrng_matnr
        AND d~werks = @gs_param-werks
        AND d~lgort = @gs_param-lgort
        AND d~labst > 0
        AND a~mtart IN @lrng_mtart
        AND b~spras = 'S'. "FCARDONA - Descriptivos en castellano.

    REFRESH: lrng_matnr, lrng_matkl.

    LOOP AT lt_mard_red INTO DATA(ls_mard_red).
      CLEAR: ls_mara_mard_red, ls_mara_red.

      MOVE-CORRESPONDING ls_mard_red TO ls_mara_mard_red.
      APPEND ls_mara_mard_red TO gt_mara_mard_red.

      MOVE-CORRESPONDING ls_mard_red TO ls_mara_red.
      APPEND ls_mara_red TO gt_mara_red.
    ENDLOOP.

    SORT gt_mara_mard_red BY matkl.
    DELETE ADJACENT DUPLICATES FROM gt_mara_mard_red COMPARING matkl.

*      CLEAR: lsrng_matkl.
*
*      lsrng_matkl-option = 'CP'.
*      lsrng_matkl-sign = 'I'.
*
*      SHIFT ls_mard_red-matnr LEFT DELETING LEADING '0'.
*      CONDENSE ls_mard_red-matnr.
**        CONCATENATE ls_mara_red-matnr+2 '*' INTO lsrng_matkl-low.
*      lsrng_matkl-low = ls_mard_red-matnr(5).
**
*      APPEND lsrng_matkl TO lrng_matkl.
*    ENDLOOP.
*
*    SORT lrng_matkl BY low.
*    DELETE ADJACENT DUPLICATES FROM lrng_matkl COMPARING low.
*
*    SELECT * INTO TABLE @DATA(lt_t023t_red)
*    FROM t023t
*    WHERE spras = @sy-langu AND matkl IN @lrng_matkl.
*
*
*    IF sy-subrc = 0.
*      LOOP AT lt_t023t_red INTO DATA(ls_t023t_red).
*        MOVE-CORRESPONDING ls_t023t_red TO ls_mara_mard_red.
*
*        CLEAR: ls_mara_red.
*        READ TABLE gt_mara_red INTO ls_mara_red
*        WITH KEY matkl = ls_t023t_red-matkl.
*
*        MOVE-CORRESPONDING ls_mara_red TO ls_mara_mard_red.
*
*        CLEAR: ls_mard_red.
*        READ TABLE lt_mard_red INTO ls_mard_red
*        WITH KEY matnr = ls_mara_red-matnr
*                 werks = gs_param-werks
*                 lgort = gs_param-lgort.
**          ls_mara_mard_red-mtart = ls_mara_red-mtart.
**          ls_mara_mard_red-matkl = ls_mara_red-matkl.
*
*        APPEND ls_mara_mard_red TO gt_mara_mard_red.
*      ENDLOOP.
*    ENDIF.


    IF gt_mara_mard_red[] IS NOT INITIAL.
      g_local_previous_screen = sy-dynnr.
      CALL SCREEN '0080'.
    ENDIF.

*    ELSE.
**    No hay materiales con los tipos parametrizados
*      g_message_number = '075'.
*      g_message_type = 'E'.
*      CLEAR g_msgv1.
*      CLEAR g_msgv2.
*      CLEAR g_msgv3.
*      CLEAR g_msgv4.
*      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*    ENDIF.

  ENDIF.
ENDMODULE.

** KYVOR(AG) - INI - Una vez confirmada la OT, deberá de hacer un  traspaso a
** bloqueado movimiento 854 mediante la función asociada a la LQ02,
** funcionalmente hace así:
*&---------------------------------------------------------------------*
*&      Form  SAVE_WITHOUT_BT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM save_without_bt .

  CHECK gs_reubic-nlpla   IS NOT INITIAL.
  CHECK g_bt_grabar_zroja IS NOT INITIAL.

  CLEAR ok_code.
  IF NOT gs_zwm_rf_mat_pend-lgpla IS INITIAL.
* seleccionamos los datos de ubicacion
    SELECT SINGLE lgber lgtyp lgpla
      INTO ( gs_reubic-nlber, gs_reubic-nltyp, gs_reubic-nlpla )
      FROM lagp
      WHERE lgpla = gs_reubic-nlpla AND
            lgnum = gs_param-lgnum.
    IF NOT sy-subrc IS INITIAL.
*   No existe la ubicación &
      g_message_number = '022'.
      g_message_type = 'A'.
      g_msgv1 = gs_reubic-nlpla.
      CLEAR g_msgv3.
      CLEAR g_msgv4.
      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
    ELSE.
      PERFORM create_ot_su
        USING gs_param-lgnum
              g_lenum
              gs_reubic-nltyp
              gs_reubic-nlpla
              gs_reubic-nlber
              gc_bwlvs_999
     CHANGING g_tanum
              g_error.
      IF g_error IS INITIAL AND
         NOT g_tanum IS INITIAL.
        g_message_number = '009'.
        g_message_type = 'A'.
        g_msgv1 = g_lenum.
        g_msgv2 = gs_reubic-nlpla.
        g_msgv3 = g_tanum.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = g_msgv1
          IMPORTING
            output = g_msgv1.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = g_msgv3
          IMPORTING
            output = g_msgv3.

        CLEAR g_msgv4.
*        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.

        IF g_trasp_bloq_segundas IS NOT INITIAL.
          "PERFORM transf_stock USING 1                " Messsage before output " Kyvor - RDM - 20190925
          PERFORM transf_stock USING 2                " Messsage before output " Kyvor - RDM - 20190925
                                     gs_param-lgnum   " Núm.almacén/Complejo alm.
                                     gs_reubic-nltyp  " Tipo almacén
                                     gc_bwlvs-bloq    " Cl.movim.gestión almacenes
                                     g_lenum.         " Número de unidad de almacén
          IF zcl_wm_rf_func=>check_parameter(
       iv_func   = zcl_wm_rf_func=>gc_func_no_boton_grabar_zroja
       iv_lgnum  = gs_param-lgnum
   ) = abap_false. "Kyvor(RDM) - 20190916
            PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
          ENDIF. "Kyvor(RDM) - 20190916
        ELSE.
          PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        ENDIF.

        CLEAR gs_lein.
        CLEAR gs_lqua.
        CLEAR gs_makt.
        CLEAR gs_reubic.
        CLEAR g_lenum.
        REFRESH gt_lqua.
        REFRESH gt_reubic.
        LEAVE TO SCREEN 0.
      ELSE.
        g_msgid = sy-msgid.
        g_message_number = sy-msgno.
        g_message_type = 'E'.
        CLEAR g_msgv1.
        CLEAR g_msgv2.
        CLEAR g_msgv3.
        CLEAR g_msgv4.
        PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
        g_msgid = 'ZWM_RF'.
      ENDIF.
    ENDIF.
  ENDIF.


ENDFORM.
** KYVOR(AG) - FIM
MODULE user_command_0101 INPUT.
  CASE ok_code.
    WHEN 'SAVE' OR 'OK'.
        CHECK gs_reubic-nlpla IS NOT INITIAL.

        LEAVE TO SCREEN 0.

    WHEN 'CANC'.
      CLEAR gs_lein.
      CLEAR gs_lqua.
      CLEAR gs_makt.
      CLEAR gs_reubic.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
