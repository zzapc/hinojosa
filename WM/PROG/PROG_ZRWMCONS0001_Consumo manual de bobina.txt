*&---------------------------------------------------------------------*
*& Report  ZRWMCONS0001
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zrwmcons0001.


**************************
* Tipos de datos
**************************
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zwm_s_consumos_manuales.
       TYPES END OF st_lin_alv.

TYPES: BEGIN OF st_llamada_consumo,
         werks        TYPE werks_d,
         lgpla        TYPE lgpla,
         id_pedido    TYPE zui5_wm_s_pedidos_consumo-id,
         id_bobina    TYPE zui5_wm_s_bobinas-id,
         lenum        TYPE lqua-lenum,
         diametro     TYPE zui5_wm_s_bobinas-diametro,
         charg        TYPE charg_d,
         diametro_ini TYPE zui5_wm_s_bobinas-diametro,
         kg_ini       TYPE menge_d,
       END OF st_llamada_consumo.

TYPES: BEGIN OF st_listas_aprov,
         lgpla         TYPE lgpla,
         t_lista_aprov TYPE zwm_nt_ui5_aprov_list_tab,
       END OF st_listas_aprov.

**************************
* Variables globales
**************************
DATA: tg_llamadas_consumo TYPE TABLE OF st_llamada_consumo,
      tg_listas_aprov     TYPE TABLE OF st_listas_aprov.


"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.


**************************
* PAntalla de selección
**************************

PARAMETERS: p_werks TYPE t001w-werks.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
PARAMETERS: rb_tpo RADIOBUTTON GROUP g1 DEFAULT 'X' USER-COMMAND rb,
            rb_man RADIOBUTTON GROUP g1.
SELECTION-SCREEN END OF BLOCK b1.



SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-t02.
PARAMETERS: p_lgpla TYPE lagp-lgpla MODIF ID man.
PARAMETERS: p_aufnr TYPE aufk-aufnr MODIF ID man.
PARAMETERS: p_lenum TYPE lqua-lenum MODIF ID man.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(31) text-001 FOR FIELD p_verme MODIF ID man.
SELECTION-SCREEN POSITION 33.
PARAMETERS p_verme TYPE lqua-verme MODIF ID man.
SELECTION-SCREEN POSITION 52.
PARAMETERS: p_meins TYPE lqua-meins MODIF ID man.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN SKIP 1.
PARAMETERS: p_diam TYPE zui5_wm_s_bobinas-diametro MODIF ID man.
SELECTION-SCREEN END OF BLOCK b2.


SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE text-t03.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(31) text-002 FOR FIELD p_fecini MODIF ID tpo.
SELECTION-SCREEN POSITION 33.
PARAMETERS: p_fecini TYPE begda MODIF ID tpo.
SELECTION-SCREEN POSITION 45.
PARAMETERS: p_horini TYPE beguz MODIF ID tpo.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(31) text-003 FOR FIELD p_fecfin MODIF ID tpo.
SELECTION-SCREEN POSITION 33.
PARAMETERS: p_fecfin TYPE endda MODIF ID tpo.
SELECTION-SCREEN POSITION 45.
PARAMETERS: p_horfin TYPE enduz MODIF ID tpo.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK b3.



**************************
* Eventos
**************************

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    CASE screen-group1.
      WHEN 'MAN'.
        screen-active = SWITCH #( rb_man WHEN 'X' THEN  1 ELSE 0 ).
        MODIFY SCREEN.
      WHEN 'TPO'.
        screen-active = SWITCH #( rb_tpo WHEN 'X' THEN  1 ELSE 0 ).
        MODIFY SCREEN.
    ENDCASE.
  ENDLOOP.

AT SELECTION-SCREEN.
  IF sy-ucomm = 'ONLI'.
    IF p_werks IS INITIAL.
      MESSAGE 'Debe indicar centro' TYPE 'E'.
    ENDIF.


    IF rb_tpo = 'X'.
      IF p_fecini IS INITIAL.
        MESSAGE 'Debe indicar fecha de inicio' TYPE 'E'.
      ENDIF.
      IF p_fecfin IS INITIAL.
        MESSAGE 'Debe indicar fecha de fin' TYPE 'E'.
      ENDIF.
    ENDIF.
  ENDIF.



*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.

  vg_no_justif_cols = 'X'.
  wa_layout-sel_mode  = 'D'.
*  vg_alv_protegido_por_defecto = vg_edit.

  PERFORM f_config_dynpro     USING  '0100' ''      'T01' 'STA_100' ' ' space.
  PERFORM f_config_subscreen  USING  '0100' '0110' 'CC_ALV' 'T01' space.

  DATA: wl_config_edit TYPE st_config_edit.
  wl_config_edit-dynpro                 = '0110'.
  PERFORM f_config_dynpro_edit    USING  wl_config_edit.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES tp_catalogo TYPE lvc_t_fcat USING vp_dynnr.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZWM_S_CONSUMOS_MANUALES'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = tp_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
    CASE <fs_catalogo>-fieldname.
      WHEN 'CLA_CONSUMO'.
        <fs_catalogo>-checkbox = 'X'.
        <fs_catalogo>-outputlen = 8.
      WHEN 'ERROR'.
        <fs_catalogo>-checkbox = 'X'.
        <fs_catalogo>-outputlen = 8.
      WHEN 'CLA_CONSUMO_REALIZADO'.
        <fs_catalogo>-checkbox = 'X'.
        <fs_catalogo>-outputlen = 12.
      WHEN 'TEXTO'.
        <fs_catalogo>-outputlen = 80.
    ENDCASE.
  ENDLOOP.

  PERFORM f_crear_sort USING 1 'WERKS'      space space.
  PERFORM f_crear_sort USING 2 'LGNUM'      space space.
*  PERFORM f_crear_sort USING 3 'ID_BOB_ECM' space space.
  PERFORM f_crear_sort USING 3 'LENUM'      space space.
  PERFORM f_crear_sort USING 4 'RESTANTE'   space 'X'.


ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  F_START_OF_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv USING vp_dynpro.
  CHECK vp_dynpro = '0110'.
  CLEAR tg_llamadas_consumo.
  CLEAR tg_listas_aprov.
  CLEAR it_alv.


  DATA(rl_consumos) = NEW zcl_zui5_wm_consumos_dpc_imp( ).
  DATA(rl_nt)       = NEW zcl_zui5_wm_nt_dpc_ext( ).
  TRY.
      DATA(wl_centro)   = rl_consumos->centros_getdetail( p_werks ).
    CATCH /iwbep/cx_mgw_busi_exception INTO DATA(rl_exc).
      MESSAGE rl_exc->get_text( ) TYPE 'E'.
  ENDTRY.

  CASE 'X'.
    WHEN rb_man.
      SELECT SINGLE aufnr, rsnum
        INTO @DATA(wl_afko)
        FROM afko
        WHERE aufnr = @p_aufnr.
      IF sy-subrc <> 0.
        MESSAGE 'Orden incorrecta' TYPE 'E'.
      ENDIF.

      APPEND INITIAL LINE TO tg_llamadas_consumo ASSIGNING FIELD-SYMBOL(<fs_llamadas_consumo>).
      <fs_llamadas_consumo>-werks     = p_werks.
      <fs_llamadas_consumo>-lgpla     = p_lgpla.
      <fs_llamadas_consumo>-id_pedido = wl_afko-rsnum.
      <fs_llamadas_consumo>-id_bobina = p_lenum.
      <fs_llamadas_consumo>-diametro  = p_diam.


    WHEN rb_tpo.
      DATA: tl_created_at_rg TYPE RANGE OF zwm_ecm_bobine-created_at.
      CONVERT DATE p_fecini TIME p_horini INTO TIME STAMP DATA(vl_timestamp_ini) TIME ZONE sy-zonlo.
      CONVERT DATE p_fecfin TIME p_horfin INTO TIME STAMP DATA(vl_timestamp_fin) TIME ZONE sy-zonlo.
      tl_created_at_rg = VALUE #( ( sign = 'I' option = 'BT' low = vl_timestamp_ini high = vl_timestamp_fin ) ).

      SELECT *
        INTO TABLE @DATA(tl_zwm_ecm_bobine)
        FROM zwm_ecm_bobine
        WHERE lgnum = @wl_centro-lgnum  AND
              saved = 'X'               AND
              created_at IN @tl_created_at_rg
        ORDER BY bobine, diametro DESCENDING.

      DATA: wl_bobina	TYPE zui5_wm_s_bobinas,
            wl_return	TYPE bapiret2.

      DATA: tl_timetickets        TYPE bapi_pp_timeticket_tt,
            tl_goodsmovements	    TYPE bapi2017_gm_item_create_t,
            tl_link_conf_goodsmov	TYPE bapi_link_conf_goodsmov_tt.


      DATA vl_lgpla TYPE lgpla.
      LOOP AT tl_zwm_ecm_bobine ASSIGNING FIELD-SYMBOL(<fs_ecm_bobine>).
        CLEAR vl_lgpla.
        CASE <fs_ecm_bobine>-created_by.
          WHEN 'OPEPRORHP1'.
            vl_lgpla = 'OND1'.
          WHEN 'OPEPRORHP2'.
            vl_lgpla = 'OND2'.
          WHEN 'OPEPRORHP3'.
            vl_lgpla = 'OND3'.
          WHEN 'OPEPRORHP4'.
            vl_lgpla = 'OND4'.
          WHEN 'OPEPRORHP5'.
            vl_lgpla = 'OND5'.
        ENDCASE.

        APPEND INITIAL LINE TO tg_llamadas_consumo ASSIGNING <fs_llamadas_consumo>.
        <fs_llamadas_consumo>-werks     = p_werks.
        <fs_llamadas_consumo>-lgpla     = vl_lgpla.
        <fs_llamadas_consumo>-id_pedido = <fs_ecm_bobine>-id_bob_ecm.
        <fs_llamadas_consumo>-id_bobina = <fs_ecm_bobine>-bobine.
        <fs_llamadas_consumo>-lenum     = <fs_ecm_bobine>-bobine.
        <fs_llamadas_consumo>-diametro  = <fs_ecm_bobine>-diametro.


        IF <fs_llamadas_consumo>-lgpla IS NOT INITIAL.
          READ TABLE tg_listas_aprov TRANSPORTING NO FIELDS WITH KEY lgpla = <fs_llamadas_consumo>-lgpla.
          IF sy-subrc <> 0.
            APPEND INITIAL LINE TO tg_listas_aprov ASSIGNING FIELD-SYMBOL(<fs_listas_aprov>).
            <fs_listas_aprov>-lgpla = <fs_llamadas_consumo>-lgpla.
            TRY.
                <fs_listas_aprov>-t_lista_aprov =  rl_nt->lista_aprov_pp_getlist( vp_werks = <fs_llamadas_consumo>-werks
                                                                                  vp_lgpla = <fs_llamadas_consumo>-lgpla
                                                                                  vp_mostrar_inactivos = 'X' ).
              CATCH /iwbep/cx_mgw_busi_exception.
            ENDTRY.

          ENDIF.
        ENDIF.

      ENDLOOP.
  ENDCASE.


  IF tg_llamadas_consumo IS NOT INITIAL.
    SELECT lgnum, lenum, verme, gesme, meins, charg, matnr
      INTO TABLE @DATA(tl_lqua)
      FROM lqua
      FOR ALL ENTRIES IN @tg_llamadas_consumo
      WHERE lgnum = @wl_centro-lgnum AND
            lenum = @tg_llamadas_consumo-lenum.

    SORT tl_lqua BY lenum verme DESCENDING gesme DESCENDING.

    SELECT lgnum, tanum, tapos, brgew, gewei, vlenr, charg, matnr
      INTO TABLE @DATA(tl_ltap)
      FROM ltap
      FOR ALL ENTRIES IN @tg_llamadas_consumo
      WHERE lgnum = @wl_centro-lgnum AND
            vlenr = @tg_llamadas_consumo-lenum.
    SORT tl_ltap BY tanum.
  ENDIF.

  LOOP AT tg_llamadas_consumo ASSIGNING <fs_llamadas_consumo>.
    READ TABLE tl_lqua ASSIGNING FIELD-SYMBOL(<fs_lqua>) WITH KEY lenum = <fs_llamadas_consumo>-lenum.
    IF sy-subrc = 0.
      <fs_llamadas_consumo>-charg = <fs_lqua>-charg.
    ELSE.
      READ TABLE tl_ltap ASSIGNING FIELD-SYMBOL(<fs_ltap>) WITH KEY vlenr = <fs_llamadas_consumo>-lenum.
      IF sy-subrc = 0.
        <fs_llamadas_consumo>-charg = <fs_ltap>-charg.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF tg_llamadas_consumo IS NOT INITIAL.
    SELECT mblnr, mjahr, werks, charg, bwart, menge, meins
      INTO TABLE @DATA(tl_mseg)
      FROM mseg
      FOR ALL ENTRIES IN @tg_llamadas_consumo
      WHERE werks = @wl_centro-werks AND
            charg = @tg_llamadas_consumo-charg AND
            bwart = '101'.
  ENDIF.



  DATA wl_llamada_consumo_ant LIKE LINE OF tg_llamadas_consumo.
  DATA wl_alv LIKE LINE OF it_alv.
  DATA vl_error TYPE xfeld.

  LOOP AT tg_llamadas_consumo ASSIGNING <fs_llamadas_consumo>.
    LOOP AT tl_mseg ASSIGNING FIELD-SYMBOL(<fs_mseg>) WHERE charg = <fs_llamadas_consumo>-charg.
      ADD <fs_mseg>-menge TO <fs_llamadas_consumo>-kg_ini.
    ENDLOOP.

    CLEAR vl_error.
    CLEAR wl_alv.
    wl_alv-werks       = wl_centro-werks.
    wl_alv-lgnum       = wl_centro-lgnum.
    wl_alv-id_bob_ecm  = <fs_llamadas_consumo>-id_pedido.
    wl_alv-lenum       = <fs_llamadas_consumo>-id_bobina.
    wl_alv-restante    = <fs_llamadas_consumo>-diametro.
    wl_alv-meins       = zcl_wm_nt_generic=>gc_meins_dia.
    wl_alv-lgpla       = <fs_llamadas_consumo>-lgpla.


    READ TABLE tg_listas_aprov ASSIGNING <fs_listas_aprov> WITH KEY lgpla = <fs_llamadas_consumo>-lgpla.
    IF sy-subrc <> 0.
      wl_alv-texto = 'No se han encontrado datos para el almacén'.
      APPEND wl_alv TO it_alv.
      vl_error = 'X'.
    ENDIF.


    IF vl_error = space.
      READ TABLE tl_lqua INTO DATA(wl_lqua) WITH KEY lenum = <fs_llamadas_consumo>-lenum.
      IF sy-subrc <> 0.
        CLEAR wl_lqua.
      ENDIF.

      READ TABLE tl_ltap INTO DATA(wl_ltap) WITH KEY vlenr = <fs_llamadas_consumo>-lenum.
      IF sy-subrc <> 0.
        CLEAR wl_ltap.
      ENDIF.

      IF wl_lqua IS NOT INITIAL.
        wl_alv-matnr    = wl_lqua-matnr.
        wl_alv-charg    = wl_lqua-charg.
        wl_alv-verme_kg = wl_lqua-verme.

        IF wl_alv-verme_kg <> 0.
          zcl_wm_nt_generic=>conv_mat_diametro( EXPORTING
                                                  iv_matnr          = wl_alv-matnr
                                                  iv_qty            = CONV #( wl_alv-verme_kg )
                                                  iv_meins          = wl_lqua-meins
                                                  iv_dest_meins     = wl_alv-meins
                                                  iv_werks          = wl_alv-werks
                                                RECEIVING rv_qty = DATA(vl_diametro)
                                                EXCEPTIONS
                                                  um_no_valid       = 1
                                                  missing_constants = 2
                                                  missing_matnr     = 3
                                                  no_base_calc      = 4
                                                  OTHERS            = 5 ).
          IF sy-subrc = 0.
            wl_alv-verme = vl_diametro.
          ENDIF.
        ENDIF.

      ELSE.
        wl_alv-matnr =  wl_ltap-matnr.
        wl_alv-charg =  wl_ltap-charg.
      ENDIF.


      IF wl_llamada_consumo_ant-id_bobina <> <fs_llamadas_consumo>-id_bobina.
        IF <fs_llamadas_consumo>-kg_ini <> 0.
          zcl_wm_nt_generic=>conv_mat_diametro( EXPORTING
                                                  iv_matnr          = wl_alv-matnr
                                                  iv_qty            = <fs_llamadas_consumo>-kg_ini
                                                  iv_meins          = <fs_mseg>-meins
                                                  iv_dest_meins     = wl_alv-meins
                                                  iv_werks          = wl_alv-werks
                                                RECEIVING rv_qty = vl_diametro
                                                EXCEPTIONS
                                                  um_no_valid       = 1
                                                  missing_constants = 2
                                                  missing_matnr     = 3
                                                  no_base_calc      = 4
                                                  OTHERS            = 5 ).
          IF sy-subrc = 0.
            wl_alv-diametro_ini = vl_diametro.
            wl_alv-kg_ini       = <fs_llamadas_consumo>-kg_ini.
          ENDIF.
        ENDIF.

      ELSE.
        wl_alv-verme    = wl_llamada_consumo_ant-diametro.
        CLEAR wl_alv-verme_kg.
      ENDIF.

      IF wl_alv-diametro_ini < <fs_llamadas_consumo>-diametro.
        wl_alv-texto = 'No hay suficiente stock en la UA'.
        APPEND wl_alv TO it_alv.
        vl_error = 'X'.
      ENDIF.
    ENDIF.

    IF vl_error = space.
      TRY.
          IF wl_llamada_consumo_ant-id_bobina <> <fs_llamadas_consumo>-id_bobina.
            rl_consumos->consumir_bobina_pp( EXPORTING  vp_werks        = <fs_llamadas_consumo>-werks
                                                        vp_lgpla        = <fs_llamadas_consumo>-lgpla
                                                        vp_id_pedido    = <fs_llamadas_consumo>-id_pedido
                                                        vp_id_bobina    = <fs_llamadas_consumo>-id_bobina
                                                        vp_cantidad     = <fs_llamadas_consumo>-diametro
                                                        tp_lista_aprov  = <fs_listas_aprov>-t_lista_aprov
                                                        vp_test         = 'X'
                                                        vp_inactivos    = 'X'
                                             IMPORTING  wp_bobina               = wl_bobina
                                                        wp_return               = wl_return
                                                        tp_timetickets          = tl_timetickets
                                                        tp_goodsmovements       = tl_goodsmovements
                                                        tp_link_conf_goodsmov   = tl_link_conf_goodsmov  ).
          ELSE.
            rl_consumos->consumir_bobina_pp( EXPORTING  vp_werks        = <fs_llamadas_consumo>-werks
                                                        vp_lgpla        = <fs_llamadas_consumo>-lgpla
                                                        vp_id_pedido    = <fs_llamadas_consumo>-id_pedido
                                                        vp_id_bobina    = <fs_llamadas_consumo>-id_bobina
*                                                      vp_stock_bobina = wl_alv-diametro_ini
                                                        vp_stock_bobina = wl_alv-verme
                                                        vp_cantidad     = <fs_llamadas_consumo>-diametro
                                                        tp_lista_aprov  = <fs_listas_aprov>-t_lista_aprov
                                                        vp_test         = 'X'
                                                        vp_inactivos    = 'X'
                                             IMPORTING  wp_bobina               = wl_bobina
                                                        wp_return               = wl_return
                                                        tp_timetickets          = tl_timetickets
                                                        tp_goodsmovements       = tl_goodsmovements
                                                        tp_link_conf_goodsmov   = tl_link_conf_goodsmov  ).
          ENDIF.


        CATCH /iwbep/cx_mgw_busi_exception INTO rl_exc.
          wl_alv-texto       = rl_exc->get_text( ).
          APPEND wl_alv TO it_alv.
          vl_error = 'X'.
      ENDTRY.
    ENDIF.


    IF vl_error = space.
      IF tl_link_conf_goodsmov IS INITIAL.
        wl_alv-texto       = wl_return-message.
        APPEND wl_alv TO it_alv.
        vl_error = 'X'.
      ENDIF.
    ENDIF.

    IF vl_error = space.
      IF tl_timetickets IS NOT INITIAL.
        SELECT aufk~werks, aufk~aufnr, aufk~objnr
          INTO TABLE @DATA(tl_ordenes_liberadas)
          FROM aufk
          FOR ALL ENTRIES IN @tl_timetickets
          WHERE aufk~aufnr = @tl_timetickets-orderid AND
                EXISTS ( SELECT objnr FROM jest
                                      WHERE jest~objnr = aufk~objnr AND
                                            jest~stat  = 'I0002'    AND "Liberado
                                            jest~inact = @space ).
      ENDIF.

      LOOP AT tl_link_conf_goodsmov ASSIGNING FIELD-SYMBOL(<fs_link_conf_goodsmov>).
        READ TABLE tl_timetickets ASSIGNING FIELD-SYMBOL(<fs_timetickets>) INDEX <fs_link_conf_goodsmov>-index_confirm.
        CHECK sy-subrc = 0.

        READ TABLE tl_goodsmovements ASSIGNING FIELD-SYMBOL(<fs_goodsmovements>) INDEX <fs_link_conf_goodsmov>-index_goodsmov.
        CHECK sy-subrc = 0.

        APPEND wl_alv TO it_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
        <fs_alv>-aufnr         = <fs_timetickets>-orderid.
        <fs_alv>-vornr         = <fs_timetickets>-operation.
        <fs_alv>-lgpla         = <fs_goodsmovements>-stge_bin.
        <fs_alv>-matnr         = <fs_goodsmovements>-material.
        <fs_alv>-consumo       = <fs_goodsmovements>-entry_qnt.
        <fs_alv>-meins_consumo = <fs_goodsmovements>-entry_uom.
        <fs_alv>-bwart         = <fs_goodsmovements>-move_type.
        <fs_alv>-lgort         = <fs_goodsmovements>-stge_loc.
        <fs_alv>-charg         = <fs_goodsmovements>-batch.
        <fs_alv>-cla_consumo   = 'X'.
        IF <fs_alv>-consumo < 0.
          wl_alv-texto = 'No hay suficiente stock en la UA'.
          <fs_alv>-cla_consumo   = space.
        ENDIF.

        READ TABLE tl_ordenes_liberadas TRANSPORTING NO FIELDS WITH KEY aufnr = <fs_alv>-aufnr.
        IF sy-subrc <> 0.
          wl_alv-texto = 'La orden no está liberada'.
          <fs_alv>-cla_consumo   = space.
        ENDIF.


      ENDLOOP.
    ENDIF.

    wl_llamada_consumo_ant = <fs_llamadas_consumo>.
  ENDLOOP.


  IF it_alv[] IS NOT INITIAL.
    SELECT matnr, maktx
      INTO TABLE @DATA(tl_makt)
      FROM makt
      FOR ALL ENTRIES IN @it_alv[]
      WHERE matnr = @it_alv-matnr AND
            spras = @sy-langu.
  ENDIF.
  LOOP AT it_alv ASSIGNING <fs_alv>.
    READ TABLE tl_makt ASSIGNING FIELD-SYMBOL(<fs_makt>) WITH KEY matnr = <fs_alv>-matnr.
    IF sy-subrc = 0.
      <fs_alv>-maktx = <fs_makt>-maktx.
    ENDIF.
  ENDLOOP.

  MOVE-CORRESPONDING it_alv[] TO tp_alv[].
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_user_command USING vp_dynnr vp_okcode.
  CASE vp_okcode.
    WHEN 'NOTIFICAR'.
      PERFORM f_notificar_consumos.
  ENDCASE.

ENDFORM.




*&---------------------------------------------------------------------*
*&      Form  F_NOTIFICAR_CONSUMOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_notificar_consumos.
  DATA: tl_timetickets        TYPE bapi_pp_timeticket_tt,
        tl_goodsmovements	    TYPE bapi2017_gm_item_create_t,
        tl_link_conf_goodsmov	TYPE bapi_link_conf_goodsmov_tt.

  DATA: tl_detail_return      TYPE TABLE OF bapi_coru_return,
        tl_return             TYPE bapiret2_t,
        wl_return_prodordconf TYPE bapiret1,
        vl_post_wrong_entries TYPE bapi_coru_param-ins_err VALUE '0'.


  DATA tl_index_rows TYPE lvc_t_row.
  DATA(rl_alv) = tg_config_subscreen[ subscreen = '0110' ]-alv.
  rl_alv->get_selected_rows( IMPORTING et_index_rows = tl_index_rows ).

  IF tl_index_rows IS INITIAL.
    MESSAGE 'Debe seleccionar alguna fila' TYPE 'I'.
    RETURN.
  ENDIF.

  DATA vl_answer TYPE c.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question  = 'Se van a contabilizar los consumos seleccionados. ¿Quiere continuar?'
    IMPORTING
      answer         = vl_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.
  CHECK vl_answer = '1'.



  LOOP AT tl_index_rows ASSIGNING FIELD-SYMBOL(<fs_index_rows>).
    CLEAR: tl_timetickets, tl_goodsmovements, tl_link_conf_goodsmov, tl_detail_return, wl_return_prodordconf.


    READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config>) WITH KEY subscreen = '0110'.
    CHECK sy-subrc = 0.

    READ TABLE <fs_config>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX <fs_index_rows>-index.
    CHECK sy-subrc = 0.

    CHECK <fs_alv>-cla_consumo = 'X' AND <fs_alv>-cla_consumo_realizado = space.

    CLEAR <fs_alv>-error.
    CLEAR <fs_alv>-texto.

    APPEND INITIAL LINE TO tl_timetickets ASSIGNING FIELD-SYMBOL(<fs_timetickets>).
    <fs_timetickets>-orderid        = <fs_alv>-aufnr.
    <fs_timetickets>-operation      = <fs_alv>-vornr.
    <fs_timetickets>-postg_date     = sy-datlo.
    <fs_timetickets>-conf_text      = ''.
    <fs_timetickets>-exec_start_date  = sy-datlo.
    <fs_timetickets>-exec_start_time  = sy-timlo.
    <fs_timetickets>-exec_fin_date    = sy-datlo.
    <fs_timetickets>-exec_fin_time    = sy-timlo.
    <fs_timetickets>-ex_created_by    = sy-uname.

    APPEND INITIAL LINE TO tl_goodsmovements ASSIGNING FIELD-SYMBOL(<fs_goodsmovements>).
    <fs_goodsmovements>-move_type   = <fs_alv>-bwart.
    <fs_goodsmovements>-entry_qnt   = <fs_alv>-consumo.
    <fs_goodsmovements>-entry_uom   = <fs_alv>-meins_consumo.
    <fs_goodsmovements>-material    = <fs_alv>-matnr.
    <fs_goodsmovements>-plant       = <fs_alv>-werks.
    <fs_goodsmovements>-stge_loc    = <fs_alv>-lgort.
    <fs_goodsmovements>-batch       = <fs_alv>-charg.
    <fs_goodsmovements>-stge_type   = '100'.
    <fs_goodsmovements>-stge_bin    = <fs_alv>-lgpla.


    APPEND INITIAL LINE TO tl_link_conf_goodsmov ASSIGNING FIELD-SYMBOL(<fs_link_conf_goodsmov>).
    <fs_link_conf_goodsmov>-index_confirm   = 1.
    <fs_link_conf_goodsmov>-index_goodsmov  = 1.


    CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT'
      EXPORTING
        post_wrong_entries = vl_post_wrong_entries
        testrun            = space
      IMPORTING
        return             = wl_return_prodordconf
      TABLES
        timetickets        = tl_timetickets
        goodsmovements     = tl_goodsmovements
        link_conf_goodsmov = tl_link_conf_goodsmov
        detail_return      = tl_detail_return
      EXCEPTIONS
        error_message      = 1.
    IF sy-subrc = 1.
      TRY.
          zcl_seis_odata_utils=>lanzar_excepcion( ).
        CATCH /iwbep/cx_mgw_busi_exception INTO DATA(rl_exc).
          <fs_alv>-error = 'X'.
          <fs_alv>-texto = rl_exc->get_text( ).
          CONTINUE.
      ENDTRY.

    ENDIF.
    MOVE-CORRESPONDING tl_detail_return TO tl_return.

    TRY.
        zcl_seis_odata_utils=>lanzar_excepcion( bapiret2_t = tl_return ).
      CATCH /iwbep/cx_mgw_busi_exception INTO rl_exc.
        <fs_alv>-error = 'X'.
        <fs_alv>-texto = rl_exc->get_text( ).
        CONTINUE.
    ENDTRY.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    <fs_alv>-texto  = 'Consumo realizado correctamente'.
    <fs_alv>-cla_consumo_realizado = 'X'.
  ENDLOOP.

  DATA wl_stable TYPE lvc_s_stbl.
  wl_stable-col = 'X'.
  wl_stable-row = 'X'.


  rl_alv->refresh_table_display( is_stable = wl_stable ).
  MESSAGE 'Proceso terminado. Revise filas con mensaje' TYPE 'S'.
ENDFORM.
