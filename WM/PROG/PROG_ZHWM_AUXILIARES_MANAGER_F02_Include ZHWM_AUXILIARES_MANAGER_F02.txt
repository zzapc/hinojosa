*----------------------------------------------------------------------*
***INCLUDE ZHWM_AUXILIARES_MANAGER_F02.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.

  SET PF-STATUS '001'.
  SET TITLEBAR '001'.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_0100 OUTPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** GLOBAL DATA

  IF ( go_aux_mngr IS NOT BOUND ).
    PERFORM init_data.
    IF ( go_aux_mngr IS NOT BOUND ).
      MESSAGE 'Error interno' TYPE 'W' DISPLAY LIKE 'E'.
      LEAVE TO SCREEN 0.
    ENDIF.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** GET ALV 0100 DATA

  "Obtengo datos ALV 0100
  gt_0100_data = go_aux_mngr->get_alv_0100_data( i_t_r_matnr = gt_r_matnr i_t_r_charg = gt_r_charg ).
  IF ( lines( gt_0100_data ) LE 0 ).
    MESSAGE 'No hay datos' TYPE 'E'.
    LEAVE TO SCREEN 0.
  ENDIF.

***** INSTANTIATE ALV 0100

  "Existe el objeto ALV
  IF ( go_aux_mngr->_managers_alv-_o_alv_0100 IS NOT BOUND ).

    "Transformo a objeto DATA
    GET REFERENCE OF gt_0100_data INTO go_data.

    TRY .

        "Seteo ALV en OO AUX MANAGER
        go_aux_mngr->set_alv( i_dynprog = gc_repid i_dynnr = gc_dynnr_0100 i_container_name = gc_cname_0100 i_o_data = go_data ).

      CATCH zcx_exception INTO DATA(lo_exception).

        MESSAGE lo_exception->if_t100_message~t100key-attr1 TYPE 'W' DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 0.

    ENDTRY.

  ENDIF.

****** FILL ALV DATA AND SHOW

  IF ( go_aux_mngr->_managers_alv-_o_alv_0100 IS BOUND ).

    "Cheuqeo si el ALV se ha lanzado ya
    IF ( go_aux_mngr->_managers_alv-_o_alv_0100->is_launched( ) EQ abap_false ).
      go_aux_mngr->_managers_alv-_o_alv_0100->show_alv_grid( CHANGING c_outtab = gt_0100_data ).
    ELSE.
      go_aux_mngr->_managers_alv-_o_alv_0100->refresh_alv( ).
    ENDIF.

  ELSE.

    MESSAGE 'No se puede iniciar el informe' TYPE 'E'.
    LEAVE TO SCREEN 0.

  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

  go_aux_mngr->_managers_alv-_o_alv_0100->on_user_command(
    EXPORTING
      e_ucomm = sy-ucomm
*      sender  =
  ).

  CLEAR: gt_0100_seldata, gs_0100_seldata.
  go_aux_mngr->_managers_alv-_o_alv_0100->get_selected_data( IMPORTING e_t_data = gt_0100_seldata ).
  READ TABLE gt_0100_seldata INTO gs_0100_seldata INDEX 1.

  CASE sy-ucomm.
    WHEN 'BACK'.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0100 ).
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0100 ).
      LEAVE TO SCREEN 0.
    WHEN 'EMERC'.
      IF ( gs_0100_seldata IS NOT INITIAL ).
        IF ( gs_0100_seldata-ic_emerc EQ icon_red_light ).
          SET SCREEN '0200'.
        ELSE.
          MESSAGE text-010 TYPE 'W' DISPLAY LIKE 'E'.
        ENDIF.
      ELSE.
        MESSAGE text-009 TYPE 'W' DISPLAY LIKE 'E'.
      ENDIF.
    WHEN 'APROV'.
      SET SCREEN '0300'.
    WHEN 'INVEN'.
      IF ( gs_0100_seldata IS NOT INITIAL ).
        SET SCREEN '0400'.
      ELSE.
        MESSAGE text-010 TYPE 'W' DISPLAY LIKE 'E'.
      ENDIF.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS '002'.
  SET TITLEBAR '002'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_0200 OUTPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** GLOBAL DATA

  IF ( go_aux_mngr IS NOT BOUND ).
    MESSAGE 'Error interno' TYPE 'W' DISPLAY LIKE 'E'.
    LEAVE TO SCREEN '0100'.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  IF ( gs_0100_seldata IS INITIAL ).

    go_aux_mngr->_managers_alv-_o_alv_0100->get_selected_data( IMPORTING e_t_data = gt_0100_seldata ).
    READ TABLE gt_0100_seldata INTO gs_0100_seldata INDEX 1.
    IF ( sy-subrc NE 0 ).
      MESSAGE text-009 TYPE 'W' DISPLAY LIKE 'E'.
      LEAVE TO SCREEN '0100'.
    ENDIF.

  ENDIF.

***** GET ALV 0200 DATA

  CLEAR: gt_0200_data.
  gt_0200_data = go_aux_mngr->get_alv_0200_data( i_s_alv_data_0100 = gs_0100_seldata ).

  "Existe el objeto ALV
  IF ( go_aux_mngr->_managers_alv-_o_alv_0200 IS NOT BOUND ).

    TRY .

***** ALV 0200

        CLEAR: go_data.
        GET REFERENCE OF gt_0200_data INTO go_data.
        go_aux_mngr->set_alv( i_dynprog = gc_repid i_dynnr = gc_dynnr_0200 i_container_name = gc_cname_0200 i_o_data = go_data ).

      CATCH zcx_exception INTO lo_exception.

        MESSAGE lo_exception->if_t100_message~t100key-attr1 TYPE 'W' DISPLAY LIKE 'E'.
        LEAVE TO SCREEN '0100'.

    ENDTRY.

  ENDIF.

****** SHOW ALV DATA

  "Comprobamos si ya se ha lanzado el ALV
  IF ( go_aux_mngr->_managers_alv-_o_alv_0200->is_launched( ) EQ abap_false ). "No
    go_aux_mngr->_managers_alv-_o_alv_0200->show_alv_grid( CHANGING c_outtab = gt_0200_data ).
  ELSE.
    go_aux_mngr->_managers_alv-_o_alv_0200->refresh_alv( ).
  ENDIF.

ENDMODULE.
**&---------------------------------------------------------------------*
**&      Module  USER_COMMAND_0200  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** CHECK SY-UCOMM

  CASE sy-ucomm.

    WHEN 'BACK'. "Regresar
      CLEAR: gs_0100_seldata.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0200 ).
      LEAVE TO SCREEN '0100'.
    WHEN 'EXIT'. "Salir/Cancelar
      CLEAR: gs_0100_seldata.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0200 ).
      LEAVE TO SCREEN '0100'.
    WHEN 'CLT06'.
      CLEAR: gt_0200_seldata, gs_0200_seldata.
      go_aux_mngr->_managers_alv-_o_alv_0200->get_selected_data( IMPORTING e_t_data = gt_0200_seldata ).
      READ TABLE gt_0200_seldata INTO gs_0200_seldata INDEX 1.
      IF ( sy-subrc EQ 0 ).
        go_aux_mngr->call_lt06( i_mblnr = gs_0200_seldata-mblnr i_mjahr = gs_0200_seldata-mjahr ).
        CLEAR: gt_0200_seldata, gs_0200_seldata.
      ELSE.
        MESSAGE text-009 TYPE 'E'.
      ENDIF.
  ENDCASE.

ENDMODULE.

**********************************************************************
*--------------------------------------------------------------------*
************************** ALV 0300 **********************************
*--------------------------------------------------------------------*
**********************************************************************

*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.
  SET PF-STATUS '003'.
  SET TITLEBAR '003'.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  PBO_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_0300 OUTPUT.

**********************************************************************
* Parámetros MP
**********************************************************************

  DATA: _d_0300_lbl_lgnum TYPE string.
  DATA: _d_0300_lbl_matnr TYPE string.

**********************************************************************
* Validaciones
**********************************************************************

****** GLOBAL DATA

  IF ( go_aux_mngr IS NOT BOUND ).
    MESSAGE 'Error interno' TYPE 'W' DISPLAY LIKE 'E'.
    LEAVE TO SCREEN '0100'.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  CLEAR: _d_0300_lbl_lgnum, _d_0300_lbl_matnr.

***** GET SELECTED DATA 0100

  IF ( gs_0100_seldata IS INITIAL ).

    go_aux_mngr->_managers_alv-_o_alv_0100->get_selected_data( IMPORTING e_t_data = gt_0100_seldata ).
    READ TABLE gt_0100_seldata INTO gs_0100_seldata INDEX 1.
    IF ( sy-subrc NE 0 ).
      MESSAGE text-009 TYPE 'W' DISPLAY LIKE 'E'.
      LEAVE TO SCREEN '0100'.
    ENDIF.

  ENDIF.

****** SET HEADER

  _d_0300_lbl_lgnum = zlcl_auxiliares_mngr=>s_get_0300_hdr_lgnum_lbl( i_lgnum = gs_0100_seldata-lgnum ).

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = gs_0100_seldata-matnr
    IMPORTING
      output = _d_0300_lbl_matnr.

  CONDENSE _d_0300_lbl_matnr NO-GAPS.

  CONCATENATE _d_0300_lbl_matnr gs_0100_seldata-maktx INTO _d_0300_lbl_matnr SEPARATED BY ' - '.

****** SET BODY (ALVS)


***** GET ALV 0300 DATA

  CLEAR: gt_0300_data.

  gt_0300_data = go_aux_mngr->get_alv_0300_data( i_s_alv_data_0100 = gs_0100_seldata ).

****** INSTANTIATE OO ALV DATA

  "Si no existe el ALV 0301 lo creamos
  IF ( go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0301 IS NOT BOUND ).

    TRY .

***** ALV 0301

        CLEAR: go_data.
        GET REFERENCE OF gt_0300_data-t_0301_data INTO go_data.
        go_aux_mngr->set_alv( i_dynprog = gc_repid i_dynnr = gc_dynnr_0300 i_container_name = gc_cname_0301 i_o_data = go_data ).

***** ALV 0302

        CLEAR: go_data.
        GET REFERENCE OF gt_0300_data-t_0302_data INTO go_data.
        go_aux_mngr->set_alv( i_dynprog = gc_repid i_dynnr = gc_dynnr_0300 i_container_name = gc_cname_0302 i_o_data = go_data ).

      CATCH zcx_exception INTO lo_exception.

        MESSAGE lo_exception->if_t100_message~t100key-attr1 TYPE 'W' DISPLAY LIKE 'E'.
        LEAVE TO SCREEN '0100'.

    ENDTRY.

  ENDIF.

****** SHOW ALV DATA

  "Comprobamos si ya se ha lanzado el ALV
  IF ( go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0301->is_launched( ) EQ abap_false ). "No

    go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0301->show_alv_grid( CHANGING c_outtab = gt_0300_data-t_0301_data ).
    go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0302->show_alv_grid( CHANGING c_outtab = gt_0300_data-t_0302_data ).

  ELSE.

    go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0301->refresh_alv( ).
    go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0302->refresh_alv( ).

  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

****** TABLES

  DATA: lt_return       TYPE bapiret2_t,
        lt_0300_seldata TYPE ztt_wm_auxiliares_mgr_03.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** CHECK SY-UCOMM

  CASE sy-ucomm.

    WHEN 'BACK'. "Regresar

      CLEAR: gs_0100_seldata, _d_0300_lbl_lgnum, _d_0300_lbl_matnr.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0300 ).
      LEAVE TO SCREEN '0100'.

    WHEN 'EXIT'. "Salir/Cancelar

      CLEAR: gs_0100_seldata, _d_0300_lbl_lgnum, _d_0300_lbl_matnr.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0300 ).
      LEAVE TO SCREEN '0100'.

    WHEN 'BUBIC'. "Ubicar en 1000

      CLEAR: lt_0300_seldata, lt_return, _d_0300_lbl_lgnum, _d_0300_lbl_matnr.
      go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0302->get_selected_data( IMPORTING e_t_data = lt_0300_seldata ).
      IF ( lines( lt_0300_seldata ) GT 0 ).
        lt_return = go_aux_mngr->move_0302_to_0301( ).
        READ TABLE lt_return INTO DATA(ls_return) WITH KEY type = 'E'.
        IF ( sy-subrc EQ 0 ).
          MESSAGE ls_return-message TYPE 'W' DISPLAY LIKE 'E'.
        ENDIF.
      ELSE.
        MESSAGE text-009 TYPE 'W' DISPLAY LIKE 'E'.
      ENDIF.

    WHEN 'BAPRO'. "Aprovisionar en 1010

      CLEAR: lt_0300_seldata, lt_return, _d_0300_lbl_lgnum, _d_0300_lbl_matnr.
      go_aux_mngr->_managers_alv-_o_alv_0300-_o_alv_0301->get_selected_data( IMPORTING e_t_data = lt_0300_seldata ).

      lt_return = go_aux_mngr->move_0301_to_0302( ).
      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      IF ( sy-subrc EQ 0 ).
        MESSAGE ls_return-message TYPE 'W' DISPLAY LIKE 'E'.
      ENDIF.

  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0400 OUTPUT.
  SET PF-STATUS '004'.
  SET TITLEBAR '004'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_0400 OUTPUT.

**********************************************************************
* Parámetros MP
**********************************************************************

  DATA: _d_0400_lbl_lgnum TYPE string.
  DATA: _d_0400_lbl_matnr TYPE string.

**********************************************************************
* Validaciones
**********************************************************************

****** GLOBAL DATA

  IF ( go_aux_mngr IS NOT BOUND ).
    MESSAGE 'Error interno' TYPE 'W' DISPLAY LIKE 'E'.
    LEAVE TO SCREEN '0100'.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  CLEAR: _d_0400_lbl_lgnum, _d_0400_lbl_matnr.

***** GET SELECTED DATA 0100

  IF ( gs_0100_seldata IS INITIAL ).

    go_aux_mngr->_managers_alv-_o_alv_0100->get_selected_data( IMPORTING e_t_data = gt_0100_seldata ).
    READ TABLE gt_0100_seldata INTO gs_0100_seldata INDEX 1.
    IF ( sy-subrc NE 0 ).
      MESSAGE text-009 TYPE 'W' DISPLAY LIKE 'E'.
      LEAVE TO SCREEN '0100'.
    ENDIF.

  ENDIF.

****** SET HEADER

  _d_0400_lbl_lgnum = zlcl_auxiliares_mngr=>s_get_0300_hdr_lgnum_lbl( i_lgnum = gs_0100_seldata-lgnum ).

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = gs_0100_seldata-matnr
    IMPORTING
      output = _d_0400_lbl_matnr.

  CONDENSE _d_0400_lbl_matnr NO-GAPS.

  CONCATENATE _d_0400_lbl_matnr gs_0100_seldata-maktx INTO _d_0400_lbl_matnr SEPARATED BY ' - '.

****** SET BODY (ALVS)


***** GET ALV 0300 DATA

  CLEAR: gt_0400_data.

  gt_0400_data = go_aux_mngr->get_alv_0400_data( i_s_alv_data_0100 = gs_0100_seldata ).

****** INSTANTIATE OO ALV DATA

  "Si no existe el ALV 0301 lo creamos
  IF ( go_aux_mngr->_managers_alv-_o_alv_0400 IS NOT BOUND ).

    TRY .

***** ALV 0400

      CLEAR: go_data.
      GET REFERENCE OF gt_0400_data INTO go_data.
      go_aux_mngr->set_alv( i_dynprog = gc_repid i_dynnr = gc_dynnr_0400 i_container_name = gc_cname_0400 i_o_data = go_data ).

    CATCH zcx_exception INTO lo_exception.

      MESSAGE lo_exception->if_t100_message~t100key-attr1 TYPE 'W' DISPLAY LIKE 'E'.
      LEAVE TO SCREEN '0100'.

    ENDTRY.

  ENDIF.

****** SHOW ALV DATA

  "Comprobamos si ya se ha lanzado el ALV
  IF ( go_aux_mngr->_managers_alv-_o_alv_0400->is_launched( ) EQ abap_false ). "No
    go_aux_mngr->_managers_alv-_o_alv_0400->show_alv_grid( CHANGING c_outtab = gt_0400_data ).
  ELSE.
    go_aux_mngr->_managers_alv-_o_alv_0400->refresh_alv( ).
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

****** TABLES

*  DATA: lt_return       TYPE bapiret2_t,
*        lt_0300_seldata TYPE ztt_wm_auxiliares_mgr_03.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** CHECK SY-UCOMM

  CASE sy-ucomm.

    WHEN 'BACK'. "Regresar

      CLEAR: gs_0100_seldata, _d_0400_lbl_lgnum, _d_0400_lbl_matnr.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0400 ).
      LEAVE TO SCREEN '0100'.

    WHEN 'EXIT'. "Salir/Cancelar

      CLEAR: gs_0100_seldata, _d_0400_lbl_lgnum, _d_0400_lbl_matnr.
      go_aux_mngr->finalize_alv( i_dynnr = gc_dynnr_0400 ).
      LEAVE TO SCREEN '0100'.

    WHEN 'ADDUA'. "Crea UA nueva

      CLEAR: ls_return.
      ls_return = go_aux_mngr->create_ua( i_matnr = gs_0100_seldata-matnr ).
      IF ( ls_return-type = 'E' ).
        MESSAGE ls_return-message TYPE 'W' DISPLAY LIKE 'E'.
      ENDIF.

    WHEN 'REMUA'. "Elimina UA

      CLEAR: lt_return.
      lt_return = go_aux_mngr->remove_ua( ).
      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      IF ( ls_return-type = 'E' ).
        MESSAGE ls_return-message TYPE 'W' DISPLAY LIKE 'E'.
      ENDIF.

    WHEN 'CLI21'. "Llama a transacción LI21

      go_aux_mngr->call_li21( ).

  ENDCASE.


ENDMODULE.
