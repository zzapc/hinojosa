*&---------------------------------------------------------------------*
*& Report  ZSWM_REPROCESOS
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSWM_REPROCESOS.
datA t_alv like ZSWM_REPROCESOS_STR occurs 0 WITH HEADER LINE.
include ZSWM_MACRO.
TABLES: lqua.
SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
PARAMETERS: p_lgnum like lqua-lgnum   OBLIGATORY memory id lgn.
selection-SCREEN begin of line.
  SELECTION-SCREEN COMMENT 1(31) text-blw.
PARAMETERS:
            p_bwlvs like t333u-bwlvs  OBLIGATORY DEFAULT '322'.
SELECTION-SCREEN COMMENT 45(2) text-spa.
PARAMETERS: p_txt(30).
selection-SCREEN end of LINE.
SELECTION-SCREEN SKIP 1.
select-OPTIONS: s_lgtyp for lqua-lgtyp OBLIGATORY DEFAULT '230',
                S_lgpla for lqua-lgpla OBLIGATORY DEFAULT 'REPROCESOS',
                s_lenum for lqua-lenum.
SELECTION-SCREEN end of block bl1.
SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME TITLE text-bl2.
SELECT-OPTIONS: s_matnr for lqua-matnr,
                s_werks for lqua-werks,
                s_lgort for lqua-lgort,
                s_bestq for lqua-bestq,
                s_sobqz for lqua-sobkz,
                s_sonum for lqua-sonum.
SELECTION-SCREEN end of block bl2.
PARAMETERS: p_test type flag DEFAULT 'X',
            p_log  type flag DEFAULT 'X'.
at SELECTION-SCREEN OUTPUT.
   loop at SCREEN.
      if screen-name eq 'P_TXT'.
         screen-input = 0.
      endif.
      modify SCREEN.
   endloop.
at SELECTION-SCREEN on BLOCK bl1.
   select count( * ) from t333u where lgnum eq p_lgnum
                                  and bwlvs eq p_bwlvs.
   if sy-subrc ne 0.
     clear p_txt.
   MESSAGE e398(00) with text-e01.
   else.
      select SINGLE LBWAT into p_txt from T333T where spras eq sy-langu
                                                  and lgnum eq p_lgnum
                                                  and bwlvs eq p_bwlvs.
   endif.
START-OF-SELECTION.
    if p_test eq abap_true. move abap_true to p_log. endif.
    select * into TABLE @data(tT_lqua) from lqua where lgnum eq @p_lgnum
                                                   and lgpla in @s_lgpla
                                                   and lgtyp in @s_lgtyp
                                                   and lenum in @s_lenum
                                                   and matnr in @s_matnr
                                                   and werks in @s_werks
                                                   and lgort in @s_lgort
                                                   and bestq in @s_bestq
                                                   and sobkz in @s_sobqz
                                                   and sonum in @s_sonum
                                                   and verme > 0.

    select single * into @data(t333u)  from t333u
                                where lgnum eq @p_lgnum
                                  and bwlvs eq @p_bwlvs.

    delete tT_lqua where bestq ne t333u-bstq1. " Me quedo con solo el stock libre
    loop at tT_lqua into data(rt_lqua).
        data lenum type lein-lenum.
        move rt_lqua-lenum to lenum.
        data tT_log type bapiret2_tt.
        clear t_alv.
        move-CORRESPONDING  rt_lqua to t_alv.
        if p_test ne abap_true.
        CALL METHOD zcl_wm_gestion_stocks=>create_transf_stock
          EXPORTING
            iv_lgnum            = p_lgnum
            iv_lgtyp            = rt_lqua-lgtyp
            iv_bwlvs            = p_bwlvs
            iv_lenum            = lenum
*          IMPORTING
*            et_data             =
          EXCEPTIONS
            no_authority        = 1
            no_enqueue_possible = 2
            error_wm_posting    = 3
            error_im_posting    = 4
            no_data_found       = 5
            others              = 6
                .
        endif.
        IF sy-subrc <> 0.
           clear tT_log[].
           PERFORM mensaje USING 'E' sy-msgid sy-msgno sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 CHANGING tt_log[].
           read TABLE tt_log into data(RT_log) INDEX 1.
           move-CORRESPONDING rT_log to t_alv.
           append t_alv.
        else.
           append t_alv.
        ENDIF.
    endloop.
    if p_log eq abap_true.
       PERFORM alv TABLES t_alv USING 'ZSWM_REPROCESOS_STR'.
    endif.
*      MZ_WM_RF_F02
*      FORM transf_stock USING iv_tabix
*                        iv_lgnum
*                        iv_lgtyp
*                        iv_bwlvs
*                        iv_lenum.
*
*  zcl_wm_gestion_stocks=>create_transf_stock(
*    EXPORTING
*      iv_lgnum            = iv_lgnum    " Núm.almacén/Complejo alm.
*      iv_lgtyp            = iv_lgtyp    " Tipo almacén
*      iv_bwlvs            = iv_bwlvs    " Cl.movim.gestión almacenes
*      iv_lenum            = iv_lenum    " Número de unidad de almacén
*    EXCEPTIONS
*      no_authority        = 1
*      no_enqueue_possible = 2
*      error_wm_posting    = 3
*      error_im_posting    = 4
*      OTHERS              = 5 ).
*
*  IF sy-subrc <> 0.
*    IF iv_tabix EQ 1.
*      PERFORM mensajes USING 'ZWM_RF' g_message_type g_message_number g_msgv1 g_msgv2 g_msgv3 g_msgv4.
*      FREE g_message_type.
*    ENDIF.
*
*    g_msgid          = sy-msgid.
*    g_msgv1          = sy-msgv1.
    FORM mensaje  USING    VALUE(p_type)        LIKE bapireturn-type
                       VALUE(p_id)          LIKE sy-msgid
                       VALUE(p_number)      LIKE sy-msgno
                       val1
                       val2
                       val3
                       val4
              CHANGING tt_log_men TYPE bapiret2_tt.
  DATA: p_val1 LIKE sy-msgv1,
        p_val2 LIKE sy-msgv2,
        p_val3 LIKE sy-msgv3,
        p_val4 LIKE sy-msgv4.
  p_val1 = val1.
  p_val2 = val2.
  p_val3 = val3.
  p_val4 = val4.

  DATA r_men TYPE bapiret2.
  CLEAR r_men.
  CALL FUNCTION 'BALW_BAPIRETURN_GET2'
    EXPORTING
      type   = p_type
      cl     = p_id
      number = p_number
      par1   = p_val1
      par2   = p_val2
      par3   = p_val3
      par4   = p_val4
*     LOG_NO = ' '
*     LOG_MSG_NO       = ' '
*     PARAMETER        = ' '
*     ROW    = 0
*     FIELD  = ' '
    IMPORTING
      return = r_men.
  APPEND r_men TO tt_log_men.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_ALV  text
*      -->P_0387   text
*----------------------------------------------------------------------*
FORM alv  TABLES   t_alv
          USING    VALUE(p_tabname) LIKE dd03n-tabname.
  IF t_alv IS INITIAL.
    APPEND t_alv.
  ENDIF.
  CALL FUNCTION 'DISPLAY_BASIC_LIST'
    EXPORTING
*     BASIC_LIST_TITLE    =
      file_name           = 'PP'
*     HEAD_LINE1          = ' '
*     HEAD_LINE2          = ' '
*     HEAD_LINE3          = ' '
*     HEAD_LINE4          = ' '
*     FOOT_NOTE1          = ' '
*     FOOT_NOTE2          = ' '
*     FOOT_NOTE3          = ' '
*     LAY_OUT             = 0
*     DYN_PUSHBUTTON_TEXT1       =
*     DYN_PUSHBUTTON_TEXT2       =
*     DYN_PUSHBUTTON_TEXT3       =
*     DYN_PUSHBUTTON_TEXT4       =
*     DYN_PUSHBUTTON_TEXT5       =
*     DYN_PUSHBUTTON_TEXT6       =
      data_structure      = p_tabname
*     CURRENT_REPORT      =
*     LIST_LEVEL          = ' '
*     ADDITIONAL_OPTIONS  = ' '
*     WORD_DOCUMENT       =
*     APPLICATION         =
*     OLDVALUES           = ' '
*     NO_ALV_GRID         =
*     ALV_MARKER          =
*     IMPORTING
*     RETURN_CODE         =
    TABLES
      data_tab            = t_alv
*     FIELDNAME_TAB       =
*     SELECT_TAB          =
*     ERROR_TAB           =
*     RECEIVERS           =
    EXCEPTIONS
      download_problem    = 1
      no_data_tab_entries = 2
      table_mismatch      = 3
      print_problems      = 4
      OTHERS              = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
