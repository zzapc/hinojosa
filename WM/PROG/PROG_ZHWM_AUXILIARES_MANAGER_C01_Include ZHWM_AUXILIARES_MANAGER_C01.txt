*&---------------------------------------------------------------------*
*&  Include           ZHWM_AUXILIARES_MANAGER_C01
*&---------------------------------------------------------------------*

CLASS zlcl_auxiliares_mngr DEFINITION.

  PUBLIC SECTION.

****** CLASS

***** TYPES

    TYPES: BEGIN OF ty_o_managers,
             _o_utils_wm              TYPE REF TO zcl_utils_wm,
           END OF ty_o_managers,
           BEGIN OF ty_o_alv_0300,
             _o_alv_0301 TYPE REF TO zcl_utils_alvgrid_aux_manager,
             _o_alv_0302 TYPE REF TO zcl_utils_alvgrid_aux_manager,
           END OF ty_o_alv_0300,
           BEGIN OF ty_o_alv_managers,
             _o_alv_0100 TYPE REF TO zcl_utils_alvgrid_aux_manager,
             _o_alv_0200 TYPE REF TO zcl_utils_alvgrid_aux_manager,
             _o_alv_0300 TYPE ty_o_alv_0300,
             _o_alv_0400 TYPE REF TO zcl_utils_alvgrid_aux_manager,
           END OF ty_o_alv_managers,
           BEGIN OF ty_0300_data,
             t_0301_data TYPE ztt_wm_auxiliares_mgr_03,
             t_0302_data TYPE ztt_wm_auxiliares_mgr_03,
           END OF ty_0300_data,
           BEGIN OF ty_mvt_311_return,
             mblnr    TYPE mblnr,
             mjahr    TYPE mjahr,
             t_return TYPE bapiret2_t,
           END OF ty_mvt_311_return,
           BEGIN OF ty_s_mvt_311_ot_data,
             lgnum TYPE lgnum,
             lgtyp TYPE lgtyp,
             lgpla TYPE lgpla,
             lenum TYPE lenum,
             gesme TYPE lqua_gesme,
           END OF ty_s_mvt_311_ot_data,
           BEGIN OF ty_s_0400_ot_data,
             lgnum TYPE lgnum,
             vltyp TYPE ltap_vltyp,
             vlpla TYPE ltap_vlpla,
             nltyp TYPE ltap_nltyp,
             nlpla TYPE ltap_nlpla,
             vlenr TYPE ltap_vlenr,
             nlenr TYPE ltap_nlenr,
             charg TYPE charg_d,
             gesme TYPE lqua_gesme,
             meins TYPE meins,
           END OF ty_s_0400_ot_data.

***** DATA

    CLASS-DATA: s_class_label TYPE msgid READ-ONLY VALUE 'ZLCL_AUXILIARES_MNG'.

    DATA: _werks        TYPE werks_d READ-ONLY,
          _lgort_gr     TYPE lgort_d READ-ONLY,
          _lgort_co     TYPE lgort_d READ-ONLY,
          _lgnum        TYPE lgnum READ-ONLY,
          _managers     TYPE ty_o_managers READ-ONLY,
          _managers_alv TYPE ty_o_alv_managers READ-ONLY.

***** METHODS

    CLASS-METHODS s_build_alv
      IMPORTING
        !i_o_data         TYPE REF TO data
        !i_dynprog        TYPE syrepid
        !i_dynnr          TYPE sydynnr
        !i_container_name TYPE c
      RETURNING
        VALUE(r_o_alv)    TYPE REF TO zcl_utils_alvgrid_aux_manager .

    CLASS-METHODS s_get_0300_hdr_lgnum_lbl
      IMPORTING
        !i_lgnum           TYPE lgnum
      RETURNING
        VALUE(r_lgnum_lbl) TYPE string.


    CLASS-METHODS s_get_0300_hdr_matnr_lbl
      IMPORTING
        !i_matnr           TYPE matnr
      RETURNING
        VALUE(r_matnr_lbl) TYPE string.


****** INSTANCE METHODS

    METHODS constructor
      IMPORTING
        !i_werks    TYPE werks_d
        !i_lgort_gr TYPE lgort_d
        !i_lgort_co TYPE lgort_d
      RAISING
        zcx_exception .

    METHODS get_alv_0100_data
      IMPORTING
        !i_t_r_lgtyp                   TYPE ztt_r_lgtyp OPTIONAL
        !i_t_r_lgpla                   TYPE ztt_r_lgpla OPTIONAL
        !i_t_r_matnr                   TYPE range_t_matnr OPTIONAL
        !i_t_r_charg                   TYPE ztt_r_charg OPTIONAL
        !i_t_r_lqnum                   TYPE ztt_r_lqnum OPTIONAL
        !i_t_r_lenum                   TYPE ztt_r_lenum OPTIONAL
      RETURNING
        VALUE(r_aux_total_stocks_list) TYPE ztt_wm_auxiliares_mgr_01.

    METHODS get_alv_0200_data
      IMPORTING
        !i_s_alv_data_0100   TYPE zst_wm_auxiliares_mgr_01
      RETURNING
        VALUE(r_t_0200_data) TYPE ztt_wm_auxiliares_mgr_02.

    METHODS call_lt06
      IMPORTING
        !i_mblnr TYPE mblnr OPTIONAL
        !i_mjahr TYPE mjahr OPTIONAL.

    METHODS get_alv_0300_data
      IMPORTING
        !i_s_alv_data_0100   TYPE zst_wm_auxiliares_mgr_01
      RETURNING
        VALUE(r_s_0300_data) TYPE ty_0300_data .

    METHODS get_alv_0400_data
      IMPORTING
        !i_s_alv_data_0100   TYPE zst_wm_auxiliares_mgr_01
      RETURNING
        VALUE(r_t_0400_data) TYPE ztt_wm_auxiliares_mgr_03.

    METHODS get_im_t_r_matnr_list
      IMPORTING
        !i_t_r_mtart       TYPE md_range_t_mtart OPTIONAL
        !i_t_r_matnr       TYPE range_t_matnr    OPTIONAL
        !i_t_r_charg       TYPE ztt_r_charg      OPTIONAL
      RETURNING
        VALUE(r_t_r_matnr) TYPE range_t_matnr .

    METHODS set_alv
      IMPORTING
        !i_dynprog        TYPE syrepid
        !i_dynnr          TYPE sydynnr
        !i_container_name TYPE c
        !i_o_data         TYPE REF TO data
      RAISING
        zcx_exception .

    METHODS move_0301_to_0302
      RETURNING
        VALUE(r_return) TYPE bapiret2_t .

    METHODS move_0302_to_0301
      RETURNING
        VALUE(r_return) TYPE bapiret2_t .

    METHODS _create_mvt_311
      IMPORTING
        !i_werks        TYPE werks_d
        !i_lgort_o      TYPE lgort_d
        !i_lgort_d      TYPE lgort_d
        !i_matnr        TYPE matnr
        !i_charg        TYPE charg_d
        !i_menge        TYPE menge_d
        !i_meins        TYPE meins
        !i_lenum        TYPE lenum OPTIONAL
      RETURNING
        VALUE(r_return) TYPE ty_mvt_311_return .

    METHODS finalize_alv
      IMPORTING
        !i_dynnr TYPE sydynnr.

    METHODS create_ua
      IMPORTING
                !i_matnr        TYPE matnr
      RETURNING VALUE(r_return) TYPE bapiret2.

    METHODS remove_ua
      RETURNING VALUE(r_return) TYPE bapiret2_t.

    METHODS call_li21.

  PRIVATE SECTION.

    CLASS-METHODS _s_get_aux_r_mtart
      RETURNING
        VALUE(r_t_r_mtart) TYPE md_range_t_mtart .

    METHODS _init_managers
      IMPORTING
        !i_werks TYPE werks_d
        !i_lgort TYPE lgort_d
      RAISING
        zcx_exception .

    METHODS _get_alv_0301_data
      IMPORTING
        !i_s_alv_data_0100       TYPE zst_wm_auxiliares_mgr_01
      RETURNING
        VALUE(r_t_alv_data_0301) TYPE ztt_wm_auxiliares_mgr_03 .

    METHODS _get_alv_0302_data
      IMPORTING
        !i_s_alv_data_0100       TYPE zst_wm_auxiliares_mgr_01
      RETURNING
        VALUE(r_t_alv_data_0302) TYPE ztt_wm_auxiliares_mgr_03 .

    METHODS _get_umb_quantity
      IMPORTING
        !i_matnr       TYPE matnr
        !i_meins       TYPE meins
        !i_menge       TYPE menge_d
      RETURNING
        VALUE(r_menge) TYPE menge_d .

    METHODS _get_umb_4_matnr
      IMPORTING
        !i_matnr       TYPE matnr
      RETURNING
        VALUE(r_meins) TYPE meins .

    METHODS _launch_ap_2_em_popup
      RETURNING VALUE(r_311_ot_data) TYPE ty_s_mvt_311_ot_data.

    METHODS _launch_em_2_ap_popup
      RETURNING VALUE(r_311_ot_data) TYPE ty_s_mvt_311_ot_data.

    METHODS _launch_addua_popup
      IMPORTING
                !i_xcharg               TYPE boolean
      RETURNING VALUE(r_s_0400_ot_data) TYPE ty_s_0400_ot_data.

    METHODS _launch_remua_popup
      RETURNING VALUE(r_s_0400_ot_data) TYPE ty_s_0400_ot_data.

    METHODS _raising_message
      IMPORTING
        !i_msgno        TYPE sy-msgno
        !i_msgid        TYPE sy-msgid
        !i_msgty        TYPE sy-msgty OPTIONAL
        !i_msgv1        TYPE syst_msgv OPTIONAL
        !i_msgv2        TYPE syst_msgv OPTIONAL
        !i_msgv3        TYPE syst_msgv OPTIONAL
        !i_msgv4        TYPE syst_msgv OPTIONAL
      RETURNING
        VALUE(r_textid) TYPE scx_t100key .

ENDCLASS.

CLASS zlcl_auxiliares_mngr IMPLEMENTATION.

**********************************************************************
* STATIC METHODS
**********************************************************************

  METHOD s_build_alv.

    """ Parametros locales """

    FIELD-SYMBOLS: <ft_data> TYPE ANY TABLE.

    DATA: lo_alv_grid     TYPE REF TO zcl_utils_alvgrid_aux_manager,
          lo_wm_exception TYPE REF TO zcx_wm_exception.

    DATA: lt_fcat TYPE lvc_t_fcat.

    DATA: ls_fcat TYPE lvc_s_fcat,
          ls_layo TYPE lvc_s_layo.

    """ Validaciones """

    CHECK i_o_data IS BOUND.

    """ Lógica """

    """"""PREPARE

    ASSIGN i_o_data->* TO <ft_data>.

    CHECK <ft_data> IS ASSIGNED.

    """"""BUILD ALV

    TRY .

        "Creo layout para hacerlo seleccionable
        ls_layo = zcl_utils_alvgrid_aux_manager=>s_build_basic_layout( ).
        ls_layo-sel_mode = 'B'.
        ls_layo-col_opt = abap_true.

        CASE i_dynnr.
          WHEN '0100'.
            ls_layo-grid_title = 'Stocks totales'.
          WHEN '0200'.
            ls_layo-grid_title = 'Almacén intermedio de entrada de mercancias'.
          WHEN '0300'.
            IF ( i_container_name = 'ZCUSTOM_CTRL301' ).
              ls_layo-grid_title = 'Almacén materia prima'.
            ENDIF.
            IF ( i_container_name = 'ZCUSTOM_CTRL302' ).
              ls_layo-grid_title = 'Almacén de consumo'.
            ENDIF.
          WHEN '0400'.
            ls_layo-grid_title = 'Inventario auxiliares'.
        ENDCASE.

        "Instancio la clase
        r_o_alv = NEW zcl_utils_alvgrid_aux_manager( i_layout = ls_layo i_container = zcl_utils_alvgrid_aux_manager=>s_build_custom_container( i_dynprog = i_dynprog i_dynnr = i_dynnr i_container_name = i_container_name ) ).

        "Construyo el fcat para la tabla de datos
        lt_fcat = r_o_alv->build_fcat( i_data = <ft_data> ).

        "Hago editable el campo nueva cantidad
        READ TABLE lt_fcat ASSIGNING FIELD-SYMBOL(<fs_fcat>) WITH KEY fieldname = 'STOCK'.
        IF ( sy-subrc EQ 0 ).
          <fs_fcat>-intlen = 17.
        ENDIF.

        "Peculiaridades dinpro
        CASE i_dynnr.
          WHEN '0100'.

            READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'WERKS'.
            IF ( sy-subrc EQ 0 ).
              <fs_fcat>-no_out = abap_true.
            ENDIF.

            READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LGORT'.
            IF ( sy-subrc EQ 0 ).
              <fs_fcat>-no_out = abap_true.
            ENDIF.

            READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'STOCK_EM'.
            IF ( sy-subrc EQ 0 ).
              <fs_fcat>-intlen = 17.
            ENDIF.

            READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'STOCK_AP'.
            IF ( sy-subrc EQ 0 ).
              <fs_fcat>-intlen = 17.
            ENDIF.

          WHEN '0300'.

            IF ( i_container_name = 'ZCUSTOM_CTRL301' ).

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'WERKS'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LGORT'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LQNUM'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LGNUM'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'MATNR'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

            ENDIF.

            IF ( i_container_name = 'ZCUSTOM_CTRL302' ).

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LGNUM'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LGTYP'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LGPLA'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LENUM'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LETYP'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LQNUM'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

              READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'MATNR'.
              IF ( sy-subrc EQ 0 ).
                <fs_fcat>-no_out = abap_true.
              ENDIF.

            ENDIF.

          WHEN '0400'.

            READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'LGNUM'.
            IF ( sy-subrc EQ 0 ).
              <fs_fcat>-no_out = abap_true.
            ENDIF.

            READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'MATNR'.
            IF ( sy-subrc EQ 0 ).
              <fs_fcat>-no_out = abap_true.
            ENDIF.

            "Hago editable el campo nueva cantidad
            READ TABLE lt_fcat ASSIGNING <fs_fcat> WITH KEY fieldname = 'STOCK'.
            IF ( sy-subrc EQ 0 ).
              <fs_fcat>-do_sum = abap_true.
            ENDIF.

          WHEN OTHERS.

        ENDCASE.

        "Seteo el fieldcatalog
        r_o_alv->set_t_fcat( i_lvc_t_fcat = lt_fcat ).

      CATCH zcx_wm_exception INTO lo_wm_exception.

        MESSAGE lo_wm_exception->if_t100_message~t100key-attr1 TYPE 'E'.

    ENDTRY.

  ENDMETHOD.

  METHOD s_get_0300_hdr_lgnum_lbl.

    """ Parametros locales """
    """ Validaciones """
    """ Lógica """

    SELECT SINGLE lnumt
      FROM t300t
      INTO @DATA(lv_lnumt)
     WHERE lgnum EQ @i_lgnum
       AND spras EQ 'S'.

    IF ( sy-subrc EQ 0 ).
      CONCATENATE i_lgnum lv_lnumt INTO r_lgnum_lbl SEPARATED BY ' - '.
    ENDIF.

  ENDMETHOD.

  METHOD s_get_0300_hdr_matnr_lbl.

    """ Parametros locales """
    """ Validaciones """
    """ Lógica """

    SELECT SINGLE maktx
      FROM makt
      INTO @DATA(lv_maktx)
     WHERE matnr EQ @i_matnr
       AND spras EQ 'S'.

    IF ( sy-subrc EQ 0 ).
      CONCATENATE i_matnr lv_maktx INTO r_matnr_lbl SEPARATED BY '-'.
    ENDIF.

  ENDMETHOD.

  METHOD _s_get_aux_r_mtart.

    """ Parametros locales """
    """ Validaciones """
    """ Lógica """

    """""" GET DATA

    APPEND VALUE #( sign = 'I' option = 'EQ' low = 'ZAUX' ) TO r_t_r_mtart.
    APPEND VALUE #( sign = 'I' option = 'EQ' low = 'ZMAP' ) TO r_t_r_mtart.
    APPEND VALUE #( sign = 'I' option = 'EQ' low = 'ZEMB' ) TO r_t_r_mtart.

  ENDMETHOD.

**********************************************************************
* INSTANCE METHODS
**********************************************************************

  METHOD constructor.

    """ Parametros locales """
    """ Validaciones """

    IF ( i_werks IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception(
        i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E'
      ) ).
    ENDIF.

    IF ( i_lgort_gr IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception(
        i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E'
      ) ).
    ENDIF.

    IF ( i_lgort_co IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception(
        i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E'
      ) ).
    ENDIF.

    """ Lógica """

    """""" INIT MANAGERS

    me->_init_managers( i_werks = i_werks i_lgort = i_lgort_gr ).

    """""" SET OO PARAMS

    me->_werks    = me->_managers-_o_utils_wm->_werks.
    me->_lgort_gr = me->_managers-_o_utils_wm->_lgort.
    me->_lgort_co = i_lgort_co.
    me->_lgnum    = me->_managers-_o_utils_wm->_lgnum.

  ENDMETHOD.

  METHOD get_alv_0100_data.

    """ Parametros locales """

    TYPES: BEGIN OF lty_s_totals,
             matnr TYPE matnr,
             charg TYPE charg_d,
             stock TYPE menge_d,
             meins TYPE meins,
           END OF lty_s_totals.

    DATA: lt_r_mtart     TYPE md_range_t_mtart,
          lt_r_matnr     TYPE range_t_matnr,
          lt_r_matnr_aux TYPE range_t_matnr,
          lt_lqua        TYPE lqua_t,
          lt_lqua_w      TYPE lqua_t,
          lt_totals      TYPE TABLE OF lty_s_totals.

    DATA: ls_lqua_total_stocks TYPE zst_wm_auxiliares_mgr_01,
          ls_lqua              TYPE lqua,
          ls_totals            TYPE lty_s_totals.

    """ Validaciones """
    """ Lógica """

    """""" PREPARE DATA

    "Obtengo rango de materiales auxiliares para Centro/Almacén/N.Almacén
    lt_r_matnr_aux = me->get_im_t_r_matnr_list( i_t_r_mtart = zlcl_auxiliares_mngr=>_s_get_aux_r_mtart( ) i_t_r_matnr = i_t_r_matnr i_t_r_charg = i_t_r_charg ).

    IF ( lines( i_t_r_matnr ) LE 0 ).
      MOVE-CORRESPONDING i_t_r_matnr TO lt_r_matnr.
    ELSE.
      MOVE-CORRESPONDING lt_r_matnr_aux TO lt_r_matnr.
    ENDIF.

    """""" Get LQUA data

    lt_lqua = me->_managers-_o_utils_wm->get_wm_lqua_data(
      i_t_r_lqnum   = i_t_r_lqnum    " Tabla rangos para cuantos
      i_t_r_lgtyp   = i_t_r_lgtyp    " Tabla de rangos para tipo de almacén
      i_t_r_lgpla   = i_t_r_lgpla    " Tabla de rango para ubicaciones
      i_t_r_matnr   = i_t_r_matnr    " Tabla para rangos de materiales
      i_t_r_charg   = i_t_r_charg    " Tabla de rangos para lotes
      i_t_r_lenum   = i_t_r_lenum    " Tabla para rangos de unidades de almacén
    ).

    "Borro de LQUA lo que no esté en el rango de materiales auxiliares
    DELETE lt_lqua WHERE matnr NOT IN lt_r_matnr_aux.

    """""" FILL DATA

    LOOP AT lt_r_matnr_aux INTO DATA(ls_r_matnr).

      CLEAR: ls_lqua_total_stocks, lt_lqua_w.

      """"" CHECKS

      "Compruebo que esté en rango import
      CHECK ls_r_matnr-low IN i_t_r_matnr.

      """"" LQUA DATA

      MOVE-CORRESPONDING lt_lqua TO lt_lqua_w.
      DELETE lt_lqua_w WHERE matnr NE ls_r_matnr-low.
      DELETE lt_lqua_w WHERE charg NOT IN i_t_r_charg.
      SORT lt_lqua_w BY matnr charg.

      """"" FILL

      ls_lqua_total_stocks-lgnum = me->_lgnum.
      ls_lqua_total_stocks-werks = me->_werks.
      ls_lqua_total_stocks-lgort = me->_lgort_gr.
      ls_lqua_total_stocks-matnr = ls_r_matnr-low.

      SELECT SINGLE maktx
        FROM makt
        INTO @ls_lqua_total_stocks-maktx
       WHERE matnr EQ @ls_r_matnr-low
         AND spras EQ 'S'.

      "STOCKS WM ALMACÉN 1000
      LOOP AT lt_lqua_w INTO ls_lqua.
        ls_lqua_total_stocks-stock_em = ls_lqua_total_stocks-stock_em + me->_get_umb_quantity( i_matnr = ls_lqua-matnr i_meins = ls_lqua-meins i_menge = ls_lqua-gesme ).
      ENDLOOP.

      " EM LIGHT
      READ TABLE lt_lqua_w TRANSPORTING NO FIELDS WITH KEY lgtyp = '902'.
      IF ( sy-subrc EQ 0 ).
        ls_lqua_total_stocks-ic_emerc = icon_red_light.
      ELSE.
        ls_lqua_total_stocks-ic_emerc = icon_green_light.
      ENDIF.

      "STOCKS MM ALMACÉN 1010
      ls_lqua_total_stocks-stock_ap = NEW zcl_utils_mm( i_werks = me->_werks i_lgort = me->_lgort_co )->get_mard_data_4_matnr( i_matnr = ls_r_matnr-low )-labst.

      " APROV LIGHT ""TODO
      IF ( ls_lqua_total_stocks-stock_ap GT 0 ).
        ls_lqua_total_stocks-ic_aprov = icon_green_light.
      ELSE.
        ls_lqua_total_stocks-ic_aprov = icon_red_light.
      ENDIF.


      "UMB
      ls_lqua_total_stocks-meins = me->_get_umb_4_matnr( i_matnr = ls_r_matnr-low ).

      "COLLECT DATA
      APPEND ls_lqua_total_stocks TO r_aux_total_stocks_list.

    ENDLOOP.

  ENDMETHOD.

  METHOD get_alv_0200_data.

    """ Parametros locales """

    DATA: lt_lqua TYPE lqua_t.

    DATA: ls_0200_data TYPE zst_wm_auxiliares_mgr_02.

    """ Validaciones """

    CHECK i_s_alv_data_0100 IS NOT INITIAL.

    """ Lógica """

    lt_lqua = me->_managers-_o_utils_wm->get_wm_lqua_data(
      i_t_r_lgtyp   = CONV #( VALUE #( ( sign = 'I' option = 'EQ' stge_type_low = '902' ) ) )    " Tabla de rangos para tipo de almacén
      i_t_r_matnr   = CONV #( VALUE #( ( sign = 'I' option = 'EQ' material_low = i_s_alv_data_0100-matnr ) ) )    " Tabla para rangos de materiales
    ).

    LOOP AT lt_lqua INTO DATA(ls_lqua).

      MOVE ls_lqua-lgnum TO ls_0200_data-lgnum.
      MOVE ls_lqua-lgtyp TO ls_0200_data-lgtyp.
      MOVE ls_lqua-lgpla TO ls_0200_data-lgpla.
      MOVE ls_lqua-matnr TO ls_0200_data-matnr.
      MOVE ls_lqua-charg TO ls_0200_data-charg.
      MOVE ls_lqua-gesme TO ls_0200_data-stock.
      MOVE ls_lqua-gewei TO ls_0200_data-meins.
      MOVE ls_lqua-wenum TO ls_0200_data-mblnr.
      MOVE ls_lqua-wdatu(4) TO ls_0200_data-mjahr.
      MOVE ls_lqua-tbnum TO ls_0200_data-tbnum.
      MOVE ls_lqua-btanr TO ls_0200_data-tanum.

      APPEND ls_0200_data TO r_t_0200_data.

    ENDLOOP.

  ENDMETHOD.

  METHOD call_lt06.

    """ Parametros locales """
    """ Validaciones """
    """ Lógica """

    SET: PARAMETER ID 'MBN' FIELD i_mblnr,
         PARAMETER ID 'MJA' FIELD i_mjahr,
         PARAMETER ID 'LGN' FIELD me->_lgnum.

    CALL TRANSACTION 'LT06'.


  ENDMETHOD.

  METHOD call_li21.

    """ Parametros locales """
    """ Validaciones """
    """ Lógica """

*    SET: PARAMETER ID 'LGN' FIELD me->_lgnum,
*         PARAMETER ID 'LGT' FIELD '998',
*         PARAMETER ID 'LGP' FIELD 'COMPENSAR'.
*
*    CALL TRANSACTION 'LI21'.

    SUBMIT RLLI2110
      WITH S1_LGNUM EQ me->_lgnum
      WITH S1_LGTYP-LOW EQ '998'
      WITH S1_LGPLA-LOW EQ 'COMPENSAR'
      WITH %%DYN001-LOW EQ '1400439'
    AND RETURN.

  ENDMETHOD.

  METHOD get_alv_0300_data.

    """ Parametros locales """
    """ Validaciones """

    CHECK i_s_alv_data_0100 IS NOT INITIAL.

    """ Lógica """

    ""GET/SET
    r_s_0300_data-t_0301_data = me->_get_alv_0301_data( i_s_alv_data_0100 = i_s_alv_data_0100 ).
    r_s_0300_data-t_0302_data = me->_get_alv_0302_data( i_s_alv_data_0100 = i_s_alv_data_0100 ).

    "SORT DATA
    SORT r_s_0300_data-t_0301_data BY charg lenum.
    SORT r_s_0300_data-t_0302_data BY charg lenum.

  ENDMETHOD.

  METHOD get_alv_0400_data.

    """ Parametros locales """

    DATA: lt_lqua TYPE lqua_t.

    DATA: ls_0400_data TYPE zst_wm_auxiliares_mgr_03.

    """ Validaciones """

    CHECK i_s_alv_data_0100 IS NOT INITIAL.

    """ Lógica """


    """ Validaciones """

    CHECK i_s_alv_data_0100 IS NOT INITIAL.

    """ Lógica """

    lt_lqua = me->_managers-_o_utils_wm->get_wm_lqua_data(
      i_t_r_matnr   = CONV #( VALUE #( ( sign = 'I' option = 'EQ' material_low = i_s_alv_data_0100-matnr ) ) )    " Tabla para rangos de materiales
    ).

    LOOP AT lt_lqua INTO DATA(ls_lqua).

      MOVE ls_lqua-lgnum TO ls_0400_data-lgnum.
      MOVE ls_lqua-lgtyp TO ls_0400_data-lgtyp.
      MOVE ls_lqua-lgpla TO ls_0400_data-lgpla.
      MOVE ls_lqua-matnr TO ls_0400_data-matnr.
      MOVE ls_lqua-charg TO ls_0400_data-charg.
      MOVE ls_lqua-gesme TO ls_0400_data-stock.
      MOVE ls_lqua-gewei TO ls_0400_data-meins.
      MOVE ls_lqua-lenum TO ls_0400_data-lenum.
      MOVE ls_lqua-letyp TO ls_0400_data-letyp.
      MOVE ls_lqua-lgort TO ls_0400_data-lgort.
      MOVE ls_lqua-werks TO ls_0400_data-werks.

      APPEND ls_0400_data TO r_t_0400_data.

    ENDLOOP.

  ENDMETHOD.

  METHOD move_0301_to_0302.

    """ Parametros locales """

    DATA: lt_lqua      TYPE ztt_lqua,
          lt_trite     TYPE l03b_trite_t,
          lt_0300_data TYPE ztt_wm_auxiliares_mgr_03,
          lt_bapiret2  TYPE bapiret2_t.

    DATA: ls_mvt_311_return TYPE ty_mvt_311_return,
          ls_ot_values      TYPE ty_s_mvt_311_ot_data,
          ls_trite          TYPE l03b_trite.

    """ Validaciones """
    """ Lógica """

    ""PREPARE DATA

    me->_managers_alv-_o_alv_0300-_o_alv_0301->get_selected_data( IMPORTING e_t_data = lt_0300_data ).

    IF lines( lt_0300_data ) LE 0. " Se han seleccionado datos

      ls_ot_values = me->_launch_em_2_ap_popup( ).
      IF ( ls_ot_values-lenum IS NOT INITIAL ).
        me->_managers_alv-_o_alv_0300-_o_alv_0301->get_outtab( IMPORTING e_outtab = lt_0300_data ).

        CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
          EXPORTING
            input           = ls_ot_values-lenum
          IMPORTING
            output          = ls_ot_values-lenum
          EXCEPTIONS
            check_failed    = 1
            not_numeric     = 2
            t344_get_failed = 3
            wrong_length    = 4
            OTHERS          = 5.
        IF sy-subrc <> 0.
          APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = sy-msgty i_id = sy-msgid i_number = sy-msgno ) TO r_return.
        ENDIF.

        DELETE lt_0300_data WHERE lenum <> ls_ot_values-lenum.
        IF ( lines( lt_0300_data ) LE 0 ).
          APPEND zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zlcl_auxiliares_mngr=>s_class_label i_number = '101' i_message = 'La UA seleccionada no existe' ) TO r_return.
          EXIT.
        ENDIF.
      ENDIF.

    ENDIF.

    ""WORK DATA
    LOOP AT lt_0300_data INTO DATA(ls_0300_data).

      "Generamos traspaso IM
      CLEAR: ls_mvt_311_return.
      ls_mvt_311_return = me->_create_mvt_311( i_werks = me->_werks i_lgort_o = me->_lgort_gr i_lgort_d = me->_lgort_co i_matnr = ls_0300_data-matnr i_charg = ls_0300_data-charg i_menge = ls_0300_data-stock i_meins = ls_0300_data-meins ).
      CHECK ls_mvt_311_return-mblnr IS NOT INITIAL.

      "Generamos movimiento UA para compensar el negativo
      CLEAR: lt_lqua.
      lt_lqua = me->_managers-_o_utils_wm->get_wm_lqua_data( i_t_r_lqnum = VALUE #( ( sign = 'I' option = 'EQ' lqnum_low = ls_0300_data-lqnum ) ) ).
      CHECK lines( lt_lqua ) = 1.
      READ TABLE lt_lqua INTO DATA(ls_lqua) INDEX 1.
      CHECK sy-subrc = 0.

      "Genero LB03_TRITE
      SELECT SINGLE *
        FROM mseg
        INTO @DATA(ls_mseg)
       WHERE mblnr EQ @ls_mvt_311_return-mblnr
         AND mjahr EQ @ls_mvt_311_return-mjahr
         AND werks EQ @me->_werks
         AND lgort EQ @me->_lgort_gr.

      CLEAR: ls_trite.
      ls_trite-tbpos = ls_mseg-tbpos.
      ls_trite-altme = ls_mseg-meins.
      ls_trite-anfme = ls_mseg-menge.
      ls_trite-charg = ls_mseg-charg.
      ls_trite-nltyp = ls_mseg-lgtyp.
      ls_trite-nlpla = ls_mseg-lgpla.
      ls_trite-vltyp = ls_0300_data-lgtyp.
      ls_trite-vlpla = ls_0300_data-lgpla.

      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = ls_0300_data-lenum
        IMPORTING
          output          = ls_trite-vlenr
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      IF sy-subrc <> 0.
        ls_trite-vlenr = ls_0300_data-lenum.
      ENDIF.

      ls_trite-letyp = ls_0300_data-letyp.
      APPEND ls_trite TO lt_trite.

      IF ( lines( lt_trite ) GT 0 ).
        me->_managers-_o_utils_wm->create_to_4_tr( i_tbnum = ls_mseg-tbnum i_t_trite = lt_trite ).
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD move_0302_to_0301.

    """ Parametros locales """

    DATA: lt_0300_data TYPE ztt_wm_auxiliares_mgr_03,
          lt_trite     TYPE l03b_trite_t,
          lt_r_lgtyp   TYPE ztt_r_lgtyp,
          lt_bapiret2  TYPE bapiret2_t.

    DATA: ls_ot_values      TYPE ty_s_mvt_311_ot_data,
          ls_trite          TYPE l03b_trite,
          ls_mvt_311_return TYPE ty_mvt_311_return.

    DATA: lv_end_lgpla TYPE lgpla.

    """ Validaciones """
    """ Lógica """

    ""PREPARE DATA

    "GET DATA
    me->_managers_alv-_o_alv_0300-_o_alv_0302->get_selected_data( IMPORTING e_t_data = lt_0300_data ).
    CHECK lines( lt_0300_data ) GT 0.

    ls_ot_values = me->_launch_ap_2_em_popup( ).

    IF ( ls_ot_values-lgpla IS INITIAL OR ls_ot_values-gesme LE 0 ).
      APPEND VALUE #( type = 'E' number = '008' message = text-008 ) TO r_return.
      EXIT.
    ENDIF.

    "
    LOOP AT lt_0300_data INTO DATA(ls_0300_data).

      "Generamos traspaso IM
      CLEAR: ls_mvt_311_return.
      ls_mvt_311_return = me->_create_mvt_311( i_werks = me->_werks i_lgort_o = me->_lgort_co i_lgort_d = me->_lgort_gr i_matnr = ls_0300_data-matnr i_charg = ls_0300_data-charg i_menge = CONV #( ls_ot_values-gesme ) i_meins = ls_0300_data-meins ).
      CHECK ls_mvt_311_return-mblnr IS NOT INITIAL.

      "Genero LB03_TRITE
      SELECT SINGLE *
        FROM mseg
        INTO @DATA(ls_mseg)
       WHERE mblnr EQ @ls_mvt_311_return-mblnr
         AND mjahr EQ @ls_mvt_311_return-mjahr
         AND werks EQ @me->_werks
         AND lgort EQ @me->_lgort_gr.

      CLEAR: ls_trite.
      ls_trite-tbpos = ls_mseg-tbpos.
      ls_trite-altme = ls_mseg-meins.
      ls_trite-anfme = ls_mseg-menge.
      ls_trite-charg = ls_mseg-charg.
      ls_trite-nltyp = ls_ot_values-lgtyp.
      ls_trite-nlpla = ls_ot_values-lgpla.

      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = ls_ot_values-lenum
        IMPORTING
          output          = ls_trite-nlenr
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      IF sy-subrc <> 0.
        ls_trite-nlenr = ls_ot_values-lenum.
      ENDIF.

      ls_trite-vltyp = ls_mseg-lgtyp.
      ls_trite-vlpla = ls_mseg-lgpla.
      ls_trite-letyp = 'GR'.
      APPEND ls_trite TO lt_trite.

      IF ( lines( lt_trite ) GT 0 ).
        me->_managers-_o_utils_wm->create_to_4_tr( i_tbnum = ls_mseg-tbnum i_t_trite = lt_trite ).
      ENDIF.

      APPEND LINES OF ls_mvt_311_return-t_return TO r_return.

    ENDLOOP.

  ENDMETHOD.

  METHOD _create_mvt_311.

    """ Parametros locales """

    DATA: lt_goodsmvt_item TYPE bapi2017_gm_item_create_t,
          lt_return        TYPE bapiret2_t.

    DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
          ls_goodsmvt_item   TYPE bapi2017_gm_item_create.

    DATA: lv_mblnr TYPE bapi2017_gm_head_ret-mat_doc,
          lv_mjahr TYPE bapi2017_gm_head_ret-doc_year.

    """ Validaciones """

    CHECK i_werks IS NOT INITIAL.
    CHECK i_lgort_o IS NOT INITIAL.
    CHECK i_lgort_d IS NOT INITIAL.
    CHECK i_matnr IS NOT INITIAL.
    CHECK i_menge IS NOT INITIAL OR i_menge GT 0.
    CHECK i_meins IS NOT INITIAL.

    """ Lógica """

    ""PREPARE DATA

    "HEADER

    ls_goodsmvt_header-pstng_date = sy-datum.
    ls_goodsmvt_header-doc_date   = sy-datum.

    "ITEM

    ls_goodsmvt_item-plant       = i_werks.
    ls_goodsmvt_item-stge_loc    = i_lgort_o.
    ls_goodsmvt_item-move_stloc  = i_lgort_d.
    ls_goodsmvt_item-material    = i_matnr.
    ls_goodsmvt_item-batch       = i_charg.
    ls_goodsmvt_item-move_type   = '311'.
    ls_goodsmvt_item-entry_qnt   = i_menge.
    ls_goodsmvt_item-entry_uom   = i_meins.
    MOVE i_lenum TO ls_goodsmvt_item-unload_pt.
    APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

    "CREATE MVT
    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_goodsmvt_header
        goodsmvt_code    = '04'
      IMPORTING
        materialdocument = r_return-mblnr
        matdocumentyear  = r_return-mjahr
      TABLES
        goodsmvt_item    = lt_goodsmvt_item
        return           = r_return-t_return.

    "SAVE DATA
    IF ( line_exists( r_return-t_return[ type = 'E' ] ) ).
      ROLLBACK WORK.
    ELSE.
      COMMIT WORK AND WAIT.
    ENDIF.

  ENDMETHOD.

  METHOD get_im_t_r_matnr_list.

    """ Parametros locales """

    DATA: lt_r_mtart TYPE md_range_t_mtart.

    """ Validaciones """
    """ Lógica """

    """""" PREPARE DATA

*    lt_r_mtart = zlcl_auxiliares_mngr=>_s_get_aux_r_mtart( ).

    """""" RETURN DATA

    SELECT a~matnr
      FROM mara AS a LEFT JOIN marc AS c ON a~matnr = c~matnr
                     LEFT JOIN mard AS d ON c~werks = d~werks AND a~matnr = d~matnr
                     LEFT JOIN mcha AS l ON a~matnr = l~matnr AND c~werks = l~werks
                     LEFT JOIN mlgn AS n ON a~matnr = n~matnr
      INTO @DATA(lv_matnr)
     WHERE a~matnr IN @i_t_r_matnr
       AND c~werks EQ @me->_werks
       AND a~mtart IN @i_t_r_mtart
       AND a~lvorm EQ @abap_false
       AND c~lvorm EQ @abap_false
       AND c~mmsta EQ @space
       AND d~lgort EQ @me->_lgort_gr
       AND d~lvorm EQ @abap_false
       AND n~lgnum EQ @me->_lgnum
       AND n~lvorm EQ @abap_false
       AND l~charg IN @i_t_r_charg
       AND a~mstae EQ @space
       AND c~mmsta EQ @space
      ORDER BY a~matnr.

      APPEND VALUE #( sign = 'I' option = 'EQ' low = lv_matnr ) TO r_t_r_matnr.

    ENDSELECT.

    DELETE ADJACENT DUPLICATES FROM r_t_r_matnr.

  ENDMETHOD.

  METHOD set_alv.

    """ Parametros locales """
    """ Validaciones """

    IF ( i_o_data IS NOT BOUND ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = me->_raising_message( i_msgno = '002' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E' ) ).
    ENDIF.

    """ Lógica """

    "" CASE

    "DYNPRO 100
    IF ( i_dynnr EQ '0100' ).

      IF ( me->_managers_alv-_o_alv_0100 IS BOUND ).
        CLEAR: me->_managers_alv-_o_alv_0100.
      ENDIF.

      me->_managers_alv-_o_alv_0100 = zlcl_auxiliares_mngr=>s_build_alv( i_o_data = i_o_data i_dynprog = i_dynprog i_dynnr = i_dynnr i_container_name = i_container_name ).

      IF ( me->_managers_alv-_o_alv_0100 IS NOT BOUND ).
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = me->_raising_message( i_msgno = '002' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E' ) ).
      ENDIF.

    ENDIF.

    "DYNPRO 200
    IF ( i_dynnr EQ '0200' ).

      IF ( me->_managers_alv-_o_alv_0200 IS BOUND ).
        CLEAR: me->_managers_alv-_o_alv_0200.
      ENDIF.

      me->_managers_alv-_o_alv_0200 = zlcl_auxiliares_mngr=>s_build_alv( i_o_data = i_o_data i_dynprog = i_dynprog i_dynnr = i_dynnr i_container_name = i_container_name ).

      IF ( me->_managers_alv-_o_alv_0200 IS NOT BOUND ).
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = me->_raising_message( i_msgno = '002' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E' ) ).
      ENDIF.

    ENDIF.

    "DYNPRO 300
    IF ( i_dynnr EQ '0300' ).

      " ALV 301
      IF ( i_container_name = 'ZCUSTOM_CTRL301' ).

        IF ( me->_managers_alv-_o_alv_0300-_o_alv_0301 IS BOUND ).
          CLEAR: me->_managers_alv-_o_alv_0300-_o_alv_0301.
        ENDIF.

        me->_managers_alv-_o_alv_0300-_o_alv_0301 = zlcl_auxiliares_mngr=>s_build_alv( i_o_data = i_o_data i_dynprog = i_dynprog i_dynnr = i_dynnr i_container_name = i_container_name ).

        IF ( me->_managers_alv-_o_alv_0300-_o_alv_0301 IS NOT BOUND ).
          zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = me->_raising_message( i_msgno = '002' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E' ) ).
        ENDIF.

      ENDIF.

      " ALV 302
      IF ( i_container_name = 'ZCUSTOM_CTRL302' ).

        IF ( me->_managers_alv-_o_alv_0300-_o_alv_0302 IS BOUND ).
          CLEAR: me->_managers_alv-_o_alv_0300-_o_alv_0302.
        ENDIF.

        me->_managers_alv-_o_alv_0300-_o_alv_0302 = zlcl_auxiliares_mngr=>s_build_alv( i_o_data = i_o_data i_dynprog = i_dynprog i_dynnr = i_dynnr i_container_name = i_container_name ).

        IF ( me->_managers_alv-_o_alv_0300-_o_alv_0302 IS NOT BOUND ).
          zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = me->_raising_message( i_msgno = '002' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E' ) ).
        ENDIF.

      ENDIF.

    ENDIF.

    "DYNPRO 400
    IF ( i_dynnr EQ '0400' ).

      IF ( me->_managers_alv-_o_alv_0400 IS BOUND ).
        CLEAR: me->_managers_alv-_o_alv_0400.
      ENDIF.

      me->_managers_alv-_o_alv_0400 = zlcl_auxiliares_mngr=>s_build_alv( i_o_data = i_o_data i_dynprog = i_dynprog i_dynnr = i_dynnr i_container_name = i_container_name ).

      IF ( me->_managers_alv-_o_alv_0400 IS NOT BOUND ).
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = me->_raising_message( i_msgno = '002' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgty = 'E' ) ).
      ENDIF.

    ENDIF.


  ENDMETHOD.

  METHOD finalize_alv.

    """ Parametros locales """
    """ Validaciones """

    CHECK i_dynnr IS NOT INITIAL.

    """ Lógica """

    CASE i_dynnr.
      WHEN '100'.
        me->_managers_alv-_o_alv_0100->finalize( ).
        CLEAR: me->_managers_alv-_o_alv_0100.
      WHEN '200'.
        me->_managers_alv-_o_alv_0200->finalize( ).
        CLEAR: me->_managers_alv-_o_alv_0200.
      WHEN '300'.
        me->_managers_alv-_o_alv_0300-_o_alv_0301->finalize( ).
        CLEAR: me->_managers_alv-_o_alv_0300-_o_alv_0301.
        me->_managers_alv-_o_alv_0300-_o_alv_0302->finalize( ).
        CLEAR: me->_managers_alv-_o_alv_0300-_o_alv_0302.
      WHEN '400'.
        me->_managers_alv-_o_alv_0400->finalize( ).
        CLEAR: me->_managers_alv-_o_alv_0400.
      WHEN OTHERS.
        EXIT.
    ENDCASE.

  ENDMETHOD.

  METHOD create_ua.

    """ Parametros locales """

    DATA: ls_0400_ot_data TYPE ty_s_0400_ot_data.

    """ Validaciones """
    """ Lógica """

    "" PREPARE
    SELECT COUNT(*) UP TO 1 ROWS
      FROM mara
     WHERE matnr = i_matnr
       AND xchpf = abap_true.

    IF ( sy-subrc = 0 ).
      ls_0400_ot_data = me->_launch_addua_popup( i_xcharg = abap_true ).
      IF ( ls_0400_ot_data-nlpla IS INITIAL OR ls_0400_ot_data-charg IS INITIAL OR ls_0400_ot_data-gesme LE 0 ).
        r_return-type = 'E'.
        r_return-message = text-012.
        r_return-number = '012'.
        EXIT.
      ENDIF.
    ELSE.
      ls_0400_ot_data = me->_launch_addua_popup( i_xcharg = abap_false ).
      IF ( ls_0400_ot_data-nlpla IS INITIAL OR ls_0400_ot_data-gesme LE 0 ).
        r_return-type = 'E'.
        r_return-message = text-012.
        r_return-number = '012'.
        EXIT.
      ENDIF.
    ENDIF.

    me->_managers-_o_utils_wm->create_to_single(
      EXPORTING
        i_bwlvs   = '999'    " Cl.movim.gestión almacenes
        i_matnr   = i_matnr  " Número de material
        i_charg   = ls_0400_ot_data-charg  " Número de lote
        i_letyp   = 'GR'     " Tipo de unidad de almacén
        i_anfme   = ls_0400_ot_data-gesme  " Cantidad solicitada en unidad medida alternativa
        i_altme   = ls_0400_ot_data-meins  " Unidad medida alternativa p.unidad medida almacén
        i_vltyp   = ls_0400_ot_data-vltyp        " Tipo alm.procedencia
        i_vlpla   = ls_0400_ot_data-vlpla  " Ubic.proced.
        i_vlenr   = space           " Número unidad almacén de procedencia
        i_nltyp   = ls_0400_ot_data-nltyp      " Tipo almacén destino
        i_nlpla   = ls_0400_ot_data-nlpla      " Ubicación de destino
        i_nlenr   = ls_0400_ot_data-nlenr      " Número unidad almacén de destino
      IMPORTING
        e_return  = r_return     " Parámetro de retorno
    ).

  ENDMETHOD.

  METHOD remove_ua.

    """ Parametros locales """

    DATA: lt_0400_seldata TYPE ztt_wm_auxiliares_mgr_03.

    DATA: ls_return TYPE bapiret2,
          ls_0400_ot_data TYPE ty_s_0400_ot_data.


    """ Validaciones """
    """ Lógica """

    me->_managers_alv-_o_alv_0400->get_selected_data( IMPORTING e_t_data = lt_0400_seldata ).

    IF ( lines( lt_0400_seldata ) LE 0 ). "Hay datos seleccionados

      ls_0400_ot_data = me->_launch_remua_popup( ).

      IF ( ls_0400_ot_data-vlenr IS INITIAL ).
        APPEND VALUE #( type = 'E' message = text-012 number = '012' ) TO r_return.
        EXIT.
      ENDIF.

      me->_managers_alv-_o_alv_0400->get_outtab( IMPORTING e_outtab = lt_0400_seldata ).
      DELETE lt_0400_seldata WHERE lenum <> ls_0400_ot_data-vlenr.
      IF ( lines( lt_0400_seldata ) LE 0 ).
        APPEND VALUE #( type = 'E' message = text-011 number = '011' ) TO r_return.
        EXIT.
      ENDIF.

    ENDIF.

    LOOP AT lt_0400_seldata INTO DATA(ls_0400_seldata).

      me->_managers-_o_utils_wm->create_to_single(
        EXPORTING
          i_bwlvs   = '999'    " Cl.movim.gestión almacenes
          i_matnr   = ls_0400_seldata-matnr  " Número de material
          i_charg   = ls_0400_seldata-charg  " Número de lote
          i_letyp   = ls_0400_seldata-letyp  " Tipo de unidad de almacén
          i_anfme   = ls_0400_seldata-stock  " Cantidad solicitada en unidad medida alternativa
          i_altme   = ls_0400_seldata-meins  " Unidad medida alternativa p.unidad medida almacén
          i_vltyp   = ls_0400_seldata-lgtyp  " Tipo alm.procedencia
          i_vlpla   = ls_0400_seldata-lgpla  " Ubic.proced.
          i_vlenr   = ls_0400_seldata-lenum  " Número unidad almacén de procedencia
          i_nltyp   = '998'                  " Tipo almacén destino
          i_nlpla   = 'COMPENSAR'            " Ubicación de destino
          i_nlenr   = space                  " Número unidad almacén de destino
        IMPORTING
          e_return  = ls_return     " Parámetro de retorno
      ).

      APPEND ls_return TO r_return.

    ENDLOOP.

  ENDMETHOD.

  METHOD _init_managers.

    """ Parametros locales """
    """ Validaciones """
    """ Lógica """

    """""" INIT OO MANAGERS

    """""" OO WM UTILS

    TRY .
        me->_managers-_o_utils_wm = NEW zcl_utils_wm( i_werks = i_werks i_lgort = i_lgort ).
        IF ( me->_managers-_o_utils_wm IS NOT BOUND ).
          zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = me->_raising_message( i_msgno = '001' i_msgid = zlcl_auxiliares_mngr=>s_class_label i_msgv1  = 'ZCL_UTILS_WM' ) ).
        ENDIF.
      CATCH zcx_wm_exception INTO DATA(lo_wm_exception).
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = lo_wm_exception->if_t100_message~t100key ).
      CATCH zcx_mm_exception INTO DATA(lo_mm_exception).
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = lo_mm_exception->if_t100_message~t100key ).
    ENDTRY.

  ENDMETHOD.

  METHOD _get_alv_0301_data.

    """ Parametros locales """

    DATA: lt_lqua    TYPE lqua_t.

    DATA: ls_0300_data TYPE zst_wm_auxiliares_mgr_03.

    """ Validaciones """

    CHECK i_s_alv_data_0100 IS NOT INITIAL.

    """ Lógica """

    "" PREPARE DATA

    lt_lqua = me->_managers-_o_utils_wm->get_wm_lqua_data(
      i_t_r_lgtyp = VALUE #( ( sign = 'E' option = 'BT' stge_type_low = '900' stge_type_high = '999' ) ( sign = 'E' option = 'EQ' stge_type_low = '100' ) )
      i_t_r_matnr = VALUE #( ( sign = 'I' option = 'EQ' material_low = i_s_alv_data_0100-matnr ) ) ).

    SORT lt_lqua BY matnr charg lenum.

    ""BUILD RESULT

    LOOP AT lt_lqua INTO DATA(ls_lqua).

      CLEAR: ls_0300_data.

      ls_0300_data-werks = ls_lqua-werks.
      ls_0300_data-lgort = ls_lqua-lgort.
      ls_0300_data-lgnum = ls_lqua-lgnum.
      ls_0300_data-lgtyp = ls_lqua-lgtyp.
      ls_0300_data-lgpla = ls_lqua-lgpla.
      ls_0300_data-matnr = ls_lqua-matnr.
      ls_0300_data-charg = ls_lqua-charg.

      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = ls_lqua-lenum
        IMPORTING
          output          = ls_0300_data-lenum
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      IF sy-subrc <> 0.
        ls_0300_data-lenum = ls_lqua-lenum.
      ENDIF.

      ls_0300_data-stock = ls_lqua-gesme.
      ls_0300_data-meins = ls_lqua-meins.
      ls_0300_data-letyp = ls_lqua-letyp.
      ls_0300_data-lqnum = ls_lqua-lqnum.

      APPEND ls_0300_data TO r_t_alv_data_0301.

    ENDLOOP.

  ENDMETHOD.

  METHOD _get_alv_0302_data.

    """ Parametros locales """

    DATA: lt_mard TYPE mard_tt,
          lt_mchb TYPE mchb_tty.

    DATA: ls_0300_data TYPE zst_wm_auxiliares_mgr_03.

    """ Validaciones """

    CHECK i_s_alv_data_0100 IS NOT INITIAL.

    """ Lógica

    ""PREPARE
    lt_mard = zcl_utils_wm=>s_get_mard_t_data(
      i_t_r_werks = VALUE #( ( sign = 'I' option = 'EQ' werks_low = me->_werks ) )
      i_t_r_lgort = VALUE #( ( sign = 'I' option = 'EQ' lgort_low = '1010' ) )
      i_t_r_matnr = VALUE #( ( sign = 'I' option = 'EQ' material_low = i_s_alv_data_0100-matnr ) )
    ).

    lt_mchb = zcl_utils_wm=>s_get_mchb_t_data(
      i_t_r_werks = VALUE #( ( sign = 'I' option = 'EQ' werks_low = me->_werks ) )
      i_t_r_lgort = VALUE #( ( sign = 'I' option = 'EQ' lgort_low = '1010' ) )
      i_t_r_matnr = VALUE #( ( sign = 'I' option = 'EQ' material_low = i_s_alv_data_0100-matnr ) )
    ).

    ""BUILD RESULT
    IF ( lines( lt_mchb ) GT 0 ).

      LOOP AT lt_mchb INTO DATA(ls_mchb).

        ls_0300_data-werks = me->_werks.
        ls_0300_data-lgort = '1010'.
*        ls_0300_data-lgnum = 'NA'.
*        ls_0300_data-lgtyp = 'NA'.
*        ls_0300_data-lgpla = '1010'.
        ls_0300_data-matnr = ls_mchb-matnr.
        ls_0300_data-charg = ls_mchb-charg.
*        ls_0300_data-lenum = ls_lqua-lenum.
        ls_0300_data-stock = ls_mchb-clabs.
        ls_0300_data-meins = i_s_alv_data_0100-meins.
*        ls_0300_data-letyp = ls_lqua-letyp.
*        ls_0300_data-lqnum = ls_lqua-lqnum.

        CHECK ls_mchb-clabs GT 0.

        APPEND ls_0300_data TO r_t_alv_data_0302.

      ENDLOOP.

    ELSE.

      LOOP AT lt_mard INTO DATA(ls_mard).

        ls_0300_data-werks = me->_werks.
        ls_0300_data-lgort = '1010'.
*        ls_0300_data-lgnum = 'NA'.
*        ls_0300_data-lgtyp = 'NA'.
*        ls_0300_data-lgpla = '1010'.
        ls_0300_data-matnr = ls_mard-matnr.
*        ls_0300_data-lenum = ls_lqua-lenum.
        ls_0300_data-stock = ls_mard-labst.
        ls_0300_data-meins = i_s_alv_data_0100-meins.
*        ls_0300_data-letyp = ls_lqua-letyp.
*        ls_0300_data-lqnum = ls_lqua-lqnum.

        CHECK ls_mard-labst GT 0.

        APPEND ls_0300_data TO r_t_alv_data_0302.

      ENDLOOP.

    ENDIF.

  ENDMETHOD.

  METHOD _get_umb_quantity.

    """ Parametros locales """

    DATA: lv_meins TYPE meins.

    """ Validaciones """

    CHECK i_matnr IS NOT INITIAL.
    CHECK i_meins IS NOT INITIAL.
    CHECK i_menge GT 0.

    """ Lógica """

    "" PREPARE DATA

    lv_meins = me->_get_umb_4_matnr( i_matnr = i_matnr ).
    CHECK lv_meins IS NOT INITIAL.

    "" GET/SET DATA

    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = i_matnr
        i_in_me              = i_meins
        i_out_me             = lv_meins
        i_menge              = i_menge
      IMPORTING
        e_menge              = r_menge
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    IF sy-subrc <> 0.
      MOVE i_menge TO r_menge.
    ENDIF.

  ENDMETHOD.

  METHOD _get_umb_4_matnr.

    """ Parametros locales """
    """ Validaciones """

    CHECK i_matnr IS NOT INITIAL.

    """ Lógica """

    SELECT SINGLE meins
      FROM mara
      INTO r_meins
     WHERE matnr EQ i_matnr.

  ENDMETHOD.

  METHOD _launch_em_2_ap_popup.

    """ Parametros locales """

    CONSTANTS: lc_table_lqua  TYPE char4 VALUE 'LQUA',
               lc_table_lagp  TYPE char4 VALUE 'LAGP',
               lc_field_lgnum TYPE char5 VALUE 'LGNUM',
               lc_field_lgtyp TYPE char5 VALUE 'LGTYP',
               lc_field_lgpla TYPE char5 VALUE 'LGPLA',
               lc_field_lenum TYPE char5 VALUE 'LENUM',
               lc_field_gesme TYPE char5 VALUE 'GESME'.

    DATA: lt_values TYPE ty_sval.

    """ Validaciones """
    """ Lógica """

    "" PREPARE
    lt_values = VALUE #( ( tabname = lc_table_lagp fieldname = lc_field_lgnum value = me->_lgnum field_attr = '03' )
                         ( tabname = lc_table_lqua fieldname = lc_field_lenum field_obl = abap_true novaluehlp = abap_true ) ).

    lt_values = zcl_utils=>s_launch_popup_values( i_title = '' i_t_fields = lt_values ).

    LOOP AT lt_values INTO DATA(ls_value).

      CASE ls_value-fieldname.

        WHEN lc_field_lgnum.
          r_311_ot_data-lgnum = ls_value-value.
        WHEN lc_field_lenum.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = ls_value-value
            IMPORTING
              output = r_311_ot_data-lenum.

      ENDCASE.

    ENDLOOP.

  ENDMETHOD.

  METHOD _launch_ap_2_em_popup.

    """ Parametros locales """

    CONSTANTS: lc_table_lqua  TYPE char4 VALUE 'LQUA',
               lc_table_lagp  TYPE char4 VALUE 'LAGP',
               lc_field_lgnum TYPE char5 VALUE 'LGNUM',
               lc_field_lgtyp TYPE char5 VALUE 'LGTYP',
               lc_field_lgpla TYPE char5 VALUE 'LGPLA',
               lc_field_lenum TYPE char5 VALUE 'LENUM',
               lc_field_gesme TYPE char5 VALUE 'GESME'.

    DATA: lt_values TYPE ty_sval.

    """ Validaciones """
    """ Lógica """

    "" PREPARE
    lt_values = VALUE #( ( tabname = lc_table_lagp fieldname = lc_field_lgnum value = me->_lgnum field_attr = '03' )
                         ( tabname = lc_table_lagp fieldname = lc_field_lgtyp value = '500' field_attr = '03' )
                         ( tabname = lc_table_lagp fieldname = lc_field_lgpla field_obl = abap_true )
                         ( tabname = lc_table_lqua fieldname = lc_field_gesme field_obl = abap_true )
                         ( tabname = lc_table_lqua fieldname = lc_field_lenum field_obl = abap_false novaluehlp = abap_true ) ). "fieldtext = 'UA'

    lt_values = zcl_utils=>s_launch_popup_values( i_title = '' i_t_fields = lt_values ).

    LOOP AT lt_values INTO DATA(ls_value).

      CASE ls_value-fieldname.

        WHEN lc_field_lgnum.
          r_311_ot_data-lgnum = ls_value-value.
        WHEN lc_field_lgtyp.
          r_311_ot_data-lgtyp = ls_value-value.
        WHEN lc_field_lgpla.
          r_311_ot_data-lgpla = ls_value-value.
        WHEN lc_field_lenum.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = ls_value-value
            IMPORTING
              output = r_311_ot_data-lenum.

        WHEN lc_field_gesme.

          MOVE ls_value-value TO r_311_ot_data-gesme.

      ENDCASE.

    ENDLOOP.

  ENDMETHOD.

  METHOD _launch_addua_popup.

    """ Parametros locales """

    CONSTANTS: lc_table_lqua  TYPE char4 VALUE 'LQUA',
               lc_table_lagp  TYPE char4 VALUE 'LAGP',
               lc_table_ltap  TYPE char4 VALUE 'LTAP',
               lc_field_lgnum TYPE char5 VALUE 'LGNUM',
               lc_field_vltyp TYPE char5 VALUE 'VLTYP',
               lc_field_vlpla TYPE char5 VALUE 'VLPLA',
               lc_field_nltyp TYPE char5 VALUE 'NLTYP',
               lc_field_nlpla TYPE char5 VALUE 'NLPLA',
               lc_field_nlenr TYPE char5 VALUE 'NLENR',
               lc_field_charg TYPE char5 VALUE 'CHARG',
               lc_field_gesme TYPE char5 VALUE 'GESME',
               lc_field_meins TYPE char5 VALUE 'MEINS'.

    DATA: lt_values TYPE ty_sval.

    """ Validaciones """
    """ Lógica """

    "" PREPARE
    IF ( i_xcharg = abap_true ).

      lt_values = VALUE #( ( tabname = lc_table_lagp fieldname = lc_field_lgnum value = me->_lgnum field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_vltyp value = '998' field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_vlpla value = 'COMPENSAR' field_obl = abap_true field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_nltyp value = '500' field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_nlpla field_obl = abap_true )
                           ( tabname = lc_table_lqua fieldname = lc_field_gesme field_obl = abap_true )
                           ( tabname = lc_table_lqua fieldname = lc_field_charg field_obl = abap_true )
                           ( tabname = lc_table_lqua fieldname = lc_field_meins field_obl = abap_true )
                           ( tabname = lc_table_ltap fieldname = lc_field_nlenr field_obl = abap_false novaluehlp = abap_true ) ). "fieldtext = 'UA

    ELSE.

      lt_values = VALUE #( ( tabname = lc_table_lagp fieldname = lc_field_lgnum value = me->_lgnum field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_vltyp value = '998' field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_vlpla value = 'COMPENSAR' field_obl = abap_true field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_nltyp value = '500' field_attr = '03' )
                           ( tabname = lc_table_ltap fieldname = lc_field_nlpla field_obl = abap_true )
                           ( tabname = lc_table_lqua fieldname = lc_field_gesme field_obl = abap_true )
                           ( tabname = lc_table_lqua fieldname = lc_field_meins field_obl = abap_true )
                           ( tabname = lc_table_ltap fieldname = lc_field_nlenr field_obl = abap_false novaluehlp = abap_true ) ). "fieldtext = 'UA

    ENDIF.

    lt_values = zcl_utils=>s_launch_popup_values( i_title = '' i_t_fields = lt_values ).

    LOOP AT lt_values INTO DATA(ls_value).

      CASE ls_value-fieldname.

        WHEN lc_field_lgnum.
          r_s_0400_ot_data-lgnum = ls_value-value.
        WHEN lc_field_vltyp.
          r_s_0400_ot_data-vltyp = ls_value-value.
        WHEN lc_field_vlpla.
          r_s_0400_ot_data-vlpla = ls_value-value.
        WHEN lc_field_nltyp.
          r_s_0400_ot_data-nltyp = ls_value-value.
        WHEN lc_field_nlpla.
          r_s_0400_ot_data-nlpla = ls_value-value.
        WHEN lc_field_gesme.
          MOVE ls_value-value TO r_s_0400_ot_data-gesme.
        WHEN lc_field_meins.
          r_s_0400_ot_data-meins = ls_value-value.
        WHEN lc_field_charg.
          r_s_0400_ot_data-charg = ls_value-value.
        WHEN lc_field_nlenr.
          CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
            EXPORTING
              input           = ls_value-value
            IMPORTING
              output          = r_s_0400_ot_data-nlenr
            EXCEPTIONS
              check_failed    = 1
              not_numeric     = 2
              t344_get_failed = 3
              wrong_length    = 4
              OTHERS          = 5.
          IF sy-subrc <> 0.
            r_s_0400_ot_data-nlenr = ls_value-value.
          ENDIF.
      ENDCASE.

    ENDLOOP.

  ENDMETHOD.

  METHOD _launch_remua_popup.

    """ Parametros locales """

    CONSTANTS: lc_table_lqua  TYPE char4 VALUE 'LQUA',
               lc_table_lagp  TYPE char4 VALUE 'LAGP',
               lc_field_lgnum TYPE char5 VALUE 'LGNUM',
               lc_field_lenum TYPE char5 VALUE 'LENUM'.

    DATA: lt_values TYPE ty_sval.

    """ Validaciones """
    """ Lógica """

    "" PREPARE
    lt_values = VALUE #( ( tabname = lc_table_lagp fieldname = lc_field_lgnum value = me->_lgnum field_attr = '03' )
                         ( tabname = lc_table_lqua fieldname = lc_field_lenum field_obl = abap_true novaluehlp = abap_true ) ). "fieldtext = 'UA'

    lt_values = zcl_utils=>s_launch_popup_values( i_title = '' i_t_fields = lt_values ).

    LOOP AT lt_values INTO DATA(ls_value).

      CASE ls_value-fieldname.

        WHEN lc_field_lgnum.
          r_s_0400_ot_data-lgnum = ls_value-value.
        WHEN lc_field_lenum.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = ls_value-value
            IMPORTING
              output = r_s_0400_ot_data-vlenr.

      ENDCASE.

    ENDLOOP.

  ENDMETHOD.

  METHOD _raising_message.

    """ Parametros locales """

    FIELD-SYMBOLS: <fv_msgtext> TYPE any.

    DATA: lo_data TYPE REF TO data.

    DATA: lv_message TYPE scx_attrname,
          lv_msgtext TYPE string.

    """ Validaciones """

    CHECK i_msgid IS NOT INITIAL.
    CHECK i_msgno IS NOT INITIAL.

    """ Lógica """

    """""" PREPARE DATA

    CONCATENATE 'TEXT-' i_msgno INTO lv_msgtext.
    ASSIGN (lv_msgtext) TO <fv_msgtext>.

    CHECK <fv_msgtext> IS ASSIGNED.

    """"""" REPLACE VALUES

    MOVE <fv_msgtext> TO lv_message.

    REPLACE FIRST OCCURRENCE OF '&' IN lv_message WITH i_msgv1.
    REPLACE FIRST OCCURRENCE OF '&' IN lv_message WITH i_msgv2.
    REPLACE FIRST OCCURRENCE OF '&' IN lv_message WITH i_msgv3.
    REPLACE FIRST OCCURRENCE OF '&' IN lv_message WITH i_msgv4.

    r_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = i_msgno i_msgid = i_msgid i_msgty = 'E' i_message = lv_message ).

  ENDMETHOD.

ENDCLASS.
