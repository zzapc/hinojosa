*&---------------------------------------------------------------------*
*& Report  ZSWM_QR_STO
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSWM_QR_STO.

TABLES: ZSWM_EKKO_EKBe, likp.
data t_alv like ZSWM_QR_STO_STR occurs 0 WITH HEADER LINE.
data t_alv_d like ZSWM_QR_STO_STR_DOS occurs 0 WITH HEADER LINE.
select-OPTIONS: s_bsart for ZSWM_EKKO_EKBE-bsart DEFAULT 'ZPT1',
                s_RESWK for ZSWM_EKKO_EKBE-RESWK DEFAULT '2001',
                s_wadat for ZSWM_EKKO_EKBE-wadat,
                s_wbstk for ZSWM_EKKO_EKBE-wbstk,
                s_vbeln for ZSWM_EKKO_EKBE-vbeln.
*                s_vstel for likp-vstel DEFAULT '2003'.
*                s_wbstk for ZSWM_EKKO_EKBE-wbstk.
START-OF-SELECTION.
   select * into CORRESPONDING FIELDS OF TABLE t_alv
     from ZSWM_EKKO_EKBE where bsart in s_bsart
                           and RESWK in s_RESWK
                           and wadat in s_wadat
                           and wbstk in s_wbstk
                           and vbeln in s_vbeln.
   loop at t_alv.
      data sw_tabix type sy-tabix.
      move sy-tabix to sw_tabix.
*     Sacamos EE
      select vbeln into t_alv-vbeln_id from vbfa up to 1 ROWS
                                                 where vbelv eq t_alv-vbeln
                                                   and vbtyp_n eq '7'
                                                   and vbtyp_v eq 'J'.
      ENDSELECT.
      if sy-subrc eq 0.
         select SINGLE vstel into t_alv-vstel    from likp where vbeln eq t_alv-vbeln_id.
         select SINGLE wbstk into t_alv-wbstk_id from vbuk where vbeln eq t_alv-vbeln_id.
      endif.
*      select * into TABLE @data(tt_lips) from lips where vbeln eq @t_alv-vbeln.
*      loop at tt_lips into datA(RT_lips).
*        clear t_alv_d.
*        move-CORRESPONDING t_alv to t_alv_d.
*        t_alv_d-lfimg = RT_lips-lfimg.
*        t_alv_d-vrkme = RT_lips-vrkme.
*        t_alv_d-matnr = RT_lips-matnr.
*        t_alv_d-charg = RT_lips-charg.
*        t_alv_d-werks = RT_lips-werks.
*        t_alv_d-lgort = RT_lips-lgort.
*        append t_alv_d.
*      endloop.
      modify t_alv index sw_tabix.
   endloop.
   sort t_alv. delete ADJACENT DUPLICATES FROM t_alv.
   loop at t_alv.
      sw_tabix = sy-tabix.
      select SINGLE tknum into t_alv-tknum from vttp where vbeln eq t_alv-vbeln.
      if sy-subrc eq 0.
        modify t_alv index sw_tabix.
      endif.
      select * into TABLE @data(tt_lips) from lips where vbeln eq @t_alv-vbeln
                                                     and lfimg > 0.

      loop at tt_lips into datA(RT_lips).
        clear t_alv_d.
        move-CORRESPONDING t_alv to t_alv_d.
        t_alv_d-posnr = RT_lips-posnr.
        t_alv_d-lfimg = RT_lips-lfimg.
        t_alv_d-vrkme = RT_lips-vrkme.
        t_alv_d-matnr = RT_lips-matnr.
        t_alv_d-charg = RT_lips-charg.
        t_alv_d-werks = RT_lips-werks.
        t_alv_d-lgort = RT_lips-lgort.
        t_alv_d-vbeln_va = RT_lips-sonum+0(10).
        t_alv_d-posnr_va = RT_lips-sonum+10(4).
        append t_alv_d.
      endloop.

   endloop.
   PERFORM alv TABLES t_alv USING 'ZSWM_QR_STO_STR'.
   PERFORM alv TABLES t_alv_d USING 'ZSWM_QR_STO_STR_DOS'.

FORM alv  TABLES   t_alv
          USING    VALUE(p_tabname) LIKE dd03n-tabname.
  IF t_alv IS INITIAL.
    APPEND t_alv.
  ENDIF.
  CALL FUNCTION 'DISPLAY_BASIC_LIST'
    EXPORTING
*     BASIC_LIST_TITLE    =
      file_name           = 'PP'
*     HEAD_LINE1          = ' '
*     HEAD_LINE2          = ' '
*     HEAD_LINE3          = ' '
*     HEAD_LINE4          = ' '
*     FOOT_NOTE1          = ' '
*     FOOT_NOTE2          = ' '
*     FOOT_NOTE3          = ' '
*     LAY_OUT             = 0
*     DYN_PUSHBUTTON_TEXT1       =
*     DYN_PUSHBUTTON_TEXT2       =
*     DYN_PUSHBUTTON_TEXT3       =
*     DYN_PUSHBUTTON_TEXT4       =
*     DYN_PUSHBUTTON_TEXT5       =
*     DYN_PUSHBUTTON_TEXT6       =
      data_structure      = p_tabname
*     CURRENT_REPORT      =
*     LIST_LEVEL          = ' '
*     ADDITIONAL_OPTIONS  = ' '
*     WORD_DOCUMENT       =
*     APPLICATION         =
*     OLDVALUES           = ' '
*     NO_ALV_GRID         =
*     ALV_MARKER          =
*     IMPORTING
*     RETURN_CODE         =
    TABLES
      data_tab            = t_alv
*     FIELDNAME_TAB       =
*     SELECT_TAB          =
*     ERROR_TAB           =
*     RECEIVERS           =
    EXCEPTIONS
      download_problem    = 1
      no_data_tab_entries = 2
      table_mismatch      = 3
      print_problems      = 4
      OTHERS              = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
