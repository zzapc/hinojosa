*&---------------------------------------------------------------------*
*& Report  ZSWM_PARTIR_UA
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_partir_ua.
DATA registro TYPE zswm_read_exidv_str.

PARAMETERS: p_lenum LIKE lein-lenum OBLIGATORY.
SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
PARAMETERS: p_lgnum TYPE lgnum,
            p_lgtyp TYPE lagp-lgtyp,
            p_lgpla TYPE lagp-lgpla,

            p_letyp TYPE lvs_letyp,
            p_matnr LIKE mara-matnr,
            p_maktx LIKE makt-maktx,
            p_verme TYPE lqua_verme,
            p_meins TYPE meins,
            p_charg TYPE charg_d,
*              p_lgtyp type lagp-lgtyp,
*              p_lgpla type lagp-lgpla,
            p_bestq TYPE bestq,
            p_bestx TYPE zswm_bestq_txt,
            p_sobkz TYPE sobkz,
            p_sonum TYPE lvs_sonum.
SELECTION-SCREEN BEGIN OF BLOCK bl3 WITH FRAME TITLE text-bl3.

PARAMETERS:
p_LHMG1 like mlgn-lhmg1,
p_LHME1 like mlgn-lhme1,
p_LETY1 like mlgn-lety1.
SELECTION-SCREEN END   OF BLOCK bl3.
SELECTION-SCREEN END   OF BLOCK bl1.
SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME TITLE text-bl2.

PARAMETERS: p_anzpk TYPE anzpk.
PARAMETERS: p_menge TYPE menge_d.
SELECTION-SCREEN END   OF BLOCK bl2.

AT SELECTION-SCREEN ON BLOCK bl2.
  IF p_verme <= p_menge AND p_lgtyp IS NOT INITIAL AND p_anzpk <= 1.
    MESSAGE e398(00) WITH text-e01.

  ELSEIF p_verme < ( p_menge * p_anzpk ) AND p_lgtyp IS NOT INITIAL.
    MESSAGE e398(00) WITH text-e01.
  ENDIF.

AT SELECTION-SCREEN.
  CHECK p_lenum NE registro-lenum.
  IF p_lgtyp EQ 'MUE' OR p_lgtyp+0(1) EQ '9'.
    MESSAGE e398(00) WITH text-e02.
  ELSE.
    DATA data_u TYPE zswm_data_ui5_eeeoo_str.
    DATA error TYPE flag.
    DATA tt_log TYPE bapiret2_tt.
    CLEAR: data_u, error, tt_log[], registro,
    p_lgnum ,
        p_lgtyp ,
        p_lgpla ,

        p_letyp ,
        p_matnr ,
        p_maktx ,
        p_verme ,
        p_meins ,
        p_charg ,
        p_bestq ,
        p_bestx ,
        p_sobkz ,
        p_sonum ,
        p_menge,
p_LHMG1, " like mlgn-lhmg1,
p_LHME1, " like mlgn-lhme1,
p_LETY1. " like mlgn-lety1.

    p_anzpk = 1.
    SELECT COUNT( * ) FROM zswm_ui5_pick WHERE exidv EQ p_lenum
    AND lvorm NE abap_true.
    IF sy-subrc EQ 0.
      MESSAGE e398(00) WITH text-e03.
    ELSE.
      PERFORM read_lenum(saplzswm_ui5_mfs) USING p_lenum  'EXTERNO' data_u '' '' CHANGING registro error tt_log.
      IF error EQ abap_true.
        READ TABLE tt_log INTO DATA(rt_log) INDEX 1.
        IF sy-subrc EQ 0.
          MESSAGE ID rt_log-id TYPE rt_log-type NUMBER rt_log-number WITH rt_log-message_v1 rt_log-message_v2 rt_log-message_v3 rt_log-message_v4.
        ENDIF.
      ELSE.
        p_lgnum = data_u-lgnum.
        p_lgtyp = registro-lgtyp.
        p_lgpla = registro-lgpla.

        p_letyp = registro-letyp.
        p_matnr = registro-matnr.
        p_maktx = registro-maktx.
        p_verme = registro-verme.
        p_meins = registro-meins.
        p_charg = registro-charg.
        p_bestq = registro-bestq.
        p_bestx = registro-bestq_txt.
        p_sobkz = registro-sobkz.
        p_sonum = registro-sonum.
        p_lhmg1 = registro-lhmg1.
        p_lhme1 = registro-lhme1.
        p_lety1 = registro-lety1.

      ENDIF.
    ENDIF.
  ENDIF.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    CASE screen-group3.
      WHEN 'PAR'.
        IF screen-name NE 'P_LENUM'
        AND screen-name NE 'P_MENGE'
        AND screen-name NE 'P_ANZPK'.
          screen-input = 0.
        ELSEIF screen-name EQ 'P_MENGE'.
          IF p_lenum IS NOT INITIAL
          AND p_lgtyp IS NOT INITIAL.
          ELSE.
            screen-input = 0.
            screen-output = 0.
          ENDIF.
        ELSEIF screen-name EQ 'P_ANZPK'.
          IF p_lenum IS NOT INITIAL
          AND p_lgtyp IS NOT INITIAL.
          ELSE.
            screen-input = 0.
            screen-output = 0.
          ENDIF.

        ENDIF.

    ENDCASE.
*      endif.
    MODIFY SCREEN.
  ENDLOOP.

START-OF-SELECTION.
 check p_ANZPK > 0 and p_menge > 0.
  DATA t_ltap_creat LIKE ltap_creat OCCURS 0 WITH HEADER LINE.
  data t_ltap       like LTAP_VB    occurs 0 WITH HEADER LINE.
  CLEAR t_ltap_creat[].
  clear t_ltap[].

  DO p_anzpk TIMES.
    CLEAR: t_ltap_creat.
    t_ltap_creat-matnr  = registro-matnr.
    t_ltap_creat-werks  = registro-werks.
    t_ltap_creat-lgort  = registro-lgort.
    t_ltap_creat-charg  = registro-charg.
    t_ltap_creat-bestq  = registro-bestq.
    t_ltap_creat-sobkz  = registro-sobkz.
    t_ltap_creat-sonum  = registro-sonum.
    t_ltap_creat-letyp  = registro-letyp.
    t_ltap_creat-anfme  = p_menge.
    t_ltap_creat-altme  = p_meins.
*WDATU
*VFDAT
*ZEUGN
    t_ltap_creat-squit = abap_true.
*t_ltap_creat-NIDRU
*LDEST
*WEMPF
*ABLAD
    t_ltap_creat-vltyp =
    t_ltap_creat-nltyp = registro-lgtyp.
*VLBER
    t_ltap_creat-vlpla =
    t_ltap_creat-nlpla = registro-lgpla.
*VPPOS
    t_ltap_creat-vlenr = p_lenum.
*VLQNR
*t_ltap_creat-NLTYP
*NLBER
*t_ltap_creat-NLPLA
*NPPOS
*t_ltap_creat-NLENR
*NLQNR
*RLTYP
*RLBER
*RLPLA
*RLQNR
*POSNR
*KBNKZ
*FROM_INSP_GUID
*TO_INSP_GUID
*RETURN_INSP_GUID
*ITAB_INDEX
*SGT_SCAT
    APPEND t_ltap_creat.

  ENDDO.
 check t_ltap_creat[] is not INITIAL.
   CALL FUNCTION 'L_TO_CREATE_MULTIPLE'
     EXPORTING
       i_lgnum                      = p_lgnum
       i_bwlvs                      = '999'
*      I_BETYP                      = ' '
*      I_BENUM                      = ' '
*      I_LZNUM                      = ' '
*      I_NIDRU                      = ' '
*      I_DRUKZ                      = ' '
*      I_NOSPL                      = ' '
*      I_UPDATE_TASK                = ' '
*      I_COMMIT_WORK                = 'X'
*      I_BNAME                      = SY-UNAME
*      I_KOMPL                      = 'X'
*      I_SOLEX                      = 0
*      I_PERNR                      = 0
*      I_MINWM                      = ' '
*      I_AUSFB                      = ' '
*    IMPORTING
*      E_TANUM                      =
     TABLES
       t_ltap_creat                 = t_ltap_creat
*      T_LTAK                       =
       T_LTAP_VB                    = t_ltap
    EXCEPTIONS
      NO_TO_CREATED                = 1
      BWLVS_WRONG                  = 2
      BETYP_WRONG                  = 3
      BENUM_MISSING                = 4
      BETYP_MISSING                = 5
      FOREIGN_LOCK                 = 6
      VLTYP_WRONG                  = 7
      VLPLA_WRONG                  = 8
      VLTYP_MISSING                = 9
      NLTYP_WRONG                  = 10
      NLPLA_WRONG                  = 11
      NLTYP_MISSING                = 12
      RLTYP_WRONG                  = 13
      RLPLA_WRONG                  = 14
      RLTYP_MISSING                = 15
      SQUIT_FORBIDDEN              = 16
      MANUAL_TO_FORBIDDEN          = 17
      LETYP_WRONG                  = 18
      VLPLA_MISSING                = 19
      NLPLA_MISSING                = 20
      SOBKZ_WRONG                  = 21
      SOBKZ_MISSING                = 22
      SONUM_MISSING                = 23
      BESTQ_WRONG                  = 24
      LGBER_WRONG                  = 25
      XFELD_WRONG                  = 26
      DATE_WRONG                   = 27
      DRUKZ_WRONG                  = 28
      LDEST_WRONG                  = 29
      UPDATE_WITHOUT_COMMIT        = 30
      NO_AUTHORITY                 = 31
      MATERIAL_NOT_FOUND           = 32
      LENUM_WRONG                  = 33
      MATNR_MISSING                = 34
      WERKS_MISSING                = 35
      ANFME_MISSING                = 36
      ALTME_MISSING                = 37
      LGORT_WRONG_OR_MISSING       = 38
      OTHERS                       = 39
             .
   IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
* Implement suitable error handling here
   else.
      write:/ 'UAS Creadas:'.
      loop at t_ltap.
         write:/ t_ltap-nlenr.
      endloop.
   ENDIF.
