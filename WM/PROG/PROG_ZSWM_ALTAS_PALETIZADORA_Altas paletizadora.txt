*&---------------------------------------------------------------------*
*& Report  ZSWM_ALTAS_PALETIZADORA
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_altas_paletizadora.
TABLES: caufv,
        edidc.
DATA tt_alv TYPE TABLE OF zswm_altas_palet_str." occurs 0 WITH HEADER LINE.
DATA rt_alv TYPE zswm_altas_palet_str.
SELECT-OPTIONS: s_aufnr FOR caufv-aufnr,
                s_werks FOR caufv-werks.

SELECT-OPTIONS:
               s_docnu FOR edidc-docnum,
               s_creda FOR edidc-credat,
               s_creti FOR edidc-cretim,
               s_updda FOR edidc-upddat DEFAULT sy-datum,
               s_updti FOR edidc-updtim,
               s_statu FOR edidc-status.
PARAMETERS: p_mesty LIKE edidc-mestyp OBLIGATORY DEFAULT 'ZIF_PALETIZADORA',
            p_idoct LIKE edidc-idoctp OBLIGATORY DEFAULT 'ZSPPIDOCNOTI',
            p_segna LIKE edid4-segnam OBLIGATORY DEFAULT 'Z1SPPIDOCNOTI'.

START-OF-SELECTION.
  SELECT * INTO TABLE @DATA(tt_edidc) FROM edidc WHERE mestyp EQ @p_mesty
                                                   AND idoctp EQ @p_idoct
                                                   AND docnum IN @s_docnu
                                                   AND credat IN @s_creda
                                                   AND cretim IN @s_creti
                                                   AND upddat IN @s_updda
                                                   AND updtim IN @s_updti
                                                   AND status IN @s_statu.
  LOOP AT tt_edidc INTO DATA(rt_edidc).
    clear rt_alv.
    DATA edid4 TYPE edid4.
    DATA z1sppidocnoti TYPE z1sppidocnoti.

    SELECT SINGLE * INTO edid4            FROM edid4 WHERE docnum EQ rt_edidc-docnum
                                                       AND segnam EQ p_segna.
    CHECK sy-subrc EQ 0.
    z1sppidocnoti = edid4-sdata.
    z1sppidocnoti-rfcode = |{ z1sppidocnoti-rfcode ALPHA = OUT }|.
    DATA aufnr TYPE caufv-aufnr.
    aufnr = |{ z1sppidocnoti-rfnofa ALPHA = IN }|.
    MOVE-CORRESPONDING z1sppidocnoti TO rt_alv.

    SELECT SINGLE aufnr plnbez werks  INTO (rt_alv-aufnr, rt_alv-matnr, rt_alv-werks) FROM caufv WHERE aufnr EQ aufnr.
    CHECK rt_alv-aufnr IN s_aufnr
      AND rt_alv-werks IN s_werks.

    select SINGLE charg into rT_alv-charg from afpo where aufnr eq rt_alv-aufnr.
    select SINGLE maktx into rt_alv-maktx from makt where matnr eq rt_alv-matnr
                                                      and spras eq sy-langu.
    SELECT SINGLE lgnum INTO @DATA(lgnum) FROM t320 WHERE werks EQ @rt_alv-werks.

    rT_alv-docnum = rt_edidc-docnum.
    rt_alv-rfcode = |{ rt_alv-rfcode ALPHA = OUT }|.
    rt_alv-lenum  = rt_alv-rfcode.
    rt_alv-lenum  = |{ rt_alv-lenum ALPHA = IN }|.
    SELECT SINGLE * INTO @DATA(lein) FROM lein WHERE lenum EQ @rt_alv-lenum.
    IF sy-subrc EQ 0.
      rt_alv-lgnum      = lein-lgnum.
      rt_alv-lgtyp      = lein-lgtyp.
      rt_alv-lgpla      = lein-lgpla.
      rt_alv-existe_ua  =
      rt_alv-existio_ua = abap_true.
    ELSE.
*      SELECT SINGLE lgnum INTO @DATA(lgnum) FROM t320 WHERE werks EQ @rt_alv-werks.

      SELECT * into @data(ltap) UP TO 1 ROWS FROM ltap WHERE lgnum EQ @lgnum
                                                 AND ( vlenr EQ @rt_alv-lenum
                                                    OR nlenr EQ @rt_alv-lenum )
                 ORDER BY tanum DESCENDING.
      ENDSELECT.
      IF sy-subrc EQ 0.
        rt_alv-existio_ua = abap_true .
        if ltap-vlenr = rT_alv-lenum.
           rT_alv-lgtyp = ltap-vltyp.
           rT_alv-lgpla = ltap-vlpla.
        else.
           rT_alv-lgtyp = ltap-nltyp.
           rT_alv-lgpla = ltap-nlpla.
        endif.
      ENDIF.
*         ENDSELECT.
    ENDIF.
    CASE rt_edidc-status.
      WHEN '53'.      WRITE icon_okay   TO rt_alv-icon_idoc.
      WHEN OTHERS.    WRITE icon_cancel TO rt_alv-icon_idoc.
    ENDCASE.
    select STATXT into rt_alv-STATXT up to 1 ROWS from edids where docnum eq rt_alv-docnum
                                                    ORDER BY COUNTR DESCENDING.
    ENDSELECT.
    if sy-subrc ne 0.
      clear rt_alv-STATXT.
    endif..
    APPEND rt_alv TO tt_alv.
  ENDLOOP.
  PERFORM alv TABLES tt_alv USING 'ZSWM_ALTAS_PALET_STR'.

  FORM alv  TABLES   t_alv
          USING    VALUE(p_tabname) LIKE dd03n-tabname.
  IF t_alv IS INITIAL.
    APPEND t_alv.
  ENDIF.
  CALL FUNCTION 'DISPLAY_BASIC_LIST'
    EXPORTING
*     BASIC_LIST_TITLE    =
      file_name           = 'PP'
*     HEAD_LINE1          = ' '
*     HEAD_LINE2          = ' '
*     HEAD_LINE3          = ' '
*     HEAD_LINE4          = ' '
*     FOOT_NOTE1          = ' '
*     FOOT_NOTE2          = ' '
*     FOOT_NOTE3          = ' '
*     LAY_OUT             = 0
*     DYN_PUSHBUTTON_TEXT1       =
*     DYN_PUSHBUTTON_TEXT2       =
*     DYN_PUSHBUTTON_TEXT3       =
*     DYN_PUSHBUTTON_TEXT4       =
*     DYN_PUSHBUTTON_TEXT5       =
*     DYN_PUSHBUTTON_TEXT6       =
      data_structure      = p_tabname
*     CURRENT_REPORT      =
*     LIST_LEVEL          = ' '
*     ADDITIONAL_OPTIONS  = ' '
*     WORD_DOCUMENT       =
*     APPLICATION         =
*     OLDVALUES           = ' '
*     NO_ALV_GRID         =
*     ALV_MARKER          =
*     IMPORTING
*     RETURN_CODE         =
    TABLES
      data_tab            = t_alv
*     FIELDNAME_TAB       =
*     SELECT_TAB          =
*     ERROR_TAB           =
*     RECEIVERS           =
    EXCEPTIONS
      download_problem    = 1
      no_data_tab_entries = 2
      table_mismatch      = 3
      print_problems      = 4
      OTHERS              = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
