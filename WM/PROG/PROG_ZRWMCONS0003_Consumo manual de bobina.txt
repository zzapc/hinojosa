*&---------------------------------------------------------------------*
*& Report  ZRWMCONS0003
*&
*&---------------------------------------------------------------------*
*&
*&
**&---------------------------------------------------------------------*
REPORT zrwmcons0003.


**************************
* Tipos de datos
**************************

**************************
* Variables globales
**************************
DATA: vg_test TYPE testrun.
DATA: tg_consumos_pp        TYPE zwm_t_consumos_pp.
DATA: rg_alv TYPE REF TO cl_salv_table.
*DATA vg_stock TYPE text40.

**************************
* Pantalla de selección
**************************
PARAMETERS: p_lgnum TYPE lagp-lgnum DEFAULT '201' OBLIGATORY.
PARAMETERS: p_lgtyp TYPE lagp-lgtyp DEFAULT '100' NO-DISPLAY.
PARAMETERS: p_lgpla TYPE lagp-lgpla OBLIGATORY.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-t02.
PARAMETERS: p_cinum   TYPE zwm_intf_omp_sap-cinumber OBLIGATORY.
PARAMETERS: p_lenum   TYPE lqua-lenum OBLIGATORY.
SELECTION-SCREEN COMMENT /33(30) vg_stock.
PARAMETERS: p_diam    TYPE bstmg.
SELECTION-SCREEN END OF BLOCK b2.



**************************
* Eventos pantalla selección
**************************
AT SELECTION-SCREEN.
  CLEAR vg_stock.
  IF p_lgnum IS NOT INITIAL AND p_lenum IS NOT INITIAL.
    SELECT *
      INTO TABLE @DATA(tl_lqua)
      FROM lqua
      UP TO 1 ROWS
      WHERE lgnum = @p_lgnum  AND
            lenum = @p_lenum
      ORDER BY verme DESCENDING, gesme DESCENDING.
    IF sy-subrc = 0.
      DATA(wl_lqua) = tl_lqua[ 1 ].
    ELSE.
      MESSAGE 'No se ha encontrado unidad de almacén' TYPE 'E'.
    ENDIF.

*    IF p_diam IS INITIAL.
    DATA: vl_diam     TYPE bstmg,
          vl_diam_str TYPE text40.

    zcl_wm_nt_generic=>conv_mat_diametro(
      EXPORTING iv_matnr          = wl_lqua-matnr
                iv_qty            = wl_lqua-verme
                iv_meins          = wl_lqua-meins
                iv_dest_meins     = zcl_wm_nt_generic=>gc_meins_dia
                iv_werks          = wl_lqua-werks
      RECEIVING rv_qty = vl_diam
      EXCEPTIONS um_no_valid       = 1
                 missing_constants = 2
                 missing_matnr     = 3
                 no_base_calc      = 4
                 OTHERS            = 5 ).

    WRITE vl_diam TO vl_diam_str. CONDENSE vl_diam_str.
    vg_stock = |Diámetro bobina: { vl_diam_str } cm|.
  ENDIF.


START-OF-SELECTION.
  PERFORM f_start_of_selection.

END-OF-SELECTION.
  PERFORM f_end_of_selection.



**************************
* Rutinas
**************************


*&---------------------------------------------------------------------*
*&      Form  F_START_OF_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_start_of_selection.
  DATA(rl_pp_core) = NEW zhcl_pp_core( ).
  TRY.
*      tg_consumos_pp = rl_pp_core->consumo_bobina_cinumber( vp_cinumber = p_cinum
*                                                            vp_diam     = p_diam
*                                                            vp_lenum    = p_lenum
*                                                            vp_lgnum    = p_lgnum
*                                                            vp_lgpla    = p_lgpla
*                                                            vp_lgtyp    = p_lgtyp
*                                                            vp_testrun  = vg_test ).

     .

*      tg_consumos_pp = rl_pp_core->consumo_bobina_cinumber_wm(
*                     i_type                       = 1
**                     i_datum                      =
**                     i_uzeit                      =
*                     i_cinumber                   = CONV #( p_cinum )
*                     i_werks                      = CONV #( zhcl_wm_core=>s_get_werks_4_lgnum_and_lgort( i_lgort = '1000' i_lgnum = p_lgnum ) )
*                     i_lgort                      = '1000'
*                     i_lenum                      = p_lenum
*                     i_menge                      = p_diam
*                     i_meins                      = 'DIA'
*                     i_lgtyp                      = p_lgtyp
*                     i_lgpla                      = p_lgpla
**                     i_testrun                    =
*                 )
*                   CATCH /iwbep/cx_mgw_busi_exception.  "
    CATCH /iwbep/cx_mgw_busi_exception INTO DATA(rl_exc).
      MESSAGE rl_exc->get_text( ) TYPE 'E'.
  ENDTRY.

ENDFORM.





*&---------------------------------------------------------------------*
*&      Form  F_END_OF_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_end_of_selection.
  PERFORM f_mostrar_alv.
ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  F_MOSTRAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_mostrar_alv .
  IF tg_consumos_pp IS INITIAL.
    MESSAGE 'No se han encontrado datos' TYPE 'S' DISPLAY LIKE 'W'.
    RETURN.
  ENDIF.

  TRY.
      cl_salv_table=>factory( IMPORTING r_salv_table = rg_alv
                              CHANGING  t_table      = tg_consumos_pp ).
    CATCH cx_salv_msg INTO DATA(rl_exc).
      MESSAGE rl_exc->get_text( ) TYPE 'E'.
  ENDTRY.


  DATA(wl_key) = VALUE salv_s_layout_key( report = sy-repid ).
  rg_alv->get_layout( )->set_key( wl_key ).
  rg_alv->get_layout( )->set_save_restriction( if_salv_c_layout=>restrict_none ).
  rg_alv->get_layout( )->set_default( abap_true ).
  rg_alv->get_functions( )->set_all( 'X' ).
  DATA(rl_columns) = rg_alv->get_columns( ).
  DATA: rl_column  TYPE REF TO cl_salv_column_table.
  rl_columns->set_optimize( ).

  rg_alv->display( ).
ENDFORM.
