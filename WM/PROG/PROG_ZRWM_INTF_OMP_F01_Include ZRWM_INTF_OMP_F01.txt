*----------------------------------------------------------------------*
***INCLUDE ZRWM_INTF_OMP_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_DAME_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARI  text
*----------------------------------------------------------------------*
FORM f_dame_variant  CHANGING pc_vari TYPE slis_vari.
  DATA: ls_variant TYPE disvariant,
        lv_exit    TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'LVC_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = lv_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    CHECK lv_exit EQ space.
    pc_vari = ls_variant-variant.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_data .
  DATA: ls_dat_mat   TYPE zdt_omp_mat_move_out_sap_to_o7,
        ls_action    TYPE zdt_omp_mat_move_out_sap_to_o9,
        ls_message   TYPE zdt_omp_mat_move_out_sap_to_o8,
        ls_data      TYPE zmt_omp_mat_move_out_sap_to_om,
        ls_alv       TYPE tr_data,
        ls_mara      TYPE mara,
        lv_lvsme     TYPE lvs_lvsme,
        lt_hard      TYPE STANDARD TABLE OF ztwm001,
        lv_aux       TYPE lein_mgewi,
        lv_ancho     TYPE lein_mgewi,
        lv_str       TYPE string,
        lv_aux_grama TYPE lqua_gesme,
        lv_int       TYPE i,
        lv_ua7(7),
        lv_lenum     TYPE lenum,
        lv_datatype  TYPE datatype_d.

  TYPES: BEGIN OF lot,
           matnr TYPE matnr,
           charg TYPE charg_d,
           lifnr TYPE mch1-lifnr,
           name1 TYPE lfa1-name1,
         END OF lot.

  DATA: t_lot TYPE SORTED TABLE OF lot WITH UNIQUE KEY matnr charg.


  SELECT * FROM ztwm001
    INTO TABLE lt_hard
    WHERE cprog = sy-repid AND
          param2 = '01'.
*
*  SELECT * FROM ltak
*    INTO CORRESPONDING FIELDS OF TABLE gt_ltak
*    WHERE lgnum = p_lgnum AND
*          bdatu IN s_bdatu AND
*          bzeit IN s_bzeit AND
*          bwart IN s_bwart AND
*          kquit EQ gc_x.
*
*  IF gt_ltak[] IS NOT INITIAL.
*    SELECT * FROM ltap
*      INTO CORRESPONDING FIELDS OF TABLE gt_ltap
*      FOR ALL ENTRIES IN gt_ltak
*      WHERE lgnum = gt_ltak-lgnum AND
*            tanum = gt_ltak-tanum AND
*            werks = p_werks.
*
*    IF gt_ltap[] IS NOT INITIAL.
**      SELECT * FROM lein
**        INTO CORRESPONDING FIELDS OF TABLE gt_lein
**        FOR ALL ENTRIES IN gt_ltap
**        WHERE ( lenum = gt_ltap-vlenr OR
**                lenum = gt_ltap-nlenr ) AND
**              lgtyp IN s_lgtyp .
*      SELECT * FROM lqua
*        INTO CORRESPONDING FIELDS OF TABLE gt_lqua
*        FOR ALL ENTRIES IN gt_ltap
*        WHERE lgnum = p_lgnum AND
*              matnr = gt_ltap-matnr AND
*              werks = p_werks AND
*              lgtyp IN s_lgtyp AND
*             ( lenum = gt_ltap-vlenr OR
*               lenum = gt_ltap-nlenr ).
*
*    ENDIF.
*  ENDIF.

  SELECT * FROM lqua
   INTO CORRESPONDING FIELDS OF TABLE gt_lqua
   WHERE lgnum = p_lgnum AND
         werks = p_werks AND
         lgtyp IN s_lgtyp AND
         verme GT 0.

  REFRESH grg_rang.

  IF line_exists( lt_hard[ param1 = 'SUPPLIER_NAME' param3 = p_werks ] ). " cvivo - 65978 - proveedor en etiqueta BHS
    SELECT mch1~matnr mch1~charg mch1~lifnr lfa1~name1 FROM mch1
      INNER JOIN lfa1
      ON mch1~lifnr EQ lfa1~lifnr
      INTO CORRESPONDING FIELDS OF TABLE t_lot
      FOR ALL ENTRIES IN gt_lqua
      WHERE matnr EQ gt_lqua-matnr
        AND charg EQ gt_lqua-charg
        AND mch1~lifnr NE space.
  ENDIF.

  LOOP AT gt_lqua INTO DATA(ls_lqua).

*    READ TABLE gt_ltap INTO DATA(ls_ltap) WITH KEY vlenr = ls_lqua-lenum.
*    IF sy-subrc NE 0.
*      READ TABLE gt_ltap INTO ls_ltap WITH KEY nlenr = ls_lqua-lenum.
*      IF sy-subrc NE 0.
*        CONTINUE.
*      ENDIF.
*    ENDIF.
*    READ TABLE gt_ltak INTO DATA(ls_ltak) WITH KEY lgnum = ls_ltap-lgnum
*                                                   tanum = ls_ltap-tanum.

    " del - cvivo - 62813: pasamos a gestionar compatibilidades vía tabla ZWM_COMPATIBLES
** 57924 - cvivo - Si es compatible (grupo prod.) o reemplazado, ponemos el principal
*    SELECT SINGLE * FROM marc
*      WHERE matnr EQ @ls_lqua-matnr
*        AND werks EQ @ls_lqua-werks
*        AND nfmat NE @space
*        AND ausdt LT @sy-datum
*      INTO @DATA(ls_marc).
*
*    IF sy-subrc EQ 0.
*      ls_lqua-matnr = ls_marc-nfmat. " mat.reemplazante
*    ENDIF.
*
*    SELECT SINGLE * FROM pgmi
*      WHERE nrmit EQ @ls_lqua-matnr
*        AND werks EQ @ls_lqua-werks
*        AND antei EQ 0
*        AND datum GE @sy-datum
*      INTO @DATA(pgmi_sub).
*
*    IF sy-subrc EQ 0. " está subordinado
*      SELECT SINGLE * FROM pgmi
*        WHERE prgrp EQ @pgmi_sub-prgrp
*          AND werks EQ @ls_lqua-werks
*          AND antei EQ 1
*        INTO @DATA(pgmi_principal). " cogemos el principal
*
*      IF sy-subrc EQ 0.
*        ls_lqua-matnr = pgmi_principal-nrmit.
*      ENDIF.
*    ENDIF.
** 57924 - cvivo

    " cvivo - 62813 - Verificar si es compatible
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_werks    = ls_lqua-werks
        iv_matnr    = ls_lqua-matnr
      IMPORTING
        e_principal = DATA(l_principal)
      RECEIVING
        et_compat   = DATA(t_compat).

    IF t_compat IS NOT INITIAL AND l_principal IS INITIAL. " hay compatibles y éste no es el principal
      ls_lqua-matnr = t_compat[ principal = abap_true ]-matnr. " sustituyo por el principal
    ENDIF.

    SELECT SINGLE * INTO ls_mara
      FROM mara
      WHERE matnr = ls_lqua-matnr.

    READ TABLE lt_hard ASSIGNING FIELD-SYMBOL(<h>) WITH KEY param1 = 'OPERATION_MAT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-operation_mat = <h>-valor1.
    ENDIF.
    PERFORM f_dame_materialid USING ls_mara
                                    ls_lqua-werks
                              CHANGING ls_dat_mat-materialid_mat.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'UNITID'.
    IF sy-subrc EQ 0.
      ls_dat_mat-unitid = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'LEADTIME'.
    IF sy-subrc EQ 0.
      ls_dat_mat-leadtime = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MATERIALTYPE'.
    IF sy-subrc EQ 0.
      ls_dat_mat-materialtype = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100'.
    IF sy-subrc EQ 0.
      ls_dat_mat-thickness100 = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'THICKNESS100_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-thickness100_unit = <h>-valor1.
    ENDIF.

    CLEAR lv_aux_grama.
    IF ls_mara-zzgramaje IS NOT INITIAL.
      lv_aux_grama = ls_mara-zzgramaje / 1000.
    ENDIF.
    ls_dat_mat-grammage = lv_aux_grama.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'GRAMMAGE_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-grammage_unit = <h>-valor1.
    ENDIF.

    ls_dat_mat-standardlength = ls_mara-zzlargo.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'STANDARDLENGTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-standardlength_unit = <h>-valor1.
    ENDIF.

    IF ls_mara-mtart EQ 'ZPIM'.
      ls_dat_mat-preprint = 'YES'.
    ELSE.
      ls_dat_mat-preprint = 'NO'.
    ENDIF.

    ls_dat_mat-comments = ''.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY'.
    IF sy-subrc EQ 0.
      ls_dat_mat-minstockquantity = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MINSTOCKQUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-minstockquantity_unit = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY'.
    IF sy-subrc EQ 0.
      ls_dat_mat-targetstockquantity = <h>-valor1.
    ENDIF.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TARGETSTOCKQUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-targetstockquantity_unit = <h>-valor1.
    ENDIF.

    PERFORM f_get_white_top USING ls_mara-matkl CHANGING lv_str.
    ls_dat_mat-white_top = lv_str.

    ls_dat_mat-erpmaterialid = ''.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'OPERATION_MATMOV'.
    IF sy-subrc EQ 0.
      ls_dat_mat-operation_matmov = <h>-valor1.
    ENDIF.
    PERFORM f_dame_materialid USING ls_mara
                                    ls_lqua-werks
                              CHANGING ls_dat_mat-materialid_matmov.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'MOVEMENTTYPE'.
    IF sy-subrc EQ 0.
      ls_dat_mat-movementtype = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'FROMWHID'.
    IF sy-subrc EQ 0.
      ls_dat_mat-fromwhid = <h>-valor1.
    ENDIF.

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'TOWHID'.
    IF sy-subrc EQ 0.
      ls_dat_mat-towhid  = <h>-valor1.
    ENDIF.

    PERFORM f_dame_fecha_hora CHANGING ls_dat_mat-eventdate.

*   De KG -> a M
    PERFORM f_cambia_unidad USING ls_mara-matnr
                                  ls_lqua-verme
                                  ls_lqua-gewei
                                  'M'
                            CHANGING lv_aux.
*   el ancho viene en MM en la MARA, pasamos a M
    lv_ancho = ls_mara-zzancho / 1000.

*   M * Ancho(M) -> M2
    lv_aux = lv_aux * lv_ancho.

    ls_dat_mat-quantity = lv_aux .

    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'QUANTITY_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-quantity_unit = <h>-valor1.
    ENDIF.
    ls_dat_mat-width = ls_mara-zzancho.
    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'WIDTH_UNIT'.
    IF sy-subrc EQ 0.
      ls_dat_mat-width_unit = <h>-valor1.
    ENDIF.
* 13/11/2018 Cambio en campo LOT_ID , enviar la UA en vez del lote.
*    ls_dat_mat-lot_id = ls_ltap-charg.
    CALL FUNCTION 'CONVERSION_EXIT_LENUM_OUTPUT'
      EXPORTING
        input           = ls_lqua-lenum
      IMPORTING
        output          = ls_dat_mat-lot_id
      EXCEPTIONS
        t344_get_failed = 1
        OTHERS          = 2.
    lv_lenum = ls_dat_mat-lot_id.
    lv_int = strlen( lv_lenum ).
    IF lv_int EQ 7.
      lv_ua7 = lv_lenum.
      CALL FUNCTION 'NUMERIC_CHECK'
        EXPORTING
          string_in  = lv_lenum
        IMPORTING
          string_out = lv_lenum
          htype      = lv_datatype.

      IF lv_datatype EQ 'NUMC'.
        CONCATENATE '0' lv_ua7 INTO ls_dat_mat-lot_id .
      ENDIF.
    ENDIF.
* 13/11/2018
* 58943 - cvivo - 15.01.20 - lectura UAs SAICA 2020 en BHS con ceros a la izquierda, es una excepción, por eso el hardcode
    IF ls_lqua-lgnum EQ '200'
      AND lv_lenum CO '09876543210 '
      AND ( lv_lenum CP '*2703' OR " SAICA
            lv_lenum CP '*2702' OR
            lv_lenum CP '*1301' ).
      IF strlen( lv_lenum ) EQ 12.
        CONCATENATE '00' lv_lenum INTO ls_dat_mat-lot_id.
      ELSEIF strlen( lv_lenum ) EQ 13.
        CONCATENATE '0' lv_lenum INTO ls_dat_mat-lot_id.
      ENDIF.
    ENDIF.

    PERFORM f_dame_supplier_lot_id2 USING ls_lqua-matnr
                                          ls_lqua-charg
                                    CHANGING lv_str.
    ls_dat_mat-supplier_lot_id = lv_str.

    " cvivo - 65978 - Proveedor para OMP para que BHS lo imprima
    READ TABLE t_lot WITH TABLE KEY matnr = ls_lqua-matnr
                                    charg = ls_lqua-charg INTO DATA(ls_lot).

    IF sy-subrc EQ 0.
      ls_dat_mat-supplier_name = ls_lot-name1.
    ENDIF.


    READ TABLE lt_hard ASSIGNING <h> WITH KEY param1 = 'NAME'.
    IF sy-subrc EQ 0.
      ls_action-name =  <h>-valor1.
    ENDIF.
    APPEND ls_dat_mat TO ls_action-action.

    MOVE-CORRESPONDING ls_dat_mat TO ls_alv.
    ls_alv-matnr = ls_mara-matnr.
    ls_alv-lenum = ls_lqua-lenum.
*    ls_alv-tanum = ls_lqua-tanum.
    ls_alv-lgnum = ls_lqua-lgnum.
    APPEND ls_alv TO gt_data.
    CLEAR ls_alv.
  ENDLOOP.

  IF ls_action IS NOT INITIAL.
    ls_message-message = ls_action.
    ls_data-mt_omp_mat_move_out_sap_to_omp = ls_message.
    gs_tab_omp = ls_data.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SEND_TO_OMP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_send_to_omp .
  DATA: lo_proxy    TYPE REF TO cl_proxy_client,
        lv_log_port TYPE prx_logical_port_name.

  SELECT SINGLE valor1
    FROM ztwm001
    INTO lv_log_port
    WHERE cprog = sy-repid AND
          param1 = 'LOGICAL_PORT_NAME'.

  IF p_send IS NOT INITIAL AND gs_tab_omp IS NOT INITIAL AND lv_log_port IS NOT INITIAL.

    " Kyvor - 20190925 - RDM
    " fetch configuration
    SELECT SINGLE *  FROM ztwm001
      INTO  @DATA(ls_cfg)
      WHERE cprog = @sy-repid
      AND
      param1 = 'PROXY'
      AND valor1 = @p_werks .

    IF sy-subrc NE 0 OR ls_cfg-valor2 IS INITIAL.
      MESSAGE e001(00) WITH text-001.
      RETURN.
    ENDIF.
    TRY.
        CREATE OBJECT lo_proxy
        TYPE (ls_cfg-valor2)
        EXPORTING logical_port_name = lv_log_port.

        IF ls_cfg-valor1 = '2000'. " Xativa
          CAST zco_si_omp_mat_move_out_sap_to( lo_proxy )->si_omp_mat_move_out_sap_to_omp( output = gs_tab_omp ).


        ELSEIF ls_cfg-valor1 = '2001'. "PACS
          CAST zco_si_omp_mat_out_sap_to_omp( lo_proxy )->si_omp_mat_out_sap_to_omp_pacs( output =
          gs_tab_omp
          ).
        ELSEIF ls_cfg-valor1 = '2010'. "RAMBLEÑOS
          CAST zco_si_omp_mat_out_sap_to_omp1( lo_proxy )->si_omp_mat_out_sap_to_omp_er( output =
          gs_tab_omp
          ).
        ELSEIF ls_cfg-valor1 = '2070'. "SAN CAYETANO
          CAST zco_si_omp_mat_out_sap_to_omp2( lo_proxy )->SI_OMP_MAT_OUT_SAP_TO_OMP_ISC( output =
          gs_tab_omp
          ).

        ENDIF.
        COMMIT WORK AND WAIT.

      CATCH cx_root INTO DATA(lr_exc).
        MESSAGE text-e02 TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.

    ENDTRY.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SHOW_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_show_data .
* mostrar ALV con datos de GT_data
  DATA: lv_functions        TYPE REF TO cl_salv_functions_list,
        lv_title            TYPE lvc_title,
        lv_display_settings TYPE REF TO cl_salv_display_settings,
        lv_selections       TYPE REF TO cl_salv_selections,
        lv_events           TYPE REF TO cl_salv_events_table,
        lv_layout           TYPE REF TO cl_salv_layout,
        lv_lay              TYPE slis_vari,
        lv_key              TYPE salv_s_layout_key.

  IF gt_data[] IS NOT INITIAL.

    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = go_table
          CHANGING
            t_table      = gt_data.           "internal table


        lv_display_settings = go_table->get_display_settings( ).
        lv_title = 'Datos a enviar a OMP'.
        lv_display_settings->set_list_header( lv_title ).
        lv_display_settings->set_fit_column_to_table_size( abap_true ).
        lv_display_settings->set_striped_pattern( abap_true ).

* grabamos el layout
        lv_layout = go_table->get_layout( ).
        lv_key-report = sy-repid.
        lv_layout->set_key( lv_key ).
        lv_layout->set_default( abap_true ).
        lv_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
        IF p_vari IS NOT INITIAL.
          MOVE p_vari TO lv_lay.
          lv_layout->set_initial_layout( lv_lay ).
        ENDIF.

        lv_functions = go_table->get_functions( ).
        lv_functions->set_all( abap_true ).
        lv_functions->set_export_xml( abap_true ).
        lv_functions->set_export_spreadsheet( abap_true ).
        lv_functions->set_view_lotus( abap_false ).
        lv_functions->set_graphics( abap_false ).
        lv_functions->set_export_localfile( abap_true ).
        lv_functions->set_view_excel( abap_true ).

* Enable cell selection mode
        lv_selections = go_table->get_selections( ).
        lv_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).

        lv_events = go_table->get_event( ).
        IF go_handler IS NOT BOUND.
          CREATE OBJECT go_handler.
        ENDIF.
        SET HANDLER go_handler->on_link_click FOR lv_events.

        PERFORM f_modifica_cabeceras.
* Display table
        go_table->display( ).
      CATCH cx_salv_msg.
    ENDTRY.
  ELSE.
    MESSAGE text-e01 TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GRABA_ULTIMA_EJEC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_S_BDATU  text
*      -->P_S_BZEIT  text
*----------------------------------------------------------------------*
FORM f_graba_ultima_ejec .
*solo actualizamos si el lanzamiento es en fondo

  IF sy-batch IS NOT INITIAL.

    UPDATE tvarvc SET sign = gc_i
                      opti = gc_ge
                      low = sy-datum WHERE name = 'ZWM_OMP_ULTIMA_FECHA' AND
                                           type = 'S' AND
                                           numb = '0000'.

    UPDATE tvarvc SET sign = gc_i
                      opti = gc_ge
                      low = sy-timlo WHERE name = 'ZWM_OMP_ULTIMA_HORA' AND
                                           type = 'S' AND
                                           numb = '0000'.
    COMMIT WORK.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_FECHA_HORA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_DAT_MAT_EVENTDATE  text
*----------------------------------------------------------------------*
FORM f_dame_fecha_hora  CHANGING pc_str TYPE string.
  DATA: lv_str(10), lv_str2(8).
  WRITE sy-datum TO lv_str USING EDIT MASK '__/__/____'.
  WRITE sy-timlo TO lv_str2 USING EDIT MASK '__:__:__'.
  CONCATENATE lv_str lv_str2 INTO pc_str SEPARATED BY space.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_MATERIALID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MAT_MATNR  text
*      <--P_MATERIALID_MAT  text
*----------------------------------------------------------------------*
FORM f_dame_materialid  USING    pe_mara TYPE mara
                                 pe_werks TYPE werks_d
                        CHANGING pc_matid TYPE string.
  DATA: lv_str        TYPE string,
        lv_calidad(3),
        lv_ebeln      TYPE ebeln.
  CLEAR pc_matid.

  IF pe_mara-mtart <> 'ZPIM'.

    PERFORM f_dame_calidad USING pe_werks pe_mara-matkl CHANGING lv_calidad.

    CONCATENATE 'PAP/' lv_calidad INTO pc_matid .
    CONDENSE pc_matid.
    CONCATENATE pe_mara-zzgramaje+1(3) '/' pe_mara-zzancho+0(4) INTO lv_str.
    CONCATENATE pc_matid lv_str INTO pc_matid SEPARATED BY space.

  ELSE.

    MOVE pe_mara-matnr+1(5) TO lv_str .
    CONCATENATE 'PAP/' lv_str INTO lv_str.
    CONDENSE lv_str.
    CONCATENATE lv_str '/' pe_mara-zzancho+0(4) INTO pc_matid.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIFICA_CABECERAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_modifica_cabeceras .
  DATA: lo_cols       TYPE REF TO cl_salv_columns,
        lo_column_tab TYPE REF TO cl_salv_column_table,
        lt_dd03l      TYPE enh_t_dd03l,
        lv_text       TYPE string,
        lo_column     TYPE REF TO cl_salv_column.

  SELECT *
  INTO CORRESPONDING FIELDS OF TABLE lt_dd03l
  FROM dd03l
  WHERE tabname = 'ZDT_OMP_MAT_MOVE_OUT_SAP_TO_O7'.

  lo_cols = go_table->get_columns( ).
  lo_cols->set_optimize( abap_true ).

  LOOP AT lt_dd03l ASSIGNING FIELD-SYMBOL(<wa_field>).
    TRY.
        CASE <wa_field>-fieldname.
          WHEN 'CONTROLLER'.
          WHEN OTHERS.

            lo_column = lo_cols->get_column( <wa_field>-fieldname ).
            lv_text = <wa_field>-fieldname.
            PERFORM f_modif_columna USING lv_text
                                    CHANGING lo_column.
        ENDCASE.
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER

    ENDTRY.
  ENDLOOP.

* material
  lo_column = lo_cols->get_column( 'MATNR' ).
  lv_text = 'Material'.
  PERFORM f_modif_columna USING lv_text
                          CHANGING lo_column.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'MATNR' ).

    CATCH cx_salv_not_found.                            "#EC NO_HANDLER

  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).

* Lenum
  lo_column = lo_cols->get_column( 'LENUM' ).
  lv_text = 'Unidad almacén'.
  PERFORM f_modif_columna USING lv_text
                          CHANGING lo_column.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'LENUM' ).

    CATCH cx_salv_not_found.                            "#EC NO_HANDLER

  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).

* tanum
  lo_column = lo_cols->get_column( 'TANUM' ).
  lv_text = 'Número de OT'.
  PERFORM f_modif_columna USING lv_text
                          CHANGING lo_column.
  TRY.
      lo_column_tab ?= lo_cols->get_column( 'TANUM' ).

    CATCH cx_salv_not_found.                            "#EC NO_HANDLER

  ENDTRY.
  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
* LGNUM
  lo_column = lo_cols->get_column( 'LGNUM' ).
  lo_column->set_technical( abap_true ).
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIF_COLUMNA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<WA_FIELD>_FIELDNAME  text
*      <--P_LO_COLUMN  text
*----------------------------------------------------------------------*
FORM f_modif_columna USING    pe_text TYPE string
                      CHANGING pc_column TYPE REF TO cl_salv_column.
  DATA: lv_short TYPE scrtext_s,
        lv_med   TYPE scrtext_m,
        lv_long  TYPE scrtext_l,
        lv_len   TYPE lvc_outlen,
        lv_tool  TYPE lvc_tip.


  lv_long  = pe_text.
  lv_med   = pe_text.
  lv_short = pe_text.
  pc_column->set_long_text( lv_long ). "40
  pc_column->set_fixed_header_text( abap_true ).
  pc_column->set_medium_text( lv_med ). "20
  pc_column->set_short_text( lv_short ). "10
  pc_column->set_tooltip( lv_tool ).
  lv_len = strlen( pe_text ).
  pc_column->set_output_length( lv_len ).
  pc_column->set_zero( abap_true ).
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CAMBIA_UNIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MARA_MATNR  text
*      -->P_LS_LEIN_MGEWI  text
*      -->P_LS_LEIN_GEWEI  text
*      -->P_0627   text
*      <--P_LV_AUX  text
*----------------------------------------------------------------------*
FORM f_cambia_unidad  USING pe_matnr TYPE matnr
                            pe_cant TYPE lqua_verme
                            pe_gmein TYPE gewei
                            pe_unit_conv TYPE gewei
                      CHANGING pc_cant TYPE lein_mgewi.
  DATA: lv_aux  TYPE bstmg,
        lv_aux2 TYPE bstmg.
  CLEAR pc_cant.

  MOVE pe_cant TO lv_aux.
  CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
    EXPORTING
      i_matnr              = pe_matnr
      i_in_me              = pe_gmein
      i_out_me             = pe_unit_conv
      i_menge              = lv_aux
    IMPORTING
      e_menge              = lv_aux2
    EXCEPTIONS
      error_in_application = 1
      error                = 2
      OTHERS               = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
    MOVE lv_aux2 TO pc_cant.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_CALIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PE_WERKS  text
*      -->P_PE_MARA_MATKL  text
*      <--P_LV_CALIDAD  text
*----------------------------------------------------------------------*
FORM f_dame_calidad  USING    pe_werks TYPE werks_d
                              pe_matkl TYPE matkl
                     CHANGING pc_cal TYPE char03.
  CONSTANTS: lc_calidad TYPE zedpi0002 VALUE 'CALIDAD'.

  DATA: lv_cod     TYPE zedpi0001,
        lv_val_ext TYPE zedpi0005.

  CLEAR pc_cal.

  SELECT SINGLE zcodigo INTO lv_cod
    FROM ztpi0001
    WHERE zdescripcion = lc_calidad.

  IF lv_cod IS NOT INITIAL.
    SELECT SINGLE zvalor_externo
      INTO lv_val_ext
      FROM ztpi0003
      WHERE zcodigo = lv_cod AND
            werks = pe_werks AND
            zvalor_sap  = pe_matkl.

    IF sy-subrc EQ 0.
      SELECT SINGLE calidad
        INTO pc_cal
        FROM ztpi0013
        WHERE valor_externo = lv_val_ext.
    ELSE.
      SELECT SINGLE ztpi0014~calidad
        FROM ztpi0014
        INTO pc_cal
        WHERE matkl EQ pe_matkl
        AND werks EQ pe_werks.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_SUPPLIER_LOT_ID2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_LTAP_CHARG  text
*      <--P_LV_STR  text
*----------------------------------------------------------------------*
FORM f_dame_supplier_lot_id2  USING  pe_matnr TYPE matnr
                                     pe_charg TYPE charg_d
                              CHANGING pc_lot_id TYPE string.

  CLEAR pc_lot_id.

  SELECT SINGLE licha
    FROM mch1
    INTO pc_lot_id
    WHERE matnr = pe_matnr AND
          charg = pe_charg.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_WHITE_TOP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MARA_MTART  text
*      <--P_LV_STR  text
*----------------------------------------------------------------------*
FORM f_get_white_top  USING    pe_matkl TYPE matkl
                      CHANGING pc_str TYPE string.
  CONSTANTS: lc_name TYPE rvari_vnam VALUE 'INTF_OMP_WHITETOP_YES'.

  DATA: ls_rang LIKE LINE OF grg_rang,
        lt_vals TYPE tvarvc_t.

  CLEAR pc_str.

  IF grg_rang[] IS INITIAL.
    SELECT * INTO TABLE lt_vals
      FROM tvarvc
      WHERE name = lc_name .

    LOOP AT lt_vals ASSIGNING FIELD-SYMBOL(<ls>).
      MOVE <ls>-sign TO ls_rang-sign.
      MOVE <ls>-opti TO ls_rang-option.
      MOVE <ls>-low TO ls_rang-low.
      MOVE <ls>-high TO ls_rang-high.
      IF ls_rang IS NOT INITIAL.
        APPEND ls_rang TO grg_rang.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF pe_matkl IN grg_rang.
    pc_str = 'YES'.
  ELSE.
    pc_str = 'NO'.
  ENDIF.

ENDFORM.
