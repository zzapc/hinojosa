*&---------------------------------------------------------------------*
*& Report  ZSWM_EXPEDICIONES_FECHA
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_expediciones_fecha.
TABLES:
  zswm_entregas.
DATA t_alv LIKE zswm_expediciones_fecha_str OCCURS 0 WITH HEADER LINE.
DATA: BEGIN OF t_vttp OCCURS 0,
        tknum LIKE vttk-tknum,
        vbeln LIKE vttp-vbeln,
      END   OF t_vttp.
SELECT-OPTIONS: s_wadat FOR zswm_entregas-wadat_ist,
        s_lgnum FOR zswm_entregas-lgnum,
        s_wbstk FOR zswm_entregas-wbstk DEFAULT 'C',
        s_werks FOR zswm_entregas-werks,
        s_lfart FOR zswm_entregas-lfart,
        s_vstel FOR zswm_entregas-vstel,
        s_mtart FOR zswm_entregas-mtart,
        s_vbtyp FOR zswm_entregas-vbtyp DEFAULT 'J'.

START-OF-SELECTION.





  SELECT * INTO TABLE @DATA(tt_ent) FROM zswm_entregas WHERE wadat_ist IN @s_wadat
                                                         AND werks     IN @s_werks
                                                         AND lfart     IN @s_lfart
                                                         AND vstel     IN @s_vstel
                                                         AND lgnum     IN @s_lgnum
                                                         AND mtart     IN @s_mtart
                                                         AND vbtyp     IN @s_vbtyp
                                                         AND wbstk     IN @s_wbstk.
  DATA reg TYPE zswm_expediciones_fecha_str.
  LOOP AT tt_ent INTO DATA(rt_ent).
    IF rt_ent-lhmg1 <= 0. rt_ent-lhmg1 = rt_ent-lfimg. ENDIF.
    READ TABLE t_vttp WITH KEY tknum = rt_ent-tknum TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      CLEAR reg.
      reg-wadat_ist = rt_ent-wadat_ist.
      reg-vstel     = rt_ent-vstel.
      reg-nentregas = 1.
      reg-ntransportes = 1.
*      reg-CTD_OUT = rt_ent-lfimg.
*      reg-meins   = rT_ent-vrkme.
      reg-npalet = rt_ent-lfimg / rt_ent-lhmg1.

      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
        EXPORTING
          i_matnr              = rt_ent-matnr
          i_in_me              = rt_ent-vrkme
          i_out_me             = 'M2'
          i_menge              = rt_ent-lfimg
        IMPORTING
          e_menge              = rt_ent-lfimg
        EXCEPTIONS
          error_in_application = 1
          error                = 2
          OTHERS               = 3.
      IF sy-subrc = 0.
        reg-cantm2 = rt_ent-lfimg.
        reg-m2 = 'M2'.
      ENDIF.

      COLLECT reg INTO t_alv.
      t_vttp-tknum = rt_ent-tknum.
      t_vttp-vbeln = rt_ent-vbeln.
      APPEND t_vttp.
    ELSE.
      READ TABLE t_vttp WITH KEY vbeln = rt_ent-vbeln TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        CLEAR reg.
        reg-wadat_ist = rt_ent-wadat_ist.
        reg-vstel     = rt_ent-vstel.
        reg-nentregas  = 0 .
        reg-ntransportes = 0.
*        add rt_ent-lfimg to reg-CTD_OUT.
        reg-npalet = rt_ent-lfimg / rt_ent-lhmg1.

        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = rt_ent-matnr
            i_in_me              = rt_ent-vrkme
            i_out_me             = 'M2'
            i_menge              = rt_ent-lfimg
          IMPORTING
            e_menge              = rt_ent-lfimg
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.
        IF sy-subrc = 0.
          reg-cantm2 = rt_ent-lfimg.
          reg-m2 = 'M2'.
        ENDIF.

        COLLECT reg INTO t_alv.
      ELSE.
        CLEAR reg.
        reg-wadat_ist = rt_ent-wadat_ist.
        reg-vstel     = rt_ent-vstel.
        reg-nentregas  = 1 .
        reg-ntransportes = 0.
        reg-npalet = rt_ent-lfimg / rt_ent-lhmg1.

        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = rt_ent-matnr
            i_in_me              = rt_ent-vrkme
            i_out_me             = 'M2'
            i_menge              = rt_ent-lfimg
          IMPORTING
            e_menge              = rt_ent-lfimg
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.
        IF sy-subrc = 0.
          reg-cantm2 = rt_ent-lfimg.
          reg-m2 = 'M2'.
        ENDIF.

        COLLECT reg INTO t_alv.

        t_vttp-tknum = rt_ent-tknum.
        t_vttp-vbeln = rt_ent-vbeln.
        APPEND t_vttp.

      ENDIF.
    ENDIF.
  ENDLOOP.
  DATA:l_cant TYPE menge_d.
  SELECT * INTO TABLE @DATA(tt_mse) FROM zswm_mseg WHERE budat_mkpf IN @s_wadat
                                                     AND lgnum      IN @s_lgnum
                                                     AND werks      IN @s_werks
                                                     AND mtart      IN @s_mtart
                                                     AND ( bwart EQ '101' OR bwart EQ '102' ).


  LOOP AT tt_mse INTO DATA(rt_mse).
    IF rt_mse-lhmg1 EQ 0.
      rt_mse-lhmg1 = rt_mse-menge.
    ENDIF.

    CLEAR: l_cant.

    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = rt_mse-matnr
        i_in_me              = rt_mse-meins
        i_out_me             = 'M2'
        i_menge              = rt_mse-menge
      IMPORTING
        e_menge              = l_cant
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    IF sy-subrc <> 0.
      CLEAR: l_cant.
    ELSE.
    ENDIF.

    READ TABLE t_alv WITH KEY wadat_ist = rt_mse-budat_mkpf
                              vstel     = rt_mse-werks.
    IF sy-subrc EQ 0.
      DATA(sw_tabix) = sy-tabix.
      CASE rt_mse-bwart.
        WHEN '101'.
          t_alv-npalet_fabricados =  t_alv-npalet_fabricados + abs( rt_mse-menge / rt_mse-lhmg1 ).
          t_alv-pgmng_m2 = t_alv-pgmng_m2 + abs( l_cant ).
*          t_alv-ctd_ofs  = t_alv-ctd_ofs  + abs( rt_mse-menge ).
        WHEN '102'.
          t_alv-npalet_fabricados =  t_alv-npalet_fabricados - abs( rt_mse-menge / rt_mse-lhmg1 ).
          t_alv-pgmng_m2 = t_alv-pgmng_m2 - abs( l_cant ).
*          t_alv-ctd_ofs  = t_alv-ctd_ofs  - abs( rt_mse-menge ).
      ENDCASE.

      t_alv-p_m2 = 'M2'.
      MODIFY t_alv INDEX sw_tabix.
    ELSE.
      CLEAR t_alv.
      t_alv-wadat_ist = rt_mse-budat_mkpf.
      t_alv-vstel     = rt_mse-werks.
      CASE rt_mse-bwart.
        WHEN '101'.
          t_alv-npalet_fabricados =  t_alv-npalet_fabricados + abs( rt_mse-menge / rt_mse-lhmg1 ).
          t_alv-pgmng_m2 = t_alv-pgmng_m2 + abs( l_cant ).
*          t_alv-ctd_ofs  = t_alv-ctd_ofs  + abs( rt_mse-menge ).

        WHEN '102'.
          t_alv-npalet_fabricados =  t_alv-npalet_fabricados - abs( rt_mse-menge / rt_mse-lhmg1 ).
          t_alv-pgmng_m2 = t_alv-pgmng_m2 - abs( l_cant ).
*          t_alv-ctd_ofs  = t_alv-ctd_ofs  - abs( rt_mse-menge ).

      ENDCASE.
*      t_alv-meins = rt_mse-meins.
      t_alv-p_m2 = 'M2'.
      APPEND t_alv.
    ENDIF.
  ENDLOOP.

*  DATA:l_cant TYPE menge_d.
*
*  LOOP AT tt_mse INTO DATA(rt_mse).
*    SELECT SINGLE mtart INTO @DATA(mtart) FROM mara WHERE matnr EQ @rt_mse-matnr.
*    CHECK mtart IN s_mtart.
*    SELECT SINGLE lhmg1 INTO @DATA(lhmg1) FROM mlgn WHERE matnr EQ @rt_mse-matnr
*                                                      AND lgnum EQ @rt_mse-lgnum.
*    IF lhmg1 IS INITIAL OR sy-subrc EQ 0.
*      lhmg1  = rt_mse-menge.
*    ENDIF.
*
*    CLEAR: l_cant.
*
*    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*      EXPORTING
*        i_matnr              = rt_ent-matnr
*        i_in_me              = rt_ent-vrkme
*        i_out_me             = 'M2'
*        i_menge              = rt_mse-menge
*      IMPORTING
*        e_menge              = l_cant
*      EXCEPTIONS
*        error_in_application = 1
*        error                = 2
*        OTHERS               = 3.
*    IF sy-subrc <> 0.
*      CLEAR: l_cant.
*    ELSE.
*    ENDIF.
*
*    READ TABLE t_alv WITH KEY wadat_ist = rt_mse-budat_mkpf
*                              vstel     = rt_mse-werks.
*
*
*
*    IF sy-subrc EQ 0.
*      DATA(sw_tabix) = sy-tabix.
*      CASE rt_mse-bwart.
*        WHEN '101'.
*          t_alv-npalet_fabricados =  t_alv-npalet_fabricados + ( rt_mse-menge / lhmg1 ).
*          t_alv-pgmng_m2 = t_alv-pgmng_m2 + l_cant.
*        WHEN '102'.
*          t_alv-npalet_fabricados =  t_alv-npalet_fabricados - ( rt_mse-menge / lhmg1 ).
*          t_alv-pgmng_m2 = t_alv-pgmng_m2 - l_cant.
*      ENDCASE.
*      t_alv-p_m2 = 'M2'.
*      MODIFY t_alv INDEX sw_tabix.
*    ELSE.
*      CLEAR t_alv.
*      t_alv-wadat_ist = rt_mse-budat_mkpf.
*      t_alv-vstel     = rt_mse-werks.
*      CASE rt_mse-bwart.
*        WHEN '101'.
*          t_alv-npalet_fabricados =  t_alv-npalet_fabricados + ( rt_mse-menge / lhmg1 ).
*          t_alv-pgmng_m2 = t_alv-pgmng_m2 + l_cant.
*        WHEN '102'.
*          t_alv-npalet_fabricados =  t_alv-npalet_fabricados - ( rt_mse-menge / lhmg1 ).
*          t_alv-pgmng_m2 = t_alv-pgmng_m2 - l_cant.
*      ENDCASE.
*      t_alv-p_m2 = 'M2'.
*      APPEND t_alv.
*    ENDIF.
*  ENDLOOP.
  LOOP AT t_alv." WHERE npalet_fabricados < 0.
    sw_tabix = sy-tabix.
    if t_alv-npalet_fabricados < 0.
    t_alv-npalet_fabricados = 0.
    endif.
    DATA day_p TYPE p.

    day_p = t_alv-wadat_ist MOD 7.
* DAY_P enthält 0 für Samstag, 1 für Sonntag, etc.. und muß
* der Kalendernotation: 1 für Montag, 2 für Dienstag, etc.,
* angepaßt werden.
    IF day_p > 1.
      day_p = day_p - 1.
    ELSE.
      day_p = day_p + 6.
    ENDIF.
    CASE day_p.
      WHEN 1. t_alv-dayofweek = 'Lunes'.
      WHEN 2. t_alv-dayofweek = 'Martes'.
      WHEN 3. t_alv-dayofweek = 'Miercoles'.
      WHEN 4. t_alv-dayofweek = 'Jueves'.
      WHEN 5. t_alv-dayofweek = 'Viernes'.
      WHEN 6. t_alv-dayofweek = 'Sabado'.
      WHEN 7. t_alv-dayofweek = 'Domingo'.
    ENDCASE.

    MODIFY t_alv INDEX sw_tabix.
  ENDLOOP.

  SORT t_alv BY wadat_ist vstel ASCENDING.
  PERFORM alv TABLES t_alv USING 'ZSWM_EXPEDICIONES_FECHA_STR'.
FORM alv  TABLES   t_alv
        USING    VALUE(p_tabname) LIKE dd03n-tabname.
  IF t_alv IS INITIAL.
    APPEND t_alv.
  ENDIF.
  CALL FUNCTION 'DISPLAY_BASIC_LIST'
    EXPORTING
*     BASIC_LIST_TITLE    =
      file_name           = 'PP'
*     HEAD_LINE1          = ' '
*     HEAD_LINE2          = ' '
*     HEAD_LINE3          = ' '
*     HEAD_LINE4          = ' '
*     FOOT_NOTE1          = ' '
*     FOOT_NOTE2          = ' '
*     FOOT_NOTE3          = ' '
*     LAY_OUT             = 0
*     DYN_PUSHBUTTON_TEXT1       =
*     DYN_PUSHBUTTON_TEXT2       =
*     DYN_PUSHBUTTON_TEXT3       =
*     DYN_PUSHBUTTON_TEXT4       =
*     DYN_PUSHBUTTON_TEXT5       =
*     DYN_PUSHBUTTON_TEXT6       =
      data_structure      = p_tabname
*     CURRENT_REPORT      =
*     LIST_LEVEL          = ' '
*     ADDITIONAL_OPTIONS  = ' '
*     WORD_DOCUMENT       =
*     APPLICATION         =
*     OLDVALUES           = ' '
*     NO_ALV_GRID         =
*     ALV_MARKER          =
*     IMPORTING
*     RETURN_CODE         =
    TABLES
      data_tab            = t_alv
*     FIELDNAME_TAB       =
*     SELECT_TAB          =
*     ERROR_TAB           =
*     RECEIVERS           =
    EXCEPTIONS
      download_problem    = 1
      no_data_tab_entries = 2
      table_mismatch      = 3
      print_problems      = 4
      OTHERS              = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
