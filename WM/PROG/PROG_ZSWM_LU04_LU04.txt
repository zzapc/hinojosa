*&---------------------------------------------------------------------*
*& Report  ZSWM_LU04
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_lu04.
INCLUDE zswm_macro.
TABLES: lqua, lagp.
*DATA:  BEGIN OF ilquaub OCCURS 50.       " Quants beim Umbuchen im
*         INCLUDE STRUCTURE lquau.       " LE-verwalteten Blocklager
*       DATA:  END OF ilquaub.
DATA:  BEGIN OF ilquau OCCURS 200.      " Quants beim Umbuchen
         INCLUDE STRUCTURE lquau.
       DATA:  END OF ilquau.
DATA: ilquau_tabix1         LIKE          sy-tabix.
TABLES: lubu, ltbk.
DATA tt_data TYPE TABLE OF zswm_lu04_str." occurs 0 WITH HEADER LINE.
PARAMETERS: p_lgnum LIKE lubu-lgnum OBLIGATORY.
SELECTION-SCREEN BEGIN OF BLOCK glo WITH FRAME TITLE text-glo.

SELECT-OPTIONS: s_ubnum FOR lubu-ubnum,
                s_statu FOR lubu-statu,
                s_pautt FOR lubu-autta,

                s_bname FOR lubu-bname,
                s_bdatu FOR lubu-bdatu,
                s_mblnr FOR lubu-mblnr,
                s_mjahr FOR lubu-mjahr,
                s_mbpos FOR lubu-mbpos,
                s_bwart FOR lubu-bwart,
                s_bwlvs FOR lubu-bwlvs,
                s_qplos FOR lubu-qplos,
                s_qplon FOR lubu-qplon.
SELECTION-SCREEN END OF BLOCK glo.

SELECTION-SCREEN BEGIN OF BLOCK ori WITH FRAME TITLE text-ori.
SELECT-OPTIONS:
                s_matn1 FOR lubu-matn1,
                s_werk1 FOR lubu-werk1,
                s_lgor1 FOR lubu-lgor1,
                s_bstq1 FOR lubu-bstq1,
                s_chrg1 FOR lubu-chrg1,
                s_sokz1 FOR lubu-sokz1,
                s_sonr1 FOR lubu-sonr1.
SELECTION-SCREEN END OF BLOCK ori.
SELECTION-SCREEN BEGIN OF BLOCK dst WITH FRAME TITLE text-dst.
SELECT-OPTIONS:
                s_matn2 FOR lubu-matn2,
                s_werk2 FOR lubu-werk2,
                s_lgor2 FOR lubu-lgor2,
                s_bstq2 FOR lubu-bstq2,
                s_chrg2 FOR lubu-chrg2,
                s_sokz2 FOR lubu-sokz2,
                s_sonr2 FOR lubu-sonr2.

SELECTION-SCREEN END OF BLOCK dst.
SELECTION-SCREEN BEGIN OF BLOCK otr WITH FRAME TITLE text-otr.
SELECT-OPTIONS: s_lgtyp FOR lqua-lgtyp OBLIGATORY DEFAULT '230',
                s_lgpla FOR lqua-lgpla OBLIGATORY DEFAULT 'REPROCESOS'.
PARAMETERS: p_mmat TYPE flag,
            p_mmlo TYPE flag,
            p_mmeo TYPE flag,
            p_mmso TYPE flag.
SELECTION-SCREEN END OF BLOCK otr.
PARAMETERS: p_test TYPE flag DEFAULT 'X',
            p_mode OBLIGATORY DEFAULT 'N'.
*at SELECTION-SCREEN on BLOCK glo.
*    SELECT SINGLE COUNT( * ) FROM T333N
*  WHERE LGNUM = P_LGNUM
*    AND AUTTA in s_PAUTT.
*
*  IF SY-SUBRC <> 0.
*    MESSAGE E348(L3)."  WITH P_AUTTA.
*  ENDIF.

INITIALIZATION.
  s_statu+0(3) = 'INE'. " append s_statu. " blanco
  s_statu-low  = 'U'.   APPEND s_statu.
  s_qplos+0(3) = 'INE'. APPEND s_qplos.
  s_bstq1+0(3) = 'IEQ'. s_bstq1-low = 'Q'. APPEND s_bstq1.
  s_bstq2+0(3) = 'INE'. s_bstq2-low = 'Q'. APPEND s_bstq2.

START-OF-SELECTION.
  SELECT * INTO TABLE tt_data FROM lubu WHERE lgnum EQ p_lgnum
                                                 AND ubnum IN s_ubnum
                                                 AND autta IN s_pautt
                                                 AND statu IN s_statu
                                                 AND bname IN s_bname
                                                 AND bdatu IN s_bdatu
                                                 AND mblnr IN s_mblnr
                                                 AND mjahr IN s_mjahr
                                                 AND mbpos IN s_mbpos
                                                 AND bwart IN s_bwart
                                                 AND bwlvs IN s_bwlvs
                                                 AND qplos IN s_qplos
                                                 AND qplon IN s_qplon
                                                 AND matn1 IN s_matn1
                                                 AND werk1 IN s_werk1
                                                 AND lgor1 IN s_lgor1
                                                 AND bstq1 IN s_bstq1
                                                 AND chrg1 IN s_chrg1
                                                 AND sokz1 IN s_sokz1
                                                 AND sonr1 IN s_sonr1
                                                 AND matn2 IN s_matn2
                                                 AND werk2 IN s_werk2
                                                 AND lgor2 IN s_lgor2
                                                 AND bstq2 IN s_bstq2
                                                 AND chrg2 IN s_chrg2
                                                 AND sokz2 IN s_sokz2
  AND sonr2 IN s_sonr2.
  IF sy-subrc EQ 0.
    SELECT * INTO TABLE @DATA(tt_t333n) FROM t333n WHERE lgnum EQ @p_lgnum.
  ENDIF.
*  REFRESH ilquaub.
*  REFRESH ilquau.
*  ilquau_tabix1 = 1.

  LOOP AT tt_data INTO DATA(rt_data).
    DATA(sw_tabix) = sy-tabix.
    IF p_mmat EQ abap_true.
      IF rt_data-matn1 NE rt_data-matn2.
        DELETE tt_data INDEX sw_tabix.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF p_mmeo EQ abap_true.
      IF rt_data-werk1 NE rt_data-werk2
      OR rt_data-lgor1 NE rt_data-lgor2.
        DELETE tt_data INDEX sw_tabix.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF p_mmlo EQ abap_true.
      IF rt_data-sokz1 NE rt_data-sokz2
      OR rt_data-sonr1 NE rt_data-sonr2.
        DELETE tt_data INDEX sw_tabix.
        CONTINUE.
      ENDIF.
    ENDIF.
    IF p_mmso EQ abap_true.
      IF rt_data-chrg1 NE rt_data-chrg2.
        DELETE tt_data INDEX sw_tabix.
        CONTINUE.
      ENDIF.
    ENDIF.
    READ TABLE tt_t333n INTO DATA(rt_t33n) WITH KEY autta = rt_data-autta.
    IF sy-subrc NE 0.
      DELETE tt_data INDEX sw_tabix.
      CONTINUE.

*      rt_data-error = abap_true.
*      MESSAGE e404(l3) INTO rt_data-message.
    ELSE.
      IF rt_data-qplos IS INITIAL.
        DELETE tt_data INDEX sw_tabix.
      ELSE.
        REFRESH ilquau.
        ilquau_tabix1 = 1.

        SELECT * FROM lqua
         WHERE lgnum = rt_data-lgnum
           AND matnr = rt_data-matn1
           AND werks = rt_data-werk1
           AND lgort = rt_data-lgor1
           AND bestq = rt_data-bstq1
           AND charg = rt_data-chrg1
           AND sobkz = rt_data-sokz1
           AND sonum = rt_data-sonr1
           AND lgtyp IN s_lgtyp
           AND lgpla IN s_lgpla.

*  ........Es interessieren nur positive Quants..........................

          CHECK lqua-verme >= 0.

          PERFORM daten_ilquau_lqua.

          APPEND ilquau.

        ENDSELECT.
        IF sy-subrc NE 0.
          DELETE tt_data INDEX sw_tabix.
        ELSE.
          READ TABLE ilquau WITH KEY qplos = rt_data-qplos.
          IF sy-subrc NE 0.
            rt_data-message = 'REPROCESAR'.
          ENDIF.
        ENDIF.
      ENDIF.

    ENDIF.

    MODIFY tt_data FROM rt_data INDEX sw_tabix.
  ENDLOOP.
  IF p_test NE abap_true.
    LOOP AT tt_data INTO rt_data WHERE message EQ 'REPROCESAR'.
      sw_tabix = sy-tabix.
      CLEAR t_bdc[].
      CLEAR t_bdcmsgcoll[].
      dynpro 'SAPML02B' '0300'.
      campo  'LUBU-LGNUM' rt_data-lgnum.
      campo  'LUBU-UBNUM' rt_data-ubnum.
      boton  '/00'.
      dynpro 'SAPML02B' '0302'.
      campo  'LUBU-QPLOS' space.
      boton  '=BU'.
      CALL TRANSACTION 'LU02' USING t_bdc MODE p_mode MESSAGES INTO t_bdcmsgcoll.
      rt_data-message = 'REPROCESAR2'.
      MODIFY tt_data FROM rt_data INDEX sw_tabix.

    ENDLOOP.
    LOOP AT tt_data INTO rt_data WHERE message EQ 'REPROCESAR2'.
      sw_tabix = sy-tabix.
      CLEAR t_bdc[].
      CLEAR t_bdcmsgcoll[].
      dynpro 'SAPML03T' '0141'.
      campo  'LUBU-LGNUM' rt_data-lgnum.
      campo  'LUBU-UBNUM' rt_data-ubnum.
      boton  '/00'.
      CALL TRANSACTION 'LT05' USING t_bdc MODE p_mode MESSAGES INTO t_bdcmsgcoll.

      rt_data-message = 'REPROCESAR3'.
      MODIFY tt_data FROM rt_data INDEX sw_tabix.

    ENDLOOP.

  ENDIF.
  PERFORM alv TABLES tt_data USING 'ZSWM_LU04_STR'.
FORM alv  TABLES   t_alv
          USING    VALUE(p_tabname) LIKE dd03n-tabname.
  IF t_alv IS INITIAL.
    APPEND t_alv.
  ENDIF.
  CALL FUNCTION 'DISPLAY_BASIC_LIST'
    EXPORTING
*     BASIC_LIST_TITLE    =
      file_name           = 'PP'
*     HEAD_LINE1          = ' '
*     HEAD_LINE2          = ' '
*     HEAD_LINE3          = ' '
*     HEAD_LINE4          = ' '
*     FOOT_NOTE1          = ' '
*     FOOT_NOTE2          = ' '
*     FOOT_NOTE3          = ' '
*     LAY_OUT             = 0
*     DYN_PUSHBUTTON_TEXT1       =
*     DYN_PUSHBUTTON_TEXT2       =
*     DYN_PUSHBUTTON_TEXT3       =
*     DYN_PUSHBUTTON_TEXT4       =
*     DYN_PUSHBUTTON_TEXT5       =
*     DYN_PUSHBUTTON_TEXT6       =
      data_structure      = p_tabname
*     CURRENT_REPORT      =
*     LIST_LEVEL          = ' '
*     ADDITIONAL_OPTIONS  = ' '
*     WORD_DOCUMENT       =
*     APPLICATION         =
*     OLDVALUES           = ' '
*     NO_ALV_GRID         =
*     ALV_MARKER          =
*     IMPORTING
*     RETURN_CODE         =
    TABLES
      data_tab            = t_alv
*     FIELDNAME_TAB       =
*     SELECT_TAB          =
*     ERROR_TAB           =
*     RECEIVERS           =
    EXCEPTIONS
      download_problem    = 1
      no_data_tab_entries = 2
      table_mismatch      = 3
      print_problems      = 4
      OTHERS              = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DATEN_ILQUAU_LQUA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM daten_ilquau_lqua .
  CLEAR ilquau.
  MOVE: lqua-lqnum TO ilquau-lqnum,
        lqua-lgtyp TO ilquau-lgtyp,
        lqua-lgpla TO ilquau-lgpla,
        lqua-plpos TO ilquau-plpos,
        lqua-letyp TO ilquau-letyp,
        lqua-skzsi TO ilquau-skzsi,
        lqua-skzsa TO ilquau-skzsa,
        lqua-skzse TO ilquau-skzse,
        lqua-skzua TO ilquau-skzua,
        lqua-skzue TO ilquau-skzue,
        lqua-wenum TO ilquau-wenum,
        lqua-wepos TO ilquau-wepos,
        lqua-wdatu TO ilquau-wdatu,
        lqua-vfdat TO ilquau-vfdat,
        lqua-qplos TO ilquau-qplos,
        lqua-verme TO ilquau-verme,
        lqua-einme TO ilquau-einme,
        lqua-ausme TO ilquau-ausme,
        lqua-kzhuq TO ilquau-huqua,
        lqua-lenum TO ilquau-lenum.

*... Advanced Returns Management - Posting Change
  IF cl_ops_switch_check=>ops_sfws_sc_advret1( ) EQ 'X'.
    MOVE: lqua-msr_insp_guid TO ilquau-msr_insp_guid.
  ENDIF.

  PERFORM umrechnen_meins_altme(sapfl000) USING lubu-matn1
                                                lubu-werk1
                                                lubu-chrg1
                                                lqua-verme
                                                lubu-meins
                                                ilquau-verma
                                                lubu-altm1
                                                lubu-umrz1
                                                lubu-umrn1.


  PERFORM umrechnen_meins_altme(sapfl000) USING lubu-matn1
                                                lubu-werk1
                                                lubu-chrg1
                                                lqua-einme
                                                lubu-meins
                                                ilquau-einma
                                                lubu-altm1
                                                lubu-umrz1
                                                lubu-umrn1.


ENDFORM.
