*&---------------------------------------------------------------------*
*& Report  ZSWM_RESCATAR_RECORTE
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_cambiar_stock_cl.
PARAMETERS: p_lgnum LIKE lein-lgnum OBLIGATORY,
            p_lenum LIKE lein-lenum.
SELECTION-SCREEN SKIP 1.
PARAMETERS:
  p_matnr LIKE lqua-matnr,
  p_maktx LIKE makt-maktx,
  p_charg LIKE lqua-charg,
  p_verme LIKE lqua-verme,
  p_meins LIKE lqua-meins,
  p_bestq LIKE lqua-bestq,
  p_sobkz LIKE lqua-sobkz,
  p_sonum LIKE lqua-sonum,
  p_vbeln LIKE vbak-vbeln,
  p_posnr LIKE vbap-posnr,
  p_nltyp LIKE ltap-nltyp,
  p_nlpla LIKE ltap-nlpla.
PARAMETERS: p_liber RADIOBUTTON GROUP rd1,
            p_fija  RADIOBUTTON GROUP rd1.
PARAMETERS: p_vbeln2 LIKE vbap-vbeln,
            p_posnr2 LIKE vbap-posnr.

AT SELECTION-SCREEN ON p_lenum.
  SELECT SINGLE * INTO @DATA(lein) FROM lein WHERE lenum EQ @p_lenum.
  IF sy-subrc NE 0.
    MESSAGE e398(00) WITH text-e01.
  ELSE.

    SELECT SINGLE * INTO @DATA(ltap) FROM lqua WHERE lgnum EQ @p_lgnum
                                                 AND lgtyp EQ @lein-lgtyp
                                                 AND lgpla EQ @lein-lgpla
                                                 AND lenum EQ @p_lenum.

    p_lgnum = ltap-lgnum.
    p_matnr = ltap-matnr.
    p_charg = ltap-charg.
    p_verme = ltap-verme.
    p_meins = ltap-meins.
    p_bestq = ltap-bestq.
    p_sobkz = ltap-sobkz.
    p_sonum = ltap-sonum.
    p_vbeln = p_sonum+0(10).
    p_posnr = p_sonum+10(6).
    IF ltap-sonum IS NOT INITIAL.
      CLEAR p_fija.
      MOVE abap_true TO p_liber.
    ELSE.
      MOVE abap_true TO p_fija.
      CLEAR p_liber.
    ENDIF.
    p_nltyp = lein-lgtyp.
    p_nlpla = lein-lgpla.

    SELECT SINGLE maktx INTO p_maktx FROM makt WHERE matnr EQ p_matnr
                                      AND spras EQ sy-langu.

*       ENDSELECT.
  ENDIF.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF screen-name EQ 'P_LENUM'.
      IF p_lenum IS NOT INITIAL.
        screen-input = 0.
      ENDIF.
    ELSEIF screen-name EQ 'P_MATNR'
        OR screen-name EQ 'P_MAKTX'
        OR screen-name EQ 'P_CHARG'
        OR screen-name EQ 'P_MEINS'
        OR screen-name EQ 'P_BESTQ'
        OR screen-name EQ 'P_SOBKZ'
        OR screen-name EQ 'P_SONUM'
        OR screen-name EQ 'P_VBELN'
        OR screen-name EQ 'P_POSNR'
*        or screen-name eq 'P_LGNUM'
        OR screen-name EQ 'P_TANUM'
        OR screen-name EQ 'P_TAPOS'
        OR screen-name EQ 'P_VERME'
        OR screen-name EQ 'P_NLTYP'
        OR screen-name EQ 'P_NLPLA'.
      screen-input = 0.
    ELSEIF screen-name EQ 'P_FIJA'
        OR screen-name EQ 'P_LIBER'.
      screen-input = 0.
    ELSEIF screen-name EQ 'P_VBELN2'
        OR screen-name EQ 'P_POSNR2'.
      IF p_lenum IS  INITIAL OR p_liber EQ abap_true.
        screen-input = 0.
      ELSE.
        screen-input = 1.
        screen-required = 1.
      ENDIF.

    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.

START-OF-SELECTION.
  DATA: error  TYPE flag,
        tt_log TYPE bapiret2_t.
  data:
         tT_lenum type ZSWM_CHANGE_LENUM_SONUM_TT,
         rT_lenum type ZSWM_CHANGE_LENUM_SONUM_SCR.
  clear: tt_lenum[], rt_lenum.
  rt_lenum-lenum = p_lenum.
  if p_liber ne abap_true.
    rt_lenum-new_sonum+0(10) = p_vbeln2.
    rt_lenum-new_sonum+10(6) = p_posnr2.
  endif.
  append rt_lenum to tt_lenum.
  CALL FUNCTION 'ZSWM_CHANGE_SONUM_LENUM'
    EXPORTING
      TT_LENUM         = tt_lenum
   IMPORTING
*     GM_HEADRET       =
     ERROR            = error
     TT_LOG           = tt_log
            .

*  CALL FUNCTION 'ZSWM_CAMBIAR_UA_STOCK_CLI'
*    EXPORTING
*      lenum  = p_lenum
*      vbeln  = p_vbeln2
*      posnr  = p_posnr2
**     EBELN  =
**     EBELP  =
*      libera = p_liber
*    IMPORTING
**     GM_HEADRET       =
*      error  = error
*      tt_log = tt_log.
  IF error EQ abap_true.
    LOOP AT tt_log INTO DATA(rt_log).
      MESSAGE ID rt_log-id TYPE 'I' NUMBER rt_log-number WITH rt_log-message_v1 rt_log-message_v2 rt_log-message_v3 rt_log-message_v4.
      EXIT.
    ENDLOOP.
  ELSE.
    DO 6 TIMES.
      wait up to 1 SECONDS.
      data: sobkz type lqua-sobkz,
            sonum type lqua-sonum.
      select SINGLE sobkz sonum into (sobkz, sonum) from lqua BYPASSING BUFFER
                    WHERE lgnum EQ p_lgnum
                      AND lenum EQ p_lenum.
      check sonum eq rt_lenum-new_sonum.
      exit.
    ENDDO.
    set PARAMETER ID 'LEN' FIELD p_lenum.
    CALL TRANSACTION 'LS27' AND SKIP FIRST SCREEN.
  ENDIF.
