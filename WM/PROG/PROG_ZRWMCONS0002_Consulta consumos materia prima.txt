*&---------------------------------------------------------------------*
*& Report  ZRWMCONS0002
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zrwmcons0002.


**************************
* Tipos de datos
**************************
TABLES: zwmcons0002_s_dynpro200, zwmcons0002_s_alv.

TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zwmcons0002_s_alv.
       TYPES END OF st_lin_alv.

**************************
* Variables globales
**************************
DATA rg_consumos TYPE REF TO zcl_zui5_wm_consumos_dpc_imp.
DATA rg_nt       TYPE REF TO zcl_zui5_wm_nt_dpc_ext.


"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.


**************************
* PAntalla de selección
**************************

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
PARAMETERS: p_werks TYPE t001w-werks OBLIGATORY.

SELECT-OPTIONS: s_dats  FOR zwmcons0002_s_alv-dats,
                s_tims  FOR zwmcons0002_s_alv-tims,
                s_lgpla FOR zwmcons0002_s_alv-lgpla,
                s_cinum FOR zwmcons0002_s_alv-ci_number,
                s_aufnr FOR zwmcons0002_s_alv-aufnr,
                s_matnr FOR zwmcons0002_s_alv-matnr,
                s_charg FOR zwmcons0002_s_alv-charg.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-t02.
PARAMETERS: p_vari TYPE slis_vari.
SELECTION-SCREEN END OF BLOCK b2.

**************************
* Eventos
**************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  PERFORM f_dame_variant CHANGING p_vari.


*&---------------------------------------------------------------------*
*&      Module  PBO_200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_200 OUTPUT.
  SET PF-STATUS 'STA_0200'.
  SET TITLEBAR 'T02'.

  IF zwmcons0002_s_dynpro200-lenum IS NOT INITIAL.
    PERFORM f_get_unidad_almacen USING zwmcons0002_s_dynpro200-lenum.
  ELSE.
    PERFORM f_init_dynpro200.
  ENDIF.
ENDMODULE.



*&---------------------------------------------------------------------*
*&      Module  PAI_200_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pai_200_exit INPUT.
  CASE okcode.
    WHEN 'VOLVER' OR 'ATRAS' OR 'CANCELAR'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PAI_200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pai_200 INPUT.
  CASE okcode.
    WHEN 'GRABAR'.
      PERFORM f_notificar_consumo.
  ENDCASE.
ENDMODULE.


*&---------------------------------------------------------------------*
*&      Form  F_DAME_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARI  text
*----------------------------------------------------------------------*
FORM f_dame_variant  CHANGING pc_vari TYPE slis_vari.
  DATA: ls_variant TYPE disvariant,
        lv_exit    TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'LVC_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = lv_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    CHECK lv_exit EQ space.
    pc_vari = ls_variant-variant.
  ENDIF.
ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.

  vg_no_justif_cols = 'X'.
*  wa_layout-sel_mode  = 'D'.
*  vg_alv_protegido_por_defecto = vg_edit.

  PERFORM f_config_dynpro     USING  '0100' ''      'T01' 'STA_100' ' ' space.
  PERFORM f_config_subscreen  USING  '0100' '0110' 'CC_ALV' 'T01' space.

  DATA: wl_config_edit TYPE st_config_edit.
  wl_config_edit-dynpro                 = '0110'.
  PERFORM f_config_dynpro_edit    USING  wl_config_edit.


  rg_consumos = NEW zcl_zui5_wm_consumos_dpc_imp( ).
  rg_nt       = NEW zcl_zui5_wm_nt_dpc_ext( ).

ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES tp_catalogo TYPE lvc_t_fcat USING vp_dynnr.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZWMCONS0002_S_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = tp_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
    CASE <fs_catalogo>-fieldname.
      WHEN 'CLA_ERROR'.
        <fs_catalogo>-checkbox = 'X'.
        <fs_catalogo>-outputlen = 8.
      WHEN 'CLA_MANUAL'.
        <fs_catalogo>-checkbox = 'X'.
        <fs_catalogo>-outputlen = 8.
      WHEN 'TEXTO'.
        <fs_catalogo>-outputlen = 80.
    ENDCASE.
  ENDLOOP.

  wa_variant-report = sy-repid.
  wa_variant-handle = p_vari.
ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  f_llenar_datos
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv USING vp_dynpro.
  CHECK vp_dynpro = '0110'.

  DATA tl_consumos_pp TYPE TABLE OF zwmcons0002_s_alv.
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE @tl_consumos_pp
    FROM zwm_consumos_pp
    WHERE werks     = @p_werks   AND
          dats      IN @s_dats   AND
          tims      IN @s_tims   AND
          lgpla     IN @s_lgpla  AND
          ci_number IN @s_cinum  AND
          aufnr     IN @s_aufnr  AND
          matnr     IN @s_matnr  AND
          charg     IN @s_charg.
  CHECK sy-subrc = 0.


  SELECT afru~rueck, afru~rmzhl, afru~wablnr, afwi~mblnr, afwi~mjahr, afwi~mblpo
    INTO TABLE @DATA(tl_afru)
    FROM afru LEFT OUTER JOIN afwi ON afwi~rueck = afru~rueck AND
                                      afwi~rmzhl = afru~rmzhl AND
                                      afwi~mblnr = afru~wablnr
    FOR ALL ENTRIES IN @tl_consumos_pp
    WHERE afru~rueck = @tl_consumos_pp-rueck AND
          afru~rmzhl = @tl_consumos_pp-rmzhl.


  SELECT weblnr, weblpos, rueck, rmzhl
      INTO TABLE @DATA(tl_affw)
      FROM affw
      FOR ALL ENTRIES IN @tl_consumos_pp
      WHERE affw~rueck = @tl_consumos_pp-rueck AND
            affw~rmzhl = @tl_consumos_pp-rmzhl.


  LOOP AT tl_consumos_pp ASSIGNING FIELD-SYMBOL(<fs_consumos_pp>).
    DATA vl_ci_number TYPE lvs_benum.
    zcl_wm_nt_generic=>convert_benum_omp_external( EXPORTING vp_input  = CONV #( <fs_consumos_pp>-ci_number )
                                                   IMPORTING vp_output = vl_ci_number ).
    <fs_consumos_pp>-ci_number = vl_ci_number.

    READ TABLE tl_afru ASSIGNING FIELD-SYMBOL(<fs_afru>) WITH KEY rueck = <fs_consumos_pp>-rueck
                                                                  rmzhl = <fs_consumos_pp>-rmzhl.
    IF sy-subrc = 0 AND <fs_afru>-wablnr IS NOT INITIAL.
      <fs_consumos_pp>-mblnr = <fs_afru>-mblnr.
      <fs_consumos_pp>-mjahr = <fs_afru>-mjahr.
      <fs_consumos_pp>-zeile = <fs_afru>-mblpo.
    ELSE.
      READ TABLE tl_affw ASSIGNING FIELD-SYMBOL(<fs_affw>) WITH KEY rueck = <fs_consumos_pp>-rueck
                                                                    rmzhl = <fs_consumos_pp>-rmzhl.
      IF sy-subrc = 0.
        <fs_consumos_pp>-texto      = 'Movimiento erróneo pendiente tratamiento posterior. Revise transacción COGI'.
        <fs_consumos_pp>-cla_error  = 'X'.
      ENDIF.
    ENDIF.
  ENDLOOP.

  MOVE-CORRESPONDING tl_consumos_pp TO tp_alv[].
ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  f_llenar_datos
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_handle_toolbar USING vp_dynpro
                            rp_object TYPE REF TO cl_alv_event_toolbar_set
                            vp_interactive.


  "Separador
  APPEND INITIAL LINE TO rp_object->mt_toolbar ASSIGNING FIELD-SYMBOL(<fs_toolbar>).
  <fs_toolbar>-butn_type = 3.

  APPEND INITIAL LINE TO rp_object->mt_toolbar ASSIGNING <fs_toolbar>.
  <fs_toolbar>-function   = 'CONSUMO'.
  <fs_toolbar>-icon       = icon_insert_row.
  <fs_toolbar>-text       = 'Nuevo consumo'.
  <fs_toolbar>-quickinfo  = 'Nuevo consumo'.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_handle_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_handle_user_command USING vp_ucomm.
  CASE vp_ucomm.
    WHEN 'CONSUMO'.
      PERFORM f_init_dynpro200.
      CALL SCREEN 200.
  ENDCASE.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_NOTIFICAR_CONSUMO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_notificar_consumo .

  IF zwmcons0002_s_dynpro200-aufnr IS INITIAL AND zwmcons0002_s_dynpro200-cinumber IS INITIAL.
    MESSAGE 'Debe indicar CI Number o número de orden' TYPE 'I' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.


  DATA vl_answer TYPE c.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question  = 'Se van a notificar el consumo. ¿Quiere continuar?'
    IMPORTING
      answer         = vl_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.
  CHECK vl_answer = '1'.

  TRY.
      DATA(wl_centro) = rg_consumos->centros_getdetail( p_werks ).
    CATCH /iwbep/cx_mgw_busi_exception INTO DATA(rl_exc).
      MESSAGE rl_exc->get_text( ) TYPE 'I' DISPLAY LIKE 'E'.
      RETURN.
  ENDTRY.

  DATA(vl_aufnr) = zwmcons0002_s_dynpro200-aufnr.
  IF vl_aufnr IS INITIAL.
    SELECT SINGLE lgnum, cinumber, upper_orderid
      INTO @DATA(wl_intf_omp_sap)
      FROM zwm_intf_omp_sap
      WHERE lgnum        = @wl_centro-lgnum AND
            cinumber     = @zwmcons0002_s_dynpro200-cinumber.
    IF sy-subrc = 0.
      vl_aufnr = wl_intf_omp_sap-upper_orderid.
    ELSE.
      MESSAGE 'No se han encontrado datos para ese CI Number' TYPE 'I' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
  ENDIF.

  SELECT SINGLE rsnum
    INTO @DATA(vl_rsnum)
    FROM afko
    WHERE aufnr = @vl_aufnr.
  IF sy-subrc <> 0.
    MESSAGE |No se han encontrado reserva para la orden { vl_aufnr ALPHA = OUT }| TYPE 'I' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  DATA wl_return      TYPE bapiret2.
  DATA tl_consumos_pp TYPE zwm_t_consumos_pp.
  TRY.
      rg_consumos->consumir_bobina_pp(
        EXPORTING
          vp_werks                     = p_werks
          vp_lgpla                     = zwmcons0002_s_dynpro200-lgpla
          vp_id_pedido                 = CONV #( vl_rsnum )
          vp_id_bobina                 = CONV #( zwmcons0002_s_dynpro200-lenum )
          vp_cantidad                  = zwmcons0002_s_dynpro200-restante
          vp_test                      = space
          vp_manual                    = 'X'
        IMPORTING
          wp_return                    = wl_return
          tp_consumos_pp               = tl_consumos_pp ).
    CATCH /iwbep/cx_mgw_busi_exception INTO rl_exc.
      MESSAGE rl_exc->get_text( ) TYPE 'I' DISPLAY LIKE 'E'.
      RETURN.
  ENDTRY.



  READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = '0110'.
  IF sy-subrc = 0.
    PERFORM f_llenar_datos TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
    <fs_config_subscreen>-alv->refresh_table_display( ).
  ENDIF.
  MESSAGE 'Consumo realizado correctamente' TYPE 'S'.

  LEAVE TO SCREEN 0.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_UNIDAD_ALMACEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZWMCONS0002_S_DYNPRO200_LENUM  text
*----------------------------------------------------------------------*
FORM f_get_unidad_almacen  USING    vp_lenum TYPE lqua-lenum.

  TRY.
      DATA(wl_ua) = rg_nt->unidades_almacen_getdetail(  vp_werks = p_werks
                                                        vp_lenum = vp_lenum ).
    CATCH /iwbep/cx_mgw_busi_exception INTO DATA(rl_exc).
      PERFORM f_init_dynpro200.
      MESSAGE rl_exc->get_text( ) TYPE 'I' DISPLAY LIKE 'E'.
  ENDTRY.


  zcl_wm_nt_generic=>conv_mat_diametro( EXPORTING
                                          iv_matnr          = wl_ua-matnr
                                          iv_qty            = wl_ua-verme
                                          iv_meins          = wl_ua-meins
                                          iv_dest_meins     = zcl_wm_nt_generic=>gc_meins_dia
                                          iv_werks          = p_werks
                                        RECEIVING rv_qty = DATA(vl_diametro)
                                        EXCEPTIONS
                                          um_no_valid       = 1
                                          missing_constants = 2
                                          missing_matnr     = 3
                                          no_base_calc      = 4
                                          OTHERS            = 5 ).


  zwmcons0002_s_dynpro200-matnr =  wl_ua-matnr.
  zwmcons0002_s_dynpro200-maktx =  wl_ua-maktx.
  zwmcons0002_s_dynpro200-charg =  wl_ua-charg.
  zwmcons0002_s_dynpro200-menge =  vl_diametro.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_INIT_DYNPRO200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_init_dynpro200 .
  CLEAR: zwmcons0002_s_dynpro200.
  zwmcons0002_s_dynpro200-meins = 'DIA'.
  zwmcons0002_s_dynpro200-meins_restante = 'DIA'.

ENDFORM.
