*&---------------------------------------------------------------------*
*&  Include           ZHWM_REPALETIZADO_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  AUTHORITY_CHECKS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM authority_checks .

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

  "Chequeamos número de almacén insertado.
  AUTHORITY-CHECK OBJECT 'M_MATE_LGN'
    FOR USER sy-uname ID 'LGNUM' FIELD p_lgnum.

  IF ( sy-subrc <> 0 ).
    MESSAGE text-003 TYPE 'E'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  INIT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_data .

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_wm_exception TYPE REF TO zcx_wm_exception.

  DATA: lt_fcat TYPE lvc_t_fcat,
        ls_fcat TYPE lvc_s_fcat,
        ls_layo TYPE lvc_s_layo.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK go_alv_grid IS NOT BOUND.

**********************************************************************
* Lógica
**********************************************************************

  TRY .

    "Creo layout para hacerlo seleccionable
    ls_layo = zcl_utils_alvgrid_repaletizado=>s_build_basic_layout( ).
    ls_layo-sel_mode = 'A'.

    "Instancio la clase
*    go_alv_grid = NEW zcl_utils_alvgrid_repaletizado( i_layout = ls_layo i_container = cl_gui_container=>screen0 ).

    go_alv_grid = NEW zcl_utils_alvgrid_repaletizado( i_layout = ls_layo i_container = zcl_utils_alvgrid_repaletizado=>s_build_custom_container( i_dynprog = 'ZHWM_REPALETIZADO' i_dynnr = '0100' i_container_name = 'ZCUSTOM_CTRL1' ) ).



    ASSIGN gt_data TO <ft_data>.


    "Construyo el fcat para la tabla de datos
    lt_fcat = go_alv_grid->build_fcat( i_data = gt_data ).

    "Hago editable el campo nueva cantidad
    READ TABLE lt_fcat ASSIGNING FIELD-SYMBOL(<fs_fcat>) WITH KEY fieldname = 'NEW_MENGE'.
    IF ( sy-subrc EQ 0 ).
*      <fs_fcat>-edit = abap_true.
      <fs_fcat>-no_out = abap_true.
    ENDIF.

*    DELETE lt_fcat WHERE fieldname = 'NEW_MENGE'.

    "Seteo el fieldcatalog
    go_alv_grid->set_t_fcat( i_lvc_t_fcat = lt_fcat ).

  CATCH zcx_wm_exception INTO lo_wm_exception.

    MESSAGE lo_wm_exception->if_t100_message~t100key-attr1 TYPE 'E'.

  ENDTRY.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_data .

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_r_charg TYPE shp_charg_range_t.
  DATA: lt_r_matnr TYPE fre_matnr_rang_tty.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** SELECT LQUA

  IF ( go_alv_grid IS BOUND ).

    MOVE-CORRESPONDING s_charg[] TO lt_r_charg[].
    MOVE-CORRESPONDING s_matnr[] TO lt_r_matnr[].

    gt_data = go_alv_grid->select_data(
      EXPORTING
        i_lgnum     = p_lgnum    " Núm.almacén/Complejo alm.
        i_lgtyp     = p_lgtyp    " Tipo almacén
        i_lgpla     = p_lgpla    " Ubicación
        i_t_r_matnr = lt_r_matnr   " Número de material
        i_t_r_charg = lt_r_charg    " Range for Batch
    ).

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS '001'.
  SET TITLEBAR '001'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_0100 OUTPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_fcat TYPE lvc_t_fcat,
        ls_fcat TYPE lvc_s_fcat.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

  "Existe el objeto ALV
  IF ( go_alv_grid IS NOT BOUND ).

    PERFORM init_data.

  ENDIF.

  IF ( go_alv_grid->is_launched( ) EQ abap_false ).

    PERFORM select_data.
    go_alv_grid->show_alv_grid( CHANGING c_outtab = gt_data ).

  ELSE.

*    go_alv_grid->select_all( ).
    PERFORM select_data.
    go_alv_grid->refresh_alv( ).

  ENDIF.


  IF ( lines( gt_data ) LE 0 ).

    MESSAGE 'No hay datos' TYPE 'E'.

  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  go_alv_grid->on_user_command(
    EXPORTING
      e_ucomm = sy-ucomm
*      sender  =
  ).

  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      LEAVE TO SCREEN 0.
    WHEN 'REPA1'.
      CALL SCREEN '0200'.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS '002'.
  SET TITLEBAR '002'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_0200 OUTPUT.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_wm_exception TYPE REF TO zcx_wm_exception.

  DATA: lo_palet_alv TYPE REF TO zcl_utils_alvgrid_repaletizado.

  DATA: lt_sel_data TYPE ztt_wm_repaletizado_data.

  DATA: lt_fcat_rep TYPE lvc_t_fcat,
        ls_fcat_rep TYPE lvc_s_fcat.

  DATA: ls_layout   TYPE lvc_s_layo.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***

  IF ( lo_palet_alv IS NOT BOUND ).

    TRY .

      CLEAR: lt_sel_data.

*** INSTANCIA
           "
      ls_layout = zcl_utils_alvgrid_repaletizado=>s_build_basic_layout( ).
      ls_layout-no_toolbar  = abap_false.

      lo_palet_alv = NEW zcl_utils_alvgrid_repaletizado( i_layout = ls_layout i_container = zcl_utils_alvgrid_repaletizado=>s_build_custom_container( i_dynprog = 'ZHWM_REPALETIZADO' i_dynnr = '0200' i_container_name = 'ZCUSTOM_CTRL2' ) ).

*      lo_palet_alv = NEW zcl_utils_alvgrid_repaletizado( i_layout = ls_layout i_container = cl_gui_container=>screen1 ).

*** OBTENGO DATOS

      go_alv_grid->get_selected_data( IMPORTING e_t_data = lt_sel_data ).

*** FCAT

      "Construyo el fcat para la tabla de datos
      lt_fcat_rep = lo_palet_alv->build_fcat( i_data = lt_sel_data ).
      "Hago editable el campo nueva cantidad
      READ TABLE lt_fcat_rep ASSIGNING FIELD-SYMBOL(<fs_fcat>) WITH KEY fieldname = 'NEW_MENGE'.
      IF ( sy-subrc EQ 0 ).
        <fs_fcat>-edit = abap_true.
      ENDIF.
      lo_palet_alv->set_t_fcat( i_lvc_t_fcat = lt_fcat_rep ).

*** SHOW

      lo_palet_alv->show_alv_grid( CHANGING c_outtab = lt_sel_data ).

    CATCH zcx_wm_exception INTO lo_wm_exception.

      MESSAGE lo_wm_exception->if_t100_message~t100key-attr1 TYPE 'E'.

    CATCH zcx_mm_exception.

    ENDTRY.

  ELSE.

    lo_palet_alv->refresh_alv( ).

  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  lo_palet_alv->on_user_command( e_ucomm = sy-ucomm ).

  CASE sy-ucomm.
    WHEN 'BACK'.
      lo_palet_alv->finalize( ).
      CLEAR lo_palet_alv.
      SET SCREEN 0.
    WHEN 'EXIT'.
      lo_palet_alv->finalize( ).
      CLEAR lo_palet_alv.
      SET SCREEN 0.
    WHEN 'SAVEP'.
      SET SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  INITIALIZE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM initialize .

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SET EDITABLE OFF

  LOOP AT SCREEN.

    IF ( screen-name EQ 'P_LGTYP' OR screen-name EQ 'P_LGPLA' ).
      screen-input = 0.
      MODIFY SCREEN.
    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  INITIAL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM initial_data .

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_lgtyp TYPE lgtyp,
        lv_lgpla TYPE lgpla.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** GET INITIAL DATA

  CLEAR: p_lgtyp, p_lgpla.

  IF ( p_lgnum IS NOT INITIAL ).

    zcl_utils_alvgrid_repaletizado=>s_get_set_data_4_lgnum(
      EXPORTING
        i_lgnum   = p_lgnum    " Núm.almacén/Complejo alm.
      IMPORTING
        e_lgtyp_o = p_lgtyp    " Tipo almacén origen
        e_lgpla_o = p_lgpla    " Ubicación origen
        e_lgtyp_f = lv_lgtyp   " Tipo almacén final
        e_lgpla_f = lv_lgpla   " Ubicación final
    ).

  ENDIF.

  IF ( p_lgtyp IS INITIAL OR p_lgpla IS INITIAL ).
    MESSAGE text-005 TYPE 'W' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

  IF ( lv_lgtyp IS INITIAL OR lv_lgpla IS INITIAL ).
    MESSAGE text-006 TYPE 'W' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_SELDATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_seldata .

  IF ( p_lgtyp IS INITIAL OR p_lgpla IS INITIAL ).
    MESSAGE 'No se han rellenado datos' TYPE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM.
