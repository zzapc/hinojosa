*&---------------------------------------------------------------------*
*& Report  ZSWM_PARTIR_UA
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_cambiar_ua.
DATA registro TYPE zswm_read_exidv_str.

PARAMETERS: p_lenum LIKE lein-lenum OBLIGATORY.
SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
PARAMETERS: p_lgnum TYPE lgnum,
            p_lgtyp TYPE lagp-lgtyp,
            p_lgpla TYPE lagp-lgpla,

            p_letyp TYPE lvs_letyp,
            p_matnr LIKE mara-matnr,
            p_maktx LIKE makt-maktx,
            p_verme TYPE lqua_verme,
            p_meins TYPE meins,
            p_charg TYPE charg_d,
*              p_lgtyp type lagp-lgtyp,
*              p_lgpla type lagp-lgpla,
            p_bestq TYPE bestq,
            p_bestx TYPE zswm_bestq_txt,
            p_sobkz TYPE sobkz,
            p_sonum TYPE lvs_sonum.
SELECTION-SCREEN BEGIN OF BLOCK bl3 WITH FRAME TITLE text-bl3.

PARAMETERS:
  p_lhmg1 LIKE mlgn-lhmg1,
  p_lhme1 LIKE mlgn-lhme1,
  p_lety1 LIKE mlgn-lety1.
SELECTION-SCREEN END   OF BLOCK bl3.
SELECTION-SCREEN END   OF BLOCK bl1.
*SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME TITLE text-bl2.
PARAMETERS p_exidv like vekp-exidv.

AT SELECTION-SCREEN ON p_exidv.
  CHECK p_exidv IS NOT INITIAL.
  SELECT SINGLE COUNT( * ) FROM lein WHERE lenum EQ p_exidv.
  IF sy-subrc EQ 0. MESSAGE e398(00) WITH text-e01.  ENDIF.
*  IF p_verme <= p_menge AND p_lgtyp IS NOT INITIAL AND p_anzpk <= 1.
*    MESSAGE e398(00) WITH text-e01.
*
*  ELSEIF p_verme < ( p_menge * p_anzpk ) AND p_lgtyp IS NOT INITIAL.
*    MESSAGE e398(00) WITH text-e01.
*  ENDIF.

AT SELECTION-SCREEN.
  CHECK p_lenum NE registro-lenum.
  IF p_lgtyp EQ 'MUE' OR p_lgtyp+0(1) EQ '9'.
    MESSAGE e398(00) WITH text-e02.
  ELSE.
    DATA data_u TYPE zswm_data_ui5_eeeoo_str.
    DATA error TYPE flag.
    DATA tt_log TYPE bapiret2_tt.
    CLEAR: data_u, error, tt_log[], registro,
    p_lgnum ,
        p_lgtyp ,
        p_lgpla ,
        p_exidv,
        p_letyp ,
        p_matnr ,
        p_maktx ,
        p_verme ,
        p_meins ,
        p_charg ,
        p_bestq ,
        p_bestx ,
        p_sobkz ,
        p_sonum ,
*        p_menge,
p_lhmg1, " like mlgn-lhmg1,
p_lhme1, " like mlgn-lhme1,
p_lety1. " like mlgn-lety1.

*    p_anzpk = 1.
    SELECT COUNT( * ) FROM zswm_ui5_pick WHERE exidv EQ p_lenum
    AND lvorm NE abap_true.
    IF sy-subrc EQ 0.
      MESSAGE e398(00) WITH text-e03.
    ELSE.
      PERFORM read_lenum(saplzswm_ui5_mfs) USING p_lenum  'EXTERNO' data_u '' '' CHANGING registro error tt_log.
      IF error EQ abap_true.
        READ TABLE tt_log INTO DATA(rt_log) INDEX 1.
        IF sy-subrc EQ 0.
          MESSAGE ID rt_log-id TYPE rt_log-type NUMBER rt_log-number WITH rt_log-message_v1 rt_log-message_v2 rt_log-message_v3 rt_log-message_v4.
        ENDIF.
      ELSE.
        p_lgnum = data_u-lgnum.
        p_lgtyp = registro-lgtyp.
        p_lgpla = registro-lgpla.

        p_letyp = registro-letyp.
        p_matnr = registro-matnr.
        p_maktx = registro-maktx.
        p_verme = registro-verme.
        p_meins = registro-meins.
        p_charg = registro-charg.
        p_bestq = registro-bestq.
        p_bestx = registro-bestq_txt.
        p_sobkz = registro-sobkz.
        p_sonum = registro-sonum.
        p_lhmg1 = registro-lhmg1.
        p_lhme1 = registro-lhme1.
        p_lety1 = registro-lety1.

      ENDIF.
    ENDIF.
  ENDIF.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    CASE screen-group3.
      WHEN 'PAR'.
        if screen-name eq 'P_EXIDV'.
           IF p_lenum IS NOT INITIAL
          AND p_lgtyp IS NOT INITIAL.
          ELSE.
            screen-input = 0.
            screen-output = 0.
          ENDIF.
        else.
        IF screen-name NE 'P_LENUM'
        AND screen-name NE 'P_MENGE'
        AND screen-name NE 'P_ANZPK'.
          screen-input = 0.
        ELSEIF screen-name EQ 'P_MENGE'.
          IF p_lenum IS NOT INITIAL
          AND p_lgtyp IS NOT INITIAL.
          ELSE.
            screen-input = 0.
            screen-output = 0.
          ENDIF.
        ENDIF.
        endif.
*        IF screen-name EQ 'P_EXIDV'.
*          IF p_lenum IS NOT INITIAL
*          AND p_lgtyp IS NOT INITIAL.
*          ELSE.
*            screen-input = 0.
*            screen-output = 0.
*          ENDIF.
*        ENDIF.
      WHEN OTHERS.
        IF screen-name EQ 'P_EXIDV'.
          IF p_lenum IS NOT INITIAL
          AND p_lgtyp IS NOT INITIAL.
          ELSE.
            screen-input = 0.
            screen-output = 0.
          ENDIF.
        ENDIF.

    ENDCASE.
*      endif.
    MODIFY SCREEN.
  ENDLOOP.

START-OF-SELECTION.
* check p_ANZPK > 0 and p_menge > 0.
  CHECK p_exidv IS NOT INITIAL.
  DATA t_ltap_creat LIKE ltap_creat OCCURS 0 WITH HEADER LINE.
  DATA t_ltap       LIKE ltap_vb    OCCURS 0 WITH HEADER LINE.
  CLEAR t_ltap_creat[].
  CLEAR t_ltap[].
*   s

*  DO p_anzpk TIMES.
  SELECT SINGLE * INTO @DATA(lein) FROM lein WHERE lenum EQ @p_lenum.
  CLEAR: t_ltap_creat.
  SELECT * INTO TABLE @DATA(tt_lqua) FROM lqua WHERE lgnum EQ @lein-lgnum
                                           AND lenum EQ @lein-lenum.
  LOOP AT tt_lqua INTO DATA(rt_lqua).
    CLEAR t_ltap_creat.
    t_ltap_creat-matnr  = rt_lqua-matnr.
    t_ltap_creat-werks  = rt_lqua-werks.
    t_ltap_creat-lgort  = rt_lqua-lgort.
    t_ltap_creat-charg  = rt_lqua-charg.
    t_ltap_creat-bestq  = rt_lqua-bestq.
    t_ltap_creat-sobkz  = rt_lqua-sobkz.
    t_ltap_creat-sonum  = rt_lqua-sonum.
    t_ltap_creat-letyp  = rt_lqua-letyp.
    t_ltap_creat-anfme  = rt_lqua-verme.
    t_ltap_creat-altme  = rt_lqua-meins..
*WDATU
*VFDAT
*ZEUGN
    t_ltap_creat-squit = abap_true.
*t_ltap_creat-NIDRU
*LDEST
*WEMPF
*ABLAD
    t_ltap_creat-vltyp =
    t_ltap_creat-nltyp = rt_lqua-lgtyp.
*VLBER
    t_ltap_creat-vlpla =
    t_ltap_creat-nlpla = rt_lqua-lgpla.
*VPPOS
    t_ltap_creat-vlenr = p_lenum.
    t_ltap_creat-nlenr = p_exidv.
*VLQNR
*t_ltap_creat-NLTYP
*NLBER
*t_ltap_creat-NLPLA
*NPPOS
*t_ltap_creat-NLENR
*NLQNR
*RLTYP
*RLBER
*RLPLA
*RLQNR
*POSNR
*KBNKZ
*FROM_INSP_GUID
*TO_INSP_GUID
*RETURN_INSP_GUID
*ITAB_INDEX
*SGT_SCAT
    APPEND t_ltap_creat.
  ENDLOOP.
*  ENDDO.
  CHECK t_ltap_creat[] IS NOT INITIAL.
  CALL FUNCTION 'L_TO_CREATE_MULTIPLE'
    EXPORTING
      i_lgnum                = p_lgnum
      i_bwlvs                = '999'
*     I_BETYP                = ' '
*     I_BENUM                = ' '
*     I_LZNUM                = ' '
*     I_NIDRU                = ' '
*     I_DRUKZ                = ' '
*     I_NOSPL                = ' '
*     I_UPDATE_TASK          = ' '
*     I_COMMIT_WORK          = 'X'
*     I_BNAME                = SY-UNAME
*     I_KOMPL                = 'X'
*     I_SOLEX                = 0
*     I_PERNR                = 0
*     I_MINWM                = ' '
*     I_AUSFB                = ' '
*    IMPORTING
*     E_TANUM                =
    TABLES
      t_ltap_creat           = t_ltap_creat
*     T_LTAK                 =
      t_ltap_vb              = t_ltap
    EXCEPTIONS
      no_to_created          = 1
      bwlvs_wrong            = 2
      betyp_wrong            = 3
      benum_missing          = 4
      betyp_missing          = 5
      foreign_lock           = 6
      vltyp_wrong            = 7
      vlpla_wrong            = 8
      vltyp_missing          = 9
      nltyp_wrong            = 10
      nlpla_wrong            = 11
      nltyp_missing          = 12
      rltyp_wrong            = 13
      rlpla_wrong            = 14
      rltyp_missing          = 15
      squit_forbidden        = 16
      manual_to_forbidden    = 17
      letyp_wrong            = 18
      vlpla_missing          = 19
      nlpla_missing          = 20
      sobkz_wrong            = 21
      sobkz_missing          = 22
      sonum_missing          = 23
      bestq_wrong            = 24
      lgber_wrong            = 25
      xfeld_wrong            = 26
      date_wrong             = 27
      drukz_wrong            = 28
      ldest_wrong            = 29
      update_without_commit  = 30
      no_authority           = 31
      material_not_found     = 32
      lenum_wrong            = 33
      matnr_missing          = 34
      werks_missing          = 35
      anfme_missing          = 36
      altme_missing          = 37
      lgort_wrong_or_missing = 38
      OTHERS                 = 39.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 .
* Implement suitable error handling here
  ELSE.
    WRITE:/ 'UAS Creadas:'.
    LOOP AT t_ltap.
      WRITE:/ t_ltap-nlenr.
    ENDLOOP.
  ENDIF.
