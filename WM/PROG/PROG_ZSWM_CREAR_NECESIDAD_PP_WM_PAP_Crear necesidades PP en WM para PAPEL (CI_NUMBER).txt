*&---------------------------------------------------------------------*
*& Report  ZSWM_CREAR_NECESIDAD_PP_WM_PAP
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_crear_necesidad_pp_wm_pap.
TABLES: zsppt_cinumbers.
DATA: g_custom_container  TYPE REF TO cl_gui_custom_container.
DATA: or_doc              TYPE REF TO cl_gui_docking_container       .
DATA: gt_fieldcatalog     TYPE lvc_t_fcat.
DATA: gs_layout           TYPE lvc_s_layo.
DATA: alv                 TYPE REF TO cl_gui_alv_grid.
DATA: funciones           TYPE ui_functions.
DATA: variant             LIKE disvariant.
DATA t_alv LIKE zswm_crear_necesidad_pp_wm_pap OCCURS 0 WITH HEADER LINE.

INCLUDE zswm_crear_necesidad_pp_wm_cls.
DATA: BEGIN OF ls_stable,
        row TYPE c,
        col TYPE c,
      END OF ls_stable.
DATA: l_eventos TYPE REF TO lcl_report.
SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
SELECT-OPTIONS: s_aufnr FOR zsppt_cinumbers-aufnr,
                s_ci_nu FOR zsppt_cinumbers-ci_number,
                s_estac FOR zsppt_cinumbers-estacion.
SELECTION-SCREEN END OF BLOCK bl1.
SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME TITLE text-bl2.
SELECT-OPTIONS: s_erdat  FOR zsppt_cinumbers-erdat,
                s_erzeit FOR zsppt_cinumbers-erzeit,
                s_ernam  FOR zsppt_cinumbers-ernam,
                s_aedat  FOR zsppt_cinumbers-aedat DEFAULT sy-datum,
                s_aezeit FOR zsppt_cinumbers-aezeit,
                s_aenam  FOR zsppt_cinumbers-aenam.
SELECTION-SCREEN END OF BLOCK bl2.
PARAMETERS: p_test TYPE flag DEFAULT 'X'.
PARAMETERS:     p_varian TYPE rsvar-variant DEFAULT '/INITIAL'.


START-OF-SELECTION.
  DATA sw_bloqueo.
  PERFORM bloquear USING 'ZSWMPP001' 'B' p_test CHANGING sw_bloqueo.
  IF sw_bloqueo EQ abap_true.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE t_alv FROM zsppt_cinumbers
      WHERE aufnr     IN s_aufnr
        AND ci_number IN s_ci_nu
        AND estacion  IN s_estac
        AND erdat     IN s_erdat
        AND erzeit    IN s_erzeit
        AND ernam     IN s_ernam
        AND aedat     IN s_aedat
        AND aezeit    IN s_aezeit
        AND aenam     IN s_aenam.
    SELECT SINGLE istat INTO @DATA(istat) FROM tj02t WHERE txt04 EQ 'LIB.'
                                                  AND spras EQ 'S'.
    DATA t_aux LIKE zswm_crear_necesidad_pp_wm_pap OCCURS 0 WITH HEADER LINE.
    LOOP AT t_alv.
      SELECT SINGLE maktx INTO t_alv-maktx FROM makt WHERE matnr EQ t_alv-matnr
                                                       AND spras EQ sy-langu.
      SELECT SINGLE meins INTO t_alv-meins FROM mara WHERE matnr EQ t_alv-matnr.
      SELECT SINGLE objnr INTO t_alv-objnr FROM caufv WHERE aufnr EQ t_alv-aufnr.
      SELECT COUNT( * ) FROM jest WHERE objnr EQ t_alv-objnr
                                AND stat  EQ istat
                                AND inact NE abap_true.
      IF sy-subrc EQ 0. MOVE 'LIB.' TO t_alv-txt04. ENDIF.
      MODIFY t_alv.
    ENDLOOP.
    t_aux[] = t_alv[].
    DELETE t_aux WHERE tbnum IS NOT INITIAL.
    LOOP AT t_alv WHERE tbnum IS NOT INITIAL.
      t_alv-procesado = abap_true.
      MOVE icon_okay TO t_alv-icon.
      MODIFY t_alv.
    ENDLOOP.
    SORT t_aux BY ci_number. DELETE ADJACENT DUPLICATES FROM t_aux COMPARING ci_number.
    LOOP AT t_aux.
      DATA: error TYPE flag, t_log LIKE bapiret2 OCCURS 0 WITH HEADER LINE.
      CLEAR: error, t_log[].
      CALL FUNCTION 'ZSWM_CREAR_NECESIDAD_PP_WM_PAP'
        EXPORTING
*         AUFNR     =
          ci_number = t_aux-ci_number
          test      = p_test
*         MODE_BI   = 'N'
        IMPORTING
          error     = error
          tt_log    = t_log[]
*         TT_NECESIDADES       =
        .
      IF error EQ abap_true.
        LOOP AT t_alv WHERE ci_number EQ t_aux-ci_number
                        AND tbnum     IS INITIAL .
          DATA(sw_tabix) = sy-tabix.
          t_alv-error = abap_true.
          READ TABLE t_log INTO DATA(rt_log) INDEX 1.
          IF sy-subrc EQ 0.
            MOVE-CORRESPONDING rt_log TO t_alv.
          ENDIF.
          MOVE icon_cancel TO t_alv-icon.
          MODIFY t_alv INDEX sw_tabix.
        ENDLOOP.
      ELSE.
        LOOP AT t_alv WHERE ci_number EQ t_aux-ci_number.
          DATA(sw_tabix_3) = sy-tabix.
          SELECT SINGLE * FROM zsppt_cinumbers BYPASSING BUFFER
                                               WHERE aufnr     EQ t_alv-aufnr
                                                 AND vornr     EQ t_alv-vornr
                                                 AND matnr     EQ t_alv-matnr
                                                 AND ci_number EQ t_alv-ci_number
                                                 AND stepnr    EQ t_alv-stepnr.
          CHECK sy-subrc EQ 0 AND zsppt_cinumbers-tbnum IS NOT INITIAL.
          MOVE-CORRESPONDING zsppt_cinumbers TO t_alv.
          t_alv-procesado = abap_true.
          MOVE icon_okay TO t_alv-icon.
          MODIFY t_alv INDEX sw_tabix_3.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
    PERFORM bloquear USING 'ZSWMPP001' 'D' p_test CHANGING sw_bloqueo.
  ENDIF.

  IF sy-batch NE abap_true.
*   Comprobante para ver si la estación del ci number coincinde con la de las reservas
    loop at t_alv where rsnum is not INITIAL.
         sw_tabix_3 = sy-tabix.
         select SINGLE sortf into t_alv-sortf from resb where rsnum eq t_alv-rsnum
                                                          and rspos eq t_alv-rspos.
         if sy-subrc ne  0. clear t_alv-sortf. endif.
         select SINGLE NLPLA into t_alv-NLPLA from ltbk where lgnum eq t_alv-lgnum
                                                          and tbnum eq t_alv-tbnum.
         if sy-subrc ne  0. clear t_alv-nlpla. endif.


         modify t_alv index sw_tabix_3.
    endloop.
    CALL SCREEN 0300.
  ENDIF.
  INCLUDE zswm_crear_necesidad_pp_wm_prd.

  INCLUDE zswm_crear_necesidad_pp_wm_mod.
