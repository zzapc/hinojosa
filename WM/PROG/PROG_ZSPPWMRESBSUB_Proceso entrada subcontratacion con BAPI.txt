*&---------------------------------------------------------------------*
*& Report  ZSPPWMRESBSUB
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zsppwmresbsub.
TABLES: caufv.
DATA  aufpl LIKE caufv-aufpl.
SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
PARAMETERS: p_aufnr LIKE caufv-aufnr OBLIGATORY.
PARAMETERS: p_matnr LIKE mara-matnr,
            p_gamng LIKE caufv-gamng,
            p_gamn1 LIKE caufv-gamng,
            p_gmein LIKE caufv-gmein,
            p_pwerk LIKE afpo-pwerk,
            p_plgor LIKE afpo-lgort,
            p_charg LIKE afpo-charg,
            p_aufak LIKE afvc-aufak.
*            p_MGVRG like afvv-MGVRG,
*            p_meinh like afvv-MEINH.
SELECTION-SCREEN BEGIN OF BLOCK bl3 WITH FRAME TITLE text-bl3.
PARAMETERS: p_mater LIKE resb-matnr,
            p_werks LIKE ekpo-werks,
            p_bdmng LIKE resb-bdmng,

            p_bdmn1 LIKE resb-bdmng,
            p_vrkme LIKE resb-meins,
            p_lblab LIKE mslb-lblab.
SELECTION-SCREEN END OF BLOCK bl3.

SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME TITLE text-bl2.

PARAMETERS:
  p_banfn LIKE afvc-banfn,
  p_bnfpo LIKE afvc-bnfpo,
  p_lifnr LIKE ekko-lifnr,
  p_ebeln LIKE ekpo-ebeln,
  p_ebelp LIKE ekpo-ebelp,
  p_mgvrg LIKE afvv-mgvrg,
  p_mvgr1 LIKE afvv-mgvrg,
  p_meinh LIKE afvv-meinh.

SELECTION-SCREEN END OF BLOCK bl2.
PARAMETERS p_exidv TYPE vekp-exidv.
SELECTION-SCREEN END OF BLOCK bl1.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_GAMN1'.
        IF p_matnr IS INITIAL.
          screen-input = 0.
        ELSE.
          screen-input = 1.
        ENDIF.
      WHEN 'P_AUFAK'.
        screen-input = 0.
        screen-invisible = 1.
      WHEN 'P_EBELN'
        OR 'P_EBELP'
        OR 'P_MATNR'
        OR 'P_GMEIN'
        OR 'P_BANFN'
        OR 'P_LIFNR'
        OR 'P_BNFPO'
        OR 'P_AUFAK'
        OR 'P_MGVRG'
        OR 'P_MEINH'
        OR 'P_WERKS'
        OR 'P_MATER'
        OR 'P_BDMNG'
        OR 'P_VRKME'
        OR 'P_BDMN1'
        OR 'P_MVGR1'
        OR 'P_LBLAB'
        OR 'P_GAMN1'
        OR 'P_GAMNG'
        OR 'P_PWERK'
        OR 'P_PLGOR'
        OR 'P_CHARG'
        OR 'P_EXIDV'.
        screen-input = 0.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

AT SELECTION-SCREEN.
  CLEAR: p_mvgr1, p_bdmn1.

  CHECK p_gamn1 IS NOT INITIAL.
*   p_bdmng --- > p_gamng
*         X --- > p_gamn1
  p_bdmn1 = p_gamn1 * p_bdmng / p_gamng.
  p_mvgr1 = p_gamn1 * p_mgvrg / p_gamng.

AT SELECTION-SCREEN ON BLOCK bl1.
  DATA aplzl LIKE afvc-aplzl.
  IF p_aufnr IS INITIAL.
    CLEAR: p_matnr, p_gamng, p_gmein, p_ebeln, p_banfn, p_bnfpo, p_aufak, p_mgvrg, p_meinh, p_mater, p_bdmng, p_vrkme, p_lifnr, p_lblab, p_werks.
  ELSE.
    SELECT SINGLE gamng gmein stlbez aufpl INTO (p_gamng, p_gmein, p_matnr, aufpl)   FROM caufv WHERE aufnr EQ p_aufnr.
    SELECT SINGLE banfn bnfpo aufak aplzl  INTO (p_banfn, p_bnfpo, p_aufak, aplzl) FROM afvc  WHERE aufpl EQ aufpl.
    SELECT SINGLE matnr pwerk lgort INTO (p_matnr, p_pwerk, p_plgor) FROM afpo WHERE aufnr EQ p_aufnr.

    IF p_banfn IS NOT INITIAL.
      SELECT SINGLE ebeln ebelp werks INTO (p_ebeln, p_ebelp, p_werks) FROM ekpo WHERE banfn EQ p_banfn
      AND bnfpo EQ p_bnfpo.
      SELECT SINGLE lifnr INTO p_lifnr FROM ekko WHERE ebeln EQ p_ebeln.
    ENDIF.
    SELECT SINGLE mgvrg meinh INTO (p_mgvrg, p_meinh) FROM afvv WHERE aufpl EQ aufpl
    AND aplzl EQ aplzl.
    SELECT SINGLE matnr bdmng meins INTO (p_mater, p_bdmng, p_vrkme) FROM resb WHERE aufnr EQ p_aufnr.
    SELECT SUM( lblab ) INTO p_lblab FROM mslb WHERE matnr EQ p_mater
    AND werks EQ p_werks
    AND sobkz EQ 'O'
    AND lifnr EQ p_lifnr.
  ENDIF.

START-OF-SELECTION.
  CHECK p_gamn1 IS NOT INITIAL.
  DATA: error               TYPE flag,
        wa_goodsmvt_header  LIKE bapi2017_gm_head_01,

        wa_goodsmvt_code    LIKE bapi2017_gm_code,

        wa_bapi2017_gm_head TYPE bapi2017_gm_head_ret-mat_doc,
        materialdocument    TYPE  bapi2017_gm_head_ret-mat_doc,
        matdocumentyear     TYPE  bapi2017_gm_head_ret-doc_year.

  DATA:
    it_goodsmvt_item LIKE bapi2017_gm_item_create OCCURS 0 WITH HEADER LINE,

    it_return        LIKE bapiret2 OCCURS 0 WITH HEADER LINE.
  CLEAR: error.
  wa_goodsmvt_header-pstng_date =
  wa_goodsmvt_header-doc_date = sy-datum.
  wa_goodsmvt_code-gm_code = '01'. "Goods receipt for purchase Order

  wa_goodsmvt_header-ref_doc_no = 'Consumo Subc'.

  CLEAR: it_goodsmvt_item[], it_goodsmvt_item.
  it_goodsmvt_item-line_id   = '0001'.
  it_goodsmvt_item-po_number = p_ebeln.
  it_goodsmvt_item-po_item =   p_ebelp.
*select SINGLE matkl werks lgort into (it_goodsmvt_item-MATL_GROUP, it_goodsmvt_item-plant, it_goodsmvt_item-STGE_LOC) from ekpo where ebeln eq p_ebeln
*                                                                                                                                  and ebelp eq p_ebelp.
  SELECT SINGLE werks lgort INTO (it_goodsmvt_item-plant, it_goodsmvt_item-stge_loc) FROM ekpo WHERE ebeln EQ p_ebeln
                                                                                                 AND ebelp EQ p_ebelp.

  it_goodsmvt_item-move_type = '101' .
*  it_goodsmvt_item-ORDERID   = p_aufnr.  " add jtm 14.07.2022
  it_goodsmvt_item-entry_qnt = ceil( p_bdmn1 ).
  it_goodsmvt_item-entry_uom = p_vrkme.
  it_goodsmvt_item-mvt_ind = 'B'.
  APPEND it_goodsmvt_item.
  CLEAR it_goodsmvt_item.
  SELECT * INTO TABLE @DATA(tt_mslb) FROM mslb WHERE matnr EQ @p_mater
  AND werks EQ @p_werks
  AND sobkz EQ 'O'
  AND lifnr EQ @p_lifnr.

  SORT tt_mslb BY charg lblab.
  DATA cantidad_demanda TYPE menge_d.
  cantidad_demanda = ceil( p_bdmn1 ).
  LOOP AT tt_mslb INTO DATA(rt_mslb).
    DATA(sw_tabix) = sy-tabix.
    rt_mslb-lbins = 0. " en este campo guardaré la cantidad a consumir
    IF cantidad_demanda <= 0.

    ELSEIF rt_mslb-lblab >= cantidad_demanda.
      rt_mslb-lbins = cantidad_demanda.
      cantidad_demanda = 0.
    ELSEIF rt_mslb-lblab <  cantidad_demanda.
      rt_mslb-lbins = rt_mslb-lblab.
      cantidad_demanda = cantidad_demanda - rt_mslb-lblab.
    ENDIF.
    MODIFY tt_mslb FROM rt_mslb INDEX sw_tabix.
  ENDLOOP.
  IF cantidad_demanda > 0.

  ELSE.
    data posi(4) type n.
    posi = 2.
    LOOP AT tt_mslb INTO rt_mslb.
      it_goodsmvt_item-line_id   = posi.
      it_goodsmvt_item-parent_id = '0001'.
      it_goodsmvt_item-material  = p_mater.
      it_goodsmvt_item-plant     = p_werks.
      it_goodsmvt_item-move_type = '543' .
      select SINGLE mtart into @DATA(mtart) from mara where matnr eq @p_mater.
      if mtart ne 'ZPAP'.
       it_goodsmvt_item-ORDERID   = p_aufnr.  " add jtm 14.07.2022
      endif.
      it_goodsmvt_item-entry_qnt = rt_mslb-lbins.
      it_goodsmvt_item-entry_uom = p_vrkme.
      it_goodsmvt_item-mvt_ind = 'O'.
      it_goodsmvt_item-batch     = rt_mslb-charg.
      APPEND it_goodsmvt_item.
      add 1 to posi.
    ENDLOOP.

*  it_goodsmvt_item-po_number = p_ebeln.
*  it_goodsmvt_item-po_item =   p_ebelp.
**select SINGLE matkl werks lgort into (it_goodsmvt_item-MATL_GROUP, it_goodsmvt_item-plant, it_goodsmvt_item-STGE_LOC) from ekpo where ebeln eq p_ebeln
**                                                                                                                                  and ebelp eq p_ebelp.
*  SELECT SINGLE werks lgort INTO (it_goodsmvt_item-plant, it_goodsmvt_item-stge_loc) FROM ekpo WHERE ebeln EQ p_ebeln
*                                                                                                 AND ebelp EQ p_ebelp.

*  APPEND it_goodsmvt_item.


    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = wa_goodsmvt_header
        goodsmvt_code    = wa_goodsmvt_code
*       TESTRUN          = ' '
*       GOODSMVT_REF_EWM =
      IMPORTING
*       GOODSMVT_HEADRET =
        materialdocument = materialdocument
        matdocumentyear  = matdocumentyear
      TABLES
        goodsmvt_item    = it_goodsmvt_item
*       GOODSMVT_SERIALNUMBER         =
        return           = it_return
*       GOODSMVT_SERV_PART_DATA       =
*       EXTENSIONIN      =
      .
    READ TABLE it_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
    IF sy-subrc EQ 0.
      MOVE abap_true TO error.
    ELSE.
      WRITE:/ 'Movimiento imputación:', materialdocument, matdocumentyear.
      WRITE:/ 'Ctd de imputación    :', p_mvgr1, p_meinh.
      WRITE:/ 'Ctd de consumo       :', p_bdmn1, p_vrkme.

      DATA: ret                TYPE bapiret1,
            timetickets        TYPE TABLE OF bapi_pp_timeticket WITH HEADER LINE,
            bapi_item          TYPE TABLE OF bapi2017_gm_item_create WITH HEADER LINE,
            link_conf_goodsmov TYPE TABLE OF bapi_link_conf_goodsmov WITH HEADER LINE,
            detail_return      TYPE TABLE OF bapi_coru_return WITH HEADER LINE.
      CLEAR: bapi_item, bapi_item[], timetickets, timetickets[],
             link_conf_goodsmov, link_conf_goodsmov[], detail_return,
             detail_return[].
      timetickets-orderid          = p_aufnr.
      timetickets-operation        = '0010'.
      timetickets-plant            = p_werks.
      APPEND timetickets.
      bapi_item-orderid    = p_aufnr.
      bapi_item-material   = p_matnr.
      bapi_item-plant      = p_pwerk.
      bapi_item-stge_loc   = p_plgor.
      bapi_item-batch      = p_charg.
      bapi_item-move_type  = '101'.
      bapi_item-mvt_ind    = 'F'.
      bapi_item-entry_qnt  = p_gamn1.
      bapi_item-entry_uom  = p_gmein.
      CALL FUNCTION 'ZSWM_GET_EXIDV_NUMBER'
        EXPORTING
          lgnum = '201'
        IMPORTING
          exidv = p_exidv
*         ERROR =
*         TT_LOG        =
        .

      bapi_item-unload_pt  = p_exidv.
      bapi_item-spec_mvmt = space.
      bapi_item-item_text = 'Prueba alta'.
*  bapi_item-SU_PL_STCK_1 = 1 . " Número de unidades de almacén a entrar
*bapi_item-ST_UN_QTYY_1  = p_menge.   " Ctd.por un.almacén a almacenar en UMA
*select SINGLE isocode into  bapi_item-st_un_qtyy_1_iso from t006 where MSEHI eq p_meins.
*move 'PL' to bapi_item-UNITTYPE_1  .
      APPEND bapi_item.
      DESCRIBE TABLE bapi_item.
      DO sy-tfill TIMES.
        link_conf_goodsmov-index_confirm  = '1'.
        link_conf_goodsmov-index_goodsmov = sy-index.
        APPEND link_conf_goodsmov.
      ENDDO.

      CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT'
        EXPORTING
          post_wrong_entries = '2'
*         TESTRUN            =
*         CALL_ON_INBOUND_QUEUE          = ' '
        IMPORTING
          return             = ret
        TABLES
          timetickets        = timetickets
          goodsmovements     = bapi_item
          link_conf_goodsmov = link_conf_goodsmov
*         CHARACTERISTICS_WIPBATCH       =
*         LINK_CONF_CHAR_WIPBATCH        =
          detail_return      = detail_return
*         CHARACTERISTICS_BATCH          =
*         LINK_GM_CHAR_BATCH =
        .
      LOOP AT detail_return WHERE type EQ 'E'
                             OR type EQ 'A'.
        MOVE abap_true TO error.
      ENDLOOP.

    ENDIF.
  ENDIF.
  CASE error.
    WHEN abap_true.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*        IMPORTING
*          RETURN        =
        .
    WHEN OTHERS.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'
*       IMPORTING
*         RETURN        =
        .
  ENDCASE.
