REPORT zrwm_rv56td00.

SET EXTENDED CHECK OFF.
TABLES: vbpla, thead, ttxern, ttxit, t005, vbddl, stxh, sadr.   "SADR40A
INCLUDE vttkdata.                      "Shipment Header
INCLUDE vttsdata.                      "Shipment Segment
INCLUDE vttpdata.                      "Shipment Items
INCLUDE vbpadata.                      "Partner
INCLUDE vtfadata.                      "Flow
INCLUDE sadrdata.                      "Address
INCLUDE vtlfdata.                      "Delivery Selection
INCLUDE rvadtabl.                      "Messages
INCLUDE vsedata.                       "shipping units
INCLUDE rv56acom.                      "I/O-Structure
INCLUDE zrwm_rv56td00_f01.             "Include para forms
SET EXTENDED CHECK ON.

DATA:
  xscreen(1)              TYPE c,
  retcode                 LIKE sy-subrc VALUE 0,
  there_was_output(1)     TYPE c        VALUE space,
  new_page_was_ordered(1) TYPE c        VALUE space.

CONSTANTS:
  no(1)  VALUE space,
  yes(1) VALUE 'X'.

TABLES : tpar .                                             "n_742056.

***********************************************************************
*       FORM ENTRY                                                    *
***********************************************************************
*       Called from the Output Controll program                       *
***********************************************************************
*  -->  RETURN_CODE Status                                            *
*  -->  US_SCREEN                                                     *
***********************************************************************
FORM entry USING return_code LIKE sy-subrc                  "#EC CALLED
                 us_screen   TYPE c.                        "#EC CALLED

  IF tnapr-fonam IS NOT INITIAL.

    return_code = 1.
    PERFORM data_init USING us_screen.

    PERFORM get_data.
    CHECK retcode EQ 0.

    PERFORM open_form USING us_screen.
    CHECK retcode EQ 0.

    PERFORM print_document.
    CHECK retcode EQ 0.

    PERFORM close_form.
    CHECK retcode EQ 0.

    return_code = 0.

  ELSEIF tnapr-sform IS NOT INITIAL.

    PERFORM print_sform.

    return_code = sy-subrc.

  ENDIF.
ENDFORM.

***********************************************************************
*       FORM data_init                                               *
***********************************************************************
FORM data_init USING VALUE(us_screen) TYPE c.
  xscreen = us_screen.
  CLEAR:
    retcode,
    there_was_output,
    new_page_was_ordered.
ENDFORM.

***********************************************************************
*       FORM GET_DATA                                                 *
***********************************************************************
FORM get_data.
  DATA language LIKE nast-spras.
  DATA shipment_number LIKE vttk-tknum.

  language = nast-spras.
  shipment_number = nast-objky.
  CALL FUNCTION 'RV_SHIPMENT_PRINT_VIEW'
    EXPORTING
      shipment_number     = shipment_number
      option_tvtk         = 'X'  "Shipmenttype J/N
      option_ttds         = 'X'  "Disposition J/N
      language            = language
      option_items        = 'X'  "Transport Items J/N
      option_segments     = 'X'  "Transport Segments J/N
      option_partners     = 'X'  "Partners J/N
      option_sales_orders = 'X'  "Sales orders J/N
      option_export_data  = 'X'  "Export data J/N
      option_packages     = 'X'  "Packages J/N
      option_flow         = ' '  "Flow J/N
      option_no_refresh   = ' '  "Refresh Tables J/N
    IMPORTING
      f_vttkvb            = vttkvb  "Shipment Header
      f_tvtk              = tvtk "Shipmenttype
      f_tvtkt             = tvtkt "Description Shipmenttype
      f_ttds              = ttds "Disposition
      f_ttdst             = ttdst "Description Disposition
      f_vbpla             = vbpla "Packages
    TABLES
      f_vttp              = xvttp "Shipment Items
      f_trlk              = slk  "Delivery
      f_trlp              = slp  "Delivery Item
      f_vtts              = xvtts "Shipment Segments
      f_vtsp              = xvtsp "Segments/Items
      f_vbpa              = xvbpa "Partner
      f_vbadr             = xvbadr  "Address
      f_vtfa              = xvtfa "Flow
      f_vbplk             = xvbplk  "Shipment Unit Header
      f_vbplp             = xvbplp  "Shipment Unit
      f_vbpls             = xvbpls  "Shipment Unit Sum
    EXCEPTIONS
      not_found           = 1.

  IF sy-subrc NE 0.
    syst-msgid = 'VW'.
    syst-msgno = '010'.
    syst-msgty = 'E'.
    syst-msgv1 = dbvttk-tknum.
    syst-msgv2 = sy-subrc.
    retcode    = 1.
    PERFORM protocol_update.
  ENDIF.

  CHECK retcode EQ 0.

* Sort shipment items by itenary (i.e. TPRFO)                 "n_902657
  SORT xvttp BY tprfo.                                      "n_902657
* SORT SEGMENTS BY CORRECT ORDER (I.E. TSRFO)
  SORT xvtts BY tsrfo.

* CONVERT UNITS IN DELIVERIES AND DELIVERY-ITEMS
* TO BE CONFORM TO VTTK-UNITS:

  LOOP AT slk.
* start of insertion HP_364727
    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
      EXPORTING
        input    = slk-brgew
        unit_in  = slk-gewei
        unit_out = vttkvb-dtmeg
      IMPORTING
        output   = slk-brgew.

* end of insertion HP_364727
    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
      EXPORTING
        input    = slk-btgew
        unit_in  = slk-gewei
        unit_out = vttkvb-dtmeg
      IMPORTING
        output   = slk-btgew.

    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
      EXPORTING
        input    = slk-ntgew
        unit_in  = slk-gewei
        unit_out = vttkvb-dtmeg
      IMPORTING
        output   = slk-ntgew.

    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
      EXPORTING
        input    = slk-volum
        unit_in  = slk-voleh
        unit_out = vttkvb-dtmev
      IMPORTING
        output   = slk-volum.

    slk-gewei = vttkvb-dtmeg.
    slk-voleh = vttkvb-dtmev.
    MODIFY slk.
  ENDLOOP.

  LOOP AT slp.
    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
      EXPORTING
        input    = slp-brgew
        unit_in  = slp-gewei
        unit_out = vttkvb-dtmeg
      IMPORTING
        output   = slp-brgew.

    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
      EXPORTING
        input    = slp-ntgew
        unit_in  = slp-gewei
        unit_out = vttkvb-dtmeg
      IMPORTING
        output   = slp-ntgew.

    slp-gewei = vttkvb-dtmeg.
    MODIFY slp.
  ENDLOOP.
* Transfer address number for mail
  IF nast-nacha = '5'.                "e-mail                "v_n_742056.
* Determine the type of the partner number
    SELECT SINGLE * FROM tpar
                  WHERE parvw = nast-parvw.
    IF sy-subrc NE 0.
      EXIT.
    ENDIF.
* Search the address number
    LOOP AT xvbpa
     WHERE parvw = nast-parvw.
      CASE tpar-nrart.             "type of the partner number
        WHEN 'KU'.                 "- customer
          CHECK xvbpa-kunnr = nast-parnr.
        WHEN 'LI'.                 "- vendor
          CHECK xvbpa-lifnr = nast-parnr.
        WHEN 'AP'.                 "- contact person
          CHECK xvbpa-parnr = nast-parnr.
        WHEN 'PE'.                 "- personell number
          CHECK xvbpa-pernr = nast-parnr.
      ENDCASE.
      "^_n_742056.
* deleted line of n_656692
      addr_key-addrnumber = xvbpa-adrnr.
      addr_key-persnumber = xvbpa-adrnp.
      EXIT.
    ENDLOOP.
  ENDIF.                                                    "n_742056.
ENDFORM.

***********************************************************************
*       FORM PRINT_DOCUMENT                                           *
***********************************************************************
FORM print_document.

  PERFORM print_general_header_data.
  PERFORM new_page_if_necessary.

  PERFORM print_deliveries_in_shipment.
  PERFORM new_page_if_necessary.

  PERFORM print_delivery_details.
  PERFORM new_page_if_necessary.

  PERFORM print_segment_overview.
  PERFORM new_page_if_necessary.

  PERFORM print_segment_details.
  PERFORM new_page_if_necessary.

  PERFORM print_texts.
  PERFORM new_page_if_necessary.

  PERFORM print_shipping_units.
  PERFORM new_page_if_necessary.

  PERFORM print_deadlines.
  PERFORM new_page_if_necessary.

ENDFORM.

***********************************************************************
*      Form  PRINT_GENAERAL_HEADER_DATA
***********************************************************************
FORM print_general_header_data.
  PERFORM domain_value_text(sapmv56a)
          USING 'ABFER' vttkvb-abfer rv56a-txt_abfer.
  PERFORM domain_value_text(sapmv56a)
          USING 'ABWST' vttkvb-abwst rv56a-txt_abwst.
  PERFORM domain_value_text(sapmv56a)
          USING 'LAUFK' vttkvb-laufk rv56a-txt_laufk.
  PERFORM domain_value_text(sapmv56a)
          USING 'BFART' vttkvb-bfart rv56a-txt_bfart.
  PERFORM domain_value_text(sapmv56a)
          USING 'STTRG' vttkvb-sttrg rv56a-txt_sttrg.


  PERFORM tvsbt_read(sapfv56h) USING vttkvb-vsbed
                               CHANGING rv56a-txt_vsbed.
  PERFORM t173t_read(sapfv56h)
          USING    vttkvb-vsart
          CHANGING rv56a-txt_vsart.
  PERFORM t173t_read(sapfv56h)
          USING    vttkvb-vsavl
          CHANGING rv56a-txt_vsavl.
  PERFORM t173t_read(sapfv56h)
          USING    vttkvb-vsanl
          CHANGING rv56a-txt_vsanl.

  PERFORM print USING 'GENERAL_HEADER_DATA_TITLE'.
  PERFORM print USING 'GENERAL_HEADER_DATA_TYPES'.
  PERFORM print USING 'GENERAL_HEADER_DATA_PROCESSING'.
  PERFORM print USING 'GENERAL_HEADER_DATA_STATUS'.
  IF   ( NOT vttkvb-signi IS INITIAL )
    OR ( NOT vttkvb-tpbez IS INITIAL )
    OR ( NOT vttkvb-exti1 IS INITIAL )
    OR ( NOT vttkvb-exti2 IS INITIAL ).
    PERFORM print USING 'GENERAL_HEADER_DATA_IDENTIFICATION'.
  ENDIF.
ENDFORM.

***********************************************************************
*      Form  PRINT_DELIVERIES_IN_SHIPMENT
***********************************************************************
FORM print_deliveries_in_shipment.
  DATA sum_weight LIKE vtrlk-btgew.
  DATA sum_volume LIKE vtrlk-volum.

  CHECK NOT slk[] IS INITIAL.

  CLEAR: sum_weight, sum_volume, vtrlk.
  PERFORM print USING 'DELIVERIES_IN_SHIPMENT_TITLE'.
* CALCULATE SUM OVER ALL DELIVERIES AND PRINT IT
  LOOP AT slk.                         "DELIVERY HEADER
    sum_weight = sum_weight + slk-btgew.
    sum_volume = sum_volume + slk-volum.
  ENDLOOP.
  vtrlk-btgew = sum_weight.
  vtrlk-volum = sum_volume.
  PERFORM print USING 'TRANSPORT_SUM'.
  CLEAR vtrlk.
* PRINT ALL DELIVERIES
  PERFORM print USING 'DELIVERY_HEADING'.
* v_n_902657
  LOOP AT xvttp.
    READ TABLE slk
         WITH KEY vbeln = xvttp-vbeln
         INTO  vtrlk
         BINARY SEARCH.
    CHECK sy-subrc = 0.
* ^_n_902657
    PERFORM print USING 'DELIVERY'.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_DELIVERY_DETAILS
***********************************************************************
FORM print_delivery_details.
  CHECK NOT slk[] IS INITIAL.

* v_n_902657
  LOOP AT xvttp.
    READ TABLE slk
         WITH KEY vbeln = xvttp-vbeln
         INTO  vtrlk
         BINARY SEARCH.
    CHECK sy-subrc = 0.
* ^_n_902657
    slk-vbeln = vtrlk-vbeln.                                "n_998327
    PERFORM print USING 'DELIVERY_TITLE'.
    PERFORM print USING 'DELIVERY_ITEM_HEADING'.
    LOOP AT slp WHERE vbeln EQ slk-vbeln.             "DELIVERY-ITEMS
      MOVE slp TO vtrlp.
      PERFORM print USING 'DELIVERY_ITEM'.
    ENDLOOP.
*   PERFORM PRINT USING 'DELIVERY_SUM'.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_SEGMENT_OVERVIEW
***********************************************************************
FORM print_segment_overview.
  CHECK NOT xvtts[] IS INITIAL.

  PERFORM print USING 'SEGMENT_OVERVIEW_TITLE'.
  PERFORM print USING 'SEGMENT_OVERVIEW_HEADING'.
  LOOP AT xvtts.                       "Segments
    MOVE xvtts TO vttsvb.
    PERFORM domain_value_text(sapmv56a)
            USING 'TSTYP' vttsvb-tstyp rv56a-txt_tstyp.
    PERFORM print USING 'SEGMENT_OVERVIEW'.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_SEGMENT_DETAILS
***********************************************************************
FORM print_segment_details.
  CHECK NOT xvtts[] IS INITIAL.

  LOOP AT xvtts.                       "Segments
    MOVE xvtts TO vttsvb.
    PERFORM domain_value_text(sapmv56a)
            USING 'LAUFK' vttsvb-laufk rv56a-txt_laufk.
    PERFORM print USING 'SEGMENT_DETAIL_TITLE'.
    PERFORM print USING 'SEGMENT_DETAIL_KNODES'.
    PERFORM print USING 'SEGMENT_DETAIL_PROCESSING'.
    PERFORM print USING 'SEGMENT_DETAIL_DEADLINES'.
    PERFORM print_departure_address.
    PERFORM print_departure_details.
    PERFORM print_destination_address.
    PERFORM print_destination_details.
    PERFORM print_deliveries_in_segment.
    PERFORM new_page_if_necessary.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_DEPARTURE_DETAILS
***********************************************************************
FORM print_departure_details.

  DATA: bez_werka  LIKE t001w-name1,
        bez_lgorta LIKE t001l-lgobe.

  CHECK ( vttsvb-vstel  NE space )
     OR ( vttsvb-lstel  NE space )
     OR ( vttsvb-werka  NE space )
     OR ( vttsvb-lgorta NE space )
     OR ( vttsvb-kunna  NE space )
     OR ( vttsvb-lifna  NE space )
     OR ( vttsvb-belad  NE space ).

  PERFORM vtts-vstel_display(sapfv56s) USING    vttsvb-vstel
                                       CHANGING rv56a-txt_vstel.
  PERFORM vtts-lstel_display(sapfv56s) USING    vttsvb-vstel
                                                vttsvb-lstel
                                       CHANGING rv56a-txt_lstel.
  PERFORM vtts-kunna_display(sapfv56s) USING    vttsvb-kunna
                                       CHANGING rv56a-txt_kunnr.
  PERFORM lfa1_read(sapfv56h)          USING    vttsvb-lifna
                                       CHANGING rv56a-txt_dlnam.
  PERFORM vtts-werk_display(sapfv56s) USING    vttsvb-werka
                                      CHANGING bez_werka.
  PERFORM vtts-lgort_display(sapfv56s) USING    vttsvb-werka
                                                vttsvb-lgorta
                                       CHANGING bez_lgorta.
  PERFORM vtts-bez_condense(sapfv56s) USING    bez_werka
                                               bez_lgorta
                                      CHANGING rv56a-txt_wrklgo.

  PERFORM print USING 'DEPARTURE_DETAILS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DESTINATION_DETAILS
***********************************************************************
FORM print_destination_details.

  DATA: bez_werkz  LIKE t001w-name1,
        bez_lgortz LIKE t001l-lgobe.

  CHECK ( vttsvb-vstez  NE space )
     OR ( vttsvb-lstez  NE space )
     OR ( vttsvb-werkz  NE space )
     OR ( vttsvb-lgortz NE space )
     OR ( vttsvb-kunnz  NE space )
     OR ( vttsvb-lifnz  NE space )
     OR ( vttsvb-ablad  NE space ).

  PERFORM vtts-vstel_display(sapfv56s) USING    vttsvb-vstez
                                       CHANGING rv56a-txt_vstel.
  PERFORM vtts-lstel_display(sapfv56s) USING    vttsvb-vstez
                                                vttsvb-lstez
                                       CHANGING rv56a-txt_lstel.
  PERFORM vtts-kunna_display(sapfv56s) USING    vttsvb-kunnz
                                       CHANGING rv56a-txt_kunnr.
  PERFORM lfa1_read(sapfv56h)          USING    vttsvb-lifnz
                                       CHANGING rv56a-txt_dlnam.
  PERFORM vtts-werk_display(sapfv56s) USING    vttsvb-werkz
                                      CHANGING bez_werkz.
  PERFORM vtts-lgort_display(sapfv56s) USING    vttsvb-werkz
                                                vttsvb-lgortz
                                       CHANGING bez_lgortz.
  PERFORM vtts-bez_condense(sapfv56s) USING    bez_werkz
                                               bez_lgortz
                                      CHANGING rv56a-txt_wrklgo.

  PERFORM print USING 'DESTINATION_DETAILS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DEPARTURE_ADDRESS
***********************************************************************
FORM print_departure_address.
  DATA:
    l_dept LIKE loc_dept.

  MOVE-CORRESPONDING xvtts TO l_dept.
  CALL FUNCTION 'ST_LOCATION_ADDR_READ'
    EXPORTING
      i_location        = l_dept
    IMPORTING
      e_sadr            = sadr   "SADR40A
    EXCEPTIONS
      address_not_found = 1
      OTHERS            = 2.
  IF sy-subrc NE 0.
    CLEAR sadr.                        "SADR40A
    EXIT.
  ENDIF.

  PERFORM print USING 'DEPARTURE_ADDRESS_TITLE'.
  PERFORM print USING 'ADDRESS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DESTINATION_ADDRESS
***********************************************************************
FORM print_destination_address.
  DATA:
    l_dest LIKE loc_dest.

  MOVE-CORRESPONDING xvtts TO l_dest.
  CALL FUNCTION 'ST_LOCATION_ADDR_READ'
    EXPORTING
      i_location        = l_dest
    IMPORTING
      e_sadr            = sadr   "SADR40A
    EXCEPTIONS
      address_not_found = 1
      OTHERS            = 2.
  IF sy-subrc NE 0.
    CLEAR sadr.                        "SADR40A
    EXIT.
  ENDIF.

  PERFORM print USING 'DESTINATION_ADDRESS_TITLE'.
  PERFORM print USING 'ADDRESS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DELIVERIES_IN_SEGMENT
***********************************************************************
FORM print_deliveries_in_segment.
  DATA sum_weight LIKE vtrlk-btgew.
  DATA sum_volume LIKE vtrlk-volum.
  DATA there_are_deliveries(1).

  CLEAR: sum_weight, sum_volume.
  there_are_deliveries = no.
* Find all items in this segment (= XVTTS-TSNUM)
* of this transport (= XVTTS-TKNUM) in table XVTTSP:
  LOOP AT xvtsp WHERE tknum EQ xvtts-tknum
                AND   tsnum EQ xvtts-tsnum.
* Find the corresponding delivery-number in table XVTTP:
    READ TABLE xvttp WITH KEY tknum = xvtts-tknum
                              tpnum = xvtsp-tpnum.
    IF sy-subrc EQ 0.
* Read the delivery
      LOOP AT slk WHERE vbeln EQ xvttp-vbeln.  "Deliveries
        MOVE slk TO vtrlk.
        IF there_are_deliveries EQ no.
          PERFORM print USING 'DELIVERIES_IN_SEGMENT_HEADING'.
          PERFORM print USING 'DELIVERY_HEADING'.
          there_are_deliveries = yes.
        ENDIF.
        PERFORM print USING 'DELIVERY'.
        sum_weight = sum_weight + vtrlk-btgew.
        sum_volume = sum_volume + vtrlk-volum.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
  IF there_are_deliveries EQ yes.
    vtrlk-btgew = sum_weight.
    vtrlk-volum = sum_volume.
    PERFORM print USING 'DELIVERY_OVERVIEW_SUM'.
    CLEAR vtrlk.
  ENDIF.
ENDFORM.

***********************************************************************
*      Form  PRINT_TEXTS
***********************************************************************
FORM print_texts.
  DATA there_are_texts(1).
  DATA: l_ttxer LIKE ttxern OCCURS 0 WITH HEADER LINE.

  there_are_texts = no.
  SELECT * FROM ttxern
           INTO TABLE l_ttxer
           WHERE tdobject EQ 'VTTK'
             AND txtgr    EQ tvtk-txtgr.

  LOOP AT l_ttxer INTO ttxern.
    MOVE: vttkvb-tknum   TO thead-tdname,
          ttxern-tdobject TO thead-tdobject,
          ttxern-tdid     TO thead-tdid,
          nast-spras     TO thead-tdspras.
    SELECT SINGLE * FROM ttxit
           WHERE tdobject EQ ttxern-tdobject
           AND   tdid     EQ ttxern-tdid
           AND   tdspras  EQ nast-spras.
    IF sy-subrc EQ 0.
      MOVE ttxit-tdtext TO thead-tdtitle.
    ELSE.
      thead-tdtitle = text-txt.
      thead-tdtitle+6(4) = ttxern-tdid.
    ENDIF.
    SELECT SINGLE * FROM stxh WHERE tdname    = thead-tdname
                                AND tdid      = thead-tdid
                                AND tdobject  = thead-tdobject
                                AND tdspras   = thead-tdspras.
    IF ( sy-subrc EQ 0 ).
      IF there_are_texts EQ no.
        PERFORM print USING 'TEXT_TITLE'.
        there_are_texts = yes.
      ENDIF.
      PERFORM print USING 'TEXT'.
    ENDIF.

  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_SHIPPING_UNITS                                     *
***********************************************************************
FORM print_shipping_units.
  CHECK NOT xvbplk[] IS INITIAL.

  PERFORM print USING 'SHIPPING_UNIT_TITLE'.
  PERFORM print USING 'SHIPPING_UNIT_HEADING'.
  LOOP AT xvbplk WHERE kzobe = 'X'.
    PERFORM packing_tree USING xvbplk-venum.
  ENDLOOP.
ENDFORM.


***********************************************************************
*      Form  PACKING_TREE                                             *
***********************************************************************
FORM packing_tree USING VALUE(shenr) LIKE vekp-venum.
  MOVE space TO xvbplk.
  xvbplk-venum = shenr.
  READ TABLE xvbplk.
  vbplk = xvbplk.
  PERFORM print USING 'SHIPPING_UNIT'.

  LOOP AT xvbplp WHERE venum = shenr.
    IF xvbplp-posnr IS INITIAL.
      PERFORM packing_tree USING xvbplp-unvel.
    ELSE.
      vbplp = xvbplp.
      PERFORM print USING 'SHIPPING_UNIT_DELIVERY_ITEM'.
    ENDIF.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_DEADLINES                                        *
***********************************************************************
FORM print_deadlines.
  DATA:
    xvbddl LIKE vbddl OCCURS 0 WITH HEADER LINE.

  vttk = vttkvb.
  CALL FUNCTION 'SD_DEADLINE_PRINT_VIEW'
    EXPORTING
      deadline_no  = vttkvb-ternr
      language     = sy-langu
      handle_no    = vttkvb-handle
      if_object    = 'WSHDRVTTK'
      is_object_wa = vttk
    TABLES
      deadline_tab = xvbddl
    EXCEPTIONS
      no_deadlines = 01.
  CHECK sy-subrc EQ 0.

  CHECK NOT xvbddl[] IS INITIAL.

  PERFORM print USING 'DEADLINES_TITLE'.
  PERFORM print USING 'DEADLINE_HEADING'.
  LOOP AT xvbddl.
    MOVE xvbddl TO vbddl.
    PERFORM print USING 'DEADLINE_PLAN_DATA'.
    IF NOT ( ( vbddl-isdd IS INITIAL ) AND
             ( vbddl-isdz IS INITIAL ) AND
             ( vbddl-iedd IS INITIAL ) AND
             ( vbddl-iedz IS INITIAL ) ).
      PERFORM print USING 'DEADLINE_ACTUAL_DATA'.
    ENDIF.
    IF vbddl-vstga NE space.
      PERFORM print USING 'DEADLINE_DEVIATION'.
    ENDIF.
    IF vbddl-knote NE space.
      PERFORM print USING 'DEADLINE_KNODE'.
    ENDIF.
    IF vbddl-tdname NE space.
      thead-tdname   = vbddl-tdname.
      thead-tdobject = 'AUFK'.
      thead-tdid     = 'AVOT'.
      thead-tdspras  = nast-spras.
      SELECT SINGLE * FROM stxh WHERE tdname    = thead-tdname
                                  AND tdid      = thead-tdid
                                  AND tdobject  = thead-tdobject
                                  AND tdspras   = thead-tdspras.
      IF ( sy-subrc EQ 0 ).
        PERFORM print USING 'DEADLINE_TEXT'.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.



***********************************************************************
********                                                      *********
********                 T E C H N I C A L                    *********
********                                                      *********
***********************************************************************

***********************************************************************
*      Form  PRINT                                                    *
***********************************************************************
FORM print USING textelement TYPE c.
  IF new_page_was_ordered EQ yes.
    CALL FUNCTION 'CONTROL_FORM'
      EXPORTING
        command = 'ENDPROTECT'.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'NEW_PAGE'
      EXCEPTIONS
        OTHERS  = 1.
    IF sy-subrc NE 0.
      PERFORM protocol_update.
    ENDIF.
    new_page_was_ordered = no.
  ENDIF.
  IF there_was_output EQ no.
    CALL FUNCTION 'CONTROL_FORM'
      EXPORTING
        command = 'PROTECT'.
    there_was_output = yes.
  ENDIF.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = textelement
    EXCEPTIONS
      OTHERS  = 1.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.
ENDFORM.

***********************************************************************
*      Form  NEW_PAGE_IF_NECESSARY
***********************************************************************
FORM new_page_if_necessary.
  IF there_was_output EQ yes.
    new_page_was_ordered = yes.
  ENDIF.
  there_was_output = no.
ENDFORM.                               " NEW_PAGE

***********************************************************************
*       FORM OPEN_FORM                                                *
***********************************************************************
*  -->  VALUE(US_SCREEN)  Output on screen                            *
*                         ' ' = printer                               *
*                         'X' = screen                                *
***********************************************************************
FORM open_form USING VALUE(us_screen) TYPE c.
  DATA us_country LIKE t005-land1.

  PERFORM get_sender_country USING us_country.
  CHECK retcode EQ 0.
  INCLUDE rvadopfo.
ENDFORM.

***********************************************************************
*       FORM Get_Sender_Country
*                                                                     *
***********************************************************************
*       Determines the country of the transport-disposition-unit      *
***********************************************************************
FORM get_sender_country USING sender_country LIKE t005-land1.
* data:
*   l_addr1_sel like addr1_sel.

* l_addr1_sel-addrnumber = ttds-adrnr.                    "SADR40A
* call function 'ADDR_GET'
*      exporting
*        address_selection = l_addr1_sel
*        address_group     = 'CA01'        "it's a Customizing-Address
*      importing
*        sadr              = sadr                            "SADR40A
*      exceptions
*           others  = 1.
* if sy-subrc eq 0.
*   sender_country = sadr-land1.                             "SADR40A
* else.
*   syst-msgid = 'VW'.
*   syst-msgno = '087'.
*   syst-msgty = 'E'.
*   syst-msgv1 = dbvttk-tknum.
*   syst-msgv2 = sy-subrc.
*   perform protocol_update.
* endif.
  DATA: l_vbadr LIKE vbadr.
  DATA: l_vbpa  LIKE vbpa.

  LOOP AT xvbpa WHERE vbeln = nast-objky AND
                      parvw = nast-parvw.
    sender_country = xvbpa-land1.
    EXIT.
  ENDLOOP.
  IF sy-subrc IS INITIAL  AND  sender_country IS INITIAL.
    l_vbpa = xvbpa.
    CALL FUNCTION 'VIEW_VBADR'
      EXPORTING
        input         = l_vbpa
        partnernummer = nast-parnr
      IMPORTING
        adresse       = l_vbadr.
    sender_country = l_vbadr-land1.
  ENDIF.

ENDFORM.

***********************************************************************
*       FORM CLOSE_FORM                                               *
***********************************************************************
FORM close_form.
  CALL FUNCTION 'CLOSE_FORM'
    EXCEPTIONS
      OTHERS = 1.
  IF sy-subrc NE 0.
    retcode = sy-subrc.
    PERFORM protocol_update.
  ENDIF.
  SET COUNTRY space.
ENDFORM.

***********************************************************************
*       FORM PROTOCOL_UPDATE                                          *
***********************************************************************
*       The messages are collected for the processing protocol.       *
***********************************************************************
FORM protocol_update.

  IF xscreen = space.
    CALL FUNCTION 'NAST_PROTOCOL_UPDATE'
      EXPORTING
        msg_arbgb = syst-msgid
        msg_nr    = syst-msgno
        msg_ty    = syst-msgty
        msg_v1    = syst-msgv1
        msg_v2    = syst-msgv2
        msg_v3    = syst-msgv3
        msg_v4    = syst-msgv4.
  ELSE.
    MESSAGE ID syst-msgid TYPE 'I' NUMBER syst-msgno
            WITH syst-msgv1 syst-msgv2 syst-msgv3 syst-msgv4.
  ENDIF.
ENDFORM.
