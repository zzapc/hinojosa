*&---------------------------------------------------------------------*
*&  Include           ZRWM_INTF_BHS_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_get_data .
  DATA ls_data_header TYPE zst_wm_0001.
  DATA ls_data_item TYPE zst_wm_0002.
  DATA ls_ubic_prop TYPE zwm_rf_ubic_prop.
  DATA: ls_color TYPE lvc_s_scol,
        lt_color TYPE lvc_t_scol.

  SELECT * INTO TABLE @DATA(lt_lagp) FROM lagp WHERE lgnum = @p_lgnum AND
                                              lgtyp IN @s_lgtyp AND
                                              lgpla IN @s_lgpla.
  IF sy-subrc IS INITIAL.
    SELECT * INTO TABLE @DATA(lt_lqua)
           FROM lqua WHERE lgnum = @p_lgnum AND
                           lgtyp IN @s_lgtyp AND
                           lgpla IN @s_lgpla AND
                           matnr IN @s_matnr.

    SELECT * INTO TABLE @DATA(lt_ubic_prop)
             FROM zwm_rf_ubic_prop
             WHERE lgnum = @p_lgnum AND
                   lgtyp IN @s_lgtyp AND
                   lgpla IN @s_lgpla AND
                   matnr IN @s_matnr.
  ENDIF.

  LOOP AT lt_lagp INTO DATA(ls_lagp).
    CLEAR: ls_data_header, ls_color.
    REFRESH: lt_color.

    MOVE-CORRESPONDING ls_lagp TO ls_data_header.
    IF NOT ls_data_header-mgewi IS INITIAL.
      ls_data_header-peso_libre = ls_data_header-lgewi - ls_data_header-mgewi.
    ELSE.
      ls_data_header-peso_libre = ls_data_header-lgewi.
    ENDIF.
    ls_data_header-icon = icon_select_detail.

    IF ls_data_header-lgewi LE ls_data_header-mgewi. " llena
      ls_color-color-col = 6.
      ls_color-color-int = 0.
      ls_color-color-inv = 0.
      ls_color-fname = 'PESO_LIBRE'.
      APPEND ls_color TO lt_color.
    ELSE.
      IF ( ( ls_data_header-mgewi / ls_data_header-lgewi ) * 100 ) < 90. " <90%
        ls_color-color-col = 5.
        ls_color-color-int = 0.
        ls_color-color-inv = 0.
        ls_color-fname = 'PESO_LIBRE'.
        APPEND ls_color TO lt_color.
      ELSE.
        ls_color-color-col = 7.
        ls_color-color-int = 1.
        ls_color-color-inv = 0.
        ls_color-fname = 'PESO_LIBRE'.
        APPEND ls_color TO lt_color.
      ENDIF.
    ENDIF.

    ls_data_header-t_color_m = lt_color.

    APPEND ls_data_header TO gt_data_header.
    CLEAR ls_data_item.
    SORT lt_lqua BY matnr. " 55847 - cvivo
    LOOP AT lt_lqua INTO DATA(ls_lqua) WHERE lgtyp = ls_lagp-lgtyp AND
                                             lgpla = ls_lagp-lgpla.
      IF ls_lqua-matnr NE ls_data_item-matnr. " si hay cambio de material
        READ TABLE lt_ubic_prop INTO ls_ubic_prop WITH KEY matnr = ls_data_item-matnr
                                                   lgnum = ls_data_item-lgnum
                                                   lgtyp = ls_data_item-lgtyp
                                                   lgpla = ls_data_item-lgpla .
        IF NOT sy-subrc IS INITIAL.
          ls_data_item-lgpla_error = abap_true.
        ELSE.
          DELETE lt_ubic_prop WHERE lgnum = ls_ubic_prop-lgnum AND
                                     lgtyp = ls_ubic_prop-lgtyp AND
                                     lgpla = ls_ubic_prop-lgpla AND
                                     matnr = ls_ubic_prop-matnr.
        ENDIF.
      ENDIF.

      MOVE-CORRESPONDING ls_lqua TO ls_data_item.

      IF p_fuera IS NOT INITIAL AND ls_data_item-lgpla_error IS INITIAL.
      ELSE.
        COLLECT ls_data_item INTO gt_data_item.
      ENDIF.
    ENDLOOP.
*    IF sy-subrc IS INITIAL.
    ls_data_item-icon = icon_select_detail.

*    ENDIF.
  ENDLOOP.
  LOOP AT gt_data_item INTO ls_data_item.
    READ TABLE lt_ubic_prop INTO ls_ubic_prop WITH KEY matnr = ls_data_item-matnr
                                                       lgnum = ls_data_item-lgnum
                                                       lgtyp = ls_data_item-lgtyp
                                                       lgpla = ls_data_item-lgpla .
    IF sy-subrc IS INITIAL.
      DELETE lt_ubic_prop WHERE lgnum = ls_ubic_prop-lgnum AND
                                 lgtyp = ls_ubic_prop-lgtyp AND
                                 lgpla = ls_ubic_prop-lgpla AND
                                 matnr = ls_ubic_prop-matnr.
    ENDIF.
  ENDLOOP.
  LOOP AT lt_ubic_prop INTO ls_ubic_prop.
    CLEAR ls_data_item.
    MOVE-CORRESPONDING ls_ubic_prop TO ls_data_item.
    APPEND ls_data_item TO gt_data_item.
  ENDLOOP.

  LOOP AT  gt_data_item ASSIGNING FIELD-SYMBOL(<item>).
    SELECT SINGLE maktx INTO <item>-maktx FROM makt WHERE spras = sy-langu AND
                                                         matnr = <item>-matnr.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_DAME_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARI  text
*----------------------------------------------------------------------*
FORM f_dame_variant  CHANGING pc_vari TYPE slis_vari.
  DATA: ls_variant TYPE disvariant,
        lv_exit    TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'LVC_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = lv_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    CHECK lv_exit EQ space.
    pc_vari = ls_variant-variant.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_SHOW_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_show_data .
* mostrar ALV con datos de GT_data
  DATA: lr_layout TYPE REF TO cl_salv_layout,
        ls_key    TYPE salv_s_layout_key.
  DATA:  lv_functions        TYPE REF TO cl_salv_functions_list,
         lv_title            TYPE lvc_title,
         lv_display_settings TYPE REF TO cl_salv_display_settings,
         lv_selections       TYPE REF TO cl_salv_selections,
         lv_events           TYPE REF TO cl_salv_events_table,
         lv_layout           TYPE REF TO cl_salv_layout,
         lv_lay              TYPE slis_vari,
         lv_key              TYPE salv_s_layout_key.
  DATA:
    lt_binding TYPE salv_t_hierseq_binding,
    ls_binding TYPE salv_s_hierseq_binding.

  DATA:
    lr_functions TYPE REF TO cl_salv_functions.

  DATA:
    lr_functional_settings TYPE REF TO cl_salv_functional_settings.

  DATA:
    lr_level TYPE REF TO cl_salv_hierseq_level.

  DATA:
    lr_columns TYPE REF TO cl_salv_columns_hierseq,
    lr_column  TYPE REF TO cl_salv_column_hierseq.

  IF gt_data_header[] IS NOT INITIAL.
    ls_binding-master = 'MANDT'.
    ls_binding-slave  = 'MANDT'.
    APPEND ls_binding TO lt_binding.

    ls_binding-master = 'LGNUM'.
    ls_binding-slave  = 'LGNUM'.
    APPEND ls_binding TO lt_binding.

    ls_binding-master = 'LGTYP'.
    ls_binding-slave  = 'LGTYP'.
    APPEND ls_binding TO lt_binding.

    ls_binding-master = 'LGPLA'.
    ls_binding-slave  = 'LGPLA'.
    APPEND ls_binding TO lt_binding.




    TRY.
        cl_salv_hierseq_table=>factory(
          EXPORTING
            t_binding_level1_level2  = lt_binding
          IMPORTING
            r_hierseq                = go_table
          CHANGING
            t_table_level1           = gt_data_header
            t_table_level2           = gt_data_item ).
      CATCH cx_salv_data_error cx_salv_not_found.
    ENDTRY.

*... §3 Functions
    lr_functions = go_table->get_functions( ).
    lr_functions->set_all( abap_true ).

*... *** MASTER Settings ***
    TRY.
        lr_columns = go_table->get_columns( 1 ).
      CATCH cx_salv_not_found.
    ENDTRY.

*... optimize the columns
    lr_columns->set_optimize( abap_true ).

*... set the column client technical
    TRY.
        lr_column ?= lr_columns->get_column( 'MANDT' ).
        lr_column->set_technical( if_salv_c_bool_sap=>true ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

*... set expand column
    TRY.
        lr_columns->set_expand_column( 'EXPAND' ).
      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
    ENDTRY.

*... set items expanded
    TRY.
        lr_level = go_table->get_level( 1 ).
      CATCH cx_salv_not_found.
    ENDTRY.

    lr_level->set_items_expanded( ).

    lr_layout = go_table->get_layout( ).
    ls_key-report = sy-repid.
    lr_layout->set_key( ls_key ).
    lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
    lr_layout->set_initial_layout( p_vari ).
    lr_layout->set_default( abap_true ).

*... §4.4 set checkbox column
    TRY.
        lr_column ?= lr_columns->get_column( 'SKZUA' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>checkbox ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.
    TRY.
        lr_column ?= lr_columns->get_column( 'SKZUE' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>checkbox ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.
    TRY.
        lr_column ?= lr_columns->get_column( 'SKZSA' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>checkbox ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.
    TRY.
        lr_column ?= lr_columns->get_column( 'SKZSE' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>checkbox ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.
    TRY.
        lr_column ?= lr_columns->get_column( 'SKZSI' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>checkbox ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.
*... §4.5 set hotspot column
    TRY.
        lr_column ?= lr_columns->get_column( 'ICON' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
        lr_column->set_icon( if_salv_c_bool_sap=>true ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

*... §5.2 set the color of a complete row
*    (1) register the column in which the color information
*        for the row is held
    TRY.
        lr_columns->set_color_column( 'T_COLOR_M' ).
      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
    ENDTRY.

*... *** MASTER Settings ***
    TRY.
        lr_columns = go_table->get_columns( 2 ).
      CATCH cx_salv_not_found.
    ENDTRY.

*... optimize the columns
    lr_columns->set_optimize( abap_true ).

*... set the column client technical
    TRY.
        lr_column ?= lr_columns->get_column( 'MANDT' ).
        lr_column->set_technical( if_salv_c_bool_sap=>true ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

*... §4.4 set checkbox column
    TRY.
        lr_column ?= lr_columns->get_column( 'LGPLA_ERROR' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>checkbox ).
        lr_column->set_long_text( 'LGPLA_ERROR' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.
*... §4.5 set hotspot column
    TRY.
        lr_column ?= lr_columns->get_column( 'ICON' ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
        lr_column->set_icon( if_salv_c_bool_sap=>true ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

*... *** GENERAL Settings ***
*... §7 register to the events of cl_salv_table
    DATA:
      lr_events TYPE REF TO cl_salv_events_hierseq.

    lr_events = go_table->get_event( ).

    CREATE OBJECT gr_events.

*... §7.3 register to the event LINK_CLICK
    SET HANDLER gr_events->on_single_click FOR lr_events.

*... §8 display the table
    go_table->display( ).
  ELSE.
    MESSAGE text-e01 TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIFICA_CABECERAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_modifica_cabeceras .
*  DATA: lo_cols       TYPE REF TO cl_salv_columns,
*        lo_column_tab TYPE REF TO cl_salv_column_table,
*        lt_dd03l      TYPE enh_t_dd03l,
*        lv_text       TYPE string,
*        lo_column     TYPE REF TO cl_salv_column.
*
*  SELECT *
*  INTO CORRESPONDING FIELDS OF TABLE lt_dd03l
*  FROM dd03l
*  WHERE tabname = 'ZST_WM_0001'.
*
*    lo_cols = go_table->get_columns( ).
*    lo_cols->set_optimize( abap_true ).
*
*    LOOP AT lt_dd03l ASSIGNING FIELD-SYMBOL(<wa_field>).
*      TRY.
*          CASE <wa_field>-fieldname.
*            WHEN 'MANDT'.
*              lo_column = lo_cols->get_column( <wa_field>-fieldname ).
*              lo_column->set_technical( abap_true ).
*            WHEN OTHERS.
*
**            lo_column = lo_cols->get_column( <wa_field>-fieldname ).
**            lv_text = <wa_field>-fieldname.
*              PERFORM f_modif_columna USING <wa_field>-fieldname lv_text lo_cols.
**                                    CHANGING lo_column.
*          ENDCASE.
*        CATCH cx_salv_not_found.                        "#EC NO_HANDLER
*
*      ENDTRY.
*    ENDLOOP.
*
**  PERFORM f_modif_columna USING 'MATNR' 'Material' lo_cols.
**  TRY.
**      lo_column_tab ?= lo_cols->get_column( 'MATNR' ).
**    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
**  ENDTRY.
**  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
**
**  PERFORM f_modif_columna USING 'COD_ETIQUETA' 'Unidad almacén' lo_cols.
**  TRY.
**      lo_column_tab ?= lo_cols->get_column( 'COD_ETIQUETA' ).
**    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
**  ENDTRY.
**  lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
*
**  PERFORM f_modif_columna USING 'TANUM' 'Número OT' lo_cols.
**  PERFORM f_modif_columna USING 'TBNUM' 'Número NT' lo_cols.
**  PERFORM f_modif_columna USING 'MBLNR' 'Doc. material' lo_cols.
*    TRY.
*        lo_column_tab ?= lo_cols->get_column( 'MATNR' ).
*      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
*    ENDTRY.
*    lo_column_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
*
**  PERFORM f_modif_columna USING 'FECHA' 'Fecha' lo_cols.
**  PERFORM f_modif_columna USING 'POS_FICH' 'Posición ÏD' lo_cols.
**  PERFORM f_modif_columna USING 'HORA' 'Hora' lo_cols.
**  PERFORM f_modif_columna USING 'PORTA_BOBINAS' 'Estación BHS' lo_cols.
**  PERFORM f_modif_columna USING 'METROS_RESTANTES' 'M. restantes' lo_cols.
**  PERFORM f_modif_columna USING 'METROS_DESARROLLADOS' 'M. desarrollados' lo_cols.
**  PERFORM f_modif_columna USING 'CALIDAD' 'Calidad' lo_cols.
**  PERFORM f_modif_columna USING 'ORDEN_BHS' 'CI number' lo_cols.
**  PERFORM f_modif_columna USING 'CHARG' 'Lote' lo_cols.
**  PERFORM f_modif_columna USING 'MJAHR' 'Ejercicio' lo_cols.
**  PERFORM f_modif_columna USING 'MESSAGE' 'Mensaje' lo_cols.
**  PERFORM f_modif_columna USING 'CANT_CONSUMO' 'Consumo' lo_cols.
**  PERFORM f_modif_columna USING 'CANT_CONSUMO_KG' 'Consumo kg.' lo_cols.
**  PERFORM f_modif_columna USING 'CANT_DIF' 'Diferencia' lo_cols.
**  PERFORM f_modif_columna USING 'CANT_DIF_KG' 'Diferencia kg.' lo_cols.
**  PERFORM f_modif_columna USING 'COD_CONSUMO' 'Código consumo' lo_cols.
**  PERFORM f_modif_columna USING 'STOCK_SAP' 'Stock SAP' lo_cols.
**  PERFORM f_modif_columna USING 'STOCK_SAP_KG' 'Stock kg. SAP' lo_cols.
**  PERFORM f_modif_columna USING 'TOLERANCIA' 'Tolerancia' lo_cols.
**  PERFORM f_modif_columna USING 'PROCESADO' 'Procesado' lo_cols.
**  TRY.
**      lo_column_tab ?= lo_cols->get_column( 'PROCESADO' ).
**    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
**  ENDTRY.
**  lo_column_tab->set_cell_type( if_salv_c_cell_type=>checkbox ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_MODIF_COLUMNA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_TEXT  text
*      <--P_LO_COLUMN  text
*----------------------------------------------------------------------*
FORM f_modif_columna USING  pe_field TYPE name_feld
                            pe_text TYPE string
                            po_cols TYPE REF TO cl_salv_columns.
  DATA: lv_short      TYPE scrtext_s,
        lv_med        TYPE scrtext_m,
        lv_long       TYPE scrtext_l,
        lv_len        TYPE lvc_outlen,
        lv_tool       TYPE lvc_tip,
        lo_column     TYPE REF TO cl_salv_column,
        lo_column_tab TYPE REF TO cl_salv_column_table.

  lo_column = po_cols->get_column( pe_field ).

*  lv_long  = lo_column->get_long_text( ).
*  lv_med   = lo_column->get_medium_text( ).
*  lv_short = lo_column->get_short_text( ).
*  lo_column->set_long_text( lv_long ). "40
*  lo_column->set_fixed_header_text( abap_true ).
*  lo_column->set_medium_text( lv_med ). "20
*  lo_column->set_short_text( lv_short ). "10
  lo_column->set_tooltip( lv_tool ).
  lv_len = strlen( pe_text ).
  lo_column->set_output_length( lv_len ).
  lo_column->set_zero( abap_true ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SINGLE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LEVEL  text
*      -->P_ROW  text
*      -->P_COLUMN  text
*----------------------------------------------------------------------*
FORM single_click  USING    p_level
                            p_row
                            p_column.

  DATA bdcdata_tab TYPE TABLE OF bdcdata.
  DATA opt TYPE ctu_params.

  CASE p_level.
    WHEN '1'.
      READ TABLE gt_data_header INTO DATA(ls_header) INDEX p_row.

      bdcdata_tab = VALUE #(
      ( program  = 'SAPML01S'     dynpro   = '0210' dynbegin = 'X' )
      ( fnam = 'BDC_CURSOR'       fval = 'RL01S-LGNUM' )
      ( fnam = 'RL01S-LGNUM'      fval = ls_header-lgnum )
      ( fnam = 'RL01S-LGTYP'      fval = ls_header-lgtyp )
      ( fnam = 'RL01S-LGPLA'      fval = ls_header-lgpla )
      ( fnam = 'BDC_OKCODE'       fval = '/00' ) ).

      TRY.
          CALL TRANSACTION 'LS25' WITH AUTHORITY-CHECK
                                  USING bdcdata_tab MODE 'E'.
        CATCH cx_sy_authorization_error.
      ENDTRY.
    WHEN '2'.
      READ TABLE gt_data_item INTO DATA(ls_item) INDEX p_row.

      bdcdata_tab = VALUE #(
      ( program  = 'SAPML01S'     dynpro   = '0209' dynbegin = 'X' )
      ( fnam = 'BDC_CURSOR'       fval = 'RL01S-LGNUM' )
      ( fnam = 'RL01S-LGNUM'      fval = ls_item-lgnum )
      ( fnam = 'RL01S-LGTYP'      fval = ls_item-lgtyp )
      ( fnam = 'RL01S-LGPLA'      fval = ls_item-lgpla )
      ( fnam = 'RL01S-MATNR'      fval = ls_item-matnr )
      ( fnam = 'BDC_OKCODE'       fval = '/00' ) ).

      TRY.
          CALL TRANSACTION 'LS24' WITH AUTHORITY-CHECK
                                  USING bdcdata_tab MODE 'E'.
        CATCH cx_sy_authorization_error.
      ENDTRY.
  ENDCASE.

ENDFORM.
