*&---------------------------------------------------------------------*
*& Report  ZSWM_REVISA_MAESTRO_MATERIAL
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zswm_revisa_maestro_material.
DATA t_datos LIKE zswm_revisa_maestro_materstr OCCURS 0 WITH HEADER LINE.
TABLES: mara, marc, mvke, mard.
SELECT-OPTIONS: s_matnr FOR mara-matnr,
                s_mtart FOR mara-mtart,
                s_erdat FOR mara-ersda,
                s_ernam FOR mara-aenam.

SELECTION-SCREEN SKIP 1.
SELECT-OPTIONS: s_lvorm FOR mara-lvorm.
SELECTION-SCREEN SKIP 1.
SELECT-OPTIONS:
                s_werks FOR marc-werks .
*                s_lgort for mard-lgort ,
*                s_vkorg FOR mvke-vkorg ,
*                s_vtweg FOR mvke-vtweg .

INITIALIZATION.
  s_werks+0(3) = 'IEQ'.
  s_werks-low  = '2001'. APPEND s_werks.
  s_werks-low  = '2003'. APPEND s_werks.
  s_lvorm+0(3) = 'INE'.
  s_lvorm-low  = abap_true. APPEND s_lvorm.
  DATA rr_mtart TYPE fip_t_mtart_range.
  CLEAR rr_mtart[].
  CALL FUNCTION 'ZSWM_SET_GET_VALUES'
    EXPORTING
      shortname = 'ZSWM_PLANCHA_MTART'
    IMPORTING
      rr_mtart  = rr_mtart.
  LOOP AT rr_mtart INTO DATA(rt_mtart).
    s_mtart+0(3) = 'IEQ'.
    s_mtart-low  = rt_mtart-low.
    APPEND s_mtart.
  ENDLOOP.
  s_mtart+0(3) = 'IEQ'. s_mtart-low = 'ZPAL'. APPEND  s_mtart.
  DATA rr_werks TYPE range_t_werks.
  CLEAR rr_werks[].
  CALL FUNCTION 'ZSWM_SET_GET_VALUES'
    EXPORTING
      shortname = 'ZSWM_PLANCHA_WERKS'
    IMPORTING
      rr_werks  = rr_werks.
  LOOP AT rr_werks INTO DATA(rt_werks).
    s_werks+0(3) = 'IEQ'. s_werks-low = rt_werks-low. APPEND s_werks.
  ENDLOOP.

AT SELECTION-SCREEN.

START-OF-SELECTION.
  SELECT * INTO TABLE @DATA(tt_mara) FROM mara WHERE matnr IN @s_matnr
  AND mtart IN @s_mtart
  AND ernam IN @s_ernam
  AND ersda IN @s_erdat
  AND lvorm IN @s_lvorm.


  LOOP AT tt_mara INTO DATA(rt_mara).
    SELECT SINGLE maktx INTO @DATA(maktx) FROM makt WHERE matnr EQ @rt_mara-matnr
    AND spras EQ @sy-langu.
    CLEAR t_datos.
    MOVE-CORRESPONDING rt_mara TO t_datos.
    t_datos-maktx      = maktx.
    DATA n_reg TYPE i.
    n_reg = 0.
    CASE rt_mara-mtart.
      WHEN 'ZPAL'.
        IF rt_mara-vhart NE 'Z200'.
          ADD 1 TO n_reg.
          t_datos-message = 'El tipo de material de embalaje no es Z200'.
          t_datos-type    = 'E'.
          APPEND t_datos.
        ENDIF.
        IF rt_mara-mtpos_mara NE 'VERP'.
          ADD 1 TO n_reg.
          t_datos-message = 'El tipo de posicion general no es VERP'.
          t_datos-type    = 'E'.
          APPEND t_datos.
        ENDIF.
        IF rt_mara-raube NE 'E5'.
          ADD 1 TO n_reg.
          t_datos-message = 'Condición de almacenaje no es E5'.
          t_datos-type    = 'E'.
          APPEND t_datos.
        ENDIF.
        LOOP AT s_werks.
          PERFORM vista_centro TABLES t_datos USING rt_mara-matnr s_werks-low rt_mara-mtart CHANGING n_reg.
          PERFORM vista_centr_almacen TABLES t_datos USING rt_mara-matnr s_werks-low '5000'  CHANGING n_reg.
          PERFORM vista_oo_ventas     TABLES t_datos USING rt_mara-matnr s_werks-low CHANGING n_reg.

        ENDLOOP.
      WHEN 'ZTRO' OR 'ZCLI'.
        LOOP AT s_werks.
          PERFORM vista_centro TABLES t_datos USING rt_mara-matnr s_werks-low rt_mara-mtart CHANGING n_reg.
          PERFORM vista_centr_almacen TABLES t_datos USING rt_mara-matnr s_werks-low '1400'  CHANGING n_reg.
          PERFORM vista_n_almacen     TABLES t_datos USING rt_mara-matnr s_werks-low t_datos-mtart '800' 'Y' CHANGING n_reg.
        ENDLOOP.

      WHEN OTHERS.
        LOOP AT s_werks.
          CASE t_datos-mtart+0(3).
            WHEN 'ZPT'.
              PERFORM vista_centro TABLES t_datos USING rt_mara-matnr s_werks-low rt_mara-mtart CHANGING n_reg.
              PERFORM vista_centr_almacen TABLES t_datos USING rt_mara-matnr s_werks-low '1400'  CHANGING n_reg.
              PERFORM vista_n_almacen     TABLES t_datos USING rt_mara-matnr s_werks-low t_datos-mtart '' 'T' CHANGING n_reg.

            WHEN 'ZPS'.
              PERFORM vista_centro TABLES t_datos USING rt_mara-matnr s_werks-low rt_mara-mtart CHANGING n_reg.
              data lgort type t001l-lgort.
              case s_werks-low.
              when '2001'. lgort = '1400'.
              when '2003'. lgort = '1000'.
              when OTHERS.
                 lgort = '1400'.
              endcase.
*              PERFORM vista_centr_almacen TABLES t_datos USING rt_mara-matnr s_werks-low '1000'  CHANGING n_reg.

              PERFORM vista_centr_almacen TABLES t_datos USING rt_mara-matnr s_werks-low lgort  CHANGING n_reg.
              PERFORM vista_n_almacen     TABLES t_datos USING rt_mara-matnr s_werks-low t_datos-mtart '' 'S' CHANGING n_reg.

          ENDCASE.
        ENDLOOP.

    ENDCASE.
    CHECK n_reg <= 0.
    APPEND t_datos.
  ENDLOOP.
  PERFORM alv TABLES t_datos USING 'ZSWM_REVISA_MAESTRO_MATERSTR'.
*&---------------------------------------------------------------------*
*&      Form  VISTA_CENTR_ALMACEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_DATOS  text
*      -->P_RT_MARA_MATNR  text
*      -->P_S_WERKS_LOW  text
*      -->P_0211   text
*      <--P_N_REG  text
*----------------------------------------------------------------------*
FORM vista_centr_almacen  TABLES   t_datos STRUCTURE t_datos
                          USING    matnr   TYPE matnr
                                   werks   TYPE werks_d
                                   VALUE(lgort) TYPE t001l-lgort
                          CHANGING n_reg.
  SELECT SINGLE * INTO @DATA(r_mard) FROM mard WHERE matnr EQ @matnr
                                                 AND werks EQ @werks
                                                 AND lgort EQ @lgort
  AND lvorm NE @abap_true.

  CHECK sy-subrc NE 0.
  ADD 1 TO n_reg.
  CONCATENATE  'No existe vista para centro/almacen:' werks '/' lgort INTO t_datos-message .
  t_datos-type    = 'E'.
  APPEND t_datos.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VISTA_N_ALMACEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_DATOS  text
*      -->P_RT_MARA_MATNR  text
*      -->P_S_WERKS_LOW  text
*      <--P_N_REG  text
*----------------------------------------------------------------------*
FORM vista_n_almacen  TABLES   t_datos STRUCTURE t_datos
                      USING    matnr   TYPE matnr
                               werks   TYPE werks_d
                               mtart   TYPE mara-mtart
                               lgtyp   TYPE mlgt-lgtyp
                               VALUE(bsskz) TYPE mlgn-bsskz
                      CHANGING n_reg.
  SELECT * INTO TABLE @DATA(tt_320) FROM t320 WHERE werks EQ @werks.
  SORT tt_320 BY lgnum.
  DELETE ADJACENT DUPLICATES FROM tt_320 COMPARING lgnum.
  LOOP AT tt_320 INTO DATA(rt_320).
    SELECT SINGLE * INTO @DATA(mlgn) FROM mlgn WHERE matnr EQ @matnr
                                                 AND lgnum EQ @rt_320-lgnum
    AND lvorm NE @abap_true.

    IF sy-subrc NE 0.
      ADD 1 TO n_reg.
      t_datos-message = 'No existe vista de gestión de almacenes 1'.
      t_datos-type    = 'E'.
      APPEND t_datos.
    ELSE.
      t_datos-bsskz = mlgn-bsskz.
      t_datos-lgtyp = lgtyp.

      IF mlgn-bsskz NE bsskz.
        ADD 1 TO n_reg.
        CONCATENATE 'El indicador de movimiento especial debe ser:' bsskz INTO t_datos-message.
        t_datos-type    = 'E'.
        APPEND t_datos.
      ENDIF.

*              select * into TABLE @data(tT_MLGT) from mlgt where matnr eq @matnr
*                                                             and lgnum eq @lgnum
*                                                             and lgtyp eq @lgtyp
*                                                             and lvorm ne @abap_true.
      CASE mtart.
        WHEN 'ZCLI' OR 'ZTRO'.
          SELECT SINGLE * INTO @DATA(mlgt) FROM mlgt WHERE matnr EQ @matnr
                                                         AND lgnum EQ @rt_320-lgnum
                                                         AND lgtyp EQ @lgtyp
          AND lvorm NE @abap_true.
          IF sy-subrc NE 0.
            ADD 1 TO n_reg.
            CONCATENATE 'No existe vista de gestión de almacenes 2 para tipo de almacén:' lgtyp INTO t_datos-message.
            t_datos-type    = 'E'.
            APPEND t_datos.
          ELSEIF mlgt-lgpla IS INITIAL.
            ADD 1 TO n_reg.
            CONCATENATE 'En vista de gestión de almacenes 2 para tipo de almacén:' lgtyp  ' no hay ubicación rellena' INTO t_datos-message.
            t_datos-type    = 'E'.
            APPEND t_datos.

          ELSE.
            t_datos-lgpla = mlgt-lgpla.
          ENDIF.
        WHEN OTHERS.
          CHECK mtart+0(3) EQ 'ZPS'
             OR mtart+0(3) EQ 'ZPT'.

          IF mlgn-lhmg1 IS INITIAL.
            ADD 1 TO n_reg.
            CONCATENATE 'En vista de gestión de almacenes 2 Sin paletización:'  space INTO t_datos-message.
            t_datos-type    = 'E'.
            APPEND t_datos.

          ENDIF.
      ENDCASE.

    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VISTA_CENTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_DATOS  text
*      -->P_RT_MARA_MATNR  text
*      -->P_S_WERKS_LOW  text
*      -->P_RT_MARA_MTART  text
*      <--P_N_REG  text
*----------------------------------------------------------------------*
FORM vista_centro  TABLES   t_datos STRUCTURE t_datos
                   USING    matnr   TYPE matnr
                            werks   TYPE werks_d
                            mtart   TYPE mtart
                   CHANGING n_reg.
  SELECT SINGLE * INTO @DATA(r_marc) FROM marc WHERE matnr EQ @matnr
  AND werks EQ @werks
  AND lvorm NE @abap_true.
  CASE sy-subrc.
    WHEN 0.

    WHEN OTHERS.
      ADD 1 TO n_reg.
      CONCATENATE 'No hay vista de centro:' werks INTO t_datos-message.
      t_datos-type    = 'E'.
      APPEND t_datos.

*          WRITE:/10 'No existe vista para centro:', s_werks-low COLOR 6.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VISTA_OO_VENTAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_DATOS  text
*      -->P_RT_MARA_MATNR  text
*      -->P_S_WERKS_LOW  text
*      <--P_N_REG  text
*----------------------------------------------------------------------*
FORM vista_oo_ventas  TABLES   t_datos STRUCTURE t_datos
                      USING    matnr   TYPE matnr
                               werks   TYPE werks_d
                      CHANGING n_reg.
  SELECT SINGLE vkorg INTO @DATA(vkorg) FROM tvko WHERE werks EQ @werks.
    SELECT SINGLE * INTO @DATA(r_mvke) FROM mvke WHERE matnr EQ @matnr
                                                   AND vkorg EQ @vkorg
                                                   AND lvorm NE @abap_true.
    CASE sy-subrc.
      WHEN 0.
        CASE rt_mara-mtart.
          WHEN 'ZPAL'.

            IF r_mvke-mtpos NE 'ZPAL'.
              ADD 1 TO n_reg.
              CONCATENATE 'El tipo de posicion no es ZPAL en vista de organización de ventas:' vkorg INTO t_datos-message.
              t_datos-type    = 'E'.
              APPEND t_datos.
            ENDIF.
        ENDCASE.
      WHEN OTHERS.
        ADD 1 TO n_reg.
        CONCATENATE 'No hay vista para organizacíón de ventas:' vkorg INTO t_datos-message.
        t_datos-type    = 'E'.
        APPEND t_datos.

    ENDCASE.

ENDFORM.
FORM alv  TABLES   t_alv
          USING    VALUE(p_tabname) LIKE dd03n-tabname.
  IF t_alv IS INITIAL.
    APPEND t_alv.
  ENDIF.
  CALL FUNCTION 'DISPLAY_BASIC_LIST'
    EXPORTING
*     BASIC_LIST_TITLE    =
      file_name           = 'PP'
*     HEAD_LINE1          = ' '
*     HEAD_LINE2          = ' '
*     HEAD_LINE3          = ' '
*     HEAD_LINE4          = ' '
*     FOOT_NOTE1          = ' '
*     FOOT_NOTE2          = ' '
*     FOOT_NOTE3          = ' '
*     LAY_OUT             = 0
*     DYN_PUSHBUTTON_TEXT1       =
*     DYN_PUSHBUTTON_TEXT2       =
*     DYN_PUSHBUTTON_TEXT3       =
*     DYN_PUSHBUTTON_TEXT4       =
*     DYN_PUSHBUTTON_TEXT5       =
*     DYN_PUSHBUTTON_TEXT6       =
      data_structure      = p_tabname
*     CURRENT_REPORT      =
*     LIST_LEVEL          = ' '
*     ADDITIONAL_OPTIONS  = ' '
*     WORD_DOCUMENT       =
*     APPLICATION         =
*     OLDVALUES           = ' '
*     NO_ALV_GRID         =
*     ALV_MARKER          =
*     IMPORTING
*     RETURN_CODE         =
    TABLES
      data_tab            = t_alv
*     FIELDNAME_TAB       =
*     SELECT_TAB          =
*     ERROR_TAB           =
*     RECEIVERS           =
    EXCEPTIONS
      download_problem    = 1
      no_data_tab_entries = 2
      table_mismatch      = 3
      print_problems      = 4
      OTHERS              = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
