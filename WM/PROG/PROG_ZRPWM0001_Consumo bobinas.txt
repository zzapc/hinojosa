***********************************************************************
* TIPO : LISTADO
* TITULO : Consumo bobinas
* DESCRIPCION : Consumo bobinas
*
* AUTOR: Andrés Picazo                                FECHA: 23/10/2024
* ANALISTA: Alfredo Garcia
*
***********************************************************************
REPORT zrpwm0001.

CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check                  TYPE xfeld,
             lights                 TYPE zico_estado_mensaje,
             msgguid                TYPE zwm_intf_bhs_l-msgguid,
             fecha_proxy            TYPE zwm_intf_bhs_l-fecha,
             hora_proxy             TYPE zwm_intf_bhs_l-hora,
             linea                  TYPE ztwm0001-linea,
             sim                    TYPE abap_bool,
             centro                 TYPE ztwm0001-centro,
             almacen                TYPE ztwm0001-almacen,
             fecha_hora             TYPE ztwm0001-fecha_hora,
             codigo_consumo         TYPE ztwm0001-codigo_consumo,
             codigo_consumo_t       TYPE string,
             orden                  TYPE int1,
             portabobinas           TYPE ztwm0001-portabobinas,
             codigo_etiqueta        TYPE ztwm0001-codigo_etiqueta,
             metros_restantes_p     TYPE ztwm0001-metros_restantes,
             metros_desarrollados_p TYPE ztwm0001-metros_desarrollados,
             trabajo_interno_bhs    TYPE ztwm0001-trabajo_interno_bhs,
             calidad                TYPE ztwm0001-calidad,
             cod_maquina_principal  TYPE zwm_intf_bhs-cod_maquina_principal,
             cod_operario           TYPE ztwm0001-cod_operario,
             id                     TYPE ztwm0001-id,
             fecha                  TYPE ztwm0001-fecha,
             hora                   TYPE zwm_intf_bhs_l-hora,
             lgnum                  TYPE ztwm0001-lgnum,
             pos_fich               TYPE zwm_intf_bhs-pos_fich,
             werks                  TYPE zwm_intf_bhs-werks,
             cod_consumo            TYPE zwm_intf_bhs-cod_consumo,
             porta_bobinas          TYPE zwm_intf_bhs-porta_bobinas,
             cod_etiqueta           TYPE zwm_intf_bhs-cod_etiqueta,
             metros_restantes       TYPE zwm_intf_bhs-metros_restantes,
             metros_desarrollados   TYPE zwm_intf_bhs-metros_desarrollados,
             md_02                  TYPE zwm_intf_bhs-consumo_notificar,
             metros_des_inicio_ci   TYPE zwm_intf_bhs-metros_des_inicio_ci,
             consumo_notificar      TYPE zwm_intf_bhs-consumo_notificar,
             consumo_notificar_kg   TYPE zwm_intf_bhs-consumo_notificar_kg,
             orden_bhs              TYPE zwm_intf_bhs-orden_bhs,
             matnr                  TYPE zwm_intf_bhs-matnr,
             charg                  TYPE zwm_intf_bhs-charg,
             tolerancia             TYPE zwm_intf_bhs-tolerancia,
             meins_tol              TYPE zwm_intf_bhs-meins_tol,
             tolerancia_kg          TYPE zwm_intf_bhs-tolerancia,
             stock_sap              TYPE zwm_intf_bhs-stock_sap,
             cant_dif               TYPE zwm_intf_bhs-cant_dif,
             cant_consumo           TYPE zwm_intf_bhs-cant_dif,
             meinh                  TYPE zwm_intf_bhs-meinh,
             stock_sap_kg           TYPE zwm_intf_bhs-stock_sap_kg,
             cant_dif_kg            TYPE zwm_intf_bhs-cant_dif_kg,
             cant_consumo_kg        TYPE zwm_intf_bhs-cant_consumo_kg,
             procesado              TYPE zwm_intf_bhs-procesado,
             contabilizado          TYPE zwm_intf_bhs-contabilizado,
             mblnr                  TYPE zwm_intf_bhs-mblnr,
             mjahr                  TYPE zwm_intf_bhs-mjahr,
             tbnum                  TYPE zwm_intf_bhs-tbnum,
             tbpos                  TYPE zwm_intf_bhs-tbpos,
             tanum                  TYPE zwm_intf_bhs-tanum,
             tapos                  TYPE zwm_intf_bhs-tapos,
             rsnum                  TYPE zwm_intf_bhs-rsnum,
             rspos                  TYPE zwm_intf_bhs-rspos,
             rsart                  TYPE zwm_intf_bhs-rsart,
             diametro_rest          TYPE zwm_intf_bhs-diametro_rest,
             ua_producida           TYPE zwm_intf_bhs-ua_producida,
             matnr_prod             TYPE zwm_intf_bhs-matnr_prod,
             cod_parte_rebob        TYPE zwm_intf_bhs-cod_parte_rebob,
             bwart                  TYPE zwm_intf_bhs-bwart,
             aufnr1                 TYPE aufnr,
             menge1                 TYPE mseg-menge,
             aufnr2                 TYPE aufnr,
             menge2                 TYPE mseg-menge,
             aufnr3                 TYPE aufnr,
             menge3                 TYPE mseg-menge,
             message                TYPE bapi_msg,
             color                  TYPE lvc_t_scol,
             proc_tmp               TYPE abap_bool,
             id_proceso             TYPE ztwm0001-id_proceso,
             error                  TYPE abap_bool,
             no_procesar            TYPE ztwm0001-no_procesar,
             tabix                  TYPE sy-tabix,
             id_tmp                 TYPE ztwm0001-id_proceso,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos,

      get_intf_bhs IMPORTING !list       TYPE t_listado
                   RETURNING VALUE(intf) TYPE zwm_intf_bhs,
      consumir.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA: o_prog         TYPE REF TO zcl_report,
      ztwm0001       TYPE ztwm0001,
      zwm_intf_bhs_l TYPE zwm_intf_bhs_l,
      zwm_intf_bhs   TYPE zwm_intf_bhs.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_fecha FOR zwm_intf_bhs_l-fecha,
                s_hora  FOR zwm_intf_bhs_l-hora,
                s_etiq  FOR ztwm0001-codigo_etiqueta,
                s_proce FOR ztwm0001-procesado,
                s_tibhs FOR ztwm0001-trabajo_interno_bhs,
                s_codco FOR zwm_intf_bhs-cod_consumo,
                s_maqui FOR ztwm0001-cod_maquina_principal.
SELECTION-SCREEN SKIP 1.
*PARAMETERS: p_sim  AS CHECKBOX,
*            p_copy AS CHECKBOX.
PARAMETERS: p_nopro AS CHECKBOX.
PARAMETERS: p_ejec AS CHECKBOX.
PARAMETERS p_nolis NO-DISPLAY.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.
    DATA: im_msgkey TYPE sxmsmkey,
          pay_bytes TYPE xstring,
          payload   TYPE string.
    DATA l_input TYPE zdt_bhs_consum_bob_mat_prima_i.

    l_list = list.
    CASE column.
      WHEN 'MSGGUID'.

        im_msgkey-msgid = l_list-msgguid.
        im_msgkey-pid   = 'RECEIVER'.
        CALL FUNCTION 'SXMB_GET_MESSAGE_PAYLOAD'
          EXPORTING
            im_msgkey      = im_msgkey
            im_archive     = ''
            im_version     = '000'
          IMPORTING
            ex_msg_bytes   = pay_bytes
          EXCEPTIONS
            not_authorized = 1
            no_message     = 2
            internal_error = 3
            no_payload     = 4
            OTHERS         = 5.
        IF sy-subrc <> 0.
          MESSAGE 'Error recuperando payload' TYPE 'I'.
          RETURN.
        ENDIF.

        TRY.
            CALL FUNCTION 'ECATT_CONV_XSTRING_TO_STRING'
              EXPORTING
                im_xstring = pay_bytes
*               IM_ENCODING = 'UTF-8'
              IMPORTING
                ex_string  = payload.
            cl_demo_output=>display( payload ).
          CATCH cx_root INTO DATA(o_root).                  "#EC *
            MESSAGE o_root->get_text( ) TYPE 'I'.
        ENDTRY.

      WHEN 'COD_ETIQUETA'.
        SET PARAMETER ID 'LEN' FIELD l_list-cod_etiqueta.
        CALL TRANSACTION 'LS33' AND SKIP FIRST SCREEN.
      WHEN 'STOCK_SAP'.
        zcl_ap_ot=>visualizar_stock_material( lgnum = l_list-lgnum
                                              matnr = l_list-matnr ).
      WHEN 'MBLNR' OR 'AUFNR1' OR 'AUFNR2'.
        IF NOT l_list-mblnr IS INITIAL AND column = 'MBLNR'.
          zcl_ap_docmat=>visualizar( mblnr = l_list-mblnr ).
        ELSEIF NOT l_list-aufnr1 IS INITIAL AND column = 'AUFNR1'.
          zcl_ap_orden_pp=>visualizar( l_list-aufnr1 ).
        ELSEIF NOT l_list-aufnr2 IS INITIAL AND column = 'AUFNR2'.
          zcl_ap_orden_pp=>visualizar( l_list-aufnr2 ).
        ELSE.
          CASE l_list-bwart.
            WHEN '261'.
              CLEAR o_prog->o_log.
              MOVE-CORRESPONDING l_list TO zwm_intf_bhs.
              MOVE-CORRESPONDING l_list TO l_input.
              zcl_si_bhs_consum_bob_mat_prim=>consumo_contra_orden( EXPORTING input = l_input
                                              o_log = o_prog->o_log
                                              test = 'X'
                                              IMPORTING i_result = DATA(i_result)
                                    CHANGING  intf_bhs   = zwm_intf_bhs ).
              CALL FUNCTION 'DEQUEUE_ALL'.
              IF NOT zwm_intf_bhs-message IS INITIAL.
                cl_demo_output=>new( )->begin_section( '¡ERROR!' ).
                cl_demo_output=>write( zwm_intf_bhs-message ).
                cl_demo_output=>end_section( ).
              ENDIF.
              cl_demo_output=>new( )->begin_section( 'ZWM_INTF_BHS' ).
              cl_demo_output=>write( zwm_intf_bhs ).
              cl_demo_output=>end_section( ).

              cl_demo_output=>begin_section( 'Simulación' ).
              cl_demo_output=>write( i_result ).
              cl_demo_output=>end_section( ).

              cl_demo_output=>display( ).
          ENDCASE.
        ENDIF.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    DATA r_clave TYPE RANGE OF zlog-clave.

    check_ucomm_sel = 'LOG,CONSUMO,PROC'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'LOG'.
        DATA l_clave TYPE zlog-clave.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          DATA(l_claves) = <listado>-codigo_etiqueta && '|' && <listado>-trabajo_interno_bhs && '|' && <listado>-fecha_hora.
          REPLACE ALL OCCURRENCES OF '.' IN l_claves WITH ``.
          CONDENSE l_claves NO-GAPS.
          l_clave = l_claves.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = l_clave ) TO r_clave.

          IF NOT <listado>-msgguid IS INITIAL.
            l_clave = <listado>-msgguid && '-' && <listado>-linea.
            APPEND VALUE #( option = 'EQ' sign = 'I' low = l_clave ) TO r_clave.
          ENDIF.
        ENDLOOP.
        IF sy-subrc = 0.
          DATA r_fecha TYPE RANGE OF sy-datum.
          SUBMIT zlog
          AND RETURN
                 WITH s_proces = 'PROXY_BHS'
                 WITH s_clave IN r_clave
                 WITH s_fecha IN r_fecha.
          refresh( ).
        ENDIF.
      WHEN 'CONSUMO'.
        o_prog->consumir( ).

        o_alv->refresh( ).

      WHEN 'PROC'.
        CLEAR o_prog->cont.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X' AND ( NOT ( cod_consumo = '02' OR cod_consumo = '04' ) OR metros_desarrollados_p = 0 ).
          SELECT SINGLE procesado FROM ztwm0001
            INTO <listado>-procesado
          WHERE almacen = <listado>-almacen
            AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
            AND codigo_consumo = <listado>-codigo_consumo
            AND fecha_hora = <listado>-fecha_hora
            AND codigo_etiqueta = <listado>-codigo_etiqueta
            AND portabobinas = <listado>-portabobinas
            AND procesado = ''.
          IF sy-subrc = 0.
            UPDATE ztwm0001
              SET procesado = 'X'
                  fecha = sy-datum
                  hora  = sy-uzeit
             WHERE almacen = <listado>-almacen
               AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
               AND codigo_consumo = <listado>-codigo_consumo
               AND fecha_hora = <listado>-fecha_hora
               AND codigo_etiqueta = <listado>-codigo_etiqueta
               AND portabobinas = <listado>-portabobinas.
            <listado>-procesado = 'X'.
            zcl_ap_alv_grid=>append_color( EXPORTING campo = '' colorc = 'V' int = 0 CHANGING tabla_color = <listado>-color ).
            ADD 1 TO o_prog->cont.
          ENDIF.
        ENDLOOP.
        MESSAGE |Ha marcado { o_prog->cont } registros| TYPE 'S'.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).

    IF p_ejec = 'X'.
      consumir( ).
      IF p_nolis = 'X'.
        LEAVE PROGRAM.
      ENDIF.
    ENDIF.

    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA: l_icono         TYPE icon_d,
          l_color         TYPE string,
          l_int           TYPE int1,
          l_input         TYPE zdt_bhs_consum_bob_mat_prima_i,
          i_cons_prev     TYPE TABLE OF t_listado,
          l_ctd_cons_prev TYPE mseg-menge,
          i_result        TYPE zhcl_pp_core=>zcgty_t_cinumber_cons_result.


    IF p_nopro = 'X'.
* Buscamos posible registros no procesados de los ultimos 3 días en los que haya pasado más de una hora
      DATA: r_etiq  TYPE RANGE OF ztwm0001-codigo_etiqueta,
            l_hora  TYPE sy-uzeit,
            l_fecha TYPE sy-datum.

      l_hora = sy-uzeit - 3600.
      l_fecha = sy-datum - 3.
      SELECT DISTINCT codigo_etiqueta FROM ztwm0001
        INTO TABLE @DATA(i_eti)
       WHERE fecha IN @s_fecha
         AND hora  IN @s_hora
         AND codigo_consumo IN ('02', '04')
         AND bwart = '261'
         AND id = ''
         AND lgnum = ''
         AND procesado = ''
         AND metros_desarrollados NE '0'
         AND codigo_etiqueta IN @s_etiq
         AND cod_maquina_principal IN @s_maqui
         AND cod_maquina_principal NE '105' "Temporalmente desactivado
         AND no_procesar = ''
         and not message like 'Error calculando CINUMBER%'
         AND ( ( erdat > @l_fecha AND erdat < @sy-datum )
            OR ( erdat = @sy-datum AND erzet < @l_hora )
             ).
      IF sy-subrc NE 0.
        MESSAGE 'No hay ningún registro pendiente de proceso' TYPE 'I'.

        IF sy-batch = 'X'.
          DATA l_jobname TYPE tbtcm-jobname.
          CALL FUNCTION 'GET_JOB_RUNTIME_INFO'
            IMPORTING
              jobname = l_jobname.
          IF NOT l_jobname IS INITIAL.
            zcl_ap_jobs=>borrar_jobs( fecha = sy-datum jobname = l_jobname solo_finalizados = 'X' solo_sin_spool = 'X' ).
          ENDIF.
        ENDIF.

        LEAVE PROGRAM.
      ELSE.
        LOOP AT i_eti ASSIGNING FIELD-SYMBOL(<eti>).
          __add_lista string <eti>-codigo_etiqueta.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <eti>-codigo_etiqueta ) TO r_etiq.
        ENDLOOP.

        IF p_ejec = 'X'.
          zcl_ap_envio_mail=>mail( direccion = 'andres@sap4.com'
                                   subject = 'BHS Reproceso'
                                   texto  = string ).
        ENDIF.

      ENDIF.
    ENDIF.

    sgpi_texto( 'Seleccionando datos'(sda) ).
    SELECT zwm_intf_bhs_l~msgguid, zwm_intf_bhs_l~fecha AS fecha_proxy, zwm_intf_bhs_l~hora AS hora_proxy,
           ztwm0001~linea, ztwm0001~centro, ztwm0001~almacen, ztwm0001~fecha_hora, ztwm0001~codigo_consumo,
           ztwm0001~portabobinas, ztwm0001~codigo_etiqueta, ztwm0001~metros_restantes AS metros_restantes_p,
           ztwm0001~metros_desarrollados AS metros_desarrollados_p, ztwm0001~trabajo_interno_bhs, ztwm0001~calidad,
           ztwm0001~cod_maquina_principal, ztwm0001~cod_operario, ztwm0001~bwart,
           ztwm0001~id, ztwm0001~fecha, ztwm0001~hora, ztwm0001~lgnum, ztwm0001~procesado, ztwm0001~id_proceso,
           ztwm0001~message, ztwm0001~no_procesar
       FROM zwm_intf_bhs_l JOIN ztwm0001 ON zwm_intf_bhs_l~msgguid = ztwm0001~msgguid
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
     WHERE zwm_intf_bhs_l~fecha IN @s_fecha
       AND zwm_intf_bhs_l~hora  IN @s_hora
       AND codigo_etiqueta IN @s_etiq
       AND codigo_etiqueta IN @r_etiq
       AND procesado IN @s_proce
       AND trabajo_interno_bhs IN @s_tibhs
       AND codigo_consumo IN @s_codco
       AND cod_maquina_principal IN @s_maqui
      ORDER BY ztwm0001~fecha_hora ASCENDING, codigo_consumo ASCENDING, zwm_intf_bhs_l~fecha, zwm_intf_bhs_l~hora, zwm_intf_bhs_l~msgguid, ztwm0001~linea.

* Busco posibles entradas pendientes
    DATA: i_sel TYPE TABLE OF t_listado,
          l_sel TYPE t_listado.
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE ( codigo_consumo = '02' OR codigo_consumo = '04' ) AND procesado = ''.
      IF NOT line_exists( i_sel[ codigo_consumo = <listado>-codigo_consumo
                                 centro = <listado>-centro
                                 almacen = <listado>-almacen
                                 trabajo_interno_bhs = <listado>-trabajo_interno_bhs ] ).
        l_sel-codigo_etiqueta = <listado>-codigo_etiqueta.
        l_sel-centro = <listado>-centro.
        l_sel-almacen = <listado>-almacen.
        l_sel-trabajo_interno_bhs = <listado>-trabajo_interno_bhs.
        APPEND l_sel TO i_sel.
      ENDIF.
    ENDLOOP.
    IF NOT i_sel IS INITIAL.
      DATA i_list_aux TYPE TABLE OF t_listado.
      SELECT zwm_intf_bhs_l~msgguid, zwm_intf_bhs_l~fecha AS fecha_proxy, zwm_intf_bhs_l~hora AS hora_proxy,
             ztwm0001~linea, ztwm0001~centro, ztwm0001~almacen, ztwm0001~fecha_hora, ztwm0001~codigo_consumo,
             ztwm0001~portabobinas, ztwm0001~codigo_etiqueta, ztwm0001~metros_restantes AS metros_restantes_p,
             ztwm0001~metros_desarrollados AS metros_desarrollados_p, ztwm0001~trabajo_interno_bhs, ztwm0001~calidad,
             ztwm0001~cod_maquina_principal, ztwm0001~cod_operario, ztwm0001~bwart,
             ztwm0001~id, ztwm0001~fecha, ztwm0001~hora, ztwm0001~lgnum, ztwm0001~procesado, ztwm0001~id_proceso
         FROM zwm_intf_bhs_l JOIN ztwm0001 ON zwm_intf_bhs_l~msgguid = ztwm0001~msgguid
        INTO CORRESPONDING FIELDS OF TABLE @i_list_aux
      FOR ALL ENTRIES IN @i_sel
     WHERE centro  = @i_sel-centro
       AND almacen = @i_sel-almacen
       AND codigo_etiqueta = @i_sel-codigo_etiqueta
       AND trabajo_interno_bhs = @i_sel-trabajo_interno_bhs
       AND procesado = ''.
      LOOP AT i_list_aux ASSIGNING <listado>.
        IF NOT line_exists( i_listado[ msgguid = <listado>-msgguid
                                       linea   = <listado>-linea
                                       fecha_hora = <listado>-fecha_hora
                                       codigo_consumo = <listado>-codigo_consumo
                                       centro = <listado>-centro
                                       almacen = <listado>-almacen
                                       trabajo_interno_bhs = <listado>-trabajo_interno_bhs ] ).
          APPEND <listado> TO i_listado.
        ENDIF.
      ENDLOOP.
    ENDIF.
*
*    IF p_sim = 'X'.
*      LOOP AT i_listado INTO DATA(l_listado) WHERE sim = ''.
*        l_listado-sim = 'X'.
*        CLEAR: l_listado-id, l_listado-fecha, l_listado-hora, l_listado-lgnum.
*        APPEND l_listado TO i_listado.
*      ENDLOOP.
*      SORT i_listado BY fecha_proxy hora_proxy msgguid linea sim.
*    ENDIF.

    SORT i_listado BY fecha_hora ASCENDING codigo_consumo ASCENDING linea ASCENDING.
    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING <listado>.
      <listado>-tabix = sy-tabix.
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      <listado>-codigo_consumo_t = get( tabla = 'D ZWM_COD_CONSUMO' clave = <listado>-codigo_consumo ).

      __quitar_ceros: <listado>-metros_restantes_p,
                      <listado>-metros_desarrollados_p.

      CLEAR: l_color, l_int, l_icono.
      IF <listado>-id IS INITIAL.
        DATA(intf_bhs) = get_intf_bhs( <listado> ).
        MOVE-CORRESPONDING intf_bhs TO <listado>.
        IF <listado>-procesado = 'X'.
          MOVE-CORRESPONDING <listado> TO zwm_intf_bhs.
          IF NOT ( <listado>-codigo_consumo = '02' OR <listado>-codigo_consumo = '04' ).
            CLEAR <listado>-message.
          ELSE.
            IF <listado>-no_procesar IS INITIAL.
              MODIFY zwm_intf_bhs FROM zwm_intf_bhs.

              UPDATE ztwm0001
                SET procesado = 'X'
                    id = zwm_intf_bhs-id
                    fecha = zwm_intf_bhs-fecha
                    hora  = zwm_intf_bhs-hora
                    lgnum = zwm_intf_bhs-lgnum
                    no_procesar = 'X'
                    message = <listado>-message
               WHERE almacen = <listado>-almacen
                 AND centro = <listado>-centro
                 AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
                 AND codigo_consumo = <listado>-codigo_consumo
                 AND fecha_hora = <listado>-fecha_hora
                 AND codigo_etiqueta = <listado>-codigo_etiqueta
                 AND portabobinas = <listado>-portabobinas.
            ENDIF.
          ENDIF.
          l_icono = icon_dummy.
          IF <listado>-id_proceso IS INITIAL.
            l_color = 'G'.
          ELSE.
            l_color = 'V'.
          ENDIF.
        ELSE.
          IF <listado>-message IS INITIAL.
            l_icono = icon_yellow_light.
          ELSE.
            l_icono = icon_message_critical.
          ENDIF.
        ENDIF.
      ELSE.
        DATA(l_existe_zwm_intf_bhs) = ''.
        DATA(l_msgguid) = <listado>-msgguid.
        SELECT SINGLE * FROM zwm_intf_bhs
          INTO CORRESPONDING FIELDS OF <listado>
         WHERE id       = <listado>-id
           AND fecha    = <listado>-fecha
           AND hora     = <listado>-hora
           AND pos_fich = <listado>-linea
           AND lgnum    = <listado>-almacen
           and cod_etiqueta = <listado>-cod_etiqueta. "APC20250326
        IF sy-subrc <> 0.
          l_icono = icon_warning.
          intf_bhs = get_intf_bhs( <listado> ).
          MOVE-CORRESPONDING intf_bhs TO <listado>.
        ELSE.
          l_existe_zwm_intf_bhs = 'X'.
          IF <listado>-msgguid IS INITIAL.
            <listado>-msgguid = l_msgguid.
          ENDIF.
          IF NOT <listado>-mblnr IS INITIAL.
            l_icono = icon_green_light.
            l_color = 'V'.
            l_int = 1.
            SELECT aufnr, menge FROM mseg
              INTO TABLE @DATA(i_mseg)
             WHERE mblnr = @<listado>-mblnr
               AND mjahr = @<listado>-mjahr
               AND aufnr NE ''.
            DATA n(1) TYPE n.
            LOOP AT i_mseg ASSIGNING FIELD-SYMBOL(<mseg>).
              n = sy-tabix.
              ASSIGN COMPONENT 'AUFNR' && n OF STRUCTURE <listado> TO FIELD-SYMBOL(<fs>).
              IF sy-subrc = 0.
                <fs> = <mseg>-aufnr.
                ASSIGN COMPONENT 'MENGE' && n OF STRUCTURE <listado> TO <fs>.
                <fs> = <mseg>-menge.
              ENDIF.
            ENDLOOP.

          ELSEIF <listado>-procesado IS INITIAL.
            l_icono = icon_red_light.
            l_color = 'R'.
          ELSE.
            l_icono = icon_led_green.
            l_color = 'V'.
          ENDIF.
        ENDIF.
      ENDIF.


      IF <listado>-codigo_consumo = '02'.
        <listado>-md_02 = <listado>-metros_desarrollados.
      ENDIF.

      IF <listado>-codigo_consumo = '02' OR <listado>-codigo_consumo = '04'.
        IF <listado>-bwart = '261'.
          MOVE-CORRESPONDING <listado> TO zwm_intf_bhs.
          MOVE-CORRESPONDING <listado> TO l_input.
          IF <listado>-procesado = 'X'.
            IF l_existe_zwm_intf_bhs IS INITIAL. "APC20241115 Si el registro no estaba guardado en tabla, me aseguro de que esté ahora para poder reprocesarlo si es necesario
              MODIFY zwm_intf_bhs FROM zwm_intf_bhs.

*              IF l_existe_zwm_intf_bhs IS INITIAL.
*                zcl_ap_log=>set_log( proceso = 'PROXY_BHS' clave = <listado>-msgguid && '-' && <listado>-pos_fich message = 'Guardamos entrada en tabla como procesada directamente' msgty = 'S' ).
*              ENDIF.

              DATA(l_reintentos) = 0.
              TRY.
                  UPDATE ztwm0001
                    SET id = zwm_intf_bhs-id
                        fecha = zwm_intf_bhs-fecha
                        hora  = zwm_intf_bhs-hora
                        lgnum = zwm_intf_bhs-lgnum
                        procesado = 'X'
                   WHERE almacen = <listado>-almacen
                     AND centro = <listado>-centro
                     AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
                     AND codigo_consumo = <listado>-codigo_consumo
                     AND fecha_hora = <listado>-fecha_hora
                     AND codigo_etiqueta = <listado>-codigo_etiqueta
                     AND portabobinas = <listado>-portabobinas.

                  UPDATE ztwm0001
                    SET procesado = 'X'
                        id_proceso = zwm_intf_bhs-id
                   WHERE almacen = <listado>-almacen
                     AND centro = <listado>-centro
                     AND NOT codigo_consumo IN ('02', '04')
                     AND codigo_etiqueta = <listado>-codigo_etiqueta
                     AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
                     AND procesado = ''
                     AND fecha_hora <= <listado>-fecha_hora.

                CATCH cx_root INTO DATA(o_root).
                  IF l_reintentos < 3.
                    ADD 1 TO l_reintentos.
                    RETRY.
                  ENDIF.
              ENDTRY.
            ENDIF.
          ELSE.
            IF <listado>-codigo_consumo = '02' OR <listado>-codigo_consumo = '04'.
              <listado>-check = 'X'.
            ENDIF.

            CLEAR l_ctd_cons_prev.
            READ TABLE i_cons_prev ASSIGNING FIELD-SYMBOL(<cons_prev>) WITH KEY codigo_etiqueta = <listado>-codigo_etiqueta.
            IF sy-subrc = 0.
              l_ctd_cons_prev = <cons_prev>-cant_consumo_kg.
            ENDIF.
            CLEAR i_result.

            DATA(test) = 'X'.

*Si llega una linea sin trabajo interno, queremos procesarla automáticamente para que el usuario vea los errores desde ZWM_CONSUMO
            IF <listado>-trabajo_interno_bhs IS INITIAL AND <listado>-id IS INITIAL.
              CLEAR test.
            ENDIF.


            DATA(l_bhs_ant) = zwm_intf_bhs.

            TRY.
                zcl_si_bhs_consum_bob_mat_prim=>consumo_contra_orden( EXPORTING input = l_input
                                                                                o_log = o_log
                                                                                test = test
                                                                                i_test_consumos_previos = l_ctd_cons_prev
                                                                      IMPORTING i_result = i_result
                                                                      CHANGING  intf_bhs   = zwm_intf_bhs ).
              CATCH cx_root INTO o_root.
                zwm_intf_bhs-message = o_root->get_text( ).
            ENDTRY.
            CALL FUNCTION 'DEQUEUE_ALL'.
            IF test IS INITIAL
              OR l_existe_zwm_intf_bhs IS INITIAL. "APC20241115 Si el registro no estaba guardado en tabla, me aseguro de que esté ahora para poder reprocesarlo si es necesario

              IF zwm_intf_bhs-message = 'Consumo lanzado en modo test'.
                CLEAR zwm_intf_bhs-message.
              ENDIF.

*              IF l_existe_zwm_intf_bhs IS INITIAL.
*                zcl_ap_log=>set_log( proceso = 'PROXY_BHS' clave = <listado>-msgguid && '-' && <listado>-pos_fich message = 'Guardamos entrada en tabla para posterior proceso' msgty = 'S' ).
*              ENDIF.

              l_reintentos = 0.
              TRY.
                  MODIFY zwm_intf_bhs FROM zwm_intf_bhs.
                  UPDATE ztwm0001
                    SET id = zwm_intf_bhs-id
                        fecha = zwm_intf_bhs-fecha
                        hora  = zwm_intf_bhs-hora
                        lgnum = zwm_intf_bhs-lgnum
                   WHERE almacen = <listado>-almacen
                     AND centro = <listado>-centro
                     AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
                     AND codigo_consumo = <listado>-codigo_consumo
                     AND fecha_hora = <listado>-fecha_hora
                     AND codigo_etiqueta = <listado>-codigo_etiqueta
                     AND portabobinas = <listado>-portabobinas.
                CATCH cx_root INTO o_root.
                  IF l_reintentos < 3.
                    ADD 1 TO l_reintentos.
                    RETRY.
                  ENDIF.
              ENDTRY.
            ELSE.
              IF zwm_intf_bhs-message = 'Consumo lanzado en modo test'.
                zwm_intf_bhs-message = l_bhs_ant-message.
              ELSEIF zwm_intf_bhs-message NE l_bhs_ant-message
                  OR zwm_intf_bhs-aufnr1 NE l_bhs_ant-aufnr1.
                IF NOT zwm_intf_bhs-id IS INITIAL.
                  UPDATE zwm_intf_bhs
                     SET aufnr1 = zwm_intf_bhs-aufnr1
                         aufnr2 = zwm_intf_bhs-aufnr2
                         message = zwm_intf_bhs-message
                         WHERE  id        = zwm_intf_bhs-id
                         AND    fecha     = zwm_intf_bhs-fecha
                         AND    hora      = zwm_intf_bhs-hora
                         AND    pos_fich  = zwm_intf_bhs-pos_fich
                         AND    lgnum     = zwm_intf_bhs-lgnum
                         AND    cod_etiqueta    = zwm_intf_bhs-cod_etiqueta.
                ENDIF.
                UPDATE ztwm0001
                  SET message = zwm_intf_bhs-message
                 WHERE almacen = <listado>-almacen
                   AND centro = <listado>-centro
                   AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
                   AND codigo_consumo = <listado>-codigo_consumo
                   AND fecha_hora = <listado>-fecha_hora
                   AND codigo_etiqueta = <listado>-codigo_etiqueta
                   AND portabobinas = <listado>-portabobinas.
              ENDIF.
            ENDIF.

            MOVE-CORRESPONDING zwm_intf_bhs TO <listado>.
            IF <listado>-message IS INITIAL.
              l_icono = icon_yellow_light.
            ELSE.
              l_icono = icon_message_critical.
            ENDIF.

            READ TABLE i_cons_prev ASSIGNING <cons_prev> WITH KEY codigo_etiqueta = <listado>-codigo_etiqueta.
            IF sy-subrc = 0.
              ADD zwm_intf_bhs-cant_consumo_kg TO <cons_prev>-cant_consumo_kg.
            ELSE.
              APPEND VALUE #( codigo_etiqueta = <listado>-codigo_etiqueta
                              cant_consumo_kg = <listado>-cant_consumo_kg ) TO i_cons_prev.
            ENDIF.

            LOOP AT i_result ASSIGNING FIELD-SYMBOL(<res>) WHERE NOT aufnr IS INITIAL.
              n = sy-tabix.
              ASSIGN COMPONENT 'AUFNR' && n OF STRUCTURE <listado> TO <fs>.
              IF sy-subrc = 0.
                <fs> = <res>-aufnr.
                ASSIGN COMPONENT 'MENGE' && n OF STRUCTURE <listado> TO <fs>.
                <fs> = <res>-menge.
              ENDIF.
            ENDLOOP.

            IF <listado>-metros_des_inicio_ci IS INITIAL.
              IF <listado>-cod_maquina_principal NE '105' AND
                 <listado>-cod_maquina_principal NE '2000_105'.
                SELECT metros_desarrollados FROM ztwm0001
                  INTO @DATA(mdci)
                  UP TO 1 ROWS
                 WHERE codigo_consumo IN ('01', '03')
                   AND codigo_etiqueta = @<listado>-codigo_etiqueta
                   AND trabajo_interno_bhs = @<listado>-trabajo_interno_bhs
*               AND procesado = ''
                   AND fecha_hora <= @<listado>-fecha_hora
                 ORDER BY fecha_hora DESCENDING.
                ENDSELECT.
                IF sy-subrc NE 0.
                  <listado>-error = 'X'.
                  l_icono = icon_message_critical.
                  CLEAR <listado>-check.
                  __add_lista <listado>-message 'No hay registro previo de inicio'.


                  MODIFY zwm_intf_bhs FROM zwm_intf_bhs.

                  UPDATE ztwm0001
                    SET id = zwm_intf_bhs-id
                        fecha = zwm_intf_bhs-fecha
                        hora  = zwm_intf_bhs-hora
                        lgnum = zwm_intf_bhs-lgnum
                   WHERE almacen = <listado>-almacen
                     AND centro = <listado>-centro
                     AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
                     AND codigo_consumo = <listado>-codigo_consumo
                     AND fecha_hora = <listado>-fecha_hora
                     AND codigo_etiqueta = <listado>-codigo_etiqueta
                     AND portabobinas = <listado>-portabobinas.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      <listado>-tolerancia_kg = o_cache->get_mat( matnr = <listado>-matnr unidad_destino = 'KG' unidad_origen = <listado>-meins_tol cantidad = <listado>-tolerancia ).

      IF l_color IS INITIAL.
        IF <listado>-cod_consumo = '02' OR <listado>-cod_consumo = '04'.
          l_color = 'AZUL'.
          IF <listado>-cod_consumo = '02'.
            l_int = 1.
          ENDIF.
        ELSE.
          l_color = 'NARANJA'.
        ENDIF.
      ENDIF.
      set_status_list( EXPORTING message = <listado>-message icono = l_icono color = l_color CHANGING list = <listado> ).
      IF NOT l_color IS INITIAL.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = '' colorc = l_color int = l_int CHANGING tabla_color = <listado>-color ).
      ENDIF.
      IF <listado>-cant_dif_kg NE 0.
        IF <listado>-cant_consumo_kg = 0.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'STOCK_SAP_KG,CANT_DIF_KG,CANT_CONSUMO_KG' colorc = 'R' CHANGING tabla_color = <listado>-color ).
        ELSE.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'STOCK_SAP_KG,CANT_DIF_KG,CANT_CONSUMO_KG' colorc = 'N' int = 1 CHANGING tabla_color = <listado>-color ).
        ENDIF.
        IF <listado>-message CS 'No hay registro previo de inicio'.
          zcl_ap_alv_grid=>append_color( EXPORTING campo = 'METROS_DES_INICIO_CI' colorc = 'R' int = 1 CHANGING tabla_color = <listado>-color ).
        ENDIF.
      ENDIF.

      IF ( <listado>-cod_consumo = '02' OR <listado>-cod_consumo = '04' ) AND <listado>-procesado = 'X' AND <listado>-consumo_notificar = 0.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'CONSUMO_NOTIFICAR' colorc = 'R' int = 1 CHANGING tabla_color = <listado>-color ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Consumo'  icon = icon_execute_object ucomm = 'CONSUMO' ).
    o_alv->add_button( button = 'F02' text = 'Log'  icon = icon_sym_log_server ucomm = 'LOG' ).
    o_alv->add_button( button = 'F03' text = 'Marcar como procesado'  icon = icon_checked ucomm = 'PROC' ).


    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field_text( 'CENTRO,ALMACEN,FECHA_HORA,CODIGO_CONSUMO,PORTABOBINAS,CODIGO_ETIQUETA,METROS_RESTANTES_P' ).
    o_alv->set_field_text( 'METROS_DESARROLLADOS_P,TRABAJO_INTERNO_BHS,CALIDAD,COD_OPERARIO,MD_02,ORDEN' ).
    o_alv->set_field_text( campo = 'CODIGO_CONSUMO_T' valor = 'Descripción evento' ).
    o_alv->set_field_text( campo = 'STOCK_SAP' valor = 'Stock WM' ).
    o_alv->set_field_text( campo = 'STOCK_SAP_KG' valor = 'Stck MM KG' ).
    o_alv->set_field_text( campo = 'CANT_DIF_KG' valor = 'Ctd.Dif.KG' ).
    o_alv->set_field_text( campo = 'CANT_CONSUMO_KG' valor = 'Ctd.Consumo KG' ).
    o_alv->set_field_text( campo = 'MATNR_PROD' valor = 'Mat.Prod' valor2 = 'Material producido' ).
    o_alv->set_field_text( campo = 'TOLERANCIA_KG' valor = 'Tol.KG' valor2 = 'Tolerancia en KG' ).
    o_alv->set_field_noout( 'METROS_RESTANTES_P,METROS_DESARROLLADOS_P,CODIGO_ETIQUETA,COD_MAQUINA_PRINCIPAL,COD_OPERARIO,TRABAJO_INTERNO_BHS,ORDEN,MSGGUID' ).
    o_alv->set_field_noout( 'RSNUM,RSPOS,RSART,DIAMETRO_REST,UA_PRODUCIDA,MATNR_PROD,COD_PARTE_REBOB,ID_PROCESO,TOLERANCIA,MEINS_TOL' ).
    o_alv->set_field_hotspot( campo = 'MSGGUID,MBLNR,TANUM,TBNUM,MATNR,AUFNR1,AUFNR2' auto = 'X' ).
    o_alv->set_field_hotspot( campo = 'COD_ETIQUETA' auto = 'X' ).

*Estos campos no se usan en el cálculo nuevo
    o_alv->set_field_noout( 'STOCK_SAP,CANT_DIF,CANT_CONSUMO,MEINH' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,PROC_TMP,ERROR,POS_FICH,ID_TMP' ).

    o_alv->set_field( campo = 'STOCK_SAP,CANT_DIF,CANT_CONSUMO,STOCK_SAP_KG,CANT_DIF_KG,CANT_CONSUMO_KG,MENGE1,MENGE2,MENGE3,TOLERANCIA' op = 'NO_CERO' ).

    o_alv->set_orden( campo = 'COD_ETIQUETA' subtot = 'X' ).
    o_alv->set_agregacion( 'MD_02,CONSUMO_NOTIFICAR' ).
    o_alv->set_orden( 'FECHA_HORA,ORDEN' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD get_intf_bhs.
    DATA ls_ltbk TYPE ltbk.
    DATA ls_lqua TYPE lqua.
    DATA: l_gramaje TYPE i,
          l_ancho   TYPE i.

    CLEAR intf.
    DATA(vl_cinumber) = CONV lvs_benum( list-trabajo_interno_bhs(9) ).
    DATA(vl_cinumber_int) = zhcl_pp_core=>s_conv_cinumber_2_internal( i_mjahr = CONV #( list-fecha_hora(4) )
                                                                      i_cinumber = vl_cinumber ).
    intf-id = vl_cinumber_int.

    CONCATENATE list-fecha_hora+0(4) list-fecha_hora+5(2) list-fecha_hora+8(2) INTO intf-fecha.
    CONCATENATE list-fecha_hora+11(2) list-fecha_hora+14(2) list-fecha_hora+17(2) INTO intf-hora.
    intf-pos_fich      = list-linea.
    intf-msgguid       = list-msgguid.
    intf-lgnum         = list-almacen.
    intf-werks         = list-centro.
    intf-cod_consumo   = list-codigo_consumo.
    intf-porta_bobinas = list-portabobinas.
    IF strlen( intf-porta_bobinas ) = 1.
      __poner_ceros intf-porta_bobinas(2).
    ENDIF.
    CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
      EXPORTING
        input           = list-codigo_etiqueta
      IMPORTING
        output          = intf-cod_etiqueta
      EXCEPTIONS
        check_failed    = 1
        not_numeric     = 2
        t344_get_failed = 3
        wrong_length    = 4
        OTHERS          = 5.
    IF sy-subrc <> 0.
      intf-message = 'Error convirtiendo etiqueta'.
    ENDIF.
    intf-metros_restantes      = list-metros_restantes_p.
    intf-metros_desarrollados  = list-metros_desarrollados_p.
    intf-orden_bhs             = list-trabajo_interno_bhs.
    intf-calidad               = list-calidad.
    intf-cod_maquina_principal = list-cod_maquina_principal.
    intf-cod_operario          = list-cod_operario.
    intf-bwart                 = list-bwart.
    intf-procesado             = list-procesado.

    TRY.
        DATA(l_almacen_im_consumo) = zcl_ap_parametros=>get_atributo1( clave = 'BHS' campo = 'ALMACEN_IM_CONSUMO' ).
        DATA(o_wm) = NEW zhcl_wm_core( i_werks = intf-werks
                                       i_lgort = CONV #( l_almacen_im_consumo ) ).
      CATCH cx_root INTO DATA(o_root).
        intf-message   = o_root->get_text( ).
    ENDTRY.

    IF intf-lgnum = '200'.
      IF list-cod_maquina_principal = '105' OR list-cod_maquina_principal = '104'.
        IF NOT o_wm IS INITIAL.
          TRY.
              DATA(lv_ablad) = o_wm->build_pp_wm_asp_ablad( i_arbpl        = CONV #( |{ intf-werks }_{ intf-cod_maquina_principal  }| )
                                                            i_portabobinas = CONV #( list-porta_bobinas ) ).
              IF lv_ablad IS INITIAL.
                intf-message   = 'No se ha definido un puesto de descarga en el ASP'.
              ELSE.
                DATA(lt_asps) = o_wm->get_pp_wm_asp( i_r_t_ablad = VALUE #( ( sign = 'I' option = 'EQ' low = CONV #( lv_ablad ) ) ) ) .
                READ TABLE lt_asps ASSIGNING FIELD-SYMBOL(<asp>) INDEX 1.
                IF sy-subrc = 0.
                  intf-porta_bobinas = <asp>-prvbe.
                ENDIF.
              ENDIF.
            CATCH cx_root INTO o_root.
              intf-message   = o_root->get_text( ).
          ENDTRY.
        ENDIF.
      ELSE.
        intf-porta_bobinas = |BHS{ intf-porta_bobinas+1 }|.
      ENDIF.

      SELECT tbnum, rsnum, benum
        FROM ltbk
        WHERE lgnum  = @intf-lgnum
          AND betyp  = 'O'
          AND bwlvs  = '919'
          AND benum  = @vl_cinumber_int
          AND nlpla  = @intf-porta_bobinas
          AND statu <> 'E'
        ORDER BY PRIMARY KEY
        INTO CORRESPONDING FIELDS OF @ls_ltbk
        UP TO 1 ROWS.
      ENDSELECT. " tratada finalmente
      IF sy-subrc = 0.
        intf-tbnum = ls_ltbk-tbnum.

        DATA(ls_resb) = zcl_wm_nt_generic=>get_resb_for_nt( is_ltbk = ls_ltbk
                                                            iv_only_open = abap_false ).

        IF ls_resb IS NOT INITIAL.
          intf-rsnum = ls_resb-rsnum.
          intf-rspos = ls_resb-rspos.
          intf-rsart = ls_resb-rsart.
        ENDIF.
      ENDIF.
    ENDIF.

    SELECT param1 FROM ztwm001
      INTO TABLE @DATA(gat_hard)
      WHERE cprog  = @zcl_si_bhs_consum_bob_mat_prim=>ga_bhs_bobina
        AND param2 = @zcl_si_bhs_consum_bob_mat_prim=>ga_param1
        AND param3 = @list-almacen.

    " cvivo - 61834 - Para HPX si no tiene metros desarrollados es un fallo de BHS
    IF line_exists( gat_hard[ param1 = 'STOP SIN DESARROLLA.' ] ) AND intf-metros_desarrollados IS INITIAL.
      intf-message   = 'No se contabiliza por no tener metros desarrollados'.
      intf-procesado = abap_true.
    ENDIF.

* ini - cvivo - 08.01.2019 Marcar empalmes como procesados
    IF intf-cod_etiqueta CS 'BHSBHS' AND intf-metros_restantes <= 0 AND intf-metros_desarrollados <= 800.
      intf-message   = 'No se contabiliza por ser un empalme en BHS'.
      intf-procesado = abap_true.
    ENDIF.
* fin - cvivo - 08.01.2019 Marcar empalmes como procesados

    IF intf-cod_etiqueta IS NOT INITIAL.
*      IF p_copy IS INITIAL.
      SELECT lenum, matnr, charg, werks, lgort, verme
      FROM lqua
      WHERE lgnum = @intf-lgnum
      AND lenum = @intf-cod_etiqueta
      AND verme > 0
      ORDER BY PRIMARY KEY
      INTO CORRESPONDING FIELDS OF @ls_lqua
      UP TO 1 ROWS.
      ENDSELECT.

      IF NOT ls_lqua-lenum IS INITIAL.
        intf-matnr = ls_lqua-matnr.
        intf-charg = ls_lqua-charg.

        SELECT matnr, meinh FROM marm
          INTO TABLE @DATA(lt_marm)
        WHERE matnr  = @ls_lqua-matnr
          AND meinh IN ( 'M', 'ST' ).

        READ TABLE lt_marm INTO DATA(ls_marm) WITH KEY meinh = 'M'.
        IF sy-subrc = 0.
          intf-meinh = ls_marm-meinh.
        ELSE.
          CLEAR ls_marm.
          READ TABLE lt_marm INTO ls_marm WITH KEY meinh = 'ST'.
          IF sy-subrc = 0.
            intf-meinh = ls_marm-meinh.
          ELSE.
            intf-message = 'Error en UMA para el material, no tiene M o UN'.
          ENDIF.
        ENDIF.

        IF intf-meinh <> ls_lqua-meins.
          intf-stock_sap = o_cache->get_mat( matnr = ls_lqua-matnr
                                             cantidad = ls_lqua-verme
                                             unidad_origen = ls_lqua-meins
                                             unidad_destino = intf-meinh ).
        ELSE.
          intf-stock_sap = ls_lqua-verme. " stock WM en UMA
        ENDIF.

        IF intf-meinh IS NOT INITIAL.
          SELECT SINGLE *
            INTO @DATA(ls_tolerancia)
            FROM zwm_tolerancia
            WHERE werks = @ls_lqua-werks
              AND lgort = @ls_lqua-lgort
              AND meins = @intf-meinh.
          IF ls_tolerancia-dinamico IS INITIAL.
            intf-tolerancia = ls_tolerancia-tolerancia.
            intf-meins_tol  = intf-meinh.
          ELSE.
            l_gramaje = intf-matnr+10(4).
            l_ancho = intf-matnr+14(4).
            intf-tolerancia = ( ls_tolerancia-minutos * ls_tolerancia-velocidad * l_gramaje * l_ancho ) / 1000000.
            intf-tolerancia = trunc( intf-tolerancia ).
            intf-meins_tol  = 'KG'.
          ENDIF.
        ENDIF.
      ENDIF.

      IF intf-bwart NE '261'.
        SELECT SINGLE clabs
        INTO @intf-stock_sap_kg
        FROM mchb
        WHERE matnr = @ls_lqua-matnr
        AND charg   = @ls_lqua-charg
        AND lgort   = @ls_lqua-lgort
        AND werks   = @ls_lqua-werks
        AND clabs   > 0.

        DATA(l_umb) = get( tabla = 'UMB' clave = ls_lqua-matnr ).
        IF l_umb NE 'KG'.
          intf-stock_sap_kg = o_cache->get_mat( matnr = ls_lqua-matnr
                                             cantidad = intf-stock_sap_kg
                                             unidad_origen = l_umb
                                             unidad_destino = 'KG' ).
        ENDIF.


      ENDIF.
    ENDIF.

    IF list-bwart NE '261'.
      intf-cant_dif = intf-stock_sap - intf-metros_restantes. " diferencia en UMA

      DATA(l_restantes_kg) = o_cache->get_mat( matnr = ls_lqua-matnr
                                          cantidad = intf-metros_restantes
                                            unidad_origen = intf-meinh
                                            unidad_destino = 'KG' ).

      intf-cant_dif_kg = intf-stock_sap_kg - trunc( l_restantes_kg ). " diferencia en UMA

*        Se ejecuta lo que había antes de la modificación para Bernabeu
      IF abs( intf-metros_restantes ) <= intf-tolerancia AND ls_tolerancia-dinamico IS INITIAL. " consumo total no dinámico
        intf-cant_consumo    = intf-stock_sap.
        intf-cant_consumo_kg = intf-stock_sap_kg.
      ELSEIF abs( l_restantes_kg ) <= intf-tolerancia AND ls_tolerancia-dinamico IS NOT INITIAL.  " consumo total dinámico
        intf-cant_consumo    = intf-stock_sap.
        intf-cant_consumo_kg = intf-stock_sap_kg.
      ELSE. " consumo parcial
        intf-cant_consumo    = intf-cant_dif.
        intf-cant_consumo_kg = intf-cant_dif_kg.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD consumir.
    DATA: l_list  TYPE o_prog->t_listado,
          l_input TYPE zdt_bhs_consum_bob_mat_prima_i.

    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
      CLEAR <listado>-proc_tmp.
      IF <listado>-procesado = 'X'.
        MESSAGE 'No seleccion registros procesados' TYPE 'I'.
        RETURN.
      ELSEIF <listado>-codigo_consumo NE '02' AND <listado>-codigo_consumo NE '04'.
        MESSAGE 'Sólo puede procesar códigos 02 y 04' TYPE 'I'.
        RETURN.
      ELSEIF <listado>-error = 'X'.
        MESSAGE 'No seleccione registros con errores' TYPE 'I'.
        RETURN.
      ENDIF.
    ENDLOOP.

    LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
      LOOP AT o_prog->i_listado TRANSPORTING NO FIELDS WHERE ( codigo_consumo = '02' OR codigo_consumo = '04' )
         AND codigo_etiqueta = <listado>-codigo_etiqueta
         AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
         AND procesado = ''
         AND fecha_hora < <listado>-fecha_hora
         AND proc_tmp = ''
         AND cant_consumo_kg > 0
         AND no_procesar = ''
         AND tabix <> <listado>-tabix.
        MESSAGE 'Debe consumir los registros en orden' TYPE 'I'.
        RETURN.
      ENDLOOP.
      IF sy-subrc NE 0.
        <listado>-proc_tmp = 'X'.
      ENDIF.
    ENDLOOP.

    LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X' AND bwart = '261'.
* Verificamos posibles bloqueos
      zcl_ap_utils=>bloquear_programa( cprog = CONV #( <listado>-codigo_etiqueta ) ).

      SELECT SINGLE procesado id AS id_tmp FROM ztwm0001
        INTO CORRESPONDING FIELDS OF <listado>
       WHERE almacen = <listado>-almacen
         AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
         AND codigo_consumo = <listado>-codigo_consumo
         AND fecha_hora = <listado>-fecha_hora
         AND codigo_etiqueta = <listado>-codigo_etiqueta
         AND portabobinas = <listado>-portabobinas.
      IF sy-subrc = 0.
        IF NOT <listado>-id IS INITIAL.
          SELECT SINGLE procesado FROM  zwm_intf_bhs
            INTO CORRESPONDING FIELDS OF <listado>
                 WHERE  id        = <listado>-id
                 AND    fecha     = <listado>-fecha
                 AND    hora      = <listado>-hora
                 AND    pos_fich  = <listado>-pos_fich
                 AND    lgnum     = <listado>-lgnum
                 and    COD_ETIQUETA = <listado>-cod_etiqueta.
          IF sy-subrc NE 0.
            CLEAR <listado>-procesado.
          ENDIF.
        ENDIF.
        IF <listado>-procesado = 'X'.
          <listado>-message = 'Procesado en otra ejecucion'.
          <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = <listado>-message ).
          CONTINUE.
        ENDIF.
      ENDIF.

      CLEAR o_log.
      MOVE-CORRESPONDING <listado> TO zwm_intf_bhs.
      zwm_intf_bhs-pos_fich = <listado>-linea.
      MOVE-CORRESPONDING <listado> TO l_input.

      zcl_si_bhs_consum_bob_mat_prim=>consumo_contra_orden( EXPORTING input = l_input
                                      o_log = o_prog->o_log
                            CHANGING  intf_bhs   = zwm_intf_bhs ).

      zcl_ap_utils=>desbloquear_programa( cprog = CONV #( <listado>-codigo_etiqueta ) ).

      IF NOT zwm_intf_bhs-id IS INITIAL.
        DATA(l_reintentos) = 0.
        TRY.
            MODIFY zwm_intf_bhs FROM zwm_intf_bhs.

            IF <listado>-id_tmp IS INITIAL.
              UPDATE ztwm0001
                SET id = zwm_intf_bhs-id
                    fecha = zwm_intf_bhs-fecha
                    hora  = zwm_intf_bhs-hora
                    lgnum = zwm_intf_bhs-lgnum
                    procesado = 'X'
               WHERE almacen = <listado>-almacen
                 AND centro = <listado>-centro
                 AND trabajo_interno_bhs = <listado>-trabajo_interno_bhs
                 AND codigo_consumo = <listado>-codigo_consumo
                 AND fecha_hora = <listado>-fecha_hora
                 AND codigo_etiqueta = <listado>-codigo_etiqueta
                 AND portabobinas = <listado>-portabobinas.
            ENDIF.
          CATCH cx_root INTO DATA(o_root).
            IF l_reintentos < 3.
              ADD 1 TO l_reintentos.
              RETRY.
            ENDIF.
        ENDTRY.
      ENDIF.

      CALL FUNCTION 'DEQUEUE_ALL'.
      WAIT UP TO 1 SECONDS.

* Enviamos mail si no se ha procesado correctamente.
      IF zwm_intf_bhs-procesado IS INITIAL AND p_ejec = 'X'.
        IF zwm_intf_bhs-message = 'La cantidad indicada es igual o inferior a cero al transformar a KG'
        OR zwm_intf_bhs-message = 'No se contabiliza por no tener metros desarrollados'.
* Para estos mensajes no enviamos mail
        ELSE.
          NEW zcl_si_bhs_consum_bob_mat_prim( )->envio_mail_no_procesado( p_datos = zwm_intf_bhs ).
        ENDIF.
      ENDIF.

      MOVE-CORRESPONDING zwm_intf_bhs TO <listado>.
      IF <listado>-procesado = 'X'.
        <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = <listado>-message ).
      ELSE.
        <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = <listado>-message ).
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Parámetros' '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         color              = 'COLOR'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.
  o_prog->handle = ''.
  IF o_prog->o_alv IS INITIAL OR o_prog->handle <> o_prog->aux1.
    o_prog->aux1 = o_prog->handle.
    IF NOT o_prog->o_alv IS INITIAL.
      o_prog->o_alv->free( ).
      CLEAR o_prog->o_alv.
    ENDIF.
    o_prog->o_alv = NEW #( status           = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         handle             = o_prog->handle
                         o_dev              = o_prog ).
    p_vari = o_prog->o_alv->get_default_layout( ).
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      IF s_etiq[] IS INITIAL AND p_ejec = 'X' AND p_nopro IS INITIAL.
        MESSAGE 'En ejecución automática es obligatorio indicar códigos de etiquetas' TYPE 'E'.
      ENDIF.

      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

* Si el programa está en ejecución esperamos para evitar posibles bloqueos
  IF p_ejec = 'X' AND sy-tcode IS INITIAL.
    zcl_ap_utils=>bloquear_programa( cprog = sy-cprog ).
  ENDIF.

  o_prog->main( ).
