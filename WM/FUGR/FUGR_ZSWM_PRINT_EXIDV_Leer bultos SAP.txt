FUNCTION zswm_print_exidv.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(LENUM) TYPE  LENUM OPTIONAL
*"     VALUE(TT_LENUM) TYPE  ZSWM_PRINT_EXIDV_LENUM_TT OPTIONAL
*"     VALUE(MVTTYPE) TYPE  ZMVTTYPE DEFAULT 'E'
*"     VALUE(LGNUM_AUX) TYPE  LGNUM OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(OK) TYPE  FLAG
*"----------------------------------------------------------------------
  DATA: data_u             TYPE zswm_data_ui5_eeeoo_str,
        r_param            TYPE zswm_data_ui5_param_str,
        r_funcionalidades  TYPE zswm_data_ui5_func_str,
        error_print_exidv  TYPE flag,
        tt_log_print_exidv TYPE bapiret2_tt.

  DATA reg_ua   TYPE zswm_read_exidv_str.
  DATA rt_lenum TYPE zswm_print_exidv_lenum_scr.
  DATA o_print_bartender TYPE REF TO zcl_wm_bartender_print_manager.
  DATA: lo_exception TYPE REF TO zcx_exception.
  DATA fname TYPE rs38l_fnam VALUE 'ZSWM_PRINT_EXIDV'.

  PERFORM break USING fname.
* add jtm 31.10.2022
  IF lgnum_aux IS NOT INITIAL.
    data_u-lgnum = lgnum_aux.
  ELSE.
* fin de add jtm 31.10.2022
    CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
      EXPORTING
        uname      = uname
        statu      = 'X'
        no_gen_log = abap_true
        tcode      = tcode
      IMPORTING
        data_user  = data_u
*       ERROR      =
*       TT_LOG     =
      .
* add jtm 31.10.2022
  ENDIF.
* fin de add jtm 31.10.2022
  data_u-operario = operario.
  IF lenum IS NOT INITIAL.
    rt_lenum-lenum = lenum.
    APPEND rt_lenum TO tt_lenum.
  ENDIF.
  LOOP AT tt_lenum INTO rt_lenum.
    DATA(sw_tabix) = sy-tabix.
    rt_lenum-lenum = |{ rt_lenum-lenum ALPHA = IN }|.
    PERFORM read_lenum USING rt_lenum-lenum data_u-tcode data_u '' '' CHANGING reg_ua error_print_exidv tt_log_print_exidv.
    IF error_print_exidv EQ abap_true.
      EXIT.
    ELSE.
      MODIFY tt_lenum FROM rt_lenum INDEX sw_tabix.
    ENDIF.
  ENDLOOP.
  IF error_print_exidv NE abap_true.
    TRY.

        CREATE OBJECT o_print_bartender
          EXPORTING
            i_werks = reg_ua-werks
            i_lgort = reg_ua-lgort.
*      CATCH CX_SOCM_NOT_IMPLEMENTED.
      CATCH zcx_wm_exception INTO  lo_exception." TYPE REF TO zcx_wm_exception.
        MOVE abap_true TO error_print_exidv.
        PERFORM mensaje USING 'E' sy-msgid sy-msgno sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 CHANGING tt_log_print_exidv[].

    ENDTRY.
*    CATCH cx_sy_create_object_error INTO DATA(lrx_acmtst).
*      DATA(lv_error) = lrx_acmtst->get_text( ).
*      MOVE abap_true TO error.
*      PERFORM mensaje USING 'E' '00' '398' lv_error space space space CHANGING tt_log[].
*  ENDTRY.
    IF error_print_exidv NE abap_true.

*  E  Etiquetado/Reetiquetado
*  D  Devolución
*  R  Reprocesado
*  A  Altas
*  X  Externos


*--> INI FCARDONA HP 77836 - 21.06.2024  Cambios para ZUA en BARTENDER

****** Comento por cambio de lógica "TODO: Comentar en nueva orden
*
*      LOOP AT tt_lenum INTO rt_lenum.
*        CALL METHOD o_print_bartender->set_new_label_data_4_lenum
*          EXPORTING
*            i_mvttype        = mvttype
*            i_lenum          = rt_lenum-lenum
*          EXCEPTIONS
*            no_valid_iparams = 1
*            no_lqua_data     = 2
*            error_internal   = 3
*            no_valid_data    = 4
*            OTHERS           = 5.
*        CHECK sy-subrc <> 0.
*        MOVE abap_true TO error_print_exidv.
*        DATA lenum_aux(20).
*        lenum_aux = |{ rt_lenum-lenum ALPHA = OUT }|.
*    166  Error impresión bulto &. Parámetros no validos
*    167  Error impresión bulto &. No existe el bulto en númro de almacen &
*    168  Error impresión bulto &. Error interno
*    169  Error impresión bulto &. Datos no válidos
*    170  Error impresión bulto &.
*    171  Error impresión. Fichero no creado.
*    172  Error impresión. Al intentar generar fichero.
*        CASE sy-subrc.
*          WHEN 1.  PERFORM mensaje USING 'E' 'ZSWM_UI5' '166' lenum_aux space        space space tt_log_print_exidv[].
*          WHEN 2.  PERFORM mensaje USING 'E' 'ZSWM_UI5' '167' lenum_aux data_u-lgnum space space tt_log_print_exidv[].
*          WHEN 3.  PERFORM mensaje USING 'E' 'ZSWM_UI5' '168' lenum_aux space        space space tt_log_print_exidv[].
*          WHEN 4.  PERFORM mensaje USING 'E' 'ZSWM_UI5' '169' lenum_aux space        space space tt_log_print_exidv[].
*          WHEN OTHERS.
*            PERFORM mensaje USING 'E' 'ZSWM_UI5' '170' lenum_aux space space space tt_log_print_exidv[].
*        ENDCASE.
*        EXIT.
*       ENDLOOP.

      "Cambiamos por cambio de tipo de excepción
      LOOP AT tt_lenum INTO rt_lenum.

        TRY .
          o_print_bartender->set_new_label_data_4_lenum( i_mvttype = mvttype i_lenum = rt_lenum-lenum ).
        CATCH zcx_exception INTO lo_exception.
          MOVE abap_true TO error_print_exidv.
          DATA lenum_aux(20).
          lenum_aux = |{ rt_lenum-lenum ALPHA = OUT }|.
          PERFORM mensaje USING 'E' 'ZSWM_UI5' lo_exception->if_t100_message~t100key-msgno lenum_aux space space space tt_log_print_exidv[].
          EXIT.
        ENDTRY.

      ENDLOOP.

*--> FIN FCARDONA HP 77836 - 21.06.2024  Cambios para ZUA en BARTENDER

      IF error_print_exidv NE abap_true.
        CALL METHOD o_print_bartender->send_label_data_2_bartender_fl
          EXCEPTIONS
            file_no_created = 1
            OTHERS          = 2.
        IF sy-subrc <> 0.
          MOVE abap_true TO error_print_exidv.
          CASE sy-subrc.
            WHEN 1.   PERFORM mensaje USING 'E' 'ZSWM_UI5' '171' space space space space tt_log_print_exidv[].

            WHEN OTHERS.
              PERFORM mensaje USING 'E' 'ZSWM_UI5' '172' space space space space tt_log_print_exidv[].
          ENDCASE.
*    PERFORM mensaje USING 'E' sy-msgid sy-msgno sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 CHANGING tt_log[].
        ELSE.
          MOVE abap_true TO ok.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  CALL METHOD zcl_ui5_log=>save_log
    EXPORTING
      mf     = fname
*     uname  = SY-UNAME
*     statu  = 'X'
      tcode  = tcode
      lgnum  = data_u-lgnum
*     vbeln  =
*     tknum  =
*     cerrar_transporte   =
*     operario            =
*     fieldname           =
*     fval   =
*     reg_parametros      =
*     reg_funcionalidades =
*     tt_pedidos          =
*     tt_picking          =
      tt_log = tt_log_print_exidv
*     rt_acciones         =
*     tt_acciones         =
      error  = error_print_exidv
*     commit = 'X'
    .

* está dando problemas la ejecución de impresión de bartender 31.10.2022
* saco el log de impresión de los procesos


  MOVE abap_true TO ok.
  CHECK 1 EQ 2 or LGNUM_AUX is not INITIAL.
  IF tt_log_print_exidv[] IS NOT INITIAL.
     APPEND LINES OF tt_log_print_exidv TO tt_log.
  ENDIF.
  MOVE error_print_exidv TO error.


ENDFUNCTION.
