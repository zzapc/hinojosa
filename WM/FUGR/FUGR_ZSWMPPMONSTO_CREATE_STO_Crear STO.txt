FUNCTION zswmppmonsto_create_sto.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(BSART) TYPE  BSART DEFAULT 'ZPT1'
*"     REFERENCE(EKORG) TYPE  EKORG DEFAULT '1000'
*"     REFERENCE(EKGRP) TYPE  EKGRP DEFAULT '245'
*"     REFERENCE(UMWRK) TYPE  UMWRK DEFAULT '2003'
*"     REFERENCE(WAERS) TYPE  WAERS DEFAULT 'EUR'
*"     REFERENCE(PRICE_PO) TYPE  FLAG DEFAULT 'X'
*"     REFERENCE(TT_POSICIONES) TYPE  ZSWM_CREATE_STO_TT
*"  EXPORTING
*"     REFERENCE(EBELN) TYPE  EBELN
*"     REFERENCE(ERROR) TYPE  FLAG
*"     REFERENCE(LT_RETURN) TYPE  BAPIRET2_T
*"     REFERENCE(VBELN) TYPE  VBELN
*"----------------------------------------------------------------------

  DATA: lw_poheader    TYPE bapimepoheader,
        lw_poheaderx   TYPE bapimepoheaderx,
        lt_poitem      TYPE TABLE OF bapimepoitem,
        lw_poitem      TYPE bapimepoitem,
        lw_poitemx     TYPE bapimepoitemx,
        lt_poitemx     TYPE TABLE OF bapimepoitemx,

        lw_pocond      TYPE bapimepocond,
        lt_pocond      TYPE bapimepocond_tp,
        lt_poschedule  TYPE bapimeposchedule_tp,
        lt_poschedulex TYPE TABLE OF bapimeposchedulx,
        lw_poschedulex TYPE bapimeposchedulx,
        lw_poschedule  TYPE bapimeposchedule,
        lw_poaccount   TYPE bapimepoaccount,
        lt_poaccount   TYPE TABLE OF bapimepoaccount,
        lw_poaccountx	 TYPE	bapimepoaccountx,
        lt_poaccountx  TYPE TABLE OF bapimepoaccountx,
*        lt_return      TYPE bapiret2_t,
        l_pedido       TYPE bapimepoheader-po_number.

  CLEAR: lw_poheader,
  l_pedido,
         lw_poheaderx.
  CLEAR lt_poitem[].
  CLEAR lt_poschedule[].
  CLEAR lt_poschedulex[].
  CLEAR lt_poaccount[].
  CLEAR lt_poaccountx[].


  SELECT SINGLE bwkey INTO @DATA(bwkey) FROM t001w WHERE werks EQ @umwrk.
  SELECT SINGLE bukrs INTO @DATA(bukrs) FROM t001k WHERE bwkey EQ @bwkey.

  lw_poheader-doc_type = bsart.
  READ TABLE tt_posiciones INTO DATA(rt_pos) INDEX 1.
  lw_poheader-suppl_plnt = rt_pos-werks.
*  lw_poheader-VENDOR     = 'P2001'.
  lw_poheader-comp_code  = bukrs.
  lw_poheader-creat_date =
  lw_poheader-doc_date   = sy-datum.
  lw_poheader-created_by = sy-uname.
  lw_poheader-purch_org  = ekorg.
  lw_poheader-pur_group  = ekgrp.
  lw_poheader-currency   = waers.
  DATA l_posnr            TYPE bapimepoitem-po_item.
  CLEAR l_posnr.

  LOOP AT tt_posiciones INTO rt_pos.
    ADD 10 TO l_posnr.
    CLEAR lw_poitem.
    CLEAR lw_poitemx.
    lw_poitem-material = rt_pos-matnr.
    lw_poitem-quantity = rt_pos-menge.
    lw_poitem-po_unit  = rt_pos-meins.
    lw_poitem-plant    = umwrk.
    lw_poitem-stge_loc = rt_pos-umlgo.
    lw_poitem-suppl_stloc = rt_pos-lgort.
*    lw_poitem-no_rounding = 'X'.
    lw_poitem-conf_ctrl   = '0004'.
    lw_poitem-over_dlv_tol =
    lw_poitem-under_dlv_tol = '25'.
    lw_poitem-acctasscat    = rt_pos-acctasscat.
    lw_poitem-item_cat      = rt_pos-item_cat.
    lw_poitem-conf_ctrl     = '0004'.
*    lw_poitem-VAL_CAT       = 'X'.
*    lw_poitem-ITEM_CAT_EXT = 'V'.
    lw_poitem-gr_basediv = 'X'.
    PERFORM rellenar_estructura_flags USING 'bapimepoitem'
                                            lw_poitem
                                   CHANGING lw_poitemx.
*    IF lw_poitem-po_item IS NOT INITIAL.
*      l_posnr = lw_poitem-po_item.
*    ELSE.
*      ADD 10 TO l_posnr.
*    ENDIF.

    lw_poitem-po_item  = l_posnr.
    lw_poitemx-po_item = l_posnr.
*      APPEND lw_poitem  TO lt_poitem.
    APPEND lw_poitemx TO lt_poitemx.
    APPEND lw_poitem TO lt_poitem.
    CLEAR lw_poschedule.
    CLEAR lw_poschedulex.

    lw_poschedule-delivery_date = sy-datum.
    CLEAR lw_poschedulex.
    PERFORM rellenar_estructura_flags USING 'bapimeposchedule'
                                        lw_poschedule
                               CHANGING lw_poschedulex.
    lw_poschedule-po_item  = l_posnr.
    lw_poschedulex-po_item = l_posnr.

    APPEND lw_poschedule TO lt_poschedule.
    APPEND lw_poschedulex TO lt_poschedulex.
    CHECK rt_pos-sd_doc IS NOT INITIAL.
    CLEAR: lw_poaccount,
           lw_poaccountx.
    lw_poaccount-sd_doc       = rt_pos-sd_doc.
    lw_poaccount-itm_number   = rt_pos-itm_number.
*    BAPIMEPOACCOUNT
    PERFORM rellenar_estructura_flags USING 'bapimepoaccount'
                                        lw_poaccount
                               CHANGING lw_poaccountx.
    lw_poaccount-po_item =
    lw_poaccountx-po_item = l_posnr.
    APPEND lw_poaccount  TO lt_poaccount.
    APPEND lw_poaccountx  TO lt_poaccountx.

  ENDLOOP.
  PERFORM rellenar_estructura_flags USING 'bapimepoheader'
                                              lw_poheader
                                     CHANGING lw_poheaderx.

  CALL FUNCTION 'MEPO_DOC_INITIALIZE'.
  CALL FUNCTION 'BAPI_PO_CREATE1'
    EXPORTING
      poheader         = lw_poheader
      poheaderx        = lw_poheaderx
      no_price_from_po = price_po
    IMPORTING
      exppurchaseorder = l_pedido
    TABLES
      return           = lt_return
      poitem           = lt_poitem
      poitemx          = lt_poitemx
      poschedule       = lt_poschedule
      poschedulex      = lt_poschedulex
*     pocond           = lt_pocond
*     pocondx          = lt_pocondx
      poaccount        = lt_poaccount
      poaccountx       = lt_poaccountx.
  .
  LOOP AT lt_return INTO DATA(rt_return) WHERE type EQ 'E'
                                            OR type EQ 'A'.
  ENDLOOP.
  IF sy-subrc EQ 0.
    MOVE abap_true TO error.
*    APPEND LINES OF lt_return TO tt_append_log.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*        IMPORTING
*          RETURN        =
      .

  ELSE.
*    DATA ebeln TYPE ebeln.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = l_pedido
      IMPORTING
        output = ebeln.
    DATA zswmstocp TYPE zswmstocp.
    CLEAR zswmstocp.
    zswmstocp-mandt = sy-mandt.
    zswmstocp-ebeln = ebeln.
    zswmstocp-erdat = sy-datum.
    zswmstocp-erzet = sy-uzeit.
    zswmstocp-ernam = sy-uname.
    INSERT INTO zswmstocp VALUES zswmstocp.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'
*       IMPORTING
*       RETURN        =
      .

    CALL FUNCTION 'DEQUEUE_EMEKKOE'
      EXPORTING
*       MODE_EKKO       = 'E'
*       MODE_EKPO       = 'E'
*       MANDT = SY-MANDT
        ebeln = ebeln.

    WAIT UP TO 2 SECONDS.
    CALL FUNCTION 'ZSWMPPMONSTO_CREATE_STO_OD'
      EXPORTING
        ebeln     = ebeln
      IMPORTING
        lt_return = lt_return
        error     = error
        vbeln     = vbeln.

  ENDIF.

ENDFUNCTION.
