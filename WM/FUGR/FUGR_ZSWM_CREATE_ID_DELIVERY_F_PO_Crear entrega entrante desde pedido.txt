FUNCTION zswm_create_id_delivery_f_po.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(TKNUM) TYPE  TKNUM OPTIONAL
*"     VALUE(TT_PEDIDOS) TYPE  ZST_RF_EM_PO_TT
*"     VALUE(TT_PICKING) TYPE  ZSEWM_DATOS_UI5_PICKING_TT
*"     VALUE(VERUR) TYPE  VERUR_VL
*"     VALUE(NO_GEN_LOG) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(VBELN) TYPE  VBELN_VL
*"----------------------------------------------------------------------
*      PERFORM mensaje USING 'I' 'ZSWM_UI5' '034' vbeln space space space CHANGING tt_log[].
  PERFORM break USING 'ZSWM_CREATE_ID_DELIVERY_F_PO'.

  REFRESH tt_log_global.

  DATA: lt_vbeln TYPE TABLE OF range_vbeln,
        ls_vbeln TYPE range_vbeln.

  DATA: n_bultos      TYPE i,
        l_lifnr       TYPE lifnr,
        l_rfpos       TYPE rfpos_vl,
        sw_devolucion TYPE flag.

  DATA: ls_ekpo    TYPE ekpo,
        ls_vbsk    TYPE vbsk,
        ls_komdlgn TYPE komdlgn,
        ls_vbfs    TYPE  vbfs,
        ls_vbls    TYPE vbls,
        lt_komdlgn TYPE TABLE OF komdlgn,
        lt_vbfs    TYPE TABLE OF vbfs,
        lt_vbls    TYPE TABLE OF vbls.

  DATA: tt_ped         TYPE zst_rf_em_po_tt,
        tt_pic         TYPE zsewm_datos_ui5_picking_tt,
        tt_pic_collect TYPE zsewm_datos_ui5_picking_tt,
        t_verko        LIKE verko OCCURS 0 WITH HEADER LINE,
        t_verpo        LIKE verpo OCCURS 0 WITH HEADER LINE.

  DATA: etenr    LIKE zswm_ui5_pack-etenr,
        terminal TYPE xuterminal,
        rt_pack  TYPE zswm_ui5_pack,
        tt_pack  TYPE TABLE OF zswm_ui5_pack.

  CLEAR: n_bultos, tt_pic_collect[], t_verko[], t_verpo[], t_lotes[].

  tt_ped[] = tt_pedidos[].
  tt_pic[] = tt_picking[].

  PERFORM validar_picking TABLES t_lotes USING tcode tt_ped tt_pic tt_pic_collect CHANGING error tt_log_global sw_devolucion.

  IF error NE abap_true.
    CASE sw_devolucion.
      WHEN abap_true.

        etenr = 0.

        READ TABLE tt_picking INTO DATA(rt_pic) INDEX 1.

        SELECT etenr INTO etenr UP TO 1 ROWS FROM zswm_ui5_pack WHERE vbeln EQ rt_pic-ebeln ORDER BY etenr DESCENDING.
        ENDSELECT.

        IF sy-subrc NE 0.
          etenr = 0.
        ENDIF. "FIN jtm 31.08.2022

        CALL FUNCTION 'TERMINAL_ID_GET'
          IMPORTING
            terminal             = terminal
          EXCEPTIONS
            multiple_terminal_id = 1
            no_terminal_found    = 2
            OTHERS               = 3.

        LOOP AT tt_picking INTO rt_pic.
**         add jtm 14.03.2023 hay veces que por status de material la pantalla da error y el operario vuelve a lanzar esta RFC
**         de esta forma evitamos duplicar registros
*          select SINGLE COUNT( * ) from zswm_ui5_pack where vbeln eq rT_pic-ebeln
*                                                        and EXIdv eq rt_pic-exidv
*                                                        and lvorm ne abap_true.
*          check sy-subrc ne 0.
**         fin de add jtm 14.03.2023
          CLEAR rt_pack.
*          MOVE-CORRESPONDING rt_pic TO rt_pack.
          rt_pack-mandt    = sy-mandt.
          rt_pack-exidv    = rt_pic-exidv.
*          select SINGLE COUNT( * ) from zswm_ui5_pack where vbeln eq rT_pic-ebeln
*                                                        and EXIdv eq rt_pic-exidv
*                                                        and lvorm ne abap_true.
          rt_pack-vbeln    = rt_pic-ebeln.
*         add jtm 14.03.2023 hay veces que por status de material la pantalla da error y el operario vuelve a lanzar esta RFC
*         de esta forma evitamos duplicar registros
          SELECT SINGLE COUNT( * ) FROM zswm_ui5_pack WHERE vbeln EQ rt_pic-ebeln
                                                        AND exidv EQ rt_pic-exidv
                                                        AND lvorm NE abap_true.
          CHECK sy-subrc NE 0.
*         fin de add jtm 14.03.2023
          ADD 1 TO etenr.
          rt_pack-posnr    = rt_pic-ebelp.
          rt_pack-etenr    = etenr.
          rt_pack-menge    = rt_pic-menge_pick.
          rt_pack-meins    = rt_pic-meins.
          rt_pack-matnr    = rt_pic-matnr.
          rt_pack-charg    = rt_pic-charg.
          rt_pack-nlpla    = rt_pic-nlpla.  " add jtm 21.03.2023 JTM AMPLWM002 Ubicar entradas RF
          SELECT SINGLE werks INTO @DATA(werks) FROM lips WHERE vbeln EQ @rt_pack-vbeln
                                                            AND posnr EQ @rt_pack-posnr.
          CALL FUNCTION 'ZSWM_UI5_GET_VHILM'
            EXPORTING
              matnr = rt_pic-matnr
              werks = werks
              charg = rt_pic-charg
              vbtyp = 'T'
            IMPORTING
*             ERROR =
*             TT_LOG        =
              vhilm = rt_pack-vhilm.

*          rt_pack-etenr    = etenr.
          rt_pack-erdat    = sy-datum.
          rt_pack-erzeit   = sy-uzeit.
          rt_pack-ernam    = sy-uname.
          rt_pack-terminal = terminal.
          APPEND rt_pack TO tt_pack.
        ENDLOOP.

        LOOP AT tt_pack INTO rt_pack.
          INSERT INTO zswm_ui5_pack VALUES rt_pack.
        ENDLOOP.
        COMMIT WORK AND WAIT.
        WAIT UP TO 2 SECONDS.
        CALL FUNCTION 'ZSWM_UI5_PROCESA_PED_DEVOLUCIO'
          EXPORTING
            tcode      = tcode
            uname      = uname
            operario   = operario
            tknum      = tknum
            verur      = verur
            vbeln      = rt_pack-vbeln
            no_gen_log = 'X'
          IMPORTING
            error      = error
            tt_log     = tt_log_global.
*        add jtm 19.08.2022 cerrar transporte despues de contabilizar
        IF error NE abap_true.
*         Investigamos si se debe cerrar o no el transporte de la entrega &
          PERFORM mensaje USING  'I' 'ZSWM_UI5' '161' rt_pack-vbeln space space space tt_log_global[].

          WAIT UP TO 1 SECONDS.
          SELECT SINGLE tknum INTO @DATA(tknum_ped_dev) FROM vttp WHERE vbeln EQ @rt_pack-vbeln.
          IF tknum_ped_dev IS INITIAL.
*           La entrega & no tiene transporte &
            PERFORM mensaje USING  'I' 'ZSWM_UI5' '162' rt_pack-vbeln 'NINGUNO' space space tt_log_global[].

          ELSE.
*           La entrega & no tiene transporte &
            PERFORM mensaje USING  'I' 'ZSWM_UI5' '162' rt_pack-vbeln tknum_ped_dev space space tt_log_global[].

            SELECT * INTO TABLE  @DATA(tt_vttp) FROM vttp WHERE tknum EQ @tknum_ped_dev.
            DATA sw_todos_post TYPE flag.
            MOVE abap_true TO sw_todos_post.
*            Miramos el estado de contablización de las entregas del transporte &
            PERFORM mensaje USING  'I' 'ZSWM_UI5' '163' tknum_ped_dev space space space tt_log_global[].
            LOOP AT tt_vttp INTO DATA(rt_vttp).
              SELECT SINGLE wbstk INTO @DATA(wbstk) FROM vbuk WHERE vbeln EQ @rt_vttp-vbeln.
*             Transporte & Entrega & status de contabilización &
              PERFORM mensaje USING  'I' 'ZSWM_UI5' '164' tknum_ped_dev rt_vttp-vbeln wbstk space tt_log_global[].
              CHECK wbstk NE 'C'.
              CLEAR sw_todos_post.
*             La entrega & del transporte & está sin contabilizar. Imposible cerrar
              PERFORM mensaje USING  'I' 'ZSWM_UI5' '165' rt_vttp-vbeln tknum_ped_dev space space tt_log_global[].
              EXIT.
            ENDLOOP.
            IF sw_todos_post EQ abap_true.
*             Todas entregas del transporte & contabilziadas. Cerramos transporte
              PERFORM mensaje USING  'I' 'ZSWM_UI5' '166' tknum_ped_dev space space space tt_log_global[].
*              PERFORM close_shipment USING tknum_ped_dev 4 CHANGING tt_log_global error. " 4. Fin de Carga
              CALL FUNCTION 'ZSWM_UPDATE_SHIPMENT_STATUS'
                EXPORTING
                  i_tknum = tknum
                  i_paso  = 4 " 4. Fin de Carga
*                 I_LGNUM =
                IMPORTING
                  error   = error
                  tt_log  = tt_log.
            ENDIF.
          ENDIF.
*           endif.
        ENDIF.
*        fin de add jtm 19.08.2022
      WHEN OTHERS.
        PERFORM crear_lotes TABLES t_lotes CHANGING error tt_log_global.

        IF error NE abap_true.
          CLEAR l_rfpos.
          DATA vbeln_vl TYPE vbeln_vl.
          vbeln_vl = '$       1'.
          LOOP AT tt_pic_collect INTO DATA(rt_picking).
            ADD 1 TO l_rfpos.
            IF l_lifnr IS INITIAL.
              SELECT SINGLE lifnr INTO l_lifnr FROM ekko WHERE ebeln = rt_picking-ebeln.
            ENDIF.
            ls_komdlgn-rfbel = vbeln_vl.
*        ls_komdlgn-wadat =
*        ls_komdlgn-bldat =
            ls_komdlgn-lfdat = sy-datum.
            ls_komdlgn-posnr = l_rfpos * 10.
            ls_komdlgn-rfpos = l_rfpos.

            ls_komdlgn-lifnr = l_lifnr.
            ls_komdlgn-verur =
            ls_komdlgn-lifex = verur. " añadir posición externa a posiciones - CVIVO 11.06.19
            ls_komdlgn-arktx = rt_picking-maktx.
            ls_komdlgn-matnr = rt_picking-matnr.
            READ TABLE t_lotes WITH KEY ebeln = rt_picking-ebeln
                                        ebelp = rt_picking-ebelp.
            IF  sy-subrc      EQ 0
            AND t_lotes-xchpf EQ abap_true.

              ls_komdlgn-charg = t_lotes-charg.
            ENDIF.
            ls_komdlgn-lfart = 'EL'.
*        ls_komdlgn-dlvtp = 'ID'.

* buscamos la info de conversion del pedido de compras
            SELECT SINGLE * INTO ls_ekpo
                   FROM ekpo
                   WHERE ebeln = rt_picking-ebeln
                     AND ebelp = rt_picking-ebelp.

* Quantity and Unit from Delivery
            ls_komdlgn-uebtk = ls_ekpo-uebtk.
            ls_komdlgn-uebto = ls_ekpo-uebto.
            ls_komdlgn-untto = ls_ekpo-untto.
            ls_komdlgn-werks = ls_ekpo-werks.
            ls_komdlgn-lgort = ls_ekpo-lgort.
*    ls_komdlgn-lfimg = ls_dlv-lfimg +
*                      ls_dlv-lfimg * .

            ls_komdlgn-lfimg = rt_picking-menge_pick.
            ls_komdlgn-vrkme = ls_ekpo-meins.
            ls_komdlgn-meins = ls_ekpo-lmein.
            ls_komdlgn-umvkz = ls_ekpo-umrez.
            ls_komdlgn-umvkn = ls_ekpo-umren.
            ls_komdlgn-vgbel = ls_ekpo-ebeln.
            ls_komdlgn-vgpos = ls_ekpo-ebelp.
            ls_komdlgn-vgtyp = 'V'.
            ls_komdlgn-kzazu = 'X'.
            APPEND ls_komdlgn TO lt_komdlgn.
            CLEAR ls_komdlgn.
            LOOP AT tt_picking INTO DATA(rt_picking_det) WHERE ebeln EQ rt_picking-ebeln
                                                           AND ebelp EQ rt_picking-ebelp
                                                           AND charg EQ rt_picking-charg.
*                                                           and nlpla eq rt_picking-nlpla. " add jtm 22.03.2023 JTM AMPLWM002 Ubicar entradas RF
              CLEAR t_verko.
              ADD 1 TO n_bultos.
              IF rt_picking_det-exidv IS NOT INITIAL.
                rt_picking_det-exidv = |{ rt_picking_det-exidv ALPHA = IN }|.
                UPDATE vekp SET status = '0060' WHERE exidv =  rt_picking_det-exidv.
                rt_picking_det-exidv = |{ rt_picking_det-exidv ALPHA = OUT }|.
              ENDIF.
              t_verko-exidv  = rt_picking_det-exidv.
              t_verko-exidv2 = rt_picking_det-nlpla. " Add jtm 20.03.2022 JTM AMPLWM002 Ubicar entradas RF
              CALL FUNCTION 'ZSWM_UI5_GET_VHILM'
                EXPORTING
                  matnr = rt_picking-matnr
                  werks = ls_ekpo-werks
                  charg = rt_picking-charg
                  vbtyp = '7'
                IMPORTING
*                 ERROR =
*                 TT_LOG        =
                  vhilm = t_verko-vhilm.
              t_verko-exida     = 'A'.
              APPEND t_verko.

              CLEAR t_verpo.
              t_verpo-exidv_ob =
              t_verpo-exidv    = rt_picking_det-exidv.
              t_verpo-velin    = '1'.
              t_verpo-vbeln = vbeln_vl.
              t_verpo-rfbel = vbeln_vl.
              t_verpo-rfpos = l_rfpos.
              t_verpo-posnr = l_rfpos * 10.
              t_verpo-tmeng = rt_picking_det-menge_pick.
              t_verpo-vrkme = ls_ekpo-meins.
              t_verpo-matnr = rt_picking-matnr.
              t_verpo-bestq = rt_picking-bestq.
              t_verpo-sobkz = rt_picking-sobkz.
              t_verpo-sonum = rt_picking-sonum.
              READ TABLE t_lotes WITH KEY ebeln = rt_picking-ebeln
                                          ebelp = rt_picking-ebelp.
              IF  sy-subrc      EQ 0
              AND t_lotes-xchpf EQ abap_true.

                t_verpo-charg = t_lotes-charg.
              ENDIF.
              t_verpo-werks = ls_ekpo-werks.
              t_verpo-lgort = ls_ekpo-lgort.
              APPEND t_verpo.
            ENDLOOP.
          ENDLOOP.

* Sammelgangsnummer vergeben
          ls_vbsk-mandt = sy-mandt.
          ls_vbsk-ernam = sy-uname.
          ls_vbsk-erdat = sy-datum.
          ls_vbsk-uzeit = sy-uzeit.
          ls_vbsk-smart = 'L'.

*  **** Call Core Function GN_DELIVERY_CREATE.
          CALL FUNCTION 'GN_DELIVERY_CREATE'
            EXPORTING
              vbsk_i   = ls_vbsk
            IMPORTING
              vbsk_e   = ls_vbsk
            TABLES
              xkomdlgn = lt_komdlgn
              xvbfs    = lt_vbfs
              xvbls    = lt_vbls
              xverko   = t_verko
              xverpo   = t_verpo
            EXCEPTIONS
              OTHERS   = 1.
*** Error Handling
          LOOP AT lt_vbfs INTO ls_vbfs WHERE msgty EQ 'E'
                                          OR msgty EQ 'A'.
            MOVE abap_true TO error.
            DATA msgno TYPE sy-msgno.
            MOVE ls_vbfs-msgno TO msgno.
            PERFORM mensaje USING  ls_vbfs-msgty ls_vbfs-msgid msgno ls_vbfs-msgv1 ls_vbfs-msgv2 ls_vbfs-msgv3 ls_vbfs-msgv4 CHANGING tt_log_global[].

          ENDLOOP.
          IF sy-subrc EQ 0.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.

            READ TABLE lt_vbls INTO ls_vbls INDEX 1.

            SELECT SINGLE vbeln INTO vbeln             FROM lips BYPASSING BUFFER
                     WHERE vbeln = ls_vbls-vbeln_lif.

            IF tknum IS NOT INITIAL.
              CALL FUNCTION 'ZSWM_ADD_DELV_TO_SHIPMENT_UI5'
                EXPORTING
                  tcode    = tcode
                  uname    = uname
                  operario = operario
                  tknum    = tknum
                  vbeln    = vbeln
                IMPORTING
                  error    = error
                  tt_log   = tt_log_global.

            ENDIF.
            IF error NE abap_true.
              CALL FUNCTION 'ZSWM_POST_ID_DELIVERY'
                EXPORTING
                  tcode                = tcode
                  uname                = uname
                  vbeln                = vbeln
                  operario             = operario
                  tknum                = tknum
                  num_bultos           = n_bultos
                  no_cerrar_transporte = abap_true
                  no_gen_log           = abap_true
                IMPORTING
                  error                = error
                  tt_log               = tt_log_global.
*              add jtm 01.09.2022
              IF error NE abap_true  AND tcode EQ c_entrada_con_ree.
                DATA: tt_lenum TYPE zswm_print_exidv_lenum_tt,
                      rt_lenum TYPE zswm_print_exidv_lenum_scr.
                CLEAR tt_lenum[].
                LOOP AT tt_picking INTO rt_picking_det.
                  rt_lenum-lenum = rt_picking_det-exidv.
                  COLLECT rt_lenum INTO tt_lenum.
                ENDLOOP.
*               add jtm 26.02.2022
                DATA: n_reg TYPE i,
                      n_exi TYPE i,
                      n_vec TYPE i.
                DESCRIBE TABLE tt_lenum LINES n_reg.
                n_exi = n_vec = 0.
                DO 5 TIMES.
                  n_vec = sy-index.
                  n_exi = 0.
                  WAIT UP TO 1 SECONDS.
                  LOOP AT tt_lenum INTO rt_lenum.
                    SELECT SINGLE COUNT( * ) FROM lein BYPASSING BUFFER WHERE lenum EQ rt_lenum.
                    CHECK sy-subrc EQ 0.
                    ADD 1 TO n_exi.
                  ENDLOOP.
                  CHECK n_exi EQ n_reg.
                  EXIT.
                ENDDO.
*               fin de add jtm 26.02.2022
                IF sy-subrc EQ 0.
                  CALL FUNCTION 'ZSWM_PRINT_EXIDV'
                    EXPORTING
                      tcode    = tcode
                      uname    = uname
                      operario = operario
*                     LENUM    =
                      tt_lenum = tt_lenum
                      mvttype  = 'A'
                    IMPORTING
                      error    = error
                      tt_log   = tt_log_global.
*                     OK       =
                ENDIF.
              ENDIF.
*              fin de add jtm 01.09.2022
            ENDIF.
          ENDIF.
        ENDIF.
    ENDCASE.
  ENDIF.
  tt_log[] = tt_log_global[].

  "Borramos registros de la tabla Z en caso de que de error para poder reprocesar
  "MTS: 22.02.2024 Canbiamos de lugar después de contabilizar
  READ TABLE  tt_log[] TRANSPORTING NO FIELDS WITH KEY type = 'E'.
  IF sy-subrc = 0.
    LOOP AT tt_pack INTO rt_pack.
      DELETE FROM zswm_ui5_pack WHERE vbeln = rt_pack-vbeln AND posnr = rt_pack-posnr AND etenr = rt_pack-etenr.
    ENDLOOP.
    COMMIT WORK AND WAIT.
  ENDIF.
  "MTS: 22.02.2024 Canbiamos de lugar después de contabilizar

  CHECK no_gen_log NE abap_true.
  DATA fval TYPE bdc_fval.
  fval = verur.

  SELECT SINGLE * INTO @DATA(reg_wkqu)
                  FROM lrf_wkqu WHERE bname EQ @uname
                                  AND statu EQ 'X'.

  CALL METHOD zcl_ui5_log=>save_log
    EXPORTING
      mf         = 'ZSWM_CREATE_ID_DELIVERY_F_PO'
      uname      = uname
*     statu      = statu
      tcode      = tcode
      error      = error
      lgnum      = reg_wkqu-lgnum
      operario   = operario
      fieldname  = 'VERUR'
      fval       = fval
      tknum      = tknum
*     reg_parametros      =
*     reg_funcionalidades =
      tt_log     = tt_log
      commit     = 'X'
      tt_pedidos = tt_pedidos
      tt_picking = tt_picking.

ENDFUNCTION.
