FUNCTION zswm_read_exidv.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(BARCODE01) TYPE  BARCODE OPTIONAL
*"     VALUE(BARCODE02) TYPE  BARCODE OPTIONAL
*"     VALUE(LGTYP) TYPE  LGTYP OPTIONAL
*"     VALUE(LGPLA) TYPE  LGPLA OPTIONAL
*"     VALUE(TRAER) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     VALUE(REGISTRO) TYPE  ZSWM_READ_EXIDV_STR
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------
*  DATA:
*    zswm_read_exidv_bloq_lqua_str TYPE zswm_read_exidv_bloq_lqua_str,
*    zswm_read_exidv_bloq_lein_str TYPE zswm_read_exidv_bloq_lein_str,
*    zswm_read_exidv_bloq_lagp_str TYPE zswm_read_exidv_bloq_lagp_str,
*    zswm_read_exidv_doc_str       TYPE zswm_read_exidv_doc_str.
  DATA: data_u            TYPE zswm_data_ui5_eeeoo_str,
        r_param           TYPE zswm_data_ui5_param_str,
        r_funcionalidades TYPE zswm_data_ui5_func_str.
  DATA lenum    TYPE lenum.
  DATA vl_exidv TYPE exidv.

  PERFORM break USING 'ZSWM_READ_EXIDV'.

  CLEAR registro.
*  DATA lgpla TYPE lgpla.
  CHECK barcode01 IS NOT INITIAL.
  CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
    EXPORTING
      uname      = uname
      statu      = 'X'
      no_gen_log = abap_true
      tcode      = tcode
    IMPORTING
      data_user  = data_u
*     ERROR      =
*     TT_LOG     =
    .
  data_u-operario = operario.

  CALL FUNCTION 'ZSWM_EANDECODE_RF_UI5'
    EXPORTING
      tcode      = tcode
      barcode_in = barcode01
      lgnum      = data_u-lgnum
    IMPORTING
      error      = error
      tt_log     = tt_log
      exidv      = vl_exidv
      lenum      = lenum
*     R_ETIQUETA_CLIENTE       =
    .
*     add jtm 10.11.2022
  IF   error EQ abap_true AND tcode EQ 'ZWM_RF_UI5_PIN_001'.
    DATA zswm_ui5_inv_ubi TYPE zswm_ui5_inv_ubi.
    READ TABLE tt_log INTO DATA(rt_log) INDEX 1.
    IF sy-subrc EQ 0.
      SELECT * INTO zswm_ui5_inv_ubi UP TO 1 ROWS FROM zswm_ui5_inv_ubi
          WHERE lgnum EQ data_u-lgnum
            AND lgtyp EQ lgtyp
            AND lgpla EQ lgpla
            AND statu EQ 'I' .
      ENDSELECT.
      IF sy-subrc EQ 0.
        DATA zswm_ui5_inv_upo TYPE zswm_ui5_inv_upo.
        DATA eten2 TYPE zswm_ui5_inv_upo-eten2.
        DATA lenu2 TYPE zswm_ui5_inv_upo-lenum.
        SELECT eten2 lenum INTO (eten2, lenu2) FROM zswm_ui5_inv_upo UP TO 1 ROWS
                                                      WHERE lgnum EQ  zswm_ui5_inv_ubi-lgnum
                                                        AND lgtyp EQ  zswm_ui5_inv_ubi-lgtyp
                                                        AND lgpla EQ  zswm_ui5_inv_ubi-lgpla
                                                        AND etenr EQ  zswm_ui5_inv_ubi-etenr
                    ORDER BY eten2 DESCENDING.
        ENDSELECT.
        IF sy-subrc NE 0.
          CLEAR eten2.
        ELSE.
          ADD 1 TO eten2.
        ENDIF.
        CLEAR zswm_ui5_inv_upo.
        MOVE-CORRESPONDING zswm_ui5_inv_ubi TO zswm_ui5_inv_upo.
        zswm_ui5_inv_upo-eten2 = eten2.
        zswm_ui5_inv_upo-lenum = barcode01+0(20).
        zswm_ui5_inv_upo-lenum = |{ zswm_ui5_inv_upo-lenum ALPHA = IN }|.
        IF zswm_ui5_inv_upo-lenum NE lenu2.
          zswm_ui5_inv_upo-msgid = rt_log-id.
          zswm_ui5_inv_upo-msgty = rt_log-type.
          zswm_ui5_inv_upo-msgno = rt_log-number.
          zswm_ui5_inv_upo-msgv1 = rt_log-message_v1.
          zswm_ui5_inv_upo-msgv2 = rt_log-message_v2.
          zswm_ui5_inv_upo-msgv3 = rt_log-message_v3.
          zswm_ui5_inv_upo-msgv4 = rt_log-message_v4.
          INSERT INTO zswm_ui5_inv_upo VALUES zswm_ui5_inv_upo.
          COMMIT WORK AND WAIT.
        ENDIF.
*           read TABLE
      ENDIF.
    ENDIF.
  ENDIF.
*     fin de add jtm 10.11.2022

  IF error NE abap_true.
    CASE data_u-tcode.
      WHEN c_barcode_traerbu.
        PERFORM traer_bultos USING lenum data_u CHANGING error tt_log registro.
*      select * into TABLE @data(tt_vekp) from vekp where exidv eq @lenum.
*      delete tt_vekp where status eq '0060'.
*      loop at tt_vekp into data(Rt_vekp).
*         select SINGLE * into @data(rt_vepo) from vepo where venum eq @rT_vekp-venum.
*         check sy-subrc eq 0.
*         clear registro.
*
*      endloop.
      WHEN OTHERS.
        PERFORM read_lenum USING lenum tcode data_u lgtyp lgpla CHANGING registro error tt_log.
*       add jtm 13.11.2022
        IF error           NE abap_true
        AND ( tcode          EQ 'ZWM_RF_UI5_PIN_002'
           OR tcode          EQ 'ZWM_RF_UI5_PIN_004' )
        AND registro-lgtyp EQ 'MUE'.
          MOVE abap_true TO error.
*          El bulto & está en el picking de la entrega &. No se puede cambiar ubica.
          DATA lenum_aux(20).
          DATA vbeln_aux(10).
          lenum_aux = |{ registro-lenum ALPHA = OUT }|.
          vbeln_aux = |{ registro-lgpla ALPHA = OUT }|.
          PERFORM mensaje USING 'E' 'ZSWM_UI5' '193' lenum_aux vbeln_aux space space CHANGING tt_log[].

        ENDIF.



*       fin de add jtm 13.11.2022
**     add jtm 10.11.2022
*      if   error eq abap_true
*      and  tcode eq 'ZWM_RF_UI5_PIN_001'.
*      data ZSWM_UI5_INV_UBI type ZSWM_UI5_INV_UBI.
*        read TABLE tt_log into data(rt_log) index 1.
*        if sy-subrc eq 0.
*        select * into ZSWM_UI5_INV_UBI up to 1 ROWS from ZSWM_UI5_INV_UBI
*            where lgnum eq data_u-lgnum
*              and lgtyp eq lgtyp
*              and lgpla eq lgpla
*              and statu eq 'I' .
*        endselect.
*        if sy-subrc eq 0.
*           data ZSWM_UI5_INV_UPO type ZSWM_UI5_INV_UPO.
*           data eten2 type ZSWM_UI5_INV_UPO-eten2.
*           data lenu2 type ZSWM_UI5_INV_UPO-lenum.
*           select eten2 lenum into (eten2, lenu2) from ZSWM_UI5_INV_UPO up to 1 ROWS
*                                                         where lgnum eq  ZSWM_UI5_INV_UBI-lgnum
*                                                           and lgtyp eq  ZSWM_UI5_INV_UBI-lgtyp
*                                                           and lgpla eq  ZSWM_UI5_INV_UBI-lgpla
*                                                           and etenr eq  ZSWM_UI5_INV_UBI-etenr
*                       ORDER BY eten2 DESCENDING.
*           ENDSELECT.
*           if sy-subrc ne 0.
*             clear eten2.
*           else.
*             check lenu2 ne ZSWM_UI5_INV_UPO-lenum.
*             add 1 to eten2.
*           endif.
*           clear ZSWM_UI5_INV_UPO.
*           move-CORRESPONDING ZSWM_UI5_INV_Ubi to ZSWM_UI5_INV_UPO.
*           ZSWM_UI5_INV_UPO-eten2 = eten2.
*           ZSWM_UI5_INV_UPO-lenum = lenum.
*           ZSWM_UI5_INV_UPO-msgid = rT_log-id.
*           ZSWM_UI5_INV_UPO-msgty = rT_log-type.
*           ZSWM_UI5_INV_UPO-msgno = rT_log-number.
*           ZSWM_UI5_INV_UPO-MSGV1 = rt_log-MESSAGE_V1.
*           ZSWM_UI5_INV_UPO-MSGV2 = rt_log-MESSAGE_V2.
*           ZSWM_UI5_INV_UPO-MSGV3 = rt_log-MESSAGE_V3.
*           ZSWM_UI5_INV_UPO-MSGV4 = rt_log-MESSAGE_V4.
*           insert into ZSWM_UI5_INV_UPO VALUES ZSWM_UI5_INV_UPO.
*           COMMIT WORK and WAIT.
**           read TABLE
*        endif.
*      endif.
*      endif.
**     fin de add jtm 10.11.2022
    ENDCASE.
  ENDIF.


  "JCB 10.12.24. Aprovisionamiento
  IF error = 'X' AND vl_exidv IS NOT INITIAL AND tcode = c_barcode_aprov.
    SELECT *
      INTO TABLE @DATA(tl_mseg)
      FROM mseg
      UP TO 1 ROWS
      WHERE lgnum = @data_u-lgnum AND
            bwart = '311'         AND
            ablad = @vl_exidv
      ORDER BY cpudt_mkpf DESCENDING,
               cputm_mkpf DESCENDING.
    READ TABLE tl_mseg ASSIGNING FIELD-SYMBOL(<fs_mseg>) INDEX 1.
    IF sy-subrc = 0.
      SELECT SINGLE ltap~lgnum, ltap~vlenr, ltap~vltyp, ltap~vlpla, ltap~matnr, ltap~maktx, ltap~charg,
                    ltap~lgort, ltap~werks, ltap~nistm, ltap~meins
        INTO @DATA(wl_ltap)
        FROM ltbp INNER JOIN ltap ON ltap~lgnum = ltbp~lgnum AND
                                     ltap~tanum = ltbp~tanum AND
                                     ltap~tbpos = ltbp~tbpos
        WHERE ltbp~lgnum = @data_u-lgnum AND
              ltbp~tbnum = @<fs_mseg>-tbnum and
              ltap~nltyp = '921'.

    ENDIF.

    IF sy-subrc <> 0.
      SELECT ltap~lgnum, ltap~vlenr, ltap~vltyp, ltap~vlpla, ltap~matnr, ltap~maktx, ltap~charg,
             ltap~lgort, ltap~werks, ltap~nistm, ltap~meins
        INTO TABLE @DATA(tl_ltap)
        FROM ltap
        WHERE lgnum = @data_u-lgnum AND
              vlenr = @vl_exidv     AND
              nltyp = '921'
        ORDER BY tanum DESCENDING.
      READ TABLE tl_ltap INTO wl_ltap INDEX 1.
    ENDIF.

    IF sy-subrc = 0.
      CLEAR: error, tt_log[].
      registro-no_exist = 'X'.
      registro-lgnum_2  = wl_ltap-lgnum.
      registro-lenum    = wl_ltap-vlenr.
      registro-lgtyp    = wl_ltap-vltyp.
      registro-lgpla    = wl_ltap-vlpla.
      registro-matnr    = wl_ltap-matnr.
      registro-maktx    = wl_ltap-maktx.
      registro-charg    = wl_ltap-charg.
      registro-lgort    = wl_ltap-lgort.
      registro-werks    = wl_ltap-werks.
      registro-verme    = wl_ltap-nistm.
      registro-meins    = wl_ltap-meins.
    ENDIF.
  ENDIF.

ENDFUNCTION.
