FUNCTION zswm_get_posiciones_entrega .
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(TKNUM) TYPE  TKNUM OPTIONAL
*"     VALUE(VBELN) TYPE  VBELN OPTIONAL
*"     VALUE(POSNR) TYPE  POSNR OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_T
*"     VALUE(TT_POSICIONES) TYPE  ZSWM_GET_ENTREGAS_UI5_STR_TT
*"     VALUE(TT_HEAD) TYPE  ZSWM_GET_ENTREGAS_HEAD_UI5_STT
*"     VALUE(TT_PICKING) TYPE  ZSWM_UI5_STOCK_AND_PICKING_TT
*"     VALUE(TT_STOCK) TYPE  ZSWM_UI5_STOCK_AND_PICKING_TT
*"----------------------------------------------------------------------
  DATA: tt_head_temp  TYPE  zswm_get_entregas_head_ui5_stt,
        tt_stock_temp TYPE  zswm_ui5_stock_and_picking_tt,
        et_lotes      TYPE  zswmtt_ui5_lotes_propuestos.

  CALL FUNCTION 'ZSWM_GET_SHIPMENT_OUT_UI5'
    EXPORTING
      tcode      = tcode
*     UNAME      = SY-UNAME
      tknum      = tknum
      vbeln      = vbeln
      posnr      = posnr
    IMPORTING
      tt_log     = tt_log
      tt_head    = tt_head_temp
      tt_picking = tt_picking
      tt_stock   = tt_stock_temp.

  LOOP AT tt_head_temp  INTO DATA(ls_head) WHERE vbeln = vbeln.
    APPEND LINES OF ls_head-tt_entregas TO tt_posiciones.
  ENDLOOP.
  tt_head = tt_head_temp.

  CALL FUNCTION 'ZSWM_GET_LOTES_PROPUESTOS'
    EXPORTING
      it_posiciones = tt_posiciones
    IMPORTING
      et_lotes      = et_lotes.
  LOOP AT et_lotes INTO DATA(ls_lotes).
    LOOP AT tt_posiciones ASSIGNING FIELD-SYMBOL(<ls_pos>) WHERE vbeln = ls_lotes-vbeln AND posnr = ls_lotes-posnr.
      <ls_pos>-charg_propuestos = ls_lotes-lotes_propuesto.
    ENDLOOP.
  ENDLOOP.

  LOOP AT tt_picking ASSIGNING FIELD-SYMBOL(<ls_pick>).
    <ls_pick>-tcode = tcode.
    <ls_pick>-tknum = tknum.
    <ls_pick>-vbeln = vbeln.
    <ls_pick>-posnr = posnr.
  ENDLOOP.

  "Si existe Lote propuesto mostramos primero en el listado
  LOOP AT et_lotes INTO ls_lotes WHERE vbeln = vbeln AND posnr = posnr.
    EXIT.
  ENDLOOP.
  IF sy-subrc = 0.
    LOOP AT tt_stock_temp ASSIGNING FIELD-SYMBOL(<ls_stocktemp>) WHERE charg IN ls_lotes-r_lotes.
      APPEND INITIAL LINE TO tt_stock ASSIGNING FIELD-SYMBOL(<ls_stock>).
      MOVE-CORRESPONDING <ls_stocktemp> TO <ls_stock>.
      <ls_stock>-tcode = tcode.
      <ls_stock>-tknum = tknum.
      <ls_stock>-vbeln = vbeln.
      <ls_stock>-posnr = posnr.
    ENDLOOP.
    LOOP AT tt_stock_temp ASSIGNING <ls_stocktemp> WHERE charg NOT IN ls_lotes-r_lotes.
      APPEND INITIAL LINE TO tt_stock ASSIGNING <ls_stock>.
      MOVE-CORRESPONDING <ls_stocktemp> TO <ls_stock>.
      <ls_stock>-tcode = tcode.
      <ls_stock>-tknum = tknum.
      <ls_stock>-vbeln = vbeln.
      <ls_stock>-posnr = posnr.
    ENDLOOP.
  ELSE.
    LOOP AT tt_stock_temp ASSIGNING <ls_stocktemp>.
      APPEND INITIAL LINE TO tt_stock ASSIGNING <ls_stock>.
      MOVE-CORRESPONDING <ls_stocktemp> TO <ls_stock>.
      <ls_stock>-tcode = tcode.
      <ls_stock>-tknum = tknum.
      <ls_stock>-vbeln = vbeln.
      <ls_stock>-posnr = posnr.
    ENDLOOP.
  ENDIF.

ENDFUNCTION.
