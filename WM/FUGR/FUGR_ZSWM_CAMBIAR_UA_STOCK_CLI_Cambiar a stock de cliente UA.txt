FUNCTION zswm_cambiar_ua_stock_cli.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TT_LENUM) TYPE  ZSWM_PRINT_EXIDV_LENUM_TT OPTIONAL
*"     REFERENCE(LENUM) TYPE  LENUM OPTIONAL
*"     REFERENCE(VBELN) TYPE  VBELN OPTIONAL
*"     REFERENCE(POSNR) TYPE  POSNR OPTIONAL
*"     REFERENCE(EBELN) TYPE  EBELN OPTIONAL
*"     REFERENCE(EBELP) TYPE  EBELP OPTIONAL
*"     REFERENCE(LIBERA) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     REFERENCE(GM_HEADRET) TYPE  BAPI2017_GM_HEAD_RET
*"     REFERENCE(ERROR) TYPE  FLAG
*"     REFERENCE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------
*"*"Interfase local

*"  IMPORTING
*"     REFERENCE(LENUM) TYPE  LENUM
*"     REFERENCE(VBELN) TYPE  VBELN OPTIONAL
*"     REFERENCE(POSNR) TYPE  POSNR OPTIONAL
*"     REFERENCE(EBELN) TYPE  EBELN OPTIONAL
*"     REFERENCE(EBELP) TYPE  EBELP OPTIONAL
*"     REFERENCE(LIBERA) TYPE  FLAG OPTIONAL
*"---------------------- ------------------------------------------------
  DATA: sobkz_to TYPE lqua-sobkz,
        sonum TYPE lqua-sonum.
  IF lenum IS NOT INITIAL.
    APPEND lenum TO tt_lenum.
  ENDIF.
  IF ( vbeln IS NOT INITIAL AND posnr IS INITIAL )
  OR ( vbeln IS INITIAL     AND posnr IS NOT INITIAL ).
*     Si el pedido viene relleno también debe venir la posición
    MOVE abap_true TO error.
    PERFORM mensaje USING 'E' 'ZSWM_UTIL' '000' space space space space CHANGING tt_log[].
  ELSEIF vbeln IS NOT INITIAL AND posnr IS NOT INITIAL.
    SELECT SINGLE  * INTO @DATA(r_vbap) FROM vbap WHERE vbeln EQ @vbeln
                                                    AND posnr EQ @posnr.
    IF sy-subrc NE 0.
*      Pedido/posición &/& no existe.
      MOVE abap_true TO error.
      PERFORM mensaje USING 'E' 'ZSWM_UTIL' '001' vbeln posnr space space CHANGING tt_log[].
    ENDIF.
  ENDIF.

  CHECK error NE abap_true.

  LOOP AT tt_lenum INTO DATA(rt_lenum).
    SELECT SINGLE * INTO @DATA(r_lein) FROM lein WHERE lenum EQ @rt_lenum-lenum.
    CHECK sy-subrc NE 0.
    MOVE abap_true TO error.
    PERFORM mensaje USING 'E' '00' '398' rt_lenum-lenum 'no existe' space space CHANGING tt_log[].
    EXIT.
  ENDLOOP.
*  ENDIF.
*ENDIF.
  CHECK error NE abap_true.
  IF vbeln IS NOT INITIAL.
    sobkz_to = 'E'. sonum+0(10) = vbeln. sonum+10(6) = posnr.
  ELSEIF ebeln IS NOT INITIAL.
    sobkz_to = 'E'. sonum+0(10) = ebeln. sonum+10(1) = '0'. sonum+11(5) = posnr..
  ELSE.
    CLEAR sobkz_to.
  ENDIF.
  data: n_reg        type i,
        sobkz_from   type lqua-sobkz.
*        sonum  type ltap-sonum.
  clear: n_reg, sobkz_from.
  LOOP AT tt_lenum INTO rt_lenum.
    SELECT SINGLE * INTO r_lein FROM lein WHERE lenum EQ rt_lenum-lenum.
    SELECT * INTO  TABLE @DATA(tt_lqua) FROM lqua
                                           WHERE lgnum EQ @r_lein-lgnum
                                             AND lenum EQ @r_lein-lenum
                                             AND lgtyp EQ @r_lein-lgtyp
                                             AND lgpla EQ @r_lein-lgpla.
*                                           AND werks EQ @r_lein-werks
*                                           AND lgort EQ @r_lein-lgort.
    IF sy-dbcnt > 1.
      MOVE abap_true TO error.
      PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'palet mix' space space CHANGING tt_log[].
    ELSE.
      READ TABLE tt_lqua INTO DATA(rt_lqua) INDEX 1.

      sobkz_from = rt_lqua-sobkz.

      IF rt_lqua-bestq IS NOT INITIAL.
        MOVE abap_true TO error.
        PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'en status de stock no libre' space space CHANGING tt_log[].
      ELSE.
        CASE sobkz_to.
          WHEN 'E'.
            IF rt_lqua-sonum EQ sonum.
              MOVE abap_true TO error.
              PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'ya pertenece a ese stock de cliente' space space CHANGING tt_log[].
            ENDIF.
          WHEN OTHERS.
            IF rt_lqua-sobkz IS INITIAL.
              MOVE abap_true TO error.
              PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'el palet no es de stock de cliente' space space CHANGING tt_log[].
            ELSEIF libera NE abap_true.
              MOVE abap_true TO error.
              PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'para quitar stock de cliente hay que marcar libera' space space CHANGING tt_log[].
            ENDIF.
        ENDCASE.
        CHECK error NE abap_true and libera ne abap_true.
        select SINGLE mtart into @data(mtart) from mara where matnr eq @rt_lqua-matnr.
        check rt_lqua-matnr ne r_vbap-matnr
          and mtart         ne 'ZPSE'.
*          El material de la matricula &, no es el del pedido &/&

    MOVE abap_true TO error.
    PERFORM mensaje USING 'E' 'ZSWM_UTIL' '002' r_lein-lenum vbeln posnr space CHANGING tt_log[].

      ENDIF.
    ENDIF.
    if error ne abap_true.

      add 1 to n_reg.
      if n_reg eq 1.
        sobkz_from = rt_lqua-sobkz.
      else.
          if sobkz_from ne rt_lqua-sobkz.
              MOVE abap_true TO error.
              PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'Tiene asignación distinta que la anterior UA' space space CHANGING tt_log[].
          endif.
      endif.
    endif.
    check error eq abap_true.
    exit.
  ENDLOOP.
*    ENDIF.
*  ENDIF.
  CHECK error NE abap_true.
*  IF vbeln IS NOT INITIAL.
*    sobkz = 'E'. sonum+0(10) = vbeln. sonum+10(6) = posnr.
*  ELSEIF ebeln IS NOT INITIAL.
*    sobkz = 'E'. sonum+0(10) = ebeln. sonum+10(1) = '0'. sonum+11(5) = posnr..
*  ELSE.
*    CLEAR sobkz.
*  ENDIF.

  CHECK error NE abap_true.
*  CASE sobkz.
*    WHEN 'E'.
*      IF rt_lqua-sonum EQ sonum.
*        MOVE abap_true TO error.
*        PERFORM mensaje USING 'E' '00' '398' lenum 'ya pertenece a ese stock de cliente' space space CHANGING tt_log[].
*      ENDIF.
*    WHEN OTHERS.
*      IF rt_lqua-sobkz IS INITIAL.
*        MOVE abap_true TO error.
*        PERFORM mensaje USING 'E' '00' '398' lenum 'el palet no es de stock de cliente' space space CHANGING tt_log[].
*      ELSEIF libera NE abap_true.
*        MOVE abap_true TO error.
*        PERFORM mensaje USING 'E' '00' '398' lenum 'para quitar stock de cliente hay que marcar libera' space space CHANGING tt_log[].
*      ENDIF.
*  ENDCASE.
  CHECK error NE abap_true.
*   status origen        destino    movimiento
*   libre    E            space      411
*   libre  space            E        412
*   libre    E              E        309
  DATA: gm_item    TYPE TABLE OF
                 bapi2017_gm_item_create WITH HEADER LINE.
  DATA: gm_header  TYPE bapi2017_gm_head_01.
  DATA: gm_code    TYPE bapi2017_gm_code.
*  DATA: gm_headret TYPE bapi2017_gm_head_ret.
  DATA: gm_return  TYPE bapiret2 OCCURS 0 WITH HEADER LINE.
  DATA: gm_retmtd  TYPE bapi2017_gm_head_ret-mat_doc.

  CLEAR: gm_return, gm_retmtd.
  REFRESH: gm_return, gm_item.
  CLEAR: gm_header, gm_code.
  gm_header-pstng_date = sy-datum.
  gm_header-doc_date   = sy-datum.

  LOOP AT tt_lenum INTO rt_lenum.
    SELECT SINGLE * INTO r_lein FROM lein WHERE lenum EQ rt_lenum-lenum.
    SELECT * INTO rt_lqua UP TO 1 ROWS FROM lqua
                                           WHERE lgnum EQ r_lein-lgnum
                                             AND lenum EQ r_lein-lenum
                                             AND lgtyp EQ r_lein-lgtyp
                                             AND lgpla EQ r_lein-lgpla.
    ENDSELECT.

    CLEAR gm_item.
    gm_item-material   =
    gm_item-move_mat   = rt_lqua-matnr.
    gm_item-batch      = rt_lqua-charg.
    gm_item-move_batch = rt_lqua-charg.
    gm_item-plant      =
    gm_item-move_plant = rt_lqua-werks.
    gm_item-stge_loc   =
    gm_item-move_stloc = rt_lqua-lgort.
    gm_item-unload_pt  = |{ rt_lenum-lenum ALPHA = OUT }|.
    CONCATENATE '411_' gm_item-unload_pt INTO gm_item-unload_pt SEPARATED BY '/'.
    CONDENSE gm_item-unload_pt NO-GAPS.
    gm_item-entry_qnt  = rt_lqua-verme.
    gm_item-entry_uom  = rt_lqua-meins.
    gm_code-gm_code      = '04'.
    if sobkz_from eq sobkz_to and sobkz_to eq 'E'.
*    if sobkz eq 'E' and libera ne abap_true.
      gm_item-spec_stock     = rt_lqua-sobkz.
      gm_item-val_sales_ord  = rt_lqua-sonum+0(10).
      gm_item-val_s_ord_item = rt_lqua-sonum+10(6).

      gm_item-sales_ord      = vbeln.
      gm_item-s_ord_item     = posnr.
      gm_item-move_type      = '413'.
    elseif sobkz_from eq 'E' and sobkz_to eq space.
*   Liberamos

*    IF libera EQ abap_true AND rt_lqua-bestq EQ space AND rt_lqua-sobkz EQ 'E'.
      gm_item-spec_stock     = rt_lqua-sobkz.
      gm_item-val_sales_ord  =
      gm_item-sales_ord      = rt_lqua-sonum+0(10).
      gm_item-val_s_ord_item =
      gm_item-s_ord_item     = rt_lqua-sonum+10(6).
      gm_item-move_type      = '411'.

    ELSEIF sobkz_from eq space and sobkz_to eq 'E'.
*      rt_lqua-bestq EQ space AND sobkz EQ 'E' AND rt_lqua-bestq NE 'E'.
      gm_item-spec_stock     = 'E'.
      gm_item-val_sales_ord  =
      gm_item-sales_ord      = sonum+0(10).
      gm_item-val_s_ord_item =
      gm_item-s_ord_item     = sonum+10(6).
      gm_item-move_type      = '412'.
    ENDIF.
*    endif.
    APPEND gm_item.
  ENDLOOP.
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = gm_header
      goodsmvt_code    = gm_code
    IMPORTING
      goodsmvt_headret = gm_headret
      materialdocument = gm_retmtd
    TABLES
      goodsmvt_item    = gm_item
      return           = tt_log[].
  READ TABLE tt_log WITH KEY type = 'E' TRANSPORTING NO FIELDS.
  IF sy-subrc EQ 0.
    error = abap_true.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*     EXPORTING
*       WAIT          =
*     IMPORTING
*       RETURN        =
      .
  ENDIF.
  CHECK error NE abap_true.
*    SOBKZ

*    SPSTCK_PHY

ENDFUNCTION.
