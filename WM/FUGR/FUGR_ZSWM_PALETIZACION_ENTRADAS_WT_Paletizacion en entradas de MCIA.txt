FUNCTION zswm_paletizacion_entradas_wt.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_LTAK) LIKE  LTAK STRUCTURE  LTAK
*"     VALUE(I_LTAP) LIKE  LTAP STRUCTURE  LTAP
*"     VALUE(I_MLVS) LIKE  MLVS STRUCTURE  MLVS
*"     VALUE(I_MGEF) LIKE  MGEF STRUCTURE  MGEF
*"     VALUE(I_T333) LIKE  T333 STRUCTURE  T333
*"     VALUE(I_T340D) LIKE  T340D STRUCTURE  T340D
*"     VALUE(I_VORGA) LIKE  LTAP-VORGA
*"     VALUE(I_EINML) LIKE  RL03T-EINML
*"  TABLES
*"      T_LTAPE STRUCTURE  LTAPE
*"  CHANGING
*"     VALUE(C_LTKZE) LIKE  MLVS-LTKZE
*"     VALUE(C_ANZL1) LIKE  RL03T-ANZL1
*"     VALUE(C_LETY1) LIKE  RL03T-LETY1
*"     VALUE(C_LMEN1) LIKE  RL03T-LMEN1
*"     VALUE(C_LMEL1) LIKE  RL03T-LMEL1
*"     VALUE(C_LGTY1) LIKE  RL03T-LGTY1
*"     VALUE(C_LGBE1) LIKE  RL03T-LGBE1
*"     VALUE(C_ANZL2) LIKE  RL03T-ANZL2
*"     VALUE(C_LETY2) LIKE  RL03T-LETY2
*"     VALUE(C_LMEN2) LIKE  RL03T-LMEN2
*"     VALUE(C_LMEL2) LIKE  RL03T-LMEL2
*"     VALUE(C_LGTY2) LIKE  RL03T-LGTY2
*"     VALUE(C_LGBE2) LIKE  RL03T-LGBE2
*"----------------------------------------------------------------------
  DATA: rr_lgnum TYPE shp_lgnum_range_t,
        rr_bwlvs TYPE zswm_mawm_int_range_bwlvs,
        rr_mtart TYPE fip_t_mtart_range.

  DATA: vbeln_aux TYPE likp-vbeln,
        posnr_aux TYPE lips-posnr,
        aufnr     TYPE mseg-aufnr,
        bwart     TYPE mseg-bwart,
        ablad     TYPE mseg-ablad,
        t_vekp    TYPE bapihunumber OCCURS 0 WITH HEADER LINE,
        t_posi    TYPE bapihuitem   OCCURS 0 WITH HEADER LINE,
        t_log     TYPE bapiret2     OCCURS 0 WITH HEADER LINE,
        xpnum     TYPE ltapexpnum,
        sgtxt     TYPE sgtxt,
        sw_subrc  TYPE sy-subrc.
  DATA: tt_shortname TYPE genfm_t_extbr_groups,
        shortname    TYPE setnamenew.

  DATA: lv_lgpla TYPE lagp-lgpla.

  CALL FUNCTION 'ZSWM_BREAK_USER_EXIT'.
  CLEAR: tt_shortname[], shortname.
  DATA: ex_object_cx_root TYPE REF TO cx_root,
        ex_text           TYPE string,
        ex_text_long      TYPE string.
*  try.

  shortname = 'ZSWM_PLANCHA_HER_UAS_EE'. APPEND shortname TO tt_shortname.
  shortname = 'ZSWM_PLANCHA_HER_BWLVS' . APPEND shortname TO tt_shortname.
  shortname = 'ZSWM_PLANCHA_MTART'.      APPEND shortname TO tt_shortname.
  CALL FUNCTION 'ZSWM_SET_GET_VALUES'
    EXPORTING
      shortname    = ''
      tt_shortname = tt_shortname
*     NO_AUTHORITY_CHECK       = 'X'
*     LANGU        = SYST-LANGU
*     TT_FIELDNAME =
    IMPORTING
      rr_lgnum     = rr_lgnum
      rr_bwlvs     = rr_bwlvs
      rr_mtart     = rr_mtart.

*  CATCH cx_root INTO ex_object_cx_root.
*      ex_text = ex_object_cx_root->get_text( ).
*      ex_text_long = ex_object_cx_root->get_longtext( ).
*  ENDTRY.

  SELECT SINGLE mtart INTO @DATA(mtart) FROM mara WHERE matnr EQ @i_ltap-matnr.
  IF  rr_lgnum[]   IS NOT INITIAL
  AND i_ltak-lgnum IN rr_lgnum
  AND rr_bwlvs[]   IS NOT INITIAL
  AND i_ltak-bwlvs IN rr_bwlvs
  AND rr_mtart[]   IS NOT INITIAL
  AND mtart        IN rr_mtart.
*     Miramos sin la OT correspondiente al movimiento de MCIA es de pedido de traslado
    SELECT SINGLE a~vbeln_im a~vbelp_im a~aufnr a~bwart a~ablad a~sgtxt  INTO (vbeln_aux, posnr_aux, aufnr, bwart, ablad, sgtxt)
    FROM mseg AS a
    WHERE a~mblnr = i_ltak-mblnr
      AND a~mjahr = i_ltak-mjahr
      AND a~zeile = i_ltap-mbpos.
    IF  sy-subrc EQ 0
    AND vbeln_aux IS NOT INITIAL.
*       Una cosa curiosa. Si contabilizo por VL32N

      SELECT exidv AS hu_exid INTO CORRESPONDING FIELDS OF TABLE t_vekp
            FROM vekp WHERE vpobjkey EQ vbeln_aux
                        AND status   NE '0060'.
      DATA(sw_subrc_vekp) = sy-subrc.
*      IF sw_subrc_vekp NE 0.
*        SELECT exidv AS hu_exid INTO CORRESPONDING FIELDS OF TABLE t_vekp
*              FROM vekp WHERE vpobjkey EQ vbeln_aux
*                          AND status   EQ '0060'.
*        sw_subrc_vekp = sy-subrc.
*      ENDIF.
      IF sw_subrc_vekp EQ 0.
*         sacamos el detalle de las hus de la ee
        CALL FUNCTION 'BAPI_HU_GETLIST'
          EXPORTING
            onlykeys  = space
          TABLES
            hunumbers = t_vekp
            huitem    = t_posi
            return    = t_log.
        xpnum = 0.
        LOOP AT t_posi WHERE object_doc      EQ vbeln_aux
         AND obj_item_number EQ posnr_aux
         AND material        EQ i_ltap-matnr
         AND batch           EQ i_ltap-charg
         AND plant           EQ i_ltap-werks
         AND stge_loc        EQ i_ltap-lgort.
          ADD 1 TO xpnum.
          CLEAR t_ltape.
          SELECT SINGLE lety1 INTO t_ltape-letyp FROM mlgn WHERE matnr EQ i_ltap-matnr
                                                             AND lgnum EQ i_ltak-lgnum.
          IF sy-subrc NE 0
          OR t_ltape-letyp IS INITIAL.
            IF c_lety1 IS NOT INITIAL.
              t_ltape-letyp = c_lety1.
            ELSE.
              t_ltape-letyp = 'PL'.
            ENDIF.
          ENDIF.
          t_ltape-xpnum  = xpnum.
          t_ltape-nlenr  = t_posi-hu_exid.
          t_ltape-anfml  =
          t_ltape-anfme  = t_posi-pack_qty.
          t_ltape-tapos  = i_ltap-tapos.
          t_ltape-charg  = i_ltap-charg.
          IF i_t333-nltyp IS NOT INITIAL.
            t_ltape-nltyp = i_t333-nltyp.
          ENDIF.
          IF i_t333-nlpla IS NOT INITIAL.
            t_ltape-nlpla = i_t333-nlpla.
          ENDIF.

          APPEND t_ltape.
        ENDLOOP.
        MOVE sy-subrc TO sw_subrc.
        IF sw_subrc EQ 0.
          CLEAR:  c_ltkze,
                  c_anzl1,
                  c_lety1,
                  c_lmen1,
                  c_lmel1,
                  c_lgty1,
                  c_lgbe1,
                  c_anzl2,
                  c_lety2,
                  c_lmen2,
                  c_lmel2,
                  c_lgty2,
                  c_lgbe2.

        ENDIF.
      ENDIF.
    ELSEIF sy-subrc EQ 0
       AND aufnr    IS NOT INITIAL
       AND bwart    EQ '101'
       AND ablad    IS NOT INITIAL.
*           Alta de fabricación. en el campo ABLAD está la matricula
      ADD 1 TO xpnum.
      CLEAR t_ltape.
      SELECT SINGLE lety1 INTO t_ltape-letyp FROM mlgn WHERE matnr EQ i_ltap-matnr
                                                         AND lgnum EQ i_ltak-lgnum.
      IF sy-subrc NE 0
      OR t_ltape-letyp IS INITIAL.
        IF c_lety1 IS NOT INITIAL.
          t_ltape-letyp = c_lety1.
        ELSE.
          t_ltape-letyp = 'PL'.
        ENDIF.
      ENDIF.
      t_ltape-xpnum  = 1.
      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = ablad
        IMPORTING
          output          = t_ltape-nlenr
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      t_ltape-anfml  =
      t_ltape-anfme  = i_einml.
      t_ltape-tapos  = i_ltap-tapos.
      t_ltape-charg  = i_ltap-charg.
      IF i_t333-nltyp IS NOT INITIAL.
        t_ltape-nltyp = i_t333-nltyp.
      ENDIF.
      IF i_t333-nlpla IS NOT INITIAL.
        t_ltape-nlpla = i_t333-nlpla.
      ENDIF.
      APPEND t_ltape.
      CLEAR:  c_ltkze,
              c_anzl1,
              c_lety1,
              c_lmen1,
              c_lmel1,
              c_lgty1,
              c_lgbe1,
              c_anzl2,
              c_lety2,
              c_lmen2,
              c_lmel2,
              c_lgty2,
              c_lgbe2.

    ELSEIF sy-subrc EQ 0
       AND aufnr    IS NOT INITIAL
       AND bwart    EQ '101'
       AND c_lety1  IS INITIAL.
      SELECT SINGLE lety1 INTO @DATA(lety1) FROM mlgn   WHERE matnr EQ @i_ltap-matnr
                                                          AND lgnum EQ @i_ltak-lgnum.
      IF sy-subrc NE 0
      OR lety1    IS INITIAL.
        c_lety1 = 'PL'.
      ENDIF.
      IF c_lety2 IS INITIAL AND c_lety1 IS NOT INITIAL.
        MOVE c_lety1 TO c_lety2.
      ENDIF.
    ELSEIF ( i_ltak-bwart EQ '309'
          OR i_ltak-bwart EQ '323'
          OR i_ltak-bwart EQ '325' )
          AND i_ltap-ablad+0(4) EQ '311_'.
      CLEAR t_ltape.
      SELECT SINGLE lety1 INTO t_ltape-letyp FROM mlgn WHERE matnr EQ i_ltap-matnr
                                                         AND lgnum EQ i_ltak-lgnum.
      IF sy-subrc NE 0
      OR t_ltape-letyp IS INITIAL.
        IF c_lety1 IS NOT INITIAL.
          t_ltape-letyp = c_lety1.
        ELSE.
          t_ltape-letyp = 'PL'.
        ENDIF.
      ENDIF.
      t_ltape-xpnum  = 1.
      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = i_ltap-ablad+5
        IMPORTING
          output          = t_ltape-nlenr
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      t_ltape-anfml  =
      t_ltape-anfme  = i_einml.
      t_ltape-tapos  = i_ltap-tapos.
      t_ltape-charg  = i_ltap-charg.
      IF i_t333-nltyp IS NOT INITIAL.
        t_ltape-nltyp = i_t333-nltyp.
      ENDIF.
      IF i_t333-nlpla IS NOT INITIAL.
        t_ltape-nlpla = i_t333-nlpla.
      ENDIF.
      APPEND t_ltape.
      CLEAR:  c_ltkze,
              c_anzl1,
              c_lety1,
              c_lmen1,
              c_lmel1,
              c_lgty1,
              c_lgbe1,
              c_anzl2,
              c_lety2,
              c_lmen2,
              c_lmel2,
              c_lgty2,
              c_lgbe2.

*<-- INI FCARDONA

    ELSEIF sy-subrc EQ 0 AND i_ltak-bwart EQ '561'. "Cargas iniciales

      CHECK sgtxt IS NOT INITIAL.

      SPLIT sgtxt AT '/' INTO TABLE DATA(lt_split).
      CHECK lines( lt_split ) >= 4.

      CHECK lt_split[ 1 ] <> space.
      CHECK lt_split[ 2 ] <> space.
      CHECK lt_split[ 4 ] <> space.

      CLEAR t_ltape.

      IF ( lt_split[ 3 ] <> space ).

        t_ltape-letyp = lt_split[ 3 ].

      ELSE.

        SELECT SINGLE lety1 INTO t_ltape-letyp FROM mlgn WHERE matnr EQ i_ltap-matnr
                                                           AND lgnum EQ i_ltak-lgnum.
        IF sy-subrc NE 0 OR t_ltape-letyp IS INITIAL.
          IF c_lety1 IS NOT INITIAL.
            t_ltape-letyp = c_lety1.
          ELSE.
            t_ltape-letyp = 'PL'.
          ENDIF.
        ENDIF.

      ENDIF.

      t_ltape-xpnum  = xpnum + 1.
      t_ltape-nlenr  = |{ lt_split[ 4 ] ALPHA = IN }|.
      t_ltape-anfml  = t_ltape-anfme  = i_einml.
      t_ltape-tapos  = i_ltap-tapos.
      t_ltape-charg  = i_ltap-charg.
      t_ltape-nltyp  = lt_split[ 1 ].
      t_ltape-nlpla  = lt_split[ 2 ].

      APPEND t_ltape.
      CLEAR:  c_ltkze,
              c_anzl1,
              c_lety1,
              c_lmen1,
              c_lmel1,
              c_lgty1,
              c_lgbe1,
              c_anzl2,
              c_lety2,
              c_lmen2,
              c_lmel2,
              c_lgty2,
              c_lgbe2.

*<-- FIN FCARDONA

    ENDIF.

  ELSEIF  rr_lgnum[]   IS NOT INITIAL
      AND i_ltak-lgnum IN rr_lgnum
      AND ( i_ltak-bwart EQ '309'
         OR i_ltak-bwart EQ '323'
         OR i_ltak-bwart EQ '325' )
      AND i_ltap-ablad+0(4) EQ '311_'.
    CLEAR t_ltape.
    SELECT SINGLE lety1 INTO t_ltape-letyp FROM mlgn WHERE matnr EQ i_ltap-matnr
                                                       AND lgnum EQ i_ltak-lgnum.
    IF sy-subrc NE 0
    OR t_ltape-letyp IS INITIAL.
      IF c_lety1 IS NOT INITIAL.
        t_ltape-letyp = c_lety1.
      ELSE.
        t_ltape-letyp = 'PL'.
      ENDIF.
    ENDIF.
    t_ltape-xpnum  = 1.
    CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
      EXPORTING
        input           = i_ltap-ablad+5
      IMPORTING
        output          = t_ltape-nlenr
      EXCEPTIONS
        check_failed    = 1
        not_numeric     = 2
        t344_get_failed = 3
        wrong_length    = 4
        OTHERS          = 5.
    t_ltape-anfml  =
    t_ltape-anfme  = i_einml.
    t_ltape-tapos  = i_ltap-tapos.
    t_ltape-charg  = i_ltap-charg.
    IF i_t333-nltyp IS NOT INITIAL.
      t_ltape-nltyp = i_t333-nltyp.
    ENDIF.
    IF i_t333-nlpla IS NOT INITIAL.
      t_ltape-nlpla = i_t333-nlpla.
    ENDIF.
    APPEND t_ltape.
    CLEAR:  c_ltkze,
            c_anzl1,
            c_lety1,
            c_lmen1,
            c_lmel1,
            c_lgty1,
            c_lgbe1,
            c_anzl2,
            c_lety2,
            c_lmen2,
            c_lmel2,
            c_lgty2,
            c_lgbe2.


  ELSEIF  rr_lgnum[]   IS NOT INITIAL
      AND i_ltak-lgnum IN rr_lgnum
      AND i_ltak-bwlvs EQ '101'
      AND c_lety1      IS INITIAL
      AND ( mtart      EQ 'ZTRO'
         OR mtart      EQ 'ZCLI' ).
    SELECT SINGLE lety1 INTO lety1 FROM mlgn   WHERE matnr EQ i_ltap-matnr
                                                 AND lgnum EQ i_ltak-lgnum.
    IF sy-subrc NE 0
    OR lety1    IS INITIAL.
      c_lety1 = 'UN'.
    ENDIF.
    IF c_lety2 IS INITIAL AND c_lety1 IS NOT INITIAL.
      MOVE c_lety1 TO c_lety2.
    ENDIF.

  ENDIF.


*--> INI FCARDONA - Creación OT directa en devoluciones

  "Pedidos compra devolución HPX
  IF ( i_ltak-betyp = 'B' AND bwart EQ '101' AND ablad IS NOT INITIAL ).

    "Compruebo es devolución
    SPLIT i_ltap-ablad AT '/' INTO DATA(lv_split1) DATA(lv_split2) DATA(lv_split3).
    CHECK lv_split1 IS NOT INITIAL AND lv_split2 IS NOT INITIAL AND lv_split3 IS NOT INITIAL.
    CHECK lv_split1 = 'DEV'.

    "Compruebo PT packaging y NA packaging
    CHECK mtart IN rr_mtart.
    CHECK i_ltak-lgnum IN rr_lgnum.

    "Recupero pedido traslado y posición
    SELECT SINGLE ebeln, ebelp
      FROM mseg
      INTO ( @DATA(lv_ebeln), @DATA(lv_ebelp) )
     WHERE mblnr = @i_ltak-mblnr
       AND mjahr = @i_ltak-mjahr
       AND zeile = @i_ltap-wepos
       AND ebeln = @i_ltak-benum.

    CHECK sy-subrc = 0 AND lv_ebeln IS NOT INITIAL AND lv_ebelp IS NOT INITIAL.

    "Compruebo que sea posición pedido traslado de devolución.
    SELECT COUNT(*) UP TO 1 ROWS
      FROM ekpo
     WHERE ebeln    = lv_ebeln
       AND ebelp    = lv_ebelp
       AND werks    = i_ltap-werks
       AND lgort    = i_ltap-lgort
       AND reslo    LIKE 'CM%'.

    CHECK sy-subrc = 0.

    i_t333-nltyp = lv_split2.
    i_t333-nlpla = lv_split3.

    CLEAR: t_ltape.

    ADD 1 TO xpnum.

    t_ltape = VALUE #( xpnum = xpnum
                       letyp = c_lety1
                       anfml = i_einml
                       anfme = i_einml
                       tapos = i_ltap-tapos
                       charg = i_ltap-charg
                       nltyp = lv_split2
                       nlpla = lv_split3 ).

    IF ( t_ltape-letyp IS INITIAL ).
      t_ltape-letyp = 'PL'.
    ENDIF.
                            .
    APPEND t_ltape.

    CLEAR: c_ltkze, c_anzl1, c_lety1, c_lmen1, c_lmel1, c_lgty1, c_lgbe1, c_anzl2, c_lety2, c_lmen2, c_lmel2, c_lgty2, c_lgbe2.

  ENDIF.

*<-- INI FCARDONA - Creación OT directa en devoluciones



ENDFUNCTION.
