FUNCTION zswm_crear_necesidad_pp_wm_pap.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(AUFNR) TYPE  AUFNR OPTIONAL
*"     VALUE(CI_NUMBER) TYPE  ZSPP_CINUMBER OPTIONAL
*"     VALUE(TEST) TYPE  FLAG OPTIONAL
*"     VALUE(MODE_BI) DEFAULT 'N'
*"  EXPORTING
*"     REFERENCE(ERROR) TYPE  FLAG
*"     REFERENCE(TT_LOG) TYPE  BAPIRET2_TT
*"     REFERENCE(TT_NECESIDADES) TYPE  ZSWM_CREAR_NECESIDAD_PP_WM_HTT
*"----------------------------------------------------------------------
  check 1 eq 2. " add tjm 27.04.2023 ahora va todo por ZSWM_ACT_NEC_CI_NUMBER_QRFC

  CALL FUNCTION 'ZSWM_BREAK_USER_EXIT'.
  DATA: rr_lgnum TYPE shp_lgnum_range_t.
  DATA n_reg TYPE i.

  CALL FUNCTION 'ZSWM_SET_GET_VALUES'
    EXPORTING
      shortname = 'ZSWM_PLANCHA_HER_UAS_EE'
*     TT_SHORTNAME             =
*     NO_AUTHORITY_CHECK       = 'X'
*     LANGU     = SYST-LANGU
*     TT_FIELDNAME             =
    IMPORTING
      rr_lgnum  = rr_lgnum.

  CHECK rr_lgnum[] IS NOT INITIAL.
  data tt_320 type /SPE/T320_T.
  SELECT * INTO TABLE tt_320 FROM t320 WHERE lgnum IN rr_lgnum.

  SELECT SINGLE istat INTO @DATA(istat) FROM tj02t WHERE txt04 EQ 'LIB.'
                                                     AND spras EQ 'S'.

  RANGES: r_number FOR zsppt_cinumbers-ci_number,
          r_aufnr  FOR zsppt_cinumbers-aufnr,
          r_rsnum  FOR caufv-rsnum.
  IF aufnr IS NOT INITIAL.
    r_aufnr+0(3) = 'IEQ'. r_aufnr-low = aufnr. APPEND r_aufnr.
  ENDIF.

  IF ci_number IS NOT INITIAL.
    r_number+0(3) = 'IEQ'.
    r_number-low  = ci_number.
    APPEND r_number.
  ENDIF.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE t_check  FROM zsppt_cinumbers WHERE aufnr     IN r_aufnr
                                                                            AND ci_number   IN r_number.
* 1) Nº de la OF
  PERFORM chequeos TABLES t_check CHANGING error tt_log tt_320 istat.

  IF t_check[] IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(tt_cis) FROM zsppt_cinumbers FOR ALL ENTRIES IN @t_check WHERE ci_number EQ @t_check-ci_number.
  ENDIF.

  LOOP AT tt_cis INTO DATA(rt_cis) WHERE tbnum IS INITIAL.
    DATA sw_errores_aux TYPE flag.
    CLEAR sw_errores_aux.
    DATA: objnr TYPE caufv-objnr,
          werks TYPE caufv-werks,
          rsnum TYPE caufv-rsnum.
    SELECT SINGLE objnr werks rsnum INTO (objnr, werks, rsnum) FROM caufv WHERE aufnr EQ rt_cis-aufnr.
*
    read TABLE tt_320 into data(rt_t320) with key werks = werks
                                                  lgort = '1000' .
    DATA:
      mtart   TYPE mara-mtart,
      zzancho TYPE mara-zzancho,
      matkl   TYPE mara-matkl,
      meins   TYPE mara-meins.
    SELECT SINGLE mtart zzancho matkl meins INTO (mtart, zzancho, matkl, meins) FROM mara WHERE matnr EQ rt_cis-matnr.
    DATA rt_necesidades TYPE zswm_crear_necesidad_pp_wm_str.
    DATA rt_pos         TYPE zswm_crear_necesidad_pp_wm_pos.
    DATA: sw_existe TYPE flag.
*     Mail de F.Cardona RE: HINOJOSA CIS_NUMBERS 06.04.2022
*     Actualmente se acumulan por papel/estación/ci number.
*     Para el caso la opción b.
*     Confirmo con el programador y te digo.
    DATA lznum TYPE ltbk-lznum.
    CONCATENATE zzancho rt_cis-canal rt_cis-calidad INTO lznum SEPARATED BY '/'.

    READ TABLE tt_necesidades INTO rt_necesidades WITH KEY lgnum = rt_t320-lgnum
                                                           benum = rt_cis-ci_number
                                                           nltyp = c_nltyp
                                                           nlpla = rt_cis-estacion
                                                           matnr = rt_cis-matnr
                                                           lznum = lznum.
    IF sy-subrc EQ 0.
      DATA(sw_tabix) = sy-tabix.

      MOVE abap_true TO sw_existe.
      CONCATENATE rt_necesidades-tbktx '/' rt_cis-aufnr INTO rt_necesidades-tbktx.
    ELSE.
      MOVE abap_false TO sw_existe.
      CLEAR rt_necesidades.
      rt_necesidades-lgnum   = rt_t320-lgnum.
      rt_necesidades-trart   = c_trart.
      rt_necesidades-betyp   = 'O'.
      rt_necesidades-benum   = rt_cis-ci_number.
      rt_necesidades-bwlvs   = c_bwlvs.
      rt_necesidades-nltyp   = c_nltyp.
      rt_necesidades-nlpla   = rt_cis-estacion.
      rt_necesidades-pdatu   = rt_cis-fecha_fin.
      rt_necesidades-pzeit   = rt_cis-hora_fin.
      rt_necesidades-werks   = rt_t320-werks.
      rt_necesidades-lgort   = rt_t320-lgort.

      rt_necesidades-tbktx   = rt_cis-aufnr.
      rt_necesidades-rsnum   = rsnum.
*      rt_necesidades-aufnr   = rt_cis-aufnr.
*      rt_necesidades-vornr   = rt_cis-vornr.
      rt_necesidades-matnr   = rt_cis-matnr.
      rt_necesidades-ci_number = rt_cis-ci_number.
*      rt_necesidades-stepnr  = rt_cis-stepnr.
      rt_necesidades-lznum   = lznum.
    ENDIF.
    DATA rs_aufnr TYPE range_s_aufnr.
    rs_aufnr+0(3) = 'IEQ'. rs_aufnr-low = rt_cis-aufnr. APPEND rs_aufnr TO rt_necesidades-rr_aufnr.
    READ TABLE rt_necesidades-tt_pos INTO rt_pos WITH KEY matnr = rt_cis-matnr
                                                          werks = rt_t320-werks
                                                          lgort = rt_t320-lgort.
    IF sy-subrc EQ 0.
      DATA(sw_tabix_pos) = sy-tabix.
      ADD rt_cis-cant_step TO rt_pos-menga.
      MODIFY rt_necesidades-tt_pos FROM rt_pos INDEX sw_tabix_pos.
    ELSE.
      CLEAR rt_pos.
      rt_pos-werks = rt_t320-werks.
      rt_pos-lgort = rt_t320-lgort.
      rt_pos-matnr = rt_cis-matnr.
      rt_pos-menga = rt_cis-cant_step.
      rt_pos-altme = meins.
      APPEND rt_pos TO rt_necesidades-tt_pos.
    ENDIF.

    CASE sw_existe.
      WHEN abap_true.
        MODIFY tt_necesidades FROM rt_necesidades INDEX sw_tabix.
      WHEN OTHERS.
        APPEND rt_necesidades TO tt_necesidades.
    ENDCASE.
  ENDLOOP.
*  ENDLOOP.
* ------------------------------------------------------------------*



  CHECK test NE abap_true.
  n_reg = 0.
  LOOP AT tt_necesidades INTO rt_necesidades.
    clear_bi.
    dynpro  'SAPML02B' '0101'.
    campo   'LTBK-LGNUM' rt_necesidades-lgnum.
    campo   'LTBK-BWLVS' rt_necesidades-bwlvs.
    campo   'LTBK-BENUM' rt_necesidades-benum.
    campo   'LTBK-BETYP' rt_necesidades-betyp.
    fecha   'LTBK-PDATU' rt_necesidades-pdatu.
    fecha   'LTBK-PZEIT' rt_necesidades-pzeit.
    boton   '/00'.

    dynpro  'SAPML02B' '1105'.
    campo   'RL02B-WERKS' rt_necesidades-werks.
    campo   'RL02B-LGORT' rt_necesidades-lgort.
    boton   '=AK'.

    dynpro  'SAPML02B' '0104'.
    campo   'LTBK-NLPLA' rt_necesidades-nlpla.
*    campo   'LTBK-NLTYP' rt_necesidades-nltyp.
    campo   'LTBK-LZNUM' rt_necesidades-lznum.
    campo   'LTBK-TBKTX' rt_necesidades-tbktx.
    boton   '=NP'.
*    describe TABLE rt_necesidades-tt_pos lines data(n_posiciones).
*    data n_veces type i.
*    n_veces =
    LOOP AT rt_necesidades-tt_pos INTO rt_pos.
      dynpro  'SAPML02B'   '0102'.
      campo   'LTBP-MATNR' rt_pos-matnr.
      campo   'LTBP-WERKS' rt_pos-werks.
      campo   'LTBP-LGORT' rt_pos-lgort.
      campo   'LTBP-ALTME' rt_pos-altme.
      cantidad 'LTBP-MENGA' rt_pos-menga rt_pos-altme.
      boton   '/00'.
    ENDLOOP.
    dynpro  'SAPML02B'   '0102'.
    boton '/EESC'.

    dynpro 'SAPML02B' '1103'.
    boton  '=BU'.
    call_bi 'LB01' mode_bi.

    LOOP AT t_bapiret2 WHERE type EQ 'E'
                          OR type EQ 'A'.
      MOVE abap_true TO error.
    ENDLOOP.
    IF sy-subrc NE 0.
      READ TABLE t_bapiret2 WITH KEY id     = 'L2'
                                     number = '010'.
      IF sy-subrc EQ 0.
        DATA tbnum TYPE ltbk-tbnum.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = t_bapiret2-message_v1
          IMPORTING
            output = tbnum.
*        read TABLE t_check with key ci_number = rt_necesidades-ci_number
*                                    aufnr     = rt_necesidades-aufnr
*                                    matnr     = rt_necesidades-matnr
*                                    estacion  = rt_necesidades-nlpla.
*             if sy-subrc ne 0.
*                clear t_check.
*             endif.
             loop at rt_necesidades-rr_aufnr into data(rt_aufnr).
*        UPDATE zsppt_cinumbers SET aedat      = sy-datum
*                                   aezeit     = sy-uzeit
*                                   aenam      = sy-uname
*                                   lgnum      = rt_t320-lgnum
*                                   tbnum      = tbnum
*                                   rsnum      = t_check-rsnum
*                                   rspos      = t_check-rspos
*                               WHERE aufnr     IN rt_necesidades-rr_aufnr
*                                 AND matnr     EQ rt_necesidades-matnr
*                                 AND ci_number EQ rt_necesidades-ci_number
*                                 AND estacion  EQ rt_necesidades-nlpla.
        read TABLE t_check with key ci_number = rt_necesidades-ci_number
                                    aufnr     = rt_aufnr-low
                                    matnr     = rt_necesidades-matnr
                                    estacion  = rt_necesidades-nlpla.
             if sy-subrc ne 0.
                clear t_check.
             endif.

        UPDATE zsppt_cinumbers SET aedat      = sy-datum
                                   aezeit     = sy-uzeit
                                   aenam      = sy-uname
                                   lgnum      = rt_t320-lgnum
                                   tbnum      = tbnum
                                   rsnum      = t_check-rsnum
                                   rspos      = t_check-rspos
                               WHERE aufnr     eq rt_aufnr-low
                                 AND matnr     EQ rt_necesidades-matnr
                                 AND ci_number EQ rt_necesidades-ci_number
                                 AND estacion  EQ rt_necesidades-nlpla.

              endloop.
*                                 and lznum     eq rt_necesidades-lznum.
        ADD 1 TO n_reg.
      ENDIF.
    ENDIF.
    IF t_bapiret2[] IS NOT INITIAL.
      APPEND LINES OF t_bapiret2 TO tt_log.
    ENDIF.
  ENDLOOP.
  CHECK n_reg > 0.
  COMMIT WORK AND WAIT.


ENDFUNCTION.
