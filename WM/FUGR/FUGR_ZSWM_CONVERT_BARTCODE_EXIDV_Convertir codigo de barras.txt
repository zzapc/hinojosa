FUNCTION zswm_convert_bartcode_exidv.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(TT_BARCODE) TYPE  BARCODE_T2 OPTIONAL
*"     VALUE(RT_BARCODE) TYPE  BARCODE OPTIONAL
*"     VALUE(CADENA) TYPE  STRING OPTIONAL
*"     VALUE(NLPLA) TYPE  LTAP_NLPLA OPTIONAL
*"  EXPORTING
*"     VALUE(REG_EAN128) TYPE  EAN128
*"     VALUE(DATA_PICKING) TYPE  ZSEWM_DATOS_UI5_PICKING_STR
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(EXIDV) TYPE  EXIDV
*"     VALUE(LENUM) TYPE  LENUM
*"----------------------------------------------------------------------
  PERFORM break USING  'ZSWM_CONVERT_BARTCODE_EXIDV'.
  DATA data_u         TYPE zswm_data_ui5_eeeoo_str.

  CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
    EXPORTING
      uname      = uname
*     STATU      = 'X'
      tcode      = tcode
      no_gen_log = abap_true
    IMPORTING
      data_user  = data_u
*     ERROR      =
*     TT_LOG     =
    .
*

  IF cadena IS NOT INITIAL.
    DATA(medida_string) = strlen( cadena ).
    IF medida_string <= 64.
      rt_barcode = cadena.
    ELSE.
      rt_barcode = cadena+0(64).
    ENDIF.
  ENDIF.
  IF rt_barcode IS NOT INITIAL.
    APPEND rt_barcode TO tt_barcode.
  ENDIF.

  CHECK tt_barcode[] IS NOT INITIAL.

  CASE tcode.
    WHEN c_barcode_inventa. "'ZWM_RF_UI5_PIN_001'.
      LOOP AT tt_barcode INTO rt_barcode.
        CHECK rt_barcode IS NOT INITIAL.
        CALL FUNCTION 'ZSWM_EANDECODE_RF_UI5'
          EXPORTING
            tcode      = tcode
            barcode_in = rt_barcode
            lgnum      = data_u-lgnum
          IMPORTING
            error      = error
            tt_log     = tt_log
            exidv      = exidv
            lenum      = lenum
*           R_ETIQUETA_CLIENTE       =
          .
      ENDLOOP.

    WHEN c_entrada_plan_gr.
      data ZSWM_UI5_NLPLA type ZSWM_UI5_NLPLA. " add jtm 22.03.2023 JTM AMPLWM002 Ubicar entradas RF
      LOOP AT tt_barcode INTO rt_barcode.
        CHECK rt_barcode IS NOT INITIAL.
        CALL FUNCTION 'ZSWM_EANDECODE_RF_UI5'
          EXPORTING
            tcode      = tcode
            barcode_in = rt_barcode
            lgnum      = data_u-lgnum
          IMPORTING
            error      = error
            tt_log     = tt_log
            exidv      = reg_ean128-exidv
*            lenum      = lenum
*           R_ETIQUETA_CLIENTE       =
          .
*       add jtm 22.03.2023 JTM AMPLWM002 Ubicar entradas RF
        if error ne abap_true.
           data exidv_aux type exidv.
           exidv_aux = |{ reg_ean128-exidv ALPHA = IN }|.
           select * into @data(reg_vekp) from vekp up to 1 ROWS where EXIdv  eq @exidv_aux
                                                                  and vpobj  eq '03'
                                                                  and status ne '0060'
                                                                  ORDER BY venum DESCENDING.
           ENDSELECT.
           if sy-subrc eq 0.
             data vbeln_id type vbeln.
             vbeln_id = reg_vekp-vpobjkey.
             clear ZSWM_UI5_NLPLA.
             ZSWM_UI5_NLPLA-MANDT  = sy-mandt.
             select SINGLE lgnum into ZSWM_UI5_NLPLA-lgnum from likp where vbeln eq vbeln_id.
             ZSWM_UI5_NLPLA-VBELN  = vbeln_id.
             ZSWM_UI5_NLPLA-EXIDV  = exidv_aux.
             ZSWM_UI5_NLPLA-NLPLA  = NLPLA.
             ZSWM_UI5_NLPLA-erdat  = sy-datum.
             ZSWM_UI5_NLPLA-erzeit = sy-uzeit.
             ZSWM_UI5_NLPLA-ernam  = sy-uname.
             modify ZSWM_UI5_NLPLA from ZSWM_UI5_NLPLA.
             if sy-subrc eq 0.
                commit WORK and WAIT.
             endif.
           endif.
        endif.

*       fin de add jtm 22.03.2023 JTM AMPLWM002 Ubicar entradas RF
      ENDLOOP.
    WHEN c_entrada_sin_ree.
      data : r_etiqueta_cliente type ZSWM_ETIQUETA_CARDEDEU_STR.
      LOOP AT tt_barcode INTO rt_barcode.
        CHECK rt_barcode IS NOT INITIAL.
         CALL FUNCTION 'ZSWM_EANDECODE_RF_UI5'
          EXPORTING
            tcode      = tcode
            barcode_in = rt_barcode
            lgnum      = data_u-lgnum
          IMPORTING
            error      = error
            tt_log     = tt_log
*           exidv      = exidv
*           lenum      = lenum
            R_ETIQUETA_CLIENTE       = r_etiqueta_cliente
          .
         check error ne abap_true
           and r_etiqueta_cliente-ebeln is not INITIAL.
          clear data_picking.
          data_picking-EBELN  = r_etiqueta_cliente-ebeln.
          data_picking-EBELP  = r_etiqueta_cliente-ebelp.
*          data_picking-ETENR
*          data_picking-MATNR  = r_etiqueta_cliente-matnr.
*          select SINGLE maktx into data_picking-MAKTX from makt where matnr eq r_etiqueta_cliente-matnr
*                                                                  and spras eq sy-langu.
          data_picking-EXIDV  = r_etiqueta_cliente-exidv.
          data_picking-CHARG  = r_etiqueta_cliente-charg.
          data_picking-MENGE_PICK
                              = r_etiqueta_cliente-cantidad.
          data_picking-MEINS  = r_etiqueta_cliente-meins.
          data_picking-TCODE  = tcode.
*          data_picking-CADENA


              DATA: data_delivery TYPE zswm_check_po_ui5_str.
*              data_picking-ebeln = r_ekpo-ebeln.
*              data_picking-ebelp = r_ekpo-ebelp.
              data barcode_ebeln type barcode.
              barcode_ebeln = data_picking-ebeln.
              CALL FUNCTION 'ZSWM_CHECK_PO'
                EXPORTING
                  ebeln         = barcode_ebeln
                  ebelp         = data_picking-ebelp
*                 TKNUM         =
                  tcode         = tcode
                  uname         = uname
                IMPORTING
                  error         = error
                  tt_log        = tt_log
                  data_delivery = data_delivery.


              IF error NE abap_true.
                READ TABLE data_delivery-tt_pedidos INTO DATA(rt_pedidos) INDEX 1.
                data_picking-matnr = rt_pedidos-matnr.
                data_picking-maktx = rt_pedidos-maktx.
*               data_picking-charg = rt_barcode+25(10).
*                data_picking-ebeln = r_ekpo-ebeln.
*                data_picking-ebelp = r_ekpo-ebelp.
*                data_picking-menge_pick = ctd.
*                data_picking-meins = r_ekpo-meins.
*                data_picking-exidv = lenum.
*             datA_picking-EXIDV
              ENDIF.
*            ENDIF.
*          ENDIF.


      ENDLOOP.

  ENDCASE.



  data_picking-tcode = tcode.
  CASE error.
    WHEN abap_true.   data_picking-cadena = cadena.
    WHEN OTHERS.      data_picking-cadena = reg_ean128-exidv.
  ENDCASE.

ENDFUNCTION.
