FUNCTION zswm_read_stock.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(MATNR) TYPE  MATNR OPTIONAL
*"     VALUE(CHARG) TYPE  CHARG_D OPTIONAL
*"     VALUE(WERKS) TYPE  WERKS_D OPTIONAL
*"     VALUE(LGORT) TYPE  LGORT_D OPTIONAL
*"     VALUE(KUNAG) TYPE  KUNAG OPTIONAL
*"     VALUE(KUNWE) TYPE  KUNWE OPTIONAL
*"     VALUE(TIPO_BUSQUEDA) TYPE  CHAR01 OPTIONAL
*"  EXPORTING
*"     VALUE(RT_UBICACION) TYPE  ZSWM_UI5_LAGP_STR
*"     VALUE(TT_REGISTROS) TYPE  ZSWM_READ_EXIDV_STR_TT
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------
*  DATA:
*    zswm_read_exidv_bloq_lqua_str TYPE zswm_read_exidv_bloq_lqua_str,
*    zswm_read_exidv_bloq_lein_str TYPE zswm_read_exidv_bloq_lein_str,
*    zswm_read_exidv_bloq_lagp_str TYPE zswm_read_exidv_bloq_lagp_str,
*    zswm_read_exidv_doc_str       TYPE zswm_read_exidv_doc_str.

  PERFORM break USING 'ZSWM_READ_STOCK'.

  DATA: data_u            TYPE zswm_data_ui5_eeeoo_str,
        r_param           TYPE zswm_data_ui5_param_str,
        r_funcionalidades TYPE zswm_data_ui5_func_str.

  CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
    EXPORTING
      uname      = uname
      statu      = 'X'
      no_gen_log = abap_true
      tcode      = tcode
    IMPORTING
      data_user  = data_u
*     ERROR      =
*     TT_LOG     =
    .
  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input        = matnr
    IMPORTING
      output       = matnr
    EXCEPTIONS
      length_error = 1
      OTHERS       = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  data_u-operario = operario.
  CASE tipo_busqueda.
    WHEN 'P'.

      SELECT * INTO TABLE @DATA(tt_lenum) FROM lqua WHERE lgnum EQ @data_u-lgnum
                                                      AND matnr EQ @matnr
                                                      AND werks EQ @werks
                                                      AND lgort EQ @lgort.

    WHEN 'O'.
      SELECT * INTO TABLE tt_lenum FROM lqua WHERE lgnum EQ data_u-lgnum
                                                      AND matnr EQ matnr
                                                      AND werks EQ werks
                                                      AND lgort EQ lgort
                                                      AND charg EQ charg.


    WHEN 'C' or 'D'.
      kunag = |{ kunag ALPHA = IN }|.
      kunwe = |{ kunwe ALPHA = IN }|.
      SELECT * INTO TABLE tt_lenum FROM lqua WHERE lgnum EQ data_u-lgnum
                                                      AND werks EQ werks
                                                      AND lgort EQ lgort
                                                      AND sobkz EQ 'E'.


*    WHEN 'D'.
*
*      SELECT * INTO TABLE tt_lenum FROM lqua WHERE lgnum EQ data_u-lgnum
*                                                      AND werks EQ werks
*                                                      AND lgort EQ lgort
*                                                      AND sobkz EQ 'E'.
  ENDCASE.
  delete tt_lenum where verme <= 0
                     or lenum is INITIAL.

  LOOP AT tt_lenum INTO DATA(rt_lenum).
    DATA: registro_ TYPE zswm_read_exidv_str,
          error_    TYPE flag,
          tt_log_   TYPE bapiret2_tt.
    CLEAR: registro_, error_, tt_log_.
    PERFORM read_lenum USING rt_lenum-lenum tcode data_u '' '' CHANGING registro_ error_ tt_log_.
    CHECK error_ NE abap_true.
    case TIPO_BUSQUEDA.
    when 'C'. check registro_-kunag eq kunag.
    when 'D'. check registro_-kunwe eq kunwe.
    endcase.
    APPEND registro_ TO tt_registros.
    ADD 1 TO rt_ubicacion-anzle.
    ADD registro_-verme TO rt_ubicacion-menge.
    MOVE registro_-meins TO rt_ubicacion-meins.
  ENDLOOP.
  READ TABLE tt_registros INTO registro_ INDEX 1.
  IF sy-subrc EQ 0.
    registro_-matnr = |{ registro_-matnr ALPHA = OUT }|.
    registro_-aufnr = |{ registro_-aufnr ALPHA = OUT }|.
    kunag = |{ kunag ALPHA = OUT }|.
    kunwe = |{ kunwe ALPHA = OUT }|.

    IF     tipo_busqueda EQ 'P'.
      CONCATENATE 'Stock x producto:' registro_-matnr registro_-maktx     INTO rt_ubicacion-message SEPARATED BY space.
    ELSEIF tipo_busqueda EQ 'O'.
      CONCATENATE 'Stock x orden:' registro_-aufnr         INTO rt_ubicacion-message SEPARATED BY space.
*      elseif tipo_busqueda eq 'C'. CONCATENATE 'Stock x cliente:' registro_-kunag registro_-name_Ag  into rt_ubicacion-message SEPARATED BY space.
*      elseif tipo_busqueda eq 'D'. CONCATENATE 'Stock x destinatario:' registro_-kunwe registro_-name_we into rt_ubicacion-message SEPARATED BY space.
    ENDIF.
  ENDIF.
  IF tt_registros[] IS INITIAL AND error_ EQ abap_true.
    MOVE error_ TO error.
    tt_log[] = tt_log_.
  ENDIF.
*      DESCRIBE TABLE tt_registros LINES rt_ubicacion-anzle.
*      PERFORM read_lenum USING lenum tcode data_u lgtyp lgpla CHANGING registro error tt_log.
*    ENDIF.
*  ENDIF.

ENDFUNCTION.
