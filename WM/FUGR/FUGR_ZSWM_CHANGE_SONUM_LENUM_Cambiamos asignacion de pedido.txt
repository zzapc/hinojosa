FUNCTION zswm_change_sonum_lenum.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TT_LENUM) TYPE  ZSWM_CHANGE_LENUM_SONUM_TT OPTIONAL
*"     REFERENCE(WAIT) TYPE  FLAG DEFAULT 'X'
*"     REFERENCE(REG_TRAZA) TYPE  ZSSDD005_STR OPTIONAL
*"     REFERENCE(TESTRUN) TYPE  XFELD DEFAULT SPACE
*"  EXPORTING
*"     REFERENCE(GM_HEADRET) TYPE  BAPI2017_GM_HEAD_RET
*"     REFERENCE(ERROR) TYPE  FLAG
*"     REFERENCE(TT_LOG) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------
  DATA  rt_lqua    TYPE lqua.
  DATA: gm_item    TYPE TABLE OF
        bapi2017_gm_item_create WITH HEADER LINE.
  DATA: gm_header  TYPE bapi2017_gm_head_01.
  DATA: gm_code    TYPE bapi2017_gm_code.
*  DATA: gm_headret TYPE bapi2017_gm_head_ret.
  DATA: gm_return  TYPE bapiret2 OCCURS 0 WITH HEADER LINE.
  DATA: gm_retmtd  TYPE bapi2017_gm_head_ret-mat_doc.

  CLEAR: gm_return, gm_retmtd.
  REFRESH: gm_return, gm_item.
  CLEAR: gm_header, gm_code, gm_headret, tt_log[], error.
  gm_header-pstng_date = sy-datum.
  gm_header-doc_date   = sy-datum.
  gm_code-gm_code      = '04'.
  DATA lgnum TYPE lgnum.
  DATA zswmt_sonum_chng TYPE zswmt_sonum_chng.
  LOOP AT tt_lenum INTO DATA(rt_lenum).
    DATA(sw_tabix) = sy-tabix.
    SELECT SINGLE * INTO @DATA(r_lein) FROM lein WHERE lenum EQ @rt_lenum-lenum.
    lgnum = r_lein-lgnum.
    SELECT * INTO rt_lqua UP TO 1 ROWS FROM lqua BYPASSING BUFFER
                                           WHERE lgnum EQ r_lein-lgnum
                                             AND lenum EQ r_lein-lenum
                                             AND lgtyp EQ r_lein-lgtyp
                                             AND lgpla EQ r_lein-lgpla.
    ENDSELECT.
    CHECK sy-subrc EQ 0 AND rt_lqua-sonum NE rt_lenum-new_sonum.
    CLEAR gm_item.
    gm_item-material   =
    gm_item-move_mat   = rt_lqua-matnr.
    gm_item-batch      =
    gm_item-move_batch = rt_lqua-charg.
*    gm_item-STCK_TYPE  = rt_lqua-bestq.
    gm_item-plant      =
    gm_item-move_plant = rt_lqua-werks.
    gm_item-stge_loc   =
    gm_item-move_stloc = rt_lqua-lgort.
    gm_item-unload_pt  = |{ rt_lenum-lenum ALPHA = OUT }|.
    CONCATENATE '411_' gm_item-unload_pt INTO gm_item-unload_pt SEPARATED BY '/'.
    rt_lenum-unload_pt = gm_item-unload_pt.
    rt_lenum-sonum_from = rt_lqua-sonum.
*    modify tt_lenum from rT_lenum index sw_tabix.
    CONDENSE gm_item-unload_pt NO-GAPS.
    gm_item-entry_qnt  = rt_lqua-verme.
    gm_item-entry_uom  = rt_lqua-meins.

    " LRE 27.12.2022 Cuando estamos haciendo consumos por OMP, desasignamos el lote IM completamente
    " para evitar que los posibles desajustes que existan en WM provoque que se queden en la COGI cuando realmente si que hay stock IM

*    DATA: it_callstack TYPE  abap_callstack,
*          et_callstack TYPE  sys_callst.
*
*    CALL FUNCTION 'SYSTEM_CALLSTACK'
**     EXPORTING
**       MAX_LEVEL          = 0
*      IMPORTING
*        callstack    = it_callstack
*        et_callstack = et_callstack.
*
*    LOOP AT et_callstack INTO DATA(ls_callstack)
*           WHERE eventname = 'ZSPP_IF_OMP_FB_SHIFCLOSURE'.
*
*      EXIT.
*    ENDLOOP.
*
*    DATA lv_kalab TYPE mska-kalab.
*
*    IF  ls_callstack IS NOT INITIAL.
*
*      SELECT SINGLE kalab INTO lv_kalab
*        FROM mska
*        WHERE matnr = rt_lqua-matnr
*        AND charg = rt_lqua-charg
*        AND werks =   rt_lqua-werks.
*
*      IF sy-subrc = 0.
*        gm_item-entry_qnt  = lv_kalab.
*        gm_item-entry_uom  = rt_lqua-meins.
*      ENDIF.
*    ENDIF.
*    " FIN LRE 27.12.2022

    DATA sw_ok TYPE flag.
    sw_ok = space.
    IF  rt_lqua-sonum      IS NOT INITIAL
    AND rt_lenum-new_sonum IS NOT INITIAL.
      gm_item-move_type      = '413'.
*     Origen
      gm_item-spec_stock     = rt_lqua-sobkz.
      gm_item-val_sales_ord  = rt_lqua-sonum+0(10).
      gm_item-val_s_ord_item = rt_lqua-sonum+10(6).
*     Destino
      gm_item-sales_ord      = rt_lenum-new_sonum+0(10).
      gm_item-s_ord_item     = rt_lenum-new_sonum+10(6).
*      APPEND gm_item.
      MOVE abap_true TO sw_ok.
    ELSEIF rt_lqua-sonum IS NOT INITIAL.
      gm_item-move_type      = '411'.
      gm_item-spec_stock     = rt_lqua-sobkz.
      gm_item-spec_stock     = rt_lqua-sobkz.
      gm_item-val_sales_ord  = rt_lqua-sonum+0(10).
      gm_item-val_s_ord_item = rt_lqua-sonum+10(6).

*      gm_item-sales_ord      = rt_lqua-sonum+0(10).
*      gm_item-s_ord_item     = rt_lqua-sonum+10(6).

*      gm_item-val_sales_ord  = rt_lenum-sonum+0(10).
*      gm_item-val_s_ord_item = rt_lenum-sonum+10(6).
*      APPEND gm_item.
      MOVE abap_true TO sw_ok.
    ELSEIF rt_lenum-new_sonum IS NOT INITIAL.
      gm_item-move_type      = '412'.
      gm_item-spec_stock     = 'E'. "rt_lqua-sobkz'.
*      gm_item-sales_ord  = rt_lenum-new_sonum+0(10).
*      gm_item-s_ord_item = rt_lenum-new_sonum+10(6).

*      gm_item-sales_ord      = rt_lqua-sonum+0(10).
*      gm_item-s_ord_item     = rt_lqua-sonum+10(6).

      gm_item-val_sales_ord  = rt_lenum-new_sonum+0(10).
      gm_item-val_s_ord_item = rt_lenum-new_sonum+10(6).
*      APPEND gm_item.
      MOVE abap_true TO sw_ok.

    ENDIF.
    CHECK sw_ok EQ abap_true.
    MODIFY tt_lenum FROM rt_lenum INDEX sw_tabix.
    APPEND gm_item.
  ENDLOOP.

  " LRE 27.12.2022 Cuando estamos haciendo consumos por OMP, desasignamos el lote IM completamente
  " para evitar que los posibles desajustes que existan en WM provoque que se queden en la COGI cuando realmente si que hay stock IM
*  DATA: it_callstack TYPE  abap_callstack,
*        et_callstack TYPE  sys_callst.
*
*  CALL FUNCTION 'SYSTEM_CALLSTACK'
**     EXPORTING
**       MAX_LEVEL          = 0
*    IMPORTING
*      callstack    = it_callstack
*      et_callstack = et_callstack.
*
*  LOOP AT et_callstack INTO DATA(ls_callstack)
*         WHERE eventname = 'ZSPP_IF_OMP_FB_SHIFCLOSURE'.
*
*    EXIT.
*  ENDLOOP.
*
*  DATA lv_kalab TYPE mska-kalab.
*
*  IF  ls_callstack IS NOT INITIAL AND NOT GM_ITEM[] IS INITIAL.
*
*
**    SELECT SINGLE kalab INTO lv_kalab
**      FROM mska
**      WHERE matnr = rt_lqua-matnr
**      AND charg = rt_lqua-charg
**      AND werks =   rt_lqua-werks.
*
**      IF sy-subrc = 0.
**        gm_item-entry_qnt  = lv_kalab.
**        gm_item-entry_uom  = rt_lqua-meins.
**      ENDIF.
*
*    SELECT * INTO TABLE @DATA(lt_mska)
*      FROM mska
*      FOR ALL ENTRIES IN gm_item
*      WHERE matnr = @gm_item-matnr
*      AND charg = @gm_item-charg
*      AND werks = @gm_item-werks.
*
*
*  ENDIF.
  " FIN LRE 27.12.2022
  CHECK gm_item[] IS NOT INITIAL.
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = gm_header
      goodsmvt_code    = gm_code
      testrun          = testrun
    IMPORTING
      goodsmvt_headret = gm_headret
      materialdocument = gm_retmtd
    TABLES
      goodsmvt_item    = gm_item
      return           = tt_log[].
  READ TABLE tt_log WITH KEY type = 'E' TRANSPORTING NO FIELDS.
  IF sy-subrc EQ 0.
    error = abap_true.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.

    IF testrun = 'X'. RETURN. ENDIF.


    LOOP AT tt_lenum INTO rt_lenum WHERE unload_pt IS NOT INITIAL.
*                                     and vbeln     is not INITIAL.
      DATA sobkz_to TYPE lqua-sobkz.
      IF rt_lenum-new_sonum IS INITIAL.
        CLEAR sobkz_to.
      ELSE.
        sobkz_to = 'E'.
      ENDIF.
      CLEAR zswmt_sonum_chng.
      zswmt_sonum_chng-mandt      = sy-mandt.
      zswmt_sonum_chng-lgnum      = lgnum.
      zswmt_sonum_chng-lenum      = rt_lenum-lenum.
      zswmt_sonum_chng-aufnr      = rt_lenum-aufnr.
      zswmt_sonum_chng-vbeln      = rt_lenum-vbeln.
      zswmt_sonum_chng-etenr      = rt_lenum-etenr.
      zswmt_sonum_chng-vgbel      = reg_traza-vgbel.
      zswmt_sonum_chng-vgpos      = reg_traza-vgpos.
      zswmt_sonum_chng-gbstk      = reg_traza-gbstk.
      zswmt_sonum_chng-gbsta      = reg_traza-gbsta.
      zswmt_sonum_chng-abgru      = reg_traza-abgru.
      zswmt_sonum_chng-augru      = reg_traza-augru.
      zswmt_sonum_chng-sonum_from = rt_lenum-sonum_from.
      zswmt_sonum_chng-sonum_to   = rt_lenum-new_sonum.
      zswmt_sonum_chng-ernam      =
      zswmt_sonum_chng-aenam      = sy-uname.
      zswmt_sonum_chng-erdat      =
      zswmt_sonum_chng-aedat      = sy-datum.
      zswmt_sonum_chng-erzet      =
      zswmt_sonum_chng-aezet      = sy-uzeit.
      zswmt_sonum_chng-mblnr      = gm_headret-mat_doc.
      zswmt_sonum_chng-mjahr      = gm_headret-doc_year.

      MODIFY zswmt_sonum_chng FROM zswmt_sonum_chng.
    ENDLOOP.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.
*     IMPORTING
*       RETURN        =
    DO 10 TIMES.
      SELECT * INTO TABLE @DATA(tt_mseg) FROM mseg BYPASSING BUFFER
                                                   WHERE mblnr EQ @gm_headret-mat_doc
                                                     AND mjahr EQ @gm_headret-doc_year.
      IF sy-subrc EQ 0.

        EXIT.
      ENDIF.
      WAIT UP TO 1 SECONDS.
    ENDDO.
*    check tT_mseg[] is not INITIAL.
    DELETE tt_mseg WHERE xauto EQ abap_true.
    DESCRIBE TABLE tt_mseg LINES DATA(n_mseg).
    DATA n_actualizadas TYPE i.
    n_actualizadas = 0.
    DATA veces TYPE i.
    veces = n_mseg * 2.
    DO veces TIMES.
      DATA(sw_index) = sy-index.
      WAIT UP TO 1 SECONDS.
      n_actualizadas = 0.
      LOOP AT tt_lenum INTO rt_lenum WHERE unload_pt IS NOT INITIAL.
        DATA statu TYPE lubu-statu.
        DATA ubnum TYPE lubu-ubnum.
        SELECT SINGLE ubnum INTO ubnum FROM zswmt_sonum_chng BYPASSING BUFFER
                                                             WHERE lgnum EQ lgnum
                                                               AND lenum EQ rt_lenum-lenum.
        CHECK sy-subrc EQ 0
          AND ubnum    IS NOT INITIAL.
        SELECT SINGLE statu INTO statu FROM lubu BYPASSING BUFFER
                    WHERE lgnum EQ lgnum
                      AND ubnum EQ ubnum.
        CHECK sy-subrc EQ 0
          AND statu    EQ 'U'.
        UPDATE zswmt_sonum_chng SET statu = 'U'
                                    aedat = sy-datum
                                    aezet = sy-uzeit
                                    aenam = sy-uname
                                           WHERE lgnum EQ lgnum
                                             AND lenum EQ rt_lenum-lenum.

        ADD 1 TO n_actualizadas.
      ENDLOOP.
      IF n_actualizadas EQ n_mseg.
        COMMIT WORK AND WAIT.
        EXIT.
      ENDIF.
    ENDDO.
  ENDIF.


ENDFUNCTION.
