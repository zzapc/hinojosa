FUNCTION zswm_ubicar_stock_561.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_LTAK) TYPE  LTAK
*"  EXPORTING
*"     REFERENCE(E_SUBRC) TYPE  SY-SUBRC
*"     REFERENCE(E_MSGID) TYPE  SY-MSGID
*"     REFERENCE(E_MSGNO) TYPE  SY-MSGNO
*"     REFERENCE(E_MSGV1) TYPE  SY-MSGV1
*"     REFERENCE(E_MSGV2) TYPE  SY-MSGV2
*"     REFERENCE(E_MSGV3) TYPE  SY-MSGV3
*"     REFERENCE(E_MSGV4) TYPE  SY-MSGV4
*"     REFERENCE(O_LGTYP) TYPE  LGTYP
*"     REFERENCE(O_LGBER) TYPE  LGBER
*"     REFERENCE(O_LGPLA) TYPE  LGPLA
*"     REFERENCE(O_LENUM) TYPE  LENUM
*"     REFERENCE(O_LENVW) TYPE  T331-LENVW
*"     REFERENCE(O_LETYP) TYPE  LTAP-LETYP
*"  CHANGING
*"     REFERENCE(I_LTAP) TYPE  LTAP
*"----------------------------------------------------------------------
  DATA: lgnum    TYPE ltak-lgnum,
        lgtyp    TYPE ltap-vltyp,
        lgpla    TYPE ltap-vlpla,
        lgber    TYPE lagp-lgber,
        sgtxt    TYPE mseg-sgtxt,
        lenum    TYPE lqua-lenum,
        lenvw    TYPE t331-lenvw,
        letyp    type ltap-LETYP,
        sw_error TYPE flag,
        sw_subrc TYPE sy-subrc.

  CHECK i_ltak-lgnum EQ '201'
     OR i_ltak-lgnum EQ '203'.
  CLEAR: o_lgtyp,
o_lgber,
o_lgpla,
o_lenum,
o_letyp.


  CASE i_ltak-bwart.
    WHEN '311'. " Entrada p.trasl.alm.
      MOVE c_no TO sw_error.
      CHECK i_ltak-trart EQ 'E'    " entrada
        AND i_ltak-mblnr IS NOT INITIAL.

      SELECT SINGLE sgtxt INTO sgtxt FROM mseg WHERE mblnr EQ i_ltak-mblnr
                                                 AND mjahr EQ i_ltak-mjahr
                                                 AND zeile EQ i_ltap-mbpos.
      check sy-subrc eq 0
        and sgtxt    cs 'LEGACY 311'.
      replace 'LEGACY 311' with '' into sgtxt.
      while sgtxt+0(1) eq space.
        sgtxt = sgtxt+1.
      ENDWHILE.
      CHECK sy-subrc EQ 0 AND sgtxt IS NOT INITIAL.
      PERFORM sacar_ubicacion USING i_ltak-lgnum sgtxt i_ltap-matnr i_ltak-bwart CHANGING lgnum lgtyp lgpla lgber letyp lenum lenvw sw_subrc.
      IF lgpla IS INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Carga inicial de stock obliga a llevar Tipo almacén y ubicación en' TO e_msgv1.
      ELSEIF lenvw IS INITIAL AND lenum IS NOT INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Tipo de Almacén sin gestión de UAs pero SSCC informada' TO e_msgv1.
      ELSEIF lenvw IS NOT INITIAL AND lenum IS INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Tipo de Almacén con gestión de UAs pero SSCC no informada' TO e_msgv1.
      ELSEIF sw_subrc NE 0.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'El SSCC no está bien definido' TO e_msgv1.

      ELSE.
          o_lgtyp = i_ltap-nltyp = lgtyp.
          o_lgber = i_ltap-nlber = lgber.
          o_lgpla = i_ltap-nlpla = lgpla.
          o_lenum = i_ltap-nlenr = lenum.
          o_letyp = i_ltap-letyp = letyp.
          o_lenvw = lenvw.
      ENDIF.

    WHEN '561' . " carga inicial de stock
      MOVE c_no TO sw_error.
      CHECK i_ltak-trart EQ 'E'    " entrada
        AND i_ltak-mblnr IS NOT INITIAL.

      SELECT SINGLE sgtxt INTO sgtxt FROM mseg WHERE mblnr EQ i_ltak-mblnr
                                                 AND mjahr EQ i_ltak-mjahr
                                                 AND zeile EQ i_ltap-mbpos.
      CHECK sy-subrc EQ 0 AND sgtxt IS NOT INITIAL.
      select SINGLE sgtxt into @data(sgtxt_aux) from ZSWM_MSEG_SGTXT where mblnr EQ @i_ltak-mblnr
                                                 AND mjahr EQ @i_ltak-mjahr
                                                 AND zeile EQ @i_ltap-mbpos.
      if sy-subrc eq 0.
          sgtxt = sgtxt_aux.
      endif.
      PERFORM sacar_ubicacion USING i_ltak-lgnum sgtxt i_ltap-matnr i_ltak-bwart CHANGING lgnum lgtyp lgpla lgber letyp lenum lenvw sw_subrc.
      IF lgpla IS INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Carga inicial de stock obliga a llevar Tipo almacén y ubicación en' TO e_msgv1.
      ELSEIF lenvw IS INITIAL AND lenum IS NOT INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Tipo de Almacén sin gestión de UAs pero SSCC informada' TO e_msgv1.
      ELSEIF lenvw IS NOT INITIAL AND lenum IS INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Tipo de Almacén con gestión de UAs pero SSCC no informada' TO e_msgv1.
      ELSEIF sw_subrc NE 0.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'El SSCC no está bien definido' TO e_msgv1.

      ELSE.
          o_lgtyp = i_ltap-nltyp = lgtyp.
          o_lgber = i_ltap-nlber = lgber.
          o_lgpla = i_ltap-nlpla = lgpla.
          o_lenum = i_ltap-nlenr = lenum.
          o_letyp = i_ltap-letyp = letyp.
          o_lenvw = lenvw.
      ENDIF.
    WHEN '562'.
      DATA: tcode LIKE mkpf-tcode,
            mblnr LIKE mkpf-mblnr,
            mjahr LIKE mkpf-mjahr,
            zeile LIKE mseg-zeile.
      CHECK i_ltak-mblnr IS NOT INITIAL.
      SELECT SINGLE tcode2 INTO tcode FROM mkpf WHERE mblnr EQ i_ltak-mblnr
                                                  AND mjahr EQ i_ltak-mjahr.
      CHECK tcode EQ 'MBST'.

      SELECT SINGLE smbln sjahr smblp INTO (mblnr, mjahr, zeile) FROM mseg
                                               WHERE mblnr EQ i_ltak-mblnr
                                                 AND mjahr EQ i_ltak-mjahr
                                                 AND zeile EQ i_ltap-mbpos.
      SELECT SINGLE sgtxt INTO sgtxt FROM mseg WHERE mblnr EQ mblnr
                                                 AND mjahr EQ mjahr
                                                 AND zeile EQ zeile.
      CHECK sy-subrc EQ 0 AND sgtxt IS NOT INITIAL.
      select SINGLE sgtxt into @data(sgtxt_aux_2) from ZSWM_MSEG_SGTXT where mblnr EQ @i_ltak-mblnr
                                                   AND mjahr EQ @i_ltak-mjahr
                                                   AND zeile EQ @i_ltap-mbpos.
      if sy-subrc eq 0.
          sgtxt = sgtxt_aux_2.
      endif.

      PERFORM sacar_ubicacion USING i_ltak-lgnum sgtxt i_ltap-matnr i_ltak-bwart CHANGING lgnum lgtyp lgpla lgber letyp lenum lenvw sW_subrc.
      IF lgpla IS INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Anulación de 561 exige ubicación en campo txt de movimiento inicial' TO e_msgv1.
      ELSEIF lenvw IS INITIAL AND lenum IS NOT INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Tipo de Almacén sin gestión de UAs pero SSCC informada' TO e_msgv1.
      ELSEIF lenvw IS NOT INITIAL AND lenum IS INITIAL.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'Tipo de Almacén con gestión de UAs pero SSCC no informada' TO e_msgv1.
      elseif sW_subrc ne 0.
        MOVE c_si TO sw_error.
        MOVE r_cus_error TO e_subrc.
        MOVE '00'  TO e_msgid.
        MOVE '398' TO e_msgno.
        MOVE 'El SSCC no está bien definido' TO e_msgv1.
      ELSE.
          o_lgtyp = i_ltap-vltyp = lgtyp.
          O_LGBER = i_ltap-vlber = lgber.
          o_lgpla = i_ltap-vlpla = lgpla.
          o_lenum = i_ltap-nlenr = lenum.
          o_letyp = i_ltap-LETYP = LETYP.
          o_LENVW = lenvw.
      ENDIF.
  ENDCASE.
ENDFUNCTION.
FORM sacar_ubicacion  USING    i_ltak-lgnum
                               sgtxt
                               matnr            type mara-matnr
                               bwart            type ltak-bwart
                      CHANGING lgnum            LIKE lagp-lgnum
                               lgtyp            LIKE lagp-lgtyp
                               lgpla            LIKE lagp-lgpla
                               lgber            LIKE lagp-lgber
                               LETYP            like ltap-LETYP
                               lenum            TYPE lenum
                               lenvw            TYPE t331-lenvw
                               subrc            TYPE sy-subrc.

  DATA: exidv TYPE exidv.
*  LGTYP  LGPLA LPTYP LENUM


  CLEAR: lgnum, lgtyp, lgpla, lenum, lenvw.
*  IF sgtxt+0(3) EQ i_ltak-lgnum.
*    SPLIT sgtxt AT '-' INTO lgnum lgtyp lgpla letyp lenum.
*    IF sy-subrc NE 0.
*      SPLIT sgtxt AT '/' INTO lgnum lgtyp lgpla LeTYP lenum.
*    ENDIF.
*  ELSE.
    lgnum = i_ltak-lgnum.
    SPLIT sgtxt AT '-' INTO lgtyp lgpla letyp lenum.
    IF sy-subrc NE 0.
      SPLIT sgtxt AT '/' INTO lgtyp lgpla letyp lenum.
    ENDIF.
*  ENDIF.

  TRANSLATE lgtyp TO UPPER CASE.
  TRANSLATE lgpla TO UPPER CASE.
  SELECT SINGLE lgber  INTO lgber
                    FROM lagp WHERE lgnum EQ lgnum
                                AND lgtyp EQ lgtyp
                                AND lgpla EQ lgpla.
  SELECT SINGLE lenvw FROM t331 INTO lenvw WHERE lgnum EQ lgnum AND lgtyp EQ lgtyp.
  CASE lenvw.
    WHEN abap_true. "  gestion de UAS
      if letyp is INITIAL.
         select SINGLE LETY1 into letyp from mlgn where matnr eq matnr
                                                    and lgnum eq i_ltak-lgnum.
      endif.
      DATA leng(3) TYPE n.
      leng = strlen( lenum ).
*      IF leng NE 10.
*        MOVE 8 TO subrc.
*      ELSE.
        MOVE lenum TO exidv.
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*    EXPORTING
*      input  = lenum
*    IMPORTING
*      output = exidv.

        CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
          EXPORTING
            input           = exidv
          IMPORTING
            output          = lenum
          EXCEPTIONS
            check_failed    = 1
            not_numeric     = 2
            t344_get_failed = 3
            wrong_length    = 4
            OTHERS          = 5.
        MOVE sy-subrc TO subrc.
*      ENDIF.
    WHEN OTHERS.
      MOVE 0 TO subrc.
  ENDCASE.
ENDFORM.                    " SACAR_UBICACION
