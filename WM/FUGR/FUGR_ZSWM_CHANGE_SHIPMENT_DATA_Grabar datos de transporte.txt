FUNCTION zswm_change_shipment_data.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(TKNUM) TYPE  TKNUM
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(RT_SHIPMENT_DATA) TYPE  ZSWM_SHIPMENT_DATA
*"     VALUE(INICIO_CARGA) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------
  DATA: zswm_ui5_tknum_new   TYPE zswm_ui5_tknum,
        zswm_ui5_tknum_old   TYPE zswm_ui5_tknum,
        rt_shipment_data_old TYPE zswm_shipment_data.

  DATA ls_return TYPE bapiret2.
  DATA lt_return TYPE TABLE OF bapiret2.
  DATA ls_header TYPE bapishipmentheader.
  DATA ls_header_action TYPE bapishipmentheaderaction .
  DATA: allowed_twgt_dfl TYPE  flag,
        allowed_twgt_vle TYPE  allowed_twgt.


  DATA: c_old TYPE vttkvb,
        c_new TYPE vttkvb.

  rt_shipment_data-tdlnr = |{ rt_shipment_data-tdlnr  ALPHA = IN }|.
  SELECT SINGLE * INTO @DATA(rt_vttk) FROM vttk WHERE tknum EQ @tknum.
  IF sy-subrc NE 0.
    MOVE abap_true TO error.
*   Transporte & no existe.
    PERFORM mensaje USING 'I' 'ZSWM_UI5' '066' tknum space space space CHANGING tt_log[].
  ELSE.
    SELECT SINGLE * INTO zswm_ui5_tknum_new FROM  zswm_ui5_tknum WHERE tknum EQ tknum.
    IF  sy-subrc                   EQ 0
    AND zswm_ui5_tknum_new-inicio  EQ abap_true
    AND inicio_carga               EQ abap_true.
      MOVE abap_true TO error.
*    Transporte & iniciado previamente por & oper: &
      PERFORM mensaje USING 'I' 'ZSWM_UI5' '067' tknum space space space CHANGING tt_log[].
    ELSE.
      MOVE-CORRESPONDING rt_vttk TO rt_shipment_data_old.
      rt_shipment_data_old-stceg = rt_shipment_data-stceg.
      rt_shipment_data_old-name1 = rt_shipment_data-name1.
      rt_shipment_data_old-bezei = rt_shipment_data-bezei.
      CALL FUNCTION 'ZSWM_SET_GET_VALUES'
        EXPORTING
          shortname        = 'ZSWM_ALLOWED_TWGT_DFL'
          langu            = 'S'
        IMPORTING
          allowed_twgt_dfl = allowed_twgt_dfl
          allowed_twgt_vle = allowed_twgt_vle.

      IF rt_shipment_data_old NE rt_shipment_data.
        datA: n_mod type i. " add jtm 08.11.2022
        n_mod = 0.
**      or ( rt_vttk-allowed_twgt is INITIAL and ALLOWED_TWGT_DFL eq abap_true ).
        ls_header-shipment_num = tknum.
        IF rt_vttk-signi NE rt_shipment_data-signi.
**          SIGNI  1 Type  SIGNI CHAR  20  0 Matrícula
          ls_header-container_id = rt_shipment_data-signi.
          ls_header_action-container_id = 'C'.
          add 1 to n_mod.
        ENDIF.
        IF rt_vttk-tpbez NE rt_shipment_data-tpbez.
*          TPBEZ  1 Type  TPBEZ CHAR  20  0 Remolque
          ls_header-description = rt_shipment_data-tpbez.
          ls_header_action-description = 'C'.
          add 1 to n_mod.
        ENDIF.
        IF rt_vttk-tdlnr NE rt_shipment_data-tdlnr.
*          TDLNR  1 Type  TDLNR CHAR  10  0 Número de transportista
          ls_header-service_agent_id = rt_shipment_data-tdlnr.
          ls_header_action-service_agent_id = 'C'.
          add 1 to n_mod.
        ENDIF.
        IF rt_vttk-add01 NE rt_shipment_data-add01.
*          ADD01  1 Type  VTTK_ADD01  CHAR  10  0 Conductor
          ls_header-suppl_1 = rt_shipment_data-add01.
          ls_header_action-suppl_1 = 'C'.
          add 1 to n_mod.
        ENDIF.
        IF rt_vttk-text1 NE rt_shipment_data-text1.
*          TEXT1  1 Type  VTTK_TEXT1  CHAR  40  0 Telefono conductor
          ls_header-text_1 = rt_shipment_data-text1.
          ls_header_action-text_1 = 'C'.
          add 1 to n_mod.
        ENDIF.
        IF rt_vttk-text2 NE rt_shipment_data-text2.
*          TEXT2  1 Type  VTTK_TEXT2  CHAR  40  0 Peso entrada
          ls_header-text_2 = rt_shipment_data-text2.
          ls_header_action-text_2 = 'C'.
          add 1 to n_mod.
        ENDIF.
        IF rt_vttk-text3 NE rt_shipment_data-text3.
          ls_header-text_3 = rt_shipment_data-text3.
          ls_header_action-text_3 = 'C'.
          add 1 to n_mod.
*          TEXT3  1 Type  VTTK_TEXT3  CHAR  40  0 Peso salida
        ENDIF.
*        if rt_vttk-ALLOWED_TWGT is INITIAL and ALLOWED_TWGT_DFL eq abap_true.
*           ls_header-ALLOWED_TWGT = ALLOWED_TWGT_VLE.
*           ls_header_action-ALLOWED_TWGT = 'C'.
*        endif.
**          STCEG  1 Type  STCEG CHAR  20  0 Número de identificación fiscal comunitario
        if n_mod > 0. " add jtm 08.11.2022
        CALL FUNCTION 'BAPI_SHIPMENT_CHANGE'
          EXPORTING
            headerdata       = ls_header
            headerdataaction = ls_header_action
          TABLES
            return           = lt_return.
*       fin de 19.08.2022 jtm cambio de BAPI por BI
        LOOP AT lt_return INTO ls_return WHERE type EQ 'E'
                                            OR type EQ 'A'.
          MOVE abap_true TO error.

        ENDLOOP.
        endif. " add jtm 08.11.2022
        CASE error.
          WHEN abap_true.
            APPEND LINES OF lt_return TO tt_log.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*           IMPORTING
*             RETURN        =
              .
          WHEN OTHERS.
            IF inicio_carga EQ abap_true.
*              Transporte & moificado e iniciado
              PERFORM mensaje USING 'I' 'ZSWM_UI5' '069' tknum space space space CHANGING tt_log[].
            ELSE.
*              Transporte & modificado
              PERFORM mensaje USING 'I' 'ZSWM_UI5' '068' tknum space space space CHANGING tt_log[].
            ENDIF.

            UPDATE vttk SET zzdni = rt_shipment_data-zzdni zzconductor = rt_shipment_data-zzconductor WHERE tknum = tknum.

            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.

        ENDCASE.

      ENDIF.
      IF error NE abap_true
      AND inicio_carga EQ abap_true.
        CLEAR zswm_ui5_tknum_new.
        MOVE-CORRESPONDING rt_shipment_data TO zswm_ui5_tknum_new.
        zswm_ui5_tknum_new-mandt    = sy-mandt.
        zswm_ui5_tknum_new-tknum    = tknum.
        zswm_ui5_tknum_new-operario = operario.
        zswm_ui5_tknum_new-inicio   = inicio_carga.
        zswm_ui5_tknum_new-tcode    = tcode.
        DATA terminal TYPE xuterminal.

        CALL FUNCTION 'TERMINAL_ID_GET'
*       EXPORTING
*        USERNAME                   = SY-UNAME
          IMPORTING
            terminal             = terminal
          EXCEPTIONS
            multiple_terminal_id = 1
            no_terminal_found    = 2
            OTHERS               = 3.
        zswm_ui5_tknum_new-ernam      = uname.
        zswm_ui5_tknum_new-erdat      = sy-datum.
        zswm_ui5_tknum_new-erzeit     = sy-uzeit.
        zswm_ui5_tknum_new-terminal   = terminal.

        INSERT INTO zswm_ui5_tknum VALUES zswm_ui5_tknum_new.
        COMMIT WORK AND WAIT.
*       Transporte & iniciado
        PERFORM mensaje USING 'I' 'ZSWM_UI5' '070' tknum space space space CHANGING tt_log[].
      ENDIF.
    ENDIF.
  ENDIF.


ENDFUNCTION.
