FUNCTION zswm_recupera_exidv.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(BARCODE01) TYPE  BARCODE OPTIONAL
*"     VALUE(BARCODE02) TYPE  BARCODE OPTIONAL
*"     VALUE(LGTYP) TYPE  LGTYP OPTIONAL
*"     VALUE(LGPLA) TYPE  LGPLA OPTIONAL
*"     VALUE(TRAER) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     VALUE(REGISTRO) TYPE  ZSWM_RECUPERAR_EXIDV_STR
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------

  DATA: data_u            TYPE zswm_data_ui5_eeeoo_str,
        r_param           TYPE zswm_data_ui5_param_str,
        r_funcionalidades TYPE zswm_data_ui5_func_str.
  DATA lenum TYPE lenum.


  CLEAR registro.
*  DATA lgpla TYPE lgpla.
  CHECK barcode01 IS NOT INITIAL.
  CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
    EXPORTING
      uname      = uname
      statu      = 'X'
      no_gen_log = abap_true
      tcode      = tcode
    IMPORTING
      data_user  = data_u
*     ERROR      =
*     TT_LOG     =
    .
  data_u-operario = operario.

  CALL FUNCTION 'ZSWM_EANDECODE_RF_UI5'
    EXPORTING
      tcode      = tcode
      barcode_in = barcode01
      lgnum      = data_u-lgnum
    IMPORTING
      error      = error
*     tt_log     = tt_log
*     EXIDV      =
      lenum2     = lenum
*     R_ETIQUETA_CLIENTE       =
    .
*     add jtm 10.11.2022
  IF   error EQ abap_true AND lenum IS NOT INITIAL
  AND  tcode EQ 'ZWM_RF_UI5_PIN_001'.
    SELECT tanum, matnr, charg, werks, lgort, sonum, sobkz, bestq, letyp, vlenr, nlenr, meins
      FROM ltap
      INTO TABLE @DATA(lt_ltap)
      WHERE lgnum = @data_u-lgnum
      AND  ( vlenr = @lenum OR  nlenr = @lenum  )
      ORDER BY tanum DESCENDING.
    IF sy-subrc = 0.
      registro = CORRESPONDING #( lt_ltap[ 1 ] ).
      DATA(lv_exidv) = lt_ltap[ 1 ]-vlenr.
      IF lv_exidv IS INITIAL.
        lv_exidv = lt_ltap[ 1 ]-nlenr.
      ENDIF.
      registro-nlenr = lv_exidv.

      "Obtenemos la cantidad
      SELECT a~venum, a~exidv, b~vemng, b~vemeh
        FROM vekp AS a
        INNER JOIN vepo AS b ON b~venum = a~venum
        INTO TABLE @DATA(lt_verme)
        WHERE a~exidv = @lv_exidv
        ORDER BY b~vepos DESCENDING.
      IF sy-subrc = 0.
        registro-verme = lt_verme[ 1 ]-vemng.
*        registro-meins = lt_verme[ 1 ]-vemeh.
      ENDIF.
    ELSE.
      registro-nlenr = lenum.
    ENDIF.

  ENDIF.

*     fin de add jtm 10.11.2022
ENDFUNCTION.
