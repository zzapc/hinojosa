FUNCTION zswm_user_exit_ots.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_LTAK_VB) TYPE  LTAK_VB
*"     REFERENCE(CREAR) TYPE  FLAG OPTIONAL
*"     REFERENCE(CONFIRMAR) TYPE  FLAG OPTIONAL
*"  TABLES
*"      T_LTAP_VB STRUCTURE  LTAP_VB
*"----------------------------------------------------------------------
* add jtm 12.04.2022
* ------------------------------------------------------------------------------------------------------------------------------------------*
* Primera parte: Dejamos constancia en las tablas de picking pistola UI5. No accedo a tablas para saber si en este número de almacén aplica,
* ya que la tabla ZSWM_UI5_PICK me sirve como control
* ------------------------------------------------------------------------------------------------------------------------------------------*
  CASE abap_true.
    WHEN crear.
      IF i_ltak_vb-vbeln IS NOT INITIAL.
        LOOP AT t_ltap_vb WHERE vltyp EQ 'MUE'
                            AND vlpla EQ i_ltak_vb-vbeln
                            AND nltyp EQ '916'
                            AND nlpla EQ i_ltak_vb-vbeln.
          UPDATE zswm_ui5_pick SET tanum_clos = i_ltak_vb-tanum
                                   tapos_clos = t_ltap_vb-tapos
                                   pquit_clos = space
                             WHERE lgnum EQ i_ltak_vb-lgnum
                               AND nlenr EQ t_ltap_vb-vlenr
                               AND vbeln EQ i_ltak_vb-vbeln
                               AND posnr EQ t_ltap_vb-posnr.


        ENDLOOP.
      ENDIF.
*     add jtm 25.07.2022
      IF i_ltak_vb-ubnum IS NOT INITIAL.
        PERFORM instrucciones_traspaso_ot USING i_ltak_vb.
*       add jtm 12.11.2022
        PERFORM cambio_asignacion TABLES t_ltap_vb USING i_ltak_vb .
*       fin de add jtm 12.11.2022
      ENDIF.
*     fin de add jtm 25.07.2022
    WHEN confirmar.
      IF i_ltak_vb-vbeln IS NOT INITIAL.
*       Confirmación o anulación de
        LOOP AT t_ltap_vb WHERE vltyp EQ 'MUE'
                            AND vlpla EQ i_ltak_vb-vbeln
                            AND nltyp EQ '916'
                            AND nlpla EQ i_ltak_vb-vbeln.
          CASE t_ltap_vb-vorga.
            WHEN 'ST'      "anulacion
              OR 'SL'.     "anulacion
              UPDATE zswm_ui5_pick SET tanum_clos = space
                                       tapos_clos = space
                                       pquit_clos = space
                                 WHERE lgnum EQ i_ltak_vb-lgnum
                                   AND nlenr EQ t_ltap_vb-vlenr
                                   AND vbeln EQ i_ltak_vb-vbeln
                                   AND posnr EQ t_ltap_vb-posnr.

            WHEN OTHERS. " confirmación
              UPDATE zswm_ui5_pick SET pquit_clos = abap_true
                                          WHERE lgnum EQ i_ltak_vb-lgnum
                                            AND nlenr EQ t_ltap_vb-vlenr
                                            AND vbeln EQ i_ltak_vb-vbeln
                                            AND posnr EQ t_ltap_vb-posnr.
          ENDCASE.
        ENDLOOP.
      ENDIF.
*     add jtm 25.07.2022
      IF i_ltak_vb-ubnum IS NOT INITIAL.
        PERFORM instrucciones_traspaso_ot USING i_ltak_vb.
*       add jtm 12.11.2022
        PERFORM cambio_asignacion TABLES t_ltap_vb USING i_ltak_vb .
*       fin de add jtm 12.11.2022
      ENDIF.
*     fin de add jtm 25.07.2022
  ENDCASE.
* ------------------------------------------------------------------------------------------------------------------------------------------*
* 2 PARTE TEMA REPROCESOS: cuando se mueve algo a 030 REPROCESOS se pasa a calidad. El proceso se lanza desde un programa que tendrá que tener
* un JOB contra el evento del mismo nombre
* ------------------------------------------------------------------------------------------------------------------------------------------*
  DATA: tt_shortname TYPE genfm_t_extbr_groups,
        rt_shortname TYPE setnamenew,
        tt_set       TYPE zswm_set_get_values_str_tt.

  RANGES: r_lgnum FOR lagp-lgnum,
          r_lgtyp FOR lagp-lgtyp,
          r_lgpla FOR lagp-lgpla.
  CLEAR: r_lgnum[], r_lgtyp[], r_lgpla[].
  CLEAR: rt_shortname, tt_shortname[], tt_set[].
  rt_shortname = 'ZSWM_PLANCHA_HER_UAS_EE'.   APPEND rt_shortname TO tt_shortname.
  rt_shortname = 'ZSWM_PLANCHA_REPRO_TPOAL'.  APPEND rt_shortname TO tt_shortname.
  rt_shortname = 'ZSWM_PLANCHA_REPROCESOS'.   APPEND rt_shortname TO tt_shortname.

  CALL FUNCTION 'ZSWM_SET_GET_VALUES'
    EXPORTING
      shortname    = 'ZSWM_PLANCHA'
      tt_shortname = tt_shortname
*     NO_AUTHORITY_CHECK       = 'X'
*     LANGU        = SYST-LANGU
*     TT_FIELDNAME =
    IMPORTING
*     ERROR        =
*     TT_LOG       =
      tt_set       = tt_set
*     RR_WERKS     =
*     RR_PSTYV     =
*     RR_LGNUM     =
*     RR_BWLVS     =
*     RR_VHILM     =
*     RR_MTART     =
    .
  LOOP AT tt_set INTO DATA(rt_set).
    LOOP AT rt_set-tt_set_lines_basic INTO DATA(rt_set_lines_basic).
      CASE rt_set-shortname.
        WHEN 'ZSWM_PLANCHA_HER_UAS_EE'.
          r_lgnum+0(3) = 'IBT'. r_lgnum-low = rt_set_lines_basic-from. r_lgnum-high = rt_set_lines_basic-to. APPEND r_lgnum.
        WHEN 'ZSWM_PLANCHA_REPROCESOS'.
          r_lgpla+0(3) = 'IBT'. r_lgpla-low = rt_set_lines_basic-from. r_lgpla-high = rt_set_lines_basic-to. APPEND r_lgpla.
        WHEN 'ZSWM_PLANCHA_REPRO_TPOAL'.
          r_lgtyp+0(3) = 'IBT'. r_lgtyp-low = rt_set_lines_basic-from. r_lgtyp-high = rt_set_lines_basic-to. APPEND r_lgtyp.
      ENDCASE.
    ENDLOOP.
  ENDLOOP.
  IF  r_lgnum[]       IS NOT INITIAL
  AND r_lgtyp[]       IS NOT INITIAL
  AND i_ltak_vb-lgnum IN r_lgnum.
    LOOP AT t_ltap_vb WHERE nltyp IN r_lgtyp
                        AND nlpla IN r_lgpla.
      EXIT.
    ENDLOOP.
    IF sy-subrc EQ 0.
      DATA: evento TYPE btceventid VALUE 'ZSWM_REPROCESOS'.
      CALL FUNCTION 'BP_EVENT_RAISE'
        EXPORTING
          eventid                = evento
*         EVENTPARM              = ' '
*         TARGET_INSTANCE        = ' '
*         TARGET_MODE            = ' '
        EXCEPTIONS
          bad_eventid            = 1
          eventid_does_not_exist = 2
          eventid_missing        = 3
          raise_failed           = 4
          OTHERS                 = 5.
    ENDIF.
  ENDIF.
* fin de add jtm 12.04.2022
* add jtm 21.03.2023         JTM AMPLWM002 Ubicar entradas RF
  case i_ltak_vb-bwlvs.
  when '999'.
     loop at t_ltap_vb.
         check t_ltap_vb-vlenr eq t_ltap_vb-nlenr
           and t_ltap_vb-nlenr is not INITIAL
           and t_ltap_vb-vltyp eq '120'.
         update ZSWM_UI5_NLPLA set tanum = i_ltak_vb-tanum
                                   pquit = abap_true
                               where lgnum eq i_ltak_vb-lgnum
                                 and exidv eq t_ltap_vb-vlenr
                                 and pquit ne abap_true.
     endloop.
  endcase.
* fin de add jtm 21.03.2023  JTM AMPLWM002 Ubicar entradas RF

ENDFUNCTION.
