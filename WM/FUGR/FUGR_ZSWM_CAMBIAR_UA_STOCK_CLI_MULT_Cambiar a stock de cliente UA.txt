FUNCTION zswm_cambiar_ua_stock_cli_mult.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TT_LENUM) TYPE  ZSWM_CHNG_EXIDV_LENUM_SCR_TT OPTIONAL
*"  EXPORTING
*"     REFERENCE(GM_HEADRET) TYPE  BAPI2017_GM_HEAD_RET
*"     REFERENCE(ERROR) TYPE  FLAG
*"     REFERENCE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------
*
*  DATA: r_sonum_chng  TYPE zswmt_sonum_chng,
*        rt_sonum_chng TYPE TABLE OF zswmt_sonum_chng.
*
*  REFRESH: rt_sonum_chng.
** del jtm 12.11.2022
**  LOOP AT tt_lenum INTO DATA(rt_lenum).
**    IF ( rt_lenum-vbeln IS NOT INITIAL AND rt_lenum-posnr IS INITIAL )
**    OR ( rt_lenum-vbeln IS INITIAL     AND rt_lenum-posnr IS NOT INITIAL ).
***     Si el pedido viene relleno también debe venir la posición
**      MOVE abap_true TO error.
**      PERFORM mensaje USING 'E' 'ZSWM_UTIL' '000' space space space space CHANGING tt_log[].
**      RETURN.
**    ELSEIF rt_lenum-vbeln IS NOT INITIAL AND rt_lenum-posnr IS NOT INITIAL.
**      SELECT SINGLE  * INTO @DATA(r_vbap) FROM vbap WHERE vbeln EQ @rt_lenum-vbeln
**                                                      AND posnr EQ @rt_lenum-posnr.
**      IF sy-subrc NE 0.
***      Pedido/posición &/& no existe.
**        MOVE abap_true TO error.
**        PERFORM mensaje USING 'E' 'ZSWM_UTIL' '001' rt_lenum-vbeln rt_lenum-posnr space space CHANGING tt_log[].
**        RETURN.
**      ENDIF.
**    ENDIF.
**
***  LOOP AT tt_lenum INTO DATA(rt_lenum).
**    SELECT SINGLE * INTO @DATA(r_lein) FROM lein WHERE lenum EQ @rt_lenum-lenum.
**    CHECK sy-subrc NE 0.
**    MOVE abap_true TO error.
**    PERFORM mensaje USING 'E' '00' '398' rt_lenum-lenum 'no existe' space space CHANGING tt_log[].
**    RETURN.
***  ENDLOOP.
***  ENDIF.
***ENDIF.
***    CHECK error NE abap_true.
**    IF rt_lenum-vbeln IS NOT INITIAL.
**      rt_lenum-sobkz_to = 'E'. rt_lenum-sonum_from+0(10) = rt_lenum-vbeln. rt_lenum-sonum_from+10(6) = rt_lenum-posnr.
**    ELSEIF rt_lenum-ebeln IS NOT INITIAL.
**      rt_lenum-sobkz_to = 'E'. rt_lenum-sonum_from+0(10) = rt_lenum-ebeln. rt_lenum-sonum_from+10(1) = '0'. rt_lenum-sonum_from+11(5) = rt_lenum-posnr.
**    ELSE.
**      CLEAR rt_lenum-sobkz_to.
**    ENDIF.
** fin del jtm 12.11.2022
**  LOOP AT tt_lenum INTO DATA(rt_lenum).
**
**    DATA: n_reg      TYPE i,
**          sobkz_from TYPE lqua-sobkz.
***        sonum  type ltap-sonum.
**    CLEAR: n_reg, sobkz_from.
**    LOOP AT tt_lenum INTO rt_lenum.
**      SELECT SINGLE * INTO r_lein FROM lein WHERE lenum EQ rt_lenum-lenum.
**      SELECT * INTO  TABLE @DATA(tt_lqua) FROM lqua
**                                             WHERE lgnum EQ @r_lein-lgnum
**                                               AND lenum EQ @r_lein-lenum
**                                               AND lgtyp EQ @r_lein-lgtyp
**                                               AND lgpla EQ @r_lein-lgpla.
***                                           AND werks EQ @r_lein-werks
***                                           AND lgort EQ @r_lein-lgort.
**      IF sy-dbcnt > 1.
**        MOVE abap_true TO error.
**        PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'palet mix' space space CHANGING tt_log[].
**      ELSE.
**        READ TABLE tt_lqua INTO DATA(rt_lqua) INDEX 1.
**
**        rt_lenum-sobkz_from = rt_lqua-sobkz.
**
**        IF rt_lqua-bestq IS NOT INITIAL.
**          MOVE abap_true TO error.
**          PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'en status de stock no libre' space space CHANGING tt_log[].
**        ELSE.
**          CASE rt_lenum-sobkz_to.
**            WHEN 'E'.
**              IF rt_lqua-sonum EQ rt_lenum-sonum_to.
**                MOVE abap_true TO error.
**                PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'ya pertenece a ese stock de cliente' space space CHANGING tt_log[].
**              ENDIF.
**            WHEN OTHERS.
**              IF rt_lqua-sobkz IS INITIAL.
**                MOVE abap_true TO error.
**                PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'el palet no es de stock de cliente' space space CHANGING tt_log[].
***              ELSEIF rt_lenum-libera NE abap_true.
***                MOVE abap_true TO error.
***                PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'para quitar stock de cliente hay que marcar libera' space space CHANGING tt_log[].
**              ENDIF.
**          ENDCASE.
**          CHECK error NE abap_true AND rt_lenum-libera NE abap_true.
**          SELECT SINGLE mtart INTO @DATA(mtart) FROM mara WHERE matnr EQ @rt_lqua-matnr.
**          CHECK rt_lqua-matnr NE r_vbap-matnr
**            AND mtart         NE 'ZPSE'.
***          El material de la matricula &, no es el del pedido &/&
**
**          MOVE abap_true TO error.
**          PERFORM mensaje USING 'E' 'ZSWM_UTIL' '002' r_lein-lenum rt_lenum-vbeln rt_lenum-posnr space CHANGING tt_log[].
**
**        ENDIF.
**      ENDIF.
**      IF error NE abap_true.
**
**        ADD 1 TO n_reg.
**        IF n_reg EQ 1.
**          rt_lenum-sobkz_from = rt_lqua-sobkz.
**        ELSE.
**          IF rt_lenum-sobkz_from NE rt_lqua-sobkz.
**            MOVE abap_true TO error.
**            PERFORM mensaje USING 'E' '00' '398' r_lein-lenum 'Tiene asignación distinta que la anterior UA' space space CHANGING tt_log[].
**          ENDIF.
**        ENDIF.
**      ENDIF.
**      CHECK error EQ abap_true.
**      EXIT.
**    ENDLOOP.
***    ENDIF.
***  ENDIF.
**
**    CHECK error NE abap_true.
***   status origen        destino    movimiento
***   libre    E            space      411
***   libre  space            E        412
**   libre    E              E        309
** fin del jtm 12.11.2022
*    DATA: gm_item    TYPE TABLE OF
*          bapi2017_gm_item_create WITH HEADER LINE.
*    DATA: gm_header  TYPE bapi2017_gm_head_01.
*    DATA: gm_code    TYPE bapi2017_gm_code.
**  DATA: gm_headret TYPE bapi2017_gm_head_ret.
*    DATA: gm_return  TYPE bapiret2 OCCURS 0 WITH HEADER LINE.
*    DATA: gm_retmtd  TYPE bapi2017_gm_head_ret-mat_doc.
*
*    CLEAR: gm_return, gm_retmtd.
*    REFRESH: gm_return, gm_item.
*    CLEAR: gm_header, gm_code.
*    gm_header-pstng_date = sy-datum.
*    gm_header-doc_date   = sy-datum.
*    gm_code-gm_code      = '04'.
*  LOOP AT tt_lenum INTO DATA(rt_lenum).
*
**    DATA: gm_item    TYPE TABLE OF
**          bapi2017_gm_item_create WITH HEADER LINE.
**    DATA: gm_header  TYPE bapi2017_gm_head_01.
**    DATA: gm_code    TYPE bapi2017_gm_code.
***  DATA: gm_headret TYPE bapi2017_gm_head_ret.
**    DATA: gm_return  TYPE bapiret2 OCCURS 0 WITH HEADER LINE.
**    DATA: gm_retmtd  TYPE bapi2017_gm_head_ret-mat_doc.
**
**    CLEAR: gm_return, gm_retmtd.
**    REFRESH: gm_return, gm_item.
**    CLEAR: gm_header, gm_code.
**    gm_header-pstng_date = sy-datum.
**    gm_header-doc_date   = sy-datum.
**    gm_code-gm_code      = '04'.
*
**    LOOP AT tt_lenum INTO rt_lenum.
*    SELECT SINGLE * INTO @data(r_lein) FROM lein WHERE lenum EQ @rt_lenum-lenum.
*    SELECT * INTO rt_lqua UP TO 1 ROWS FROM lqua BYPASSING BUFFER
*                                           WHERE lgnum EQ r_lein-lgnum
*                                             AND lenum EQ r_lein-lenum
*                                             AND lgtyp EQ r_lein-lgtyp
*                                             AND lgpla EQ r_lein-lgpla.
*    ENDSELECT.
*    data: lips_sonum type lips-sonum,
*          lips_sobkz type lips-sobkz.
*    select SINGLE sobkz sonum into (lips_sobkz, lips_sonum) from lips where vbeln eq rt_lenum-vbeln_vl
*                                                                        and posnr eq rt_lenum-posnr_vl.
*
*    check rt_lqua-sonum ne lips_sonum.
*
*    CLEAR gm_item.
*    gm_item-material   =
*    gm_item-move_mat   = rt_lqua-matnr.
*    gm_item-batch      = rt_lqua-charg.
*    gm_item-move_batch = rt_lqua-charg.
*    gm_item-plant      =
*    gm_item-move_plant = rt_lqua-werks.
*    gm_item-stge_loc   =
*    gm_item-move_stloc = rt_lqua-lgort.
*    gm_item-unload_pt  = |{ rt_lenum-lenum ALPHA = OUT }|.
*    CONCATENATE '411_' gm_item-unload_pt INTO gm_item-unload_pt SEPARATED BY '/'.
*    CONDENSE gm_item-unload_pt NO-GAPS.
*    gm_item-entry_qnt  = rt_lqua-verme.
*    gm_item-entry_uom  = rt_lqua-meins.
**    gm_code-gm_code      = '04'.
*    if  rt_lqua-sonum is not INITIAL and lips_sonum is not INITIAL.
*
**    IF rt_lenum-sobkz_from EQ rt_lenum-sobkz_to AND rt_lenum-sobkz_to EQ 'E'.
**    if sobkz eq 'E' and libera ne abap_true.
*      gm_item-spec_stock     = rt_lqua-sobkz.
*      gm_item-val_sales_ord  = rt_lqua-sonum+0(10).
*      gm_item-val_s_ord_item = rt_lqua-sonum+10(6).
*
*      gm_item-sales_ord      = rt_lenum-vbeln.
*      gm_item-s_ord_item     = rt_lenum-posnr.
*      gm_item-move_type      = '413'.
**    ELSEIF rt_lenum-sobkz_from EQ 'E' AND rt_lenum-sobkz_to EQ space.
*    elseif rt_lqua-sonum is not INITIAL.
**   Liberamos
**    IF libera EQ abap_true AND rt_lqua-bestq EQ space AND rt_lqua-sobkz EQ 'E'.
*      gm_item-spec_stock     = rt_lqua-sobkz.
*      gm_item-val_sales_ord  =
*      gm_item-sales_ord      = rt_lqua-sonum+0(10).
*      gm_item-val_s_ord_item =
*      gm_item-s_ord_item     = rt_lqua-sonum+10(6).
*      gm_item-move_type      = '411'.
*
**    ELSEIF rt_lenum-sobkz_from EQ space AND rt_lenum-sobkz_to EQ 'E'
*     elseif lips_sonum is not INITIAL.
**      rt_lqua-bestq EQ space AND sobkz EQ 'E' AND rt_lqua-bestq NE 'E'.
*      gm_item-spec_stock     = 'E'.
*      gm_item-val_sales_ord  =
*      gm_item-sales_ord      = rt_lenum-sonum_to+0(10).
*      gm_item-val_s_ord_item =
*      gm_item-s_ord_item     = rt_lenum-sonum_to+10(6).
*      gm_item-move_type      = '412'.
*    ENDIF.
**    endif.
*    APPEND gm_item.
*
*    CLEAR: r_sonum_chng.
*    r_sonum_chng-lenum = rt_lenum-lenum.
*    r_sonum_chng-vbeln = rt_lenum-vbeln_vl.
*    r_sonum_chng-sonum_from = rt_lenum-sonum_from.
*    r_sonum_chng-sonum_to = rt_lenum-sonum_to.
*    r_sonum_chng-ernam = sy-uname.
*    r_sonum_chng-erdat = sy-uname.
*    r_sonum_chng-erzet = sy-uzeit.
*
*    APPEND r_sonum_chng TO rt_sonum_chng.
*
*
*  ENDLOOP.
*  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
*    EXPORTING
*      goodsmvt_header  = gm_header
*      goodsmvt_code    = gm_code
*    IMPORTING
*      goodsmvt_headret = gm_headret
*      materialdocument = gm_retmtd
*    TABLES
*      goodsmvt_item    = gm_item
*      return           = tt_log[].
*  READ TABLE tt_log WITH KEY type = 'E' TRANSPORTING NO FIELDS.
*  IF sy-subrc EQ 0.
*    error = abap_true.
*    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*  ELSE.
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
**     EXPORTING
**       WAIT          =
**     IMPORTING
**       RETURN        =
*      .
**
*    MODIFY zswmt_sonum_chng FROM TABLE rt_sonum_chng.

*  ENDIF.
*  CHECK error NE abap_true.
**    SOBKZ
*
**    SPSTCK_PHY
*
ENDFUNCTION.
