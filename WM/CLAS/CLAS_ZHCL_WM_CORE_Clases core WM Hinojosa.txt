
class ZHCL_WM_CORE definition
  public
  inheriting from ZHCL_CORE
  final
  create public .

public section.

  data _WERKS type WERKS_D read-only .
  data _LGORT type LGORT_D read-only .
  data _LGNUM type LGNUM read-only .
  class-data S_CLASS_LABEL type MSGID read-only value 'ZHCL_WM_CORE' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    raising
      ZCX_EXCEPTION .
  class-methods S_GET_LGNUM_4_WERKS_AND_LGORT
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    returning
      value(R_LGNUM) type LGNUM .
  class-methods S_GET_WERKS_4_LGNUM_AND_LGORT
    importing
      !I_LGORT type LGORT_D
      !I_LGNUM type LGNUM
    returning
      value(R_WERKS) type WERKS_D .
  methods CREATE_TO_4_MBLNR_ZEILE
    importing
      !I_MBLNR type MBLNR
      !I_MBLPO type MBLPO
      !I_MJAHR type MJAHR
      !I_LENUM type LENUM
    returning
      value(R_TANUM) type TANUM
    raising
      ZCX_EXCEPTION .
  methods CREATE_TRITE_4_TBPOS_LENUM
    importing
      !I_TBNUM type TBNUM
      !I_TBPOS type TBPOS
      !I_LENUM type LENUM
    returning
      value(R_S_TRITE) type L03B_TRITE .
  methods CREATE_TO_4_TR_W_TRITE
    importing
      !I_TBNUM type TBNUM
      !I_T_TRITE type L03B_TRITE_T
      !I_COMMIT type RL03ACOMIT default 'X'
    returning
      value(R_TANUM) type TANUM .
  methods GET_PP_WM_ASP
    importing
      !I_R_T_PRVBE type SHP_PRVBE_RANGE_T optional
      !I_R_T_ABLAD type SHP_ABLAD_RANGE_T optional
    returning
      value(R_T_PVBE) type PVBEX .
  methods BUILD_PP_WM_ASP_ABLAD
    importing
      !I_ARBPL type ARBPL
      !I_PORTABOBINAS type NUMC2
    returning
      value(R_ABLAD) type ABLAD .
protected section.
private section.
endclass. "ZHCL_WM_CORE definition
class ZHCL_WM_CORE implementation.
METHOD build_pp_wm_asp_ablad.

**********************************************************************
* Paráemtros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** ARBPL

  SELECT COUNT(*) UP TO 1 ROWS
    FROM crhd
   WHERE objty = 'A' "PdT
     AND begda <= sy-datum
     AND endda >= sy-datum
     AND arbpl = i_arbpl
     AND werks = me->_werks
     AND verwe = '0001' "Máquina
     AND lvorm = space.

  CHECK sy-subrc = 0.

***** PORTABOBINAS

  CHECK i_portabobinas > 0 AND i_portabobinas <= 6.

**********************************************************************
* Lógica
**********************************************************************

****** CONCATENATE

  r_ablad = |{ i_arbpl }{ '-' }{ i_portabobinas }|.

ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message TYPE sstring.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  IF ( i_werks IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' ) ).
  ENDIF.

  IF ( i_lgort IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** Llamamos al SUPER

  super->constructor( ).

****** GET/SET DATA

  me->_lgnum = zhcl_wm_core=>s_get_lgnum_4_werks_and_lgort( i_werks = i_werks i_lgort = i_lgort ).

  IF ( me->_lgnum IS NOT INITIAL ).
    me->_werks = i_werks.
    me->_lgort = i_lgort.
  ELSE.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-001 ) ) ).
  ENDIF.

ENDMETHOD.
METHOD create_to_4_mblnr_zeile.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_trite TYPE l03b_trite_t.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** GET TBNUM

  SELECT SINGLE *
    FROM mseg
    INTO @DATA(ls_mseg)
   WHERE mblnr = @i_mblnr
     AND zeile = @i_mblpo
     AND mjahr = @i_mjahr
     AND werks = @me->_werks
     AND lgort = @me->_lgort.

**** CHECKS

  IF ( sy-subrc <> 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '003' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-003 ) ) ).
  ENDIF.

  IF ( ls_mseg-tbnum IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '004' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-004 ) ) ).
  ENDIF.

***** GET TBNUM DATA

  SELECT SINGLE *
    FROM ltbk
    INTO @DATA(ls_ltbk)
   WHERE lgnum = @me->_lgnum
     AND tbnum = @ls_mseg-tbnum.

**** CHECKS

  IF ( sy-subrc <> 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '005' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-005 ) ) ).
  ENDIF.

  "Coemntamos para devolver número de OT
*  IF ( ls_ltbk-statu = 'E' ).
*    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '006' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-006 ) ) ).
*  ENDIF.

***** GET TBPOS DATA

  SELECT SINGLE *
    FROM ltbp
    INTO @DATA(ls_ltbp)
   WHERE lgnum = @me->_lgnum
     AND tbnum = @ls_mseg-tbnum
     AND tbpos = @ls_mseg-tbpos.

  IF ( sy-subrc <> 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '007' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-007 ) ) ).
  ENDIF.

  "Si ya tiene OT creada por proceso auto, devolvemos número.
  IF ( ls_ltbp-elikz <> space ).
*    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '008' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-008 ) ) ).
    r_tanum = ls_ltbp-tanum.
    EXIT.
  ENDIF.

****** CREATE OT

  clear: sy-msgno, sy-msgty.
  r_tanum = me->create_to_4_tr_w_trite( i_tbnum = ls_mseg-tbnum i_t_trite = VALUE #( ( me->create_trite_4_tbpos_lenum( i_tbnum = ls_mseg-tbnum i_tbpos = ls_mseg-tbpos i_lenum = i_lenum ) ) ) ).
  IF r_tanum IS INITIAL AND sy-msgno IS NOT INITIAL AND sy-msgty = 'E'.
    DATA(wl_textid) = VALUE scx_t100key( 	msgid = sy-msgid msgno = sy-msgno attr1 = sy-msgv1 attr2 = sy-msgv2 attr3 = sy-msgv3 attr4 = sy-msgv4 ).

    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = wl_textid ).
  ENDIF.

ENDMETHOD.
METHOD create_to_4_tr_w_trite.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** Creamos OT

  CALL FUNCTION 'L_TO_CREATE_TR'
    EXPORTING
      i_lgnum                        = me->_lgnum
      i_tbnum                        = i_tbnum
*     I_REFNR                        = ' '
*     I_SQUIT                        = ' '
*     I_NIDRU                        = ' '
*     I_DRUKZ                        = ' '
*     I_LDEST                        = ' '
*     I_TBELI                        = ' '
*     I_NOSPL                        = ' '
*     I_UPDATE_TASK                  = ' '
      i_commit_work                  = i_commit
*     I_BNAME                        = SY-UNAME
*     I_TEILK                        = ' '
*     I_SOLEX                        = 0
*     I_PERNR                        = 0
*     I_RSNUM                        = ' '
*     I_LDEST_LANG                   = ' '
      it_trite                       = i_t_trite
    IMPORTING
      e_tanum                        = r_tanum
*     E_TEILK                        =
*   TABLES
*     T_LTAK                         =
*     T_LTAP_VB                      =
*     T_WMGRP_MSG                    =
    EXCEPTIONS
      foreign_lock                   = 1
      qm_relevant                    = 2
      tr_completed                   = 3
      xfeld_wrong                    = 4
      ldest_wrong                    = 5
      drukz_wrong                    = 6
      tr_wrong                       = 7
      squit_forbidden                = 8
      no_to_created                  = 9
      update_without_commit          = 10
      no_authority                   = 11
      preallocated_stock             = 12
      partial_transfer_req_forbidden = 13
      input_error                    = 14
      error_message                  = 15
      OTHERS                         = 16.

*  IF sy-subrc = 15.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

*** Tratamos resultado

ENDMETHOD.
METHOD CREATE_TRITE_4_TBPOS_LENUM.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** GET TBNUM DATA

  SELECT SINGLE *
    FROM ltbk
    INTO @DATA(ls_ltbk)
   WHERE lgnum = @me->_lgnum
     AND tbnum = @i_tbnum.

**** CHECKS

  IF ( sy-subrc <> 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '005' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-005 ) ) ).
  ENDIF.

  IF ( ls_ltbk-statu = 'E' ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '006' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-006 ) ) ).
  ENDIF.

***** GET TBPOS DATA

  SELECT SINGLE *
    FROM ltbp
    INTO @DATA(ls_ltbp)
   WHERE lgnum = @me->_lgnum
     AND tbnum = @i_tbnum
     AND tbpos = @i_tbpos.

  IF ( sy-subrc <> 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '007' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-007 ) ) ).
  ENDIF.

  IF ( ls_ltbp-elikz <> space OR ls_ltbp-tanum IS NOT INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '008' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-008 ) ) ).
  ENDIF.

***** GET LENUM DATA

  SELECT SINGLE *
    FROM lqua
    INTO @DATA(ls_lqua)
   WHERE lgnum = @me->_lgnum
     AND lgort = @me->_lgort
     AND werks = @me->_werks
     AND matnr = @ls_ltbp-matnr
     AND charg = @ls_ltbp-charg
     AND lenum = @i_lenum.

  IF ( sy-subrc <> 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '008' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-008 ) ) ).
  ENDIF.

****** FILL DATA

  r_s_trite-tbpos = ls_ltbp-tbpos.
  r_s_trite-altme = ls_ltbp-meins.
  r_s_trite-anfme = ls_ltbp-menge.
  r_s_trite-charg = ls_ltbp-charg.
  r_s_trite-letyp = ls_lqua-letyp.

  CASE ls_ltbk-trart.
    WHEN 'A'.

      "Origen
      r_s_trite-vltyp = ls_lqua-lgtyp.
      r_s_trite-vlpla = ls_lqua-lgpla.

      "Destino
      r_s_trite-nltyp = ls_ltbk-nltyp.
      r_s_trite-nlpla = ls_ltbk-nlpla.

      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = i_lenum
        IMPORTING
          output          = r_s_trite-vlenr
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      IF sy-subrc <> 0.
        r_s_trite-vlenr = ls_lqua-lenum.
      ENDIF.

    WHEN 'E'.

      "Origen
      r_s_trite-vltyp = ls_ltbk-vltyp.
      r_s_trite-vlpla = ls_ltbk-vlpla.

      "Destino
      r_s_trite-nltyp = ls_lqua-lgtyp.
      r_s_trite-nlpla = ls_lqua-lgpla.

      CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
        EXPORTING
          input           = i_lenum
        IMPORTING
          output          = r_s_trite-nlenr
        EXCEPTIONS
          check_failed    = 1
          not_numeric     = 2
          t344_get_failed = 3
          wrong_length    = 4
          OTHERS          = 5.
      IF sy-subrc <> 0.
        r_s_trite-nlenr = ls_lqua-lenum.
      ENDIF.

    WHEN OTHERS.

      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '010' i_msgid = zhcl_wm_core=>s_class_label i_msgty = 'E' i_message = CONV #( text-010 ) ) ).
      EXIT.

  ENDCASE.

ENDMETHOD.
METHOD get_pp_wm_asp.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET/SET RETURN

  SELECT *
    FROM pvbe
    INTO CORRESPONDING FIELDS OF TABLE @r_t_pvbe
   WHERE werks =  @me->_werks   "Centro
     AND prvbe IN @i_r_t_prvbe  "ASP
     AND ablad IN @i_r_t_ablad. "Puesto de descarga

ENDMETHOD.
METHOD s_get_lgnum_4_werks_and_lgort.

**********************************************************************
* Validaciones
**********************************************************************

****** iMPORT

  CHECK i_werks IS NOT INITIAL AND i_lgort IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** GET/SET DATA

  "Obtenemos Número almacén para centro y almacén MM
  SELECT SINGLE lgnum
    FROM t320
    INTO r_lgnum
   WHERE werks EQ i_werks
     AND lgort EQ i_lgort.

ENDMETHOD.
METHOD s_get_werks_4_lgnum_and_lgort.

**********************************************************************
* Validaciones
**********************************************************************

****** iMPORT

  CHECK i_lgnum IS NOT INITIAL AND i_lgort IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** GET/SET DATA

  "Obtenemos Número almacén para centro y almacén MM
  SELECT SINGLE werks
    FROM t320
    INTO r_werks
   WHERE lgort EQ i_lgort
     AND lgnum EQ i_lgnum.

ENDMETHOD.
