
class ZCL_UTILS_WM definition
  public
  inheriting from ZCL_UTILS_MM
  create public .

public section.

  data _LGNUM type LGNUM read-only .

  class-methods S_GET_LGNUM_4_WERKS_AND_LGORT
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    returning
      value(E_LGNUM) type LGNUM
    exceptions
      NO_VALUE
      NO_LGNUM_FOR_WERKS_LGORT .
  methods CHECK_MATNR_IS_EXTENDED_4_WM
    importing
      !I_MATNR type MATNR
      !I_T_R_LGTYP type ZTT_R_LGTYP optional
    exporting
      !E_MLGN_DATA type BOOLEAN
      !E_MLGT_DATA type BOOLEAN .
  methods CHECK_WM_LGTYP_EXISTS
    importing
      !I_T_R_LGTYP type ZTT_R_LGTYP
    exceptions
      NO_VALUE
      NO_EXIST_LGTYP .
  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    raising
      ZCX_WM_EXCEPTION
      ZCX_MM_EXCEPTION .
  methods CREATE_TO_4_POSTING_CHANGE
    importing
      !I_UBNUM type LTAK-UBNUM
      !I_T_R_LQNUM type ZTT_R_LQNUM optional
      !I_UPDTASK type ABAP_BOOL
      !I_COMMIT type ABAP_BOOL
    exporting
      !E_RETURN type BAPIRET2
    returning
      value(R_TANUM) type TANUM .
  methods CREATE_TO_MOVE_SU
    importing
      !I_LENUM type LENUM
      !I_LETYP type LVS_LETYP
      !I_NEW_LGTYP type LGTYP
      !I_NEW_LGPLA type LGPLA
      !I_COMMIT type ABAP_BOOL default 'X'
    exporting
      !E_RETURN type BAPIRET2
    returning
      value(R_TANUM) type TANUM .
  methods CREATE_TO_MULTIPLE_4_LQNUMS
    importing
      !I_BWLVS type BWLVS
      !I_UPDTASK type ABAP_BOOL default ''
      !I_COMMIT type ABAP_BOOL default 'X'
      !I_T_OT_DATA type ZTT_WM_UTILS_OT_CREATION
    exporting
      value(E_RETURN) type BAPIRET2
    returning
      value(R_TANUM) type TANUM .
  methods CREATE_TO_MULTIPLE
    importing
      !I_BWLVS type BWLVS
      !I_UPDTASK type ABAP_BOOL default ''
      !I_COMMIT type ABAP_BOOL default 'X'
      !I_T_LTAP_CREATE type MSR_T_INSP_WMC_LTAP_CREATE
    exporting
      !E_RETURN type BAPIRET2
    returning
      value(R_TANUM) type TANUM .
  methods CREATE_TO_SINGLE
    importing
      !I_BWLVS type BWLVS
      !I_MATNR type MATNR
      !I_CHARG type CHARG_D
      !I_BESTQ type BESTQ optional
      !I_SOBKZ type SOBKZ optional
      !I_SONUM type LVS_SONUM optional
      !I_LETYP type LVS_LETYP
      !I_ANFME type RL03TANFME
      !I_ALTME type LRMEI
      !I_VLTYP type LTAP_VLTYP
      !I_VLBER type LTAP_VLBER default '001'
      !I_VLPLA type LTAP_VLPLA
      !I_VLENR type LTAP_VLENR
      !I_NLTYP type LTAP_NLTYP
      !I_NLBER type LTAP_NLBER default '001'
      !I_NLPLA type LTAP_NLPLA
      !I_NLENR type LTAP_NLENR
      !I_UPDTASK type ABAP_BOOL default ''
      !I_COMMIT type ABAP_BOOL default 'X'
    exporting
      !E_RETURN type BAPIRET2
    returning
      value(R_TANUM) type TANUM .
  methods CREATE_TO_4_TR
    importing
      !I_TBNUM type TBNUM
      !I_T_TRITE type L03B_TRITE_T
      !I_COMMIT type RL03ACOMIT default 'X'
    returning
      value(R_TANUM) type TANUM .
  methods NNNN__CREATE_TO_4_MBLNR
    importing
      !I_MBLNR type MBLNR
      !I_MJAHR type MJAHR
    returning
      value(R_RETURN) type BAPIRET2_T .
  methods GET_WM_LAGP_DATA
    importing
      !I_T_R_LGTYP type ZTT_R_LGTYP
      !I_T_R_LGPLA type ZTT_R_LGPLA optional
    returning
      value(E_T_LAGP) type ZTT_LAGP
    raising
      ZCX_WM_EXCEPTION .
  methods GET_WM_LAGP_LIST
    importing
      !I_T_R_LGTYP type ZTT_R_LGTYP optional
      !I_T_R_LGBER type ZTT_R_LGBER optional
      !I_T_R_LGPLA type ZTT_R_LGPLA optional
      !I_T_R_LPTYP type ZTT_R_LPTYP optional
    returning
      value(E_T_LAGP) type ZTT_LAGP .
  methods GET_WM_LQUA_DATA
    importing
      !I_T_R_LQNUM type ZTT_R_LQNUM optional
      !I_T_R_LGTYP type ZTT_R_LGTYP optional
      !I_T_R_LGPLA type ZTT_R_LGPLA optional
      !I_T_R_MATNR type ZTT_R_MATNR optional
      !I_T_R_CHARG type ZTT_R_CHARG optional
      !I_T_R_LENUM type ZTT_R_LENUM optional
    returning
      value(E_S_LQUA_DATA) type ZTT_LQUA .
  methods GET_WM_MATNR_DATA_LIST
    importing
      !I_T_R_MATNR type ZTT_R_MATNR
      !I_T_R_LGTYP type ZTT_R_LGTYP optional
    exporting
      !E_T_MLGN type ZTT_MLGN
      !E_T_MLGT type ZTT_MLGT
    raising
      ZCX_WM_EXCEPTION .
  methods READ_MATNR_WM_DATA
    importing
      !I_MATNR type MATNR
      !I_LGTYP type LGTYP
    exporting
      !E_MLGN type MLGN
      !E_MLGT type MLGT
    raising
      ZCX_WM_EXCEPTION .
  methods CHECK_LGTYP_EXISTS
    importing
      !I_LGTYP type LGTYP
    returning
      value(E_CHECK) type BOOLEAN .
  methods CREATE_LGPLA
    importing
      !I_S_LAGP type LAGP
    returning
      value(R_BAPIRET2) type BAPIRET2 .
  methods CREATE_LGPLA_LIST
    importing
      !I_T_LGPLA type ZTT_LGPLA
    returning
      value(R_T_BAPIRET2) type BAPIRET2_T
    raising
      ZCX_EXCEPTION .
  methods BUILD_L03B_TRITE_T_4_TBNUM
    importing
      !I_TBNUM type TBNUM
    returning
      value(R_T_TRITE) type L03B_TRITE_T .
  methods BUILD_L03B_TRITE_4_TBPOS
    importing
      !I_TBNUM type TBNUM
      !I_TBPOS type TBPOS .
  class-methods S_CHECK_AUTH_LGNUM
    importing
      !I_LGNUM type LGNUM
      !I_USER type UNAME
    returning
      value(R_IS_AUTHORIZED) type BOOLEAN .
protected section.
private section.

  methods _SET_LGNUM_4_MM_DATA
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    raising
      ZCX_WM_EXCEPTION
      ZCX_MM_EXCEPTION .
endclass. "ZCL_UTILS_WM definition
class ZCL_UTILS_WM implementation.
METHOD _set_lgnum_4_mm_data.

**********************************************************************
* Local parameters
**********************************************************************

  DATA: lv_check    TYPE boolean,
        lv_msgv1    TYPE syst_msgv,
        lv_msgv2    TYPE syst_msgv,
        lv_msgv3    TYPE syst_msgv,
        lv_msgv4    TYPE syst_msgv,
        lv_message  TYPE sstring.

**********************************************************************
* Validaciones
**********************************************************************

** Centro

  me->check_werks_exists(
    EXPORTING
      i_werks        = i_werks     " Centro
    EXCEPTIONS
      no_value       = 1
      no_exist_werks = 2
      others         = 3
  ).
  IF sy-subrc <> 0.

    CLEAR: lv_message.
    MOVE text-001 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno   = '001' i_msgid   = me->zif_msg_utils~_c_cl_msgid_label i_msgty   = 'E' i_message = lv_message ).

  ENDIF.

** Almacén

  me->check_lgort_exists(
    EXPORTING
      i_werks        = i_werks    " Centro
      i_lgort        = i_lgort    " Almacén
    EXCEPTIONS
      no_value       = 1
      no_exist_werks = 2
      no_exist_lgort = 3
      others         = 4
  ).
  IF sy-subrc <> 0.

    CLEAR: lv_message.
    MOVE text-002 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno   = '001' i_msgid   = me->zif_msg_utils~_c_cl_msgid_label i_msgty   = 'E' i_message = lv_message ).

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Número de almacén

  zcl_utils_wm=>s_get_lgnum_4_werks_and_lgort(
    EXPORTING
      i_werks                  = i_werks    " Centro
      i_lgort                  = i_lgort    " Almacén
    RECEIVING
      e_lgnum                  = _lgnum    " Núm.almacén/Complejo alm.
    EXCEPTIONS
      no_value                 = 1
      no_lgnum_for_werks_lgort = 2
      others                   = 3
  ).
  IF ( sy-subrc NE 0 OR _lgnum IS INITIAL ).

    MOVE i_werks TO lv_msgv1.
    MOVE i_lgort TO lv_msgv2.
    MOVE text-003 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '003' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_msgv2 = lv_msgv2 i_message = lv_message ).

  ENDIF.

ENDMETHOD.
  method BUILD_L03B_TRITE_4_TBPOS.
  endmethod.
METHOD build_l03b_trite_t_4_tbnum.

**********************************************************************
* Parámetros locales
**********************************************************************

****** TABLES

  DATA: lt_ltbp TYPE TABLE OF ltbp.

****** STRUCTURES

  DATA: ls_ltbk  TYPE ltbk,
        ls_trite TYPE l03b_trite.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  CHECK i_tbnum IS NOT INITIAL.


**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** GET NT DATA

**** LTBK

  SELECT SINGLE *
    FROM ltbk
    INTO CORRESPONDING FIELDS OF @ls_ltbk
   WHERE lgnum EQ @me->_lgnum
     AND tbnum EQ @i_tbnum.

**** LTBP

  SELECT *
    FROM ltbp
    INTO CORRESPONDING FIELDS OF TABLE @lt_ltbp
   WHERE lgnum EQ @me->_lgnum
     AND tbnum EQ @i_tbnum.

***** WORK AND CHECK DATA

  CASE ls_ltbk-trart.
    WHEN 'A'. "Salidas

    WHEN 'E'. "Entradas

    WHEN OTHERS.
      EXIT.
  ENDCASE.

***** BUILD TRITE

  LOOP AT lt_ltbp INTO DATA(ls_ltbp).

    CLEAR: ls_trite.
    ls_trite-tbpos = ls_ltbp-tbpos.
    ls_trite-altme = ls_ltbp-meins.
    ls_trite-anfme = ls_ltbp-menge.
    ls_trite-charg = ls_ltbp-charg.

    IF ( ls_ltbk-trart EQ 'A' ).

      CHECK ls_ltbk-nltyp IS INITIAL.
      CHECK ls_ltbk-nlpla IS INITIAL.


*          ls_trite-nltyp = ls_ltbk-nltyp.
*    ls_trite-nlpla = ls_ltbk-nlpla.
*

    ENDIF.


    ls_trite-vlpla = ls_ltbk-vlpla.
    ls_trite-vltyp = ls_ltbk-vltyp.
*    ls_trite-letyp = ls_ltbk-letyp.

    APPEND ls_trite TO r_t_trite.

  ENDLOOP.




ENDMETHOD.
METHOD CHECK_LGTYP_EXISTS.



    SELECT COUNT(*)
      FROM t301
     WHERE lgnum EQ _lgnum
       AND lgtyp EQ i_lgtyp.

    IF ( sy-subrc = 0 ).
      e_check = abap_true.
    ENDIF.

  ENDMETHOD.
METHOD check_matnr_is_extended_4_wm.

**********************************************************************
* Validaciones
**********************************************************************

** MLGN

  SELECT COUNT(*)
    FROM mlgn
   WHERE matnr EQ i_matnr
     AND lgnum EQ _lgnum.

  IF ( sy-subrc EQ 0 ).
    e_mlgn_data = abap_true.
  ELSE.
    e_mlgn_data = abap_false.
  ENDIF.

** MLGT

  SELECT COUNT(*)
    FROM mlgt
   WHERE matnr EQ i_matnr
     AND lgnum EQ _lgnum
     AND lgtyp IN i_t_r_lgtyp.

  IF ( sy-subrc EQ 0 ).
    e_mlgt_data = abap_true.
  ELSE.
    e_mlgt_data = abap_false.
  ENDIF.

ENDMETHOD.
METHOD CHECK_WM_LGTYP_EXISTS.

**********************************************************************
* Validaciones
**********************************************************************

** Parámetros IMPORT

  IF ( lines( i_t_r_lgtyp ) LE 0 ).
    RAISE no_value.
  ENDIF.

** Tipos de almacén

  "Comprobamos si existe el tipo de almacén en el NA
  SELECT COUNT(*)
    FROM t301
   WHERE lgnum EQ _lgnum
     AND lgtyp IN i_t_r_lgtyp.

  "se comprueba si existe
  IF ( sy-subrc NE 0 ). "Existe
    RAISE no_exist_lgtyp.
  ENDIF.

ENDMETHOD.
METHOD CONSTRUCTOR.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message TYPE sstring.

**********************************************************************
* Clase superior
**********************************************************************

  TRY.

    super->constructor( i_werks = i_werks i_lgort = i_lgort ).

  CLEANUP.

    CLEAR: _werks, _lgort.
*    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message(
*      i_msgno = '007'
*      i_msgid = 'ZCL_UTILS_WM'
*      i_msgty = 'E'
*      i_message = lv_message ).

  ENDTRY.


  IF ( _werks Is INITIAL OR _lgort IS INITIAL ).

    CLEAR lv_message.
    MOVE text-001 TO lv_message.

    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message(
      i_msgno = '001'
      i_msgid = 'ZCL_UTILS_WM'
      i_msgty = 'E'
      i_message = lv_message ).

  ENDIF.

**********************************************************************
* Valores de clase
**********************************************************************

  me->zif_msg_utils~_c_cl_msgid_label = 'ZCL_UTILS_WM'.

**********************************************************************
* Lógica
**********************************************************************

** Almacén WM

  TRY.

    me->_set_lgnum_4_mm_data( i_werks = _werks i_lgort = i_lgort ).

  CATCH zcx_wm_exception INTO DATA(lo_wm_exception).

    lo_wm_exception->if_t100_message~t100key-msgid = me->zif_msg_utils~_c_cl_msgid_label.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = lo_wm_exception->if_t100_message~t100key.

  ENDTRY.

  ENDMETHOD.
METHOD create_lgpla.

**********************************************************************
* Parámetros locales
**********************************************************************


**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** GENERAL

  IF ( i_s_lagp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
  ENDIF.

***** LGNUM

  IF ( i_s_lagp-lgnum IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
  ELSE.
    IF ( i_s_lagp-lgnum NE me->_lgnum ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
    ENDIF.
  ENDIF.

***** LGTYP

  IF ( i_s_lagp-lgtyp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
  ENDIF.

***** LGBER

  IF ( i_s_lagp-lgber IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
  ENDIF.

***** LGPLA

  IF ( i_s_lagp-lgpla IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
  ENDIF.

***** LPTYP

  IF ( i_s_lagp-lptyp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** SET LAGP

  CALL FUNCTION 'ZL_LAGP_HINZUFUEGEN'
    EXPORTING
      xlagp     = i_s_lagp
    exceptions
      no_insert = 1
      others    = 2.
  IF ( sy-subrc <> 0 ).
    r_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'L1' i_number = '500' ).
  ENDIF.

ENDMETHOD.
METHOD create_lgpla_list.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  IF ( lines( i_t_lgpla ) LE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** CREATE LGPLA

  LOOP AT i_t_lgpla INTO DATA(ls_lgpla).

    TRY .

      me->create_lgpla( i_s_lagp = ls_lgpla ).

      APPEND zcl_utils_wm=>zif_msg_utils~s_generate_bapiret2( i_type = 'S' i_id = 'L1' i_number = '016' ) TO r_t_bapiret2.

    CATCH zcx_exception INTO DATA(lo_eception).

      APPEND zcl_utils_wm=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = 'L1' i_number = '500' ) TO r_t_bapiret2.

    ENDTRY.

  ENDLOOP.





ENDMETHOD.
METHOD create_to_4_posting_change.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_lqua TYPE TABLE OF lqua,
        ls_lqua TYPE lqua.

  DATA: ls_lubu TYPE lubu,
        lv_lubu_qty TYPE lubu_menge.

  DATA: lt_lubqu TYPE TABLE OF lubqu,
        ls_lubqu TYPE lubqu.

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_ubnum IS INITIAL ).

    CLEAR: e_return.
    e_return-id     = me->zif_msg_utils~_c_cl_msgid_label.
    e_return-number = '010'.
    MOVE text-010 TO e_return-message.
    e_return-type   = 'E'.
    EXIT.

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** GET LQNUM DATA

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_lqua
    FROM lqua
   WHERE lgnum EQ me->_lgnum
     AND lqnum IN i_t_r_lqnum.

  IF ( sy-subrc NE 0 ).

    CLEAR: e_return.
    e_return-id     = me->zif_msg_utils~_c_cl_msgid_label.
    e_return-number = '008'.
    MOVE text-008 TO e_return-message.
    e_return-type   = 'E'.
    EXIT.

  ENDIF.

*** GET LUBU DATA

  SELECT SINGLE *
    FROM lubu
    INTO ls_lubu
   WHERE lgnum EQ me->_lgnum
     AND ubnum EQ i_ubnum.


  IF ( sy-subrc NE 0 ).

    CLEAR: e_return.
    e_return-id     = me->zif_msg_utils~_c_cl_msgid_label.
    e_return-number = '009'.
    MOVE text-009 TO e_return-message.
    e_return-type   = 'E'.
    EXIT.

  ENDIF.

*** FILL LUBU DATA

  CLEAR: lv_lubu_qty.
  MOVE ls_lubu-menge TO lv_lubu_qty.

  LOOP AT lt_lqua INTO ls_lqua.

    "Convierto a UN base
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr                    = ls_lqua-matnr
        i_in_me                    = ls_lqua-meins
        i_out_me                   = ls_lubu-meins
        i_menge                    = ls_lqua-gesme
      IMPORTING
        e_menge                    = ls_lqua-gesme
      EXCEPTIONS
        error_in_application       = 1
        error                      = 2
        OTHERS                     = 3.

    IF ( lv_lubu_qty GE ls_lqua-gesme ).

      CLEAR: ls_lubqu.
      MOVE ls_lqua-lqnum TO ls_lubqu-lqnum.
      MOVE ls_lqua-gesme TO ls_lubqu-menge.
*      MOVE ls_lubqu-nltyp TO

*      MOVE-CORRESPONDING ls_lqua TO ls_lubqu.
*
**      MOVE ls_lubu-meins TO ls_lubqu-.

      APPEND ls_lubqu TO lt_lubqu.

      lv_lubu_qty = lv_lubu_qty - ls_lubqu-menge.

    ELSE.

      CLEAR: ls_lubqu.
      MOVE ls_lqua-lqnum TO ls_lubqu-lqnum.
      MOVE ls_lqua-gesme TO lv_lubu_qty.

      APPEND ls_lubqu TO lt_lubqu.

      lv_lubu_qty = lv_lubu_qty - ls_lubqu-menge.

    ENDIF.

  ENDLOOP.

*** TO CREATION

  CALL FUNCTION 'L_TO_CREATE_POSTING_CHANGE'
    EXPORTING
      i_lgnum                            = me->_lgnum
      i_ubnum                            = i_ubnum
*     I_LUBUI                            = ' '
*     I_SQUIT                            = ' '
*     I_NIDRU                            = ' '
*     I_DRUKZ                            = ' '
*     I_LDEST                            = ' '
      i_update_task                      = i_updtask
      i_commit_work                      = i_commit
*     I_BNAME                            = SY-UNAME
*     I_SOLEX                            = 0
*     I_PERNR                            = 0
    IMPORTING
      e_tanum                            = r_tanum
    TABLES
      t_lubqu                            = lt_lubqu
*     T_LTAP_VB                          =
*     T_LTAK                             =
    EXCEPTIONS
      foreign_lock                       = 1
      tp_completed                       = 2
      xfeld_wrong                        = 3
      ldest_wrong                        = 4
      drukz_wrong                        = 5
      tp_wrong                           = 6
      squit_forbidden                    = 7
      no_to_created                      = 8
      update_without_commit              = 9
      no_authority                       = 10
      i_ubnum_or_i_lubu                  = 11
      bwlvs_wrong                        = 12
      material_not_found                 = 13
      manual_to_forbidden                = 14
      bestq_wrong                        = 15
      sobkz_missing                      = 16
      sobkz_wrong                        = 17
      meins_wrong                        = 18
      conversion_not_found               = 19
      no_quants                          = 20
      t_lubqu_required                   = 21
      le_bulk_quant_not_selectable       = 22
      quant_not_selectable               = 23
      quantnumber_initial                = 24
      kzuap_or_bin_location              = 25
      date_wrong                         = 26
      nltyp_missing                      = 27
      nlpla_missing                      = 28
      lgber_wrong                        = 29
      lenum_wrong                        = 30
      menge_wrong                        = 31
      menge_to_big                       = 32
      open_tr_kzuap                      = 33
      lock_exists                        = 34
      double_quant                       = 35
      quantity_wrong                     = 36
      OTHERS                             = 37.

  IF ( sy-subrc <> 0 ).

    CLEAR: e_return.
    e_return-id         = sy-msgid.
    e_return-number     = sy-msgno.
    e_return-message_v1 = sy-msgv1.
    e_return-message_v2 = sy-msgv2.
    e_return-message_v3 = sy-msgv3.
    e_return-message_v4 = sy-msgv4.

    CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
      EXPORTING
        id                 = sy-msgid
        number             = sy-msgno
        textformat         = 'ASC'
        message_v1         = sy-msgv1
        message_v2         = sy-msgv2
        message_v3         = sy-msgv3
        message_v4         = sy-msgv4
      IMPORTING
        message            = e_return-message.

    e_return-type   = 'E'.
    EXIT.

  ENDIF.

ENDMETHOD.
METHOD create_to_4_tr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** Creamos OT

  CALL FUNCTION 'L_TO_CREATE_TR'
    EXPORTING
      i_lgnum                        = me->_lgnum
      i_tbnum                        = i_tbnum
*     I_REFNR                        = ' '
*     I_SQUIT                        = ' '
*     I_NIDRU                        = ' '
*     I_DRUKZ                        = ' '
*     I_LDEST                        = ' '
*     I_TBELI                        = ' '
*     I_NOSPL                        = ' '
*     I_UPDATE_TASK                  = ' '
      i_commit_work                  = i_commit
*     I_BNAME                        = SY-UNAME
*     I_TEILK                        = ' '
*     I_SOLEX                        = 0
*     I_PERNR                        = 0
*     I_RSNUM                        = ' '
*     I_LDEST_LANG                   = ' '
      it_trite                       = i_t_trite
    IMPORTING
      e_tanum                        = r_tanum
*     E_TEILK                        =
*   TABLES
*     T_LTAK                         =
*     T_LTAP_VB                      =
*     T_WMGRP_MSG                    =
    EXCEPTIONS
      foreign_lock                   = 1
      qm_relevant                    = 2
      tr_completed                   = 3
      xfeld_wrong                    = 4
      ldest_wrong                    = 5
      drukz_wrong                    = 6
      tr_wrong                       = 7
      squit_forbidden                = 8
      no_to_created                  = 9
      update_without_commit          = 10
      no_authority                   = 11
      preallocated_stock             = 12
      partial_transfer_req_forbidden = 13
      input_error                    = 14
      OTHERS                         = 15.

*** Tratamos resultado

ENDMETHOD.
METHOD CREATE_TO_MOVE_SU.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** MOVE UA 2 NEW LOCATION

  CALL FUNCTION 'L_TO_CREATE_MOVE_SU' DESTINATION 'NONE'
    EXPORTING
      i_lenum               = i_lenum
      i_bwlvs               = '999'
*     I_LZNUM               = ' '
      i_nltyp               = i_new_lgtyp
*     I_NLBER               =
      i_nlpla               = i_new_lgpla
*     I_NPPOS               = ' '
      i_squit               = abap_true
      i_letyp               = i_letyp
*     I_NIDRU               = ' '
*     I_DRUKZ               = ' '
*     I_LDEST               = ' '
*     I_UPDATE_TASK         = ' '
      i_commit_work         = i_commit
*     I_BNAME               = SY-UNAME
*     I_SOLEX               = 0
*     I_PERNR               = 0
*     I_BETYP               = ' '
*     I_BENUM               = ' '
    IMPORTING
      e_tanum               = r_tanum
*     E_NLTYP               =
*     E_NLBER               =
*     E_NLPLA               =
*     E_NPPOS               =
*           TABLES
*     T_LTAP_MOVE_SU        =
*     T_LTAK                =
*     T_LTAP_VB             =
    EXCEPTIONS
      not_confirmed_to      = 1
      foreign_lock          = 2
      bwlvs_wrong           = 3
      betyp_wrong           = 4
      nltyp_wrong           = 5
      nlpla_wrong           = 6
      nltyp_missing         = 7
      nlpla_missing         = 8
      squit_forbidden       = 9
      lgber_wrong           = 10
      xfeld_wrong           = 11
      drukz_wrong           = 12
      ldest_wrong           = 13
      no_stock_on_su        = 14
      su_not_found          = 15
      update_without_commit = 16
      no_authority          = 17
      benum_required        = 18
      ltap_move_su_wrong    = 19
      lenum_wrong           = 20
*      others                = 21
      error_message         = 98
      OTHERS                = 99.

  IF ( sy-subrc <> 0 ).

    IF ( e_return IS REQUESTED ).

      CLEAR e_return.
      e_return-type       = sy-msgty.
      e_return-id         = sy-msgid.
      e_return-number     = sy-msgno.
      e_return-message_v1 = sy-msgv1.
      e_return-message_v2 = sy-msgv2.
      e_return-message_v3 = sy-msgv3.
      e_return-message_v4 = sy-msgv4.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id                 = sy-msgid
          number             = sy-msgno
          language           = sy-langu
          textformat         = 'ASC'
*         LINKPATTERN        =
          message_v1         = sy-msgv1
          message_v2         = sy-msgv2
          message_v3         = sy-msgv3
          message_v4         = sy-msgv4
*         LANGUAGE_ISO       =
*         LINE_SIZE          =
       IMPORTING
          message            = e_return-message
*         RETURN             =
*       TABLES
*         TEXT               =
       .

    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD create_to_multiple.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_tap_create LIKE i_t_ltap_create.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

**********************************************************************
* Lógica
**********************************************************************

**** MOVE VALUES TO LOCAL PARAMS

  MOVE-CORRESPONDING i_t_ltap_create[] TO lt_tap_create[].

**** CREATE TO

  CALL FUNCTION 'L_TO_CREATE_MULTIPLE'
    EXPORTING
      i_lgnum                      = me->_lgnum
      i_bwlvs                      = i_bwlvs
*     I_BETYP                      = ' '
*     I_BENUM                      = ' '
*     I_LZNUM                      = ' '
*     I_NIDRU                      = ' '
*     I_DRUKZ                      = ' '
*     I_NOSPL                      = ' '
      i_update_task                = i_updtask
      i_commit_work                = i_commit
*     I_BNAME                      = SY-UNAME
*     I_KOMPL                      = 'X'
*     I_SOLEX                      = 0
*     I_PERNR                      = 0
*     I_MINWM                      = ' '
*     I_AUSFB                      = ' '
    IMPORTING
      e_tanum                      = r_tanum
    TABLES
      t_ltap_creat                 = lt_tap_create
*     T_LTAK                       =
*     T_LTAP_VB                    =
   EXCEPTIONS
     no_to_created                = 1
     bwlvs_wrong                  = 2
     betyp_wrong                  = 3
     benum_missing                = 4
     betyp_missing                = 5
     foreign_lock                 = 6
     vltyp_wrong                  = 7
     vlpla_wrong                  = 8
     vltyp_missing                = 9
     nltyp_wrong                  = 10
     nlpla_wrong                  = 11
     nltyp_missing                = 12
     rltyp_wrong                  = 13
     rlpla_wrong                  = 14
     rltyp_missing                = 15
     squit_forbidden              = 16
     manual_to_forbidden          = 17
     letyp_wrong                  = 18
     vlpla_missing                = 19
     nlpla_missing                = 20
     sobkz_wrong                  = 21
     sobkz_missing                = 22
     sonum_missing                = 23
     bestq_wrong                  = 24
     lgber_wrong                  = 25
     xfeld_wrong                  = 26
     date_wrong                   = 27
     drukz_wrong                  = 28
     ldest_wrong                  = 29
     update_without_commit        = 30
     no_authority                 = 31
     material_not_found           = 32
     lenum_wrong                  = 33
     matnr_missing                = 34
     werks_missing                = 35
     anfme_missing                = 36
     altme_missing                = 37
     lgort_wrong_or_missing       = 38
     OTHERS                       = 39.

  IF ( sy-subrc <> 0 ).

    CLEAR e_return.
    e_return-type       = sy-msgty.
    e_return-id         = sy-msgid.
    e_return-number     = sy-msgno.
    e_return-message_v1 = sy-msgv1.
    e_return-message_v2 = sy-msgv2.
    e_return-message_v3 = sy-msgv3.
    e_return-message_v4 = sy-msgv4.

    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
      EXPORTING
        msgid                     = sy-msgty
        msgnr                     = sy-msgid
        msgv1                     = sy-msgv1
        msgv2                     = sy-msgv2
        msgv3                     = sy-msgv3
        msgv4                     = sy-msgv4
      IMPORTING
        message_text_output       = e_return-message.

  ENDIF.



ENDMETHOD.
METHOD CREATE_TO_MULTIPLE_4_LQNUMS.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_ot_data      TYPE zst_wm_utils_ot_creation.

  DATA: lt_r_lqnum      TYPE ztt_r_lqnum,
        ls_r_lqnum      TYPE zst_r_lqnum.

  DATA: lt_lqua         TYPE ztt_lqua,
        ls_lqua         TYPE lqua.

  DATA: lt_ltap_create  TYPE msr_t_insp_wmc_ltap_create,
        ls_ltap_create  TYPE ltap_creat.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** DATA FILLED

  IF ( lines( i_t_ot_data ) LE 0 ).

    CLEAR: e_return.
    e_return-id     = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static.
    e_return-number = '010'.
    MOVE 'E' TO e_return-type.
    MOVE text-010 TO e_return-message.
    EXIT.

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** CREATE DATA

  "Obtenemos todos los cuantos origen
  LOOP AT i_t_ot_data INTO ls_ot_data.

    CLEAR: ls_r_lqnum.
    ls_r_lqnum-sign   = 'I'.
    ls_r_lqnum-option = 'EQ'.
    MOVE ls_ot_data-lqnum_origen TO ls_r_lqnum-lqnum_low.
    COLLECT ls_r_lqnum INTO lt_r_lqnum.

  ENDLOOP.

  "Obtenemos datos de LQUA
  lt_lqua = me->get_wm_lqua_data( i_t_r_lqnum = lt_r_lqnum ).

  "Creamos datos
  LOOP AT lt_lqua INTO ls_lqua.

    CLEAR: ls_ot_data, ls_ltap_create.

    READ TABLE i_t_ot_data INTO ls_ot_data WITH KEY lqnum_origen = ls_lqua-lqnum.
    IF ( sy-subrc EQ 0 ).

      "Datos material
      MOVE ls_lqua-matnr TO ls_ltap_create-matnr. "Material
      MOVE ls_lqua-werks TO ls_ltap_create-werks. "Centro
      MOVE ls_lqua-lgort TO ls_ltap_create-lgort. "Almacén
      MOVE ls_lqua-charg TO ls_ltap_create-charg. "Lote
      MOVE ls_lqua-bestq TO ls_ltap_create-bestq. "Stock especial
      MOVE ls_lqua-sobkz TO ls_ltap_create-sobkz. "Indicador stock especial
      MOVE ls_lqua-sonum TO ls_ltap_create-sonum. "Número stock especial
      MOVE ls_lqua-letyp TO ls_ltap_create-letyp. "Tipo de UA

      "Cantidad
      MOVE ls_ot_data-anfme TO ls_ltap_create-anfme.  "Cantidad
      MOVE ls_ot_data-altme TO ls_ltap_create-altme.  "UMA

      "Otros
      MOVE 'REPROCESO' TO ls_ltap_create-zeugn.   "certificado
      MOVE abap_true TO ls_ltap_create-squit.     "Confirmación auto

      "Origen
      MOVE ls_lqua-lgtyp TO ls_ltap_create-vltyp. "TA origen
      MOVE ls_lqua-lgpla TO ls_ltap_create-vlpla. "Ubicación origen
      MOVE ls_lqua-lenum TO ls_ltap_create-vlenr. "UA procedencia
      MOVE ls_lqua-lqnum TO ls_ltap_create-vlqnr. "cuanto

      "Destino
      MOVE ls_ot_data-nltyp TO ls_ltap_create-nltyp.  "TA destino
      MOVE ls_ot_data-nlber TO ls_ltap_create-nlber.  "AA destino
      MOVE ls_ot_data-nlpla TO ls_ltap_create-nlpla.  "Ubicación destino
      MOVE ls_ot_data-nlenr TO ls_ltap_create-nlenr.  "UA destino

      APPEND ls_ltap_create TO lt_ltap_create.

    ENDIF.

  ENDLOOP.

  "Creamos OT multiple
  me->create_to_multiple(
    EXPORTING
      i_bwlvs         = i_bwlvs         " Cl.movim.gestión almacenes
      i_updtask       = i_updtask       " Actualizar en fondo
      i_commit        = i_commit        " Guardar cambios
      i_t_ltap_create = lt_ltap_create  " Table Input for Transfer Order Item Creation
    IMPORTING
      e_return        = e_return    " Parámetro de retorno
    RECEIVING
      r_tanum         = r_tanum    " Número de orden de transporte
  ).

ENDMETHOD.
METHOD create_to_single.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

  CALL FUNCTION 'L_TO_CREATE_SINGLE'
    EXPORTING
      i_lgnum                     = me->_lgnum
      i_bwlvs                     = i_bwlvs
*     I_BETYP                     = ' '
*     I_BENUM                     = ' '
      i_matnr                     = i_matnr
      i_werks                     = me->_werks
      i_lgort                     = me->_lgort
      i_charg                     = i_charg
      i_bestq                     = i_bestq
      i_sobkz                     = i_sobkz
      i_sonum                     = i_sonum
      i_letyp                     = i_letyp
      i_anfme                     = i_anfme
      i_altme                     = i_altme
*     I_WDATU                     = INIT_DATUM
*     I_VFDAT                     = INIT_DATUM
*     I_ZEUGN                     = ' '
*     I_LZNUM                     = ' '
*     I_SQUIT                     = ' '
*     I_NIDRU                     = ' '
*     I_DRUKZ                     = ' '
*     I_LDEST                     = ' '
*     I_WEMPF                     = ' '
*     I_ABLAD                     = ' '
      i_vltyp                     = i_vltyp
      i_vlber                     = i_vlber
      i_vlpla                     = i_vlpla
*     I_VPPOS                     = ' '
      i_vlenr                     = i_vlenr
*     I_VLQNR                     = ' '
      i_nltyp                     = i_nltyp
      i_nlber                     = i_nlber
      i_nlpla                     = i_nlpla
*     I_NPPOS                     = ' '
      i_nlenr                     = i_nlenr
*     I_NLQNR                     = ' '
*     I_RLTYP                     = ' '
*     I_RLBER                     = ' '
*     I_RLPLA                     = ' '
*     I_RLQNR                     = ' '
      i_update_task               = i_updtask
      i_commit_work               = i_commit
*     I_BNAME                     = SY-UNAME
*     I_KOMPL                     = 'X'
*     I_SOLEX                     = 0
*     I_PERNR                     = 0
*     I_AUSFB                     = ' '
*     I_SGT_SCAT                  = ' '
    IMPORTING
      e_tanum                     = r_tanum
*     E_LTAP                      =
*   TABLES
*     T_LTAK                      =
*     T_LTAP_VB                   =
   EXCEPTIONS
     no_to_created               = 1
     bwlvs_wrong                 = 2
     betyp_wrong                 = 3
     benum_missing               = 4
     betyp_missing               = 5
     foreign_lock                = 6
     vltyp_wrong                 = 7
     vlpla_wrong                 = 8
     vltyp_missing               = 9
     nltyp_wrong                 = 10
     nlpla_wrong                 = 11
     nltyp_missing               = 12
     rltyp_wrong                 = 13
     rlpla_wrong                 = 14
     rltyp_missing               = 15
     squit_forbidden             = 16
     manual_to_forbidden         = 17
     letyp_wrong                 = 18
     vlpla_missing               = 19
     nlpla_missing               = 20
     sobkz_wrong                 = 21
     sobkz_missing               = 22
     sonum_missing               = 23
     bestq_wrong                 = 24
     lgber_wrong                 = 25
     xfeld_wrong                 = 26
     date_wrong                  = 27
     drukz_wrong                 = 28
     ldest_wrong                 = 29
     update_without_commit       = 30
     no_authority                = 31
     material_not_found          = 32
     lenum_wrong                 = 33
     error_message               = 35
     OTHERS                      = 34.

  IF ( sy-subrc <> 0 ).

    IF ( e_return IS REQUESTED ).

      CLEAR e_return.
      e_return-type       = sy-msgty.
      e_return-id         = sy-msgid.
      e_return-number     = sy-msgno.
      e_return-message_v1 = sy-msgv1.
      e_return-message_v2 = sy-msgv2.
      e_return-message_v3 = sy-msgv3.
      e_return-message_v4 = sy-msgv4.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id                 = sy-msgid
          number             = sy-msgno
          language           = sy-langu
          textformat         = 'ASC'
*         LINKPATTERN        =
          message_v1         = sy-msgv1
          message_v2         = sy-msgv2
          message_v3         = sy-msgv3
          message_v4         = sy-msgv4
*         LANGUAGE_ISO       =
*         LINE_SIZE          =
       IMPORTING
          message            = e_return-message
*         RETURN             =
*       TABLES
*         TEXT               =
       .

    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD GET_WM_LAGP_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_msgv1    TYPE syst_msgv,
        lv_msgv2    TYPE syst_msgv,
        lv_msgv3    TYPE syst_msgv,
        lv_msgv4    TYPE syst_msgv,
        lv_message  TYPE sstring.

**********************************************************************
* Validaciones
**********************************************************************

** Import.

  IF ( i_t_r_lgtyp IS INITIAL AND lines( i_t_r_lgtyp ) LE 0 ).

    CLEAR: lv_msgv1, lv_msgv2, lv_message.
    MOVE 'I_T_R_LGTYP' TO lv_msgv1.
    MOVE 'GET_WM_LAGP_DATA' TO lv_msgv2.
    MOVE text-005 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '005' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_msgv2 = lv_msgv2 i_message = lv_message ).

  ELSE.

    me->check_wm_lgtyp_exists(
      EXPORTING
        i_t_r_lgtyp    = i_t_r_lgtyp    " Tabla de rangos para tipo almacén
      EXCEPTIONS
        no_value       = 1
        no_exist_lgtyp = 2
        others         = 3
    ).
    IF sy-subrc <> 0.

      CLEAR: lv_msgv1.
      MOVE _lgnum TO lv_msgv1.
      MOVE text-006 TO lv_message.
      RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '006' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_message = lv_message ).

    ENDIF.

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** ubicación

  SELECT *
    FROM lagp
    INTO CORRESPONDING FIELDS OF TABLE e_t_lagp
   WHERE lgnum EQ _lgnum
     AND lgtyp IN i_t_r_lgtyp
     AND lgpla IN i_t_r_lgpla.

ENDMETHOD.
METHOD get_wm_lagp_list.

**********************************************************************
* Lógica
**********************************************************************

** Ubicaciones para datos import

  SELECT *
    FROM lagp
    INTO CORRESPONDING FIELDS OF TABLE e_t_lagp
   WHERE lgnum EQ _lgnum
     AND lgtyp IN i_t_r_lgtyp
     AND lgpla IN i_t_r_lgpla
     AND lgber IN i_t_r_lgber "V2 ZCL_WM_TOOLS_LOCATION_MANAGER
     AND lptyp IN i_t_r_lptyp
    ORDER BY lgnum lgtyp lgpla.

ENDMETHOD.
METHOD get_wm_lqua_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** Seleccionamos info de cuantos.

  SELECT *
    FROM lqua
    INTO CORRESPONDING FIELDS OF TABLE e_s_lqua_data
   WHERE lgnum EQ _lgnum        "Número de almacén
     AND lqnum IN i_t_r_lqnum   "Cuanto
     AND lgtyp IN i_t_r_lgtyp   "Tipo almacén
     AND lgpla IN i_t_r_lgpla   "Ubciación
     AND matnr IN i_t_r_matnr   "Material
     AND charg IN i_t_r_charg   "Lote
     AND lenum IN i_t_r_lenum.  "Unidad de almacén

ENDMETHOD.
METHOD GET_WM_MATNR_DATA_LIST.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_msgv1      TYPE syst_msgv,
        lv_msgv2      TYPE syst_msgv,
        lv_message    TYPE sstring.

**********************************************************************
* Validaciones
**********************************************************************

** Tipo de almacén

  me->check_wm_lgtyp_exists(
    EXPORTING
      i_t_r_lgtyp    = i_t_r_lgtyp   " Tabla de rangos para tipo almacén
    EXCEPTIONS
      no_value       = 1
      no_exist_lgtyp = 2
      others         = 3
  ).
  IF sy-subrc <> 0.

    CLEAR: lv_msgv1, lv_message.
    MOVE _lgnum TO lv_msgv1.
    MOVE text-006 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '006' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_message = lv_message ).

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Datos MLGN.

  SELECT *
    FROM mlgn
    INTO CORRESPONDING FIELDS OF TABLE e_t_mlgn
   WHERE matnr IN i_t_r_matnr
     AND lgnum EQ _lgnum.

  "Comprobamos si se han obtenido datos
  IF ( sy-subrc = 0 ). "Se obtinen datos WM

** MLGT

    SELECT *
      FROM mlgt
      INTO CORRESPONDING FIELDS OF TABLE e_t_mlgt
     WHERE matnr IN i_t_r_matnr
       AND lgnum EQ _lgnum
       AND lgtyp IN i_t_r_lgtyp.

  ELSE. "No se obtienen datos WM

    CLEAR: lv_message.
    MOVE text-004 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '004' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_message = lv_message ).

  ENDIF. "Fin chequeo WM

ENDMETHOD.
METHOD NNNN__CREATE_TO_4_MBLNR.

**********************************************************************
* Parámetros locales
**********************************************************************

******  STRUCTURES

  DATA: ls_bapiret2 TYPE bapiret2.

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** MBLNR

  IF ( i_mblnr IS INITIAL ).
    ls_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static i_number = '001' ).
    APPEND ls_bapiret2 TO r_return.
    EXIT.
  ENDIF.

***** MJAHR

  IF ( i_mblnr IS INITIAL ).
    ls_bapiret2 = zcl_utils=>zif_msg_utils~s_generate_bapiret2( i_type = 'E' i_id = zcl_utils_wm=>zif_msg_utils~_c_cl_msgid_label_static i_number = '001' ).
    APPEND ls_bapiret2 TO r_return.
    EXIT.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

******

  SELECT *
    FROM mseg
    INTO @DATA(ls_mseg)
   WHERE mblnr EQ @i_mblnr
     AND mjahr EQ @i_mjahr
     AND lgnum EQ @me->_lgnum.


  ENDSELECT.

ENDMETHOD.
METHOD READ_MATNR_WM_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_mlgn_check TYPE boolean,
        lv_mlgt_check TYPE boolean,
        lt_r_lgtyp    TYPE ztt_r_lgtyp,
        ls_r_lgtyp    LIKE LINE OF lt_r_lgtyp,
        lv_msgv1      TYPE syst_msgv,
        lv_msgv2      TYPE syst_msgv,
        lv_message    TYPE sstring.

**********************************************************************
* Validaciones
**********************************************************************

** Tipo de almacén

  "Chequeamos tipo de almacén
  IF ( i_lgtyp IS NOT INITIAL ). "Entra tipo de almacén

    CLEAR: ls_r_lgtyp.
    ls_r_lgtyp-sign = 'I'.
    ls_r_lgtyp-option = 'EQ'.
    ls_r_lgtyp-stge_type_low = i_lgtyp.
    APPEND ls_r_lgtyp TO lt_r_lgtyp.

    me->check_wm_lgtyp_exists(
      EXPORTING
        i_t_r_lgtyp    = lt_r_lgtyp    " Tabla de rangos para tipo almacén
      EXCEPTIONS
        no_value       = 1
        no_exist_lgtyp = 2
        others         = 3
    ).
    IF sy-subrc <> 0.

      CLEAR: lv_msgv1, lv_message.
      MOVE _lgnum TO lv_msgv1.
      MOVE text-006 TO lv_message.
      RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '006' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_message = lv_message ).

    ENDIF.

  ELSE. "No entra tipo de almacén

    CLEAR: lv_msgv1, lv_msgv2, lv_message.
    MOVE 'I_LGTYP' TO lv_msgv1.
    MOVE 'GET_WM_MATNR_DATA' TO lv_msgv2.
    MOVE text-005 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '006' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_msgv2 = lv_msgv2 i_message = lv_message ).

  ENDIF. "Fin chequeo tipo de almacén

** Material existe

  me->check_matnr_exists(
    EXPORTING
      i_matnr         = i_matnr    " Número de material
    EXCEPTIONS
      no_value        = 1
      no_matnr_exists = 2
      others          = 3
  ).
  IF sy-subrc <> 0.

    CLEAR: lv_msgv1, lv_msgv2, lv_message.
    MOVE 'I_MATNR' TO lv_msgv1.
    MOVE 'GET_WM_MATNR_DATA' TO lv_msgv2.
    MOVE text-005 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '005' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_msgv2 = lv_msgv2 i_message = lv_message ).

  ENDIF.

** Material WM

  "Chequeo el material
  me->check_matnr_is_extended_4_wm(
    EXPORTING
      i_matnr     = i_matnr    " Número de material
      i_t_r_lgtyp = lt_r_lgtyp " Tipo almacén
    IMPORTING
      e_mlgn_data = lv_mlgn_check    " 'X'=ok; space=ko
      e_mlgt_data = lv_mlgt_check    " 'X'=ok; space=ko
  ).

  IF ( lv_mlgn_check = abap_false ).

    CLEAR: lv_msgv1, lv_message.
    MOVE i_matnr TO lv_msgv1.
    MOVE text-004 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '004' i_msgid = me->zif_msg_utils~_c_cl_msgid_label i_msgty = 'E' i_msgv1 = lv_msgv1 i_message = lv_message ).

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

* Datos MLGN.

  SELECT SINGLE *
    FROM mlgn
    INTO e_mlgn
   WHERE matnr EQ i_matnr
     AND lgnum EQ _lgnum.

* Datos MLGT

  "Valido que haya datos del material en WM a nivel TA.
  IF ( lv_mlgt_check EQ abap_true ).

    SELECT SINGLE *
      FROM mlgt
      INTO e_mlgt
     WHERE matnr EQ i_matnr
       AND lgnum EQ _lgnum
       AND lgtyp EQ i_lgtyp.

  ENDIF.

ENDMETHOD.
METHOD s_check_auth_lgnum.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************


**********************************************************************
* Lógica
**********************************************************************

  "Chequeamos número de almacén insertado.
  AUTHORITY-CHECK OBJECT 'M_MATE_LGN'
    FOR USER i_user ID 'LGNUM' FIELD i_lgnum.

  IF ( sy-subrc EQ 0 ).
    r_is_authorized = abap_true.
  ENDIF.

ENDMETHOD.
METHOD s_get_lgnum_4_werks_and_lgort.

**********************************************************************
* Validaciones
**********************************************************************

** Import

  IF ( i_werks IS INITIAL OR i_lgort IS INITIAL ).
    RAISE no_value.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Número de almacén

"Obtenemos Número almacén para centro y almacén MM
  SELECT SINGLE lgnum
    FROM t320
    INTO e_lgnum
   WHERE werks EQ i_werks
     AND lgort EQ i_lgort.

  IF ( sy-subrc NE 0 OR e_lgnum IS INITIAL ).

    RAISE no_lgnum_for_werks_lgort.

  ENDIF.

ENDMETHOD.
