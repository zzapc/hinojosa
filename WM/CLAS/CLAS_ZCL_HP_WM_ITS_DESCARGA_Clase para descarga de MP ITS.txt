
class ZCL_HP_WM_ITS_DESCARGA definition
  public
  final
  create public .

public section.

  data _WERKS type WERKS_D read-only .
  data _LGORT type LGORT_D read-only .
  data _LGNUM type LGNUM read-only .
  data _O_SHIPMENT type ref to ZCL_HP_SHIPMENT read-only .
  data _O_DELIVERY type ref to ZCL_HP_DELIVERY read-only .
  data:
    BEGIN OF _s_its_rf_data READ-ONLY,
            uname       TYPE uname,
            operario    TYPE zlnum_oper,
          END OF _s_its_rf_data .
  class-data _SC_CLASS_LABEL type MSGID read-only value 'ZCL_WM_ITS_DESCARGA' ##NO_TEXT.

  class-methods S_CREATE_DESCARGA_W_NO_TKNUM
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
      !I_VERUR type VERUR_VL
    returning
      value(R_O_ITS_DESCARGA) type ref to ZCL_HP_WM_ITS_DESCARGA .
  class-methods S_CREATE_DESCARGA_W_TKNUM
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
      !I_TKNUM type TKNUM
    returning
      value(R_O_ITS_DESCARGA) type ref to ZCL_HP_WM_ITS_DESCARGA .
  methods ADD_DELIVERY
    importing
      !I_O_DELIVERY type ref to ZCL_HP_DELIVERY
    raising
      ZCX_EXCEPTION .
  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
      !I_OPERARIO type ZLNUM_OPER optional
      !I_O_SHIPMENT type ref to ZCL_HP_SHIPMENT optional
      !I_O_DELIVERY type ref to ZCL_HP_DELIVERY optional
    raising
      ZCX_EXCEPTION .
  methods CREATE_DELIV_W_VERUR_RFDATA
    importing
      !I_VERUR type VERUR_VL
      !I_T_RF_DATA type ZTT_ZWM_RF_EM_LECT
    returning
      value(R_O_DELIVERY) type ref to ZCL_HP_DELIVERY
    raising
      ZCX_EXCEPTION .
  methods FINALICE_UNLOAD .
  methods SET_OPERARIO
    importing
      !I_OPERARIO type ZLNUM_OPER .
protected section.
private section.

  data _ZWM_RF_FUNC type ZTT_ZWM_RF_FUNC .

  methods _CHECK_ACTIONS
    raising
      ZCX_EXCEPTION .
  methods _CHECK_SHIPMENT .
  methods _CHECK_SHIPMENT_REQUIRED
    returning
      value(R_IS_REQUIRED) type BOOLEAN .
  methods _FINALICE_UNLOAD_WITH_SHIPMENT
    raising
      ZCX_EXCEPTION .
  methods _MAP_RFDATA_2_KOMDLGN
    importing
      !I_S_RFDATA type ZWM_RF_EM_LECT
    returning
      value(R_S_KOMDLGN) type KOMDLGN
    raising
      ZCX_EXCEPTION .
  methods _MAP_RFDATA_2_XKOMDLGN
    importing
      !I_T_RFDATA type ZTT_ZWM_RF_EM_LECT
    returning
      value(R_T_KOMDLGN) type XKOMDLGN .
  methods _READ_RF_DATA .
  methods _READ_RF_FUNC .
endclass. "ZCL_HP_WM_ITS_DESCARGA definition
class ZCL_HP_WM_ITS_DESCARGA implementation.
METHOD _check_actions.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****




ENDMETHOD.
  method _CHECK_SHIPMENT.
  endmethod.
METHOD _CHECK_SHIPMENT_REQUIRED.

**********************************************************************
* Parámetros locales
**********************************************************************

  CONSTANTS: lc_no_transporte TYPE rvari_vnam VALUE 'NO_TRANSPORTE'.

  DATA: lv_fieldname TYPE fieldname.

  FIELD-SYMBOLS: <fv_fieldname> TYPE fieldname,
                 <fv_value>     TYPE any.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SET INITIAL RESULT AS REQUIRED

  MOVE abap_true TO r_is_required.

**** GET DATA

  "Monto nombre de columna
  CONCATENATE 'LG' me->_lgnum INTO lv_fieldname.

  "Leo registro de tabla
  READ TABLE me->_zwm_rf_func ASSIGNING FIELD-SYMBOL(<fs_func>) WITH KEY func = lc_no_transporte.
  CHECK <fs_func> IS ASSIGNED.

  "Asignamos valor de columna
  ASSIGN COMPONENT lv_fieldname OF STRUCTURE <fs_func> TO <fv_value>.
  CHECK sy-subrc EQ 0.
  CHECK <fv_value> IS ASSIGNED.

  "Devolvemos valor
  IF ( <fv_value> EQ abap_true ).
    MOVE abap_false TO r_is_required.
  ENDIF.

  "Desasignamos FS
  UNASSIGN: <fs_func>, <fv_value>.

ENDMETHOD.
METHOD _finalice_unload_with_shipment.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**** SHIPMENT

  IF ( me->_o_shipment IS NOT BOUND ).
    CLEAR lv_message.
    MOVE text-005 TO lv_message.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '005' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' i_message = lv_message ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****



ENDMETHOD.
METHOD _map_rfdata_2_komdlgn.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_zwm_rf_em_lect TYPE ztt_zwm_rf_em_lect.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  IF ( i_s_rfdata-verur IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

  IF ( i_s_rfdata-ebeln IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

  IF ( i_s_rfdata-ebelp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** SELECT DATA

  SELECT SINGLE *
    FROM ekko
    INTO @DATA(ls_ekko)
   WHERE ebeln EQ @i_s_rfdata-ebeln.

  CHECK sy-subrc EQ 0.

  SELECT SINGLE *
    FROM ekpo
    INTO @DATA(ls_ekpo)
   WHERE ebeln EQ @i_s_rfdata-ebeln
     AND ebelp EQ @i_s_rfdata-ebelp.

  CHECK sy-subrc EQ 0.

**** MAP DATA

  r_s_komdlgn-lfdat = sy-datum.
  r_s_komdlgn-lifnr = ls_ekko-lifnr.
  r_s_komdlgn-arktx = ls_ekpo-txz01.
  r_s_komdlgn-matnr = ls_ekpo-matnr.
*  <fs_komdlgn>-charg = wl_zwm_rf_em_lect-charg.
  r_s_komdlgn-lfart = 'EL'.

*Quantity and Unit from Delivery
  r_s_komdlgn-uebtk = ls_ekpo-uebtk.
  r_s_komdlgn-uebto = ls_ekpo-uebto.
  r_s_komdlgn-untto = ls_ekpo-untto.
  r_s_komdlgn-werks = ls_ekpo-werks.
  r_s_komdlgn-lgort = ls_ekpo-lgort.

  CLEAR r_s_komdlgn-lfimg.

  r_s_komdlgn-lfimg = i_s_rfdata-menge_input.
  r_s_komdlgn-vrkme = i_s_rfdata-meins.
  r_s_komdlgn-meins = ls_ekpo-lmein.
  r_s_komdlgn-umvkz = ls_ekpo-umrez.
  r_s_komdlgn-umvkn = ls_ekpo-umren.
  r_s_komdlgn-vgbel = ls_ekpo-ebeln.
  r_s_komdlgn-vgpos = ls_ekpo-ebelp.
  r_s_komdlgn-vgtyp = 'V'.
  r_s_komdlgn-kzazu = 'X'.
  r_s_komdlgn-verur = i_s_rfdata-verur.
  r_s_komdlgn-lifex = i_s_rfdata-verur.

ENDMETHOD.
METHOD _map_rfdata_2_xkomdlgn.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_komdlgn TYPE komdlgn.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK lines( i_t_rfdata ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

**** PREPARE DATA


**** WORK WITH DATA

  LOOP AT i_t_rfdata INTO DATA(ls_rfdata).

    CLEAR: ls_komdlgn.
    ls_komdlgn = me->_map_rfdata_2_komdlgn( i_s_rfdata = ls_rfdata ).
    APPEND ls_komdlgn TO r_t_komdlgn.

  ENDLOOP.

ENDMETHOD.
  method _READ_RF_DATA.
  endmethod.
METHOD _READ_RF_FUNC.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SELECT

  SELECT *
    FROM zwm_rf_func
    INTO CORRESPONDING FIELDS OF TABLE _zwm_rf_func.

ENDMETHOD.
METHOD add_delivery.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_delivery TYPE REF TO zcl_hp_delivery.

  DATA: lt_deliveries TYPE ztt_oo_deliveries.

  DATA: lv_message TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** IS BOUND

  IF ( i_o_delivery IS NOT BOUND ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** IS SAME WERKS

  IF ( i_o_delivery->_s_data-s_delivery_header-vstel NE me->_werks ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** CHECK SHIPMENT REQUIRED

  IF ( me->_check_shipment_required( ) EQ abap_true ).

    lt_deliveries = me->_o_shipment->get_delivery_from_verur( i_verur = i_o_delivery->_s_data-s_delivery_header-verur ).

    "Chequeo si ya existe entrega
    IF ( lines( lt_deliveries ) LE 0 ).

      me->_o_shipment->add_delivery( i_o_delivery = i_o_delivery ).

    ELSE.

      CLEAR: lv_message.
      MOVE text-007 TO lv_message.
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '007' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' i_message = lv_message ) ).

    ENDIF.

  ELSE.

    IF ( me->_o_delivery IS NOT BOUND ).

      me->_o_delivery ?= i_o_delivery.

    ELSE.

      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).

    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** WERKS

  IF ( i_werks IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** LGORT

  IF ( i_lgort IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** SET RF FUNCS

  me->_read_rf_func( ).

**** SET ATRIBUTES

*** SET WERKS, LGORT AND LGNUM

  zcl_utils_wm=>s_get_lgnum_4_werks_and_lgort(
    EXPORTING i_werks = i_werks i_lgort = i_lgort
    RECEIVING e_lgnum = me->_lgnum
    EXCEPTIONS
      no_value                 = 1
      no_lgnum_for_werks_lgort = 2
      OTHERS                   = 3
  ).
  IF ( sy-subrc EQ 0 ).
    me->_werks = i_werks.
    me->_lgort = i_lgort.
  ELSE.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** SET TKNUM

** TKNUM

  IF ( me->_check_shipment_required( ) EQ abap_true ). "Si requiere transporte

    "Chequeo TKNUM
    IF ( i_o_shipment IS BOUND ).

      "Muevo objeto shipment a parámetro
      me->_o_shipment ?= i_o_shipment.

      "Comprobamos si centro y centro de planif. coinciden
      IF ( i_werks NE i_o_shipment->_t_shipment_data-shipment_header-tplst ).
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
      ENDIF.

    ELSE.

      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).

    ENDIF.

  ELSE. "No requiere transporte

    IF ( i_o_delivery IS BOUND ).

      READ TABLE i_o_delivery->_s_data-t_delivery_item INTO DATA(ls_delivery_item) INDEX 1.
      IF ( sy-subrc EQ 0 ).

        IF ( ls_delivery_item-werks EQ i_werks AND ls_delivery_item-lgort EQ i_lgort ).
          me->_o_delivery ?= i_o_delivery.
        ELSE.
          zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
        ENDIF.

      ENDIF.

    ENDIF.

  ENDIF.

*** SET UNAME

  MOVE sy-uname TO me->_s_its_rf_data-uname.

ENDMETHOD.
METHOD create_deliv_w_verur_rfdata.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_rf_data  TYPE ztt_zwm_rf_em_lect,
        lt_xkomdlgn TYPE xkomdlgn.

  DATA: ls_komdlgn TYPE komdlgn.

  DATA: lv_uepos TYPE uepos.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** VERUR

  IF ( i_verur IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** ZWM_RF_EM_LECT

  IF ( lines( i_t_rf_data ) LE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.


**********************************************************************
* Lógica
**********************************************************************

**** PREPARE DATA

*** MOVE DATA 2 WORK DATA

  MOVE-CORRESPONDING i_t_rf_data[] TO lt_rf_data[].

*** DELETE RF DATA WITH VERUR NE IMPORT VERUR

  DELETE lt_rf_data[] WHERE verur NE i_verur.

*** CHECK RESULT

  IF ( lines( lt_rf_data ) LE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** WORK WITH DATA

  SORT lt_rf_data BY ebeln ebelp.

  CLEAR: lv_uepos.

  LOOP AT lt_rf_data INTO DATA(ls_rf_data).

    AT NEW matnr.

      CLEAR: ls_komdlgn.
      lv_uepos = lv_uepos + 10.
      ls_komdlgn = me->_map_rfdata_2_komdlgn( i_s_rfdata = ls_rf_data ).
      ls_komdlgn-lfimg = 0.
      APPEND ls_komdlgn TO lt_xkomdlgn.

    ENDAT.

    CLEAR: ls_komdlgn.
    ls_komdlgn = me->_map_rfdata_2_komdlgn( i_s_rfdata = ls_rf_data ).
    ls_komdlgn-uepos = lv_uepos.
    APPEND ls_komdlgn TO lt_xkomdlgn.

  ENDLOOP.

*** CREATE DELIVERY

  r_o_delivery ?= zcl_hp_delivery=>s_create_inb_delivery_w_data( i_t_xkomdlgn = lt_xkomdlgn ).

ENDMETHOD.
METHOD finalice_unload.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** CHECK TRANSPORT REQUIRED

  IF ( me->_check_shipment_required( ) EQ abap_true ). "Transport required


  ELSE. "Transport not required

  ENDIF.

ENDMETHOD.
METHOD s_create_descarga_w_no_tknum.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_descarga TYPE REF TO zcl_hp_wm_its_descarga,
        lo_delivery TYPE REF TO zcl_hp_delivery.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_verur IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** CHECK AND CREATE

  TRY.

    lo_descarga ?= NEW zcl_hp_wm_its_descarga( i_werks = i_werks i_lgort = i_lgort ).

*    CHECK lo_descarga-> IS BOUND.
*
*    lo_delivery ?= lo_descarga->create_deliv_w_verur_rfdata(
*                   i_verur       =
*                   i_t_rf_data   =
*               )
**                 CATCH zcx_exception.  "

  CATCH zcx_exception.
  ENDTRY.


ENDMETHOD.
METHOD s_create_descarga_w_tknum.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_shipment TYPE REF TO zcl_hp_shipment.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_tknum IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** CHECK AND CREATE

  TRY.

    lo_shipment ?= NEW zcl_hp_shipment( i_tknum = i_tknum ).

    IF ( lo_shipment IS BOUND ).

      CHECK lo_shipment->_t_shipment_data-shipment_header-tplst EQ i_werks.

      r_o_its_descarga ?= NEW zcl_hp_wm_its_descarga( i_werks = i_werks i_lgort = i_lgort i_o_shipment = lo_shipment ).

    ENDIF.

  CATCH zcx_exception.
  ENDTRY.

ENDMETHOD.
METHOD set_operario.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK i_operario IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** SET DATA

  SELECT SINGLE operario
    FROM zwm_rf_oper
    INTO @me->_s_its_rf_data-operario
   WHERE lgnum EQ @me->_lgnum
     AND operario EQ @i_operario.

ENDMETHOD.
