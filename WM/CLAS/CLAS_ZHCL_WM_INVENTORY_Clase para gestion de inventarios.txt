
class ZHCL_WM_INVENTORY definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF ty_s_filters,
        t_r_lgtyp TYPE ztt_r_lgtyp,
        t_r_lgpla TYPE ztt_r_lgpla,
        t_r_matnr TYPE range_t_matnr,
        t_r_mtart TYPE md_range_t_mtart,
        t_r_charg TYPE ztt_r_charg,
      END OF ty_s_filters .

  class-data C_CLASS_LABEL type MSGID read-only value 'ZHCL_WM_INVENTORY' ##NO_TEXT.
  data _LGNUM type LGNUM read-only .
  data _OO_WM_UTILS type ref to ZCL_UTILS_WM read-only .
  data _S_FILTERS type TY_S_FILTERS read-only .

  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    raising
      ZCX_EXCEPTION .
  methods SET_FILTER_LGTYP
    importing
      !I_LGTYP type LGTYP .
  methods SET_FILTER_LGTYP_LIST
    importing
      !I_T_LGTYP type ZTT_LGTYP .
  methods SET_FILTER_MTART
    importing
      !I_MTART type MTART .
  methods SET_FILTER_MTART_LIST
    importing
      !I_T_MTART type WRF_MTART_TTY .
  methods SET_FILTER_LGPLA
    importing
      !I_LGPLA type LGPLA
    raising
      ZCX_EXCEPTION .
  methods SET_FILTER_LGPLA_LIST
    importing
      !I_T_LGPLA type ZZLGPLA_TTY .
  methods SET_FILTER_MATNR
    importing
      !I_MATNR type MATNR
    raising
      ZCX_EXCEPTION .
  methods SET_FILTER_MATNR_LIST
    importing
      !I_T_MATNR type MATNR_TTY .
  methods SET_FILTER_CHARG
    importing
      !I_CHARG type CHARG_D
    raising
      ZCX_EXCEPTION .
  methods GET_ALL_LQUA_DATA
    returning
      value(R_T_LQUA) type LQUA_T .
  PROTECTED SECTION.
  PRIVATE SECTION.
endclass. "ZHCL_WM_INVENTORY definition
class ZHCL_WM_INVENTORY implementation.
  METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

    IF ( i_werks IS INITIAL OR i_lgort IS INITIAL ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_wm_inventory=>c_class_label ) ).
    ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** INITIALIZE DATA

    TRY.

        me->_oo_wm_utils = NEW zcl_utils_wm( i_werks = i_werks i_lgort = i_lgort ).

      CATCH zcx_wm_exception INTO DATA(lo_wm_exception).

        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = lo_wm_exception->if_t100_message~t100key ).

      CATCH zcx_mm_exception INTO DATA(lo_mm_exception).

        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = lo_mm_exception->if_t100_message~t100key ).

    ENDTRY.

****** SET DATA

***** LGNUM

    MOVE me->_oo_wm_utils->_lgnum TO me->_lgnum.

  ENDMETHOD.
  METHOD GET_ALL_LQUA_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

****** TABLES

    DATA: lt_r_matnr TYPE range_t_matnr,
          lt_lqua    TYPE TABLE OF lqua.


**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

***** MTART FILTER

    SELECT a~matnr
      FROM mlgn AS n LEFT JOIN mara AS a
        ON n~matnr EQ a~matnr
      INTO @DATA(lv_matnr)
     WHERE n~lgnum EQ @me->_lgnum
       AND n~matnr IN @me->_s_filters-t_r_matnr
       AND a~mtart IN @me->_s_filters-t_r_mtart.

      APPEND VALUE #( sign = 'I' option = 'EQ' low = lv_matnr ) TO lt_r_matnr.

    ENDSELECT.

****** GET DATA

    r_t_lqua = me->_oo_wm_utils->get_wm_lqua_data(
*      i_t_r_lqnum   =     " Tabla rangos para cuantos
        i_t_r_lgtyp   = me->_s_filters-t_r_lgtyp    " Tabla de rangos para tipo de almacén
        i_t_r_lgpla   = me->_s_filters-t_r_lgpla    " Tabla de rango para ubicaciones
        i_t_r_matnr   = lt_r_matnr                  " Tabla para rangos de materiales
        i_t_r_charg   = me->_s_filters-t_r_charg    " Tabla de rangos para lotes
*      i_t_r_lenum   =     " Tabla para rangos de unidades de almacén
    ).

  ENDMETHOD.
  METHOD set_filter_charg.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

****** IMPORT DATA

***** DATA FILLED

    CHECK i_charg IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

    APPEND VALUE #( sign = 'I' option = 'EQ' low = i_charg ) TO me->_s_filters-t_r_matnr.

  ENDMETHOD.
  METHOD set_filter_lgpla.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

***** CHECK LGTYP TABLE HAS LINES

    IF ( lines( me->_s_filters-t_r_lgtyp ) LE 0 ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = 'ZLE_WM' ) ).
    ENDIF.

***** LGPLA

    SELECT COUNT(*) UP TO 1 ROWS
      FROM lagp
     WHERE lgnum EQ me->_lgnum
       AND lgtyp IN me->_s_filters-t_r_lgtyp
       AND lgpla EQ i_lgpla.

    IF ( sy-subrc NE 0 ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_wm_inventory=>c_class_label ) ).
    ENDIF.

****** CHECK NOT EXISTS

    READ TABLE me->_s_filters-t_r_lgpla TRANSPORTING NO FIELDS WITH KEY stge_bin_low = i_lgpla.
    CHECK sy-subrc NE 0.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

    APPEND VALUE #( sign = 'I' option = 'EQ' stge_bin_low = i_lgpla ) TO me->_s_filters-t_r_lgpla.

  ENDMETHOD.
  METHOD set_filter_lgpla_list.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

****** IMPORT DATA

    CHECK lines( i_t_lgpla ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

****** SET LGPLA

    LOOP AT i_t_lgpla INTO DATA(lv_lgpla).

      TRY.
          me->set_filter_lgpla( i_lgpla = lv_lgpla ).
        CATCH zcx_exception.
      ENDTRY.

    ENDLOOP.

  ENDMETHOD.
  METHOD set_filter_lgtyp.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

    CHECK me->_oo_wm_utils IS BOUND.

****** IMPORT DATA

***** LGTYP FILLED

    CHECK i_lgtyp IS NOT INITIAL.

***** NO DATA RECORD EXISTS

    READ TABLE me->_s_filters-t_r_lgtyp TRANSPORTING NO FIELDS WITH KEY stge_type_low = i_lgtyp.
    CHECK sy-subrc NE 0.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

    IF ( me->_oo_wm_utils->check_lgtyp_exists( i_lgtyp = i_lgtyp ) EQ abap_true ).

      APPEND VALUE #( sign = 'I' option = 'EQ' stge_type_low = i_lgtyp ) TO me->_s_filters-t_r_lgtyp.

    ENDIF.

  ENDMETHOD.
  METHOD set_filter_lgtyp_list.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

    CHECK lines( i_t_lgtyp ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

    LOOP AT i_t_lgtyp INTO DATA(lv_lgtyp).
      me->set_filter_lgtyp( i_lgtyp = lv_lgtyp ).
    ENDLOOP.

  ENDMETHOD.
  METHOD set_filter_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

****** IMPORT DATA

***** DATA FILLED

    CHECK i_matnr IS NOT INITIAL.

***** EXIST IN LGNUM

    SELECT COUNT(*) UP TO 1 ROWS
      FROM mlgn
     WHERE lgnum EQ me->_lgnum.

    IF ( sy-subrc NE 0 ).
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zhcl_wm_inventory=>c_class_label ) ).
    ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

    APPEND VALUE #( sign = 'I' option = 'EQ' low = i_matnr ) TO me->_s_filters-t_r_matnr.

  ENDMETHOD.
  METHOD set_filter_matnr_list.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

****** IMPORT DATA

    CHECK lines( i_t_matnr ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

****** SET LGPLA

    LOOP AT i_t_matnr INTO DATA(lv_matnr).

      TRY .
          me->set_filter_matnr( i_matnr = lv_matnr ).
        CATCH zcx_exception.
      ENDTRY.

    ENDLOOP.

  ENDMETHOD.
  METHOD set_filter_mtart.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** CLASS DATA

****** IMPORT DATA

***** IS FILLED

    CHECK i_mtart IS NOT INITIAL.

***** EXISTS

    SELECT COUNT(*) UP TO 1 ROWS
      FROM t134
     WHERE mtart EQ i_mtart.

    CHECK sy-subrc EQ 0.

***** NO DATA RECORD EXISTS

    READ TABLE me->_s_filters-t_r_mtart TRANSPORTING NO FIELDS WITH KEY low = i_mtart.
    CHECK sy-subrc NE 0.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

    APPEND VALUE #( sign = 'I' option = 'EQ' low = i_mtart ) TO me->_s_filters-t_r_mtart.

  ENDMETHOD.
  METHOD set_filter_mtart_list.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

    CHECK lines( i_t_mtart ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

    LOOP AT i_t_mtart INTO DATA(lv_mtart).
      me->set_filter_mtart( i_mtart = lv_mtart ).
    ENDLOOP.

  ENDMETHOD.
