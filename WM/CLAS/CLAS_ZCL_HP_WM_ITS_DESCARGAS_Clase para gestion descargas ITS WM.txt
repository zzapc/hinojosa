
class ZCL_HP_WM_ITS_DESCARGAS definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF ty_verur_s_data,
    verur TYPE verur_vl,
    vbeln TYPE vbeln,
    data  TYPE ztt_zwm_rf_em_lect,
  END OF ty_verur_s_data .
  types:
    ty_verur_t_data TYPE TABLE OF ty_verur_s_data WITH DEFAULT KEY .
  types:
    BEGIN OF ty_s_rf_lect_work,
    vbeln     TYPE vbeln,
    uepos     TYPE uepos,
    posnr     TYPE posnr,
    in_vbeln  TYPE boolean,
    vbeln_sts TYPE c1,
    rf_lect   TYPE zwm_rf_em_lect,
  END OF ty_s_rf_lect_work .
  types:
    ty_t_rf_lect_work TYPE TABLE OF ty_s_rf_lect_work WITH DEFAULT KEY .

  data _O_SHIPMENT type ref to ZCL_HP_SHIPMENT read-only .
  data:
    BEGIN OF _s_its_rf_data READ-ONLY,
            werks       TYPE werks_d,
            lgort       TYPE lgort_d,
            lgnum       TYPE lgnum,
            uname       TYPE uname,
            operario    TYPE zlnum_oper,
*            tknum       TYPE REF TO zcl_hp_shipment,
            verur_nt    TYPE verur_vl,
            t_wm_rf_em  TYPE TABLE OF zwm_rf_em_lect,
          END OF _s_its_rf_data .
  class-data _SC_CLASS_LABEL type MSGID read-only value 'ZCL_HP_WM_ITS_DESCARGAS' ##NO_TEXT.

  methods ADD_NEW_LENUM_2_VERUR
    importing
      !I_LENUM type LENUM .
  methods ADD_NEW_VERUR
    importing
      !I_VERUR type VERUR_VL
      !I_CHECK_EXISTS type BOOLEAN default 'X' .
  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
      !I_TKNUM type TKNUM optional
      !I_VERUR type VERUR_VL optional
    raising
      ZCX_EXCEPTION .
  methods DEL_NEW_LENUM_2_VERUR .
  methods DEL_NEW_VERUR .
  methods FINALICE_UNLOAD
    raising
      ZCX_EXCEPTION .
  methods _GET_RF_EM_LECT_DATA
    importing
      !I_T_R_TKNUM type SHP_TKNUM_RANGE_T optional
      !I_T_R_VERUR type ZTT_R_VERUR optional
      !I_FINISHED type ZWM_RF_EM_FINAL default ' '
    returning
      value(R_T_RF_EM_LECT) type ZTT_ZWM_RF_EM_LECT .
  methods _UPD_RF_EM_LECT_DATA .
  PROTECTED SECTION.
private section.

  data _ZWM_RF_FUNC type ZTT_ZWM_RF_FUNC .

  methods _CREATE_VBELN_4_RFWORKDATA
    importing
      !I_T_RF_LECT_WORK type TY_T_RF_LECT_WORK
    returning
      value(R_O_DELIVERY) type ref to ZCL_HP_DELIVERY
    raising
      ZCX_EXCEPTION .
  methods _FINALICE_UNLOAD_NO_SHIPMENT .
  methods _FINALICE_UNLOAD_WITH_SHIPMENT
    raising
      ZCX_EXCEPTION .
  methods _GET_RF_EM_LECT_DATA_4_TKNUM
    returning
      value(R_T_RF_EM_LECT) type ZTT_ZWM_RF_EM_LECT .
  methods _GET_RF_EM_LECT_DATA_4_VERUR
    returning
      value(R_T_RF_EM_LECT) type ZTT_ZWM_RF_EM_LECT .
  methods _CHECK_SHIPMENT_REQUIRED
    returning
      value(R_REQUIRED) type BOOLEAN .
  methods _MAP_RFEMLECTT_2_RFWORKDATAT
    importing
      !I_T_ZWM_RF_EM_LECT type ZTT_ZWM_RF_EM_LECT
    returning
      value(R_T_RF_LECT_WORK) type TY_T_RF_LECT_WORK .
  methods _MAP_RFEMLECT_2_KOMDLGN
    importing
      !I_ZWM_RF_EM_LECT type ZWM_RF_EM_LECT
    returning
      value(R_S_KOMDLGN) type KOMDLGN .
  methods _MAP_RFEMLECT_2_RFEMLECTVERUR
    importing
      !I_T_ZWM_RF_EM_LECT type ZTT_ZWM_RF_EM_LECT
    returning
      value(R_T_DATA_RF_EM_LECT) type TY_VERUR_T_DATA .
  methods _MAP_RFEMLECT_2_RFWORKDATA
    importing
      !I_S_ZWM_RF_EM_LECT type ZWM_RF_EM_LECT
    returning
      value(R_S_RF_LECT_WORK) type TY_S_RF_LECT_WORK .
  methods _MAP_ZWM_RF_EM_LECT_2_KOMDLGN
    importing
      !I_ZWM_RF_EM_LECT type ZWM_RF_EM_LECT
    returning
      value(R_S_KOMDLGN) type KOMDLGN .
  methods _READ_RF_FUNC .
endclass. "ZCL_HP_WM_ITS_DESCARGAS definition
class ZCL_HP_WM_ITS_DESCARGAS implementation.
METHOD _CHECK_SHIPMENT_REQUIRED.

**********************************************************************
* Parámetros locales
**********************************************************************

  CONSTANTS: lc_no_transporte TYPE rvari_vnam VALUE 'NO_TRANSPORTE'.

  DATA: lv_fieldname TYPE fieldname.

  FIELD-SYMBOLS: <fv_fieldname> TYPE fieldname,
                 <fv_value>     TYPE any.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SET INITIAL RESULT AS REQUIRED

  MOVE abap_true TO r_required.

**** GET DATA

  "Monto nombre de columna
  CONCATENATE 'LG' me->_s_its_rf_data-lgnum INTO lv_fieldname.

  "Leo registro de tabla
  READ TABLE me->_zwm_rf_func ASSIGNING FIELD-SYMBOL(<fs_func>) WITH KEY func = lc_no_transporte.
  CHECK <fs_func> IS ASSIGNED.

  "Asignamos valor de columna
  ASSIGN COMPONENT lv_fieldname OF STRUCTURE <fs_func> TO <fv_value>.
  CHECK sy-subrc EQ 0.
  CHECK <fv_value> IS ASSIGNED.

  "Devolvemos valor
  IF ( <fv_value> EQ abap_true ).
    MOVE abap_false TO r_required.
  ENDIF.

  "Desasignamos FS
  UNASSIGN: <fs_func>, <fv_value>.

ENDMETHOD.
METHOD _create_vbeln_4_rfworkdata.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_delivery   TYPE REF TO zcl_hp_delivery.

  DATA: lt_data_work TYPE ty_t_rf_lect_work,
        lt_komdlgn   TYPE xkomdlgn..

  DATA: ls_komdlgn TYPE komdlgn.

  DATA: lv_posnr TYPE posnr.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** MOVE DATA TO WORK DATA

  MOVE-CORRESPONDING i_t_rf_lect_work[] TO lt_data_work[].

**** DELETE NO RELEVANT DATA

  DELETE lt_data_work WHERE vbeln IS NOT INITIAL.

**** CHECK

  CHECK lines( lt_data_work ) GT 0.

**** PREPARE DATA

  LOOP AT lt_data_work INTO DATA(ls_data_work).

    ls_komdlgn = me->_map_rfemlect_2_komdlgn( i_zwm_rf_em_lect = ls_data_work-rf_lect ).

    APPEND ls_komdlgn TO lt_komdlgn.

  ENDLOOP.

**** MODIFY DATA

  LOOP AT lt_komdlgn ASSIGNING FIELD-SYMBOL(<fs_komdlgn>).

    AT NEW matnr.
      CLEAR: ls_komdlgn.
      lv_posnr = lv_posnr + 10.
      MOVE-CORRESPONDING <fs_komdlgn> TO ls_komdlgn.
      CLEAR: ls_komdlgn-lfimg.
      APPEND ls_komdlgn TO lt_komdlgn.
    ENDAT.

    MOVE lv_posnr TO <fs_komdlgn>-uepos.

  ENDLOOP.

  "TODO: añadir posicion de referencia y modificar posición de lote
*
*  LOOP AT lt_komdlgn ASSIGNING FIELD-SYMBOL(<fs_komdlgn>).
*
*    AT NEW matnr.
*      CLEAR: ls_komdlgn.
*      lv_posnr = lv_posnr + 10.
*      <fs_komdlgn>-rfpos = lv_posnr.
*      APPEND <fs_komdlgn> TO lt_komdlgn.
*    ENDAT.
*
*    <fs_komdlgn>-uepos = lv_posnr.
*
*  ENDLOOP.

**** CREATE DELIVERY

  r_o_delivery ?= zcl_hp_delivery=>s_create_inb_delivery_w_data( i_t_xkomdlgn = lt_komdlgn ).

ENDMETHOD.
  method _FINALICE_UNLOAD_NO_SHIPMENT.
  endmethod.
METHOD _finalice_unload_with_shipment.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_delivery TYPE REF TO zcl_hp_delivery.

  DATA: lt_rf_lect_verur  TYPE ty_verur_t_data,
        lt_rf_lect_work   TYPE ty_t_rf_lect_work,


        lt_xkomdlgn       TYPE xkomdlgn,
        lt_oo_deliveries  TYPE ztt_oo_deliveries.

  DATA: ls_komdlgn       TYPE komdlgn.

  DATA: lv_message TYPE scx_attrname.


**********************************************************************
* Validaciones
**********************************************************************

**** TKNUM IS FILLED

  IF ( me->_o_shipment IS NOT BOUND ).
    CLEAR lv_message.
    MOVE text-003 TO lv_message.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '003' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' i_message = lv_message ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** PREPARE WORK DATA

*** GET DATA BY VERUR

  lt_rf_lect_verur = me->_map_rfemlect_2_rfemlectverur( i_t_zwm_rf_em_lect  = me->_get_rf_em_lect_data_4_tknum( ) ).

**** WORK WITH DATA

  "Creamos una EE por nota de entrega en cada transporte
  "Recorremos cada nota de entrega para crear la EE
  LOOP AT lt_rf_lect_verur INTO DATA(ls_rf_lect_verur).

    SORT ls_rf_lect_verur-data BY ebeln ebelp charg.

    "Obtengo datos en formato de trabajo
    lt_rf_lect_work = me->_map_rfemlectt_2_rfworkdatat( i_t_zwm_rf_em_lect = ls_rf_lect_verur-data ).

    "Comprobamos si tenemos que crear entregas
    READ TABLE lt_rf_lect_work TRANSPORTING NO FIELDS WITH KEY vbeln = space in_vbeln = space.
    IF ( sy-subrc EQ 0 ).

      "Creamos entrega si necesario.
      lo_delivery ?= me->_create_vbeln_4_rfworkdata( i_t_rf_lect_work = lt_rf_lect_work ).

      IF ( lo_delivery IS BOUND ).

        "SET DELIVERY TO SHIPMENT

      ENDIF.

    ENDIF.


    "Insertamos entrega en transporte si necesario



  ENDLOOP.


ENDMETHOD.
METHOD _get_rf_em_lect_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SELECT DATA

  SELECT *
    FROM zwm_rf_em_lect
    INTO CORRESPONDING FIELDS OF TABLE r_t_rf_em_lect
   WHERE tknum IN i_t_r_tknum
     AND verur IN i_t_r_verur
     AND werks EQ me->_s_its_rf_data-werks
     AND lgort EQ me->_s_its_rf_data-lgort
     AND finalizado EQ i_finished.

ENDMETHOD.
METHOD _get_rf_em_lect_data_4_tknum.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_r_tknum TYPE shp_tknum_range_t,
        ls_r_tknum TYPE shp_tknum_range.

**********************************************************************
* Validaciones
**********************************************************************

**** TKNUM

  CHECK me->_o_shipment IS BOUND.

**********************************************************************
* Lógica
**********************************************************************

**** SET RANGES

  CLEAR: ls_r_tknum.
  ls_r_tknum-sign   = 'I'.
  ls_r_tknum-option = 'EQ'.
  ls_r_tknum-low    = me->_o_shipment->_tknum.
  APPEND ls_r_tknum TO lt_r_tknum.

**** RETURN DATA

  r_t_rf_em_lect = me->_get_rf_em_lect_data( i_t_r_tknum = lt_r_tknum ).

ENDMETHOD.
METHOD _GET_RF_EM_LECT_DATA_4_VERUR.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_r_verur TYPE ztt_r_verur,
        ls_r_verur TYPE zst_r_verur.

**********************************************************************
* Validaciones
**********************************************************************

**** VERUR

  CHECK me->_s_its_rf_data-verur_nt IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** SET RANGES

  CLEAR: ls_r_verur.
  ls_r_verur-sign   = 'I'.
  ls_r_verur-option = 'EQ'.
  ls_r_verur-low    = me->_s_its_rf_data-verur_nt.
  APPEND ls_r_verur TO lt_r_verur.

**** RETURN DATA

  r_t_rf_em_lect = me->_get_rf_em_lect_data( i_t_r_verur = lt_r_verur ).

ENDMETHOD.
METHOD _map_rfemlect_2_komdlgn.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_zwm_rf_em_lect TYPE ztt_zwm_rf_em_lect.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK i_zwm_rf_em_lect-verur IS NOT INITIAL.
  CHECK i_zwm_rf_em_lect-ebeln IS NOT INITIAL.
  CHECK i_zwm_rf_em_lect-ebelp IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** SELECT DATA

  SELECT SINGLE *
    FROM ekko
    INTO @DATA(ls_ekko)
   WHERE ebeln EQ @i_zwm_rf_em_lect-ebeln.

  CHECK sy-subrc EQ 0.

  SELECT SINGLE *
    FROM ekpo
    INTO @DATA(ls_ekpo)
   WHERE ebeln EQ @i_zwm_rf_em_lect-ebeln
     AND ebelp EQ @i_zwm_rf_em_lect-ebelp.

  CHECK sy-subrc EQ 0.

**** MAP DATA

  r_s_komdlgn-lfdat = sy-datum.
  r_s_komdlgn-lifnr = ls_ekko-lifnr.
  r_s_komdlgn-arktx = ls_ekpo-txz01.
  r_s_komdlgn-matnr = ls_ekpo-matnr.
*  <fs_komdlgn>-charg = wl_zwm_rf_em_lect-charg.
  r_s_komdlgn-lfart = 'EL'.

*Quantity and Unit from Delivery
  r_s_komdlgn-uebtk = ls_ekpo-uebtk.
  r_s_komdlgn-uebto = ls_ekpo-uebto.
  r_s_komdlgn-untto = ls_ekpo-untto.
  r_s_komdlgn-werks = ls_ekpo-werks.
  r_s_komdlgn-lgort = ls_ekpo-lgort.

  CLEAR r_s_komdlgn-lfimg.

  r_s_komdlgn-lfimg = i_zwm_rf_em_lect-menge.
  r_s_komdlgn-vrkme = i_zwm_rf_em_lect-meins.
  r_s_komdlgn-meins = ls_ekpo-lmein.
  r_s_komdlgn-umvkz = ls_ekpo-umrez.
  r_s_komdlgn-umvkn = ls_ekpo-umren.
  r_s_komdlgn-vgbel = ls_ekpo-ebeln.
  r_s_komdlgn-vgpos = ls_ekpo-ebelp.
  r_s_komdlgn-vgtyp = 'V'.
  r_s_komdlgn-kzazu = 'X'.
  r_s_komdlgn-verur = i_zwm_rf_em_lect-verur.
  r_s_komdlgn-lifex = i_zwm_rf_em_lect-verur.

ENDMETHOD.
METHOD _MAP_RFEMLECT_2_RFEMLECTVERUR.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_delivery TYPE REF TO zcl_hp_delivery.

  DATA: lt_zwm_rf_em_lect TYPE ztt_zwm_rf_em_lect.

  DATA: ls_verur_data TYPE ty_verur_s_data,
        lt_verur_data TYPE ty_verur_t_data.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK lines( i_t_zwm_rf_em_lect ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

**** MOVE TO WORK TABLE

  MOVE i_t_zwm_rf_em_lect[] TO lt_zwm_rf_em_lect[].

  SORT lt_zwm_rf_em_lect BY tknum verur ebeln ebelp charg.

**** LOOP DATA

  LOOP AT lt_zwm_rf_em_lect INTO DATA(ls_zwm_rf_em_lect).

    ""Nueva NOTA DE ENTREGA
    AT NEW verur.

      CLEAR: ls_verur_data.
      MOVE ls_zwm_rf_em_lect-verur TO ls_verur_data-verur.

    ENDAT.

*** RF DATA SAVE

    "Guardamos registro de lectura
    APPEND ls_zwm_rf_em_lect TO ls_verur_data-data.

    ""Fin nueva nota de entrega
    AT END OF verur.

      APPEND ls_verur_data TO r_t_data_rf_em_lect.

    ENDAT.

  ENDLOOP.

ENDMETHOD.
METHOD _map_rfemlect_2_rfworkdata.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_delivery TYPE REF TO zcl_hp_delivery.

  DATA: lt_dlv_item TYPE bapidlvitem_t,
        ls_dlv_item TYPE bapidlvitem.

  DATA: lv_message TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**** TKNUM IS FILLED

  CHECK i_s_zwm_rf_em_lect IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** MOVE ZWM_RF_EM_LECT 2 RETURN DATA

  MOVE-CORRESPONDING i_s_zwm_rf_em_lect TO r_s_rf_lect_work-rf_lect.

**** INIT DELIVERY

  "Comprobamos si la tabla ya lleva entrega asociada...
  IF ( i_s_zwm_rf_em_lect-vbeln_em IS NOT INITIAL ). "Tiene entrega asociada...

    TRY.

      "Instanciamos objeto entrega
      lo_delivery ?= NEW zcl_hp_delivery( i_vbeln = i_s_zwm_rf_em_lect-vbeln_em ).

      "Comprobamos si se ha instanciado
      IF ( lo_delivery IS BOUND ).

        "Compruebo si está asignado al transporte actual
        READ TABLE lo_delivery->_s_data-t_document_flow TRANSPORTING NO FIELDS WITH KEY vbtyp_n = '8' vbeln = me->_o_shipment->_tknum.
        CHECK sy-subrc EQ 0.

        "Muevo datos de entrega
        MOVE lo_delivery->_vbeln          TO r_s_rf_lect_work-vbeln.
        MOVE i_s_zwm_rf_em_lect-posnr_em  TO r_s_rf_lect_work-posnr.
        MOVE abap_true                    TO r_s_rf_lect_work-in_vbeln.

        "Compruebo status cabecera
        CASE lo_delivery->_s_data-s_delivery_header_sts-wbstk.

          WHEN 'A' OR 'B'.    "Cuando es A o B, miro la posición

            "Leemos datos de la posición.
            READ TABLE lo_delivery->_s_data-t_delivery_item INTO DATA(ls_delivery_item) WITH KEY posnr = i_s_zwm_rf_em_lect-posnr_em.
            IF ( sy-subrc EQ 0 ).
              MOVE ls_delivery_item-uepos TO r_s_rf_lect_work-uepos.
            ENDIF.

            "Leemos el status de la posición.
            READ TABLE lo_delivery->_s_data-t_delivery_item_sts INTO DATA(ls_delivery_item_sts) WITH KEY posnr = i_s_zwm_rf_em_lect-posnr_em.
            IF ( sy-subrc EQ 0 ).
              MOVE ls_delivery_item_sts-wbsta TO r_s_rf_lect_work-vbeln_sts.
            ENDIF.

          WHEN 'C' OR space.  "Cuando es C, muevo valor

            "Leemos status de cabecera
            MOVE lo_delivery->_s_data-s_delivery_header_sts-wbstk TO r_s_rf_lect_work-vbeln_sts.

        WHEN OTHERS.

        ENDCASE.

      ENDIF.

    CATCH zcx_exception.
    ENDTRY.

  ENDIF.

ENDMETHOD.
METHOD _MAP_RFEMLECTT_2_RFWORKDATAT.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_rf_lect_work TYPE ty_s_rf_lect_work.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK lines( i_t_zwm_rf_em_lect ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

**** GET DATA.

  LOOP AT i_t_zwm_rf_em_lect INTO DATA(ls_rf_data).

    CLEAR: ls_rf_lect_work.

    ls_rf_lect_work = me->_map_rfemlect_2_rfworkdata( i_s_zwm_rf_em_lect = ls_rf_data ).

    APPEND ls_rf_lect_work TO r_t_rf_lect_work.

  ENDLOOP.

**** SORT DATA

*  SORT r_t_rf_lect_work BY vbeln uepos posnr in_vbeln vbeln_sts.

ENDMETHOD.
METHOD _map_zwm_rf_em_lect_2_komdlgn.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_zwm_rf_em_lect TYPE ztt_zwm_rf_em_lect.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK i_zwm_rf_em_lect-verur IS NOT INITIAL.
  CHECK i_zwm_rf_em_lect-ebeln IS NOT INITIAL.
  CHECK i_zwm_rf_em_lect-ebelp IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** SELECT DATA

  SELECT SINGLE *
    FROM ekko
    INTO @DATA(ls_ekko)
   WHERE ebeln EQ @i_zwm_rf_em_lect-ebeln.

  CHECK sy-subrc EQ 0.

  SELECT SINGLE *
    FROM ekpo
    INTO @DATA(ls_ekpo)
   WHERE ebeln EQ @i_zwm_rf_em_lect-ebeln
     AND ebelp EQ @i_zwm_rf_em_lect-ebelp.

  CHECK sy-subrc EQ 0.

**** MAP DATA

  r_s_komdlgn-lfdat = sy-datum.
  r_s_komdlgn-lifnr = ls_ekko-lifnr.
  r_s_komdlgn-arktx = ls_ekpo-txz01.
  r_s_komdlgn-matnr = ls_ekpo-matnr.
*  <fs_komdlgn>-charg = wl_zwm_rf_em_lect-charg.
  r_s_komdlgn-lfart = 'EL'.

*Quantity and Unit from Delivery
  r_s_komdlgn-uebtk = ls_ekpo-uebtk.
  r_s_komdlgn-uebto = ls_ekpo-uebto.
  r_s_komdlgn-untto = ls_ekpo-untto.
  r_s_komdlgn-werks = ls_ekpo-werks.
  r_s_komdlgn-lgort = ls_ekpo-lgort.

  CLEAR r_s_komdlgn-lfimg.

*  <fs_komdlgn>-lfimg = wl_ekpo-menge.
  r_s_komdlgn-vrkme = ls_ekpo-meins.
  r_s_komdlgn-meins = ls_ekpo-lmein.
  r_s_komdlgn-umvkz = ls_ekpo-umrez.
  r_s_komdlgn-umvkn = ls_ekpo-umren.
  r_s_komdlgn-vgbel = ls_ekpo-ebeln.
  r_s_komdlgn-vgpos = ls_ekpo-ebelp.
  r_s_komdlgn-vgtyp = 'V'.
  r_s_komdlgn-kzazu = 'X'.
  r_s_komdlgn-verur = i_zwm_rf_em_lect-verur.
  r_s_komdlgn-lifex = i_zwm_rf_em_lect-verur.

ENDMETHOD.
  METHOD _read_rf_func.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SELECT

    SELECT *
      FROM zwm_rf_func
      INTO CORRESPONDING FIELDS OF TABLE _zwm_rf_func.

  ENDMETHOD.
  METHOD _upd_rf_em_lect_data.
  ENDMETHOD.
  method ADD_NEW_LENUM_2_VERUR.
  endmethod.
METHOD add_new_verur.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_delivery TYPE REF TO zcl_hp_delivery.

  DATA: lt_deliveries TYPE ztt_oo_deliveries.

  DATA: lv_message TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK i_verur IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** CHECK VERUR EXISTS

  IF ( me->_check_shipment_required( ) EQ abap_true ).

    IF ( me->_o_shipment IS BOUND ).

      IF ( i_check_exists EQ abap_true ).

        lt_deliveries = me->_o_shipment->get_delivery_from_verur( i_verur = i_verur ).

        IF ( lines( lt_deliveries ) GT 0 ).
          READ TABLE lt_deliveries INTO lo_delivery INDEX 1.
          CLEAR: lv_message.
          MOVE text-004 TO lv_message.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_message WITH lo_delivery->_vbeln.
          zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '004' i_msgid   = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' i_message = lv_message ) ).
        ENDIF.

      ENDIF.

*      zcl_hp_delivery=>

    ELSE.

      "TODO: ERROR

    ENDIF.

  ELSE.



  ENDIF.


ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** WERKS

  IF ( i_werks IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** LGORT

  IF ( i_werks IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** TKNUM OR VERUR

  IF ( i_tknum IS INITIAL AND i_verur IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** SET RF FUNCS

  me->_read_rf_func( ).

**** SET ATRIBUTES

*** SET WERKS, LGORT AND LGNUM

  zcl_utils_wm=>s_get_lgnum_4_werks_and_lgort(
    EXPORTING i_werks = i_werks i_lgort = i_lgort
    RECEIVING e_lgnum = me->_s_its_rf_data-lgnum
    EXCEPTIONS
      no_value                 = 1
      no_lgnum_for_werks_lgort = 2
      OTHERS                   = 3
  ).
  IF ( sy-subrc EQ 0 ).
    me->_s_its_rf_data-werks = i_werks.
    me->_s_its_rf_data-lgort = i_lgort.
  ELSE.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
  ENDIF.

*** SET TKNUM AND VERUR

** TKNUM

  IF ( me->_check_shipment_required( ) EQ abap_true ). "Si requiere transporte

    "Chequeo TKNUM
    IF ( i_tknum IS INITIAL ).

      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).

    ELSE.

      SELECT COUNT(*) UP TO 1 ROWS
        FROM vttk
       WHERE tknum EQ i_tknum.

      IF ( sy-subrc EQ 0 ).
        me->_o_shipment ?= NEW zcl_hp_shipment( i_tknum = i_tknum ).
      ELSE.
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
      ENDIF.

    ENDIF.

  ELSE. "No requiere transporte

** VERUR

    IF ( i_verur IS NOT INITIAL ).
      MOVE i_verur TO me->_s_its_rf_data-verur_nt.
    ELSE.
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_wm_its_descargas=>_sc_class_label i_msgty = 'E' ) ).
    ENDIF.

  ENDIF.

*** GET CURRENT RF_EM_LECT

  IF ( me->_check_shipment_required( ) EQ abap_true ).
    me->_s_its_rf_data-t_wm_rf_em = me->_get_rf_em_lect_data_4_tknum( ).
  ELSE.
    me->_s_its_rf_data-t_wm_rf_em = me->_get_rf_em_lect_data_4_verur( ).
  ENDIF.

*** SET UNAME

  MOVE sy-uname TO me->_s_its_rf_data-uname.

ENDMETHOD.
  method DEL_NEW_LENUM_2_VERUR.
  endmethod.
  method DEL_NEW_VERUR.
  endmethod.
METHOD finalice_unload.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_wm_rf_em_lect TYPE TABLE OF zwm_rf_em_lect.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** GET CURRENT ZWM_RF_EM_LECT DATA

  "Comprobamos si transporte es requerido
  IF ( me->_check_shipment_required( ) EQ abap_true ). "Transporte requerido

*    me->_finalice_unload_with_shipment( ).

  ELSE. "Transporte no requerido

*    lt_wm_rf_em_lect = me->_get_rf_em_lect_data_4_verur( ).

  ENDIF.

  "Ordenamos resultado por...
  SORT lt_wm_rf_em_lect BY tknum verur ebeln ebelp charg.

ENDMETHOD.
