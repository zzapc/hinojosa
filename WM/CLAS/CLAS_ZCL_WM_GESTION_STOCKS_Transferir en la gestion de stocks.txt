
class ZCL_WM_GESTION_STOCKS definition
  public
  final
  create public .

public section.

  class-data GC_VARI_BESTQ type CHAR1 value 'B' ##NO_TEXT.
  class-data GC_VARI_SOBKZ type CHAR1 value 'S' ##NO_TEXT.

  class-methods CREATE_TRANSF_STOCK
    importing
      !IV_LGNUM type LAGP-LGNUM
      !IV_LGTYP type LAGP-LGTYP
      !IV_BWLVS type T333U-BWLVS
      !IV_LENUM type LQUA-LENUM
    exporting
      !ET_DATA type ZMW_RL034_CT
    exceptions
      NO_AUTHORITY
      NO_ENQUEUE_POSSIBLE
      ERROR_WM_POSTING
      ERROR_IM_POSTING
      NO_DATA_FOUND .
protected section.
private section.

  types:
    ty_lubqu_t TYPE TABLE OF lubqu .

  constants GC_IM_AUFRU type RL03T-AUFRU value 'VU' ##NO_TEXT.
  constants GC_IM_TCODE type SY-TCODE value 'MB11' ##NO_TEXT.
  class-data MV_LGNUM type LAGP-LGNUM .
  class-data MV_LGTYP type LAGP-LGTYP .
  class-data MV_BWLVS type T333U-BWLVS .
  class-data MV_LENUM type LQUA-LENUM .
  class-data MV_BESTQ type LQUA-BESTQ .
  class-data MS_T333U type T333U .
  class-data MS_T331 type T331 .
  class-data MV_VARI type CHAR1 .

  class-methods AUTHORITY_CHECK
    importing
      !PV_OBJECT type CHAR20
      !PV_ID type CHAR20
      !PV_FIELD type CHAR20
    exceptions
      NO_AUTHORITY .
  class-methods CHECK_DATA_NOT_CHANGED
    importing
      !IS_DATA type RL034
    returning
      value(RESULT) type XFELD .
  class-methods CREATE_POSTING_CHANGE
    importing
      !IS_DATA type RL034
    exporting
      !ES_LUBUI type LUBUI
      !ET_LUBQU type TY_LUBQU_T
      !ET_TAP type TT_LTAP_VB
    returning
      value(RESULT) type SY-SUBRC
    exceptions
      ERROR_WM_POSTING .
  class-methods GET_LAGP
    importing
      !IT_LQUA type LQUA_T
    returning
      value(RESULT) type ISU_WAWA_LAGP .
  class-methods GET_LQUA
    returning
      value(RESULT) type LQUA_T .
  class-methods IM_POSTING_CREATE
    importing
      !IV_BUDAT type BUDAT default SY-DATUM
      !IV_BLDAT type BLDAT default SY-DATUM
      !IS_DATA type RL034
      !IS_LUBUI type LUBUI
      !IT_LUBQU type TY_LUBQU_T
      !IT_TAP type TT_LTAP_VB
    exporting
      !EV_MBLNR type EMKPF-MBLNR
      !EV_MJAHR type EMKPF-MJAHR
    exceptions
      ERROR_IM_POSTING .
  class-methods PREPARE_DATA
    importing
      !IT_LAGP type ISU_WAWA_LAGP
      !IT_LQUA type LQUA_T
    returning
      value(RESULT) type ZMW_RL034_CT .
  class-methods INIT_DATA
    importing
      !IV_LGNUM type LAGP-LGNUM
      !IV_LGTYP type LAGP-LGTYP
      !IV_BWLVS type T333U-BWLVS
      !IV_LENUM type LQUA-LENUM .
endclass. "ZCL_WM_GESTION_STOCKS definition
class ZCL_WM_GESTION_STOCKS implementation.
  METHOD authority_check.

    AUTHORITY-CHECK OBJECT pv_object
         ID pv_id FIELD pv_field.

    IF sy-subrc NE 0.
      MESSAGE ID 'ZWM_RF' TYPE 'E' NUMBER 000
      WITH text-001 RAISING no_authority.
    ENDIF.


  ENDMETHOD.
  METHOD check_data_not_changed.
    DATA ls_lqua TYPE lqua.

    SELECT SINGLE * FROM lqua INTO ls_lqua
      WHERE lgnum EQ is_data-lgnum
        AND lgtyp EQ is_data-lgtyp
        AND lgpla EQ is_data-lgpla
        AND lqnum EQ is_data-lqnum.

    IF sy-subrc = 0.
      IF is_data-gesme NE ls_lqua-gesme OR
         is_data-verme NE ls_lqua-verme OR
         is_data-einme NE ls_lqua-einme OR
         is_data-ausme NE ls_lqua-ausme.

        FREE result.
      ELSE.
        result = abap_true.
      ENDIF.
    ELSE.
      FREE result.
    ENDIF.

  ENDMETHOD.
  METHOD create_posting_change.

    DATA ls_lubqu LIKE LINE OF et_lubqu.
    DATA lv_tanum TYPE ltak-tanum.


    FREE: ls_lubqu.
    ls_lubqu-lqnum = is_data-lqnum.
    ls_lubqu-menge = is_data-gesme.
    ls_lubqu-kzuap = abap_true.
    ls_lubqu-squit = abap_true.
    ls_lubqu-letyp = is_data-letyp.
    ls_lubqu-zeugn = is_data-zeugn.
    ls_lubqu-wdatu = is_data-wdatu.
    ls_lubqu-vfdat = is_data-vfdat.
    APPEND ls_lubqu TO et_lubqu.

    SET UPDATE TASK LOCAL.
    CHECK NOT et_lubqu[] IS INITIAL.

    FREE es_lubui.

    CASE mv_vari.
      WHEN gc_vari_bestq.
        es_lubui-matn1 = is_data-matnr.
        es_lubui-werk1 = is_data-werks.
        es_lubui-lgor1 = is_data-lgort.
        es_lubui-bstq1 = ms_t333u-bstq1.
        es_lubui-chrg1 = is_data-charg.
        es_lubui-sokz1 = is_data-sobkz.
        es_lubui-sonr1 = is_data-sonum.
        es_lubui-matn2 = is_data-matnr.
        es_lubui-werk2 = is_data-werks.
        es_lubui-lgor2 = is_data-lgort.
        es_lubui-bstq2 = ms_t333u-bstq2.
        es_lubui-chrg2 = is_data-charg.
        es_lubui-sokz2 = is_data-sobkz.
        es_lubui-sonr2 = is_data-sonum.

        es_lubui-bwlvs = mv_bwlvs.
        es_lubui-bwart = ms_t333u-bwart.
        es_lubui-menge = is_data-verme.
        es_lubui-meins = is_data-meins.
        es_lubui-altm1 = is_data-meins.
        es_lubui-altm2 = is_data-meins.

        IF cl_ops_switch_check=>sfsw_segmentation_02( ) EQ abap_on.
          es_lubui-sgt_scat   = is_data-sgt_scat.
          es_lubui-sgt_umscat = is_data-sgt_scat.
        ENDIF.

      WHEN gc_vari_sobkz.
        es_lubui-matn1 = is_data-matnr.
        es_lubui-werk1 = is_data-werks.
        es_lubui-lgor1 = is_data-lgort.
        es_lubui-bstq1 = is_data-bestq.
        es_lubui-chrg1 = is_data-charg.
        es_lubui-matn2 = is_data-matnr.
        es_lubui-werk2 = is_data-werks.
        es_lubui-lgor2 = is_data-lgort.
        es_lubui-bstq2 = is_data-bestq.
        es_lubui-chrg2 = is_data-charg.

        es_lubui-bwlvs = mv_bwlvs.
        es_lubui-bwart = ms_t333u-bwart.
        es_lubui-menge = is_data-verme.
        es_lubui-meins = is_data-meins.
        es_lubui-altm1 = is_data-meins.
        es_lubui-altm2 = is_data-meins.

        IF cl_ops_switch_check=>sfsw_segmentation_02( ) EQ abap_on.
          es_lubui-sgt_scat   = is_data-sgt_scat.
          es_lubui-sgt_umscat = is_data-sgt_scat.
        ENDIF.

      WHEN OTHERS.
    ENDCASE.                             " UMB_VARI

    FREE lv_tanum.
    CALL FUNCTION 'L_TO_CREATE_POSTING_CHANGE'
      EXPORTING
        i_lgnum       = is_data-lgnum
        i_lubui       = es_lubui
        i_squit       = abap_true
        i_nidru       = abap_true
        i_update_task = space
        i_commit_work = space
        i_bname       = sy-uname
      IMPORTING
        e_tanum       = lv_tanum
      TABLES
        t_lubqu       = et_lubqu
        t_ltap_vb     = et_tap
      EXCEPTIONS
        error_message = 99.

    result = sy-subrc.

    IF result NE 0.
      ROLLBACK WORK.                                   "#EC CI_ROLLBACK

      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING error_wm_posting.
    ENDIF.

  ENDMETHOD.
  METHOD create_transf_stock.

    DATA ls_lubui   TYPE lubui.
    DATA lt_lubqu   TYPE STANDARD TABLE OF lubqu.
    DATA lt_tap     TYPE tt_ltap_vb.
    DATA lv_mblnr   TYPE emkpf-mblnr.
    DATA lv_mjahr   TYPE emkpf-mjahr.
    DATA lv_retcode TYPE sy-subrc.

    init_data(
      EXPORTING
        iv_lgnum = iv_lgnum    " Núm.almacén/Complejo alm.
        iv_lgtyp = iv_lgtyp    " Tipo almacén
        iv_bwlvs = iv_bwlvs    " Cl.movim.gestión almacenes
        iv_lenum = iv_lenum    "
    ).

** validar autorizaciones
    authority_check(
      EXPORTING
        pv_object    = 'L_SFUNC'
        pv_id        = 'L_SFUNC'
        pv_field     = '2'
      EXCEPTIONS
        no_authority = 1
        OTHERS       = 2 ).

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                 RAISING no_authority.
    ENDIF.


** Obtener Cuantos
    DATA(lt_lqua) = get_lqua( ).

** Obtener Ubicaciones
    DATA(lt_lagp) = get_lagp( lt_lqua ).


    IF lt_lqua[] IS INITIAL.
      MESSAGE e398(00) WITH text-031
           RAISING no_data_found.
    ENDIF.

** preparar datos
    FREE et_data.
    et_data = prepare_data( it_lagp = lt_lagp
                            it_lqua = lt_lqua ).

    LOOP AT et_data ASSIGNING FIELD-SYMBOL(<fs_data>).
      CALL FUNCTION 'L_BIN_LOCATION_ENQUEUE'
        EXPORTING
          i_lgnum       = <fs_data>-lgnum
          i_lgtyp       = <fs_data>-lgtyp
          i_lgpla       = <fs_data>-lgpla
          i_lenum       = ' '
          i_enque       = ' '
        EXCEPTIONS
          error_message = 99.

      IF sy-subrc NE 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1
             sy-msgv2
             sy-msgv3
             sy-msgv4 RAISING no_enqueue_possible.
      ENDIF.

** Validar que datos no hay mudado
      CHECK check_data_not_changed( <fs_data> ) IS NOT INITIAL.

** Rebook WM
      FREE: lv_retcode, lt_tap, lt_lubqu.
      create_posting_change(
        EXPORTING
          is_data          = <fs_data>     " Estructura de transferencia p.traslado de almacén/traspaso
        IMPORTING
          es_lubui         = ls_lubui    " Instrucción de traspaso implícita
          et_lubqu         = lt_lubqu
          et_tap           = lt_tap    " LTAP & LTAP1 para tarea de actualización
        RECEIVING
          result           = lv_retcode    " Casilla de selección
        EXCEPTIONS
          error_wm_posting = 1
          OTHERS           = 2 ).
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                   RAISING error_wm_posting.
      ENDIF.

      IF lv_retcode IS INITIAL.
** Rebook IM
        FREE: lv_mblnr, lv_mjahr.
        im_posting_create(
          EXPORTING
*          iv_budat         = SY-DATUM    " Fecha de contabilización en el documento
*          iv_bldat         = SY-DATUM    " Fecha de documento en documento
            is_data          = <fs_data>    " Indicador de una posición
            is_lubui         = ls_lubui    " Indicador de una posición
            it_lubqu         = lt_lubqu    " Indicador de una posición
            it_tap           = lt_tap    " Indicador de una posición
          IMPORTING
            ev_mblnr         = lv_mblnr     " Número de documento material
            ev_mjahr         = lv_mjahr     " Ejercicio del documento de material
          EXCEPTIONS
            error_im_posting = 1
            OTHERS           = 2 ).
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                     WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                     RAISING error_im_posting.
        ENDIF.

        <fs_data>-mblnr  = lv_mblnr.
        <fs_data>-mjahr  = lv_mjahr.
      ENDIF.

      CALL FUNCTION 'L_BIN_LOCATION_DEQUEUE'
        EXPORTING
          i_lgnum       = <fs_data>-lgnum
          i_lgtyp       = <fs_data>-lgtyp
          i_lgpla       = <fs_data>-lgpla
          i_lenum       = ' '
          i_enque       = ' '
        EXCEPTIONS
          error_message = 99.
    ENDLOOP.

  ENDMETHOD.
  METHOD get_lagp.

    CHECK it_lqua[] IS NOT INITIAL.

    SELECT * FROM lagp
      INTO CORRESPONDING FIELDS OF TABLE result
      FOR ALL ENTRIES IN it_lqua
      WHERE lgnum EQ mv_lgnum
        AND lgtyp EQ mv_lgtyp
        AND lgpla EQ it_lqua-lgpla.

  ENDMETHOD.
  METHOD get_lqua.

    SELECT * FROM lqua
      INTO CORRESPONDING FIELDS OF TABLE result
      WHERE lgnum EQ mv_lgnum
        AND lgtyp EQ mv_lgtyp
        AND lenum EQ mv_lenum
        AND bestq EQ mv_bestq.

  ENDMETHOD.
  METHOD im_posting_create.

    DATA lt_ilqua     TYPE STANDARD TABLE OF lqua_im.
    DATA ls_ilqua     LIKE LINE OF lt_ilqua.
    DATA ls_kopf      TYPE imkpf.
    DATA lv_flg_sobub TYPE rl03t-sobub.
    DATA lt_emkpf     TYPE STANDARD TABLE OF emkpf.
    DATA lt_lqua_prot TYPE STANDARD TABLE OF lqua_prot.

    CHECK NOT it_lubqu[] IS INITIAL.

    FREE: lt_ilqua.

    LOOP AT it_tap INTO DATA(ls_tap) WHERE vorga = 'U1'.
      FREE ls_ilqua.

      MOVE-CORRESPONDING ls_tap TO ls_ilqua.
      MOVE: ls_tap-nlqnr TO ls_ilqua-lqnum,
            ls_tap-nsolm TO ls_ilqua-menge,
            ls_tap-nltyp TO ls_ilqua-lgtyp,
            ls_tap-nlpla TO ls_ilqua-lgpla,
            ls_tap-nppos TO ls_ilqua-plpos,
            ls_tap-nlenr TO ls_ilqua-lenum.

      MOVE: is_lubui-bstq2 TO ls_ilqua-umbsq.
      IF ls_tap-sobkz IS INITIAL.
        MOVE: is_lubui-sokz2 TO ls_ilqua-sobkz,
              is_lubui-sonr2 TO ls_ilqua-sonum.
      ELSE.
        MOVE: is_lubui-sokz2 TO ls_ilqua-umsok,
              is_lubui-sonr2 TO ls_ilqua-usonu.
      ENDIF.

      COLLECT ls_ilqua INTO lt_ilqua.

*     Determine direction of posting in case               "v_n_661138
*       of special stock posting changes
      IF mv_vari = gc_vari_sobkz.
        IF ls_tap-sobkz IS INITIAL.
          lv_flg_sobub = '1'.           "Free to Special Stock
        ELSE.
          IF is_lubui-sokz2 IS INITIAL.
            lv_flg_sobub = '2'.         "Special Stock to Free
          ELSE.
            lv_flg_sobub = '3'.         "Special Stock to Special Stock
          ENDIF.
        ENDIF.
      ENDIF.                                                "^_n_661138

    ENDLOOP.

    FREE ls_kopf.
    ls_kopf-budat = iv_budat.
    ls_kopf-bldat = iv_bldat.

    CALL FUNCTION 'L_IM_POSTING_CREATE'
      EXPORTING
        i_imkpf       = ls_kopf
        i_tcode       = gc_im_tcode
        i_sobub       = lv_flg_sobub
        i_bwart       = ms_t333u-bwart
        i_aufrufer    = gc_im_aufru
      TABLES
        t_lqua_im     = lt_ilqua
        t_emkpf       = lt_emkpf
        t_lqua_prot   = lt_lqua_prot
      EXCEPTIONS
        error_message = 99
        OTHERS        = 0.

    IF sy-subrc NE 0.
      ROLLBACK WORK.                                   "#EC CI_ROLLBACK
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING error_im_posting.
    ELSE.

      LOOP AT lt_lqua_prot INTO DATA(ls_lqua_prot) WHERE NOT msgno IS INITIAL.
        EXIT.
      ENDLOOP.
      IF sy-subrc EQ 0.
        ROLLBACK WORK.                                 "#EC CI_ROLLBACK
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING error_im_posting.
      ELSE.
        LOOP AT lt_emkpf INTO DATA(ls_emkpf).
          ev_mblnr = ls_emkpf-mblnr.
          ev_mjahr = ls_emkpf-mjahr.
        ENDLOOP.
        COMMIT WORK.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD init_data.

    FREE: ms_t333u, mv_lgnum, mv_lgtyp, mv_bwlvs, ms_t331,
          mv_lenum, mv_vari.

    mv_lgnum = iv_lgnum.
    mv_lgtyp = iv_lgtyp.
    mv_bwlvs = iv_bwlvs.
    mv_lenum = iv_lenum.

** Obter Cl.movimiento WM p.traslado a WM y IM
    SELECT SINGLE * FROM t333u INTO ms_t333u
      WHERE lgnum EQ mv_lgnum
        AND bwlvs EQ mv_bwlvs.

    IF NOT ( ms_t333u-bstq1 IS INITIAL AND ms_t333u-bstq2 IS INITIAL ).
      mv_vari  = gc_vari_bestq.
      mv_bestq = ms_t333u-bstq1.
    ENDIF.

**  Control de tipo de almacén
    SELECT SINGLE * FROM t331 INTO ms_t331
      WHERE lgnum EQ mv_lgnum
        AND lgtyp EQ mv_lgtyp.

  ENDMETHOD.
  METHOD prepare_data.

    DATA ls_data LIKE LINE OF result.

    LOOP AT it_lqua INTO DATA(ls_lqua).

      TRY .
          DATA(ls_lagp) = it_lagp[ lgnum = ls_lqua-lgnum
                                   lgtyp = ls_lqua-lgtyp
                                   lgpla = ls_lqua-lgpla ].
        CATCH cx_sy_itab_line_not_found.
          FREE ls_lagp.
      ENDTRY.

      IF ls_lqua-plpos NE space.
        CALL FUNCTION 'L_PLATZ_POSITION_MISCHEN'
          EXPORTING
            lgpla   = ls_lqua-lgpla
            plpos   = ls_lqua-plpos
          IMPORTING
            o_lgpla = ls_data-misch_platz.
      ELSE.
        ls_data-misch_platz = ls_lqua-lgpla.
      ENDIF.

*......Daten in interne Tabelle übertragen.............................
      MOVE-CORRESPONDING ls_lqua TO ls_data.
      MOVE-CORRESPONDING ls_lagp TO ls_data.

      MOVE: ls_lqua-lgpla  TO ls_data-lqua_lgpla,
            ls_lqua-lgnum  TO ls_data-lqua_lgnum,
            ls_lqua-lgtyp  TO ls_data-lqua_lgtyp,
            ls_lqua-skzua  TO ls_data-lqua_skzua,
            ls_lqua-skzue  TO ls_data-lqua_skzue,
            ls_lqua-skzsa  TO ls_data-lqua_skzsa,
            ls_lqua-skzse  TO ls_data-lqua_skzse,
            ls_lqua-skzsi  TO ls_data-lqua_skzsi,
            ls_lqua-spgru  TO ls_data-lqua_spgru,
            ls_lqua-bdatu  TO ls_data-lqua_bdatu,
            ls_lqua-bzeit  TO ls_data-lqua_bzeit,
            ls_lqua-btanr  TO ls_data-lqua_btanr,
            ls_lqua-btaps  TO ls_data-lqua_btaps,
            ls_lqua-mgewi  TO ls_data-lqua_mgewi,
            ls_lqua-gewei  TO ls_data-lqua_gewei,
            ls_lqua-ivnum  TO ls_data-lqua_ivnum,
            ls_lqua-ivpos  TO ls_data-lqua_ivpos,
            ls_lqua-kober  TO ls_data-lqua_kober.

      WRITE ls_lqua-sonum TO ls_data-lsonr.

      MOVE 'C20' TO ls_data-farbe.

      APPEND ls_data TO result.
    ENDLOOP.

  ENDMETHOD.
