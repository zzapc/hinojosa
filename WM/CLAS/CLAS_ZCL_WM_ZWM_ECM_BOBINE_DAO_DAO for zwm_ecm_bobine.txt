
class ZCL_WM_ZWM_ECM_BOBINE_DAO definition
  public
  final
  create protected .

public section.

  types:
    BEGIN OF gty_cont,
             id_bob_ecm TYPE zwm_id,
             bobine     TYPE  zwm_bobine,
             dref       TYPE REF TO zcl_wm_zwm_ecm_bobine_dao,
           END OF gty_cont .
  types:
    BEGIN OF gty_tbnum_perc,
             lgnum TYPE ltbk-lgnum,
             tbnum TYPE ltbk-tbnum,
             perc  TYPE p LENGTH 6 DECIMALS 2,
           END OF gty_tbnum_perc .
  types:
    gtyr_tbnum      TYPE RANGE OF ltbk-tbnum .
  types:
    gtty_tbnum_perc TYPE STANDARD TABLE OF gty_tbnum_perc WITH DEFAULT KEY .
  types:
    gtty_cont       TYPE STANDARD TABLE OF gty_cont WITH DEFAULT KEY .

  data GS_DATA type ZWM_ECM_BOBINE .

  class-methods QUERY_BY_ID_BOB_ECM
    importing
      !IV_ID_BOB_ECM type ZWM_ID
      !IV_NOT_SAVED_ONLY type BOOLEAN default ABAP_TRUE
    returning
      value(RT_DATA) type ZWM_ECM_BOBINE_TAB .
  class-methods QUERY_BY_BOBINE
    importing
      !IV_LGNUM type LGNUM
      !IV_BOBINE type ZWM_ECM_BOBINE-BOBINE
      !IV_NO_TANUM_ONLY type BOOLEAN default ABAP_TRUE
      !IV_TBNUM type BOOLEAN default ABAP_FALSE
      !IV_ID_BOB_ECM type ZWM_ECM_BOBINE-ID_BOB_ECM optional
    returning
      value(RT_DATA) type ZWM_ECM_BOBINE_TAB .
  class-methods GET_ENTRY
    importing
      !IV_ID_BOB_ECM type ZWM_ID
      !IV_BOBINE type ZWM_BOBINE
    returning
      value(RR_REF) type ref to ZCL_WM_ZWM_ECM_BOBINE_DAO
    raising
      ZCX_WM_EXCEPTION .
  class-methods CREATE_ENTRY
    importing
      !IV_ID_BOB_ECM type ZWM_ID
      !IV_BOBINE type ZWM_BOBINE
    returning
      value(RR_REF) type ref to ZCL_WM_ZWM_ECM_BOBINE_DAO .
  methods SET_DIAMETRO
    importing
      !IV_DIAMETRO type ZDIAMETRO
      !IV_TECH type BOOLEAN default ABAP_FALSE
    raising
      ZCX_WM_EXCEPTION .
  methods SET_IS_TBNUM
    importing
      !IV_IS_TBNUM type BOOLEAN .
  methods IS_TBNUM
    returning
      value(RV_IS_TBNUM) type BOOLEAN .
  methods SET_PERC_ASSIGN
    importing
      !IV_PERC_ASSIGN type ZWM_ECM_BOBINE-PERC_ASSIGN .
  methods GET_PERC_ASSIGN
    returning
      value(RV_PERC_ASSIGN) type ZWM_ECM_BOBINE-PERC_ASSIGN .
  methods SET_TANUM
    importing
      !IS_LTAK type LTAK .
  methods DELETE_ENTRY
    importing
      !IV_RELATED type BOOLEAN default ABAP_FALSE
      !IV_COMMIT type BOOLEAN .
  methods GET_DATA
    returning
      value(RS_DATA) type ZWM_ECM_BOBINE .
  methods SAVE_DATA
    importing
      !IV_COMMIT type BOOLEAN default ABAP_TRUE
      !IV_NO_OT type BOOLEAN default ABAP_FALSE
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  class-methods CALC_TBNUM_PERC
    importing
      !ITR_TBNUM type GTYR_TBNUM
      !IV_LGNUM type LGNUM
    returning
      value(RT_PERC) type GTTY_TBNUM_PERC .
protected section.

  class-data GT_CONT type GTTY_CONT .

  class-methods CREATE_OT_4_BOBINE
    importing
      !IS_DATA type ZWM_ECM_BOBINE .
  class-methods CREATE_OT_4_BOBINE_V2
    importing
      !IS_DATA type ZWM_ECM_BOBINE
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods CREATE_OT
    importing
      !IS_NT_DATA type LTBK optional
      !IS_PARENT_RSNUM type ZWM_ECM_BOBINE optional
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods CREATE_OT_V2
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods SET_ASSIGNED_QTY
    importing
      !IV_QTY type ZWM_ECM_BOBINE-ASSIGNED_QTY
      !IV_RESTANTE type ZWM_ECM_BOBINE-RESTANTE optional
      !IV_MEINS type ZWM_ECM_BOBINE-ASSIGNED_QTY_UM
    returning
      value(RV_SUCC) type BOOLEAN .
  methods SET_PARENT_ID
    importing
      !IV_ID type ZWM_ECM_BOBINE-ID_BOB_ECM .
  methods FETCH_OT_MOV
    returning
      value(RV_BWLVS) type LTAK-BWLVS .
  methods CONSTRUCTOR
    importing
      !IV_ID_BOB_ECM type ZWM_ID
      !IV_BOBINE type ZWM_BOBINE
      !IV_NEW type BOOLEAN default ABAP_FALSE
    raising
      ZCX_WM_EXCEPTION .
  methods SELECT_DATA
    importing
      !IV_ID_BOB_ECM type ZWM_ID
      !IV_BOBINE type ZWM_BOBINE
    raising
      ZCX_WM_EXCEPTION .
private section.
endclass. "ZCL_WM_ZWM_ECM_BOBINE_DAO definition
class ZCL_WM_ZWM_ECM_BOBINE_DAO implementation.
  METHOD calc_tbnum_perc.
    CLEAR rt_perc.

    CHECK lines( itr_tbnum ) > 0.
    SELECT lgnum , tbnum, SUM( menge ) AS menge, meins
      FROM  ltbp
      INTO TABLE @DATA(lt_ltbp)
      WHERE tbnum IN @itr_tbnum
      AND lgnum = @iv_lgnum
      GROUP BY lgnum, tbnum, meins.

    CHECK sy-subrc = 0.
    " total qty
    DATA(lv_tot) = VALUE ltbp-menge( ).
    LOOP AT lt_ltbp INTO DATA(ls_ltbp).
      lv_tot = lv_tot + ls_ltbp-menge.
    ENDLOOP.

    CHECK lv_tot > 0.
    " now calc percentages
    rt_perc = VALUE #( FOR ls_ltbp_aux IN lt_ltbp (
    lgnum = ls_ltbp_aux-lgnum tbnum = ls_ltbp_aux-tbnum
    perc = round( val = ls_ltbp_aux-menge * 100 / lv_tot dec = 0 )

    ) ).


  ENDMETHOD.
  METHOD constructor.
    TRY.
        me->select_data( iv_id_bob_ecm = iv_id_bob_ecm iv_bobine = iv_bobine ).
      CATCH zcx_wm_exception INTO DATA(lr_exc).
        IF iv_new = abap_true.
          me->gs_data-bobine = iv_bobine.
          me->gs_data-id_bob_ecm = iv_id_bob_ecm.
          DATA(lv_rsnum) = zcl_wm_nt_generic=>decode_line_id(
            EXPORTING
              iv_id         = iv_id_bob_ecm
              iv_rsnum_mode = abap_true
          ).
          SELECT SINGLE lgnum FROM ltbk INTO @me->gs_data-lgnum
          WHERE rsnum = @lv_rsnum-rsnum.
        ELSE.
          RAISE EXCEPTION lr_exc.
        ENDIF.
    ENDTRY.
  ENDMETHOD.
  METHOD create_entry.
    " check for existence
    TRY.
        rr_ref = get_entry(
             iv_id_bob_ecm    = iv_id_bob_ecm
             iv_bobine        = iv_bobine
         ).

      CATCH cx_root.
        " create
        TRY.
            rr_ref = NEW #( iv_bobine = iv_bobine iv_id_bob_ecm = iv_id_bob_ecm iv_new = abap_true ).
            " add to cont
            APPEND VALUE #( id_bob_ecm = iv_id_bob_ecm bobine = iv_bobine dref = rr_ref ) TO gt_cont.
          CATCH cx_root.
        ENDTRY.
    ENDTRY.
  ENDMETHOD.
  METHOD create_ot.
    " bobine may not exist... in this, case create only consumption

    "create ot's
    DATA(lr_ref) = zcl_wm_nt_generic=>get_instance(
*        iv_langu = SY-LANGU
).
    IF is_nt_data IS INITIAL..

      DATA(ls_nt_data) =  zcl_wm_nt_generic=>decode_line_id(
        EXPORTING
          iv_id         = me->gs_data-id_bob_ecm
          iv_tbnum_mode = abap_true

   ).
    ELSE.
      ls_nt_data = CORRESPONDING #( is_nt_data ).
    ENDIF.

    SELECT SINGLE * FROM lqua INTO @DATA(ls_lqua)
      WHERE lgnum = @ls_nt_data-lgnum AND lenum = @me->gs_data-bobine.
    IF ls_lqua-verme IS INITIAL.
      SELECT SINGLE * FROM lqua INTO @ls_lqua
        WHERE lgnum = @ls_nt_data-lgnum AND lenum = @me->gs_data-bobine
        AND gesme > 0.
      ls_lqua-verme = ls_lqua-gesme.
    ENDIF.

    SELECT SINGLE * FROM ltbk INTO @DATA(ls_ltbk)
      WHERE lgnum = @ls_nt_data-lgnum AND tbnum = @ls_nt_data-tbnum.

    IF ls_ltbk-bwlvs NE '919'.
      " cvivo - Punto de verificación: identificar NTs mal seleccionadas
      DATA(key) = |Error selección NT: { sy-datum } / { sy-uzeit } / { sy-uname }|.
      LOG-POINT ID zwm_ui5 SUBKEY key FIELDS is_nt_data ls_nt_data.
    ENDIF.

    " 2 - store in Z table
    IF ls_lqua IS INITIAL.
      " unknow
      SELECT SINGLE matnr, werks INTO ( @ls_lqua-matnr, @ls_lqua-werks )
        FROM ltbp
        WHERE lgnum = @ls_nt_data-lgnum AND tbnum = @ls_nt_data-tbnum.
      ls_lqua-lenum = me->gs_data-bobine.
      DATA(lv_no_ot) = abap_true.
    ENDIF.


    DATA(ls_decoded) = lr_ref->decode_line_id( iv_id = me->gs_data-id_bob_ecm ).
    DATA(ls_mat_info) = zcl_wm_nt_generic=>get_mat_info_lznum( is_data = VALUE #( lznum = ls_ltbk-lznum lt_tbnum = VALUE #( ( ) ) ) ).

    "JCB: Muevo esta grabación a después de crear la OT, para no guardarlo si fallara
*    DATA(ls_entry) = lr_ref->bobecm_create_consumption(
*                   iv_lgnum      = ls_ltbk-lgnum
*                   is_data       = VALUE #( id_pedprog = me->gs_data-id_bob_ecm id = me->gs_data-bobine )
*                   is_orig_lqua  = ls_lqua
*                   is_orig_ltbk  = ls_ltbk
*                   iv_cons_qty = me->gs_data-assigned_qty
*                   iv_meins      = me->gs_data-assigned_qty_um
*                   iv_calidad    = ls_mat_info-quality
*                   iv_restante = me->gs_data-restante
*                   iv_diametro = me->gs_data-diametro
*                   iv_last = iv_last
*                   iv_create_entry_only = abap_true
*               ).



    IF lv_no_ot = abap_false.
      " 1 - create ot's based on NT
      " 919 or 920/921/922
      DATA(lv_bwlvs) = me->fetch_ot_mov( ).


*      IF is_parent_rsnum-diametro <> 0.
*        zcl_wm_nt_generic=>conv_mat_diametro(
*           EXPORTING
*             iv_matnr          = ls_lqua-matnr    " Número de material
*             iv_qty            =  CONV #( is_parent_Rsnum-diametro )   " Cantidad de pedido
*             iv_meins          =  zcl_wm_nt_generic=>gc_meins_dia   " DIA/KG
*             iv_dest_meins     =  zcl_wm_nt_generic=>gc_meins_kg   " Unidad de medida base
*             iv_werks          = ls_lqua-werks
*           RECEIVING rv_qty = DATA(lv_diam_kg)
*           EXCEPTIONS
*             um_no_valid       = 1
*             missing_constants = 2
*             missing_matnr     = 3
*             no_base_calc      = 4
*             OTHERS            = 5
*         ).
*        DATA(lv_qty_kg) = CONV bstmg( ls_lqua-verme - lv_diam_kg ).
*      ELSE.
*        lv_qty_kg = ls_lqua-verme.
*      ENDIF.
*      IF me->gs_data-perc_assign <> 0.
*        DATA(lv_spec_qty_kg) = lv_qty_kg * me->gs_data-perc_assign / 100.
*        lv_diam_kg = lv_diam_kg + lv_qty_kg - lv_spec_qty_kg.
*        lv_qty_kg = lv_spec_qty_kg.
*      ENDIF.

      "      lv_qty = me->gs_data-assigned_qty.


      IF me->gs_data-parent_id_bob_ecm IS INITIAL OR is_parent_rsnum-parent_id_bob_ecm IS INITIAL. " only do it for original nt that triggered consumption
        " 1 - create ot
        zcl_wm_nt_generic=>create_ot_4_nt_sc(
          EXPORTING
            iv_bobine     = me->gs_data-bobine
            iv_dest_nlpla = ls_ltbk-nlpla
            iv_bwlvs      = lv_bwlvs
            is_ltbk       = ls_ltbk
            iv_qty        = me->gs_data-assigned_qty
            iv_meins      = me->gs_data-assigned_qty_um
          IMPORTING
            es_ltak       = DATA(ls_ltak)
            ev_subrc      = DATA(lv_subrc)
        ).

        " 2 - change reserv
        zcl_wm_nt_generic=>change_reserv_4_cons(
          EXPORTING
            iv_bobine = me->gs_data-bobine
            is_ltbk   = ls_ltbk
            iv_qty    = me->gs_data-assigned_qty
            iv_meins  = me->gs_data-assigned_qty_um
*              IMPORTING
*                et_ret    =
        ).



*        CASE lv_bwlvs.
*          WHEN '919'.
*            " not needed
**            zcl_wm_nt_generic=>create_ot_4_nt(
**            EXPORTING
**                iv_bobine     = me->gs_data-bobine
**                iv_dest_nlpla = ls_ltbk-nlpla
**                iv_bwlvs      = lv_bwlvs
**                is_ltbk       = ls_ltbk
**                            iv_qty        = lv_qty_kg
**                iv_meins      = zcl_wm_nt_generic=>gc_meins_kg
**        IMPORTING
**          es_ltak       = DATA(ls_ltak)
**          ev_subrc      = DATA(lv_subrc)
**            ).
*            zcl_wm_nt_generic=>change_reserv_4_cons(
*              EXPORTING
*                iv_bobine = me->gs_data-bobine
*                is_ltbk   = ls_ltbk
*                iv_qty    = lv_qty_kg
*                iv_meins  = zcl_wm_nt_generic=>gc_meins_kg
**              IMPORTING
**                et_ret    =
*            ).
*
*          WHEN OTHERS.
*            zcl_wm_nt_generic=>create_ot_4_nt_sc(
*              EXPORTING
*                iv_bobine     = me->gs_data-bobine
*                iv_dest_nlpla = ls_ltbk-nlpla
*                iv_bwlvs      = lv_bwlvs
*                is_ltbk       = ls_ltbk
*                            iv_qty        = lv_qty_kg
*                iv_meins      = zcl_wm_nt_generic=>gc_meins_kg
*              IMPORTING
*                es_ltak       = DATA(ls_ltak)
*                ev_subrc      = DATA(lv_subrc)
*            ).
*
*            " for these cases, we must also change reservation
*            zcl_wm_nt_generic=>change_reserv_4_cons(
*              EXPORTING
*                iv_bobine = me->gs_data-bobine
*                is_ltbk   = ls_ltbk
*                iv_qty    = lv_qty_kg
*                iv_meins  = zcl_wm_nt_generic=>gc_meins_kg
**              IMPORTING
**                et_ret    =
*            ).
*
*        ENDCASE.
      ENDIF.
    ENDIF.


    "JCB: Dejo aquí la creación del consumo
    DATA(ls_entry) = lr_ref->bobecm_create_consumption(
                   iv_lgnum      = ls_ltbk-lgnum
*                   is_data       = VALUE #( id_pedprog = me->gs_data-id_bob_ecm id = me->gs_data-bobine )
                   is_orig_lqua  = ls_lqua
                   is_orig_ltbk  = ls_ltbk
                   iv_cons_qty = me->gs_data-assigned_qty
                   iv_meins      = me->gs_data-assigned_qty_um
                   iv_calidad    = ls_mat_info-quality
                   iv_restante = me->gs_data-restante
                   iv_diametro = me->gs_data-diametro
*                   iv_last = iv_last
                   iv_create_entry_only = abap_true
               ).



    " 3 - submit consumption program
    ls_decoded = lr_ref->decode_line_id( iv_id = me->gs_data-id_bob_ecm ).
    ls_mat_info = zcl_wm_nt_generic=>get_mat_info_lznum( is_data = VALUE #( lznum = ls_ltbk-lznum lt_tbnum = VALUE #( ( ) ) ) ).


    DATA(ls_entry_fin) = lr_ref->bobecm_create_consumption(
                    iv_lgnum      = ls_ltbk-lgnum
*                    is_data       = VALUE #( id_pedprog = me->gs_data-id_bob_ecm id = me->gs_data-bobine )
                    is_orig_lqua  = ls_lqua
                    is_orig_ltbk  = ls_ltbk
                    iv_cons_qty = me->gs_data-assigned_qty
                    iv_meins      = me->gs_data-assigned_qty_um
                    iv_calidad    = ls_mat_info-quality
                    iv_restante = me->gs_data-restante
                    iv_diametro = me->gs_data-diametro
*                    iv_last = iv_last
                    iv_create_entry_only = abap_false
                    is_entry = ls_entry
                ).
    IF ls_entry_fin IS INITIAL.
      RAISE EXCEPTION TYPE zcx_wm_exception
        EXPORTING
          textid = /iwbep/cx_mgw_busi_exception=>business_error_unlimited.
    ENDIF.

    me->set_tanum( is_ltak = ls_ltak ).
    me->save_data(
*      EXPORTING
*        iv_commit        = ABAP_TRUE
        iv_no_ot         = abap_true
    ).
*      CATCH zcx_wm_exception.    "





  ENDMETHOD.
  METHOD create_ot_4_bobine.
    DATA lr_tbnum TYPE RANGE OF ltbp-tbnum.
    " current entry will hold the remaining diametro -> must be then divided by all nt's
    " must get all the NT's that use this bobine
    DATA(lt_data) =  zcl_wm_zwm_ecm_bobine_dao=>query_by_bobine(
       EXPORTING
         iv_lgnum         = is_data-lgnum
         iv_bobine        = is_data-bobine
*        iv_no_tanum_only = ABAP_TRUE
     ).

    CHECK lines( lt_data ) > 0.

    SELECT SINGLE * FROM lqua INTO @DATA(ls_lqua)
    WHERE lgnum = @is_data-lgnum AND lenum = @is_data-bobine.

    DATA(ls_nt_data) = zcl_wm_nt_generic=>decode_line_id(
     iv_id         = lt_data[ 1 ]-id_bob_ecm
     iv_tbnum_mode = abap_true ).



    IF ls_lqua IS INITIAL.

      DATA(lv_unknow) = abap_true.
      " unknow bobine in SAP
      SELECT SINGLE matnr, werks INTO ( @ls_lqua-matnr, @ls_lqua-werks )
      FROM ltbp
      WHERE lgnum = @ls_nt_data-lgnum AND tbnum = @ls_nt_data-tbnum.
    ENDIF.

    " get remaining qty
    IF is_data-diametro <> 0.

      zcl_wm_nt_generic=>conv_mat_diametro(
         EXPORTING
           iv_matnr          = ls_lqua-matnr    " Número de material
           iv_qty            =  CONV #( is_data-diametro )   " Cantidad de pedido
           iv_meins          =  zcl_wm_nt_generic=>gc_meins_dia   " DIA/KG
           iv_dest_meins     =  zcl_wm_nt_generic=>gc_meins_kg   " Unidad de medida base
           iv_werks          = ls_lqua-werks
         RECEIVING rv_qty = DATA(lv_diam_kg)
         EXCEPTIONS
           um_no_valid       = 1
           missing_constants = 2
           missing_matnr     = 3
           no_base_calc      = 4
           OTHERS            = 5
       ).
    ENDIF.

    " consumed qty
    IF lv_unknow = abap_false.
      DATA(lv_cons_qty_kg) = ls_lqua-verme - lv_diam_kg.
    ENDIF.

    " must calc now remaining diametro for each of the nt's

    DATA(lt_perc) = calc_tbnum_perc( itr_tbnum = VALUE #(
    FOR ls_data_aux IN lt_data ( sign = 'I' option = 'EQ' low =
    zcl_wm_nt_generic=>decode_line_id(
        iv_id         = ls_data_aux-id_bob_ecm
        iv_tbnum_mode = abap_true
    )-tbnum
     )
    )
                    iv_lgnum = is_data-lgnum ).

    " now assign qtys
    LOOP AT lt_data INTO DATA(ls_data).
      TRY.
          DATA(ls_decode) = zcl_wm_nt_generic=>decode_line_id(
      iv_id         = ls_data-id_bob_ecm
      iv_tbnum_mode = abap_true
  ).
          DATA(lv_assigned_qty) = CONV zwm_ecm_bobine-assigned_qty( lv_cons_qty_kg *
                                  lt_perc[ lgnum = ls_decode-lgnum tbnum = ls_decode-tbnum ]-perc /
                                  100 ).
          DATA(lv_assigned_meins) = zcl_wm_nt_generic=>gc_meins_kg.

          DATA(lr_ref) = zcl_wm_zwm_ecm_bobine_dao=>get_entry(
            EXPORTING
              iv_id_bob_ecm    = ls_data-id_bob_ecm
              iv_bobine        =  ls_data-bobine
          ).
          lr_ref->set_assigned_qty(
            EXPORTING
              iv_qty   = lv_assigned_qty
              iv_meins = lv_assigned_meins
          ).

          IF lr_ref->get_data( )-id_bob_ecm <> is_data-id_bob_ecm.
            lr_ref->set_parent_id( iv_id = is_data-id_bob_ecm ).
            " diametro will be handled in top id_bob_ecm only
            lr_ref->set_diametro(
              EXPORTING
                iv_diametro      = 0
            ).

          ENDIF.

          lr_ref->save_data(
            EXPORTING
              iv_commit        = abap_true
              iv_no_ot         = abap_true
          ).

        CATCH cx_root.    "
          CONTINUE.
      ENDTRY.
    ENDLOOP.


    " refresh data
    lt_data =   zcl_wm_zwm_ecm_bobine_dao=>query_by_bobine(
       EXPORTING
         iv_lgnum         = is_data-lgnum
         iv_bobine        = is_data-bobine
*        iv_no_tanum_only = ABAP_TRUE
     ).

    SORT lt_data BY parent_id_bob_ecm ASCENDING.
    " now execute OT creation
    LOOP AT lt_data INTO ls_data.
      TRY.
          lr_ref = zcl_wm_zwm_ecm_bobine_dao=>get_entry(
            EXPORTING
              iv_id_bob_ecm    = ls_data-id_bob_ecm
              iv_bobine        =  ls_data-bobine
          ).

          lr_ref->create_ot( ).
        CATCH cx_root.
          CONTINUE.
      ENDTRY.

    ENDLOOP.

  ENDMETHOD.
  METHOD create_ot_4_bobine_v2.
    DATA lr_tbnum TYPE RANGE OF ltbp-tbnum.
    DATA lt_sel TYPE TABLE OF rsparamsl_255.
    " current entry will hold the remaining diametro -> must be then divided by all nt's
    " must get all the NT's that use this bobine
    DATA(lt_data) =  zcl_wm_zwm_ecm_bobine_dao=>query_by_bobine(
                                                                  EXPORTING
                                                                    iv_lgnum         = is_data-lgnum
                                                                    iv_bobine        = is_data-bobine
                                                                    iv_id_bob_ecm = is_data-id_bob_ecm
*                                                                   iv_no_tanum_only = ABAP_TRUE
                                                                ).

    CHECK lines( lt_data ) > 0.

    SELECT SINGLE * FROM lqua INTO @DATA(ls_lqua)
      WHERE lgnum = @is_data-lgnum AND lenum = @is_data-bobine.
    IF ls_lqua-verme = 0.
      SELECT SINGLE * FROM lqua INTO @ls_lqua
        WHERE lgnum = @is_data-lgnum AND lenum = @is_data-bobine
          AND gesme > 0.
      ls_lqua-verme = ls_lqua-gesme.
    ENDIF.


    DATA(lv_rsnum) = zcl_wm_nt_generic=>decode_line_id(
                                                         iv_id         = lt_data[ 1 ]-id_bob_ecm
                                                         iv_rsnum_mode = abap_true )-rsnum.

    DATA(lt_ltbk) = zcl_wm_nt_generic=>get_nt_for_resb( is_resb = VALUE #( rsnum = lv_rsnum ) ).
    CHECK lines( lt_ltbk ) > 0.

    DATA(ls_ltbk) = lt_ltbk[ 1 ].

    IF ls_lqua IS INITIAL.
      DATA(lv_unknow) = abap_true.
      " unknow bobine in SAP
      SELECT SINGLE matnr, werks INTO ( @ls_lqua-matnr, @ls_lqua-werks )
        FROM ltbp
        WHERE lgnum = @ls_ltbk-lgnum AND tbnum = @ls_ltbk-tbnum.
    ENDIF.

    " get remaining qty
    "JCB: Si es un centro con cantidad en kgs o uds no se convierte
    TRY .
        DATA(wl_centro) = zcl_wm_nt_generic=>get_instance( )->centros_getdetail( ls_lqua-werks ).
      CATCH /iwbep/cx_mgw_busi_exception.
        CLEAR wl_centro.
    ENDTRY.

    TRY .
        IF ls_ltbk-nlpla IS NOT INITIAL.
          DATA(wl_maquina) = zcl_wm_nt_generic=>get_instance( )->maquinas_getdetail( ls_ltbk-nlpla ).
        ENDIF.
      CATCH /iwbep/cx_mgw_busi_exception.
        CLEAR wl_centro.
    ENDTRY.




    IF is_data-diametro <> 0. " cvivo - cambio paradigma: si diámetro, obtengo metros restantes, si no, trabajo con los metros el reparto, no con los KG (m equivale a UN si pallet siempre)
      IF wl_centro-consumos_bobinas_metros = abap_false.
*        zcl_wm_nt_generic=>conv_mat_diametro(  " DEL - CVIVO
*           EXPORTING
*             iv_matnr          = ls_lqua-matnr    " Número de material
*             iv_qty            =  CONV #( is_data-diametro )   " Cantidad de pedido
*             iv_meins          =  zcl_wm_nt_generic=>gc_meins_dia   " DIA/KG
*             iv_dest_meins     =  zcl_wm_nt_generic=>gc_meins_kg   " Unidad de medida base
*             iv_werks          = ls_lqua-werks
*           RECEIVING rv_qty = DATA(lv_kg_rest)
*           EXCEPTIONS
*             um_no_valid       = 1
*             missing_constants = 2
*             missing_matnr     = 3
*             no_base_calc      = 4
*             OTHERS            = 5
*         ).

        zcl_wm_nt_generic=>conv_mat_diametro( EXPORTING
                                                iv_matnr          = ls_lqua-matnr    " Número de material
                                                iv_qty            =  CONV #( is_data-diametro )   " Cantidad de pedido
                                                iv_meins          =  zcl_wm_nt_generic=>gc_meins_dia   " DIA/KG
                                                iv_dest_meins     =  zcl_wm_nt_generic=>gc_meins_m   " Unidad de medida base
                                                iv_werks          = ls_lqua-werks
                                              RECEIVING rv_qty = DATA(lv_m_rest)
                                              EXCEPTIONS
                                                um_no_valid       = 1
                                                missing_constants = 2
                                                missing_matnr     = 3
                                                no_base_calc      = 4
                                                OTHERS            = 5
                                                ).

      ELSE.
*        lv_kg_rest = zcl_wm_nt_generic=>conv_matnr( iv_matnr      = ls_lqua-matnr " DEL - si no es diámetro, ya viene en M/UN restantes
*                                                    iv_meins_orig = SWITCH #( wl_maquina-gestiona_palets WHEN 'X' THEN 'ST' ELSE 'M' )
*                                                    iv_meins_dest = zcl_wm_nt_generic=>gc_meins_kg
*                                                    iv_qty        = CONV #( is_data-diametro )
*        ).
        lv_m_rest = is_data-diametro.
      ENDIF.
    ENDIF.

    " consumed qty
    IF lv_unknow = abap_false. " la UA existe
      DATA(lv_qty_actual) = zcl_wm_nt_generic=>conv_matnr( iv_matnr      = ls_lqua-matnr " DEL - si no es diámetro, ya viene en M/UN restantes
                                                            iv_meins_dest = SWITCH #( wl_maquina-gestiona_palets WHEN 'X' THEN 'ST' ELSE 'M' )
                                                            iv_meins_orig = ls_lqua-meins
                                                            iv_qty        = ls_lqua-verme ).
      DATA(lv_cons_qty_m) = lv_qty_actual - lv_m_rest.
    ENDIF.

*    "JCB: Convierto a kilos " CVIVO - no me hace falta
*    IF ls_lqua-meins <> zcl_wm_nt_generic=>gc_meins_kg.
*      DATA vl_menge TYPE ekpo-menge.
*      vl_menge = lv_cons_qty_kg.
*      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*        EXPORTING
*          i_matnr              = ls_lqua-matnr
*          i_in_me              = ls_lqua-meins
*          i_out_me             = zcl_wm_nt_generic=>gc_meins_kg
*          i_menge              = vl_menge
*        IMPORTING
*          e_menge              = vl_menge
*        EXCEPTIONS
*          error_in_application = 1
*          error                = 2
*          OTHERS               = 3.
*      IF sy-subrc = 0.
*        lv_cons_qty_kg = vl_menge.
*      ELSE.
*        CLEAR lv_cons_qty_kg.
*      ENDIF.
*    ENDIF.


    " calc percentages
    DATA(lt_ltbk_full) = VALUE zcl_wm_constants=>gtty_ltbk( ).
    LOOP AT lt_data INTO DATA(ls_data).
      lv_rsnum = zcl_wm_nt_generic=>decode_line_id(   iv_id         = ls_data-id_bob_ecm
                                                      iv_rsnum_mode = abap_true
                                                      )-rsnum.
      " must calc now remaining diametro for each of the nt's
      lt_ltbk = zcl_wm_nt_generic=>get_nt_for_resb( is_resb = VALUE #( rsnum = lv_rsnum ) ).
      APPEND LINES OF lt_ltbk TO lt_ltbk_full.
    ENDLOOP.

    DATA(lt_perc) = calc_tbnum_perc( itr_tbnum = VALUE #( FOR ls_data_aux IN lt_ltbk_full ( sign = 'I' option = 'EQ' low = ls_data_aux-tbnum ) ) iv_lgnum = is_data-lgnum ).

    " now assign qtys
    LOOP AT lt_data INTO ls_data.
      TRY.
          lv_rsnum = zcl_wm_nt_generic=>decode_line_id( iv_id         = ls_data-id_bob_ecm
                                                        iv_rsnum_mode = abap_true
                                                        )-rsnum.

          " must calc now remaining diametro for each of the nt's
          lt_ltbk = zcl_wm_nt_generic=>get_nt_for_resb( is_resb = VALUE #( rsnum = lv_rsnum ) ).

          DATA(lv_assigned_qty) = VALUE zwm_ecm_bobine-assigned_qty( ). " cvivo - sólo sirve para declarar la variable?
*
*          "cvivo - UM en función de tipo de UA
          CASE ls_lqua-letyp.
            WHEN 'BB'.
              DATA(lv_assigned_meins) = zcl_wm_nt_generic=>gc_meins_m.
            WHEN 'PL'.
              lv_assigned_meins = zcl_wm_nt_generic=>gc_meins_unidad.
          ENDCASE.

          DATA(lr_ref) = zcl_wm_zwm_ecm_bobine_dao=>get_entry( EXPORTING
                                                                  iv_id_bob_ecm    = ls_data-id_bob_ecm
                                                                  iv_bobine        =  ls_data-bobine
                                                              ).

          DATA(lines) = lines( lt_ltbk ).

          LOOP AT lt_ltbk INTO ls_ltbk.
            DATA(index) = sy-tabix.

            DATA(lv_spec_assign_qty) = CONV zwm_ecm_bobine-assigned_qty( lv_cons_qty_m *
                              lt_perc[ lgnum = ls_ltbk-lgnum tbnum = ls_ltbk-tbnum ]-perc /
                              100 ).
*            DATA(lv_spec_diam) =  CONV zwm_ecm_bobine-diametro( is_data-diametro " DEL - cvivo - no lo veo necesario
*            * lt_perc[ lgnum = ls_ltbk-lgnum tbnum = ls_ltbk-tbnum ]-perc / 100 ).
            " create entry for tbnum
            DATA(lr_tbnum_ref) = zcl_wm_zwm_ecm_bobine_dao=>create_entry( EXPORTING
                                                                                    iv_id_bob_ecm = zcl_wm_nt_generic=>code_line_id(
                                                                                                        is_data       = CORRESPONDING #( ls_ltbk )
                                                                                                        iv_tbnum_mode = abap_true
*                                                                                                       iv_rsnum_mode = ABAP_FALSE
                                                                                                    )
                                                                                    iv_bobine     = ls_data-bobine
                                                                                ).

            lr_tbnum_ref->set_is_tbnum( abap_true ).

            lr_tbnum_ref->set_perc_assign( iv_perc_assign = CONV #( lt_perc[ lgnum = ls_ltbk-lgnum tbnum = ls_ltbk-tbnum ]-perc  ) ).


            lr_tbnum_ref->set_diametro( EXPORTING
                                          iv_diametro  = COND #( WHEN wl_centro-consumos_bobinas_metros EQ abap_true THEN 0 ELSE is_data-diametro )
                                          ).

            IF index EQ lines AND is_data-diametro EQ 0. " cvivo - última línea, si restantes 0, consumimos todo
              lv_assigned_qty = lv_qty_actual.
            ELSE.
              lv_assigned_qty = lv_assigned_qty + lv_spec_assign_qty.
            ENDIF.

            lr_tbnum_ref->set_assigned_qty(
                EXPORTING
                iv_qty   = lv_spec_assign_qty
                iv_restante = CONV #( lv_qty_actual - lv_assigned_qty ) " para que se acumule con las diferentes ctds. parciales
                iv_meins = lv_assigned_meins
            ).

            lr_tbnum_ref->set_parent_id( iv_id = is_data-id_bob_ecm ).

            lr_tbnum_ref->save_data(
            EXPORTING
              iv_commit        = abap_true
              iv_no_ot         = abap_true
          ).
          ENDLOOP.

          lr_ref->set_assigned_qty(
            EXPORTING
              iv_qty   = lv_assigned_qty
              iv_meins = lv_assigned_meins
          ).

          IF lr_ref->get_data( )-id_bob_ecm <> is_data-id_bob_ecm.
            lr_ref->set_parent_id( iv_id = is_data-id_bob_ecm ).
            " diametro will be handled in top id_bob_ecm only
            lr_ref->set_diametro(
              EXPORTING
                iv_diametro      = 0
            ).

          ENDIF.

          lr_ref->save_data(
            EXPORTING
              iv_commit        = abap_true
              iv_no_ot         = abap_true
          ).
        CATCH cx_root.
          CONTINUE.
      ENDTRY.

    ENDLOOP.


    " refresh data
    lt_data =   zcl_wm_zwm_ecm_bobine_dao=>query_by_bobine(
       EXPORTING
         iv_lgnum         = is_data-lgnum
         iv_bobine        = is_data-bobine
         iv_id_bob_ecm = is_data-id_bob_ecm
*        iv_no_tanum_only = ABAP_TRUE
     ).

    SORT lt_data BY parent_id_bob_ecm ASCENDING.
    " now execute OT creation and conssumption, and print
    LOOP AT lt_data INTO ls_data.
*      TRY.
      lr_ref = zcl_wm_zwm_ecm_bobine_dao=>get_entry(
        EXPORTING
          iv_id_bob_ecm    = ls_data-id_bob_ecm
          iv_bobine        =  ls_data-bobine
      ).

      lr_ref->create_ot_v2( ).
*        CATCH cx_root.
*          CONTINUE.
*      ENDTRY.
    ENDLOOP.

    " cvivo - Lanzamos la impresión aquí, 1 etiqueta por consumo
    CHECK ls_data-diametro > 0.

    EXPORT lv_vengo_inter_consumo = abap_true TO MEMORY ID 'VENGO_CONSUMO' .
    EXPORT lv_cod_maq_portabo = wl_maquina-id TO MEMORY ID 'MAQUINA'.

    " create label for remaining
    lt_sel = VALUE #(
    ( selname = 'P_LGNUM' kind = 'P' sign = 'I' option = 'EQ' low = ls_data-lgnum )
    ( selname = 'S_LENUM' kind = 'S' sign = 'I' option = 'EQ' low = ls_data-bobine )
    ).
    SUBMIT zimpresion_ua WITH SELECTION-TABLE lt_sel
    AND RETURN.

    FREE MEMORY ID: 'VENGO_CONSUMO', 'MAQUINA'.

  ENDMETHOD.
  METHOD create_ot_v2.
    DATA lt_sel TYPE TABLE OF rsparamsl_255.
*    DATA(lv_rsnum) =  zcl_wm_nt_generic=>decode_line_id(
*                      EXPORTING
*                       iv_id         = me->gs_data-id_bob_ecm
*                       iv_rsnum_mode = abap_true
*                      )-rsnum.

*    DATA(lt_ltbk) = zcl_wm_nt_generic=>get_nt_for_resb( is_resb = VALUE #( rsnum = lv_rsnum ) ).

    SORT me->gt_cont BY dref->gs_data-is_tbnum dref->gs_data-restante DESCENDING.

    LOOP AT me->gt_cont INTO DATA(cont) WHERE dref->gs_data-is_tbnum NE space.
      DATA(lr_ref) = get_entry(
            iv_id_bob_ecm    = cont-id_bob_ecm
            iv_bobine        = cont-bobine
            ).

      lr_ref->create_ot( is_parent_rsnum = me->gs_data ).
    ENDLOOP.

    " DEL - cvivo - no necesitamos la LTBK, utilizo arriba el objeto y lo ordeno por cantidad
*    LOOP AT lt_ltbk INTO DATA(ls_ltbk).
**      DATA(lv_last) = COND #( WHEN sy-tabix = lines( lt_ltbk ) THEN abap_true ELSE abap_false ).
*      DATA(lr_ref) = get_entry(
*             iv_id_bob_ecm    = zcl_wm_nt_generic=>code_line_id(
*                                    is_data       = CORRESPONDING #( ls_ltbk )
*                                    iv_tbnum_mode = abap_true
**                                          iv_rsnum_mode = ABAP_FALSE
*                                )
*             iv_bobine        = me->gs_data-bobine
*         ).
*
*      lr_ref->create_ot(
*            is_parent_rsnum = me->gs_data
**            iv_last = lv_last
*        ).
*    ENDLOOP.

    " DEL - cvivo - lo saco fuera para cuando 1 consumo "n" pedidos, con lo que se imprimiría aquí varias etiquetas
*    CHECK me->gs_data-diametro > 0.
*
*    EXPORT lv_vengo_inter_consumo = abap_true TO MEMORY ID 'VENGO_CONSUMO' .
*
*    EXPORT lv_cod_maq_portabo = ls_ltbk-nlpla TO MEMORY ID 'MAQUINA' .
*
*    " create label for remaining
*    lt_sel = VALUE #(
*    ( selname = 'P_LGNUM' kind = 'P' sign = 'I' option = 'EQ' low = ls_ltbk-lgnum )
*    ( selname = 'S_LENUM' kind = 'S' sign = 'I' option = 'EQ' low = me->gs_data-bobine )
*    ).
*    SUBMIT zimpresion_ua WITH SELECTION-TABLE lt_sel
*    AND RETURN.
*
*    FREE MEMORY ID: 'VENGO_CONSUMO', 'MAQUINA'.

  ENDMETHOD.
  METHOD delete_entry.
    DELETE FROM zwm_ecm_bobine
    WHERE bobine = me->gs_data-bobine
    AND id_bob_ecm = me->gs_data-id_bob_ecm.
    IF iv_related = abap_true.
      DELETE FROM zwm_ecm_bobine
  WHERE bobine = me->gs_data-bobine
  AND parent_id_bob_ecm = me->gs_data-id_bob_ecm.
    ENDIF.

    " remove from cont
    DELETE me->gt_cont WHERE bobine = me->gs_data-bobine.

    CHECK iv_commit = abap_true.
    COMMIT WORK AND WAIT.

  ENDMETHOD.
  METHOD fetch_ot_mov.
    CLEAR rv_bwlvs.

    DATA(ls_nt_data) =  zcl_wm_nt_generic=>decode_line_id(
       EXPORTING
         iv_id         = me->gs_data-id_bob_ecm
         iv_tbnum_mode = abap_true

     ).

    SELECT SINGLE matnr FROM lqua
    INTO @DATA(lv_bob_matnr)
    WHERE lenum = @me->gs_data-bobine
    AND lgnum = @ls_nt_data-lgnum.

    SELECT SINGLE matnr,werks FROM ltbp
    INTO @DATA(lv_ot_mat)
    WHERE lgnum = @ls_nt_data-lgnum
    AND tbnum = @ls_nt_data-tbnum.
    " rule:
    " matnr bobine = matnr nt -> 919
    IF lv_bob_matnr = lv_ot_mat-matnr.
      rv_bwlvs = '919'.
      RETURN.
    ENDIF.

    " check if substitute or compatible
    zcl_wm_nt_generic=>get_mat_subs_comp(
      EXPORTING
        iv_matnr  = lv_ot_mat-matnr
        iv_werks  = lv_ot_mat-werks
      IMPORTING
        et_subst  = DATA(lt_subst)
        et_compat = DATA(lt_compat)
    ).

*    " substitute -> 921 " DEL - cvivo - 58678 Sólo usaremos compatibles
*    IF line_exists( lt_subst[ matnr = lv_bob_matnr ] ).
*      rv_bwlvs = '921'.
*      RETURN.
*    ENDIF.

    " compatible -> 922
    IF line_exists( lt_compat[ matnr = lv_bob_matnr ] ).
      rv_bwlvs = '922'.
      RETURN.
    ENDIF.

    " other -> 920
    rv_bwlvs = '920'.



  ENDMETHOD.
  METHOD get_data.
    rs_data = me->gs_data.
  ENDMETHOD.
  METHOD get_entry.
    FREE rr_ref.
    TRY.
        rr_ref = gt_cont[ id_bob_ecm = iv_id_bob_ecm bobine = iv_bobine ]-dref.
      CATCH cx_root.
        " fetch data from db
        rr_ref = NEW #( iv_bobine = iv_bobine iv_id_bob_ecm = iv_id_bob_ecm iv_new = abap_false ).
        " add to cont
        APPEND VALUE #( id_bob_ecm = iv_id_bob_ecm bobine = iv_bobine dref = rr_ref ) TO gt_cont.
    ENDTRY.
  ENDMETHOD.
  METHOD get_perc_assign.
    rv_perc_assign = me->gs_data-perc_assign.
  ENDMETHOD.
  METHOD is_tbnum.
    rv_is_tbnum = me->gs_data-is_tbnum.
  ENDMETHOD.
  METHOD query_by_bobine.
    CLEAR rt_data.
    DATA lr_id_bob_ecm TYPE RANGE OF zwm_ecm_bobine-id_bob_ecm.
    DATA lr_tanum TYPE RANGE OF ltak-tanum.
    IF iv_no_tanum_only = abap_true.
      lr_tanum = VALUE #( ( sign = 'I' option = 'EQ' ) ).
    ENDIF.
    IF iv_id_bob_ecm IS NOT INITIAL.
      lr_id_bob_ecm = VALUE #( ( sign = 'I' option = 'EQ' low = iv_id_bob_ecm ) ).
    ENDIF.
    SELECT * FROM zwm_ecm_bobine
    INTO CORRESPONDING FIELDS OF TABLE rt_data
    WHERE bobine = iv_bobine
    AND tanum IN lr_tanum
    AND lgnum = iv_lgnum
    AND is_tbnum = iv_tbnum
    AND id_bob_ecm IN lr_id_bob_ecm.
  ENDMETHOD.
  METHOD query_by_id_bob_ecm.
    DATA lr_saved TYPE RANGE OF zwm_ecm_bobine-saved.
    IF iv_not_saved_only = abap_true.
      lr_saved  = VALUE #( ( sign = 'I' option = 'EQ' ) ).
    ENDIF.

    CLEAR rt_data.
    SELECT * FROM zwm_ecm_bobine
    INTO CORRESPONDING FIELDS OF TABLE rt_data
    WHERE id_bob_ecm = iv_id_bob_ecm
    AND saved IN lr_saved.
  ENDMETHOD.
  METHOD save_data.
    "update control strct
    GET TIME STAMP FIELD DATA(lv_stmp).
    IF me->gs_data-created_by IS INITIAL.
      me->gs_data-created_by = sy-uname.
      me->gs_data-created_at = lv_stmp.
      me->gs_data-created_at_zon = sy-zonlo.
    ENDIF.
    me->gs_data-changed_by = sy-uname.
    me->gs_data-changed_at = lv_stmp.
    me->gs_data-changed_at_zon = sy-zonlo.

    MODIFY zwm_ecm_bobine FROM gs_data.
    CHECK iv_commit = abap_true.
    COMMIT WORK.

    IF me->gs_data-saved = abap_true AND
    iv_no_ot = abap_false AND
    me->gs_data-tanum IS INITIAL.
      zcl_wm_zwm_ecm_bobine_dao=>create_ot_4_bobine_v2( is_data = me->gs_data ).
    ENDIF.

  ENDMETHOD.
  METHOD select_data.
    CHECK me->gs_data IS INITIAL.
    SELECT SINGLE * FROM zwm_ecm_bobine
    INTO CORRESPONDING FIELDS OF me->gs_data
    WHERE id_bob_ecm = iv_id_bob_ecm
    AND bobine = iv_bobine.
    CHECK sy-subrc NE 0.
    RAISE EXCEPTION TYPE zcx_wm_exception
      EXPORTING
        textid = VALUE #( msgid = 'ZUI5' msgno = '002' attr1 = iv_id_bob_ecm attr2 = iv_bobine )
*       previous =
      .
  ENDMETHOD.
  METHOD set_assigned_qty.
    me->gs_data-assigned_qty = iv_qty.
    me->gs_data-restante = iv_restante.

    me->gs_data-assigned_qty_um = me->gs_data-meins_restante = iv_meins.
  ENDMETHOD.
  METHOD set_diametro.

    IF me->gs_data-saved = abap_false.
      me->gs_data-diametro = iv_diametro.
      me->gs_data-saved = abap_true.
    ELSEIF me->gs_data-diametro <> iv_diametro.
      RAISE EXCEPTION TYPE zcx_wm_exception
        EXPORTING
          textid = VALUE #( msgid = 'ZUI5' msgno = '003' ).

    ENDIF.
  ENDMETHOD.
  METHOD set_is_tbnum.
    me->gs_data-is_tbnum = iv_is_tbnum.
  ENDMETHOD.
  METHOD set_parent_id.
    me->gs_data-parent_id_bob_ecm = iv_id.
  ENDMETHOD.
  METHOD set_perc_assign.
    me->gs_data-perc_assign = iv_perc_assign.
  ENDMETHOD.
  METHOD set_tanum.
    MOVE-CORRESPONDING is_ltak TO me->gs_data.
  ENDMETHOD.
