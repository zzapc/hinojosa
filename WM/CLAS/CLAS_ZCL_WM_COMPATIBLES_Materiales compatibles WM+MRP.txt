
class ZCL_WM_COMPATIBLES definition
  public
  final
  create public .

public section.

  types:
    tr_prgrp TYPE RANGE OF pgmi-prgrp.

  class-methods GET_COMPATIBLES
    importing
      !IV_WERKS type WERKS_D
      !IV_MATNR type MATNR
    exporting
      !E_PRINCIPAL type CHAR1
    returning
      value(ET_COMPAT) type ZTT_COMPAT .
  class-methods GET_GRUPOS
    importing
      !IV_WERKS type WERKS_D
      !IR_GROUP type TR_PRGRP optional
    returning
      value(ET_ZWM_COMPATIBLES) type ZTWM_COMPATIBLES .
protected section.
private section.
endclass. "ZCL_WM_COMPATIBLES definition
class ZCL_WM_COMPATIBLES implementation.
  METHOD get_compatibles.
    DATA: lv_matnr TYPE matnr.
    DATA: r_matnr  TYPE RANGE OF matnr.
    CLEAR: e_principal, et_compat.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = iv_matnr
      IMPORTING
        output = lv_matnr.

    r_matnr =  VALUE #( sign = 'I' option = 'EQ' ( low = lv_matnr(5) )
                                                 ( low = lv_matnr(9) )
                                                 ( low = lv_matnr(13) )
                                                 ( low = lv_matnr ) ).

    LOOP AT r_matnr ASSIGNING FIELD-SYMBOL(<range>).
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = <range>-low
        IMPORTING
          output = <range>-low.
    ENDLOOP.

    SELECT * FROM zwm_compatibles
      WHERE werks EQ @iv_werks
        AND ( principal IN @r_matnr
        OR compatible1 IN @r_matnr
        OR compatible2 IN @r_matnr
        OR compatible3 IN @r_matnr
        OR compatible4 IN @r_matnr
        OR compatible5 IN @r_matnr
        OR compatible6 IN @r_matnr
        OR compatible7 IN @r_matnr )
      INTO TABLE @DATA(t_compat).

    IF sy-subrc EQ 0.
      LOOP AT t_compat ASSIGNING FIELD-SYMBOL(<compat>).
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-principal
          IMPORTING
            output = <compat>-principal.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-compatible1
          IMPORTING
            output = <compat>-compatible1.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-compatible2
          IMPORTING
            output = <compat>-compatible2.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-compatible3
          IMPORTING
            output = <compat>-compatible3.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-compatible4
          IMPORTING
            output = <compat>-compatible4.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-compatible5
          IMPORTING
            output = <compat>-compatible5.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-compatible6
          IMPORTING
            output = <compat>-compatible6.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <compat>-compatible7
          IMPORTING
            output = <compat>-compatible7.

        " ahora tenemos que completar el material si no es completo
        IF strlen( lv_matnr ) GT strlen( <compat>-principal ).
          CASE strlen( <compat>-principal ).
            WHEN 5. " grupo articulos
              <compat>-principal = |{ <compat>-principal(5) }{ lv_matnr+5 }|.
              <compat>-compatible1 = COND #( WHEN <compat>-compatible1 IS NOT INITIAL THEN |{ <compat>-compatible1(5) }{ lv_matnr+5 }| ).
              <compat>-compatible2 = COND #( WHEN <compat>-compatible2 IS NOT INITIAL THEN |{ <compat>-compatible2(5) }{ lv_matnr+5 }| ).
              <compat>-compatible3 = COND #( WHEN <compat>-compatible3 IS NOT INITIAL THEN |{ <compat>-compatible3(5) }{ lv_matnr+5 }| ).
              <compat>-compatible4 = COND #( WHEN <compat>-compatible4 IS NOT INITIAL THEN |{ <compat>-compatible4(5) }{ lv_matnr+5 }| ).
              <compat>-compatible5 = COND #( WHEN <compat>-compatible5 IS NOT INITIAL THEN |{ <compat>-compatible5(5) }{ lv_matnr+5 }| ).
              <compat>-compatible6 = COND #( WHEN <compat>-compatible6 IS NOT INITIAL THEN |{ <compat>-compatible6(5) }{ lv_matnr+5 }| ).
              <compat>-compatible7 = COND #( WHEN <compat>-compatible7 IS NOT INITIAL THEN |{ <compat>-compatible7(5) }{ lv_matnr+5 }| ).
            WHEN 9. " grupo artículos + gramaje
              <compat>-principal = |{ <compat>-principal(9) }{ lv_matnr+9 }|.
              <compat>-compatible1 = COND #( WHEN <compat>-compatible1 IS NOT INITIAL THEN |{ <compat>-compatible1(9) }{ lv_matnr+9 }| ).
              <compat>-compatible2 = COND #( WHEN <compat>-compatible2 IS NOT INITIAL THEN |{ <compat>-compatible2(9) }{ lv_matnr+9 }| ).
              <compat>-compatible3 = COND #( WHEN <compat>-compatible3 IS NOT INITIAL THEN |{ <compat>-compatible3(9) }{ lv_matnr+9 }| ).
              <compat>-compatible4 = COND #( WHEN <compat>-compatible4 IS NOT INITIAL THEN |{ <compat>-compatible4(9) }{ lv_matnr+9 }| ).
              <compat>-compatible5 = COND #( WHEN <compat>-compatible5 IS NOT INITIAL THEN |{ <compat>-compatible5(9) }{ lv_matnr+9 }| ).
              <compat>-compatible6 = COND #( WHEN <compat>-compatible6 IS NOT INITIAL THEN |{ <compat>-compatible6(9) }{ lv_matnr+9 }| ).
              <compat>-compatible7 = COND #( WHEN <compat>-compatible7 IS NOT INITIAL THEN |{ <compat>-compatible7(9) }{ lv_matnr+9 }| ).
            WHEN 13. " grupo artículos + gramaje + ancho
              <compat>-principal = |{ <compat>-principal(13) }{ lv_matnr+13 }|.
              <compat>-compatible1 = COND #( WHEN <compat>-compatible1 IS NOT INITIAL THEN |{ <compat>-compatible1(13) }{ lv_matnr+13 }| ).
              <compat>-compatible2 = COND #( WHEN <compat>-compatible2 IS NOT INITIAL THEN |{ <compat>-compatible2(13) }{ lv_matnr+13 }| ).
              <compat>-compatible3 = COND #( WHEN <compat>-compatible3 IS NOT INITIAL THEN |{ <compat>-compatible3(13) }{ lv_matnr+13 }| ).
              <compat>-compatible4 = COND #( WHEN <compat>-compatible4 IS NOT INITIAL THEN |{ <compat>-compatible4(13) }{ lv_matnr+13 }| ).
              <compat>-compatible5 = COND #( WHEN <compat>-compatible5 IS NOT INITIAL THEN |{ <compat>-compatible5(13) }{ lv_matnr+13 }| ).
              <compat>-compatible6 = COND #( WHEN <compat>-compatible6 IS NOT INITIAL THEN |{ <compat>-compatible6(13) }{ lv_matnr+13 }| ).
              <compat>-compatible7 = COND #( WHEN <compat>-compatible7 IS NOT INITIAL THEN |{ <compat>-compatible7(13) }{ lv_matnr+13 }| ).
          ENDCASE.
        ENDIF.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-principal
          IMPORTING
            output = <compat>-principal.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-compatible1
          IMPORTING
            output = <compat>-compatible1.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-compatible2
          IMPORTING
            output = <compat>-compatible2.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-compatible3
          IMPORTING
            output = <compat>-compatible3.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-compatible4
          IMPORTING
            output = <compat>-compatible4.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-compatible5
          IMPORTING
            output = <compat>-compatible5.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-compatible6
          IMPORTING
            output = <compat>-compatible6.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = <compat>-compatible7
          IMPORTING
            output = <compat>-compatible7.


        APPEND VALUE: #( matnr = <compat>-principal
                         prioridad = <compat>-prioridad
                         principal = abap_true ) TO et_compat,
                      #( matnr = <compat>-compatible1 ) TO et_compat,
                      #( matnr = <compat>-compatible2 ) TO et_compat,
                      #( matnr = <compat>-compatible3 ) TO et_compat,
                      #( matnr = <compat>-compatible4 ) TO et_compat,
                      #( matnr = <compat>-compatible5 ) TO et_compat,
                      #( matnr = <compat>-compatible6 ) TO et_compat,
                      #( matnr = <compat>-compatible7 ) TO et_compat.
        DELETE et_compat WHERE matnr IS INITIAL.
      ENDLOOP.
    ENDIF.

    SORT et_compat BY matnr. DELETE ADJACENT DUPLICATES FROM et_compat COMPARING matnr.

    IF line_exists( et_compat[ matnr = iv_matnr principal = abap_true ] ). " si el material consultado es principal
      e_principal = abap_true.
    ENDIF.

  ENDMETHOD.
  METHOD get_grupos.
    " cvivo
    DATA: r_matnr TYPE RANGE OF matnr.
    DATA(index) = CONV sytabix( 1 ).

    SELECT * FROM zwm_compatibles
    INTO TABLE @DATA(t_compat)
          WHERE werks EQ @iv_werks
            AND principal IN @ir_group.

    LOOP AT t_compat INTO DATA(compat). " un primer loop para preparar los datos en caso de que haya grupos que no contengan el material completo
      r_matnr = VALUE #( sign = 'I' option = 'EQ' ( low = compat-principal high = space )
      ( low = compat-compatible1 )
      ( low = compat-compatible2 )
      ( low = compat-compatible3 )
      ( low = compat-compatible4 )
      ( low = compat-compatible5 )
      ( low = compat-compatible6 )
      ( low = compat-compatible7 ) ).


      SELECT matnr, matkl, zzgramaje, zzancho FROM mara
      INTO TABLE @DATA(t_mara)
            WHERE matnr IN @r_matnr.

      IF sy-subrc NE 0. " la entrada contiene patrones compatibles, hay que obtener los materiales posibles
        " FALTA ELIMINAR LA ENTRADA ORIGINAL PARA QUE QUEDEN SÓLO CON MATERIALES COMPLETOS


        REFRESH r_matnr.

        index = 1.
        DO 8 TIMES. " hay que obviar los vacíos y quitar los ceros izq. de los rellenos
          APPEND INITIAL LINE TO r_matnr ASSIGNING FIELD-SYMBOL(<r_matnr>).
          <r_matnr>-sign = 'I'.
          <r_matnr>-option = 'CP'.

          IF index EQ 1.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                input  = compat-principal
              IMPORTING
                output = <r_matnr>-low.
          ELSE.
            ASSIGN COMPONENT |compatible{ index - 1 }| OF STRUCTURE compat TO FIELD-SYMBOL(<field>).

            IF <field> IS ASSIGNED.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
                EXPORTING
                  input  = <field>
                IMPORTING
                  output = <r_matnr>-low.
            ENDIF.
          ENDIF.

          IF <r_matnr>-low IS INITIAL.
            DELETE TABLE r_matnr FROM <r_matnr>.
            EXIT. " salimos del DO
          ELSE.
            <r_matnr>-low = |00000{ <r_matnr>-low }*|.
          ENDIF.

          ADD 1 TO index.
        ENDDO.

        SELECT matnr matkl zzgramaje zzancho FROM mara
        INTO TABLE t_mara
        WHERE matnr IN r_matnr.

        SORT t_mara BY zzancho. " vamos a eliminar los anchos duplicados
        DELETE ADJACENT DUPLICATES FROM t_mara COMPARING zzancho.

        LOOP AT t_mara INTO DATA(mara).
          CALL METHOD zcl_wm_compatibles=>get_compatibles
            EXPORTING
              iv_werks  = iv_werks
              iv_matnr  = mara-matnr
            RECEIVING
              et_compat = DATA(t_matnr_compat).

          DATA(principal_aux) = t_matnr_compat[ principal = abap_true ].

          IF NOT line_exists( t_compat[ principal = principal_aux-matnr ] ). " si no existe ya una línea con ese principal: nuevo grupo simulado
            APPEND INITIAL LINE TO t_compat ASSIGNING FIELD-SYMBOL(<compat>).

            <compat>-principal = principal_aux-matnr.
            <compat>-werks = iv_werks.

            index = 1.
            LOOP AT t_matnr_compat INTO DATA(matnr_compat) WHERE principal IS INITIAL.
              ASSIGN COMPONENT |compatible{ index }| OF STRUCTURE <compat> TO <field>.
              ADD 1 TO index.

              IF <field> IS ASSIGNED.
                <field> = matnr_compat-matnr.
              ELSE.
                MESSAGE 'Incosistencia en programa, revisar por IT' TYPE 'X'.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDLOOP.

        DELETE TABLE t_compat FROM compat.
      ENDIF.
    ENDLOOP.

    et_zwm_compatibles = t_compat.
  ENDMETHOD.
