
class ZWM_CL_OMP_INTF_HI definition
  public
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !DATA type ZMT_OMP_PROD_REPLENISHMENT_IN1
      !OREF_INTF_OMP_GENERAL type ref to ZCL_SI_OMP_PROD_REPLENISHMENT1 .
  methods DAME_HARDCODES
    importing
      !IV_INTF type REPID default 'INTF_OMP'
      !IT_DATA type ZMT_OMP_PROD_REPLENISHMENT_IN1
    exporting
      !ET_HARDCODES type ZTT_WM001 .
  methods GTON_INTERFASE .
protected section.
private section.

  data GT_DATA type ZMT_OMP_PROD_REPLENISHMENT_IN1 .
  data GO_REF_INTF_OMP_GENERAL type ref to ZCL_SI_OMP_PROD_REPLENISHMENT1 .
  constants GC_INTF_OMP type REPID value 'INTF_OMP' ##NO_TEXT.
  constants GC_LGNUM type LGNUM value '200' ##NO_TEXT.
  data GV_WERKS type WERKS_D value 2000 ##NO_TEXT.
  data GAV_HAY_ERROR type ABAP_BOOL .
  data GA_LGORT type LGORT_D value 1000 ##NO_TEXT.
  data GA_BWART type BWART value 919 ##NO_TEXT.

  class-methods DAME_MATERIAL
    importing
      !IV_STR type STRING
    changing
      !CV_MATNR type MATNR
    exceptions
      NO_MATERIAL_FOUND
      E_CALIDAD_VACIA
      E_VALOR_EXTERNO
      E_VALOR_SAP
      E_SIN_VALOR
      E_MAT_ZPIM_NOT_FOUND .
  methods TRATAMIENTO_DATOS
    importing
      !IT_NT_NOTIFICADAS type ZTT_LTBK
      !IT_NT_BORRADAS type ZTT_LTBK
    exporting
      !ET_LOG type ZTTWM0001 .
  methods CREAR_NTS_NOK
    importing
      !PI_INDEX type SY-INDEX
    changing
      !PT_LTBK type ZTT_LTBK
      !PT_LTBP type LEINT_LTBP_T
      !PC_OK type TBNUM
      !PC_KO type BAPI_MSG .
endclass. "ZWM_CL_OMP_INTF_HI definition
class ZWM_CL_OMP_INTF_HI implementation.
  METHOD CONSTRUCTOR.

    DATA: lo_ref  TYPE REF TO cx_root,
          lv_text TYPE string.


    TRY.

        me->gt_data = data.
        me->go_ref_intf_omp_general = oref_intf_omp_general.

      CATCH cx_root INTO lo_ref.
        lv_text = lo_ref->get_text( ).
    ENDTRY.


  ENDMETHOD.
  METHOD CREAR_NTS_NOK.

    DATA: lt_ltba TYPE STANDARD TABLE OF ltba,
          ls_ltba TYPE ltba,
          ls_ltbk TYPE ltbk,
          ls_ltbp TYPE ltbp,
          lv_mess TYPE bapi_msg,
          ls_ret  TYPE bapiret2.

    READ TABLE pt_ltbk INTO ls_ltbk INDEX 1.
    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING ls_ltbk TO ls_ltba.

      LOOP AT pt_ltbp INTO ls_ltbp.
        MOVE-CORRESPONDING ls_ltbp TO ls_ltba.
        ls_ltba-menga = ls_ltbp-menge.
        ls_ltba-altme = ls_ltbp-meins.
        ls_ltba-lgort = ga_lgort.
        ls_ltba-bwlvs = ga_bwart.
        ls_ltba-nlpla = ls_ltbk-nlpla.
        ls_ltba-betyp = 'O'.
        APPEND ls_ltba TO lt_ltba.
      ENDLOOP.

    ENDIF.

    CALL FUNCTION 'L_TR_CREATE'
      EXPORTING
        i_single_item         = 'X'
        i_save_only_all       = 'X'
*       I_UPDATE_TASK         =
        i_commit_work         = 'X'
      TABLES
        t_ltba                = lt_ltba
      EXCEPTIONS
        item_error            = 1
        no_entry_in_int_table = 2
        item_without_number   = 3
        no_update_item_error  = 4
        OTHERS                = 5.

    IF sy-subrc <> 0.

      LOOP AT lt_ltba INTO ls_ltba.
        CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
          EXPORTING
            id         = ls_ltba-msgid
            number     = ls_ltba-msgno
            language   = sy-langu
            textformat = 'RTF'
            message_v1 = ls_ltba-msgv1
            message_v2 = ls_ltba-msgv2
            message_v3 = ls_ltba-msgv3
            message_v4 = ls_ltba-msgv4
          IMPORTING
            message    = lv_mess.

        CONCATENATE pc_ko lv_mess INTO pc_ko SEPARATED BY space.
        gav_hay_error = abap_true.
      ENDLOOP.

    ELSE.
      LOOP AT lt_ltba INTO ls_ltba WHERE tbnum IS NOT INITIAL.

        pc_ok = ls_ltba-tbnum.

      ENDLOOP.

    ENDIF.


  ENDMETHOD.
  METHOD dame_hardcodes.


    DATA: lrng_param1 TYPE RANGE OF zeparam,
          lrng_param2 TYPE RANGE OF zeparam,
          lrng_param3 TYPE RANGE OF zeparam.

    DATA: lt_hardcodes TYPE ztt_wm001,
          lsrng_param  LIKE LINE OF lrng_param2.



*    Se añade también para encontrar BWART, LGORT Y WERKS
    REFRESH: lrng_param1.
    CLEAR: lsrng_param.

    lsrng_param-sign = 'I'.
    lsrng_param-option = 'EQ'.
    lsrng_param-low = '01'.
    APPEND lsrng_param TO lrng_param2.

    CLEAR: lsrng_param.

    lsrng_param-sign = 'I'.
    lsrng_param-option = 'EQ'.
    lsrng_param-low = 'BWART'.
    APPEND lsrng_param TO lrng_param1.

    CLEAR: lsrng_param.

    lsrng_param-sign = 'I'.
    lsrng_param-option = 'EQ'.
    lsrng_param-low = 'LGORT'.
    APPEND lsrng_param TO lrng_param1.

    CLEAR: lsrng_param.

    lsrng_param-sign = 'I'.
    lsrng_param-option = 'EQ'.
    lsrng_param-low = 'WERKS'.
    APPEND lsrng_param TO lrng_param1.


    SELECT *
      FROM ztwm001
      APPENDING TABLE et_hardcodes
      WHERE cprog = iv_intf
        AND param1 IN lrng_param1
        AND param2 IN lrng_param2.


    READ TABLE et_hardcodes INTO DATA(ls_hardcodes)
    WITH KEY cprog = iv_intf
             param1 = 'WERKS'.

    IF sy-subrc = 0.
      gv_werks = ls_hardcodes-valor1.
    ENDIF.


    clear:ls_hardcodes.
    READ TABLE et_hardcodes INTO ls_hardcodes
    WITH KEY cprog = iv_intf
             param1 = 'BWART'.

    IF sy-subrc = 0.
      ga_bwart = ls_hardcodes-valor1.
    ENDIF.


    clear:ls_hardcodes.
    READ TABLE et_hardcodes INTO ls_hardcodes
    WITH KEY cprog = iv_intf
             param1 = 'LGORT'.

    IF sy-subrc = 0.
      ga_lgort = ls_hardcodes-valor1.
    ENDIF.

  ENDMETHOD.
  METHOD dame_material.
    DATA: lt_str       TYPE TABLE OF string,
          lv_str       TYPE string,
          lv_matnr     TYPE matnr,
          lv_cal(3),
          lv_grama     TYPE zgramaje,
          lv_ancho     TYPE zancho,
          lv_val_ext   TYPE zedpi0005,
          lv_valor_sap TYPE zedpi0004,
          lv_matkl     TYPE matkl,
          lv_mtart     TYPE mtart,
          lt_mara      TYPE STANDARD TABLE OF mara.

    IF iv_str IS NOT INITIAL.

      SPLIT iv_str AT '/' INTO TABLE lt_str.

      LOOP AT lt_str ASSIGNING FIELD-SYMBOL(<l>).
        CASE sy-tabix.
          WHEN '1'.
            IF <l> EQ 'PAP'.
              lv_mtart = 'ZPAP'.
            ENDIF.
          WHEN '2'.
            SPLIT <l> AT space INTO lv_cal lv_grama.
            IF lv_grama NE space.
              CONDENSE: lv_cal.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = lv_grama
                IMPORTING
                  output = lv_grama.

            ELSE.
*             sera preimpreso?
              CLEAR: lv_cal, lv_grama.
              lv_mtart = 'ZPIM'.
              CONCATENATE 'P0' <l> '%' INTO lv_matnr.
            ENDIF.
          WHEN '3'.
            MOVE <l> TO lv_ancho. CONDENSE lv_ancho.
          WHEN OTHERS .
        ENDCASE.

      ENDLOOP.

      IF lv_cal IS NOT INITIAL.

        SELECT SINGLE valor_externo
          FROM ztpi0013
          INTO lv_val_ext
          WHERE calidad = lv_cal.

        IF sy-subrc EQ 0.

          SELECT SINGLE zvalor_sap
            FROM ztpi0003
            INTO lv_valor_sap
            WHERE zcodigo = '5' AND
                  werks = '2000' AND
                  zvalor_externo = lv_val_ext.

          IF sy-subrc EQ 0.

            MOVE lv_valor_sap TO lv_matkl.

            SELECT SINGLE mara~matnr FROM mara  " cvivo - 61212 creación auto
             INNER JOIN marc
             ON mara~matnr = marc~matnr
             INNER JOIN mard
             ON mara~matnr = mard~matnr
             AND marc~werks = mard~werks
             INTO lv_matnr
             WHERE matkl = lv_matkl AND
             zzgramaje = lv_grama AND
             zzancho = lv_ancho
             AND marc~werks = '2000'
             AND mard~lgort = '1000' .

            IF sy-subrc EQ 0.
              cv_matnr = lv_matnr.
            ELSE. " cvivo - 61212 creación auto
              SUBMIT zrmm0022 WITH p_matnr EQ space " creación sin código material
                              WITH p_werks EQ '2000'
                              WITH p_matkl EQ lv_matkl
                              WITH s_grama EQ lv_grama
                              WITH s_ancho EQ lv_ancho
                              WITH p_fondo EQ 'X'
                              AND RETURN.

              SELECT SINGLE mara~matnr FROM mara " volvemos a intentarlo
                INNER JOIN marc
                ON mara~matnr = marc~matnr
                INNER JOIN mard
                ON mara~matnr = mard~matnr
                AND marc~werks = mard~werks
                INTO lv_matnr
                WHERE matkl = lv_matkl AND
                zzgramaje = lv_grama AND
                zzancho = lv_ancho
                AND marc~werks = '2000'
                AND mard~lgort = '1000' .

              IF sy-subrc EQ 0.
                cv_matnr = lv_matnr.
              ELSE.
                RAISE no_material_found.
              ENDIF.
            ENDIF.

          ELSE.
            RAISE e_valor_sap.
          ENDIF.

        ELSE.
          RAISE e_valor_externo.
        ENDIF.

      ELSE.
        IF lv_matnr IS NOT INITIAL.

          SELECT *
            FROM mara
            INTO CORRESPONDING FIELDS OF TABLE lt_mara
            WHERE matnr LIKE lv_matnr.

          IF sy-subrc EQ 0.
            CLEAR lv_matnr.

            LOOP AT lt_mara ASSIGNING FIELD-SYMBOL(<ls>).
              MOVE <ls>-matnr+6(4) TO lv_grama.
              MOVE <ls>-matnr+10(4) TO lv_ancho.
              IF lv_grama EQ <ls>-zzgramaje AND lv_ancho EQ <ls>-zzancho.
                lv_matnr = <ls>-matnr.
                EXIT.
              ENDIF.
            ENDLOOP.
            IF lv_matnr IS INITIAL.
              RAISE e_mat_zpim_not_found.
            ELSE.
              cv_matnr = lv_matnr.
            ENDIF.
          ENDIF.
        ELSE.
          RAISE e_calidad_vacia.
        ENDIF.

      ENDIF.

    ELSE.
      RAISE e_sin_valor.
    ENDIF.
  ENDMETHOD.
  METHOD gton_interfase.

    DATA: lt_hardcodes      TYPE  ztt_wm001,
          lt_nt_notificadas TYPE ztt_ltbk,
          lt_nt_borradas    TYPE ztt_ltbk,
          lt_log            TYPE zttwm0001.


* 0.- cargamos hardcodes
    CALL METHOD me->dame_hardcodes
      EXPORTING
        iv_intf      = gc_intf_omp
        it_data      = me->gt_data
      IMPORTING
        et_hardcodes = lt_hardcodes.


* 1.- las otras NTs, modificadas van al log
    CALL METHOD me->go_ref_intf_omp_general->carga_nt_modificadas
      EXPORTING
        iv_lgnum          = gc_lgnum
      IMPORTING
        et_nt_modificadas = lt_nt_notificadas.


* 2.- borrado de NTs abiertas sin modificación

    CALL METHOD me->go_ref_intf_omp_general->borra_nt_abiertas
      EXPORTING
        iv_lgnum          = gc_lgnum
        iv_werks          = gv_werks
*       iv_charg          = "  en el original estaba peró CVIVO comentó luego quitarlo el 20-3-19
        it_nt_modificadas = lt_nt_notificadas
      IMPORTING
        et_nt_borradas    = lt_nt_borradas.


* 3.- Generamos las NTs en SAP

    CALL METHOD me->tratamiento_datos
      EXPORTING
        it_nt_notificadas = lt_nt_notificadas
        it_nt_borradas    = lt_nt_borradas
      IMPORTING
        et_log            = lt_log.


* 4.- se envia notificacion necesidades creadas/borradas/modificadas

*   Solo enviamos el mail si hay algun error
    IF gav_hay_error IS NOT INITIAL.
      CALL METHOD me->go_ref_intf_omp_general->envia_mail_notificacion
        EXPORTING
          it_nt_notificadas = lt_nt_notificadas
          it_nt_borradas    = lt_nt_borradas
          iv_werks          = gv_werks
          it_log            = lt_log.

    ENDIF.


  ENDMETHOD.
  METHOD tratamiento_datos.

    DATA: ls_data     TYPE zdt_omp_prod_replenishment_in,
          lv_name     TYPE string,
          lv_str      TYPE string,
          ls_ltbk     TYPE ltbk,
          ls_ltbp     TYPE ltbp,
          lt_ltbk     TYPE ztt_ltbk,
          lt_ltbp     TYPE leint_ltbp_t,
          lv_lgnum    TYPE lgnum,
          lv_tbnum    TYPE tbnum,
          ls_log      TYPE zswm0002,
          lv_aux_trim TYPE lqua_gesme,
          lv_aux2     TYPE string.



* 3.- Generamos las NTs en SAP
*     Recorremos los datos de entrada para procesarlos
    MOVE me->gt_data-mt_omp_prod_replenishment_in_o-message-name TO lv_name.

    LOOP AT me->gt_data-mt_omp_prod_replenishment_in_o-message-ompci ASSIGNING FIELD-SYMBOL(<ls>).
      CLEAR ls_log.
      CLEAR ls_ltbk.
      MOVE <ls>-cinumber TO: ls_ltbk-benum,
                             ls_log-cinumber.

*      MOVE <ls>-start_date TO ls_ltbk-pdatu.
      CONCATENATE <ls>-start_date+6(4) <ls>-start_date+3(2) <ls>-start_date+0(2) INTO ls_ltbk-bdatu.
      CONCATENATE <ls>-start_date+11(2) <ls>-start_date+14(2) <ls>-start_date+17(2) INTO ls_ltbk-bzeit.

*      MOVE <ls>-end_date TO ls_ltbk-pzeit.
      CONCATENATE <ls>-end_date+6(4) <ls>-end_date+3(2) <ls>-end_date+0(2) INTO ls_ltbk-pdatu.
      CONCATENATE <ls>-end_date+11(2) <ls>-end_date+14(2) <ls>-end_date+17(2) INTO ls_ltbk-pzeit.

* <ls>-CISTATUS
      MOVE <ls>-quality TO lv_str.
      REPLACE ALL OCCURRENCES OF <ls>-flute_type IN lv_str WITH space.
      CONDENSE lv_str.
      lv_aux_trim = <ls>-planned_trim.
      IF lv_aux_trim IS NOT INITIAL.
        lv_aux_trim = lv_aux_trim * 1000.
        lv_aux2 = lv_aux_trim.
      ENDIF.

      CONCATENATE <ls>-reel_width
                  lv_str
                  <ls>-flute_type
                  lv_aux2
                  INTO ls_ltbk-lznum "ls_ltbk-tbktx
                  SEPARATED BY '/'.
* <ls>-PLANNED_LINEAL
      REFRESH: lt_ltbp, lt_ltbk.

      MOVE <ls>-paper_station1 TO lv_str.
      dame_material( EXPORTING iv_str = lv_str CHANGING cv_matnr = ls_ltbp-matnr
                     EXCEPTIONS
                       no_material_found = 1
                       e_calidad_vacia   = 2
                       e_valor_externo   = 3
                       e_valor_sap       = 4
                       e_sin_valor       = 5
                       e_mat_zpim_not_found = 6
                       OTHERS            = 7 ).
      IF sy-subrc EQ 0.
        MOVE <ls>-paper1length_m TO ls_ltbp-menge.
        MOVE 'M' TO ls_ltbp-meins.
* <ls>-PAPER1WEIGHT_KG
        MOVE gv_werks TO ls_ltbp-werks.
        ls_ltbk-nlpla = 'BHS1'.
        MOVE <ls>-comment TO ls_ltbk-tbktx. "ls_ltbk-lznum.

        SELECT SINGLE lgnum lgtyp
          FROM lagp
          INTO ( ls_ltbk-lgnum, ls_ltbk-nltyp )
          WHERE lgpla = ls_ltbk-nlpla.

        ls_ltbp-lgnum = ls_ltbk-lgnum.

        APPEND ls_ltbp TO lt_ltbp.
        APPEND ls_ltbk TO lt_ltbk.

*        crear_nts( EXPORTING pi_index = sy-tabix
*                   CHANGING pt_ltbk = lt_ltbk
*                            pt_ltbp = lt_ltbp
*                            pc_ok = ls_log-ok_1
*                            pc_ko = ls_log-ko_1 ).


        CALL METHOD me->go_ref_intf_omp_general->crear_nts
          EXPORTING
            iv_lgort     = ga_lgort
            iv_bwart     = ga_bwart
          IMPORTING
            ev_hay_error = gav_hay_error
          CHANGING
            ct_ltbk      = lt_ltbk
            ct_ltbp      = lt_ltbp
            cv_ok        = ls_log-ok_1
            cv_ko        = ls_log-ko_1.


*       movemos al log el material y la cantidad
        MOVE ls_ltbp-menge TO ls_log-menge_1.
        MOVE ls_ltbp-matnr TO ls_log-matnr_1.
      ELSE.
        IF sy-subrc <> 5. " si no hay material informado, no es un error
          MOVE <ls>-paper1length_m TO ls_log-menge_1.
          MOVE lv_str TO ls_log-matnr_1.
          ls_log-ko_1 = me->go_ref_intf_omp_general->error_material_log( EXPORTING pi_subrc = sy-subrc ).

          gav_hay_error = abap_true.
        ENDIF.
      ENDIF.

      REFRESH: lt_ltbp, lt_ltbk.
      MOVE <ls>-paper_station2 TO lv_str.
      dame_material( EXPORTING iv_str = lv_str CHANGING cv_matnr = ls_ltbp-matnr
                     EXCEPTIONS
                       no_material_found = 1
                       e_calidad_vacia   = 2
                       e_valor_externo   = 3
                       e_valor_sap       = 4
                       e_sin_valor       = 5
                       e_mat_zpim_not_found = 6
                       OTHERS            = 7 ).
      IF sy-subrc EQ 0.
        MOVE <ls>-paper2length_m TO ls_ltbp-menge.
        MOVE 'M' TO ls_ltbp-meins.
* <ls>-PAPER2WEIGHT_KG
        MOVE gv_werks TO ls_ltbp-werks.
        ls_ltbk-nlpla = 'BHS2'.
        MOVE <ls>-comment TO ls_ltbk-tbktx. "ls_ltbk-lznum.

        SELECT SINGLE lgnum lgtyp
          FROM lagp
          INTO ( ls_ltbk-lgnum, ls_ltbk-nltyp )
          WHERE lgpla = ls_ltbk-nlpla.

        ls_ltbp-lgnum = ls_ltbk-lgnum.

        APPEND ls_ltbp TO lt_ltbp.
        APPEND ls_ltbk TO lt_ltbk.

*        crear_nts( EXPORTING pi_index = sy-tabix
*                   CHANGING pt_ltbk = lt_ltbk
*                            pt_ltbp = lt_ltbp
*                            pc_ok = ls_log-ok_2
*                            pc_ko = ls_log-ko_2 ).

        CALL METHOD me->go_ref_intf_omp_general->crear_nts
          EXPORTING
            iv_lgort     = ga_lgort
            iv_bwart     = ga_bwart
          IMPORTING
            ev_hay_error = gav_hay_error
          CHANGING
            ct_ltbk      = lt_ltbk
            ct_ltbp      = lt_ltbp
            cv_ok        = ls_log-ok_2
            cv_ko        = ls_log-ko_2.

*       movemos al log el material y la cantidad
        MOVE ls_ltbp-menge TO ls_log-menge_2.
        MOVE ls_ltbp-matnr TO ls_log-matnr_2.
      ELSE.
        IF sy-subrc <> 5. " si no hay material informado, no es un error
          MOVE <ls>-paper2length_m TO ls_log-menge_2.
          MOVE lv_str TO ls_log-matnr_2.
          ls_log-ko_2 = me->go_ref_intf_omp_general->error_material_log( EXPORTING pi_subrc = sy-subrc ).
          gav_hay_error = abap_true.
        ENDIF.
      ENDIF.

      REFRESH: lt_ltbp, lt_ltbk.
      MOVE <ls>-paper_station3 TO lv_str.
      dame_material( EXPORTING iv_str = lv_str CHANGING cv_matnr = ls_ltbp-matnr
                     EXCEPTIONS
                       no_material_found = 1
                       e_calidad_vacia   = 2
                       e_valor_externo   = 3
                       e_valor_sap       = 4
                       e_sin_valor       = 5
                       e_mat_zpim_not_found = 6
                       OTHERS            = 7 ).
      IF sy-subrc EQ 0.
        MOVE <ls>-paper3length_m TO ls_ltbp-menge.
        MOVE 'M' TO ls_ltbp-meins.
* <ls>-PAPER3WEIGHT_KG
        MOVE gv_werks TO ls_ltbp-werks.
        ls_ltbk-nlpla = 'BHS3'.
        MOVE <ls>-comment TO ls_ltbk-tbktx. "ls_ltbk-lznum.

        SELECT SINGLE lgnum lgtyp
          FROM lagp
          INTO ( ls_ltbk-lgnum, ls_ltbk-nltyp )
          WHERE lgpla = ls_ltbk-nlpla.

        ls_ltbp-lgnum = ls_ltbk-lgnum.

        APPEND ls_ltbp TO lt_ltbp.
        APPEND ls_ltbk TO lt_ltbk.

*        crear_nts( EXPORTING pi_index = sy-tabix
*                   CHANGING pt_ltbk = lt_ltbk
*                            pt_ltbp = lt_ltbp
*                            pc_ok = ls_log-ok_3
*                            pc_ko = ls_log-ko_3 ).

        CALL METHOD me->go_ref_intf_omp_general->crear_nts
          EXPORTING
            iv_lgort     = ga_lgort
            iv_bwart     = ga_bwart
          IMPORTING
            ev_hay_error = gav_hay_error
          CHANGING
            ct_ltbk      = lt_ltbk
            ct_ltbp      = lt_ltbp
            cv_ok        = ls_log-ok_3
            cv_ko        = ls_log-ko_3.

*       movemos al log el material y la cantidad
        MOVE ls_ltbp-menge TO ls_log-menge_3.
        MOVE ls_ltbp-matnr TO ls_log-matnr_3.
      ELSE.
        IF sy-subrc <> 5. " si no hay material informado, no es un error
          MOVE <ls>-paper3length_m TO ls_log-menge_3.
          MOVE lv_str TO ls_log-matnr_3.
          ls_log-ko_3 = me->go_ref_intf_omp_general->error_material_log( EXPORTING pi_subrc = sy-subrc ).
          gav_hay_error = abap_true.
        ENDIF.
      ENDIF.

      REFRESH: lt_ltbp, lt_ltbk.
      MOVE <ls>-paper_station4 TO lv_str.
      dame_material( EXPORTING iv_str = lv_str CHANGING cv_matnr = ls_ltbp-matnr
                     EXCEPTIONS
                       no_material_found = 1
                       e_calidad_vacia   = 2
                       e_valor_externo   = 3
                       e_valor_sap       = 4
                       e_sin_valor       = 5
                       e_mat_zpim_not_found = 6
                       OTHERS            = 7 ).
      IF sy-subrc EQ 0.
        MOVE <ls>-paper4length_m TO ls_ltbp-menge.
        MOVE 'M' TO ls_ltbp-meins.
* <ls>-PAPER4WEIGHT_KG
        MOVE gv_werks TO ls_ltbp-werks.
        ls_ltbk-nlpla = 'BHS4'.
        MOVE <ls>-comment TO ls_ltbk-tbktx. "ls_ltbk-lznum.

        SELECT SINGLE lgnum lgtyp
          FROM lagp
          INTO ( ls_ltbk-lgnum, ls_ltbk-nltyp )
          WHERE lgpla = ls_ltbk-nlpla.

        ls_ltbp-lgnum = ls_ltbk-lgnum.

        APPEND ls_ltbp TO lt_ltbp.
        APPEND ls_ltbk TO lt_ltbk.

*        crear_nts( EXPORTING pi_index = sy-tabix
*                   CHANGING pt_ltbk = lt_ltbk
*                            pt_ltbp = lt_ltbp
*                            pc_ok = ls_log-ok_4
*                            pc_ko = ls_log-ko_4 ).

        CALL METHOD me->go_ref_intf_omp_general->crear_nts
          EXPORTING
            iv_lgort     = ga_lgort
            iv_bwart     = ga_bwart
          IMPORTING
            ev_hay_error = gav_hay_error
          CHANGING
            ct_ltbk      = lt_ltbk
            ct_ltbp      = lt_ltbp
            cv_ok        = ls_log-ok_4
            cv_ko        = ls_log-ko_4.

*       movemos al log el material y la cantidad
        MOVE ls_ltbp-menge TO ls_log-menge_4.
        MOVE ls_ltbp-matnr TO ls_log-matnr_4.
      ELSE.
        IF sy-subrc <> 5. " si no hay material informado, no es un error
          MOVE <ls>-paper4length_m TO ls_log-menge_4.
          MOVE lv_str TO ls_log-matnr_4.
          ls_log-ko_4 = me->go_ref_intf_omp_general->error_material_log( EXPORTING pi_subrc = sy-subrc ).
          gav_hay_error = abap_true.
        ENDIF.
      ENDIF.

      REFRESH: lt_ltbp, lt_ltbk.
      MOVE <ls>-paper_station5 TO lv_str.
      dame_material( EXPORTING iv_str = lv_str CHANGING cv_matnr = ls_ltbp-matnr
                     EXCEPTIONS
                       no_material_found = 1
                       e_calidad_vacia   = 2
                       e_valor_externo   = 3
                       e_valor_sap       = 4
                       e_sin_valor       = 5
                       e_mat_zpim_not_found = 6
                       OTHERS            = 7 ).
      IF sy-subrc EQ 0.
        MOVE <ls>-paper5length_m TO ls_ltbp-menge.
        MOVE 'M' TO ls_ltbp-meins.
* <ls>-PAPER5WEIGHT_KG
        MOVE gv_werks TO ls_ltbp-werks.
        ls_ltbk-nlpla = 'BHS5'.
        MOVE <ls>-comment TO ls_ltbk-tbktx. "ls_ltbk-lznum.

        SELECT SINGLE lgnum lgtyp
          FROM lagp
          INTO ( ls_ltbk-lgnum, ls_ltbk-nltyp )
          WHERE lgpla = ls_ltbk-nlpla.

        ls_ltbp-lgnum = ls_ltbk-lgnum.

        APPEND ls_ltbp TO lt_ltbp.
        APPEND ls_ltbk TO lt_ltbk.

*        crear_nts( EXPORTING pi_index = sy-tabix
*                   CHANGING pt_ltbk = lt_ltbk
*                            pt_ltbp = lt_ltbp
*                            pc_ok = ls_log-ok_5
*                            pc_ko = ls_log-ko_5 ).

        CALL METHOD me->go_ref_intf_omp_general->crear_nts
          EXPORTING
            iv_lgort     = ga_lgort
            iv_bwart     = ga_bwart
          IMPORTING
            ev_hay_error = gav_hay_error
          CHANGING
            ct_ltbk      = lt_ltbk
            ct_ltbp      = lt_ltbp
            cv_ok        = ls_log-ok_5
            cv_ko        = ls_log-ko_5.


*       movemos al log el material y la cantidad
        MOVE ls_ltbp-menge TO ls_log-menge_5.
        MOVE ls_ltbp-matnr TO ls_log-matnr_5.
      ELSE.
        IF sy-subrc <> 5. " si no hay material informado, no es un error
          MOVE <ls>-paper5length_m TO ls_log-menge_5.
          MOVE lv_str TO ls_log-matnr_5.
          ls_log-ko_5 = me->go_ref_intf_omp_general->error_material_log( EXPORTING pi_subrc = sy-subrc ).
          gav_hay_error = abap_true.
        ENDIF.
      ENDIF.

      REFRESH: lt_ltbp, lt_ltbk.
      MOVE <ls>-paper_station6 TO lv_str.
      dame_material( EXPORTING iv_str = lv_str CHANGING cv_matnr = ls_ltbp-matnr
                     EXCEPTIONS
                       no_material_found = 1
                       e_calidad_vacia   = 2
                       e_valor_externo   = 3
                       e_valor_sap       = 4
                       e_sin_valor       = 5
                       e_mat_zpim_not_found = 6
                       OTHERS            = 7 ).

      IF sy-subrc EQ 0.
        MOVE <ls>-paper6length_m TO ls_ltbp-menge.
        MOVE 'M' TO ls_ltbp-meins.
        MOVE gv_werks TO ls_ltbp-werks.
        ls_ltbk-nlpla = 'BHS6'.
        MOVE <ls>-comment TO ls_ltbk-tbktx. "ls_ltbk-lznum.

        SELECT SINGLE lgnum lgtyp
          FROM lagp
          INTO ( ls_ltbk-lgnum, ls_ltbk-nltyp )
          WHERE lgpla = ls_ltbk-nlpla.

        ls_ltbp-lgnum = ls_ltbk-lgnum.

        APPEND ls_ltbp TO lt_ltbp.
        APPEND ls_ltbk TO lt_ltbk.

*        crear_nts( EXPORTING pi_index = sy-tabix
*                   CHANGING pt_ltbk = lt_ltbk
*                            pt_ltbp = lt_ltbp
*                            pc_ok = ls_log-ok_6
*                            pc_ko = ls_log-ko_6 ).


        CALL METHOD me->go_ref_intf_omp_general->crear_nts
          EXPORTING
            iv_lgort     = ga_lgort
            iv_bwart     = ga_bwart
          IMPORTING
            ev_hay_error = gav_hay_error
          CHANGING
            ct_ltbk      = lt_ltbk
            ct_ltbp      = lt_ltbp
            cv_ok        = ls_log-ok_6
            cv_ko        = ls_log-ko_6.


*       movemos al log el material y la cantidad
        MOVE ls_ltbp-menge TO ls_log-menge_6.
        MOVE ls_ltbp-matnr TO ls_log-matnr_6.
      ELSE.
        IF sy-subrc <> 5. " si no hay material informado, no es un error
          MOVE <ls>-paper6length_m TO ls_log-menge_6.
          MOVE lv_str TO ls_log-matnr_6.
          ls_log-ko_6 = me->go_ref_intf_omp_general->error_material_log( EXPORTING pi_subrc = sy-subrc ).
          gav_hay_error = abap_true.
        ENDIF.
      ENDIF.

      APPEND ls_log TO et_log.

    ENDLOOP.




  ENDMETHOD.
