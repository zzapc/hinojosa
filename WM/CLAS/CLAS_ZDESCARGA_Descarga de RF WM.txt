
class ZDESCARGA definition
  public
  final
  create public .

public section.

  data:
    PAPER type table of ZST_RF_EM .
  data:
    DESCARGA type TABLE OF ZST_RF_EM .
  data PARAMETROS type ZWM_PARAM .
  data LRFMD type LRF_WKQU .
  data:
    T_FUNC type table of ZWM_RF_FUNC .
  data MULTI type XFLAG .
  data LOG_HANDLE type BALLOGHNDL .
  data LGNUM type LGNUM .
  data WERKS type WERKS_D .

  methods GET_PARAMETROS .
  methods GET_PAPER
    importing
      !VBELN type VBELN_VL .
  methods SET_MENSAJE
    importing
      !NUMBER type MSGNR
      !ID type MSGID default 'ZWM_RF'
      !TYPE type SYST_MSGTY
      !MSGV1 type SYMSGV optional
      !MSGV2 type SYMSGV optional
      !MSGV3 type SYMSGV optional
      !MSGV4 type SYMSGV optional .
  methods CHECK_FUNCIONALIDAD
    importing
      value(FUNC) type RVARI_VNAM
    exceptions
      INACTIVE .
protected section.
private section.
endclass. "ZDESCARGA definition
class ZDESCARGA implementation.
  METHOD check_funcionalidad.

    READ TABLE t_func WITH KEY func = func TRANSPORTING NO FIELDS.

    IF sy-subrc NE 0.
      RAISE inactive.
    ENDIF.

  ENDMETHOD.
  METHOD get_paper.

*    DATA l_menge TYPE menge_d.
*    DATA ls_lips TYPE lips.
*    DATA lt_lips TYPE TABLE OF lips.
*    DATA lt_mseg TYPE TABLE OF mseg.
*    DATA ls_mseg TYPE mseg.
*    DATA lt_ltap TYPE TABLE OF ltap.
*    DATA ls_ltap TYPE ltap.
*
*    SELECT SINGLE wbstk INTO @DATA(l_sm)
*          FROM vbuk
*          WHERE vbeln = @vbeln.
*
*    IF l_sm <> 'C'.
**No se ha contabilizado la salida de mercancias para el albarán &.
*      CLEAR gs_vttk.
*      PERFORM mensajes IN PROGRAM mz_wm_rf_f01 USING 'ZWM_RF' 'E' '004' gs_likp-vbeln.
*
*    ELSE.
*
**El albarán & no contiene bobinas pendientes de descargar
*      SELECT * APPENDING CORRESPONDING FIELDS OF TABLE paper
*      FROM lips
*      WHERE vbeln = gs_likp-vbeln AND
*      charg <> space.
*
*      LOOP AT paper INTO DATA(ls_dlv) WHERE vbeln = gs_likp-vbeln.
*        SELECT * FROM mseg
*         INTO TABLE lt_mseg
*         WHERE charg EQ ls_dlv-charg
*         AND ebeln NE space
*         AND bwart LIKE '1%'. " movimientos de compras
*
** restamos y sumamos las entradas y anulaciones de mercancia
*        LOOP AT lt_mseg INTO ls_mseg.
*          IF ls_mseg-shkzg EQ 'S'. " entrada
*            l_menge = l_menge + ls_mseg-menge.
*          ELSE. " salida
*            l_menge = l_menge - ls_mseg-menge.
*          ENDIF.
*        ENDLOOP.
*
*        IF l_menge IS INITIAL AND lt_mseg[] IS NOT INITIAL.
*          ls_dlv-descargada = abap_true.
*        ELSE.
*
** si se encuentra en WM ya está leída
*          SELECT SINGLE @abap_true
*            FROM lqua
*            WHERE lgnum = @lgnum
*            AND   charg = @ls_dlv-charg
*              INTO @DATA(l_result).
*
*          IF sy-subrc IS INITIAL. " la marcamos como leída porque es de esta misma entrega
*            ls_dlv-read = abap_true.
*          ELSE. " verificamos por movimientos si fue leída o anulada
*            CLEAR l_menge.
*
*            SELECT * FROM ltap
*              INTO TABLE lt_ltap
*              WHERE charg EQ ls_dlv-charg
*              AND lgnum EQ gs_param-lgnum
*              AND ( vltyp EQ '902' OR nltyp EQ '902'). " origen o destino 902: confirmación o anulación
*
*            LOOP AT lt_ltap INTO ls_ltap.
*              IF ls_ltap-vltyp EQ '902'. " confirmación
*                l_menge = l_menge + ls_ltap-vista.
*              ELSE. " anulación
*                l_menge = l_menge - ls_ltap-vista.
*              ENDIF.
*            ENDLOOP.
*
*            IF l_menge IS NOT INITIAL AND lt_ltap[] IS NOT INITIAL.
*              ls_dlv-read = abap_true.
*            ENDIF.
*          ENDIF.
*
*        ENDIF.
*        SELECT SINGLE maktx INTO ls_dlv-maktx
*          FROM makt
*          WHERE matnr = ls_dlv-matnr AND
*          spras = sy-langu.
*
*        MODIFY paper FROM ls_dlv.
*      ENDLOOP.
*    ENDIF.

  ENDMETHOD.
  METHOD get_parametros.

    DATA: l_condition TYPE char20,
          l_log       TYPE bal_s_log.

    CLEAR multi. " limpiamos la variable global - cvivo

    CHECK parametros IS INITIAL AND lrfmd IS INITIAL AND t_func IS INITIAL. " para no repetir la selección cada vez

    SELECT SINGLE * FROM lrf_wkqu INTO lrfmd " 11.03.2019 - cvivo - WM CB
    WHERE bname EQ sy-uname
    AND statu NE space.

    lgnum = lrfmd-lgnum. " 11.03.2019 - cvivo - WM CB

    SELECT SINGLE werks FROM t320 " 11.03.2019 - cvivo - WM CB
    INTO werks
    WHERE lgnum EQ lgnum.

    SELECT SINGLE * FROM zwm_param INTO parametros
    WHERE tcode = sy-tcode
    AND lgnum = lgnum.    " 11.03.2019 - cvivo - WM CB

    " cvivo 58105 - Incluir log
    CONCATENATE 'ZWM_' lgnum INTO l_log-object.
    l_log-subobject = 'ITS'.
    l_log-aldate     = sy-datum.
    l_log-altime     = sy-uzeit.
    l_log-aluser     = sy-uname.
    l_log-alprog     = sy-repid.
    l_log-altcode    = sy-tcode.

    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log                 = l_log
      IMPORTING
        e_log_handle            = log_handle
      EXCEPTIONS
        log_header_inconsistent = 1
        OTHERS                  = 2.

    CONCATENATE 'LG' lgnum ' NE space'  INTO l_condition.

    IF lgnum IS NOT INITIAL.
      SELECT * FROM zwm_rf_func INTO TABLE t_func " 11.03.2019 - cvivo - WM CB
      WHERE (l_condition).

**         INI GENERAL RF / RGUILLOT 25-3-19
**    Se guarda en variable global la concatenación para luego
**    hacer los 'n' read table
*
*      CONCATENATE 'LG' lgnum INTO gv_lgnum_lg.
*      CONDENSE gv_lgnum_lg.
    ENDIF.

  ENDMETHOD.
  METHOD set_mensaje.

    DATA: l_msg         TYPE bal_s_msg,
          lt_log_handle TYPE bal_t_logh.

    l_msg-msgty = type.
    l_msg-msgid = id.
    l_msg-msgno = number.
    l_msg-msgv1 = msgv1.
    l_msg-msgv2 = msgv2.
    l_msg-msgv3 = msgv3.
    l_msg-msgv4 = msgv4.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = log_handle
        i_s_msg          = l_msg
      EXCEPTIONS
        log_not_found    = 1
        msg_inconsistent = 2
        log_is_full      = 3
        OTHERS           = 4.

    CLEAR l_msg.
    APPEND log_handle TO lt_log_handle.

    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_t_log_handle   = lt_log_handle
      EXCEPTIONS
        log_not_found    = 1
        save_not_allowed = 2
        numbering_error  = 3
        OTHERS           = 4.

    REFRESH: lt_log_handle.
  ENDMETHOD.
