
class ZCL_IM_SPP_WORKORDER_INFOS definition
  public
  final
  create public .

public section.

  interfaces IF_EX_WORKORDER_INFOSYSTEM .
protected section.
private section.
endclass. "ZCL_IM_SPP_WORKORDER_INFOS definition
class ZCL_IM_SPP_WORKORDER_INFOS implementation.
  METHOD if_ex_workorder_infosystem~at_output_screen.


  ENDMETHOD.
  method IF_EX_WORKORDER_INFOSYSTEM~AT_OUTPUT_SCREEN_LAY.
  endmethod.
  METHOD if_ex_workorder_infosystem~at_selection_screen.
  ENDMETHOD.
  method IF_EX_WORKORDER_INFOSYSTEM~DETAIL_LIST_LAY.
  endmethod.
  method IF_EX_WORKORDER_INFOSYSTEM~ORDER_TABLES_MODIFY.
  endmethod.
  method IF_EX_WORKORDER_INFOSYSTEM~OVERVIEW_MODIFY.
  endmethod.
  method IF_EX_WORKORDER_INFOSYSTEM~OVERVIEW_TREE_LAY.
  endmethod.
  method IF_EX_WORKORDER_INFOSYSTEM~PLANNED_ORDER_TABLES_MODIFY.
  endmethod.
  METHOD if_ex_workorder_infosystem~tables_modify_lay.
    CONSTANTS c_10 TYPE aufk-autyp VALUE '10'.


    IF ct_ioheader[] IS NOT INITIAL.

*LRE PASAR A M2 LA CANTIDAD TEÓRICA Y LA REAL 28.11.2022

      DATA: lv_cantidadm2     TYPE gamng,
            lv_cantidadm2real TYPE gamng.

      LOOP AT ct_ioheader ASSIGNING FIELD-SYMBOL(<marm>).

        IF <marm>-werks = '2001' OR <marm>-werks = '2003'.

          CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
            EXPORTING
              i_matnr  = <marm>-matnr
              i_in_me  = 'ST'
              i_out_me = 'M2'
              i_menge  = <marm>-gamng
            IMPORTING
              e_menge  = lv_cantidadm2.

          IF sy-subrc = 0.
            <marm>-zzcanm2teor = lv_cantidadm2.
          ENDIF.

          CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
            EXPORTING
              i_matnr  = <marm>-matnr
              i_in_me  = 'ST'
              i_out_me = 'M2'
              i_menge  = <marm>-gwemg
            IMPORTING
              e_menge  = lv_cantidadm2real.

          IF sy-subrc = 0.
            <marm>-zzcanm2real = lv_cantidadm2real.
          ENDIF.

        ENDIF.


      ENDLOOP.

*LRE 20.11.2022 AÑADIMOS STOCK TOTAL Y STOCK PEDIDO

      SELECT t1~charg, t1~werks, t1~kalab, t2~aufnr  INTO TABLE @DATA(it_clabs)
        FROM mska AS t1
        INNER JOIN afpo AS t2 ON t1~charg EQ t2~charg AND t1~vbeln EQ t2~kdauf AND t1~posnr EQ t2~kdpos AND t1~matnr EQ t2~matnr
        FOR ALL ENTRIES IN @ct_ioheader
        WHERE t1~werks EQ @ct_ioheader-werks
        AND t1~charg EQ @ct_ioheader-charg
        AND t1~matnr EQ @ct_ioheader-matnr
        AND t2~aufnr EQ @ct_ioheader-aufnr.

      LOOP AT ct_ioheader ASSIGNING FIELD-SYMBOL(<ioheader1>).
        READ TABLE it_clabs BINARY SEARCH WITH KEY aufnr = <ioheader1>-aufnr ASSIGNING FIELD-SYMBOL(<auf1>).
        IF sy-subrc = 0.
          <ioheader1>-zzstockpedido = <auf1>-kalab.
        ENDIF.
      ENDLOOP.

      SELECT t1~matnr, t1~werks, t1~labst, t2~aufnr INTO TABLE @DATA(it_clabs2)
        FROM mard AS t1
        INNER JOIN afpo AS t2 ON t1~matnr EQ t2~matnr
        FOR ALL ENTRIES IN @ct_ioheader
        WHERE t1~werks EQ @ct_ioheader-werks
        AND t1~matnr EQ @ct_ioheader-matnr
        AND t2~aufnr EQ @ct_ioheader-aufnr.

      LOOP AT ct_ioheader ASSIGNING FIELD-SYMBOL(<ioheader2>).
        READ TABLE it_clabs2 BINARY SEARCH WITH KEY matnr = <ioheader2>-matnr ASSIGNING FIELD-SYMBOL(<matnr>).
        IF sy-subrc = 0.
          <ioheader2>-zzstocklibre = <matnr>-labst.
        ENDIF.
      ENDLOOP.

* FIN LRE 20.11.2022 AÑADIMOS STOCK TOTAL Y STOCK PEDIDO

      SELECT t1~aufnr, t2~aufnr AS aufnr_otra INTO TABLE @DATA(it_aufnr)
        FROM aufk AS t1
        LEFT OUTER JOIN aufk AS t2 ON t1~kdauf EQ t2~kdauf AND t1~kdpos EQ t2~kdpos AND t1~aufnr <> t2~aufnr AND t1~werks <> t2~werks AND t2~autyp EQ @c_10
        INNER JOIN jest AS t3 ON t1~objnr = t3~objnr
        FOR ALL ENTRIES IN @ct_ioheader
        WHERE t1~aufnr EQ @ct_ioheader-aufnr
          AND t1~autyp EQ @c_10
          AND t1~kdauf NE @space
          AND t3~stat NOT IN ('I0045','I0046','I0076') AND inact = ''.
*          AND t3~stat  IN ('I009','I0010','I0012', 'I0074') AND inact = ''.

*LRE 13.11.2022 ELIMINAR CTEC O PTBO. EN LA OF2
      SELECT t1~aufnr INTO TABLE @DATA(it_aufnr_aux)
        FROM aufk AS t1
        INNER JOIN jest AS t2 ON t1~objnr = t2~objnr
        FOR ALL ENTRIES IN @it_aufnr
        WHERE t1~aufnr EQ @it_aufnr-aufnr_otra
        AND t2~stat IN ('I0045','I0046','I0076') AND inact = ''.



      LOOP AT it_aufnr_aux  ASSIGNING FIELD-SYMBOL(<aufnr>).
        DELETE it_aufnr WHERE aufnr_otra = <aufnr>.
      ENDLOOP.
* FIN LRE 13.11.2022 ELIMINAR CTEC O PTBO. EN LA OF2


      SORT it_aufnr BY aufnr ASCENDING.

      SELECT t1~aufnr, t2~aufnr AS aufnr_otra APPENDING TABLE @it_aufnr
        FROM zpp0002 AS t1 LEFT OUTER JOIN zpp0002 AS t2 ON t1~kdauf EQ t2~kdauf AND t1~kdpos EQ t2~kdpos AND t1~aufnr <> t2~aufnr AND t1~werks <> t2~werks
        INNER JOIN aufk AS t4 ON t1~aufnr EQ t4~aufnr
        INNER JOIN jest AS t3 ON t4~objnr = t3~objnr
        FOR ALL ENTRIES IN @ct_ioheader
        WHERE t1~aufnr EQ @ct_ioheader-aufnr
        AND t4~autyp EQ @c_10
        AND t1~kdauf NE @space
        AND t3~stat NOT IN ('I0045','I0046','I0076') AND inact = ''.
*        AND t3~stat  IN ('I009','I0010','I0012', 'I0074') AND inact = ''.

*LRE 13.11.2022 ELIMINAR CTEC O PTBO. EN LA OF2
      SELECT t1~aufnr INTO TABLE @DATA(it_aufnr_aux2)
        FROM aufk AS t1
        INNER JOIN jest AS t2 ON t1~objnr = t2~objnr
        FOR ALL ENTRIES IN @it_aufnr
        WHERE t1~aufnr EQ @it_aufnr-aufnr_otra
        AND t2~stat IN ('I0045','I0046','I0076') AND inact = ''.



      LOOP AT it_aufnr_aux2  ASSIGNING FIELD-SYMBOL(<aufnr2>).
        DELETE it_aufnr WHERE aufnr_otra = <aufnr2>.
      ENDLOOP.
* FIN LRE 13.11.2022 ELIMINAR CTEC O PTBO. EN LA OF2

      SORT it_aufnr BY aufnr ASCENDING.
      DELETE it_aufnr WHERE aufnr_otra IS INITIAL.
      DELETE ADJACENT DUPLICATES FROM it_aufnr COMPARING aufnr.

    ENDIF.

    LOOP AT ct_ioheader ASSIGNING FIELD-SYMBOL(<ioheader>).
      READ TABLE it_aufnr BINARY SEARCH WITH KEY aufnr = <ioheader>-aufnr ASSIGNING FIELD-SYMBOL(<auf2>).
      IF sy-subrc = 0.
        <ioheader>-zzorden_planta2 = <auf2>-aufnr_otra.
      ENDIF.

*APC20250225 Buscamos ordenes de semi creadas automaticamente
      IF <ioheader>-zzorden_planta2 IS INITIAL.
        SELECT SINGLE aufnr2 FROM zwhs_cola
          INTO <ioheader>-zzorden_planta2
         WHERE idmsg = 'OFS'
           AND aufnr = <ioheader>-aufnr.
        IF sy-subrc NE 0.
          SELECT SINGLE aufnr FROM zwhs_cola
            INTO <ioheader>-zzorden_planta2
           WHERE idmsg = 'OFS'
             AND aufnr2 = <ioheader>-aufnr.
        ENDIF.
        IF NOT <ioheader>-zzorden_planta2 IS INITIAL.
          SELECT aufnr FROM aufk AS t1 INNER JOIN jest AS t2 ON t1~objnr = t2~objnr
            INTO <ioheader>-zzorden_planta2
            UP TO 1 ROWS
            WHERE t1~aufnr = <ioheader>-zzorden_planta2
            AND t2~stat IN ('I0076')  "PTBO
            AND inact = ''
           ORDER BY stat.
          ENDSELECT.
          IF sy-subrc = 0.
            CLEAR <ioheader>-zzorden_planta2.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.



  ENDMETHOD.
endclass. "ZCL_IM_SPP_WORKORDER_INFOS definition
endclass. "ZCL_IM_SPP_WORKORDER_INFOS implementation
