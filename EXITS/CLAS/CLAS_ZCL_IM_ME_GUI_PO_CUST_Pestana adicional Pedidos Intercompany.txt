
CLASS zcl_im_me_gui_po_cust DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPE-POOLS mmmfd .

    INTERFACES if_ex_me_gui_po_cust .

    CONSTANTS subscreen1 TYPE mepo_name VALUE 'ITEMSCREEN1' .
PROTECTED SECTION.
private section.

  data DYNP_DATA_PBO type CI_EKKODB .
  data DYNP_DATA_PAI type CI_EKKODB .
endclass. "ZCL_IM_ME_GUI_PO_CUST definition
class ZCL_IM_ME_GUI_PO_CUST implementation.
  METHOD if_ex_me_gui_po_cust~execute.

* EDIEGO 16/07/2017 -->
*    DATA: l_item      TYPE REF TO if_purchase_order_item_mm,
*          ls_mepoitem TYPE        mepoitem.
*
**--------------------------------------------------------------------*
** fcode handling
**--------------------------------------------------------------------*
*
*    CASE im_name.
*
*      WHEN subscreen1.
*
** is it an item? im_model can be header or item.
*        mmpur_dynamic_cast l_item im_model.
*        CHECK NOT l_item IS INITIAL.
*
*        ls_mepoitem = l_item->get_data( ).
*
*        CASE im_fcode.
*          WHEN 'BADI_SHOW_MATERIAL'.
*            CHECK NOT ls_mepoitem-ematn IS INITIAL.
*
*            CALL FUNCTION 'MMPUR_MATERIAL_DISPLAY'
*              EXPORTING
*                im_matnr = ls_mepoitem-ematn
*                im_werks = ls_mepoitem-werks
*                im_lgort = ls_mepoitem-lgort.
*
*          WHEN OTHERS.
*        ENDCASE.
*
*      WHEN OTHERS.
*
*    ENDCASE.
* EDIEGO 16/07/2017 <--
  ENDMETHOD.
  METHOD if_ex_me_gui_po_cust~map_dynpro_fields.
* given the fieldcatalog of structure ZMEPO_BADI we have to establish a
* mapping to metafields which are used for field selection purposes and error handling
* Standard definitions can be found in type pool MMMFD. It is important for customer
* fields to use integer constants above 90000000 for the metafield.

* EDIEGO 16/07/2017 -->
*    FIELD-SYMBOLS: <mapping> LIKE LINE OF ch_mapping.
*
*    LOOP AT ch_mapping ASSIGNING <mapping>.
*
*      CASE <mapping>-fieldname.
*
*        WHEN 'ZZCAUSA_RETRASO'. <mapping>-metafield = mmmfd_cust_01.
*        WHEN 'ZZABGRU'.         <mapping>-metafield = mmmfd_cust_02.
*        WHEN 'ZZAUGRU'.         <mapping>-metafield = mmmfd_cust_03.
*        WHEN 'ZZBLOQ_PLAN'.     <mapping>-metafield = mmmfd_cust_04.
*        WHEN 'ZZBLOQ_FABR'.     <mapping>-metafield = mmmfd_cust_05.
*
*      ENDCASE.
*
*    ENDLOOP.
    FIELD-SYMBOLS: <mapping> LIKE LINE OF ch_mapping.
    LOOP AT ch_mapping ASSIGNING <mapping>.
      CASE <mapping>-fieldname.
        WHEN 'ZZSEGCAL'.      <mapping>-metafield = mmmfd_cust_01.
        WHEN 'ZZIMP_REP'.      <mapping>-metafield = mmmfd_cust_02. " cvivo
*        WHEN 'ZZORDEN_IMP'.   <mapping>-metafield = mmmfd_cust_05.
*        WHEN 'LGORT'.         <mapping>-metafield = mmmfd_store_loc. " cvivo - 22/01/2019 - WM Almacén obligatorio
*        WHEN 'ZTERM'.         <mapping>-metafield = mmmfd_pmnttrms. " cvivo - 18.07.2019 - 56053
          " no funciona para campos estándar!!! leer la documentación de la interface!!
      ENDCASE.
    ENDLOOP.
* EDIEGO 16/07/2017 <--
  ENDMETHOD.
  METHOD if_ex_me_gui_po_cust~subscribe.
* EDIEGO 16/07/2017 -->
*    DATA: ls_subscriber LIKE LINE OF re_subscribers.
*
** we want to add a customer subscreen on the item detail tab
*    CHECK im_application = 'PO'.
*    CHECK im_element     = 'ITEM'.
*
** each line in re_subscribers generates a subscreen. We add one subscreen in this example
*    CLEAR re_subscribers[].
** the name is a unique identifier for the subscreen and defined in this class definition
*    ls_subscriber-name = subscreen1.
** the dynpro number to use
*    ls_subscriber-dynpro = '0001'.
** the program where the dynpro can be found
*    ls_subscriber-program = 'SAPLZMM004'.
** each subscreen needs his own DDIC-Structure
*    ls_subscriber-struct_name = 'ZMEPO_BADI_STRUCT'.
** a label can be defined
*    ls_subscriber-label = text-001.
** the position within the tabstrib can be defined
*    ls_subscriber-position = 8.
** the height of the screen can be defined here. Currently we suport two screen sizes:
** value <= 7 a sevel line subscreen
** value > 7  a 16 line subscreen
*    ls_subscriber-height = 10.
*
*    APPEND ls_subscriber TO re_subscribers.

    DATA: ls_subscriber LIKE LINE OF re_subscribers.
* we want to add a customer subscreen on the Header tab
    CHECK im_application = 'PO'.
    IF im_element     = 'HEADER'.
* each line in re_subscribers generates a subscreen. We add one subscreen in this example
      CLEAR re_subscribers[].
* the name is a unique identifier for the subscreen and defined in this class definition
      ls_subscriber-name = subscreen1.
* the dynpro number to use
      ls_subscriber-dynpro = '0002'.
* the program where the dynpro can be found
      ls_subscriber-program = 'SAPLZMM004'.
* each subscreen needs his own DDIC-Structure
      ls_subscriber-struct_name = 'CI_EKKODB'.
* a label can be defined
      ls_subscriber-label = text-001.
* the position within the tabstrib can be defined
      ls_subscriber-position = 7.
* the height of the screen can be defined here. Currently we suport two screen sizes:
* value <= 7 a sevel line subscreen
* value > 7  a 16 line subscreen
      ls_subscriber-height = 7.
      APPEND ls_subscriber TO re_subscribers.
* EDIEGO 16/07/2017 <--
    ENDIF.
  ENDMETHOD.
  METHOD if_ex_me_gui_po_cust~transport_from_dynp.
* EDIEGO 16/07/2017 -->
**--------------------------------------------------------------------*
** system asks to read dynpro data
**--------------------------------------------------------------------*
*
*    CASE im_name.
*
*      WHEN subscreen1.
*
*        CALL FUNCTION 'Z_MEPO_POP'
*          IMPORTING
*            ex_dynp_data = dynp_data_pai.
*
*        IF dynp_data_pai NE dynp_data_pbo.
** something has changed therefor we have to notify the framework
** to transport data to the model
*          re_changed = mmpur_yes.
*        ENDIF.
*      WHEN OTHERS.
*
*    ENDCASE.

    CASE im_name.
      WHEN subscreen1.
        CALL FUNCTION 'Z_EKKO_POP'
          IMPORTING
            ex_dynp_data = dynp_data_pai.
        IF dynp_data_pai NE dynp_data_pbo.
* something has changed therefore we have to notify the framework
* to transport data to the model
          re_changed = mmpur_yes.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
* EDIEGO 16/07/2017 <--
  ENDMETHOD.
  METHOD if_ex_me_gui_po_cust~transport_from_model.

* EDIEGO 16/07/2017 -->
*    DATA: l_item        TYPE REF TO if_purchase_order_item_mm,
*          ls_mepoitem   TYPE        mepoitem,
*          l_header      TYPE REF TO if_purchase_order_mm,
*          ls_mepoheader TYPE        mepoheader,
*          ls_customer   TYPE        mepo_badi_exampl.
*
**--------------------------------------------------------------------*
** system asks to transport data from the business logic into the view
**--------------------------------------------------------------------*
*
*    CASE im_name.
*
*      WHEN subscreen1.
*
** is it an item? im_model can be header or item.
*        mmpur_dynamic_cast l_item im_model.
*        CHECK NOT l_item IS INITIAL.
*
** transport standard fields
*        ls_mepoitem = l_item->get_data( ).
*
*** transport customer fields
**        CALL FUNCTION 'Z_MEPO_GET_DATA'
**          EXPORTING
**            im_ebeln = ls_mepoitem-ebeln
**            im_ebelp = ls_mepoitem-ebelp
**          IMPORTING
**            ex_data  = ls_customer.
*
** store info for later use
*        MOVE-CORRESPONDING ls_mepoitem TO dynp_data_pbo.
**        MOVE ls_customer-badi_bsgru TO dynp_data_pbo-badi_bsgru.
**        MOVE ls_customer-badi_afnam TO dynp_data_pbo-badi_afnam.
*
*      WHEN OTHERS.
** ...
*    ENDCASE.

    DATA:     l_header      TYPE REF TO if_purchase_order_mm,
              ls_mepoheader TYPE        mepoheader,
              ls_customer   TYPE        ci_ekkodb.
*--------------------------------------------------------------------*
* system asks to transport data from the business logic into the view
*--------------------------------------------------------------------*
    CASE im_name.
      WHEN subscreen1.
* is it an Header? im_model can be header or item.
        mmpur_dynamic_cast l_header im_model.
        CHECK NOT l_header IS INITIAL.
* transport standard fields
        ls_mepoheader = l_header->get_data( ).
* store info for later use
        MOVE-CORRESPONDING ls_mepoheader TO dynp_data_pbo.
      WHEN OTHERS.
* ...
    ENDCASE.
* EDIEGO 16/07/2017 <--
  ENDMETHOD.
  METHOD if_ex_me_gui_po_cust~transport_to_dynp.
* EDIEGO 16/07/2017 -->
**--------------------------------------------------------------------*
** system asks to fill dynpro work area during PBO
**--------------------------------------------------------------------*
*
*    CASE im_name.
*
*      WHEN subscreen1.
*
*        CALL FUNCTION 'Z_MEPO_PUSH'
*          EXPORTING
*            im_dynp_data = dynp_data_pbo.
*
*      WHEN OTHERS.
*    ENDCASE.

    CASE im_name.
      WHEN subscreen1.
        CALL FUNCTION 'Z_EKKO_PUSH'
          EXPORTING
            im_dynp_data = dynp_data_pbo.
      WHEN OTHERS.
    ENDCASE.

* EDIEGO 16/07/2017 <--
  ENDMETHOD.
  METHOD if_ex_me_gui_po_cust~transport_to_model.
* EDIEGO 16/07/2017 -->
*    DATA: l_item             TYPE REF TO if_purchase_order_item_mm,
*          ls_mepoitem        TYPE        mepoitem,
**          ls_customer TYPE        mepo_badi_exampl,
*          l_header           TYPE REF TO if_purchase_order_mm,
*          ls_mepoheader      TYPE        mepoheader,
*          ls_customer        TYPE        ci_ekkodb,
*          l_po_header_handle TYPE REF TO cl_po_header_handle_mm.
*
**--------------------------------------------------------------------*
** data have to be transported to business logic
**--------------------------------------------------------------------*
*
*    CASE im_name.
*
*      WHEN subscreen1.
*
** is it an item? im_model can be header or item.
*        mmpur_dynamic_cast l_item im_model.
*        CHECK NOT l_item IS INITIAL.
*
*        ls_mepoitem = l_item->get_data( ).
*
** standard fields changed?
*        IF dynp_data_pbo-zzcausa_retraso NE dynp_data_pai-zzcausa_retraso OR
*           dynp_data_pbo-zzabgru         NE dynp_data_pai-zzabgru         OR
*           dynp_data_pbo-zzaugru         NE dynp_data_pai-zzaugru         OR
*           dynp_data_pbo-zzbloq_plan     NE dynp_data_pai-zzbloq_plan     OR
*           dynp_data_pbo-zzbloq_fabr     NE dynp_data_pai-zzbloq_fabr.
*
** update standard fields
*          ls_mepoitem-zzcausa_retraso = dynp_data_pai-zzcausa_retraso.
*          ls_mepoitem-zzabgru         = dynp_data_pai-zzabgru.
*          ls_mepoitem-zzaugru         = dynp_data_pai-zzaugru.
*          ls_mepoitem-zzbloq_plan     = dynp_data_pai-zzbloq_plan.
*          ls_mepoitem-zzbloq_fabr     = dynp_data_pai-zzbloq_fabr.
*          CALL METHOD l_item->set_data( ls_mepoitem ).
*
*        ENDIF.
*
*** customer fields changed?
**        IF dynp_data_pbo-badi_bsgru NE dynp_data_pai-badi_bsgru OR
**           dynp_data_pbo-badi_afnam NE dynp_data_pai-badi_afnam.
**
**          CALL FUNCTION 'MEPOBADIEX_GET_DATA'
**            EXPORTING
**              im_ebeln = ls_mepoitem-ebeln
**              im_ebelp = ls_mepoitem-ebelp
**            IMPORTING
**              ex_data  = ls_customer.
**
**          ls_customer-badi_bsgru = dynp_data_pai-badi_bsgru.
**          ls_customer-badi_afnam = dynp_data_pai-badi_afnam.
**
**          CALL FUNCTION 'MEPOBADIEX_SET_DATA'
**            EXPORTING
**              im_data = ls_customer.
**
**        ENDIF.
*      WHEN OTHERS.
*
*    ENDCASE.

    DATA: l_header           TYPE REF TO if_purchase_order_mm,
          ls_mepoheader      TYPE        mepoheader,
          ls_customer        TYPE        ci_ekkodb,
          l_po_header_handle TYPE REF TO cl_po_header_handle_mm.
*--------------------------------------------------------------------*
* data have to be transported to business logic
*--------------------------------------------------------------------*
    CASE im_name.
      WHEN subscreen1.
* is it an item? im_model can be header or item.
        mmpur_dynamic_cast l_header im_model.
        CHECK NOT l_header IS INITIAL.
        ls_mepoheader = l_header->get_data( ).
* standard fields changed?
        IF dynp_data_pbo-zzsegcal   NE dynp_data_pai-zzsegcal.
* update standard fields
          ls_mepoheader-zzsegcal   = dynp_data_pai-zzsegcal.
          CALL METHOD l_header->set_data
            EXPORTING
              im_data = ls_mepoheader.
        ENDIF.
* standard fields changed?
        IF dynp_data_pbo-zzimp_rep   NE dynp_data_pai-zzimp_rep.
* update standard fields
          ls_mepoheader-zzimp_rep   = dynp_data_pai-zzimp_rep.
          CALL METHOD l_header->set_data
            EXPORTING
              im_data = ls_mepoheader.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
* EDIEGO 16/07/2017 <--
  ENDMETHOD.
endclass. "ZCL_IM_ME_GUI_PO_CUST implementation
