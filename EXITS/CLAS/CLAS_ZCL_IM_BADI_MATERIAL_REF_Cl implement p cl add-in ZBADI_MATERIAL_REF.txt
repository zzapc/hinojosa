
class ZCL_IM_BADI_MATERIAL_REF definition
  public
  final
  create public .

public section.

  interfaces IF_EX_MATERIAL_REFERENCE .
protected section.
private section.
endclass. "ZCL_IM_BADI_MATERIAL_REF definition
class ZCL_IM_BADI_MATERIAL_REF implementation.
  METHOD if_ex_material_reference~create_material.
*--------------------------------------------------------
*   I_MATERIAL_STATUS    Importing Type  PSTAT_D
*   I_REF_MATERIAL       Importing Type  MATNR
*   IT_MATERIAL_TABLES   Importing Type  MAT_TABLES
*   IT_FIELD_SELECTION   Importing Type  MAT_FIELD_SEL
*   I_MARA               Importing Type  MARA
*   I_MARC               Importing Type  MARC
*   I_MARD               Importing Type  MARD
*   E_MARAU              Exporting Type  MARU
*   E_MARCU              Exporting Type  MARCU
*   E_MARDU              Exporting Type  MARDU
*   CT_MAT_REFTAB        Changing  Type  MAT_REFTAB
*   C_MBEW               Changing  Type  MBEW
*   C_MPOP               Changing  Type  MPOP
*   C_MLGN               Changing  Type  MLGN
*   C_MLGT               Changing  Type  MLGT
*   C_MVKE               Changing  Type  MVKE
*   C_MFHM               Changing  Type  MFHM
*   C_MAKT               Changing  Type  MAKT
*   CT_STEXT             Changing  Type  MAT_KTEXT
*   CT_UOM               Changing  Type  MAT_MEINH
*   CT_SALES_TAX         Changing  Type  MAT_STEUER
*   CT_PUR_TAX           Changing  Type  MAT_STEUMM
*   CT_EAN               Changing  Type  MAT_EAN
*--------------------------------------------------------
    DATA: wa_smeinh    TYPE LINE OF mat_meinh,
          wa_smeinh_un TYPE LINE OF mat_meinh,
          lv_umren     TYPE         umren.

    DATA: wa_ztmm0020 TYPE ztmm0020.

    DATA: wa_zmarcpalet TYPE zmarcpalet.


    MOVE-CORRESPONDING i_mara TO e_marau.
    MOVE-CORRESPONDING i_marc TO e_marcu.
    MOVE-CORRESPONDING i_mard TO e_mardu.

    IF i_mara-mtart = 'ZPAP' OR
       i_mara-mtart = 'ZROL' OR
       i_mara-mtart = 'ZCAR' OR
       i_mara-mtart = 'ZCAH' OR
       i_mara-mtart = 'ZCAB' OR
       i_mara-mtart = 'ZPIM' OR " cvivo - Proyecto WM CB RHX
       i_mara-mtart = 'ZPIH'. " cvivo - Proyecto WM CB
      IF i_mara-matkl IS INITIAL.
        CALL FUNCTION 'Z_MM_CARGAR_DATOS_MARA_MM01'
          EXPORTING
            i_mtart     = i_mara-mtart
            i_matnr     = i_mara-matnr " cvivo - Proyecto WM
          IMPORTING
            o_matkl     = e_marau-matkl
            o_maktx     = c_makt-maktx
            o_maktg     = c_makt-maktg
            o_zzgramaje = e_marau-zzgramaje
            o_zzancho   = e_marau-zzancho
            o_zzlargo   = e_marau-zzlargo.
      ENDIF.
    ELSEIF ( i_mara-mtart EQ 'ZPLP' OR i_mara-mtart EQ 'ZPMP' OR i_mara-mtart EQ 'ZCON').
      IF i_mara-matkl IS INITIAL.
        CALL FUNCTION 'ZMM_MATERIAL_CIPASI'
          EXPORTING
            i_mtart      = i_mara-mtart
          IMPORTING
            o_maktx      = c_makt-maktx
            o_zzcolor    = e_marau-zzcolor
            o_zzespesor  = e_marau-zzespesor
            o_zzgrampla  = e_marau-zzgrampla
            o_zzplalgnt  = e_marau-zzplalgnt
            o_zzplaannt  = e_marau-zzplaannt
            o_zzcajlgext = e_marau-zzcajlgext
            o_zzcajanext = e_marau-zzcajanext
            o_zzcajalext = e_marau-zzcajalext
            o_zzref      = e_marau-zzref
            o_zztrat     = e_marau-zztratos
            o_zzaditiv   = e_marau-zzaditiv
            o_zzrollo    = e_marau-zzrollo
            o_zzplancha  = e_marau-zzplancha.
      ELSEIF i_mara-mtart EQ 'ZWIP'.
        MESSAGE e127(zmm).
      ENDIF.

*--------------------------------------------------------------------------
*     VALIDACIONES EN LOS MATERIALES DE TIPO 'ZPLP', 'ZPM' Y 'ZCON'
*--------------------------------------------------------------------------
*     verificamos el valor del Status material específico centro
      IF i_marc-mmsta IS NOT INITIAL.
        SELECT SINGLE * FROM  zmarcpalet
          INTO wa_zmarcpalet
          WHERE matnr = i_marc-matnr AND
                werks = i_marc-werks AND
                kunnr = i_mara-zzcliente.
        IF sy-subrc <> 0.
          e_marcu-mmsta = '03'.
*          MESSAGE w138(zmm). "Material bloqueado para fabricación, cree los datos de paletizado del material
        ENDIF.
      ELSE.
*        e_marcu-mmsta = '03'.
      ENDIF.


      IF e_marau-matkl IS INITIAL. "Informamos el grupo de artículos
        SELECT SINGLE matkl FROM ztmm0020
                      INTO e_marau-matkl
                      WHERE mtart = i_mara-mtart AND
                            plancha = i_mara-zzplancha AND
                            rollo = i_mara-zzrollo.
      ELSE. "Validamos el grupo de artículos. Si es incorrecto, le ponemos el valor correcto
        SELECT SINGLE * FROM ztmm0020
                    INTO wa_ztmm0020
                    WHERE mtart = i_mara-mtart AND
                          plancha = i_mara-zzplancha AND
                          rollo = i_mara-zzrollo AND
                          matkl = i_mara-matkl.

        IF sy-subrc <> 0.
          SELECT SINGLE matkl FROM ztmm0020
            INTO e_marau-matkl
            WHERE mtart = i_mara-mtart AND
                  plancha = i_mara-zzplancha AND
                  rollo = i_mara-zzrollo.

        ENDIF.
      ENDIF.

*--------------------------------------------------------------------------
*     VALIDACIONES EN LOS MATERIALES DE TIPO 'ZPLP' Y 'ZPM'
*--------------------------------------------------------------------------
      IF ( i_mara-mtart = 'ZPLP' OR i_mara-mtart = 'ZPMP' ).
*       Validamos que la unidad de medida base es UN.
        IF ( i_mara-meins IS NOT INITIAL AND i_mara-meins <> 'ST' ).
          CLEAR: e_marau-meins.
          MESSAGE w126(zmm). "Unidad medida base debe ser UN
        ENDIF.

*       Si el Gram.Final no está informado, lo calculamos como Gram.Final = Gram.Plancha + Gram.Tratamientos
        e_marau-zzgramfin = i_mara-zzgrampla + i_mara-zzgramtra.
      ENDIF.

*--------------------------------------------------------------------------
*     VALIDACIONES EN LOS MATERIALES DE TIPO 'ZPLP'
*--------------------------------------------------------------------------
*     Cálculamos el peso teórico
      IF i_mara-mtart = 'ZPLP'. " OR i_mara-mtart = 'ZPMP'.
*       Peso teórico PLANCHAS = (Largo Neto/1000) x (Ancho Neto/1000) x (Gramaje Final)
        IF i_mara-zzplancha = 'X'.

          lv_umren = ceil( i_mara-zzplalgnt / 1000 * i_mara-zzplaannt / 1000 *  i_mara-zzgramfin ) .

          READ TABLE ct_uom INTO wa_smeinh WITH KEY meinh =  'KG'.
          IF sy-subrc <> 0.
            wa_smeinh-meinh =  'KG'.
            wa_smeinh-umrez  = 1000.
            wa_smeinh-umren = lv_umren.
            APPEND wa_smeinh TO ct_uom.
          ELSE.
            wa_smeinh-umren = lv_umren.
            wa_smeinh-umrez  = 1000.
            MODIFY ct_uom FROM wa_smeinh  INDEX sy-tabix.

            READ TABLE ct_uom INTO wa_smeinh_un WITH KEY meinh =  'ST'.
            IF sy-subrc = 0.
              wa_smeinh_un-brgew = lv_umren / 1000.
              wa_smeinh_un-ntgew = lv_umren / 1000.
              MODIFY ct_uom FROM wa_smeinh_un  INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDIF.

*       Peso teórico ROLLOS = 100 x (Largo Neto/1000) x (Ancho Neto/1000) x (Gramaje Final/1000)
        IF i_mara-zzrollo = 'X'.
          lv_umren = ceil( 100 * ( ( i_mara-zzplalgnt / 1000 ) *
                                   ( i_mara-zzplaannt / 1000 ) *
                                   ( i_mara-zzgramfin / 1000 ) ) ).

          READ TABLE ct_uom INTO wa_smeinh WITH KEY meinh =  'KG'.
          IF sy-subrc <> 0.
            wa_smeinh-meinh =  'KG'.
            wa_smeinh-umrez  = 100.
            wa_smeinh-umren = lv_umren.
            APPEND wa_smeinh TO ct_uom.
          ELSE.
            wa_smeinh-umren = lv_umren.
            wa_smeinh-umrez  = 100.
            MODIFY ct_uom FROM wa_smeinh INDEX sy-tabix.

            READ TABLE ct_uom INTO wa_smeinh_un WITH KEY meinh =  'ST'.
            IF sy-subrc = 0.
              wa_smeinh_un-brgew = lv_umren / 100.
              wa_smeinh_un-ntgew = lv_umren / 100.
              MODIFY ct_uom FROM wa_smeinh_un  INDEX sy-tabix.
            ENDIF.
          ENDIF.
        ENDIF.

        IF wa_smeinh-umrez <> 0.
          e_marau-brgew = lv_umren / wa_smeinh-umrez.
          e_marau-ntgew = e_marau-brgew.
          e_marau-gewei = 'KG'. "wa_smeinh-meinh.
        ENDIF.
      ELSEIF i_mara-mtart = 'ZPMP'. " 59936 - cvivo - 12.03.2020 Forzar MARM y Datos base 1 es igual en ZPMP -> Descartado, se pone en include ZXMG0U02, que salta tb en modif.
*        READ TABLE ct_uom INTO wa_smeinh WITH KEY meinh =  'KG'.
*        IF sy-subrc <> 0.
*          wa_smeinh-meinh = wa_smeinh-gewei = 'KG'.
*          wa_smeinh-brgew = 1.
*          wa_smeinh-umrez  = 1000.
*          wa_smeinh-umren = i_mara-ntgew * 1000.
*          APPEND wa_smeinh TO ct_uom.
*        ELSE.
*          wa_smeinh-gewei = 'KG'.
*          wa_smeinh-brgew = 1.
*          wa_smeinh-umren = i_mara-ntgew * 1000.
*          wa_smeinh-umrez  = 1000.
*          MODIFY ct_uom FROM wa_smeinh  INDEX sy-tabix.
*        ENDIF.
      ENDIF.
    ENDIF.

* ini - cvivo - 53569 Propuesta campos materiales 17/07/2019
    CALL FUNCTION 'ZMM_PROPUESTA_CAMPOS_MAT'
      EXPORTING
        tcode     = sy-tcode
      CHANGING
        mara      = e_marau
        marc      = e_marcu
        mard      = e_mardu
        mbew      = c_mbew
        mpop      = c_mpop
        mlgn      = c_mlgn
        mlgt      = c_mlgt
        mvke      = c_mvke
        sales_tax = ct_sales_tax.
* fin - cvivo - Propuesta campos materiales 17/07/2019

  ENDMETHOD.
endclass. "ZCL_IM_BADI_MATERIAL_REF definition
endclass. "ZCL_IM_BADI_MATERIAL_REF implementation
