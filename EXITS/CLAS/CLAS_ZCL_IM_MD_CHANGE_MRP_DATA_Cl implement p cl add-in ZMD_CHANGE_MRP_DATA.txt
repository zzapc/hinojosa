
class ZCL_IM_MD_CHANGE_MRP_DATA definition
  public
  final
  create public .

public section.

  interfaces IF_EX_MD_CHANGE_MRP_DATA .
protected section.
private section.
endclass. "ZCL_IM_MD_CHANGE_MRP_DATA definition
class ZCL_IM_MD_CHANGE_MRP_DATA implementation.
  method IF_EX_MD_CHANGE_MRP_DATA~BADI_TIME_OFF.
* kyvor 01_10_2019 si pertenecen a un grupo de productos los valores de pedidos
* deben acumularse en los códicos principales.
  endmethod.
  METHOD if_ex_md_change_mrp_data~change_mdpsx_eban.

    " DEL - cvivo - 62813 - pasamos a utilizar tabla ZWM_COMPATIBLES
** kyvor 01/10/2019 - si pertenece a grupo de productos
** solo las necesidades deben considerarse sobre el principal.
*    DATA: l_pgmi  TYPE STANDARD TABLE OF pgmi,
*          i_pgmi  TYPE pgmi.
*
*    SELECT SINGLE * INTO i_pgmi
*                     FROM pgmi WHERE
*                     NRMIT = im_mt61d-matnr AND
*                     werks = im_mt61d-werks.
*    IF sy-subrc = 0 ." PERTENECE A GRUPO DE PRODUCTOS
*
*      IF i_pgmi-antei = 0.
*        CLEAR ch_mdps-vrfkz.
*        ch_changed = 'X'.
*      ENDIF.
*    ENDIF.

    " cvivo - 62813 - pasamos a utilizar tabla ZWM_COMPATIBLES
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_matnr    = im_mt61d-matnr
        iv_werks    = im_mt61d-werks
      IMPORTING
        e_principal = DATA(principal)
      RECEIVING
        et_compat   = DATA(et_compat).

    IF principal IS INITIAL AND et_compat IS NOT INITIAL..
      CLEAR ch_mdps-vrfkz.
      ch_changed = 'X'.
    ENDIF.

  ENDMETHOD.
  METHOD if_ex_md_change_mrp_data~change_mdpsx_mard.

    "DEL - cvivo - 62813 - pasamos a utilizar tabla ZWM_COMPATIBLES
** kyvor 23/01/2020 - si pertenece a grupo de productos
** y es principal el stock de los subordinados se debe sonsiderar
*
*    DATA: l_pgmi TYPE STANDARD TABLE OF pgmi,
*          i_pgmi TYPE pgmi.
*    DATA: l_marc TYPE STANDARD TABLE OF marc,
*          i_marc TYPE marc.
*    DATA: ls_mard    TYPE mard.
*    DATA: ls_ekpo    TYPE ekpo.
*
*    SELECT SINGLE * INTO i_pgmi
*                     FROM pgmi WHERE
*                     nrmit = im_mt61d-matnr AND
*                     werks = im_mt61d-werks.
*    IF sy-subrc = 0 ." PERTENECE A GRUPO DE PRODUCTOS
*
*      IF i_pgmi-antei > 0.
*        SELECT * FROM pgmi
*           INTO CORRESPONDING
*                 FIELDS OF TABLE  l_pgmi
*                           WHERE nrmit NE im_mt61d-matnr AND
*                          werks = im_mt61d-werks AND
*                          prgrp = i_pgmi-prgrp.
*        LOOP AT l_pgmi INTO i_pgmi.
*          SELECT SINGLE * FROM mard INTO ls_mard
*                     WHERE matnr = i_pgmi-nrmit AND
*                          werks = im_mt61d-werks AND
*                          lgort = '1000' AND
*                          labst NE 0.
*          IF sy-subrc = 0.
*
*            ch_mdps-mng01 = ch_mdps-mng01 + ls_mard-labst.
*
*          ENDIF.
*        ENDLOOP.
*        ch_changed = 'X'.
** for materials first time created and no purchased
*        SELECT SINGLE * FROM ekpo INTO ls_ekpo
*                           WHERE matnr = im_mt61d-matnr
*                                    AND werks = im_mt61d-werks.
*        IF sy-subrc NE 0.
** add dummy record to avoid exit in LM61XF1K *--> Material-specific performance check
*          CLEAR ls_ekpo.
*          ls_ekpo-matnr = im_mt61d-matnr.
*          ls_ekpo-werks = im_mt61d-werks.
*          MODIFY ekpo FROM ls_ekpo.
*
*        ENDIF.
*      ENDIF.
*    ELSE. "MIRAMOS SI ESTA SUTITUIDO 21/02/2020
*      SELECT *  FROM marc  INTO CORRESPONDING
*                 FIELDS OF TABLE l_marc
*                     WHERE werks = im_mt61d-werks AND
*                     nfmat = im_mt61d-matnr .
*
*      LOOP AT l_marc INTO i_marc.
*        SELECT SINGLE * FROM mard INTO ls_mard
*                   WHERE matnr = i_marc-matnr AND
*                        werks = im_mt61d-werks AND
*                        lgort = '1000' AND
*                        labst NE 0.
*        IF sy-subrc = 0.
*
*          ch_mdps-mng01 = ch_mdps-mng01 + ls_mard-labst.
*        ch_changed = 'X'.
*        ENDIF.
*      ENDLOOP.
*
*    ENDIF.



    " cvivo - 62813 - pasamos a utilizar tabla ZWM_COMPATIBLES
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_matnr    = im_mt61d-matnr
        iv_werks    = im_mt61d-werks
      IMPORTING
        e_principal = DATA(principal)
      RECEIVING
        et_compat   = DATA(et_compat).

    IF principal IS NOT INITIAL.
      LOOP AT et_compat INTO DATA(compat) WHERE principal IS INITIAL.
        SELECT SINGLE * FROM mard INTO @DATA(ls_mard)
                   WHERE matnr = @compat-matnr AND
                        werks = @im_mt61d-werks AND
*                          lgort = '1000' AND " cvivo - ¿por qué se restringía esto?
                        labst NE 0.
        IF sy-subrc = 0.
          ch_mdps-mng01 = ch_mdps-mng01 + ls_mard-labst.
        ENDIF.
      ENDLOOP.
      ch_changed = 'X'.

* for materials first time created and no purchased
      SELECT SINGLE * FROM ekpo INTO @DATA(ls_ekpo)
                         WHERE matnr = @im_mt61d-matnr
                           AND werks = @im_mt61d-werks.
      IF sy-subrc NE 0.
* add dummy record to avoid exit in LM61XF1K *--> Material-specific performance check
        CLEAR ls_ekpo.
        ls_ekpo-matnr = im_mt61d-matnr.
        ls_ekpo-werks = im_mt61d-werks.
        MODIFY ekpo FROM ls_ekpo.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD if_ex_md_change_mrp_data~change_mdpsx_mdbs.
    " del - cvivo - 62813 - pasamos a utilizar tabla ZWM_COMPATIBLES
* kyvor 01/10/2019 - si pertenece a grupo de productos
* solo las necesidades deben considerarse sobre el principal.

*    DATA: l_pgmi  TYPE STANDARD TABLE OF pgmi,
*          i_pgmi  TYPE pgmi.
*
*    SELECT SINGLE * INTO i_pgmi
*                     FROM pgmi WHERE
*                     NRMIT = im_mt61d-matnr AND
*                     werks = im_mt61d-werks.
*    IF sy-subrc = 0 ." PERTENECE A GRUPO DE PRODUCTOS
*
*      IF i_pgmi-antei = 0.
*        CLEAR ch_mdps-vrfkz.
*        ch_changed = 'X'.
*      ENDIF.
*    ENDIF.

    " cvivo - 62813 - pasamos a utilizar tabla ZWM_COMPATIBLES
    CALL METHOD zcl_wm_compatibles=>get_compatibles
      EXPORTING
        iv_matnr    = im_mt61d-matnr
        iv_werks    = im_mt61d-werks
      IMPORTING
        e_principal = DATA(principal)
      RECEIVING
        et_compat   = DATA(et_compat).

    IF principal IS INITIAL AND et_compat IS NOT INITIAL.
      CLEAR ch_mdps-vrfkz.
      ch_changed = 'X'.
    ENDIF.

  ENDMETHOD.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDFA.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDLA.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDPB.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDQM.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDRI.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDRS.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDSM.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDUA.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDUB.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDUP.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MDUR.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MSSA.

  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MSSL.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_MSSQ.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_PLAF.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_SAUF.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_VBBE.
  DATA(lv_tipo) = NEW zscl_assembly( )->get_tipo( i_kdauf = im_vbbe-vbeln
                                                  i_kdpos = im_vbbe-posnr ).
  IF lv_tipo = 2 "Assembly 'Hinojosa' OF Lib, Ctec o Cerr
    AND sy-xform = 'MRP_KD_AUFTRAG_RFC'. "Ejecución en fondo tras MV45AF0D (save en VA02)
    ch_exit = 'X'.
    ch_changed = 'X'.
  ENDIF.
 endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_VBBS.

   endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CHANGE_MDPSX_VFAPW.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CONSIDER_CUSTCONSIGNMENT.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CONSIDER_OTHER_SD_TYPES.

  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CONSIDER_RESB.

  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~CONSIDER_THIRDPARTY.
  endmethod.
  method IF_EX_MD_CHANGE_MRP_DATA~REDUCTION_CUSTCONSIGMENT.
  endmethod.
endclass. "ZCL_IM_MD_CHANGE_MRP_DATA definition
endclass. "ZCL_IM_MD_CHANGE_MRP_DATA implementation
