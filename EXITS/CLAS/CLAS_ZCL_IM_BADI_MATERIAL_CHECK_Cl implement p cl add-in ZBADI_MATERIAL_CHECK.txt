
class ZCL_IM_BADI_MATERIAL_CHECK definition
  public
  final
  create public .

public section.

  interfaces IF_EX_BADI_MATERIAL_CHECK .
protected section.
private section.
endclass. "ZCL_IM_BADI_MATERIAL_CHECK definition
class ZCL_IM_BADI_MATERIAL_CHECK implementation.
  METHOD if_ex_badi_material_check~check_change_mara_meins.

*  NEW_MEINS  Importing Type  MARA-MEINS                                                                                                                                        Base Unit of Measure
*  OLD_MEINS  Importing Type  MARA-MEINS                                                                                                                                        Base Unit of Measure
*  MATNR      Importing Type  MARA-MATNR                                                                                                                                        Material Number
*  IN_USE     Changing  Type  CHAR1                                                                                                                                       Single-Character Indicator
*  ERROR_TEXT Changing  Type  CHART128                                                                                                                                        Table with 128 characters

    DATA: lv_mtart TYPE         mtart,
          lv_text  TYPE LINE OF chart128.

*   verificamos que los tipos de materiales ZPLP Y ZPMP tengan como
*   unidad de medida base la 'UN'.
    SELECT SINGLE mtart FROM mara
      INTO lv_mtart
      WHERE matnr = matnr.

    CHECK ( lv_mtart = 'ZPLP' OR lv_mtart = 'ZPMP' ) AND  new_meins <> 'ST'.
    lv_text = 'La unidad de medida base debe ser UN'.
    APPEND lv_text TO error_text.

  ENDMETHOD.
  method IF_EX_BADI_MATERIAL_CHECK~CHECK_CHANGE_PMATA.
  endmethod.
  METHOD if_ex_badi_material_check~check_data.
*---------------------------------------------------------
*  WMARA        Importing Type  MARA
*  WMARC        Importing Type  MARC
*  WMARD        Importing Type  MARD
*  WMBEW        Importing Type  MBEW
*  WMLGN        Importing Type  MLGN
*  WMLGT        Importing Type  MLGT
*  WMVKE        Importing Type  MVKE
*  WSTAT        Importing Type  MGSTAT
*  WMFHM        Importing Type  MFHM
*  WMPOP        Importing Type  MPOP
*  SSTEUERTAB   Importing Type  MGINT_MG03STEUER
*  SSTEUMMTAB   Importing Type  MGINT_MG03STEUMM
*  WMEINH       Importing Type  MGINT_SMEINH
*  SMEAN_ME_TAB Importing Type  MGINT_ME_MEAN_TAB
*  CMARA        Changing  Type  MARU
*  STEXT        Changing  Type  MGINT_SHORT_DESC
*---------------------------------------------------------

    DATA: wa_wmeinh    TYPE LINE OF mgint_smeinh,
          lv_umren     TYPE         umren,
          enc          TYPE         xfeld,
          lv_answer    TYPE         c,
          lv_text(400) TYPE         c.

    DATA: lv_object TYPE ausp-objek,
          class     TYPE klah-class,
          classtype TYPE klah-klart.

    DATA: wa_ztmm0020 TYPE ztmm0020.

    DATA: lv_matnr TYPE matnr.

    DATA: wa_zmarcpalet TYPE zmarcpalet.

*---------------------------------------------------------
*   VALIDACIONES DE LOS MATERIALES DE TIPO ZPLP
*---------------------------------------------------------
    IF wmara-mtart = 'ZPLP'.
*      Validamos que tengan informados los campos Largo Neto, Ancho Neto y Gramaje Final.
*      En caso contrario “Debe informar Gramaje y Largo/Ancho neto
      IF wmara-zzplalgnt IS INITIAL OR wmara-zzplaannt IS INITIAL OR wmara-zzgramfin IS INITIAL.
        MESSAGE e125(zmm). "Debe informar Gramaje y Largo/Ancho neto
      ENDIF.
    ENDIF.

*---------------------------------------------------------
*   VALIDACIONES DE LOS MATERIALES DE TIPO ZPMP
*---------------------------------------------------------
    IF wmara-mtart = 'ZPMP'.
*     validamos si en la vista “Preparación del Trabajo” han asignado un Material Referencia
*     para Lotes Originales (MARC-UCMAT), que el código de dicho material coincide con la
*     concatenación de <código material que se está tratando>W
*     En caso contario enviar mensaje de error  “Material ZWIP incorrecto debe indicar xxxxxxxxxW”
*     Donde xxxxxxxxx es el código del material que estamos tratando.
*     El material ZWIP siempre será el código del material original añadiéndole al final ‘W’)
      IF wmarc-ucmat IS NOT INITIAL.
        DATA lv_ucmat TYPE marc-ucmat.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = wmara-matnr
          IMPORTING
            output = lv_matnr.

        CONCATENATE lv_matnr 'W' INTO lv_ucmat.
        IF wmarc-ucmat <> lv_ucmat.
          MESSAGE e131(zmm) WITH lv_ucmat. "Material ZWIP incorrecto debe indicar &
        ENDIF.
      ENDIF.
    ENDIF.


*---------------------------------------------------------
*   VALIDACIONES DE LOS MATERIALES DE TIPO ZPLP y ZPMP
*---------------------------------------------------------
    IF wmara-mtart = 'ZPLP' OR wmara-mtart = 'ZPMP'.
*     Validamos si el Gram.Final no está informado. En ese caso, lo calculamos como
*     Gram.Final = Gram.Plancha + Gram.Tratamientos
      IF wmara-zzgramfin IS INITIAL.
        cmara-zzgramfin = wmara-zzgrampla + wmara-zzgramtra.
      ENDIF.


**     Validamos el grupo de artículos
*      IF wmara-mtart IS NOT INITIAL AND wmara-matkl IS NOT INITIAL AND
*        ( wmara-zzplancha IS NOT INITIAL OR wmara-zzrollo IS NOT INITIAL ).
*        SELECT SINGLE * FROM ztmm0020
*          INTO wa_ztmm0020
*          WHERE mtart = wmara-mtart AND
*                placha = wmara-zzplancha AND
*                rollo = wmara-zzrollo AND
*                matkl = wmara-matkl.
*
*        IF sy-subrc <> 0.
**          IF wmara-zzplancha = 'X'.
**            MESSAGE i136(zmm) WITH wmara-mtart. "Seleccione grupo de artículos adecuado al & plancha
**          ELSEIF wmara-zzrollo = 'X'.
**            MESSAGE i137(zmm) WITH wmara-mtart. "Seleccione grupo de artículos adecuado al & ROLLO
**          ENDIF.
*        ENDIF.
*      ENDIF.

*     validamos el sistema de clasificación
*      -  Si no tienen asignada clase para la categoría 023 (lote) -> Error “Debe asignar la clase de lote”
*      -  Si ZPLP y la clase de lote de cat. 023 no es Z_ZPLP -> Error “Tipo de material ZPLP clase de lote debe ser Z_ZPLP”
*      -  Si ZPMP y la clase de lote de cat. 023 no es Z_ZPMP -> Error “Tipo de material ZPMP clase de lote debe ser Z_ZPMP”
      lv_object = wmara-matnr.

      CALL FUNCTION 'CLFM_GET_STANDARD_CLASS'
        EXPORTING
          object            = lv_object
          table             = 'MARA'
        IMPORTING
          class             = class
*         CLASSTEXT         =
          classtype         = classtype
*         CLINT             =
*         E_NO_STD_CLASS    =
        EXCEPTIONS
          no_classification = 1
          OTHERS            = 2.
      IF sy-subrc <> 0.
*       Implement suitable error handling here
      ELSE.
        IF class IS INITIAL.
*         Debe asignar la clase de lote
          MESSAGE e134(zmm). "Debe asignar la clase de lote
        ELSE.
          IF wmara-mtart = 'ZPLP'.
            IF class <> 'Z_ZPLP'.
*             Tipo de material ZPLP clase de lote debe ser Z_ZPLP
              MESSAGE e132(zmm). "Tipo de material ZPLP clase de lote debe ser Z_ZPLP
            ENDIF.
          ELSE.
            IF class <> 'Z_ZPMP'.
*             Tipo de material ZPMP clase de lote debe ser Z_ZPMP
              MESSAGE e133(zmm). "Tipo de material ZPMP clase de lote debe ser Z_ZPMP
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.



      IF wmara-zzrollo = 'X'. " AND ( wmara-matkl = '90220' OR wmara-matkl = '90232' ) .
*       Validar que existe conversión de unidad de medida base a unidad de medida peso.
*       En caso contrario error “Debe informar conversión a peso teórico”
        IF wmara-gewei IS NOT INITIAL.
          READ TABLE wmeinh INTO wa_wmeinh WITH KEY meinh = 'KG'.
          IF sy-subrc <> 0.
            MESSAGE e128(zmm). "Debe informar conversión a peso teórico
          ENDIF.
        ENDIF.

* >>> DBM Se comentan estas validaciones DEFINITIVAMENTE
*       Validar que la conversión a peso esté en KG y cantidad base 100
*        READ TABLE wmeinh INTO wa_wmeinh WITH KEY meinh =  'KG'
*                                                   umrez  = 100.
*        IF sy-subrc <> 0.
*          MESSAGE e129(zmm). "Verifique unidad de medida base (kg) y cantidad base (100)
*        ELSE.
*          IF wmara-mtart = 'ZPLP'.
*            lv_umren = ceil( 100 * ( ( wmara-zzplalgnt / 1000 ) *
*                                   ( wmara-zzplaannt / 1000 ) *
*                                   ( wmara-zzgramfin / 1000 ) ) ).
*            IF wa_wmeinh-umren <> lv_umren.
**              MESSAGE e141(zmm). "Verifique la conversión a peso teórico
*            ENDIF.
*          ELSE.
*            IF wa_wmeinh-umren IS INITIAL.
**              MESSAGE e141(zmm). "Verifique la conversión a peso teórico
*            ENDIF.
*          ENDIF.
*
*
*
*        ENDIF.
* <<< DBM Se comentan estas validaciones DEFINITIVAMENTE
      ENDIF.

      IF wmara-zzplancha = 'X'. " AND ( wmara-matkl = '90210' OR wmara-matkl = '90230' ) .
*       Validar que existe conversión de unidad de medida base a unidad de medida peso.
*       En caso contrario error “Debe informar conversión a peso teórico”
        IF wmara-gewei IS NOT INITIAL.
*          READ TABLE wmeinh INTO wa_wmeinh WITH KEY meinh = 'G'.
          READ TABLE wmeinh INTO wa_wmeinh WITH KEY meinh = 'KG'.
          IF sy-subrc <> 0.
            MESSAGE e128(zmm). "Debe informar conversión a peso teórico
          ENDIF.
        ENDIF.

* >>> DBM Se comentan estas validaciones DEFINITIVAMENTE
**       Validar que la conversión a peso esté en G y cantidad base 1
**        READ TABLE wmeinh INTO wa_wmeinh WITH KEY meinh =  'G'
**                                                  umrez  = 1.
**       Cambiar validación a KG
*        READ TABLE wmeinh INTO wa_wmeinh WITH KEY meinh =  'KG'
*                                                  umrez  = 1000.
*        IF sy-subrc <> 0.
**          MESSAGE e130(zmm). "Verifique unidad de medida base (gr) y cantidad base (1)
*        ELSE.
*
*          IF wmara-mtart = 'ZPLP'.
*
**            lv_umren = ceil( ( wmara-zzplalgnt / 1000 ) *
**                             ( wmara-zzplaannt / 1000 ) *
**                               wmara-zzgramfin ).
*            lv_umren = ceil( wmara-zzplalgnt * wmara-zzplaannt * wmara-zzgramfin ).
*            IF wa_wmeinh-umren <> lv_umren.
**              MESSAGE e141(zmm). "Verifique la conversión a peso teórico
*            ENDIF.
*          ELSE.
*            IF wa_wmeinh-umren IS INITIAL.
**              MESSAGE e141(zmm). "Verifique la conversión a peso teórico
*            ENDIF.
*          ENDIF.
*        ENDIF.
* <<< DBM Se comentan estas validaciones DEFINITIVAMENTE

      ENDIF.
    ENDIF.

*---------------------------------------------------------
*   VALIDACIONES DE LOS MATERIALES DE TIPO ZPLP , ZPMP y ZCON
*---------------------------------------------------------
    IF wmara-mtart = 'ZPLP' OR wmara-mtart = 'ZPMP' OR wmara-mtart = 'ZCON'.
*     verificamos el valor del Status material específico centro
      IF wmarc-mmsta = '03'.
        MESSAGE w138(zmm). "Material bloqueado para fabricación, cree los datos de paletizado del material
      ELSE.
        IF wmarc-mmsta IS NOT INITIAL.
          SELECT SINGLE * FROM  zmarcpalet
            INTO wa_zmarcpalet
            WHERE matnr = wmarc-matnr AND
                  werks = wmarc-werks AND
                  kunnr = wmara-zzcliente.
          IF sy-subrc <> 0.
            MESSAGE e139(zmm). "No existen datos de paletizado. Indique status 03 y créelos
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  method IF_EX_BADI_MATERIAL_CHECK~CHECK_DATA_RETAIL.
  endmethod.
  method IF_EX_BADI_MATERIAL_CHECK~CHECK_MASS_MARC_DATA.
  endmethod.
  method IF_EX_BADI_MATERIAL_CHECK~FRE_SUPPRESS_MARC_CHECK.
  endmethod.
endclass. "ZCL_IM_BADI_MATERIAL_CHECK definition
endclass. "ZCL_IM_BADI_MATERIAL_CHECK implementation
