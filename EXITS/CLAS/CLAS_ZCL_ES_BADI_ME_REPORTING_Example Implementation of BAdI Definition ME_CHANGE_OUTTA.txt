
class ZCL_ES_BADI_ME_REPORTING definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_ME_CHANGE_OUTTAB_CUS .
protected section.
private section.
endclass. "ZCL_ES_BADI_ME_REPORTING definition
class ZCL_ES_BADI_ME_REPORTING implementation.
METHOD if_ex_me_change_outtab_cus~fill_outtab.

* When processing this source code, you activate the following functionality:
* The reporting transactions for purchasing documents provide three main views
* for display: basic list, delivery schedule, and account assignment. All
* three views contain a column "Material". If the material of a purchasing
* document item is a manufacturer part number (MPN) then this MPN is shown
* as "Material". The internal inventory managed material is not visible.
* The following source code replaces the MPN by the inventory managed material.

  DATA: ls_merep_outtab_purchdoc TYPE merep_outtab_purchdoc,
        lv_matkl                 TYPE mara-matkl,

        BEGIN OF ls_mara_buffer,
          matnr     TYPE mara-matnr,
          matkl     TYPE mara-matkl,
          zzcalidad	TYPE mara-zzcalidad,
          bezei     TYPE ztmm0002t-bezei,
          zzgramaje	TYPE mara-zzgramaje,
          zzancho	  TYPE mara-zzancho,
          zzlargo	  TYPE mara-zzlargo,
          wgbez     TYPE t023t-wgbez,
        END OF ls_mara_buffer,

        BEGIN OF ls_ztmm0002t_buffer,
          zzcalidad TYPE ztmm0002t-zzcalidad,
          bezei     TYPE ztmm0002t-bezei,
        END OF ls_ztmm0002t_buffer,

        BEGIN OF ls_t023t_buffer,
          matkl TYPE t023t-matkl,
          wgbez TYPE t023t-wgbez,
        END OF ls_t023t_buffer,

        lt_mara_buffer      LIKE SORTED TABLE OF ls_mara_buffer      WITH UNIQUE KEY matnr,
        lt_t023t_buffer     LIKE SORTED TABLE OF ls_t023t_buffer     WITH UNIQUE KEY matkl,
        lt_ztmm0002t_buffer LIKE SORTED TABLE OF ls_ztmm0002t_buffer WITH UNIQUE KEY zzcalidad.

  DATA: ls_ekbe     TYPE ekbe,
        lv_mtart    TYPE mtart,
        ls_ztmm0006 TYPE ztmm0006.

  DATA lt_segcal TYPE HASHED TABLE OF ztsd0004 WITH UNIQUE KEY zzsegal .

  FIELD-SYMBOLS: <fs_outtab>    TYPE any,
                 <fs_zzcalidad> TYPE zmerep_append-zzcalidad,
                 <fs_bezei>     TYPE zmerep_append-bezei,
                 <fs_zzgramaje> TYPE zmerep_append-zzgramaje,
                 <fs_zzancho>   TYPE zmerep_append-zzancho,
                 <fs_zzlargo>   TYPE zmerep_append-zzlargo,
                 <fs_wgbez>     TYPE zmerep_append-wgbez,
                 <fs_material>  TYPE matnr,
                 <fs_ebeln>     TYPE ebeln,
                 <fs_ebelp>     TYPE ebelp,
                 <fs_werks>     TYPE werks_d,
                 <fs_frbnr>     TYPE frbnr1,
                 <fs_pesada>    TYPE zed_pesada,
                 <fs_xblnr>     TYPE xblnr1,
                 <fs_entrada>   TYPE zed_entrada,
                 <fs_zzsegcal>  TYPE zcod_sc,
                 <fs_sgcal_txt> TYPE zzsegcal,
                 <fs_em>        TYPE zmerep_append-zzctd_em, " cvivo - 54494
                 <fs_zzterm>    TYPE dzterm. " cvivo - 56297

* check that a purchasing document view is displayed
  IF im_struct_name EQ 'MEREP_OUTTAB_PURCHDOC'.   "view: basic list
    SELECT * FROM ztsd0004 INTO TABLE lt_segcal WHERE spras = sy-langu.
*   loop at the output table and assign a field symbol
    LOOP AT ch_outtab ASSIGNING <fs_outtab>.
*  -- assign the manufacturer part number to a field symbol
      ASSIGN COMPONENT: 'EMATN'     OF STRUCTURE <fs_outtab> TO <fs_material>,
                        'ZZCALIDAD' OF STRUCTURE <fs_outtab> TO <fs_zzcalidad>,
                        'ZZGRAMAJE' OF STRUCTURE <fs_outtab> TO <fs_zzgramaje>,
                        'ZZANCHO'   OF STRUCTURE <fs_outtab> TO <fs_zzancho>,
                        'ZZLARGO'   OF STRUCTURE <fs_outtab> TO <fs_zzlargo>,
                        'WGBEZ'     OF STRUCTURE <fs_outtab> TO <fs_wgbez>,
                        'BEZEI'     OF STRUCTURE <fs_outtab> TO <fs_bezei>,
                        'EBELN'     OF STRUCTURE <fs_outtab> TO <fs_ebeln>,
                        'EBELP'     OF STRUCTURE <fs_outtab> TO <fs_ebelp>,
                        'WERKS'     OF STRUCTURE <fs_outtab> TO <fs_werks>,
                        'ZNUM_PESADA' OF STRUCTURE <fs_outtab> TO <fs_pesada>,
                        'ZXBLNR'    OF STRUCTURE <fs_outtab> TO <fs_xblnr>,
                        'ZFRBNR'    OF STRUCTURE <fs_outtab> TO <fs_frbnr>,
                        'ZENTRADA'  OF STRUCTURE <fs_outtab> TO <fs_entrada>,
                        'ZZSEGCAL'  OF STRUCTURE <fs_outtab> TO <fs_zzsegcal>,
                        'ZZSEGCAL_TEXTO'  OF STRUCTURE <fs_outtab> TO <fs_sgcal_txt>,
                        'ZZCTD_EM' OF STRUCTURE <fs_outtab> TO <fs_em>, " cvivo - 54494
                        'ZZTERM' OF STRUCTURE <fs_outtab> TO <fs_zzterm>. " cvivo - 56297

      IF     <fs_material> IS NOT ASSIGNED OR <fs_zzcalidad> IS NOT ASSIGNED
         OR <fs_zzgramaje> IS NOT ASSIGNED OR <fs_zzancho>   IS NOT ASSIGNED
         OR <fs_zzlargo>   IS NOT ASSIGNED OR <fs_wgbez>     IS NOT ASSIGNED
         OR <fs_bezei>     IS NOT ASSIGNED
         OR <fs_ebeln> IS NOT ASSIGNED OR <fs_ebelp> IS NOT ASSIGNED
         OR <fs_werks> IS NOT ASSIGNED OR <fs_pesada> IS NOT ASSIGNED
         OR <fs_xblnr> IS NOT ASSIGNED OR <fs_frbnr> IS NOT ASSIGNED
         OR <fs_entrada> IS NOT ASSIGNED OR <fs_zzsegcal> IS NOT ASSIGNED
         OR <fs_sgcal_txt> IS NOT ASSIGNED OR <fs_em> IS NOT ASSIGNED " cvivo - 54494
         OR <fs_zzterm> IS NOT ASSIGNED. " cvivo - 56297
        CONTINUE.
      ENDIF.

*     Obtenemos los datos del buffer:
      READ TABLE lt_mara_buffer INTO ls_mara_buffer
        WITH KEY matnr = <fs_material>.
      IF sy-subrc NE 0.
        CLEAR: ls_mara_buffer, lv_matkl, ls_t023t_buffer, ls_ztmm0002t_buffer-bezei.

*       Si no estan, lo buscamos de la base de datos:
        SELECT SINGLE zzcalidad zzgramaje zzancho zzlargo matkl FROM mara
          INTO (ls_mara_buffer-zzcalidad, ls_mara_buffer-zzgramaje,
                ls_mara_buffer-zzancho,   ls_mara_buffer-zzlargo, lv_matkl)
          WHERE matnr EQ <fs_material>.

*       Obtenemos la denominación de calidad:
        READ TABLE lt_ztmm0002t_buffer INTO ls_ztmm0002t_buffer
          WITH KEY zzcalidad = ls_mara_buffer-zzcalidad.
        IF sy-subrc NE 0.
          ls_ztmm0002t_buffer-zzcalidad = ls_mara_buffer-zzcalidad.
          SELECT SINGLE bezei INTO ls_ztmm0002t_buffer-bezei FROM ztmm0002t
            WHERE zzcalidad EQ ls_ztmm0002t_buffer-zzcalidad.
          INSERT ls_ztmm0002t_buffer INTO TABLE lt_ztmm0002t_buffer.
        ENDIF.
        ls_mara_buffer-bezei = ls_ztmm0002t_buffer-bezei.

*       Obtenemos la descripcion de la familia:
        READ TABLE lt_t023t_buffer INTO ls_t023t_buffer
          WITH KEY matkl = lv_matkl.
        IF sy-subrc NE 0.

          SELECT SINGLE wgbez INTO ls_t023t_buffer-wgbez FROM t023t
            WHERE spras EQ sy-langu
              AND matkl EQ lv_matkl.

          INSERT ls_t023t_buffer INTO TABLE lt_t023t_buffer.
        ENDIF.
        ls_mara_buffer-wgbez = ls_t023t_buffer-wgbez.

*       Guardamos en el buffer:
        INSERT ls_mara_buffer INTO TABLE lt_mara_buffer.
      ENDIF.

      <fs_zzcalidad> = ls_mara_buffer-zzcalidad.
      <fs_bezei>     = ls_mara_buffer-bezei.
      <fs_zzgramaje> = ls_mara_buffer-zzgramaje.
      <fs_zzancho>   = ls_mara_buffer-zzancho.
      <fs_zzlargo>   = ls_mara_buffer-zzlargo.
      <fs_wgbez>     = ls_mara_buffer-wgbez.

      CLEAR lv_mtart.
      IF <fs_material> IS NOT INITIAL.
        SELECT SINGLE mtart INTO lv_mtart
          FROM mara
          WHERE matnr = <fs_material>.
      ENDIF.
      IF ( <fs_werks> = '3000' OR <fs_werks> = '3020' ) AND lv_mtart = 'ZREC'.
        CLEAR ls_ekbe.
        SELECT * INTO ls_ekbe
          FROM ekbe
          WHERE ebeln = <fs_ebeln>
          AND ebelp = <fs_ebelp>
          AND vgabe = '1'
          AND bwart = '101'.
        ENDSELECT.

        IF ls_ekbe IS NOT INITIAL.
          SELECT SINGLE xblnr frbnr INTO (<fs_xblnr>, <fs_frbnr>)
            FROM mkpf
            WHERE mblnr = ls_ekbe-belnr
            AND mjahr = ls_ekbe-gjahr.
        ENDIF.

        CLEAR ls_ztmm0006.
        SELECT * UP TO 1 ROWS
          INTO ls_ztmm0006
          FROM ztmm0006
          WHERE ebeln = <fs_ebeln>.
        ENDSELECT.

        IF ls_ztmm0006 IS NOT INITIAL.
          <fs_entrada> = ls_ztmm0006-zentrada.
          SELECT SINGLE znum_pesada INTO <fs_pesada>
            FROM ztmm0007
            WHERE zentrada = <fs_entrada>
            AND ebelp = <fs_ebelp>.
        ENDIF.
      ENDIF.

*     Leer EKKO: segunda calidad del pedido y cond pago
      IF <fs_zzsegcal> IS INITIAL OR <fs_zzsegcal> IS NOT ASSIGNED
      OR <fs_zzterm> IS INITIAL OR <fs_zzterm> IS NOT ASSIGNED. " cvivo - 56297
        SELECT SINGLE zzsegcal zterm FROM ekko
            INTO (<fs_zzsegcal>, <fs_zzterm>) where ebeln = <fs_ebeln>.
      ENDIF.
      IF <fs_zzsegcal> IS NOT INITIAL.
        READ TABLE lt_segcal INTO DATA(ls_segcal) WITH TABLE KEY zzsegal = <fs_zzsegcal>.
        IF sy-subrc EQ 0.
          <fs_sgcal_txt> = ls_segcal-texto.
        ENDIF.
      ENDIF.

* ini - cvivo - 54494
      SELECT SUM( menge )
        FROM ekbe
        WHERE ebeln EQ @<fs_ebeln>
          AND ebelp EQ @<fs_ebelp>
          AND bewtp EQ 'E' " doc. mat.
          AND shkzg EQ 'S' " EM
        INTO @DATA(lv_101).

      SELECT SUM( menge )
        FROM ekbe
        WHERE ebeln EQ @<fs_ebeln>
          AND ebelp EQ @<fs_ebelp>
          AND bewtp EQ 'E' " doc. mat.
          AND shkzg EQ 'H' " EM
        INTO @DATA(lv_102).

      <fs_em> = lv_101 - lv_102.

      CLEAR: lv_101, lv_102.
* fin - cvivo - 54494
    ENDLOOP.
  ENDIF.

ENDMETHOD.
endclass. "ZCL_ES_BADI_ME_REPORTING definition
endclass. "ZCL_ES_BADI_ME_REPORTING implementation
