
class ZCL_IM_ZMB_MIGO_BADI definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_MB_MIGO_BADI .

  class-data GS_ZTMM0001 type ZTMM0001 .
protected section.
private section.

  data GV_DYNPRO type XFELD .
  data GV_NO_INPUT type XFELD .
  data GV_MBLNR type MBLNR .
  data GV_MJAHR type MJAHR .
  data GT_GOITEM type OIB_T_GOITEM .
  data GV_ACCION type GOACTION .
  data GV_REFDOC type REFDOC .
  data GV_GOHEADER type GOHEAD .
  data GT_GOITEM_MARK type OIB_T_GOITEM .
  data GV_FORCE type XFLAG .
  data GV_LOG_HANDLE type BALLOGHNDL .
endclass. "ZCL_IM_ZMB_MIGO_BADI definition
class ZCL_IM_ZMB_MIGO_BADI implementation.
  METHOD if_ex_mb_migo_badi~check_header.

    DATA: ls_bapiret TYPE bapiret2.
    DATA: ls_goitem TYPE goitem.
    DATA: lv_mtart TYPE mtart.
    DATA: lv_ok TYPE xflag.
    DATA: lv_bsart TYPE esart.

* Chequeos de nota de entrega y peso de camion
    IF gv_accion = 'A01' AND gv_refdoc = 'R01' AND gv_goheader-lfsnr IS INITIAL.
      CLEAR ls_bapiret.
      ls_bapiret-type = 'E'.
      ls_bapiret-id = 'ZMM'.
      ls_bapiret-number = '057'.
      APPEND ls_bapiret TO et_bapiret2.
    ENDIF.

    IF gv_accion = 'A01' AND ( gv_refdoc = 'R01' OR gv_refdoc = 'R05' ) AND gs_ztmm0001-peso_ent IS INITIAL.
      LOOP AT gt_goitem INTO ls_goitem.
* mostrar error si algun material es tipo ZPAP
*        SELECT SINGLE mtart INTO lv_mtart
*        FROM mara
*        WHERE matnr = ls_goitem-matnr
*        AND mtart = 'ZPAP'.
*        IF sy-subrc = 0.
*          CLEAR ls_bapiret.
*          ls_bapiret-type = 'W'.
*          ls_bapiret-id = 'ZMM'.
*          ls_bapiret-number = '058'.
*          APPEND ls_bapiret TO et_bapiret2.
*        ENDIF.
      ENDLOOP.
    ENDIF.

* GST - 14/05/2015 ->
* SAT 7000006535 - Ticket 6336
* Chequeo en las posiciones de la entrega de mercancía:
    LOOP AT gt_goitem INTO ls_goitem.
      " Miramos si está dento de los periodos permitidos:
      CALL FUNCTION 'ZMFMM_CHECK_CIERRE'
        EXPORTING
*         i_bukrs = ls_goitem-bukrs
          i_werks = ls_goitem-werks
          i_budat = gv_goheader-budat
        IMPORTING
          e_ok    = lv_ok.

      IF lv_ok <> 'X'.
        CLEAR ls_bapiret.
        ls_bapiret-type = 'E'.
        ls_bapiret-id = 'ZMM'.
        ls_bapiret-number = '097'.
        CONCATENATE gv_goheader-budat+4(2) gv_goheader-budat+0(4)
                    INTO ls_bapiret-message_v1 SEPARATED BY '.'.
        APPEND ls_bapiret TO et_bapiret2.
      ENDIF.
    ENDLOOP.
* GST - 14/05/2015 <-


* -> hfc - 29/04/2016 - Adaptación para impedir en SAP contabilizaciones a futuro para compras contra stock
*    READ TABLE gt_goitem INTO ls_goitem
*    INDEX 1.
*    IF sy-subrc = 0 AND ls_goitem-bwart = '101'.
*      CLEAR lv_bsart.
*      SELECT SINGLE bsart INTO lv_bsart
*      FROM ekko
*      WHERE ebeln = ls_goitem-ebeln.
*      IF lv_bsart = 'ZPE1' AND gv_goheader-budat > sy-datum.
*        CLEAR ls_bapiret.
*        ls_bapiret-type = 'E'.
*        ls_bapiret-id = 'ZMM'.
*        ls_bapiret-number = '115'.
*        APPEND ls_bapiret TO et_bapiret2.
*      ENDIF.
*    ENDIF.

    LOOP AT gt_goitem INTO ls_goitem WHERE ebeln <> '' AND kzvbr = ''.
      IF gv_goheader-budat > sy-datum.
        CLEAR ls_bapiret.
        ls_bapiret-type = 'E'.
        ls_bapiret-id = 'ZMM'.
        ls_bapiret-number = '115'.
        APPEND ls_bapiret TO et_bapiret2.
      ENDIF.
    ENDLOOP.

* <- hfc - 29/04/2016 -

* ini - cvivo - 57837 Warning si nota de entrega ya contabilizada
    IF gv_accion = 'A01' AND gv_refdoc = 'R01' AND gv_goheader-lfsnr IS NOT INITIAL.
      READ TABLE gt_goitem WITH KEY bwart = '101' INTO ls_goitem.

      IF sy-subrc EQ 0. " EM
        SELECT SINGLE @abap_true FROM mkpf
          INNER JOIN mseg
            ON mkpf~mblnr EQ mseg~mblnr
            AND mkpf~mjahr EQ mseg~mjahr
          WHERE mkpf~xblnr EQ @gv_goheader-xblnr
            AND mseg~werks EQ @ls_goitem-werks
            AND mseg~lifnr EQ @ls_goitem-lifnr
          INTO @DATA(lv_result).

        IF sy-subrc EQ 0.
          CLEAR ls_bapiret.
          ls_bapiret-type = 'W'.
          ls_bapiret-id = 'ZMM'.
          ls_bapiret-number = '174'.
          APPEND ls_bapiret TO et_bapiret2.

          gv_force = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.
* fin - cvivo - 57837

  ENDMETHOD.
  METHOD if_ex_mb_migo_badi~check_item.
* GAP - 32MMPI003_Interfase EMCIA
    DATA: ls_goitem TYPE goitem,
          ls_mseg   TYPE mseg,
          ls_mara   TYPE mara,
          ls_mchb   TYPE mchb.
    DATA: lv_nomov TYPE zedpi_nomov.
    DATA: lv_completo TYPE flag.
    CLEAR lv_nomov.
    DATA: ls_bapiret TYPE bapiret2.
    DATA: lv_clabs(17).

    DATA: lv_clabs2  TYPE labst,
          lv_cinsm   TYPE insme,
          lv_cspem   TYPE speme,
          lv_werks   TYPE werks_d,
          lv_lgort   TYPE lgort_d,
          lv_mtart   TYPE mtart,
          lv_text(4).

    DATA: lr_mwskz TYPE RANGE OF mwskz,
          ls_mwskz LIKE LINE OF lr_mwskz.


** Read external data
    READ TABLE gt_goitem INTO ls_goitem WITH KEY global_counter = i_line_id.
    IF sy-subrc = 0.
      MOVE-CORRESPONDING ls_goitem TO ls_mseg.

** COMPROBAMOS MOV. MERCANCIA y TIPO MATERIAL - BOBINAS COMPLETAS:
      CLEAR ls_mara.
      SELECT SINGLE * INTO ls_mara
        FROM mara
        WHERE matnr = ls_mseg-matnr.

      CLEAR lv_completo.
      SELECT SINGLE t_completo INTO lv_completo
        FROM ztmm0005
        WHERE bwart = ls_mseg-bwart
        AND mtart = ls_mara-mtart.

      CLEAR ls_mchb.
      SELECT SINGLE * INTO ls_mchb
        FROM mchb
        WHERE matnr = ls_mseg-matnr
        AND werks = ls_mseg-werks
        AND lgort = ls_mseg-lgort
        AND charg = ls_mseg-charg.

** COMPROBAMOS SI ESTA PERMITIDO EL MOVIMIENTO
      CALL FUNCTION 'ZMFMM0001'
        EXPORTING
          pi_mseg  = ls_mseg
        IMPORTING
          po_nomov = lv_nomov.
    ENDIF.
** Refresh return table
*  refresh: et_bapiret2.

* EN CASO DE QUE EL MOVIMIENTO DE TRASLADO COMPLETO
* GST - 07/01/2014 ->
*    IF lv_completo = 'X' AND ls_mseg-erfmg < ls_mchb-clabs.
    IF lv_completo = 'X' AND ls_mseg-menge < ls_mchb-clabs.
* GST - 07/01/2014 <-
      IF ls_mseg-bwart IS NOT INITIAL.
        CLEAR ls_bapiret.
        ls_bapiret-type = 'E'.
        ls_bapiret-id = 'ZMM'.
        ls_bapiret-number = '018'.
        ls_bapiret-message_v1 = ls_mseg-bwart.
        APPEND ls_bapiret TO et_bapiret2.
      ENDIF.

      IF ls_mseg-charg IS NOT INITIAL AND ls_mchb-clabs IS NOT INITIAL AND ls_mseg-meins IS NOT INITIAL.
        CLEAR ls_bapiret.
        ls_bapiret-type = 'E'.
        ls_bapiret-id = 'ZMM'.
        ls_bapiret-number = '019'.
        ls_bapiret-message_v1 = ls_mseg-charg.
        CLEAR lv_clabs.
        WRITE ls_mchb-clabs TO lv_clabs.
        CONDENSE lv_clabs.
        ls_bapiret-message_v2 = lv_clabs.
        ls_bapiret-message_v3 = ls_mseg-meins.
        APPEND ls_bapiret TO et_bapiret2.
      ENDIF.
    ENDIF.

* EN CASO DE NO ESTAR PERMITIDO EL MOVIMIENTO RETORNAMOS UN ERROR Y BLOQUEA LA GRABACION
    IF lv_nomov = 'X'.
      ls_bapiret-type       = 'E'.
      ls_bapiret-id         = 'ZMM'.
      ls_bapiret-number     = '14'.
      ls_bapiret-message_v1 = ls_goitem-bwart.
      APPEND ls_bapiret TO et_bapiret2.
    ENDIF.


* VALIDAMOS QUE EL LOTE NO EXISTA O NO TENGA STOCK
    CLEAR lv_mtart.
    SELECT SINGLE mtart INTO lv_mtart
    FROM mara
    WHERE matnr = ls_goitem-matnr.
    IF lv_mtart = 'ZPAP' AND ls_goitem-bwart = '101'.

      CLEAR: lv_clabs2, lv_cinsm, lv_cspem.
      SELECT SINGLE clabs cinsm cspem werks lgort INTO (lv_clabs2, lv_cinsm, lv_cspem, lv_werks, lv_lgort)
      FROM mchb
      WHERE matnr = ls_goitem-matnr
      AND charg = ls_goitem-charg.
      IF sy-subrc = 0.
        IF lv_clabs2 > 0 OR lv_cinsm > 0 OR lv_cspem > 0.
          CLEAR ls_bapiret.
          ls_bapiret-type = 'E'.
          ls_bapiret-id = 'ZMM'.
          ls_bapiret-number = '080'.
          ls_bapiret-message_v1 = ls_goitem-charg.
          ls_bapiret-message_v2 = lv_werks.
          ls_bapiret-message_v3 = lv_lgort.
          APPEND ls_bapiret TO et_bapiret2.
        ENDIF.
      ENDIF.
    ENDIF.

* ini - cvivo - 20/12/2018 52379 Peso neto en MIGO
    IF ( ls_goitem-zntgew IS INITIAL OR ls_goitem-zgewei IS INITIAL ) AND ls_goitem-take_it IS NOT INITIAL AND ls_goitem-xstbw IS INITIAL.

      SELECT SINGLE @abap_true FROM ekko "solo imputados
        WHERE ebeln EQ @ls_goitem-ebeln
          AND bsart EQ 'ZPE2'
        INTO @DATA(check).

      IF sy-subrc EQ 0.

*--> INI FCARDONA 18.10.2021 67171 - Informe INTRASTAT SAP.

* Comento por mejora de lógica.
*
*        SELECT SINGLE @abap_true FROM tvarvc
*          WHERE name EQ 'ZMM_PESO_NETO'
*            AND low  EQ @ls_goitem-matnr
*          INTO @DATA(result).
*
*        IF sy-subrc EQ 0.
*          SELECT SINGLE a~herkl FROM eipo AS a
*            INNER JOIN ekko AS b
*              ON a~exnum EQ b~exnum
*            INNER JOIN ekpo AS c
*              ON b~ebeln EQ c~ebeln
*            WHERE c~ebeln EQ @ls_goitem-ebeln
*              AND a~expos EQ @ls_goitem-ebelp
*            INTO @DATA(herkl).
*
*          IF sy-subrc EQ 0.
*            SELECT SINGLE @abap_true FROM tvarvc " si es intracomunitario
*              WHERE name EQ 'ZMM_INTRACOMUNITARIO'
*                AND low  EQ @herkl
*                INTO @DATA(result2).
*
*            IF sy-subrc EQ 0.
*              WRITE ls_goitem-zeile TO lv_text NO-ZERO. CONDENSE lv_text.
*              CLEAR ls_bapiret.
*              ls_bapiret-type = 'E'.
*              ls_bapiret-id = 'ZMM'.
*              ls_bapiret-number = '167'.
*              ls_bapiret-message_v1 = lv_text.
*              APPEND ls_bapiret TO et_bapiret2.
*            ENDIF.
*          ENDIF.
*        ENDIF.

        SELECT SINGLE a~herkl, b~lifnr, c~mwskz
          FROM eipo AS a
         INNER JOIN ekko AS b
            ON a~exnum EQ b~exnum
         INNER JOIN ekpo AS c
            ON b~ebeln EQ c~ebeln
         WHERE c~ebeln EQ @ls_goitem-ebeln
           AND a~expos EQ @ls_goitem-ebelp
          INTO (@DATA(lv_herkl), @DATA(lv_lifnr), @DATA(lv_mwskz)).

        IF ( sy-subrc = 0 AND lv_herkl IS NOT INITIAL ).

          "Creo objeto INTRASTAT MANAGER
          DATA(lo_intrastat_manager) = NEW zcl_intrastat_manager( i_lifnr = lv_lifnr ).

          lo_intrastat_manager->get_country(
*            EXPORTING
*              i_lifnr =     " Número de cuenta del proveedor o acreedor
            IMPORTING
              e_land1 = DATA(lv_land1)    " Clave de país
              e_xegld = DATA(lv_xegld)    " Indicador: ¿ Miembro de la CEE ?
          ).

          "Comprobamos si es UE y no es nacional
          IF ( lv_land1 <> 'ES' AND lv_xegld IS NOT INITIAL ).

            "obtengo si IVA es de servicio
            lo_intrastat_manager->check_if_iva_is_service(
              EXPORTING
                i_mwskz   = lv_mwskz    " Indicador IVA
              IMPORTING
                e_service = DATA(lv_check)    " 'X' True, ' ' False
            ).

            "si NO es IVA de servicio
            IF ( lv_check IS INITIAL ).

              WRITE ls_goitem-zeile TO lv_text NO-ZERO. CONDENSE lv_text.
              CLEAR ls_bapiret.
              ls_bapiret-type = 'E'.
              ls_bapiret-id = 'ZMM'.
              ls_bapiret-number = '167'.
              ls_bapiret-message_v1 = lv_text.
              APPEND ls_bapiret TO et_bapiret2.

            ENDIF.

          ENDIF.

        ENDIF.

*<-- FIN FCARDONA 18.10.2021 67171 - Informe INTRASTAT SAP.

      ENDIF.
    ENDIF.
* fin - cvivo - 20/12/2018 52379 Peso neto en MIGO

* ini - cvivo - 21/01/2019 Validación lote proveedor en puerto (como saldrá en RF, es necesario introducirlo si WM activo)
    IF ls_goitem-take_it IS NOT INITIAL AND ls_goitem-bwart EQ '101' AND ls_goitem-licha IS INITIAL AND ls_goitem-xchpf NE space..
      SELECT * FROM tvarvc
        WHERE name EQ 'ZWM_ALMACENES_PUERTO'
          AND low  EQ @ls_goitem-werks
          INTO TABLE @DATA(t_tvarvc).

      LOOP AT t_tvarvc INTO DATA(tvarvc).
        IF ls_goitem-lgort CP tvarvc-high.
          " 'Introduzca lote de proveedor en entradas en almacen externo'
          CLEAR ls_bapiret.
          ls_bapiret-type = 'E'.
          ls_bapiret-id = 'ZMM'.
          ls_bapiret-number = '179'.
          APPEND ls_bapiret TO et_bapiret2.
        ENDIF.
      ENDLOOP.
    ENDIF.
* fin - cvivo - 21/01/2019 Validación lote proveedor en puerto (como saldrá en RF, es necesario introducirlo si WM activo)

* ini 54112 - cvivo - 28/03/2019 Validación motivo 501 en palets
    IF ls_goitem-take_it IS NOT INITIAL AND ls_goitem-grund EQ space.
      DATA: name LIKE tvarvc-name.

      CONCATENATE 'ZMM_' ls_goitem-bwart '_MOTIV_OBLIG' INTO name.

      SELECT SINGLE mtart FROM mara
        WHERE matnr EQ @ls_goitem-matnr
        INTO @DATA(mtart).

      SELECT SINGLE * FROM tvarvc
        WHERE name EQ @name
          AND low  EQ @ls_goitem-werks
          AND high EQ @mtart
          INTO @DATA(s_tvarvc).

      IF sy-subrc EQ 0.
        " 'Debe introducir motivo de movimiento en la pestaña "Se"'
        CLEAR ls_bapiret.
        ls_bapiret-type = 'E'.
        ls_bapiret-id = 'ZMM'.
        ls_bapiret-number = '180'.
        APPEND ls_bapiret TO et_bapiret2.
      ENDIF.
    ENDIF.
* fin 54112 - cvivo - 28/03/2019 Validación motivo 501 en palets

    " DEL - cvivo - 68172 - Queda obsoleta la validación sólo sobre el 101
** ini 61128 - cvivo - 19.05.2020 Validación tamaño bobina también en MIGO
*    DATA: max TYPE brgew_15,
*          min TYPE brgew_15.
*
*    CLEAR name.
*
*    IF ls_goitem-bwart EQ '101' AND ls_goitem-ebeln IS NOT INITIAL. " sólo compras - 61458
*      CASE lv_mtart.
*        WHEN  'ZPAP' OR 'ZCAB' OR 'ZPIM'.
*          CONCATENATE 'Z_CTD_EM_BOBINA_' ls_goitem-werks INTO name.
*
*          SELECT SINGLE *
*          FROM tvarvc
*            INTO s_tvarvc
*          WHERE name EQ name.
*
*          IF sy-subrc EQ 0.
*            MOVE s_tvarvc-high TO max.
*            MOVE s_tvarvc-low TO min.
*
*            IF ls_goitem-menge NOT BETWEEN min AND max.
*              " Revise la cantidad introducida para la bobina, fuera de límites
*              CLEAR ls_bapiret.
*              ls_bapiret-type = 'E'.
*              ls_bapiret-id = 'ZMM'.
*              ls_bapiret-number = '165'.
*              WRITE min TO ls_bapiret-message_v1 LEFT-JUSTIFIED DECIMALS 0.
*              WRITE max TO ls_bapiret-message_v2 LEFT-JUSTIFIED DECIMALS 0.
*              APPEND ls_bapiret TO et_bapiret2.
*            ENDIF.
*          ENDIF.
*      ENDCASE.
*    ENDIF.
** fin 61128 cvivo

    "  cvivo - 68172 - Establecer límites al tamaño y precio de las entradas de materia prima
    IF ls_goitem-shkzg EQ 'S'. "alta
      SELECT SINGLE mtart FROM mara
        INTO mtart
        WHERE matnr EQ ls_goitem-matnr.

      name = |ZMM_LIM_ALTA_{ mtart }|.

      SELECT * FROM tvarvc
        INTO TABLE t_tvarvc " tabla porque la primera entrada del select-option determinará la cantidad límite
        WHERE name EQ name.     " y la segunda entrada el valor límite

      IF sy-subrc EQ 0 AND lines( t_tvarvc ) EQ 2. " es obligatorio que existan las dos líneas
        DATA(q_min) = CONV brgew( t_tvarvc[ 1 ]-low ).
        DATA(q_max) = CONV brgew( t_tvarvc[ 1 ]-high ).
        DATA(v_min) = CONV brgew( t_tvarvc[ 2 ]-low ).
        DATA(v_max) = CONV brgew( t_tvarvc[ 2 ]-high ).

        CHECK ls_goitem-meins EQ 'KG'. " si no está en kilogramos no aplica la validación

        "validar cantidad
        IF ls_goitem-menge NOT BETWEEN q_min AND q_max.
          DATA(is_error) = 'X'.
          CLEAR ls_bapiret.
          ls_bapiret-type = 'E'.
          ls_bapiret-id = 'ZMM'.
          ls_bapiret-number = '183'.
          WRITE q_min TO ls_bapiret-message_v1 LEFT-JUSTIFIED DECIMALS 0.
          WRITE q_max TO ls_bapiret-message_v2 LEFT-JUSTIFIED DECIMALS 0.
          APPEND ls_bapiret TO et_bapiret2.

          DATA(key) = |Cantidad fuera límites: { sy-datum } / { sy-uzeit } / { sy-uname }|.
          LOG-POINT ID zmm_migo SUBKEY key FIELDS ls_goitem mtart.
        ENDIF.

        " validar valor
        CHECK ls_goitem-menge GT 0 and ls_goitem-xpoitem eq space. " evitar dividir por cero, y validar que no tiene pedido, de tenerlo, el control de precio se hace por ahí
        DATA(precio_tn) = ( 1000 * ls_goitem-dmbtr ) / ls_goitem-menge.

        IF precio_tn NOT BETWEEN v_min AND v_max.
          CLEAR ls_bapiret.
          ls_bapiret-type = 'E'.
          ls_bapiret-id = 'ZMM'.
          ls_bapiret-number = '184'.
          WRITE v_min TO ls_bapiret-message_v1 LEFT-JUSTIFIED DECIMALS 0.
          WRITE v_max TO ls_bapiret-message_v2 LEFT-JUSTIFIED DECIMALS 0.
          APPEND ls_bapiret TO et_bapiret2.

          key = |Precio fuera límites: { sy-datum } / { sy-uzeit } / { sy-uname }|.
          LOG-POINT ID zmm_migo SUBKEY key FIELDS ls_goitem mtart.
        ENDIF.
      ENDIF.
    ENDIF.




  ENDMETHOD.
  method IF_EX_MB_MIGO_BADI~HOLD_DATA_DELETE.
  endmethod.
  method IF_EX_MB_MIGO_BADI~HOLD_DATA_LOAD.
  endmethod.
  method IF_EX_MB_MIGO_BADI~HOLD_DATA_SAVE.
  endmethod.
  METHOD if_ex_mb_migo_badi~init.

    CLEAR: gv_mblnr, gv_mjahr.
    CLEAR gs_ztmm0001.
    REFRESH: gt_goitem_mark.

  ENDMETHOD.
  method IF_EX_MB_MIGO_BADI~LINE_DELETE.
  endmethod.
  METHOD if_ex_mb_migo_badi~line_modify.
*Controles en movimientos de almacén interno
* necesitamos tener en una tabla interna las posiciones que se están procesando.
* no hace falta efectuar filtro alguno de centro, movimientos. En los chequeos posteriores
* ya se hace
    DATA: l_goitem TYPE goitem,
          indice   TYPE sy-tabix,
          subrc    TYPE sy-subrc.

    READ TABLE gt_goitem INTO l_goitem WITH KEY global_counter = i_line_id.
    MOVE sy-subrc TO subrc.
    MOVE sy-tabix TO indice.

*--> INI FCARDONA 18.10.2021 67171 - Informe INTRASTAT SAP.

*-> Comento por cambio de lógica.
*
* ini - cvivo - 20/12/2018 52379 Peso neto en MIGO
*    SELECT SINGLE @abap_true FROM tvarvc
*      WHERE name EQ 'ZMM_PESO_NETO'
*        AND low  EQ @l_goitem-matnr
*      INTO @DATA(result).
*
*    IF sy-subrc EQ 0 AND l_goitem-bwart EQ '101'.

    IF ( l_goitem-bwart EQ '101' ).

      DATA: l_ntgew TYPE entge,
            l_gewei TYPE egewe.

      CALL FUNCTION 'ZMM_MIGO_GET_DATA'
        EXPORTING
          line_id  = i_line_id
        IMPORTING
          ntgew    = l_ntgew
          gewei    = l_gewei
        EXCEPTIONS
          not_line = 1
          OTHERS   = 2.

      IF sy-subrc <> 0.
* ini - cvivo - 18/01/2019 53105 Recuperar aquí el valor, si no falla
        READ TABLE gt_goitem_mark WITH KEY global_counter = i_line_id TRANSPORTING NO FIELDS. " ya se ha recuperado antes?

        IF sy-subrc NE 0.
          SELECT SINGLE ntgew gewei FROM ekpo
            INTO ( l_goitem-zntgew, l_goitem-zgewei )
            WHERE ebeln EQ l_goitem-ebeln
              AND ebelp EQ l_goitem-ebelp.

          APPEND l_goitem TO gt_goitem_mark. "marca para no volver a recuperar
        ENDIF.

        CALL FUNCTION 'ZMM_MIGO_PUT_DATA'
          EXPORTING
            i_goitem   = l_goitem
            i_no_input = gv_no_input.
* fin - cvivo - 18/01/2019 53105 Recuperar aquí el valor, si no falla

        MOVE: l_goitem-zntgew TO l_ntgew, l_goitem-zgewei TO l_gewei.
      ENDIF.
    ENDIF.
* fin - cvivo - 20/12/2018 52379 Peso neto en MIGO

    CASE subrc.
      WHEN 0.
        MOVE-CORRESPONDING cs_goitem TO l_goitem.
        l_goitem-zntgew = l_ntgew. " cvivo - 52379 Si no perdemos el dato
        l_goitem-zgewei = l_gewei. " cvivo - 52379 Si no perdemos el dato
        MODIFY gt_goitem FROM l_goitem INDEX indice.
      WHEN OTHERS.
        MOVE-CORRESPONDING cs_goitem TO l_goitem.
        l_goitem-zntgew = l_ntgew. " cvivo - 52379 Si no perdemos el dato
        l_goitem-zgewei = l_gewei. " cvivo - 52379 Si no perdemos el dato
        APPEND l_goitem    TO gt_goitem.
    ENDCASE.

  ENDMETHOD.
  method IF_EX_MB_MIGO_BADI~MAA_LINE_ID_ADJUST.
  endmethod.
  METHOD if_ex_mb_migo_badi~mode_set.

* Sólo aparece la dynpro en Entradas de Mercancias
    CASE i_action.
      WHEN 'A01'.    " 122 y 161
        gv_dynpro   = 'X'.
        CLEAR gv_no_input.
      WHEN  'A04'.
        gv_dynpro   = 'X'.
        gv_no_input = 'X'.
      WHEN OTHERS.
        CLEAR gv_dynpro.
    ENDCASE.

* Chequeos de nota de entrega y peso de camion
    gv_accion = i_action.
    gv_refdoc = i_refdoc.


  ENDMETHOD.
  METHOD if_ex_mb_migo_badi~pai_detail.
* ini - cvivo - 20/12/2018 52379 Peso neto en MIGO
    DATA: ls_goitem TYPE goitem.

*    IF sy-dynnr EQ '0001' AND sy-cprog EQ 'SAPLZGFMM_MIGO'.
*
*      READ TABLE gt_goitem INTO ls_goitem WITH KEY global_counter = i_line_id.
*
*      IF sy-subrc EQ 0.
*        SELECT SINGLE @abap_true FROM tvarvc
*          WHERE name EQ 'ZMM_PESO_NETO'
*            AND low  EQ @ls_goitem-matnr
*          INTO @DATA(result).
*
*        IF sy-subrc EQ 0. " aplica
*          e_force_change = 'X'. " para que se llame LINE_MODIFY
*        ENDIF.
*      ENDIF.
*    ENDIF.

    e_force_change = 'X'. " para que se llame LINE_MODIFY
* fin - cvivo - 20/12/2018 52379 Peso neto en MIGO
  ENDMETHOD.
  METHOD if_ex_mb_migo_badi~pai_header.

    CALL FUNCTION 'ZMIGO_LEER'
      IMPORTING
        e_ztmm0001 = gs_ztmm0001.

* Chequeos de nota de entrega y peso de camion
    gv_goheader = is_gohead.

  ENDMETHOD.
  METHOD if_ex_mb_migo_badi~pbo_detail.
* ini - cvivo - 20/12/2018 52379 Peso neto en MIGO
    DATA: ls_goitem TYPE goitem.

    READ TABLE gt_goitem INTO ls_goitem WITH KEY global_counter = i_line_id.

    IF sy-subrc EQ 0 AND ls_goitem-bwart EQ '101'.

*--> INI FCARDONA 18.10.2021 67171 - Informe INTRASTAT SAP.

*      SELECT SINGLE @abap_true FROM tvarvc
*        WHERE name EQ 'ZMM_PESO_NETO'
*          AND low  EQ @ls_goitem-matnr
*        INTO @DATA(result).
*
*      IF sy-subrc EQ 0.
*        SELECT SINGLE a~herkl FROM eipo AS a
*          INNER JOIN ekko AS b
*            ON a~exnum EQ b~exnum
*          INNER JOIN ekpo AS c
*            ON b~ebeln EQ c~ebeln
*          WHERE c~ebeln EQ @ls_goitem-ebeln
*            AND a~expos EQ @ls_goitem-ebelp
*          INTO @DATA(herkl).
*
*        IF sy-subrc EQ 0.
*          SELECT SINGLE @abap_true FROM tvarvc " si es intracomunitario
*            WHERE name EQ 'ZMM_INTRACOMUNITARIO'
*              AND low  EQ @herkl
*              INTO @DATA(result2).
*
*          IF sy-subrc EQ 0. " aplica
*            e_cprog = 'SAPLZGFMM_MIGO'.
*            e_dynnr = '0001'.
*            e_heading = 'Peso'.
*
*            READ TABLE gt_goitem_mark WITH KEY global_counter = i_line_id TRANSPORTING NO FIELDS. " ya se ha recuperado antes?
*
*            IF sy-subrc NE 0.
*              SELECT SINGLE ntgew gewei FROM ekpo
*                INTO ( ls_goitem-zntgew, ls_goitem-zgewei )
*                WHERE ebeln EQ ls_goitem-ebeln
*                  AND ebelp EQ ls_goitem-ebelp.
*
*              APPEND ls_goitem TO gt_goitem_mark. "marca para no volver a recuperar
*            ENDIF.
*
*            CALL FUNCTION 'ZMM_MIGO_PUT_DATA'
*              EXPORTING
*                i_goitem   = ls_goitem
*                i_no_input = gv_no_input.
*
*            MODIFY gt_goitem FROM ls_goitem TRANSPORTING zntgew zgewei
*              WHERE global_counter EQ i_line_id.
*          ENDIF.
*        ENDIF.
*      ENDIF.

      SELECT SINGLE a~herkl, b~lifnr, c~mwskz
        FROM eipo AS a
       INNER JOIN ekko AS b
          ON a~exnum EQ b~exnum
       INNER JOIN ekpo AS c
          ON b~ebeln EQ c~ebeln
       WHERE c~ebeln EQ @ls_goitem-ebeln
         AND a~expos EQ @ls_goitem-ebelp
        INTO (@DATA(lv_herkl), @DATA(lv_lifnr), @DATA(lv_mwskz)).

      IF ( sy-subrc = 0 AND lv_herkl IS NOT INITIAL ).

        "Creo objeto INTRASTAT MANAGER
        DATA(lo_intrastat_manager) = NEW zcl_intrastat_manager( i_lifnr = lv_lifnr ).

        lo_intrastat_manager->get_country(
*          EXPORTING
*            i_lifnr =     " Número de cuenta del proveedor o acreedor
          IMPORTING
            e_land1 = DATA(lv_land1)    " Clave de país
            e_xegld = DATA(lv_xegld)    " Indicador: ¿ Miembro de la CEE ?
        ).

        "Comprobamos si es UE y no es nacional
        IF ( lv_land1 <> 'ES' AND lv_xegld IS NOT INITIAL ).

          "obtengo si IVA es de servicio
          lo_intrastat_manager->check_if_iva_is_service(
            EXPORTING
              i_mwskz   = lv_mwskz    " Indicador IVA
            IMPORTING
              e_service = DATA(lv_check)    " 'X' True, ' ' False
          ).

          "si NO es IVA de servicio
          IF ( lv_check IS INITIAL ).

            e_cprog = 'SAPLZGFMM_MIGO'.
            e_dynnr = '0001'.
            e_heading = 'Peso'.

            READ TABLE gt_goitem_mark WITH KEY global_counter = i_line_id TRANSPORTING NO FIELDS. " ya se ha recuperado antes?

            IF sy-subrc NE 0.
              SELECT SINGLE ntgew gewei FROM ekpo
                INTO ( ls_goitem-zntgew, ls_goitem-zgewei )
                WHERE ebeln EQ ls_goitem-ebeln
                  AND ebelp EQ ls_goitem-ebelp.

              APPEND ls_goitem TO gt_goitem_mark. "marca para no volver a recuperar
            ENDIF.

            CALL FUNCTION 'ZMM_MIGO_PUT_DATA'
              EXPORTING
                i_goitem   = ls_goitem
                i_no_input = gv_no_input.

            MODIFY gt_goitem FROM ls_goitem TRANSPORTING zntgew zgewei
              WHERE global_counter EQ i_line_id.

          ENDIF.

        ENDIF.

      ENDIF.

*<-- FIN FCARDONA 18.10.2021 67171 - Informe INTRASTAT SAP.

    ENDIF.
* fin - cvivo - 20/12/2018 52379 Peso neto en MIGO
  ENDMETHOD.
  METHOD if_ex_mb_migo_badi~pbo_header.

    IF gv_dynpro = 'X'.
      IF gv_no_input = 'X'.
        e_cprog   = 'SAPLZZMIGO'.
        e_dynnr   = '9998'.
        e_heading = 'Peso camión'.
      ELSE.
        e_cprog   = 'SAPLZZMIGO'.
        e_dynnr   = '9999'.
        e_heading = 'Peso camión'.
      ENDIF.
      CALL FUNCTION 'ZMIGO_ESCRIBIR'
        EXPORTING
          i_ztmm0001 = gs_ztmm0001.
    ELSE.
      CLEAR e_cprog.
      CLEAR e_dynnr.
      CLEAR e_heading.
    ENDIF.

  ENDMETHOD.
  METHOD if_ex_mb_migo_badi~post_document.
    DATA: bapimepoitem    TYPE bapimepoitem,
          t_bapimepoitem  TYPE TABLE OF bapimepoitem,
          bapimepoitemx   TYPE bapimepoitemx,
          t_bapimepoitemx TYPE TABLE OF bapimepoitemx.
    DATA: ls_display_profile TYPE bal_s_prof,
          l_exit_cmd         TYPE bal_s_excm,
          l_memoria(30).

    IF gv_dynpro = 'X'.
      gs_ztmm0001-mblnr = is_mkpf-mblnr.
      gs_ztmm0001-mjahr = is_mkpf-mjahr.
*      gs_ztmm0001-peso_ent
*      gs_ztmm0001-peso_sal
*      gs_ztmm0001-gewei
      gs_ztmm0001-aedat  = sy-datum.
      gs_ztmm0001-aezeit = sy-uzeit.
      gs_ztmm0001-aenam  = sy-uname.
      INSERT ztmm0001 FROM gs_ztmm0001.
    ENDIF.

* ini 24.04.2018 - cvivo - 45314 Avisar Calidad en primera EM proveedor-material
    CALL FUNCTION 'ZMM_CORREO_PRIMERA_ENTRADA' IN UPDATE TASK
      EXPORTING
        t_mseg = it_mseg.
* fin 24.04.2018 - cvivo - 45314
* ini - cvivo - 20/12/2018 52379 Peso neto en MIGO
    LOOP AT gt_goitem INTO DATA(ls_goitem) WHERE zntgew IS NOT INITIAL AND take_it IS NOT INITIAL AND bwart EQ '101'.
      REFRESH: t_bapimepoitem, t_bapimepoitemx.
      bapimepoitem-net_weight = ls_goitem-zntgew.
      bapimepoitem-weightunit = ls_goitem-zgewei.
      bapimepoitem-po_item = ls_goitem-ebelp.
      bapimepoitemx-po_item = ls_goitem-ebelp.
      bapimepoitemx-po_itemx = 'X'.
      bapimepoitemx-net_weight = 'X'.
      bapimepoitemx-weightunit = 'X'.

      APPEND: bapimepoitem TO t_bapimepoitem, bapimepoitemx TO t_bapimepoitemx.

      CALL FUNCTION 'BAPI_PO_CHANGE' DESTINATION 'NONE'
        EXPORTING
          purchaseorder = ls_goitem-ebeln
        TABLES
          poitem        = t_bapimepoitem
          poitemx       = t_bapimepoitemx.
    ENDLOOP.
* fin - cvivo - 20/12/2018 52379 Peso neto en MIGO

*--> INI FCC 28.08.2023 - Consumos pulper (0)

    CLEAR: ls_goitem.

    LOOP AT gt_goitem INTO ls_goitem.

      "JCB. 04.11.24. Parámetro RFID
*      CHECK ls_goitem-werks = '3000'.
      SELECT SINGLE valor
        INTO @DATA(vl_centro_rfid)
        FROM zparametros
        WHERE clave = 'ZRFIDPARAM' AND
              campo = @ls_goitem-werks.
      CHECK sy-subrc = 0 AND vl_centro_rfid = 'X'.

      CHECK ls_goitem-charg = ls_goitem-umcha.
      CASE ls_goitem-bwart.

        WHEN '311'.

          zclpp_consumo_recetas_mp=>generar_consumo_receta_migo311(
            EXPORTING
              i_werks = ls_goitem-werks    " Centro
              i_lgort = ls_goitem-lgort    " Almacén
              i_matnr = ls_goitem-matnr    " Número de material
              i_charg = ls_goitem-charg    " Número de lote
              i_menge = ls_goitem-menge    " Cantidad
              i_meins = ls_goitem-meins    " Unidad de medida base
          ).

        WHEN OTHERS.
      ENDCASE.


    ENDLOOP.

*<-- FIN FCC 28.08.2023 - Consumos pulper (0)


* ini - cvivo - 57837 Warning si nota de entrega ya contabilizada
    IF gv_force IS NOT INITIAL.
      CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
        IMPORTING
          e_s_display_profile = ls_display_profile.

      ls_display_profile-disvariant-report = 'SAPLMIGO'.
      ls_display_profile-disvariant-handle ='LOG'.

      CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
        EXPORTING
          i_s_display_profile = ls_display_profile
        IMPORTING
          e_s_exit_command    = l_exit_cmd
        EXCEPTIONS
          OTHERS              = 4.

      IF l_exit_cmd-continue NE 'X'.
*      g_no_input = 'X'.
        LEAVE TO SCREEN 1.
      ENDIF.
    ENDIF.

    CLEAR gv_force.
* fin - cvivo - 57837


** CGIJON - 22.02.23 - FUNCIÓN PARA EL PROYECTO DE INTEGRACIÓN CLASE10
** Con esta función mandaremos la información necesario por clase10 para poder
** generar las etiquetas de las balas
*    DATA:  e_datos TYPE zmt_etiquetas_clase10.
*    CALL FUNCTION 'ZCLASE10_ETIQUETAS_BALA'
*      EXPORTING
*        it_mseg = it_mseg
*        is_mkpf = is_mkpf
*      IMPORTING
*        e_datos = e_datos.

  ENDMETHOD.
  method IF_EX_MB_MIGO_BADI~PROPOSE_SERIALNUMBERS.
  endmethod.
  method IF_EX_MB_MIGO_BADI~PUBLISH_MATERIAL_ITEM.
  endmethod.
  METHOD if_ex_mb_migo_badi~reset.
    REFRESH: gt_goitem, gt_goitem_mark.
  ENDMETHOD.
  METHOD if_ex_mb_migo_badi~status_and_header.

    gv_mblnr = is_gohead-mblnr.
    gv_mjahr = is_gohead-mjahr.

    IF gv_mblnr IS NOT INITIAL.
      CLEAR gs_ztmm0001.
      SELECT SINGLE *
        INTO gs_ztmm0001
        FROM ztmm0001
        WHERE mblnr = gv_mblnr
        AND   mjahr = gv_mjahr.
    ELSE.
      IF i_lines_in_model EQ 0 AND
        is_gohead-ekorg   IS INITIAL.
        CLEAR gs_ztmm0001.
        gs_ztmm0001-gewei = 'KG'.
      ENDIF.
    ENDIF.

  ENDMETHOD.
