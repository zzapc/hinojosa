
class ZCL_IM_I_CHARACTER_INPUT definition
  public
  final
  create public .

public section.

  interfaces IF_EX_CACL_CHARACTER_INPUT .
protected section.
private section.
endclass. "ZCL_IM_I_CHARACTER_INPUT definition
class ZCL_IM_I_CHARACTER_INPUT implementation.
  METHOD if_ex_cacl_character_input~set_character_input.

**-  Si es ZPLP o ZPMP y no tiene asignada clase para la categoría 023 (lote)
**   >>>> Error “Debe asignar la clase de lote”
**-  Si es ZPLP y la clase de lote de cat. 023 no es Z_ZPLP
**   >>> Error “Tipo de material ZPLP clase de lote debe ser Z_ZPLP”
**-  Si es ZPMP y la clase de lote de cat. 023 no es Z_ZPMP
**   >>> Error “Tipo de material ZPMP clase de lote debe ser Z_ZPMP”
*    CONSTANTS: lc_x type c1 value 'X'.
*
*    DATA: lv_RMMG1 TYPE string,
*          lv_mtart type mtart.
*
*    FIELD-SYMBOLS  <any_RMMG1> type RMMG1.
*
*    lv_RMMG1 = '(SAPLMGMM)RMMG1'.
*
*    ASSIGN (lv_RMMG1) TO <any_RMMG1>.
*
*    check sy-subrc = 0.
*
*    lv_mtart = <ANY_RMMG1>-MTART.
*
*    IF lv_mtart = 'ZPLP' OR lv_mtart = 'ZPMP'.
*      break developer.
*
*      IF is_como-klart IS INITIAL.
**          Debe asignar la clase de lot
*      ELSE.
*        if lv_mtart = 'ZPLP'.
*          IF is_como-class <> 'Z_ZPLP'.
**           Tipo de material ZPLP clase de lote debe ser Z_ZPLP
**            clear: is_como-class.
**            MESSAGE I126(zmm).
**e_no_input_character = lc_x.
**e_property_was_set = lc_x.
*
*          ENDIF.
*        else.
*          IF is_como-class <> 'Z_ZPMP'.
**           Tipo de material ZPMP clase de lote debe ser Z_ZPMP
*          ENDIF.
*        endif.
*      ENDIF.
*    ENDIF.
  ENDMETHOD.
endclass. "ZCL_IM_I_CHARACTER_INPUT definition
endclass. "ZCL_IM_I_CHARACTER_INPUT implementation
