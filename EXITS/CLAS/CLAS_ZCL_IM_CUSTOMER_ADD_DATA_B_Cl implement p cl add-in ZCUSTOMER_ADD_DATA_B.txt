
class ZCL_IM_CUSTOMER_ADD_DATA_B definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_CUSTOMER_ADD_DATA_BI .

  class-data G_KUNNR type KUNNR .
  class-data G_STCD1 type STCD1 .
  class-data GT_DATA type EDIDD_TT .
protected section.
private section.
endclass. "ZCL_IM_CUSTOMER_ADD_DATA_B definition
class ZCL_IM_CUSTOMER_ADD_DATA_B implementation.
  method IF_EX_CUSTOMER_ADD_DATA_BI~CHECK_DATA_ROW.

  endmethod.
  METHOD if_ex_customer_add_data_bi~fill_ale_segments_own_data.

    DATA ls_e1kna1m  TYPE e1kna1m.
    DATA ls_e1knvvm  TYPE e1knvvm.
    DATA ls_struc_sf TYPE ze1sd01.
    DATA ls_struc    TYPE ze1sd01_1.
    DATA ls_ze1sd02  TYPE ze1sd02.
    DATA ls_ze1sd03  TYPE ze1sd03.
    DATA ls_ze1sd04  TYPE ze1sd04.
    DATA ls_ze1sd05  TYPE ze1sd05.
    DATA ls_ze1adrc  TYPE ze1adrc.
    DATA(l_idx) = 1.

    " Inicio BG 24.07.2023
    DATA ls_idoc_data TYPE edidd.
    FIELD-SYMBOLS <fs_idoc_data>  TYPE edidd.
    " Fin BG 24.07.2023

    "CVP 04.07.2022 09:40 crear dentro de la ampliacion ZSSDDEBMAS07
    "segmentos Z para pasar datos de sales force y email del cliente( en interf ESKO + SALESFORCE)
    IF i_message_type CS 'ZDEBMAS'.
      IF i_segment_name = 'E1KNA1M'.
        READ TABLE t_idoc_data INTO ls_idoc_data WITH KEY segnam = 'E1KNA1M'.
        IF sy-subrc = 0.
          ls_e1kna1m = ls_idoc_data-sdata.
          zcl_im_customer_add_data_b=>g_kunnr = ls_e1kna1m-kunnr.
        ENDIF.

        IF i_message_type CS 'ZDEBMAS_E'.  " Para Interfaz con ESKO
          SELECT smtp_addr, consnumber, flgdefault, flg_nouse, home_flag
            FROM kna1 AS k
            INNER JOIN adr6 AS a ON a~addrnumber = k~adrnr
            WHERE k~kunnr = @zcl_im_customer_add_data_b=>g_kunnr
            INTO TABLE @DATA(lt_emails).
          IF lines( lt_emails ) <> 0.
            e_cimtype = 'ZSDDEBMAS07'.
            CLEAR ls_idoc_data.
            ls_idoc_data-mandt = sy-mandt.
            ls_idoc_data-segnam  = 'ZE1SD01'.
            ADD 1 TO l_idx.
            INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
          ENDIF.
          LOOP AT lt_emails INTO DATA(ls_email).
            ADD 1 TO l_idx.
            CLEAR ls_idoc_data.
            ls_idoc_data-mandt = sy-mandt.
            ls_idoc_data-segnam  = 'ZE1SD01_' && sy-tabix.
            CLEAR ls_struc.
            ls_struc-zzsmtp_addr = ls_email-smtp_addr.
            ls_struc-zzconsnumber = ls_email-consnumber.
            ls_struc-zzflgdefault = ls_email-flgdefault.
            ls_struc-zzflg_nouse = ls_email-flg_nouse.
            ls_struc-zzhome_flag = ls_email-home_flag.
            MOVE ls_struc TO ls_idoc_data-sdata.
            INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
          ENDLOOP.

          " Ini BG 24.07.2023 - llenar campos BRSCH y KUKLA a este segmento
          READ TABLE t_idoc_data ASSIGNING <fs_idoc_data> WITH KEY segnam = 'E1KNA1M'.
          IF sy-subrc EQ 0.
            ls_e1kna1m = <fs_idoc_data>-sdata.

            SELECT SINGLE brsch, kukla INTO @DATA(ls_aux_kna1)
               FROM kna1
               WHERE kunnr = @zcl_im_customer_add_data_b=>g_kunnr.

            IF ls_aux_kna1-brsch IS NOT INITIAL.
              DATA(lv_modif) = abap_true.
              ls_e1kna1m-brsch = ls_aux_kna1-brsch.
            ENDIF.
            IF ls_aux_kna1-kukla IS NOT INITIAL.
              lv_modif = abap_true.
              ls_e1kna1m-kukla = ls_aux_kna1-kukla.
            ENDIF.
            IF lv_modif = abap_true.
              <fs_idoc_data>-sdata = ls_e1kna1m.
            ENDIF.
            CLEAR lv_modif.
            " Fin BG 24.07.2023 - llenar campos a este segmento
          ENDIF.
        ENDIF.

        "CVP 11.07.2022 14:51  pasar cliente con interlocutor DM(WE) en la direccion de entrega
        CASE i_message_type.
          WHEN 'ZDEBMAS_E01' OR 'ZDEBMAS_E02' OR 'ZDEBMAS_E03' OR 'ZDEBMAS_E04' OR
               'ZDEBMAS_P01' OR 'ZDEBMAS_P02' OR 'ZDEBMAS_P03' OR 'ZDEBMAS_P04' OR 'ZDEBMAS_P05'.
            SELECT SINGLE MAX( v~parza ) AS cont,v~kunnr AS cliente,a~name1 AS nombre,v~vkorg,v~vtweg,v~spart,v~parvw
            FROM knvp AS v
            INNER JOIN kna1 AS a ON a~kunnr = v~kunnr
            INTO CORRESPONDING FIELDS OF @ls_ze1sd02
            WHERE v~kunn2 = @zcl_im_customer_add_data_b=>g_kunnr
            AND v~kunnr <> @zcl_im_customer_add_data_b=>g_kunnr
            AND v~parvw = 'WE'
            GROUP BY v~kunnr,a~name1,v~vkorg,v~vtweg,v~spart,v~parvw.
            IF sy-subrc  = 0.
              e_cimtype = 'ZSDDEBMAS07'.
              CLEAR ls_idoc_data.
              ls_idoc_data-mandt = sy-mandt.
              ls_idoc_data-segnam  = 'ZE1SD02'.
              MOVE ls_ze1sd02 TO ls_idoc_data-sdata.
              ADD 1 TO l_idx.
              INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
            ENDIF.
        ENDCASE.

        SELECT SINGLE k~land1, t1~landx, k~regio, t2~bezei INTO @DATA(ls_aux)
        FROM kna1 AS k
        LEFT JOIN t005t AS t1 ON t1~land1 = k~land1 AND t1~spras = @sy-langu
        LEFT JOIN t005u AS t2 ON t2~land1 = k~land1 AND t2~bland = k~regio AND t2~spras = @sy-langu
        WHERE kunnr = @zcl_im_customer_add_data_b=>g_kunnr.
        IF sy-subrc = 0.
          e_cimtype = 'ZSDDEBMAS07'.
          CLEAR ls_idoc_data.
          ls_idoc_data-mandt    = sy-mandt.
          ls_idoc_data-segnam   = 'ZE1SD03'.
          ls_ze1sd03-pais       = ls_aux-land1.
          ls_ze1sd03-pais_des   = ls_aux-landx.
          ls_ze1sd03-region     = ls_aux-regio.
          ls_ze1sd03-region_des = ls_aux-bezei.

          " Ini BG 06.07.2023 - Agregar sociedad sino tiene datos de Org.ventas ESKO
          IF i_message_type = 'ZDEBMAS_E01' OR i_message_type = 'ZDEBMAS_E03'.

            SELECT DISTINCT k~ktokd, v~vkorg INTO TABLE @DATA(lt_ov_vkorg)
              FROM kna1 AS k
              INNER JOIN knvv AS v ON v~kunnr = k~kunnr
              INNER JOIN zssdt001 AS z ON z~vkorg = v~vkorg AND z~vtweg = v~vtweg
                                                            AND z~spart = v~spart AND z~uso = '2' " ESKO
              WHERE k~kunnr = @zcl_im_customer_add_data_b=>g_kunnr AND ktokd IN ('ZPOT','ZCLI','ZDES','ZGRU').
            IF sy-subrc EQ 0. "si tiene org. ventas asociada, se concatena
              SORT lt_ov_vkorg.
              DELETE ADJACENT DUPLICATES FROM lt_ov_vkorg.
              LOOP AT lt_ov_vkorg INTO DATA(ls_ov_vkorg).
                IF ls_ze1sd03-zzvkorg IS INITIAL.
                  ls_ze1sd03-zzvkorg = ls_ov_vkorg-vkorg.
                ELSE.
                  ls_ze1sd03-zzvkorg = ls_ze1sd03-zzvkorg && |','| &&   ls_ov_vkorg-vkorg.
                  CONDENSE ls_ze1sd03-zzvkorg NO-GAPS.
                ENDIF.
              ENDLOOP.
            ENDIF.

            " Se valida por sociedad parametrizada
            SELECT  a~bukrs,  a~uso, b~kunnr INTO TABLE @DATA(lt_ov_bukrs)
              FROM zssdt002 AS a INNER JOIN knb1 AS b ON a~bukrs EQ b~bukrs
              WHERE b~kunnr = @zcl_im_customer_add_data_b=>g_kunnr
                AND a~uso = '2'.
            IF sy-subrc EQ 0.
              SORT lt_ov_bukrs.
              DELETE ADJACENT DUPLICATES FROM lt_ov_bukrs.

              LOOP AT lt_ov_bukrs INTO DATA(ls_ov_bukrs).
                IF ls_ze1sd03-zzbukrs IS INITIAL.
                  ls_ze1sd03-zzbukrs = ls_ov_bukrs-bukrs.
                ELSE.
                  ls_ze1sd03-zzbukrs = ls_ze1sd03-zzbukrs && |','| &&   ls_ov_bukrs-bukrs.
                  CONDENSE ls_ze1sd03-zzbukrs NO-GAPS.
                ENDIF.
              ENDLOOP.
            ENDIF.
          ENDIF.

          " BG 24.07.2023 - Se agrega texto del campo brsch
          IF i_message_type CS 'ZDEBMAS_E'.
            SELECT SINGLE brtxt INTO @ls_ze1sd03-zzbrsch_text
              FROM kna1 AS a INNER JOIN t016t AS b ON a~brsch EQ b~brsch
              WHERE a~kunnr = @zcl_im_customer_add_data_b=>g_kunnr
                AND a~spras = @sy-langu.
          ENDIF.
          " Fin BG 06.07.2023

          MOVE ls_ze1sd03 TO ls_idoc_data-sdata.
          ADD 1 TO l_idx.
          INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
        ENDIF.

        "CVP 08.09.2022 10:44 Añadir segmento Sociedad
        CASE i_message_type .
          WHEN 'ZDEBMAS_P01' OR 'ZDEBMAS_P03'.
            SELECT SINGLE a~date_from,a~date_to,a~name1,a~city1,a~post_code1,a~street,a~country,
                          a~langu,a~region,a~sort1,a~time_zone,ad~smtp_addr,t5~intca,t2~laiso INTO @DATA(ls_adrc)
            FROM adrc AS a
            INNER JOIN kna1 AS k ON k~adrnr = a~addrnumber
            INNER JOIN adr6 AS ad ON ad~addrnumber = a~addrnumber AND ad~flgdefault = @abap_true
            INNER JOIN t005 AS t5 ON t5~land1 = a~country
            INNER JOIN t002 AS t2 ON t2~spras = a~langu
            WHERE k~kunnr = @zcl_im_customer_add_data_b=>g_kunnr .
            IF sy-subrc = 0.
              CLEAR:ls_idoc_data,ls_ze1adrc.
              e_cimtype = 'ZSDDEBMAS07'.
              MOVE-CORRESPONDING ls_adrc TO ls_ze1adrc.
              ls_ze1adrc-from_date = ls_adrc-date_from.
              ls_ze1adrc-to_date = ls_adrc-date_to.
              ls_ze1adrc-countryiso = ls_adrc-intca.
              ls_ze1adrc-langu_iso = ls_adrc-laiso.
              ls_ze1adrc-e_mail = ls_adrc-smtp_addr.
              MOVE ls_ze1adrc TO ls_idoc_data-sdata.
              ls_idoc_data-mandt = sy-mandt.
              ls_idoc_data-segnam = 'ZE1ADRC'.
              ADD 1 TO l_idx.
              INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
            ENDIF.
        ENDCASE.

      ELSEIF i_segment_name = 'E1KNVVM'.

        IF i_message_type CS 'ZDEBMAS_P'. "SALESFORCE
          e_cimtype = 'ZSDDEBMAS07'.
          READ TABLE t_idoc_data INTO ls_idoc_data WITH KEY segnam = 'E1KNVVM'.
          IF sy-subrc = 0.
            ls_e1knvvm = ls_idoc_data-sdata.
          ENDIF.
          READ TABLE t_idoc_data  WITH KEY segnam = 'ZE1SD01' TRANSPORTING NO FIELDS..
          IF sy-subrc <> 0.
            "CVP   para el mensaje P02 tomar los datos del cliente no del WE
            IF i_message_type = 'ZDEBMAS_P02'.
              SELECT SINGLE MAX( v~parza ) AS cont,v~kunnr INTO @DATA(ls_knvp_aux)
              FROM knvp AS v
              INNER JOIN kna1 AS a ON a~kunnr = v~kunnr
              WHERE v~kunn2 = @zcl_im_customer_add_data_b=>g_kunnr
              AND v~kunnr <> @zcl_im_customer_add_data_b=>g_kunnr
              AND v~parvw = 'WE'
              GROUP BY v~kunnr,a~name1,v~vkorg,v~vtweg,v~spart,v~parvw.
              IF sy-subrc = 0.
                SELECT SINGLE zzbrsch zzkatr9 zzkatr10 zzidsalesforce zzidsalspot
                FROM knvv INTO ls_struc_sf
                WHERE kunnr = ls_knvp_aux-kunnr
                AND vkorg = ls_e1knvvm-vkorg
                AND vtweg = ls_e1knvvm-vtweg
                AND spart = ls_e1knvvm-spart.
              ENDIF.
            ELSE.
              SELECT SINGLE zzbrsch zzkatr9 zzkatr10 zzidsalesforce zzidsalspot
              FROM knvv INTO ls_struc_sf
              WHERE kunnr = zcl_im_customer_add_data_b=>g_kunnr
              AND vkorg = ls_e1knvvm-vkorg
              AND vtweg = ls_e1knvvm-vtweg
              AND spart = ls_e1knvvm-spart.
            ENDIF.

            CLEAR ls_idoc_data.
            ls_idoc_data-mandt = sy-mandt.
            ls_idoc_data-segnam  = 'ZE1SD01'.
            MOVE ls_struc_sf TO ls_idoc_data-sdata.
            ADD 1 TO l_idx.
            INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.

            SELECT smtp_addr,consnumber,flgdefault,flg_nouse,home_flag
            FROM kna1 AS k
            INNER JOIN adr6 AS a ON a~addrnumber = k~adrnr
            WHERE k~kunnr = @zcl_im_customer_add_data_b=>g_kunnr"ls_e1kna1m-kunnr
            INTO TABLE @lt_emails.
            LOOP AT lt_emails INTO ls_email.
              ADD 1 TO l_idx.
              CLEAR ls_idoc_data.
              ls_idoc_data-mandt = sy-mandt.
              ls_idoc_data-segnam  = 'ZE1SD01_' && sy-tabix.
              CLEAR ls_struc.
              ls_struc-zzsmtp_addr = ls_email-smtp_addr.
              ls_struc-zzconsnumber = ls_email-consnumber.
              ls_struc-zzflgdefault = ls_email-flgdefault.
              ls_struc-zzflg_nouse = ls_email-flg_nouse.
              ls_struc-zzhome_flag = ls_email-home_flag.
              MOVE ls_struc TO ls_idoc_data-sdata.
              INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
            ENDLOOP.
          ENDIF.

*          "CVP 08.09.2022 10:44 Añadir segmento Sociedad
          READ TABLE t_idoc_data WITH KEY segnam = 'ZE1SD04' TRANSPORTING NO FIELDS.
          IF sy-subrc <> 0.
            SELECT SINGLE bukrs FROM tvko WHERE vkorg = @ls_e1knvvm-vkorg INTO @DATA(l_bukrs).
            IF sy-subrc = 0.
              e_cimtype = 'ZSDDEBMAS07'.
              CLEAR ls_idoc_data.
              ls_idoc_data-mandt = sy-mandt.
              ls_idoc_data-segnam  = 'ZE1SD04'.
              ls_ze1sd04-sociedad = l_bukrs.
              MOVE ls_ze1sd04 TO ls_idoc_data-sdata.
              READ TABLE t_idoc_data  WITH KEY segnam = 'ZE1SD03' TRANSPORTING NO FIELDS.
              IF sy-subrc = 0.
                l_idx =  sy-tabix + 1.
              ELSE.
                READ TABLE t_idoc_data WITH KEY segnam = 'ZE1SD02' TRANSPORTING NO FIELDS.
                IF sy-subrc = 0.
                  l_idx =  sy-tabix + 1.
                ELSE.
                  ADD 1 TO l_idx.
                ENDIF.
              ENDIF.
              INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
            ENDIF.
          ENDIF.
        ENDIF.

        " Inicio BG 24.07.2023 - Mapeo campo KLABC por org.ventas
        IF i_message_type CS 'ZDEBMAS_E'.
          LOOP AT t_idoc_data ASSIGNING <fs_idoc_data> WHERE segnam = 'E1KNVVM'.
            ls_e1knvvm = <fs_idoc_data>-sdata.
            SELECT SINGLE klabc INTO @DATA(lv_klabc)
              FROM knvv
              WHERE kunnr = @zcl_im_customer_add_data_b=>g_kunnr
                AND vkorg = @ls_e1knvvm-vkorg
                AND vtweg = @ls_e1knvvm-vtweg
                AND spart = @ls_e1knvvm-spart.
            IF lv_klabc IS NOT INITIAL.
              ls_e1knvvm-klabc = lv_klabc.
              <fs_idoc_data>-sdata = ls_e1knvvm.
              CLEAR: lv_klabc.
            ENDIF.
          ENDLOOP.
        ENDIF.
        " Fin BG 24.07.2023 - Mapeo campo KLABC por org.ventas

        "CVP 12.09.2022 10:19  Validar que sólo se envia la OV ampliada
        CASE i_message_type.
          WHEN 'ZDEBMAS_E04'.
            DATA(l_tipo) = 2.
          WHEN 'ZDEBMAS_P03' OR 'ZDEBMAS_P04'.
            l_tipo = 1.
        ENDCASE.
        IF l_tipo IS NOT INITIAL.
          LOOP AT t_idoc_data INTO ls_idoc_data WHERE segnam = 'E1KNVVM'.
            DATA(tabix) = sy-tabix.
            SELECT SINGLE COUNT(*) FROM zssdt001
            WHERE uso = l_tipo
            AND vkorg = ls_idoc_data-sdata+3(4)
            AND vtweg = ls_idoc_data-sdata+7(2)
            AND spart = ls_idoc_data-sdata+9(2).
            CASE i_message_type.
              WHEN 'ZDEBMAS_E04' OR 'ZDEBMAS_P04'.
                IF sy-subrc = 0.
                  DELETE t_idoc_data INDEX tabix.
                ENDIF.
              WHEN 'ZDEBMAS_P03'.
                IF sy-subrc <> 0.
                  DELETE t_idoc_data INDEX tabix.
                ENDIF.
            ENDCASE.
          ENDLOOP.
          CLEAR l_tipo.
        ENDIF.

        "CVP 29.09.22 11:03 segmento nuevo ZE1SD05
        IF i_message_type = 'ZDEBMAS_P02'.
          LOOP AT t_idoc_data INTO ls_idoc_data WHERE segnam = 'E1KNVVM'.
            l_idx = sy-tabix + 1.
            SELECT SINGLE zzcodigo_chep FROM knvv INTO @DATA(l_zzcodigo_chep)
            WHERE kunnr = @zcl_im_customer_add_data_b=>g_kunnr
            AND vkorg = @ls_idoc_data-sdata+3(4)
            AND vtweg = @ls_idoc_data-sdata+7(2)
            AND spart = @ls_idoc_data-sdata+9(2).
            e_cimtype = 'ZSDDEBMAS07'.
            CLEAR ls_idoc_data.
            ls_idoc_data-mandt = sy-mandt.
            ls_idoc_data-segnam  = 'ZE1SD05'.
            ls_ze1sd05-zzcodigo_chep = l_zzcodigo_chep.
            MOVE ls_ze1sd05 TO ls_idoc_data-sdata.
            INSERT ls_idoc_data INTO t_idoc_data INDEX l_idx.
          ENDLOOP.
        ENDIF.

      ELSEIF i_segment_name = 'E1KNVPM'.
        LOOP AT t_idoc_data INTO ls_idoc_data.
          DATA(l_idx1) = sy-tabix.
          IF ls_idoc_data-segnam = 'E1KNVPM'.
            DATA(l_idx2) = l_idx1 - 1.
            READ TABLE t_idoc_data INTO DATA(ls_idoc_data_aux) INDEX l_idx2.
            IF ls_idoc_data_aux-segnam <> 'E1KNVVM' AND ls_idoc_data_aux-segnam <> 'E1KNVPM'.
              DELETE t_idoc_data INDEX l_idx1.
            ENDIF.
          ENDIF.
        ENDLOOP.

      ELSEIF i_segment_name = 'E1KNB1M'.
        READ TABLE t_idoc_data INTO ls_idoc_data WITH KEY segnam = 'E1KNVVM'.
        IF sy-subrc = 0.
          DATA(l_vkorg) = ls_idoc_data-sdata+3(4).
          IF sy-subrc = 0.
            LOOP AT t_idoc_data INTO ls_idoc_data WHERE segnam = 'E1KNB1M'.
              tabix = sy-tabix.
              SELECT SINGLE COUNT(*) FROM tvko WHERE vkorg = l_vkorg AND bukrs = ls_idoc_data-sdata+3(4).
              IF sy-subrc <> 0.
                DELETE t_idoc_data INDEX tabix.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*    zcl_im_customer_add_data_b=>gt_data[] = t_idoc_data[].
    CLEAR:lt_emails[],l_idx,ls_struc_sf,ls_struc.

  ENDMETHOD.
  METHOD if_ex_customer_add_data_bi~fill_bi_table_with_own_segment.
    DATA: ls_bi_data TYPE bdifibiwa,
          lv_index   LIKE sy-tabix.
    DATA ls_bkn00 TYPE bkn00.
    DATA ls_bkna1 TYPE bkna1.
* GST - 26/01/2016 - SAT 7000009351 ->
* Eliminar acciones del batch-input del segmento E1KNBKM
* cuando el cliente ya existe en SAP (No se modifican pagos):

    CLEAR: ls_bi_data, lv_index.
    IF i_trans_data-tcode = 'XD02' AND i_trans_data-kunnr IS NOT INITIAL.
      LOOP AT t_bi_data INTO ls_bi_data.
        lv_index = sy-tabix.
        IF ls_bi_data-char1+1(5) = 'BKNBK'.
          DELETE t_bi_data INDEX lv_index.
        ENDIF.
      ENDLOOP.
    ENDIF.
* GST - 26/01/2016 - SAT 7000009351 <-

    "CVP 08.07.2022 11:33  para cliente ZPOT SI PARA ESTE NIF EXISTE ALGUN CLIENTE CREADO Y COPIAR EL NUMERO DE CLIENTE SAP
    IF i_trans_data-kunnr+0(2) = 'SF'.
      LOOP AT t_bi_data INTO ls_bi_data WHERE char1+1(5) = 'BKNA1'.
        ls_bkna1 = ls_bi_data.
        DATA(l_stcd1) = ls_bkna1-stcd1.
      ENDLOOP.
      IF l_stcd1 IS NOT INITIAL.
        SELECT SINGLE kunnr FROM kna1 INTO @DATA(l_kunnr)
        WHERE stcd1 = @l_stcd1.
        IF sy-subrc = 0.
          DELETE t_bi_data WHERE char1+1(5) = 'BKNA1'.
          READ TABLE t_bi_data ASSIGNING FIELD-SYMBOL(<fs_bi_data>) WITH KEY char1+0(1) = '1'."  INDEX 2.
          IF sy-subrc = 0.
            ls_bkn00 = <fs_bi_data>.
            ls_bkn00-kunnr = |{ l_kunnr ALPHA = IN }|.
            MOVE ls_bkn00 TO <fs_bi_data>.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*    "CVP 04.10.2022 12:35 Idoc entrada con campos ZZ knvv
*    DATA(lt_idoc_data) = zcl_im_customer_add_data_b=>gt_data[].
*    IF sy-uname = 'PARTNERSAP'.
*      DATA ls_bknvv TYPE bknvv.
*      LOOP AT t_bi_data INTO ls_bi_data WHERE char1+1(5) = 'BKNA1'.
*        l_stcd1 = ls_bkna1-stcd1.
*      ENDLOOP.
*      IF l_stcd1 IS NOT INITIAL.
*        SELECT SINGLE kunnr FROM kna1 INTO @DATA(l_cliente)
*        WHERE stcd1 = @l_stcd1.
*        SELECT SINGLE * FROM knvv INTO @DATA(ls_knvv) WHERE kunnr = @l_cliente.
*        ls_bknvv-stype = '2'.
*        ls_bknvv-tbnam = 'BKNVV'.
*        MOVE-CORRESPONDING ls_knvv TO ls_bknvv.
*        APPEND ls_bknvv TO t_bi_data.
*      ENDIF.
*    ENDIF.


  ENDMETHOD.
  method IF_EX_CUSTOMER_ADD_DATA_BI~FILL_FT_TABLE_USING_DATA_ROWS.

  endmethod.
  METHOD if_ex_customer_add_data_bi~modify_bi_struct_from_std_seg.

    DATA: ls_e1knb1m TYPE e1knb1m.
    DATA: ls_bknb1 TYPE bknb1.
    DATA: ls_e1kna1m TYPE e1kna1m.
    DATA: ls_bkna1 TYPE bkna1.
    DATA: lv_bankn TYPE bankn.
    DATA: lv_iban    TYPE iban,
          ls_bknbk   TYPE bknbk,
          ls_e1knbkm TYPE e1knbkm.

    DATA: lv_address_number TYPE  ad_addrnum,
          lv_obj_id         TYPE  ad_objkey.

    DATA: bapiad1vl   TYPE TABLE OF  bapiad1vl,
          bapiad1vl_x TYPE TABLE OF  bapiad1vlx.

    DATA: ls_bapiad1vl   TYPE bapiad1vl,
          ls_bapiad1vl_x TYPE bapiad1vlx.

    DATA: lt_return  TYPE bapiret2_t,
          ls_return  TYPE bapiret2,
          ls_ret_com TYPE bapiret2.


**    Modificar calle 2
    IF i_segment_name = 'E1KNA1M'.

      ls_e1kna1m = i_segment_data.

      IF ls_e1kna1m-pfort IS NOT INITIAL.

        CLEAR ls_bapiad1vl.
        ls_bapiad1vl-str_suppl1 = ls_e1kna1m-pfort.
        APPEND ls_bapiad1vl TO bapiad1vl.

        CLEAR ls_bapiad1vl_x.
        ls_bapiad1vl_x-str_suppl1 = 'X'.
        APPEND ls_bapiad1vl_x TO bapiad1vl_x.

        IF ls_e1kna1m-kunnr IS NOT INITIAL.

          lv_obj_id = ls_e1kna1m-kunnr.

          CALL FUNCTION 'BAPI_ADDRESSORG_CHANGE'
            EXPORTING
              obj_type                    = 'KNA1'
              obj_id                      = lv_obj_id
*             OBJ_ID_EXT                  = ' '
*             CONTEXT                     = 1
*             ACCEPT_ERROR                = ' '
              save_address                = 'X'
              iv_check_address            = 'X'
              iv_time_dependent_comm_data = ' '
            IMPORTING
              address_number              = lv_address_number
            TABLES
              bapiad1vl                   = bapiad1vl
              bapiad1vl_x                 = bapiad1vl_x
              return                      = lt_return.

          CLEAR ls_return.
          READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.

          IF ls_return IS INITIAL.
            REFRESH lt_return.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              IMPORTING
                return = ls_ret_com.
          ENDIF.

        ENDIF.
      ENDIF.

    ENDIF.

*** BUSCAR SI PARA ESTE NIF EXISTE ALGUN CLIENTE CREADO Y COPIAR EL NUMERO DE CLIENTE SAP
*    IF i_segment_name = 'E1KNA1M'.
*      CLEAR: ls_e1kna1m, ls_bknb1.
*      ls_e1kna1m = i_segment_data.
*      ls_bkna1 = e_bi_struct.
*      SELECT SINGLE kunnr INTO ls_bkna1-kunnr
*      FROM kna1
*      WHERE stcd1 = ls_bkna1-stcd1.
*      IF sy-subrc = 0.
*        e_bi_struct = ls_bkna1-kunnr.
*      ENDIF.
*    ENDIF.

* SE FILTRA EL SEGMENTO QUE NECESITAMOS
    IF i_segment_name = 'E1KNB1M'.
      CLEAR: ls_e1knb1m, ls_bknb1.
      ls_e1knb1m = i_segment_data.
      ls_bknb1 = e_bi_struct.

* POR LOS ULTIMOS 5 NUMEROS DE CUENTA BUSCAMOS EL BANCO PROPIO
      IF NOT ls_e1knb1m-hbkid IS INITIAL.
        CLEAR lv_bankn.
        CONCATENATE '%' ls_e1knb1m-hbkid INTO lv_bankn.
        SELECT SINGLE hbkid INTO ls_bknb1-hbkid
        FROM t012k
        WHERE bankn LIKE lv_bankn
        AND bukrs = ls_e1knb1m-bukrs.
        IF sy-subrc = 0.
* BUSCAMOS EL GRUPO DE TESORERIA POR LA VIA DE PAGO Y EL BANCO PROPIO 'DUMMY' QUE PREVALECE
          SELECT SINGLE fdgrv INTO ls_bknb1-fdgrv
          FROM ztfi0001
          WHERE zwels = ls_e1knb1m-zwels
          AND hbkid = 'DUMMY'.
          IF sy-subrc = 0.
            e_bi_struct = ls_bknb1.
          ELSE.
* BUSCAR EL GRUPO DE TESORERIA POR LA VIA DE PAGO Y POR EL BANCO PROPIO
            SELECT SINGLE fdgrv INTO ls_bknb1-fdgrv
            FROM ztfi0001
            WHERE zwels = ls_e1knb1m-zwels
            AND hbkid = ls_bknb1-hbkid.

            e_bi_struct = ls_bknb1.
          ENDIF.
        ENDIF.
      ELSE.
* BUSCAR EL GRUPO DE TESORERIA SIN EL BANCO PROPIO
* BUSCAMOS EL GRUPO DE TESORERIA POR LA VIA DE PAGO Y EL BANCO PROPIO 'DUMMY' QUE PREVALECE
        SELECT SINGLE fdgrv INTO ls_bknb1-fdgrv
        FROM ztfi0001
        WHERE zwels = ls_e1knb1m-zwels
        AND hbkid = 'DUMMY'.
        IF sy-subrc = 0.
          e_bi_struct = ls_bknb1.
        ENDIF .
      ENDIF.
* RECIBO BANCARIO NO DOMICILIADO
*      CLIENTE GIRO SIN CUENTA BANCARIA LE CAMBIAMOS LA VIA DE PAGO DE LA G A LA N

    ENDIF.

* GST - 03/12/2015 ->
* Recuperar campo IBAN:
    IF i_segment_name = 'E1KNBKM'.
      CLEAR:  ls_bknbk, ls_e1knbkm.
      ls_e1knbkm = i_segment_data.
      ls_bknbk = e_bi_struct.
      IF ls_e1knbkm-iban IS NOT INITIAL.
        ls_bknbk-iban = ls_e1knbkm-iban.
      ENDIF.
      e_bi_struct = ls_bknbk.
      SET PARAMETER ID 'ZIB' FIELD ls_e1knbkm-iban.
    ENDIF.
* GST - 03/12/2015 <-




  ENDMETHOD.
  METHOD if_ex_customer_add_data_bi~pass_non_standard_segment.

    "CVP 05.10.2022 12:58  Capturar Campos ZZ del idoc de entrada ,enviarlos a memoria para actualizar la
    DATA:ls_ze1knvvm TYPE ze1knvvm,
         ls_ze1knvpm TYPE ze1knvpm,
         ls_ze1adrc  TYPE ze1adrc.
    TYPES: BEGIN OF ty_data,
             counter   TYPE sy-tabix,
             temp_data TYPE string,
           END OF ty_data.
    DATA:lt_data_knvv TYPE TABLE OF ty_data,
         lt_data_knvp TYPE TABLE OF ty_data,
         lt_data_adrc TYPE TABLE OF ty_data,
         ls_data      TYPE ty_data,
         key          TYPE indx-srtfd.
    "pasar datos de ventas KNVV -> ver exit EXIT_SAPMF02D_001
    IF i_segment_name = 'ZE1KNVVM'.
      ls_ze1knvvm = i_segment_data.
      CLEAR :ls_data,lt_data_knvv[].
      ls_data-counter = 1.
      ls_data-temp_data = ls_ze1knvvm.
      APPEND ls_data TO lt_data_knvv.
      key = 'ZDEBMAS_A01_KNVV'.
      EXPORT lt_data_knvv FROM lt_data_knvv TO DATABASE indx(z1) ID key.
    ENDIF.
    "pasar datos de interlocutores KNVP -> ver exit EXIT_SAPMF02D_001
    IF i_segment_name = 'ZE1KNVPM'.
      key = 'ZDEBMAS_A01_KNVP'.
      IMPORT lt_data_knvp TO lt_data_knvp FROM DATABASE indx(z2) ID key.
      IF lt_data_knvp[] IS NOT INITIAL.
        DATA(l_lines) = lines( lt_data_knvp ).
      ENDIF.
      ls_ze1knvpm = i_segment_data.
      CLEAR :ls_data.
      ls_data-counter = l_lines + 1.
      ls_data-temp_data = ls_ze1knvpm.
      APPEND ls_data TO lt_data_knvp.
      EXPORT lt_data_knvp FROM lt_data_knvp TO DATABASE indx(z2) ID key.
    ENDIF.
    "pasar datos de direccion ADRC/ADR6 -> ver badi(clase)  ZCL_IM_SDCUSTOMER_ADD_DATA metodo IF_EX_CUSTOMER_ADD_DATA~SAVE_DATA
    IF i_segment_name = 'ZE1ADRC'.
      key = 'ZDEBMAS_A01_ADRC'.
      ls_ze1adrc = i_segment_data.
      CLEAR :ls_data.
      ls_data-counter = 1.
      ls_data-temp_data = ls_ze1adrc.
      APPEND ls_data TO lt_data_adrc.
      EXPORT lt_data_adrc FROM lt_data_adrc TO DATABASE indx(z3) ID key.
    ENDIF.

  ENDMETHOD.
  method IF_EX_CUSTOMER_ADD_DATA_BI~PROCESS_ALE_OWN_CHANGE_POINTER.

  endmethod.
endclass. "ZCL_IM_CUSTOMER_ADD_DATA_B implementation
