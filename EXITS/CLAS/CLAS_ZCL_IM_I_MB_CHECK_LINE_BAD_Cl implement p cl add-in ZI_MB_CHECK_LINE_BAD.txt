
class ZCL_IM_I_MB_CHECK_LINE_BAD definition
  public
  final
  create public .

public section.

  interfaces IF_EX_MB_CHECK_LINE_BADI .
protected section.
private section.
endclass. "ZCL_IM_I_MB_CHECK_LINE_BAD definition
class ZCL_IM_I_MB_CHECK_LINE_BAD implementation.
  METHOD if_ex_mb_check_line_badi~check_line.
*----------------------------------------------------
*  IS_MKPF  Importing Type  MKPF
*  IS_MSEG  Importing Type  MSEG
*  IS_VM07M Importing Type  VM07M
*  IS_DM07M Importing Type  DM07M
*----------------------------------------------------

    DATA: t_mchb        TYPE STANDARD TABLE OF mchb,
          wa_mchb       TYPE                   mchb,
          lv_text       TYPE                   c LENGTH 255,
          lv_class      TYPE                   klah-class,
          lv_class_dest TYPE                   klah-class,
          lv_object     TYPE                   ausp-objek.

    DATA: lt_class                TYPE TABLE OF sclass,
          lt_class_dest           TYPE TABLE OF sclass,
          lv_mat_dest             TYPE mchb-matnr,
          lv_charg_dest           TYPE mchb-charg,
          lv_werks_dest           TYPE mchb-werks,
          lv_lgort_dest           TYPE mchb-lgort,
          lt_objectdata           TYPE TABLE OF clobjdat,
          lt_objectdata_dest      TYPE TABLE OF clobjdat,
          lt_return               TYPE                   bapiret2_t,
          lt_allocvaluesnum       TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
          lt_allocvalueschar      TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
          lt_allocvaluescurr      TYPE STANDARD TABLE OF bapi1003_alloc_values_curr,
          lt_allocvaluesnum_dest  TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
          lt_allocvalueschar_dest TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
          lt_allocvaluescurr_dest TYPE STANDARD TABLE OF bapi1003_alloc_values_curr.

    DATA: ls_mchb TYPE mchb.

*   Obtener datos de destino.
    IF is_mseg-umwrk IS NOT INITIAL.
      lv_werks_dest = is_mseg-umwrk.
    ELSE.
      lv_werks_dest = is_mseg-werks.
    ENDIF.

    CHECK lv_werks_dest = '4000'.

    IF is_mseg-ummat IS NOT INITIAL.
      lv_mat_dest = is_mseg-ummat.
    ELSE.
      lv_mat_dest = is_mseg-matnr.
    ENDIF.

    IF is_mseg-umlgo IS NOT INITIAL.
      lv_lgort_dest = is_mseg-umlgo.
    ELSE.
      lv_lgort_dest = is_mseg-lgort.
    ENDIF.

    IF is_mseg-umcha IS NOT INITIAL.
      lv_charg_dest = is_mseg-umcha.
    ELSE.
      lv_charg_dest = is_mseg-charg.
    ENDIF.

*   Validar solo cuando el material es ZPMP, ZPLP, y ZWIP
    DATA: lv_mtart TYPE mtart.

*    SELECT SINGLE mtart
*      INTO @DATA(lv_mtart)
*      FROM mara
*      WHERE matnr = @lv_mat_dest.

    SELECT SINGLE mtart
      INTO lv_mtart
      FROM mara
      WHERE matnr = lv_mat_dest.

    IF sy-subrc = 0 AND ( lv_mtart = 'ZPMP' OR lv_mtart = 'ZPLP' OR lv_mtart = 'ZWIP' ).
*   comprobar material sujeto a lote.

      DATA: lv_xchpf TYPE xchpf.

      SELECT SINGLE xchpf
        INTO lv_xchpf
        FROM marc
        WHERE matnr = lv_mat_dest.

*      SELECT SINGLE xchpf
*        INTO @DATA(lv_xchpf)
*        FROM marc
*        WHERE matnr = @lv_mat_dest.

      IF lv_xchpf <> ''.

*        SELECT COUNT( * )
*        INTO @DATA(lv_cant)
*        FROM mchb
*        WHERE matnr = @lv_mat_dest
*              AND   werks = @lv_werks_dest
*              AND   clabs > 0
*              AND   charg = @lv_charg_dest.

        DATA: lv_cant TYPE sy-tabix.
        SELECT COUNT( * )
               INTO lv_cant
               FROM mchb
               WHERE matnr = lv_mat_dest
                     AND   werks = lv_werks_dest
                     AND   clabs > 0
                     AND   charg = lv_charg_dest.



        IF lv_cant > 1.
          MESSAGE e244(zpp) WITH lv_charg_dest.
          EXIT.
        ENDIF.

        SELECT SINGLE * FROM mchb
          INTO ls_mchb
          WHERE matnr = lv_mat_dest "is_mseg-matnr
          AND   werks = lv_werks_dest
          AND  ( clabs > 0 or cspem > 0 )
          AND   charg = lv_charg_dest.

        IF  ls_mchb IS NOT INITIAL AND
            lv_lgort_dest = '4020' AND
            ( lv_lgort_dest <> is_mseg-lgort OR lv_charg_dest <> is_mseg-charg OR ls_mchb-cspem <> is_mseg-menge ) AND "Almacén diferente, o lote diferente o cantidad diferente (ERROR)
            ls_mchb-cspem IS NOT INITIAL.

          MESSAGE e255(zpp) WITH lv_charg_dest.

        ELSEIF ls_mchb IS NOT INITIAL AND
          ls_mchb-clabs > 0
          " sy-subrc = 0
          AND ( ( is_mseg-umcha = is_mseg-charg AND is_mseg-ummat = is_mseg-matnr  AND is_mseg-menge <> ls_mchb-clabs ) "Traslado de un lote al mismo en otro almacén
            OR ( is_mseg-umcha IS INITIAL AND ls_mchb-lgort <> lv_lgort_dest ) "Entrada o alta en otro almacén distinto al que tiene stock.
            OR ( is_mseg-umcha IS NOT INITIAL AND is_mseg-umcha <> is_mseg-charg AND ls_mchb-lgort <> lv_lgort_dest ) " Traslado a otro lote en otro almacén. is_mseg-umcha <> is_mseg-charg
            OR ( is_mseg-umcha IS NOT INITIAL AND is_mseg-ummat <> is_mseg-matnr AND ls_mchb-lgort <> lv_lgort_dest ) ). " Traslado al mismo lote en otro almacén con material diferente.
*        IF sy-subrc = 0.
          MESSAGE e221(zpp) WITH ls_mchb-charg ls_mchb-matnr ls_mchb-lgort.
*        ENDIF.
        ELSE.

*    ENDIF.
          IF is_mseg-umcha IS NOT INITIAL.
* Clase del lote origen
            CALL FUNCTION 'QMSP_MATERIAL_BATCH_CLASS_READ'
              EXPORTING
                i_matnr                = is_mseg-matnr
                i_charg                = is_mseg-charg
                i_werks                = is_mseg-werks
                i_mara_level           = ' '
              IMPORTING
                e_class                = lv_class
              EXCEPTIONS
                no_class               = 1
                internal_error_classif = 2
                no_change_service      = 3
                OTHERS                 = 4.

* Clase del lote destino
            CALL FUNCTION 'QMSP_MATERIAL_BATCH_CLASS_READ'
              EXPORTING
                i_matnr                = is_mseg-ummat
                i_charg                = is_mseg-umcha
                i_werks                = is_mseg-umwrk
                i_mara_level           = ' '
              IMPORTING
                e_class                = lv_class_dest
              EXCEPTIONS
                no_class               = 1
                internal_error_classif = 2
                no_change_service      = 3
                OTHERS                 = 4.

            IF lv_class_dest <> lv_class.
              MESSAGE e245(zpp) WITH lv_class is_mseg-charg lv_class_dest is_mseg-umcha.
              EXIT.
            ENDIF.

* Características del lote origen
            CLEAR: lv_object.
            REFRESH: lt_class, lt_objectdata.

            lv_object = |{ is_mseg-matnr }{ is_mseg-charg }|.

            CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
              EXPORTING
                objectkey       = lv_object "Material + Lote
                objecttable     = 'MCH1'
                classnum        = lv_class "
                classtype       = '023'
              TABLES
                allocvaluesnum  = lt_allocvaluesnum
                allocvalueschar = lt_allocvalueschar
                allocvaluescurr = lt_allocvaluescurr
                return          = lt_return.

            READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.

            IF sy-subrc <> 0.
* Características del lote destino
              CLEAR: lv_object.
              REFRESH: lt_class_dest, lt_objectdata_dest.

              lv_object = |{ is_mseg-ummat }{ is_mseg-umcha }|.

              CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
                EXPORTING
                  objectkey       = lv_object "Material + Lote
                  objecttable     = 'MCH1'
                  classnum        = lv_class "
                  classtype       = '023'
                TABLES
                  allocvaluesnum  = lt_allocvaluesnum_dest
                  allocvalueschar = lt_allocvalueschar_dest
                  allocvaluescurr = lt_allocvaluescurr_dest
                  return          = lt_return.

              READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.

              IF sy-subrc <> 0.
*             Ordenar antes de comparar
                SORT lt_allocvaluesnum BY charact ASCENDING.
                SORT lt_allocvalueschar BY charact ASCENDING.
                SORT lt_allocvaluescurr BY charact ASCENDING.

                SORT lt_allocvaluesnum_dest BY charact ASCENDING.
                SORT lt_allocvalueschar_dest BY charact ASCENDING.
                SORT lt_allocvaluescurr_dest BY charact ASCENDING.

                IF  lt_allocvaluesnum <> lt_allocvaluesnum_dest OR
                    lt_allocvalueschar <> lt_allocvalueschar_dest OR
                    lt_allocvaluescurr <> lt_allocvaluescurr_dest.

                  CALL FUNCTION 'MICK_MESSAGE_ADD'
                    EXPORTING
                      i_msgty = 'W'
                      i_msgid = 'ZPP'
                      i_msgno = '246'
                      i_msgv1 = is_mseg-charg
                      i_msgv2 = is_mseg-umcha.
                  EXIT.
                ENDIF.
              ENDIF.

            ENDIF.
          ENDIF.

        ENDIF.

      ENDIF.

    ENDIF.

  ENDMETHOD.
endclass. "ZCL_IM_I_MB_CHECK_LINE_BAD definition
endclass. "ZCL_IM_I_MB_CHECK_LINE_BAD implementation
