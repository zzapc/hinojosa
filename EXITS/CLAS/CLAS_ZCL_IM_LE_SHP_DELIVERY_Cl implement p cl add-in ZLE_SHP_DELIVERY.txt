
class ZCL_IM_LE_SHP_DELIVERY definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_LE_SHP_DELIVERY_PROC .
protected section.
private section.
endclass. "ZCL_IM_LE_SHP_DELIVERY definition
class ZCL_IM_LE_SHP_DELIVERY implementation.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHANGE_DELIVERY_HEADER.
  endmethod.
  METHOD if_ex_le_shp_delivery_proc~change_delivery_item.
    DATA lt_items TYPE TABLE OF l03b_delit.
    DATA bobina TYPE lenum.
*
    SELECT SINGLE @abap_true FROM zwm_param
      WHERE tcode EQ @sy-tcode
        AND lgnum EQ @cs_lips-lgnum
        AND lichn_rf NE @space
        INTO @DATA(result).

    IF sy-subrc EQ 0.
      IMPORT p1 = lt_items[] FROM MEMORY ID 'ZLICHN_DELIVERY'.
      FREE MEMORY ID 'ZLICHN_DELIVERY'.

      READ TABLE lt_items INDEX 1 INTO DATA(ls_items).
      IF sy-subrc EQ 0.
        WRITE ls_items-nlenr TO bobina.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = bobina
          IMPORTING
            output = cs_lips-lichn.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHANGE_FCODE_ATTRIBUTES.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHANGE_FIELD_ATTRIBUTES.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHECK_ITEM_DELETION.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~DELIVERY_DELETION.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~DELIVERY_FINAL_CHECK.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~DOCUMENT_NUMBER_PUBLISH.
  endmethod.
  METHOD if_ex_le_shp_delivery_proc~fill_delivery_header.
* ini - cvivo - Proyecto WM mejoras: envío de componentes sin referencia a pedido
    DATA: fields    TYPE sval,
          t_fields  TYPE TABLE OF sval,
          result(1),
          return(1).

    IF cs_likp-lfart EQ 'ZSUB' AND cs_likp-lifnr IS INITIAL.
      SELECT SINGLE lifnr FROM lfa1
        INTO cs_likp-lifnr
        WHERE kunnr EQ cs_likp-kunnr.

      IF sy-subrc NE 0.
        fields-tabname = 'LFA1'.
        fields-fieldname = 'LIFNR'.
        fields-field_obl = 'X'.
        APPEND fields TO t_fields.

        WHILE result IS INITIAL.
          CLEAR: fields, result, return.

          CALL FUNCTION 'POPUP_GET_VALUES'
            EXPORTING
              popup_title = 'Indique proveedor'
            IMPORTING
              returncode  = return
            TABLES
              fields      = t_fields.

          IF return EQ 'A'.
            LEAVE TO TRANSACTION 'VL01NO'.
          ENDIF.

          READ TABLE t_fields INTO fields INDEX 1.

          SELECT SINGLE @abap_true FROM lfa1
            INTO @result
            WHERE lifnr EQ @fields-value.

          IF sy-subrc EQ 0.
            cs_likp-lifnr = fields-value.
          ELSE.
            MESSAGE 'El proveedor no existe' TYPE 'I' DISPLAY LIKE 'E'.
          ENDIF.
        ENDWHILE.
      ENDIF.
    ENDIF.
* fin - cvivo - Proyecto WM mejoras: envío de componentes sin referencia a pedido
  ENDMETHOD.
  METHOD if_ex_le_shp_delivery_proc~fill_delivery_item.
    " cvivo - 11.04.19 - Se elimina porque vuelca el dato pero se queda inconsistente, necesita que se introduzca a mano
** ini - cvivo - Proyecto WM mejoras: envío de componentes sin referencia a pedido
*    IF ( cs_lips-werks IS INITIAL OR cs_lips-lgort IS INITIAL ) AND cs_lips-matnr IS NOT INITIAL.
*      SELECT SINGLE @abap_true FROM tvarvc
*        WHERE name EQ 'ZWM_PROP_ALM_ENTREGA'
*          AND low EQ @is_likp-lfart
*          AND high EQ @is_likp-vstel
*        INTO @DATA(result).
*
*      IF sy-subrc EQ 0 AND cs_lips-charg IS NOT INITIAL. " activada
*        SELECT SINGLE lgort werks FROM mchb
*          INTO (cs_lips-lgort, cs_lips-werks)
*          WHERE matnr EQ cs_lips-matnr
*            AND charg EQ cs_lips-charg
*            AND clabs <> 0.
*      ELSEIF sy-subrc EQ 0.
*        cs_lips-werks = is_likp-vstel.
*        cs_lips-lgort = '1000'.
*        cs_lips-komkz = 'C'. "picking WM
*      ENDIF.
*    ENDIF.
** fin - cvivo - Proyecto WM mejoras: envío de componentes sin referencia a pedido
  ENDMETHOD.
  method IF_EX_LE_SHP_DELIVERY_PROC~INITIALIZE_DELIVERY.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~ITEM_DELETION.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~PUBLISH_DELIVERY_ITEM.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~READ_DELIVERY.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~SAVE_AND_PUBLISH_BEFORE_OUTPUT.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~SAVE_AND_PUBLISH_DOCUMENT.
  endmethod.
  METHOD if_ex_le_shp_delivery_proc~save_document_prepare.
* ini - cvivo - Proyecto WM mejoras: validación almacén si WM
    READ TABLE ct_xlikp INTO DATA(likp) INDEX 1.

    LOOP AT ct_xlips ASSIGNING FIELD-SYMBOL(<lips>).

      "JCB 13.10.22. Creación pedidos consigna. No pasar la validación para este tipo de posición
      CHECK <lips>-pstyv <> 'YE00'.

      SELECT SINGLE @abap_true FROM t320 INNER JOIN tvswz
        ON t320~werks EQ tvswz~werks
        WHERE tvswz~vstel EQ @likp-vstel
        INTO @DATA(result).

      IF sy-subrc EQ 0 AND ( <lips>-werks IS INITIAL OR <lips>-lgort IS INITIAL ).
        "EMP: 14.12.21 GAPSD01 Si esta en la tabla es que no hay que activar la validación

        DATA: l_error TYPE flag.

*--> INI FCARDONA 06.04.2022 - Encapsulado solo para cartoneras

        "Comento para reescribir.
*        l_error = 'X'.

        "TODO 06.04.2022 --> Afinar el encapsulado para cada solución.
        IF ( <lips>-werks IS NOT INITIAL AND <lips>-werks(1) NE '2' ).
          l_error = abap_false.
        ELSE.
          l_error = abap_true.
*         -----------------------------------------------------------------*
*         add jtm 23.09.2022 tenemos una casuistica donde se podrá expedir
*         materiales servicio desde cartoneras a papelera donde el almacén no es obligado
          DATA: ex_object_cx_root TYPE REF TO cx_root,
                ex_text           TYPE string,
                ex_text_long      TYPE string.
          DATA: se_puede_exp_sin_almacen TYPE flag.
          TRY.
              CALL FUNCTION 'ZSWM_SE_PUEDE_EXPEDIR_SIN_ALMA' "ALMA = ALMACEN
                EXPORTING
                  r_likp            = likp
                  r_lips            = <lips>
                IMPORTING
                  sin_almacen_puede = se_puede_exp_sin_almacen.

            CATCH cx_root INTO ex_object_cx_root.
              ex_text = ex_object_cx_root->get_text( ).
              ex_text_long = ex_object_cx_root->get_longtext( ).
          ENDTRY.
          IF se_puede_exp_sin_almacen EQ abap_true.
            CLEAR l_error.
          ENDIF.
*         fin de add jtm 23.09.2022
*         -----------------------------------------------------------------*
        ENDIF.

*<-- FIN FCARDONA 06.04.2022 - Encapsulado solo para cartoneras

        SELECT SINGLE *
          FROM vbak
          INTO @DATA(lw_vbak)
          WHERE vbeln = @<lips>-vgbel.
        IF sy-subrc = 0.

          IF sy-tcode(4) = 'VL10'.
            SELECT SINGLE *
              INTO @DATA(lw_cond)
              FROM zssdt000_cond_pa
              WHERE zzvkorg = @lw_vbak-vkorg
                AND zzvtweg = @lw_vbak-vtweg
                AND zzspart = @lw_vbak-spart
                AND zzvstel = @likp-vstel.
            IF sy-subrc = 0.
              "Si hay registro no mostramos error
              CLEAR l_error.
            ENDIF.
          ELSE.
            SELECT SINGLE *
              INTO @lw_cond
              FROM zssdt000_cond_pa
              WHERE zzvkorg = @lw_vbak-vkorg
                AND zzvtweg = @lw_vbak-vtweg
                AND zzspart = @lw_vbak-spart
                AND zzvstel = @likp-vstel
                AND zzpstyv = @<lips>-pstyv.
            IF sy-subrc = 0.
              "Si hay registro no mostramos error
              CLEAR l_error.
            ENDIF.
          ENDIF.

        ENDIF.
        "FIN EMP: 14.12.21 GAPSD01 Si esta en la tabla es que no hay que activar la validación

        IF l_error = 'X'.
          IF 1 = 2. MESSAGE e170(zmm) WITH <lips>-posnr. ENDIF.
          APPEND INITIAL LINE TO ct_log ASSIGNING FIELD-SYMBOL(<fs_log>).
          <fs_log>-vbeln = <lips>-vbeln.
          <fs_log>-posnr = <lips>-posnr.
          <fs_log>-msgid = 'ZMM'.
          <fs_log>-msgno = '170'.
          <fs_log>-msgty = 'E'.
          <fs_log>-msgv1 = <lips>-posnr.
        ENDIF.
      ENDIF.
    ENDLOOP.
* fin - cvivo - Proyecto WM mejoras: validación almacén si WM
  ENDMETHOD.
endclass. "ZCL_IM_LE_SHP_DELIVERY definition
endclass. "ZCL_IM_LE_SHP_DELIVERY implementation
