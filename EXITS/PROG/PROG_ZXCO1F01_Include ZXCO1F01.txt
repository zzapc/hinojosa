*----------------------------------------------------------------------*
***INCLUDE ZXCO1F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_VALUE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0381   text
*      -->P_GV_ZZAPTOALIM  text
*      <--P_GV_ZZAPTOALIM_TEXT  text
*----------------------------------------------------------------------*
FORM get_value  USING    dom
                         campo
                CHANGING value.

  DATA:  lv_dom       TYPE          dd07l-domname,
         t_values_tab TYPE TABLE OF dd07v,
         wa_values    TYPE          dd07v.

  lv_dom = dom.

  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      domname         = lv_dom
      text            = 'X'
*     FILL_DD07L_TAB  = ' '
    TABLES
      values_tab      = t_values_tab
*     VALUES_DD07L    =
    EXCEPTIONS
      no_values_found = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
    READ TABLE t_values_tab INTO wa_values WITH KEY domvalue_l = campo.
    value = wa_values-ddtext.
  ENDIF.


ENDFORM.                    " GET_VALUE
*&---------------------------------------------------------------------*
*&      Form  GET_DESCRIPCION_CLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_descripcion_cli .
  SELECT SINGLE name1 FROM kna1
    INTO gv_name1
    WHERE kunnr = aufk-zzkunnr4.

  IF sy-subrc <> 0 AND aufk-zzkunnr4 IS NOT INITIAL.
    MESSAGE e262(zpp).
  ENDIF.

ENDFORM.                    " GET_DESCRIPCION_CLI

FORM get_descripcion_dest.
  DATA: ti_dd07v TYPE STANDARD TABLE OF dd07v,
        wa_dd07v TYPE                   dd07v.

  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      name          = 'ZDESTINO'
      langu         = sy-langu
      texts_only    = 'X'
    TABLES
      dd07v_tab     = ti_dd07v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.


  READ TABLE ti_dd07v INTO wa_dd07v WITH KEY domvalue_l = aufk-zzdestcmcr.
  IF sy-subrc = 0.
    gv_zzdestcmcr = wa_dd07v-ddtext.
  ENDIF.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  GET_DESCRIPCION_ALMACEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_descripcion_almacen .
  SELECT SINGLE lgobe FROM t001l
    INTO gv_zzlgort_des
    WHERE werks = gv_werks AND "aufk-werks AND
          lgort = aufk-zzlgort.
ENDFORM.                    " GET_DESCRIPCION_ALMACEN
*&---------------------------------------------------------------------*
*&      Form  GET_DESCRIPCION_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_datos_material .
  SELECT SINGLE zzgramaje zzcolor zzaptoalim FROM mara
    INTO ( gv_zzgramaje, gv_zzcolor, gv_zzaptoalim )
    WHERE matnr = gv_plnbez.

  IF gv_zzcolor IS NOT INITIAL.
    SELECT SINGLE zzcolordes FROM ztmm0015
      INTO gv_zzcolordes
      WHERE zzcolor = gv_zzcolor.
  ENDIF.

  SELECT SINGLE zzsectmat FROM marc
    INTO gv_zzsector
    WHERE werks = gv_werks AND"aufk-werks AND
          matnr  = gv_plnbez.

  IF gv_zzsector IS NOT INITIAL.
    SELECT SINGLE zzsectmatdes FROM ztmm0018
      INTO gv_vtext
      WHERE zzsectmat = gv_zzsector.
  ENDIF.

  IF gv_zzaptoalim IS NOT INITIAL.
    PERFORM get_value USING     'ZAPTOALIM'
                                gv_zzaptoalim
                      CHANGING  gv_zzaptoalim_text.

  ENDIF.
ENDFORM.                    " GET_DESCRIPCION_MATERIAL
*&---------------------------------------------------------------------*
*&      Form  GET_DIMENSIONES_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_dimensiones_material .
  DATA: lv_matkl TYPE matkl.
  DATA: wa_ztpp0011 TYPE ztpp0011.

  SELECT SINGLE zzplalgnt zzplaannt zzgrampla FROM mara
    INTO (gv_zzlargopl, gv_zzanchopl, gv_zzgrampla)
    WHERE matnr  = gv_plnbez.

  SELECT SINGLE matkl FROM mara
    INTO lv_matkl
    WHERE matnr  = gv_plnbez.

  CALL FUNCTION 'ZPP_DIMENSIONES'
    EXPORTING
      i_werks       = gv_werks
      i_matkl       = lv_matkl
      i_matnr       = gv_plnbez
      i_kunnr       = gv_kunnr4
    IMPORTING
      e_dimensiones = wa_ztpp0011.

  gv_zztolslar =  wa_ztpp0011-ztolslar.
  gv_zztolilar =  wa_ztpp0011-ztolilar.
  gv_zztolanc =  wa_ztpp0011-ztolanc.
  gv_zzcontr = wa_ztpp0011-zcontr.
  gv_zztolpes = wa_ztpp0011-ztolpes.
  gv_zztolesp = wa_ztpp0011-ztolesp.

  IF lv_matkl = '90210'.
    gv_um1 = 'G'.
    gv_um2 = 'G'.
    gv_um3 = 'G'.
  ELSEIF lv_matkl = '90220'.
    gv_um1 = 'KG'.
    gv_um2 = 'KG'.
    gv_um3 = 'KG'.
  ENDIF.

ENDFORM.                    " GET_DIMENSIONES_MATERIAL

FORM calcular_dimensiones.
  DATA: ls_pp0030_orden_calc TYPE zspp0030_orden_calc_alv,
        lv_objnr             TYPE	j_objnr,
        lt_bapiret2          TYPE bapiret2_t.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gv_aufnr
    IMPORTING
      output = lv_objnr.

  CONCATENATE 'OR' lv_objnr INTO lv_objnr.
*  lv_objnr = |{ 'OR' }{ gv_aufnr ALPHA = IN }|.

  DATA: lv_stat TYPE j_status.
  SELECT SINGLE stat
    INTO lv_stat
    FROM jest
    WHERE objnr = lv_objnr AND
          stat = 'I0002' AND
          inact <> 'X'.
*  SELECT SINGLE stat
*    INTO @DATA(lv_stat)
*    FROM jest
*    WHERE objnr = @lv_objnr AND
*          stat = 'I0002' AND
*          inact <> 'X'.

  IF sy-subrc <> 0.

    MOVE-CORRESPONDING aufk TO ls_pp0030_orden_calc.
    ls_pp0030_orden_calc-plnbez = gv_plnbez.
    ls_pp0030_orden_calc-werks = gv_werks.
    ls_pp0030_orden_calc-zzkunnr4 = gv_kunnr4.

    DATA: lv_matkl TYPE matkl.

    SELECT SINGLE matkl FROM mara
    INTO lv_matkl
    WHERE matnr = gv_plnbez.

*    SELECT SINGLE matkl FROM mara
*    INTO @DATA(lv_matkl)
*    WHERE matnr = @gv_plnbez.
    IF sy-subrc = 0.


*
      PERFORM obtener_tolerancias IN PROGRAM zrpp0030 USING lv_matkl
                        CHANGING ls_pp0030_orden_calc
                                 lt_bapiret2.
**          PERFORM calcular_fila IN PROGRAM zrpp0030 USING ls_pp0030_orden
**                                                    CHANGING ls_pp0030_orden_calc
**                                                             lt_bapiret2.
      IF lt_bapiret2 IS INITIAL.
        aufk-zzacnhofab = ls_pp0030_orden_calc-zzacnhofab.
        aufk-zzanchmaxfab = ls_pp0030_orden_calc-zzanchmaxfab.
        aufk-zzanchminfab = ls_pp0030_orden_calc-zzanchminfab.
        aufk-zzespmaxpl = ls_pp0030_orden_calc-zzespmaxpl.
        aufk-zzespminpl = ls_pp0030_orden_calc-zzespminpl.
        aufk-zzlargfab = ls_pp0030_orden_calc-zzlargfab.
        aufk-zzlargmaxfab = ls_pp0030_orden_calc-zzlargmaxfab.
        aufk-zzlargminfab = ls_pp0030_orden_calc-zzlargminfab.
        aufk-zzpesoteomaxpl = ls_pp0030_orden_calc-zzpesoteomaxpl.
        aufk-zzpesoteominpl = ls_pp0030_orden_calc-zzpesoteominpl.
        aufk-zzpesoteopl = ls_pp0030_orden_calc-zzpesoteopl.
        aufk-zzgramajeinput = ls_pp0030_orden_calc-zzgramajeinput.
      ELSE.
        CALL FUNCTION 'FINB_BAPIRET2_DISPLAY'
          EXPORTING
            it_message = lt_bapiret2.
      ENDIF.
    ENDIF.

  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_alv .

  DATA: lti_fieldcat TYPE lvc_t_fcat,
        lti_exctool  TYPE ui_functions.
  DATA: ls_layout  TYPE lvc_s_layo,
        ls_variant TYPE disvariant.
  DATA: lv_repid     TYPE syrepid.

* Variante
  lv_repid          = sy-repid.
  ls_variant-report = lv_repid.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat CHANGING lti_fieldcat.

* Preparamos la tabla para excluir botones
  PERFORM prepare_toolbar CHANGING lti_exctool.

* Layout
  ls_layout-cwidth_opt = 'X'.
  ls_layout-sel_mode   = 'A'.
** Si queremos que se puedan añadir y quitar lineas
*  ls_layout-edit       = 'X'.


* Mostramos el ALV
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active      = ' '
      i_bypassing_buffer   = 'X'
      is_layout            = ls_layout
      is_variant           = ls_variant
      i_save               = 'A'
      it_toolbar_excluding = lti_exctool
    CHANGING
      it_outtab            = gt_utillajes
      it_fieldcatalog      = lti_fieldcat.


* Con esto hacemos que se puedan borrar lineas. Luego hay que capturar el evento
* Set editable cells to ready for input initially
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = 1.

* Volvemos a ajustar el ancho de las columnas
  PERFORM refrescar_alv .

ENDFORM.                    " MOSTRAR_ALV


*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--CTI_FIELDCAT  text
*----------------------------------------------------------------------*
FORM  prepare_fielcat  CHANGING cti_fieldcat TYPE lvc_t_fcat.
  DATA: ls_fcat TYPE lvc_s_fcat,
        lv_ind  TYPE i.

* Recuperamos el catálogo de campos
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZSPM0007'
    CHANGING
      ct_fieldcat      = cti_fieldcat.

* Recorremos el catálogo de campos modificandolo
  LOOP AT cti_fieldcat INTO ls_fcat.
    lv_ind = sy-tabix.
*   Dependiendo del campo ponemos unas propiedades u otras
    CASE ls_fcat-fieldname.
*     Campos que no salen en el listado
      WHEN 'CONT' OR 'ZZPTBO' OR 'ZZFECHAS' OR 'ZZHORAAS' OR 'ZZFECHAPTBO' OR 'ZZHORAPTBO' OR 'AUFNR' OR 'WERKS'.
        ls_fcat-no_out = 'X'.
*     Campos editables
      WHEN 'VORNR'.
        IF sy-tcode NE 'COR3'.
          ls_fcat-edit = 'X'.
        ENDIF.
        ls_fcat-drdn_hndl = '1'. " Así informamos que es DROPDOWN
        ls_fcat-outputlen = 5.

*       Añadimos DROPDOWN al campo
        PERFORM set_dropdown USING '1' 'VORNR'.
      WHEN 'EQUNR'.
        IF sy-tcode NE 'COR3'.
          ls_fcat-edit = 'X'.
        ENDIF.
    ENDCASE.
    MODIFY cti_fieldcat FROM ls_fcat INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " PREPARE_FIELCAT


*&---------------------------------------------------------------------*
*&      Form  PREPARE_TOOLBAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--CTI_EXCTOOL  text
*----------------------------------------------------------------------*
FORM prepare_toolbar  CHANGING cti_exctool TYPE ui_functions.

* Quitamos la botonera del ALV editable EXCEPTO el botón ELIMINAR
  APPEND cl_gui_alv_grid=>mc_fc_detail    TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_find      TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_find      TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_find_more TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_filter    TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_sum      TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_print     TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_views     TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_refresh   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_undo  TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy  TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_cut   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy_row   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_help TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_load_variant TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_graph TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_subtot   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_subtot   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_sort_asc   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_sort_dsc   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_sort_dsc   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_mb_sum   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_mb_export   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_mb_variant   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_mb_paste   TO cti_exctool.
  APPEND cl_gui_alv_grid=>mc_fc_info   TO cti_exctool.

* Si estamos visualizando quitamos añadir línea
  IF sy-tcode EQ 'COR3'.
    APPEND cl_gui_alv_grid=>mc_fc_loc_append_row  TO cti_exctool.
  ENDIF.

ENDFORM.                    " PREPARE_TOOLBAR


*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refrescar_alv .

  DATA: lti_fieldcat TYPE lvc_t_fcat.

  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Sacamos el layout del ALV
  CALL METHOD g_grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

* Ponemos de nuevo que optimice las columnas
  ls_layout-cwidth_opt = 'X'.

* Cargamos de nuevo el layout
  CALL METHOD g_grid->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat CHANGING lti_fieldcat.

* Informamos nuevo layout
  CALL METHOD g_grid->set_frontend_fieldcatalog
    EXPORTING
      it_fieldcatalog = lti_fieldcat.

* Refrescamos el ALV
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.
  CALL METHOD g_grid->refresh_table_display
    EXPORTING
      is_stable = ls_stable.

ENDFORM.                    " REFRESCAR_ALV
*&---------------------------------------------------------------------*
*&      Form  SET_DROPDOWN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1      text
*      -->P_0599   text
*----------------------------------------------------------------------*
FORM set_dropdown  USING p_handle TYPE char1
                         p_field  TYPE char10.

  DATA: it_dropdown TYPE lvc_t_drop,
        wa_dropdown TYPE lvc_s_drop,
        lv_no_valid TYPE flag,
        lv_equnr    TYPE equnr.

  TYPES: BEGIN OF ty_vornr,
           vornr TYPE vornr,
           phseq TYPE phseq,
           steus TYPE steus,
         END OF ty_vornr.

* Limpiamos lista de elementos
  CLEAR it_dropdown.

* Vemos que datos tenemos que coger
  CASE p_field.
    WHEN 'VORNR'.
*     Obtenemos gs_header
      CALL FUNCTION 'ZPP_GET_HD_UTILLAJES'
        IMPORTING
          es_caufvdb = gs_header.

      DATA: lt_vornr TYPE TABLE OF ty_vornr.

*     Obtenemos los elementos del DROPDOWN
      SELECT b~vornr b~phseq b~steus  FROM   plas AS a
                                INNER JOIN   plpo AS b ON   a~plnty = b~plnty AND
                                                            a~plnnr = b~plnnr AND
                                                            a~plnkn = b~plnkn AND
                                                            a~zaehl = b~zaehl
        INTO CORRESPONDING FIELDS OF TABLE lt_vornr
        WHERE a~plnty = gs_header-plnty
          AND a~plnnr = gs_header-plnnr
          AND a~plnal = gs_header-plnal
          AND ( b~phseq EQ 'Z4' OR b~phseq EQ 'Z5' )
          AND b~phseq NE ''
          AND a~loekz EQ ''.

*       Ordenamos y borramos duplicados
      SORT lt_vornr BY vornr.
      DELETE ADJACENT DUPLICATES FROM lt_vornr COMPARING vornr.

*      SELECT vornr steus FROM plpo INTO TABLE lt_vornr
*        WHERE plnty = gs_header-plnty
*          AND plnnr = gs_header-plnnr
*          AND phseq NE ''.

*     Iteramos sobre las entradas encontradas
      LOOP AT lt_vornr INTO DATA(ls_vornr) WHERE steus NE 'ZP05'.
        wa_dropdown-handle  = p_handle.
        wa_dropdown-value   = ls_vornr-vornr.
        APPEND wa_dropdown TO it_dropdown.
        CLEAR wa_dropdown.
      ENDLOOP.
    WHEN OTHERS.
  ENDCASE.

* method to display the dropdown in ALV
  CALL METHOD g_grid->set_drop_down_table
    EXPORTING
      it_drop_down = it_dropdown.
ENDFORM.
