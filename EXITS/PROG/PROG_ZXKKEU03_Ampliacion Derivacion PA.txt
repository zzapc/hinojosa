*&---------------------------------------------------------------------*
*&  Include           ZXKKEU03
*&---------------------------------------------------------------------*

*"----------------------------------------------------------------------
*"*"Lokale Schnittstelle:
*"  IMPORTING
*"     VALUE(ERKRS) LIKE  TKEB-ERKRS
*"     VALUE(EP_SOURCE)
*"     VALUE(EP_SOURCE_BUKRS)
*"     VALUE(EXIT_NR) LIKE  TKEVA02-EXIT_NR
*"  EXPORTING
*"     VALUE(EP_TARGET)
*"     VALUE(EP_TARGET_BUKRS)
*"     VALUE(E_BUKRS_PROCESSED) TYPE  KEDR_FLAG
*"     VALUE(ET_FIELD) TYPE  RKEI1_YT_FIELD
*"  TABLES
*"      GT_MESSAGE_TABLE STRUCTURE  COPA_MESSAGE_TAB OPTIONAL
*"  EXCEPTIONS
*"      VALUATION_ERROR
*"----------------------------------------------------------------------
DATA: ls_item_1000 LIKE ce11000,
      v_menge1     TYPE menge_d,
      v_menge2     TYPE menge_d.

IF erkrs EQ '1000' AND exit_nr EQ 'U01'.

  ls_item_1000 = ep_source.
  v_menge1 = ls_item_1000-vvq05.

  CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
    EXPORTING
      i_matnr              = ls_item_1000-artnr
      i_in_me              = ls_item_1000-vvq05_me
      i_out_me             = 'KG'
      i_menge              = v_menge1
    IMPORTING
      e_menge              = v_menge2
    EXCEPTIONS
      error_in_application = 1
      error                = 2
      OTHERS               = 3.

  IF sy-subrc = 0.
    ls_item_1000-vvq07    = v_menge2.
    ls_item_1000-vvq07_me = 'KG'.
    ep_target = ls_item_1000.
  ENDIF.

ENDIF.

IF erkrs EQ '1000' AND exit_nr EQ 'U03'.

  DATA: l_date_i TYPE datum,
        l_date_f TYPE datum.

  ls_item_1000 = ep_source.

  SELECT SINGLE matnr, charg, lvorm, ersda
    INTO @DATA(ls_mch1)
    FROM mch1
    WHERE matnr = @ls_item_1000-artnr
      AND charg = @ls_item_1000-bwtar
      AND lvorm = @space.

  CHECK sy-subrc = 0.

  ls_mch1-ersda+6 = '01'.

  IF ls_item_1000-bwtar IS INITIAL.
    SELECT  kadky, kalnr, losau  INTO TABLE @DATA(lt_keko) FROM keko
      WHERE matnr = @ls_item_1000-artnr
        AND werks = @ls_item_1000-werks
        AND feh_sta = 'FR'.
    IF sy-subrc = 0.
      SORT lt_keko BY kadky DESCENDING.
      READ TABLE lt_keko INTO DATA(l_keko) INDEX 1.
    ENDIF.
  ELSE.
    SELECT SINGLE kadky, kalnr, losau INTO @l_keko FROM keko
      WHERE matnr = @ls_mch1-matnr
        AND werks = @ls_item_1000-werks
        AND kadky = @ls_mch1-ersda
        AND feh_sta = 'FR'.
  ENDIF.
  IF sy-subrc <> 0.

    DO 16 TIMES.
      CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
        EXPORTING
          date      = ls_mch1-ersda
          days      = 0
          months    = 1
          signum    = '-'
          years     = 0
        IMPORTING
          calc_date = ls_mch1-ersda.
      SELECT SINGLE kadky, kalnr, losau INTO @l_keko FROM keko
        WHERE matnr = @ls_mch1-matnr
          AND werks = @ls_item_1000-werks
          AND kadky = @ls_mch1-ersda
          AND feh_sta = 'FR'.
      IF sy-subrc = 0.
        EXIT.
      ENDIF.
    ENDDO.

  ENDIF.

  DATA: l_pstyv TYPE pstyv.

  SELECT SINGLE * FROM keph
    INTO @DATA(l_keph)
    WHERE kalnr = @l_keko-kalnr
      AND kkzst = @space
      AND kadky = @l_keko-kadky.

  SELECT SINGLE pstyv INTO l_pstyv FROM zscot_zxkkeu03 WHERE pstyv = ls_item_1000-pstyv AND inactive = space.
  IF sy-subrc <> 0.
    IF l_keko-losau  > 0.
      ls_item_1000-vv001 = ( l_keph-kst001 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv005 = ( l_keph-kst003 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv026 = ( l_keph-kst005 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv025 = ( l_keph-kst007 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv043 = ( l_keph-kst009 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv009 = ( l_keph-kst011 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv007 = ( l_keph-kst013 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv027 = ( l_keph-kst015 / l_keko-losau ) * ls_item_1000-vvq05.
      ls_item_1000-vv021 = ( l_keph-kst017 / l_keko-losau ) * ls_item_1000-vvq05.
    ENDIF.
  ENDIF.

  v_menge1 = ls_item_1000-vvq05.

  CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
    EXPORTING
      i_matnr              = ls_item_1000-artnr
      i_in_me              = ls_item_1000-vvq05_me
*      i_out_me             = 'M2'  "APC20250310 Queremos convertir siempre usando M2P
      i_out_me             = 'M2P'
      i_menge              = v_menge1
    IMPORTING
      e_menge              = v_menge2
    EXCEPTIONS
      error_in_application = 1
      error                = 2
      OTHERS               = 3.
  IF sy-subrc = 0.
    ls_item_1000-vvq08    = v_menge2.
    ls_item_1000-vvq08_me = 'M2'.
    ep_target = ls_item_1000.

  ELSE.
    MESSAGE |No existe conversión a M2P para material { ls_item_1000-artnr }| TYPE 'E' RAISING valuation_error.
  ENDIF.

ENDIF.
