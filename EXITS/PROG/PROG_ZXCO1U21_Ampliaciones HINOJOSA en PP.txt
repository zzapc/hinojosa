*&---------------------------------------------------------------------*
*&  Include           ZXCO1U21
*&---------------------------------------------------------------------*

DATA: lt_mdezx    TYPE badi_mdezx,
      ls_mdezx    TYPE mdez,
      lv_ebeln    TYPE ebeln,
      lv_ebelp    TYPE ebelp,
      ls_aufk     TYPE aufk,
      ls_aufk_bob TYPE aufk,
      lv_plnbez   TYPE matnr,
      lv_gamng    TYPE gamng,
      lv_zzancho  TYPE zancho,
      ls_ztpp0002 TYPE ztpp0002,
      lv_hsdat    TYPE budat.

CLEAR: lt_mdezx, ls_mdezx, lv_ebeln, lv_ebelp, ls_aufk.
REFRESH: lt_mdezx.

" Recuperamos los datos de la AUFK:
SELECT SINGLE * INTO ls_aufk
  FROM aufk
  WHERE aufnr = i_caufvd-aufnr.

IF ls_aufk IS NOT INITIAL.
  CLEAR gv_status.
  SELECT SINGLE stat INTO gv_status
    FROM jest
    WHERE objnr = ls_aufk-objnr
    AND ( stat = 'I0045' OR stat = 'I0002' )
    AND inact = ' '.
ENDIF.

" Recuperamos los datos de la orden de proceso:
gv_aufnr = i_caufvd-aufnr.
gv_sfcpf = i_caufvd-auart.
gv_werks = i_caufvd-werks.
gv_kunnr4 = i_caufvd-zzkunnr4.

IF i_caufvd-zzkunnr1 IS NOT INITIAL.
  aufk-zzkunnr1 = i_caufvd-zzkunnr1.
ENDIF.

IF i_caufvd-zzkunnr2 IS NOT INITIAL.
  aufk-zzkunnr2 = i_caufvd-zzkunnr2.
ENDIF.

IF i_caufvd-zzkunnr3 IS NOT INITIAL.
  aufk-zzkunnr3 = i_caufvd-zzkunnr3.
ENDIF.

IF i_caufvd-zzebeln1 IS NOT INITIAL.
  aufk-zzebeln1 = i_caufvd-zzebeln1.
ENDIF.

IF i_caufvd-zzebeln2 IS NOT INITIAL.
  aufk-zzebeln2 = i_caufvd-zzebeln2.
ENDIF.

IF i_caufvd-zzebeln3 IS NOT INITIAL.
  aufk-zzebeln3 = i_caufvd-zzebeln3.
ENDIF.

IF i_caufvd-zzebelp1 IS NOT INITIAL.
  aufk-zzebelp1 = i_caufvd-zzebelp1.
ENDIF.

IF i_caufvd-zzebelp2 IS NOT INITIAL.
  aufk-zzebelp2 = i_caufvd-zzebelp2.
ENDIF.

IF i_caufvd-zzebelp3 IS NOT INITIAL.
  aufk-zzebelp3 = i_caufvd-zzebelp3.
ENDIF.

IF i_caufvd-zzrollos1 IS NOT INITIAL.
  aufk-zzrollos1 = i_caufvd-zzrollos1.
ENDIF.

IF i_caufvd-zzrollos2 IS NOT INITIAL.
  aufk-zzrollos2 = i_caufvd-zzrollos2.
ENDIF.

IF i_caufvd-zzrollos3 IS NOT INITIAL.
  aufk-zzrollos3 = i_caufvd-zzrollos3.
ENDIF.

IF i_caufvd-zztor1 IS NOT INITIAL.
  aufk-zztor1 = i_caufvd-zztor1.
ENDIF.

IF i_caufvd-zztor2 IS NOT INITIAL.
  aufk-zztor2 = i_caufvd-zztor2.
ENDIF.

IF i_caufvd-zztor3 IS NOT INITIAL.
  aufk-zztor3 = i_caufvd-zztor3.
ENDIF.

IF i_caufvd-zzmotivo IS NOT INITIAL.
  aufk-zzmotivo = i_caufvd-zzmotivo.
ENDIF.

IF i_caufvd-zzsecuencia IS NOT INITIAL.
  aufk-zzsecuencia = i_caufvd-zzsecuencia.
ENDIF.

IF i_caufvd-zzfec_entreg1 IS NOT INITIAL.
  aufk-zzfec_entreg1 = i_caufvd-zzfec_entreg1.
ENDIF.

IF i_caufvd-zzfec_entreg2 IS NOT INITIAL.
  aufk-zzfec_entreg2 = i_caufvd-zzfec_entreg2.
ENDIF.

IF i_caufvd-zzfec_entreg3 IS NOT INITIAL.
  aufk-zzfec_entreg3 = i_caufvd-zzfec_entreg3.
ENDIF.

* GST - 25/05/2015 ->
* Flag urgente en Datos adicionales de la orden:
IF i_caufvd-zzurgt1 IS NOT INITIAL.
  aufk-zzurgt1 = i_caufvd-zzurgt1.
ENDIF.

IF i_caufvd-zzurgt2 IS NOT INITIAL.
  aufk-zzurgt2 = i_caufvd-zzurgt2.
ENDIF.

IF i_caufvd-zzurgt3 IS NOT INITIAL.
  aufk-zzurgt3 = i_caufvd-zzurgt3.
ENDIF.
* GST - 25/05/2015 <-

" Guardo los datos de material y cantidad para
" buscar a posteriori los datos de rollos/tornadas:
gv_plnbez = i_caufvd-plnbez.
gv_gamng =  i_caufvd-gamng.

SELECT SINGLE zzespesor FROM mara
  INTO gv_espesor
  WHERE matnr = gv_plnbez.


* ini cgijon - 04.05.17 - insertamos la orden de rollo
IF i_caufvd-auart = 'ZI02' OR i_caufvd-auart = 'ZI05'.
  aufk-zzaufnr_rollo = i_caufvd-zzaufnr_rollo.
ENDIF.
* fin cgijon - 04.05.17 - insertamos la orden de rollo

*&---------------------------------------------------------------------*
** CAMPOS CIPASI
*&---------------------------------------------------------------------*
IF i_caufvd-auart = 'ZC01' OR i_caufvd-auart = 'ZC02' OR i_caufvd-auart = 'ZC03' OR
  i_caufvd-auart = 'ZC04' OR i_caufvd-auart = 'ZC05'.

  IF i_caufvd-zzaufnr_ext IS NOT INITIAL.
    aufk-zzaufnr_ext  = i_caufvd-zzaufnr_ext.
  ENDIF.

  IF i_caufvd-zzlgort IS NOT INITIAL.
    aufk-zzlgort  = i_caufvd-zzlgort.
  ENDIF.

  IF i_caufvd-zzkunnr4 IS NOT INITIAL.
    aufk-zzkunnr4	= i_caufvd-zzkunnr4.

* ASV - 25/01/2021 -> SAT 7000036711, Ticket ## 64465 ##
  ELSEIF sy-tcode = 'COR3'.
    gv_kunnr4 = aufk-zzkunnr4.
* ASV - 25/01/2021 <- SAT 7000036711, Ticket ## 64465 ##

  ENDIF.

  IF i_caufvd-zzebeln4 IS NOT INITIAL.
    aufk-zzebeln4	= i_caufvd-zzebeln4.
  ENDIF.

  IF i_caufvd-zzebelp4 IS NOT INITIAL.
    aufk-zzebelp4	= i_caufvd-zzebelp4.
  ENDIF.

  IF i_caufvd-zzkwmeng IS NOT INITIAL.
    aufk-zzkwmeng	= i_caufvd-zzkwmeng.
  ENDIF.

  IF i_caufvd-zzmatventa IS NOT INITIAL.
    aufk-zzmatventa	= i_caufvd-zzmatventa.
  ENDIF.

  IF i_caufvd-zzfec_entreg4 IS NOT INITIAL.
    aufk-zzfec_entreg4  = i_caufvd-zzfec_entreg4.
  ENDIF.

  IF i_caufvd-zzfirst IS NOT INITIAL.
    aufk-zzfirst  = i_caufvd-zzfirst.
  ENDIF.

  IF i_caufvd-zzlienzo IS NOT INITIAL.
    aufk-zzlienzo	= i_caufvd-zzlienzo.
  ENDIF.

  IF i_caufvd-zzcoex IS NOT INITIAL.
    aufk-zzcoex	= i_caufvd-zzcoex.
  ENDIF.

  IF i_caufvd-zzttocorona IS NOT INITIAL.
    aufk-zzttocorona  = i_caufvd-zzttocorona.
  ENDIF.

  IF i_caufvd-zzteji IS NOT INITIAL.
    aufk-zzteji	= i_caufvd-zzteji.
  ENDIF.

  IF i_caufvd-zzadignifugo IS NOT INITIAL.
    aufk-zzadignifugo	= i_caufvd-zzadignifugo.
  ENDIF.

  IF i_caufvd-zzaduv IS NOT INITIAL.
    aufk-zzaduv	= i_caufvd-zzaduv.
  ENDIF.

  IF i_caufvd-zzadantest IS NOT INITIAL.
    aufk-zzadantest	= i_caufvd-zzadantest.
  ENDIF.

  IF i_caufvd-zzadanthum IS NOT INITIAL.
    aufk-zzadanthum	= i_caufvd-zzadanthum.
  ENDIF.

  IF i_caufvd-zzadespum IS NOT INITIAL.
    aufk-zzadespum  = i_caufvd-zzadespum.
  ENDIF.

  IF i_caufvd-zzimpresion IS NOT INITIAL.
    aufk-zzimpresion  = i_caufvd-zzimpresion.
  ENDIF.

  IF i_caufvd-zzconductividad IS NOT INITIAL.
    aufk-zzconductividad  = i_caufvd-zzconductividad.
  ENDIF.

  IF i_caufvd-zzlargfab IS NOT INITIAL.
    aufk-zzlargfab  = i_caufvd-zzlargfab.
  ENDIF.

  IF i_caufvd-zzacnhofab IS NOT INITIAL.
    aufk-zzacnhofab	= i_caufvd-zzacnhofab.
  ENDIF.

  IF i_caufvd-zzlargminfab IS NOT INITIAL.
    aufk-zzlargminfab	= i_caufvd-zzlargminfab.
  ENDIF.

  IF i_caufvd-zzlargmaxfab IS NOT INITIAL.
    aufk-zzlargmaxfab	= i_caufvd-zzlargmaxfab.
  ENDIF.

  IF i_caufvd-zzanchminfab IS NOT INITIAL.
    aufk-zzanchminfab	= i_caufvd-zzanchminfab.
  ENDIF.

  IF i_caufvd-zzanchmaxfab IS NOT INITIAL.
    aufk-zzanchmaxfab	= i_caufvd-zzanchmaxfab.
  ENDIF.

  IF i_caufvd-zzpesoteopl IS NOT INITIAL.
    aufk-zzpesoteopl  = i_caufvd-zzpesoteopl.
  ENDIF.

  IF i_caufvd-zzpesoteomaxpl IS NOT INITIAL.
    aufk-zzpesoteomaxpl	= i_caufvd-zzpesoteomaxpl.
  ENDIF.

  IF i_caufvd-zzpesoteominpl IS NOT INITIAL.
    aufk-zzpesoteominpl	= i_caufvd-zzpesoteominpl.
  ENDIF.

  IF i_caufvd-zzespmaxpl IS NOT INITIAL.
    aufk-zzespmaxpl	= i_caufvd-zzespmaxpl.
  ENDIF.

  IF i_caufvd-zzespminpl IS NOT INITIAL.
    aufk-zzespminpl	= i_caufvd-zzespminpl.
  ENDIF.

  IF i_caufvd-zzespminpl IS NOT INITIAL.
    aufk-zzespminpl	= i_caufvd-zzespminpl.
  ENDIF.

  IF i_caufvd-zzdestcmcr IS NOT INITIAL.
    aufk-zzdestcmcr  = i_caufvd-zzdestcmcr.
  ENDIF.

  IF i_caufvd-zzgramajeinput IS NOT INITIAL.
    aufk-zzgramajeinput  = i_caufvd-zzgramajeinput.
  ENDIF.

* EDIEGO 32PP016 22/09/2017 -->
  IF i_caufvd-zzcopiatro IS NOT INITIAL.
    aufk-zzcopiatro  = i_caufvd-zzcopiatro.
  ENDIF.

  IF i_caufvd-zzjuegocli IS NOT INITIAL.
    aufk-zzjuegocli  = i_caufvd-zzjuegocli.
  ENDIF.

  DATA: is_caufvdb TYPE caufvdb.
  MOVE-CORRESPONDING i_caufvd TO is_caufvdb.

* Miramos si estamos cambiando versión de fabricación
  IF ( is_caufvdb-plnty NE zcl_im_zworkorder_update=>gv_plnty OR is_caufvdb-plnnr NE zcl_im_zworkorder_update=>gv_plnnr ) OR
     (  is_caufvdb-plnty EQ zcl_im_zworkorder_update=>gv_plnty AND is_caufvdb-plnnr EQ zcl_im_zworkorder_update=>gv_plnnr AND
        is_caufvdb-stlal NE zcl_im_zworkorder_update=>gv_stlal  ).

*   Calculamos tabla de nuevo
    zcl_im_zworkorder_update=>init_vers_alv(  iv_ddmm    = 'X'
                                              is_caufvdb = is_caufvdb ).

  ENDIF.

* Volvemos a cargar datos en la tabla
  CALL FUNCTION 'ZPP_GET_UTILLAJES'
    IMPORTING
      ev_copiatro  = aufk-zzcopiatro
      ev_juegocli  = aufk-zzjuegocli
      et_zttpm0007 = gt_utillajes.
*   EDIEGO 32PP016 22/09/2017 <--


* >>> DBM Recuperar Aditivos y tratamientos

* Estamos creando una orden nueva.
*    IF ls_aufk-aufnr IS INITIAL OR ls_aufk-aufnr = '%00000000001'.
*      IF is_caufvdb-matnr IS NOT INITIAL.
*        SELECT SINGLE zztratos zzaditiv
*          INTO (lv_zztratos, lv_zzaditiv)
*          FROM mara
*          WHERE matnr = is_caufvdb-matnr.
*        IF sy-subrc = 0.
*          CLEAR: lt_text_tab.
*          CALL FUNCTION 'SOTR_SERV_STRING_TO_TABLE'
*            EXPORTING
*              text        = lv_zztratos
*              line_length = 2
*            TABLES
*              text_tab    = lt_text_tab.
*
**          IF lt_text_tab is not INITIAL.
*          LOOP AT lt_text_tab INTO lv_char2.
*            CASE lv_char2.
*              WHEN 'CO'.
*
*              WHEN 'EX'.
*              WHEN 'IM'.
*              WHEN 'TE'.
*            ENDCASE.
*          ENDLOOP.
**          ENDIF.
*
*        ENDIF.
**        is_caufvdb-
*      ENDIF.
**      is_caufvdb-matnr
*    ENDIF.




* <<<

ENDIF.

IF  i_caufvd-werks = '4000' AND
( i_caufvd-auart = 'ZC01' OR i_caufvd-auart = 'ZC02' ) AND
 ( i_caufvd-aufnr IS INITIAL OR i_caufvd-aufnr = '%00000000001' ).
  PERFORM obtener_aditivos  USING i_caufvd-matnr
                            CHANGING aufk.
ENDIF.
