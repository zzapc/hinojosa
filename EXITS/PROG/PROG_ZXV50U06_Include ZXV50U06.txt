*&---------------------------------------------------------------------*
*&  Include           ZXV50U06
*&---------------------------------------------------------------------*

CONSTANTS: lc_intrastat_data(14) TYPE c VALUE 'INTRASTAT_DATA'.


TYPES: BEGIN OF ty_intrastat,
  expos TYPE eipo-expos ,
  segal TYPE eipo-segal,
  exprf TYPE eipo-exprf,
  exart TYPE eipo-exart,
END OF ty_intrastat.

DATA: ls_intrastat   TYPE ty_intrastat,
      lt_intrastat TYPE TABLE OF ty_intrastat WITH HEADER LINE.

"Nos centramos en validaciones IMPORT (compras)
IF ( i_exp_imp_flag EQ 'I' ). "I - import ; E - Export

  "borramos los datos del wa
  CLEAR: ls_intrastat.

  "Copiamos los datos al wa
  MOVE-CORRESPONDING i_export_item TO ls_intrastat.

  "Importamos los datos intrastat que pudieran haber sido exportados en este mismo programa
  IMPORT lt_intrastat FROM MEMORY ID lc_intrastat_data.

  "Leemos en la tabla importada si hay datos.
  READ TABLE lt_intrastat WITH KEY expos = ls_intrastat-expos.

  "Si hay datos...
  IF ( sy-subrc = 0 ).

    "Recorremos la tabla importada en la posición actual.
    LOOP AT lt_intrastat WHERE expos = ls_intrastat-expos.

      "Si la posición de la tabla es la misma que la actual (i_export_item)
      IF ( lt_intrastat NE ls_intrastat ).

        "Modifico la tabla importada
        lt_intrastat = ls_intrastat.
        MODIFY lt_intrastat.

      ENDIF.

    ENDLOOP.

  ELSE. "No hay datos en la tabla importada

    "Añado registro en la tabla
    APPEND ls_intrastat TO lt_intrastat.

  ENDIF.

  "Exporto la tabla a memoria para recuperarla en EXIT_SAPMM06E_012.
  EXPORT lt_intrastat TO MEMORY ID lc_intrastat_data.

ENDIF.
