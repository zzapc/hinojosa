*&---------------------------------------------------------------------*
*&  Include           ZXEDFU02
*&---------------------------------------------------------------------*

*IMPORTING
*"     VALUE(XVBDKR) LIKE  VBDKR STRUCTURE  VBDKR
*"     VALUE(DOBJECT) LIKE  NAST STRUCTURE  NAST OPTIONAL
*"     VALUE(CONTROL_RECORD_OUT) LIKE  EDIDC STRUCTURE  EDIDC OPTIONAL
*"  TABLES
*"      INT_EDIDD STRUCTURE  EDIDD
*"      XTVBDPR STRUCTURE  VBDPR
*"      XIKOMV STRUCTURE  KOMV OPTIONAL
*"      XIKOMVD STRUCTURE  KOMVD OPTIONAL
*"  EXCEPTIONS
*"      ERROR_MESSAGE_RECEIVED
*"      DATA_NOT_RELEVANT_FOR_SENDING

DATA: wl_e1edk01 TYPE e1edk01.
DATA: wl_e1edka1 TYPE e1edka1.

DATA: l_e1edk02 TYPE e1edk02,

      l_vbeln   TYPE vbeln,
      l_ebeln   TYPE ebeln.

DATA: l_edidd TYPE edidd.

DATA tl_lines TYPE STANDARD TABLE OF tline.

CLEAR: l_edidd.

IF int_edidd-segnam = 'E1EDK02'.

  CLEAR: l_e1edk02.
  l_e1edk02 = int_edidd-sdata.

  IF l_e1edk02-qualf = '002'.

    l_vbeln = l_e1edk02-belnr.

    SELECT SINGLE d~xblnr
      INTO l_ebeln
      FROM vbap AS a
        INNER JOIN vbep AS b ON a~vbeln = b~vbeln AND a~posnr = b~posnr
        INNER JOIN ekpo AS c ON b~banfn = c~banfn
        INNER JOIN ekbe AS d ON c~ebeln = d~ebeln
      WHERE a~pstyv = 'ZTAS'
        AND a~vbeln = l_vbeln.
    IF sy-subrc = 0.
      l_e1edk02-qualf = '012'.
      l_e1edk02-belnr = l_ebeln.

      l_edidd-segnam = int_edidd-segnam.
      l_edidd-sdata = l_e1edk02.
*
      APPEND l_edidd TO int_edidd.

    ENDIF.

  ENDIF.

ELSEIF int_edidd-segnam = 'E1EDK01'.

  "$. SAS Seidor # INI 30.10.2023 12:00:41 Hinojosa. Interface ZFACTMAS_P01
  IF control_record_out-mestyp = 'ZFACTMAS_P01'.

    " vía de pago
    CLEAR: wl_e1edk01.

    ASSIGN int_edidd[ segnam = 'E1EDK01' ] TO FIELD-SYMBOL(<fs_e1edk01>).

    wl_e1edk01 = <fs_e1edk01>-sdata.

*    SELECT SINGLE t042e~text1 FROM vbrk AS vbrk INNER JOIN t042e AS t042e
    SELECT SINGLE t042zt~text2 FROM vbrk AS vbrk INNER JOIN t042zt AS t042zt
      ON vbrk~zlsch = t042zt~zlsch
      INTO @wl_e1edk01-hwaer
      WHERE vbeln = @wl_e1edk01-belnr
      AND t042zt~spras = @sy-langu
      AND t042zt~land1 = 'ES'.
    IF sy-subrc = 0.

      <fs_e1edk01>-sdata = wl_e1edk01.
      int_edidd = <fs_e1edk01>.
*    MODIFY int_edidd[] FROM int_edidd.

    ENDIF.

    SELECT SINGLE text1 FROM t052u
      INTO wl_e1edk01-zterm
      WHERE zterm = wl_e1edk01-zterm
      AND spras = sy-langu.
    IF sy-subrc = 0 AND NOT wl_e1edk01-zterm IS INITIAL.

      <fs_e1edk01>-sdata = wl_e1edk01.
      int_edidd = <fs_e1edk01>.

    ENDIF.

  ENDIF.

  "$. SAS Seidor # FIN 30.10.2023 12:00:42 Hinojosa. Interface ZFACTMAS_P01

ELSEIF int_edidd-segnam = 'E1EDKA1'.

  IF control_record_out-mestyp = 'ZFACTMAS_P01'.
    CLEAR: wl_e1edka1.
    wl_e1edka1 = int_edidd-sdata.

    IF wl_e1edka1-parvw = 'RS'.

      READ TABLE int_edidd INTO DATA(wv_int_edidd) WITH KEY segnam = 'E1EDK01'.
      IF sy-subrc = 0.

        wl_e1edk01 = wv_int_edidd-sdata.
        DATA(vv_name) = CONV tdobname( wl_e1edk01-belnr ).
        CALL FUNCTION 'READ_TEXT'
          EXPORTING
            id                      = '0002'
            language                = sy-langu
            name                    = vv_name
            object                  = 'VBBK'
          TABLES
            lines                   = tl_lines
          EXCEPTIONS
            id                      = 1
            language                = 2
            name                    = 3
            not_found               = 4
            object                  = 5
            reference_check         = 6
            wrong_access_to_archive = 7
            OTHERS                  = 8.
        IF sy-subrc = 0.

          CLEAR wl_e1edka1-bname.

          LOOP AT tl_lines INTO DATA(wv_lines).

            CONCATENATE wl_e1edka1-bname wv_lines-tdline INTO wl_e1edka1-bname SEPARATED BY space.

          ENDLOOP.

          int_edidd-sdata = wl_e1edka1.

          LOOP AT int_edidd[] ASSIGNING FIELD-SYMBOL(<fs_e1edka1_rs>) WHERE segnam = 'E1EDKA1'.

            wl_e1edka1 = <fs_e1edka1_rs>-sdata.
            IF wl_e1edka1-parvw = 'RS'.
              <fs_e1edka1_rs>-sdata = int_edidd-sdata.
            ENDIF.

          ENDLOOP.

        ENDIF.
      ENDIF.

    ELSEIF wl_e1edka1-parvw = 'RE'.

      SELECT SINGLE bezei FROM t005u
        INTO wl_e1edka1-ort02
        WHERE land1 = wl_e1edka1-land1
        AND bland = wl_e1edka1-regio
        AND spras = sy-langu.
      IF sy-subrc = 0.

        int_edidd-sdata = wl_e1edka1.

        LOOP AT int_edidd[] ASSIGNING FIELD-SYMBOL(<fs_e1edka1>) WHERE segnam = 'E1EDKA1'.

          wl_e1edka1 = <fs_e1edka1>-sdata.
          IF wl_e1edka1-parvw = 'RE'.
            <fs_e1edka1>-sdata = int_edidd-sdata.
          ENDIF.

        ENDLOOP.

      ENDIF.

    ENDIF.
  ENDIF.

ELSEIF int_edidd-segnam = 'E1EDP26'. "APC20250324 Eliminamos segmento 013 que contiene el subtotal 4 y no lo queremos enviar
  IF control_record_out-rcvprn = '0000100822'. "Sólo Procter & Gamble
    DATA: l_e1edp26 TYPE e1edp26.
    CLEAR: l_e1edk02.
    l_e1edk02 = int_edidd-sdata.

    IF l_e1edk02-qualf = '013'.
      DELETE int_edidd WHERE segnam = 'E1EDP26' AND sdata(3) = '013'.
    ENDIF.
  ENDIF.

ENDIF.

"
" Sustitución documento referencia en
"
IF int_edidd-segnam = 'E1EDK14' AND  int_edidd-sdata(3) = '015'.
  "
  " Comprobamos si es el tipo de factura y destinatario al que tenemos que recalcular el segmento K02.
  "
  DATA: rl_fktyp  TYPE RANGE OF vbrk-fktyp,
        rl_rcvprn TYPE RANGE OF edidc-rcvprn.

  SELECT *
    FROM zparametros
    INTO TABLE @DATA(lt_param)
    WHERE clave = 'ZINVOIC02'.
  CHECK lt_param IS NOT INITIAL.

  LOOP AT lt_param ASSIGNING FIELD-SYMBOL(<fs_param>).
    IF <fs_param>-campo = 'SUST_K02_CLASE_FACT'.
      APPEND INITIAL LINE TO rl_fktyp ASSIGNING FIELD-SYMBOL(<fs_fktyp>).
      <fs_fktyp>-sign = <fs_param>-atributo1.
      <fs_fktyp>-option = <fs_param>-atributo2.
      <fs_fktyp>-low = <fs_param>-atributo3.
      <fs_fktyp>-high = <fs_param>-atributo4.
    ENDIF.
    IF <fs_param>-campo = 'SUST_K02_INTERLOC'.
      APPEND INITIAL LINE TO rl_rcvprn ASSIGNING FIELD-SYMBOL(<fs_rcvprn>).
      <fs_rcvprn>-sign = <fs_param>-atributo1.
      <fs_rcvprn>-option = <fs_param>-atributo2.
      <fs_rcvprn>-low = <fs_param>-atributo3.
      <fs_rcvprn>-high = <fs_param>-atributo4.
    ENDIF.
  ENDLOOP.
  CHECK rl_fktyp IS NOT INITIAL.
  CHECK rl_rcvprn IS NOT INITIAL.

  CHECK control_record_out-rcvprn IN rl_rcvprn.

  DATA: ls_fktyp   TYPE vbrk-fktyp,
        ls_e1edk14 TYPE e1edk14.
  ls_e1edk14 = int_edidd-sdata.
  ls_fktyp = ls_e1edk14-orgid.
  CHECK ls_fktyp IN rl_fktyp.

  "
  " Buscamos el segmento y lo actualizamos.
  "
  DATA: ls_e1edk02 TYPE e1edk02,
        lv_vbeln   TYPE vbeln.
  LOOP AT int_edidd ASSIGNING FIELD-SYMBOL(<fs_edidd_k02>) WHERE segnam = 'E1EDK02' AND sdata(3) = '002'.
    ls_e1edk02 = <fs_edidd_k02>-sdata.
    lv_vbeln = ls_e1edk02-belnr.

    SELECT SINGLE *
      FROM vbfa
      INTO @DATA(ls_vbfa)
      WHERE vbeln = @lv_vbeln AND
            posnv = '000000' AND
            vbtyp_v = 'M'. "Factura.
    IF sy-subrc = 0.
      SELECT SINGLE *
        FROM vbrk
        INTO @DATA(ls_vbrk)
        WHERE vbeln = @ls_vbfa-vbelv.
    ENDIF.
    IF sy-subrc = 0.
      ls_e1edk02-belnr = ls_vbrk-vbeln.
      ls_e1edk02-DATUM = ls_vbrk-FKDAT.

      <fs_edidd_k02>-sdata = ls_e1edk02.
    ENDIF.

    EXIT. " Sólo tiene que existir 1.
  ENDLOOP.

ENDIF.

"
" SEIS 31.03.25 Quitar posiciones palets que importe sea cero.
" Es en los IDOCs de entrada cuando tengo relleno SEGNUM y PSGNUM!! :(
"
***    ls_e1edp01 = <fs_edidd_pos>-sdata.
***    IF ls_e1edp01-pstyv = 'ZHUP'.
***      CLEAR lv_borrar.
***      " Busco importe neto cero.
***      LOOP AT int_edidd ASSIGNING FIELD-SYMBOL(<fs_edidd_p26_hijo>) WHERE segnam = 'E1EDP26' AND psgnum = <fs_edidd_pos>-segnum.
***        ls_e1edp26 = <fs_edidd_p26_hijo>-sdata.
***        IF ls_e1edp26-qualf = '002' AND ls_e1edp26-betrg IS INITIAL.
***          lv_borrar = 'X'.
***        ENDIF.
***      ENDLOOP.
***
***      IF lv_borrar IS NOT INITIAL.
***        LOOP AT int_edidd ASSIGNING <fs_edidd_p26_hijo> WHERE segnam = 'E1EDP26' AND psgnum = <fs_edidd_pos>-segnum.
***          DELETE int_edidd.
***        ENDLOOP.
***        DELETE int_edidd INDEX lv_tabix.
***      ENDIF.
***    ENDIF.
"
IF int_edidd-segnam = 'E1EDS01' AND control_record_out-idoctp = 'INVOIC02'.
  DATA ls_e1eds01 TYPE e1eds01.

  ls_e1eds01 = int_edidd-sdata.
  CHECK ls_e1eds01-sumid = '001'. " Sólo con el total líneas. Así solo lo hacemos una vez.

  DATA: rl_pstyv  TYPE RANGE OF e1edp01-pstyv,
        rl_mestyp TYPE RANGE OF edidc-mestyp.

  SELECT *
    FROM zparametros
    INTO CORRESPONDING FIELDS OF TABLE lt_param
    WHERE clave = 'ZINVOIC02'.
  CHECK lt_param IS NOT INITIAL.

  LOOP AT lt_param ASSIGNING <fs_param>.
    IF <fs_param>-campo = 'BORRADO_POS_MESTYP'.
      APPEND INITIAL LINE TO rl_mestyp ASSIGNING FIELD-SYMBOL(<fs_mestyp>).
      <fs_mestyp>-sign = <fs_param>-atributo1.
      <fs_mestyp>-option = <fs_param>-atributo2.
      <fs_mestyp>-low = <fs_param>-atributo3.
      <fs_mestyp>-high = <fs_param>-atributo4.
    ENDIF.
    IF <fs_param>-campo = 'BORRADO_POS_PSTYV'.
      APPEND INITIAL LINE TO rl_pstyv ASSIGNING FIELD-SYMBOL(<fs_pstyv>).
      <fs_pstyv>-sign = <fs_param>-atributo1.
      <fs_pstyv>-option = <fs_param>-atributo2.
      <fs_pstyv>-low = <fs_param>-atributo3.
      <fs_pstyv>-high = <fs_param>-atributo4.
    ENDIF.
  ENDLOOP.
  CHECK rl_mestyp IS NOT INITIAL.
  CHECK rl_pstyv IS NOT INITIAL.

  IF control_record_out-mestyp IN rl_mestyp.

    DATA: ls_e1edp01          TYPE e1edp01,
          ls_e1edp26          TYPE e1edp26,
          lv_tabix            LIKE sy-tabix,
          lv_borrar           TYPE xflag,
          lt_index_borrar     TYPE TABLE OF sy-tabix,
          lt_index_borrar_tmp TYPE TABLE OF sy-tabix.


    CLEAR: lt_index_borrar, lt_index_borrar_tmp, lv_borrar.
    " Ahora ya tengo calculado todos los segmentos de las posiciones y puedo hacer las validaciones y borrados.
    LOOP AT int_edidd ASSIGNING FIELD-SYMBOL(<fs_edidd_pos>).
      lv_tabix = sy-tabix.
      IF <fs_edidd_pos>-segnam = 'E1EDP01'.

        IF lv_borrar IS NOT INITIAL.
          APPEND LINES OF lt_index_borrar_tmp TO lt_index_borrar.
          CLEAR lt_index_borrar_tmp.
        ENDIF.

        CLEAR lv_borrar.
        CLEAR lt_index_borrar_tmp.
        ls_e1edp01 = <fs_edidd_pos>-sdata.
        APPEND lv_tabix TO lt_index_borrar_tmp.
      ELSEIF  <fs_edidd_pos>-segnam = 'E1EDP02' OR
              <fs_edidd_pos>-segnam = 'E1EDP03' OR
              <fs_edidd_pos>-segnam = 'E1EDP19' OR
              <fs_edidd_pos>-segnam = 'E1EDP26' OR
              <fs_edidd_pos>-segnam = 'E1EDPA1' OR
              <fs_edidd_pos>-segnam = 'E1EDP05' OR
              <fs_edidd_pos>-segnam = 'E1EDP04' OR
              <fs_edidd_pos>-segnam = 'E1EDP28' OR
              <fs_edidd_pos>-segnam = 'E1EDP08' OR
              <fs_edidd_pos>-segnam = 'E1EDP30' OR
              <fs_edidd_pos>-segnam = 'E1EDPT1' OR
              <fs_edidd_pos>-segnam = 'E1EDPT2'.
        APPEND lv_tabix TO lt_index_borrar_tmp.
        "
        " Comprobamos que tenemos importe cero.
        "
        IF ls_e1edp01-pstyv IN rl_pstyv AND <fs_edidd_pos>-segnam = 'E1EDP26'.
          ls_e1edp26 = <fs_edidd_pos>-sdata.
          IF ls_e1edp26-qualf = '002' AND ( ls_e1edp26-betrg IS INITIAL OR ls_e1edp26-betrg = '0' ).
            lv_borrar = 'X'.
          ENDIF.
        ENDIF.
      ELSE.
        IF lv_borrar IS NOT INITIAL.
          APPEND LINES OF lt_index_borrar_tmp TO lt_index_borrar.
          CLEAR lt_index_borrar_tmp.
        ENDIF.
      ENDIF.
    ENDLOOP.

    SORT lt_index_borrar DESCENDING.

    LOOP AT lt_index_borrar INTO lv_tabix.
      DELETE int_edidd INDEX lv_tabix.
    ENDLOOP.

    "
    " Calculamos el nuevo número de líneas.
    "
    DATA: vl_num_lineas TYPE numc3.
    CLEAR vl_num_lineas.
    LOOP AT int_edidd ASSIGNING <fs_edidd_pos> WHERE segnam = 'E1EDP01'.
      ADD 1 TO vl_num_lineas.
    ENDLOOP.

    LOOP AT int_edidd ASSIGNING <fs_edidd_pos> WHERE segnam = 'E1EDS01'.
      ls_e1eds01 = <fs_edidd_pos>-sdata.
      IF ls_e1eds01-sumid = '001'.
        ls_e1eds01-summe = vl_num_lineas.
        <fs_edidd_pos>-sdata = ls_e1eds01.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDIF.
