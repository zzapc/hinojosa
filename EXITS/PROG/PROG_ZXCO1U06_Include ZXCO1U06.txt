*&---------------------------------------------------------------------*
*&  Include           ZXCO1U06
*&---------------------------------------------------------------------*
*"*"Lokale Schnittstelle:
*"       IMPORTING
*"             VALUE(HEADER_IMP) LIKE  CAUFVD STRUCTURE  CAUFVD
*"       EXPORTING
*"             VALUE(NO_UPDATE) LIKE  SY-DATAR
*"             VALUE(HEADER_EXP) LIKE  CAUFVD STRUCTURE  CAUFVD
*&---------------------------------------------------------------------*

DATA: ls_pp0030_orden_calc TYPE zspp0030_orden_calc_alv,
      lv_objnr             TYPE	j_objnr,
      lt_bapiret2          TYPE bapiret2_t.

DATA: lv_zztratos TYPE mara-zztratos,
      lt_text_tab TYPE STANDARD TABLE OF char2,
      lv_text     TYPE string,
      lv_char2    TYPE char2,
      lv_zzaditiv TYPE mara-zzaditiv.


DATA: lv_zmrp          TYPE string,
      lv_planchas_zpmp TYPE string,
      lv_planchas_zplp TYPE string.

FIELD-SYMBOLS: <wa_zmrp>          TYPE zsrpp0033,
               <lv_planchas_zpmp> TYPE labst, "cs_e_peinh,
               <lv_planchas_zplp> TYPE labst. "cs_e_peinh.


IF  header_imp-werks = '4000' AND header_imp-auart = 'ZC01'.
* Comprobar orden no liberada
  MOVE-CORRESPONDING header_imp TO header_exp.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gv_aufnr
    IMPORTING
      output = lv_objnr.

  CONCATENATE 'OR' lv_objnr INTO lv_objnr.
*  lv_objnr = |{ 'OR' }{ gv_aufnr ALPHA = IN }|.

  DATA: lv_stat TYPE j_status.
  SELECT SINGLE stat
    INTO lv_stat
    FROM jest
    WHERE objnr = lv_objnr AND
          stat = 'I0002' AND
          inact <> 'X'.
*  SELECT SINGLE stat
*    INTO @DATA(lv_stat)
*    FROM jest
*    WHERE objnr = @lv_objnr AND
*          stat = 'I0002' AND
*          inact <> 'X'.

  IF sy-subrc <> 0.

    MOVE-CORRESPONDING header_imp TO ls_pp0030_orden_calc.

    DATA: lv_matkl TYPE matkl.

    SELECT SINGLE matkl FROM mara
    INTO lv_matkl
    WHERE matnr = ls_pp0030_orden_calc-plnbez.

*    SELECT SINGLE matkl FROM mara
*    INTO @DATA(lv_matkl)
*    WHERE matnr = @ls_pp0030_orden_calc-plnbez.
    IF sy-subrc = 0.
*
      PERFORM obtener_tolerancias IN PROGRAM zrpp0030 USING lv_matkl
                        CHANGING ls_pp0030_orden_calc
                                 lt_bapiret2.

      IF lt_bapiret2 IS INITIAL.
        header_exp-zzacnhofab = ls_pp0030_orden_calc-zzacnhofab.
        header_exp-zzanchmaxfab = ls_pp0030_orden_calc-zzanchmaxfab.
        header_exp-zzanchminfab = ls_pp0030_orden_calc-zzanchminfab.
        header_exp-zzespmaxpl = ls_pp0030_orden_calc-zzespmaxpl.
        header_exp-zzespminpl = ls_pp0030_orden_calc-zzespminpl.
        header_exp-zzlargfab = ls_pp0030_orden_calc-zzlargfab.
        header_exp-zzlargmaxfab = ls_pp0030_orden_calc-zzlargmaxfab.
        header_exp-zzlargminfab = ls_pp0030_orden_calc-zzlargminfab.
        header_exp-zzpesoteomaxpl = ls_pp0030_orden_calc-zzpesoteomaxpl.
        header_exp-zzpesoteominpl = ls_pp0030_orden_calc-zzpesoteominpl.
        header_exp-zzpesoteopl = ls_pp0030_orden_calc-zzpesoteopl.
        header_exp-zzgramajeinput = ls_pp0030_orden_calc-zzgramajeinput.
      ELSE.
        CALL FUNCTION 'FINB_BAPIRET2_DISPLAY'
          EXPORTING
            it_message = lt_bapiret2.
      ENDIF.
    ENDIF.

  ENDIF.
ENDIF.

* EDIEGO CIPASI 32PP016 13/09/2017 -->
DATA: is_caufvdb TYPE caufvdb.
MOVE-CORRESPONDING header_imp TO is_caufvdb.

IF header_imp-werks = '4000'.
* Actualizamos tabla
  IF g_grid IS BOUND.
    g_grid->check_changed_data( ).
  ENDIF.

* Miramos si estamos cambiando versión de fabricación en la COR2 grabando directamente
  IF ( is_caufvdb-plnty NE zcl_im_zworkorder_update=>gv_plnty OR is_caufvdb-plnnr NE zcl_im_zworkorder_update=>gv_plnnr ) OR
     (  is_caufvdb-plnty EQ zcl_im_zworkorder_update=>gv_plnty AND is_caufvdb-plnnr EQ zcl_im_zworkorder_update=>gv_plnnr AND
        is_caufvdb-stlal NE zcl_im_zworkorder_update=>gv_stlal  ).

*   Calculamos tabla de nuevo
    zcl_im_zworkorder_update=>init_vers_alv(  iv_ddmm    = 'X'
                                              is_caufvdb = is_caufvdb ).

* EDIEGO 05/11/2017 -->
* Si venimos del ZMRP machacamos y si estamos guardando desde la COR1 o 2 ya trae los cambios de la clase del ALV. Parece código redundante
* Si guardamos con cambios del ALV y no estamos en el ZMRP
  ELSEIF ( gt_utillajes IS NOT INITIAL OR gt_borradas IS NOT INITIAL ) AND sy-cprog NE 'ZRPP0033'.
    CALL FUNCTION 'ZPP_SET_UTILLAJES'
      EXPORTING
        it_zttpm0007 = gt_utillajes
        it_borrados  = gt_borradas.
* EDIEGO 05/11/2017 <--
* Cuando venimos del report zrpp0031 pasamos las líneas del ALV a memoria compartida
  ELSE.
*   Obtenemos datos de utillajes
    CALL FUNCTION 'ZPP_GET_UTILLAJES'
      IMPORTING
        ev_copiatro  = header_exp-zzcopiatro
        ev_juegocli  = header_exp-zzjuegocli
        et_zttpm0007 = gt_utillajes
        et_borrados  = gt_borradas.
  ENDIF.

ENDIF.
* EDIEGO CIPASI 32PP016 13/09/2017 <--

* INI CIPASI - 06.10.17
* Cuando se crean las órdenes desde el ZMRP (tx. ZPP0041), se debe informar ciertos campos Z
IF  header_imp-werks = '4000' AND
  ( header_imp-auart = 'ZC01' OR header_imp-auart = 'ZC02' ).

  IF header_imp-aufnr IS INITIAL OR header_imp-aufnr = '%00000000001'.
    IF header_exp IS INITIAL.
      MOVE-CORRESPONDING header_imp TO header_exp. "DBM 17.10.2017 Se mueve inicialmente para todas.
    ENDIF.


    IF header_imp-matnr IS NOT INITIAL.
      SELECT SINGLE zztratos zzaditiv
        INTO (lv_zztratos, lv_zzaditiv)
        FROM mara
        WHERE matnr = header_imp-matnr.
      IF sy-subrc = 0.
        CLEAR: lt_text_tab.
        lv_text = lv_zztratos.
        CALL FUNCTION 'SOTR_SERV_STRING_TO_TABLE'
          EXPORTING
            text        = lv_text
            line_length = 2
          TABLES
            text_tab    = lt_text_tab.

        LOOP AT lt_text_tab INTO lv_char2.
          CASE lv_char2.
            WHEN 'CO'.
              header_exp-zzttocorona = 'X'.
            WHEN 'CX'.
              header_exp-zzcoex = 'X'.
            WHEN 'IM'.
              header_exp-zzimpresion = 'X'.
            WHEN 'TE'.
              header_exp-zzteji = 'X'.
          ENDCASE.
        ENDLOOP.

        CLEAR: lt_text_tab.
        lv_text = lv_zzaditiv.

        CALL FUNCTION 'SOTR_SERV_STRING_TO_TABLE'
          EXPORTING
            text        = lv_text
            line_length = 1
          TABLES
            text_tab    = lt_text_tab.

        LOOP AT lt_text_tab INTO lv_char2.
          CASE lv_char2.
            WHEN 'C'.
              header_exp-zzconductividad = 'X'.
            WHEN 'E'.
              header_exp-zzadespum = 'X'.
            WHEN 'H'.
              header_exp-zzadanthum = 'X'.
            WHEN 'I'.
              header_exp-zzadignifugo = 'X'.
            WHEN 'S'.
              header_exp-zzadantest = 'X'.
            WHEN 'U'.
              header_exp-zzaduv = 'X'.
          ENDCASE.
        ENDLOOP.
      ENDIF.
    ENDIF.


*   INI CGIJON: 19/10/17
*   COMPLETAMOS LA INFORMACIÓN DE LAS ÓRDENES CREADAS DESDE EL MRP
    lv_zmrp = '(ZRPP0033)WA_DATOS_PEDIDOS'.
    ASSIGN (lv_zmrp) TO <wa_zmrp>.
    IF sy-subrc = 0.

      lv_planchas_zpmp = '(ZRPP0033)GV_CANT_LOTE_PMP'.
      ASSIGN (lv_planchas_zpmp) TO <lv_planchas_zpmp>.

      lv_planchas_zplp = '(ZRPP0033)GV_CANT_LOTE_PLP'.
      ASSIGN (lv_planchas_zplp) TO <lv_planchas_zplp>.

      CALL FUNCTION 'ZMRP_DATOS_Z_AUFK'
        EXPORTING
          i_planchas_zpmp = <lv_planchas_zpmp>
          i_planchas_zplp = <lv_planchas_zplp>
          wa_mrp          = <wa_zmrp>
          i_auart         = header_imp-auart
        IMPORTING
          e_zzlgort       = header_exp-zzlgort
          e_zzdestcmcr    = header_exp-zzdestcmcr
          e_zzebeln4      = header_exp-zzebeln4
          e_zzebelp4      = header_exp-zzebelp4
          e_zzkwmeng      = header_exp-zzkwmeng
          e_zzkunnr4      = header_exp-zzkunnr4
          e_zzfec_entreg4 = header_exp-zzfec_entreg4
          e_zzmatventa    = header_exp-zzmatventa
          e_zzaufnr_ext   = header_exp-zzaufnr_ext.
    ENDIF.
*   FIN CGIJON: 19/10/17
  ENDIF.
* FIN CIPASI - 06.10.17

ENDIF.


"add jvm - creación de OFs desde pedido de traslado
IF header_imp-aufnr = '%00000000001'.
  MOVE-CORRESPONDING header_imp TO header_exp.
*  header_exp-zzsubco_ebeln = 45.
*  header_exp-zzsubco_ebelp = 45.
*  header_exp-kdauf_aufk = 25.
*  header_exp-kdpos_aufk = 10.
  DATA it_pila TYPE abap_callstack.
  CALL FUNCTION 'SYSTEM_CALLSTACK'
* EXPORTING
*   MAX_LEVEL          = 0
    IMPORTING
      callstack = it_pila
*     ET_CALLSTACK       =
    .

  DATA(lv_report) = zcl_ap_parametros=>get_atributo1( clave        = 'ZOFPEDIDO'
                                                 campo        = 'REPORT' ).

  READ TABLE it_pila WITH KEY mainprogram = lv_report TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    GET PARAMETER ID 'ZVBN' FIELD DATA(lv_vbeln).
    GET PARAMETER ID 'ZVBP' FIELD DATA(lv_vbelp).
    GET PARAMETER ID 'ZPEDC' FIELD DATA(lv_zzped).
    GET PARAMETER ID 'ZCLI' FIELD DATA(lv_zzcliente).
    GET PARAMETER ID 'ZEBELN' FIELD DATA(lv_ebeln).
    GET PARAMETER ID 'ZEBELP' FIELD DATA(lv_ebelp).
    IF lv_ebeln IS NOT INITIAL.

      IF lv_vbeln IS NOT INITIAL.
*APC20241212 Cambiamos los campos donde alimentamos el pedido de cliente
*        ASSIGN ('(SAPLCOBH)AFPO_BT-KDAUF') TO FIELD-SYMBOL(<kdauf>).
*        ASSIGN ('(SAPLCOBH)AFPO_BT-KDPOS') TO FIELD-SYMBOL(<kdpos>).
*
**    ASSIGN ('(SAPLCOBH)AFPO_BT[1]-KDAUF') TO FIELD-SYMBOL(<kdauf2>).
**    ASSIGN ('(SAPLCOBH)AFPO_BT[1]-KDPOS') TO FIELD-SYMBOL(<kdpos2>).
*
*        IF <kdauf> IS ASSIGNED.
*          <kdauf> = lv_vbeln.
*          <kdpos> = lv_vbelp.
*        ENDIF.
*
*        FIELD-SYMBOLS <lt_afpo> TYPE ccgld_afpob.
*        ASSIGN ('(SAPLCOBH)AFPO_BT[]') TO <lt_afpo>.
*        LOOP AT <lt_afpo> ASSIGNING FIELD-SYMBOL(<f>).
*          <f>-kdauf = lv_vbeln.
*          <f>-kdpos = lv_vbelp.
*        ENDLOOP.

        header_exp-zzvbeln = lv_vbeln.
        header_exp-zzposnr = lv_vbelp.
*FIN APC20241212
      ENDIF.

      header_exp-zzped_cliente = lv_zzped.
      header_exp-zzsubco_ebeln = lv_ebeln.
      header_exp-zzsubco_ebelp = lv_ebelp.
      header_exp-zzcliente     = lv_zzcliente.

    ENDIF.
  ENDIF.
ENDIF.
"INI JVM - 29/04/2024 - Modificar fecha de inicio extrema de la OF si cambia desde el reparto del pedido
*DATA it_pila TYPE abap_callstack.
*CALL FUNCTION 'SYSTEM_CALLSTACK'
** EXPORTING
**   MAX_LEVEL          = 0
*  IMPORTING
*    callstack = it_pila
**   ET_CALLSTACK       =
*  .
*READ TABLE it_pila WITH KEY mainprogram = 'SAPMV45A' TRANSPORTING NO FIELDS.
*IF sy-subrc = 0.
*
*  IF header_exp IS INITIAL.
*    header_exp = header_imp.
*  ENDIF.
*  header_exp-gstrp = header_exp-gltrp.
*  IF header_exp-gluzp > header_exp-gsuzp.
*    header_exp-gluzp = header_exp-gsuzp.
*  ENDIF.
*ENDIF.
"FJVM - 29/04/2024 - Modificar fecha de inicio extrema de la OF si cambia desde el reparto del pedido
