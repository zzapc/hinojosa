*&---------------------------------------------------------------------*
*&  Include           ZXM08U20
*&---------------------------------------------------------------------*
*IMPORTING
*"     VALUE(I_RBKPV) TYPE  MRM_RBKPV
*"  EXPORTING
*"     VALUE(E_RBKPV_ERS_CHANGE) TYPE  MRM_RBKPV_ERS_CHANGE
*"     VALUE(E_CHANGE) TYPE  C
*"  TABLES
*"      T_SELWENR STRUCTURE  EK08ERSWE
*"      T_SETTLE_DC STRUCTURE  EK08ERSDC OPTIONAL
*&---------------------------------------------------------------------*

  DATA: lt_pedido TYPE STANDARD TABLE OF zsmm0001,
        ls_pedido TYPE                   zsmm0001,
        budat     LIKE                   rbkp-budat,
        bldat     LIKE                   rbkp-bldat.

  DATA: lv_lifnr TYPE ekko-lifnr,
        lv_lifn2 TYPE ekpa-lifn2,
        lv_bvtyp TYPE bvtyp,
        lv_error.

* ini CGIJON - SAT 7000038937 - Ticket 66300 - Referencia autofacturas
  DATA: lv_numero TYPE nrquan.
  DATA: lv_numero_c TYPE c LENGTH 20.
  DATA: lv_numero_c8 TYPE c LENGTH 8.
  DATA: ret_code TYPE inri-returncode.
  DATA: lv_range TYPE inri-nrrangenr.
* fin CGIJON - SAT 7000038937 - Ticket 66300 - Referencia autofacturas


  bldat = i_rbkpv-bldat.
  budat = i_rbkpv-budat.

* GST - 04/05/2015 ->
  IF i_rbkpv-bukrs EQ '2030'.
    DATA: test(100)      VALUE '(RMMR1MRS)B_XTEST'.
    FIELD-SYMBOLS: <test>.
    ASSIGN (test) TO <test>.
    IF sy-subrc EQ 0
    AND <test> NE 'X'.
      DATA: t_fields LIKE sval OCCURS 0 WITH HEADER LINE,
            return_c.
      IMPORT t_fields[] FROM MEMORY ID 'SI'.
      IF t_fields[] IS NOT INITIAL
      AND sy-subrc EQ 0.
* GST - 04/05/2015 ->
*        READ TABLE t_fields INDEX 1.
*        MOVE t_fields-value TO e_rbkpv_ers_change-budat.
        e_change = 'X'.
*        EXPORT t_fields TO MEMORY ID 'SI'.

        MOVE-CORRESPONDING i_rbkpv TO e_rbkpv_ers_change.
        READ TABLE t_fields INDEX 1.

        READ TABLE t_fields WITH KEY fieldname = 'BUDAT'.
        IF sy-subrc EQ 0.

          MOVE t_fields-value TO: e_rbkpv_ers_change-budat,
                                  budat.

        ENDIF.
        READ TABLE t_fields WITH KEY fieldname = 'BLDAT'.
        IF sy-subrc EQ 0.
          MOVE t_fields-value TO: e_rbkpv_ers_change-bldat,
                                  bldat.
        ENDIF.


        e_change = 'X'.
        EXPORT t_fields TO MEMORY ID 'SI'.
* GST - 04/05/2015 <-
      ELSE.

        CLEAR: t_fields,
                return_c.
        REFRESH t_fields.
        t_fields-tabname = 'RBKP'.
        t_fields-fieldname = 'BLDAT'.
        t_fields-value = sy-datum.
* t_fields-FIELD_ATTR
        t_fields-field_obl = 'X'.
* t_fields-COMP_CODE
* t_fields-FIELDTEXT
* t_fields-COMP_TAB
* t_fields-COMP_FIELD
* t_fields-NOVALUEHLP
        APPEND t_fields.

        CLEAR: t_fields,
                return_c.
*        REFRESH t_fields.
        t_fields-tabname = 'RBKP'.
        t_fields-fieldname = 'BUDAT'.
        t_fields-value = sy-datum.
* t_fields-FIELD_ATTR
        t_fields-field_obl = 'X'.
* t_fields-COMP_CODE
* t_fields-FIELDTEXT
* t_fields-COMP_TAB
* t_fields-COMP_FIELD
* t_fields-NOVALUEHLP
        APPEND t_fields.



        CALL FUNCTION 'POPUP_GET_VALUES'
          EXPORTING
*           NO_VALUE_CHECK  = ' '
            popup_title     = text-an1
*           START_COLUMN    = '5'
*           START_ROW       = '5'
          IMPORTING
            returncode      = return_c
          TABLES
            fields          = t_fields
          EXCEPTIONS
            error_in_fields = 1
            OTHERS          = 2.
        IF return_c NE 'A'
        AND sy-subrc EQ 0.
* GST - 04/05/2015 ->
*          READ TABLE t_fields INDEX 1.
*          MOVE t_fields-value TO e_rbkpv_ers_change-budat.
*          e_change = 'X'.
*          EXPORT t_fields TO MEMORY ID 'SI'.

          MOVE-CORRESPONDING i_rbkpv TO e_rbkpv_ers_change.
*          READ TABLE t_fields INDEX 1.
*          MOVE t_fields-value TO e_rbkpv_ers_change-budat.
          READ TABLE t_fields WITH KEY fieldname = 'BUDAT'.
          IF sy-subrc EQ 0.
            MOVE t_fields-value TO: e_rbkpv_ers_change-budat,
                                     budat.
          ENDIF.

          READ TABLE t_fields WITH KEY fieldname = 'BLDAT'.
          IF sy-subrc EQ 0.
            MOVE t_fields-value TO: e_rbkpv_ers_change-bldat,
                                    bldat.
          ENDIF.


          e_change = 'X'.
          EXPORT t_fields TO MEMORY ID 'SI'.
* GST - 04/05/2015 <-
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
* GST - 04/05/2015 <-

  LOOP AT t_selwenr.
    CLEAR ls_pedido.
    ls_pedido-ebeln = t_selwenr-ebeln.
    COLLECT ls_pedido INTO lt_pedido.
  ENDLOOP.

  LOOP AT lt_pedido INTO ls_pedido.
    SELECT SINGLE lifnr INTO ls_pedido-lifnr
      FROM ekko
      WHERE ebeln = ls_pedido-ebeln.
    SELECT SINGLE lifn2 INTO ls_pedido-lifn2
      FROM ekpa
      WHERE ebeln = ls_pedido-ebeln
      AND   ebelp = '00000'
      AND   parvw = 'ZA'.
    MODIFY lt_pedido FROM ls_pedido.
  ENDLOOP.

  CALL FUNCTION 'Z_MM_AUTOFACTURA_CTAS'
    IMPORTING
      e_bvtyp                    = lv_bvtyp
      e_lifnr                    = lv_lifnr
      e_lifn2                    = lv_lifn2
    TABLES
      t_pedido                   = lt_pedido
    EXCEPTIONS
      pedidos_dif_cooperativas   = 1
      cta_cooperativista_sin_inf = 2
      ctas_sin_correspondencia   = 3
      OTHERS                     = 4.

  IF sy-subrc = 0 AND lv_bvtyp IS NOT INITIAL.
    IF e_change NE 'X'.
      e_change = 'X'.
      MOVE-CORRESPONDING i_rbkpv TO e_rbkpv_ers_change.
    ENDIF.
    e_rbkpv_ers_change-bvtyp = lv_bvtyp.

* JTM - Tema TRASERCO ->
    DATA: sw_hay_reg.
    CLEAR sw_hay_reg.
    TABLES: ztmm0012.
    SELECT SINGLE * FROM ztmm0012
       WHERE lifnr EQ lv_lifnr
         AND lifn2 EQ lv_lifn2
         AND bukrs EQ i_rbkpv-bukrs
*        AND gjahr EQ i_rbkpv-budat+0(4).
         AND gjahr EQ budat+0(4).
    IF sy-subrc EQ 0.
      MOVE 'X' TO sw_hay_reg.
    ELSE.
      SELECT SINGLE * FROM ztmm0012
      WHERE lifnr EQ lv_lifnr
        AND lifn2 EQ lv_lifn2
        AND bukrs EQ i_rbkpv-bukrs
*        AND gjahr EQ i_rbkpv-budat+0(4).
        AND gjahr EQ '9999'.
      IF sy-subrc EQ 0.
        MOVE 'X' TO sw_hay_reg.
      ENDIF.
    ENDIF.
*       IF sy-subrc EQ 0.
    IF sw_hay_reg EQ 'X'. " hay AF por conductor y no por cooperativa
      DATA: t_rbkp LIKE rbkp OCCURS 0 WITH HEADER LINE,
            t_rseg LIKE rseg OCCURS 0 WITH HEADER LINE.
*     Miramos todas las facturas para esa cooperativa
      DATA: gjahr_next LIKE rbkp-gjahr,
            gjahr_ant  LIKE rbkp-gjahr.
      gjahr_ant  = sy-datum+0(4) - 1.
      gjahr_next = sy-datum+0(4) + 1.
      SELECT * INTO CORRESPONDING FIELDS OF TABLE t_rbkp FROM rbkp
                      WHERE gjahr <= gjahr_next
                        AND gjahr >= gjahr_ant
*                           gjahr EQ i_rbkpv-budat+0(4)
                        AND lifnr EQ i_rbkpv-lifnr
                        AND bukrs EQ i_rbkpv-bukrs
                        AND ivtyp EQ '1'. " autofacturacion
*     Me quedo con facturas que
      DELETE t_rbkp WHERE NOT xblnr CO '0123456789 '.
      DELETE t_rbkp WHERE xblnr+0(1) EQ '5'. " facturas sin rango externo
      LOOP AT t_rbkp.
*       Busco para que cooperativa son las anteriores facturas
        SELECT * INTO CORRESPONDING FIELDS OF TABLE t_rseg
             FROM rseg WHERE belnr EQ t_rbkp-belnr
                         AND gjahr EQ t_rbkp-gjahr.
        LOOP AT t_rseg.
          SELECT SINGLE lifn2 INTO ls_pedido-lifn2
          FROM ekpa
          WHERE ebeln = t_rseg-ebeln
          AND   ebelp = '00000'
          AND   parvw = 'ZA'.
          DATA: xblnr_desde LIKE ztmm0012-desde.
          DATA: lv_awkey LIKE bkpf-awkey,
                ls_bkpf  TYPE bkpf.
* GST - 28/01/2016 - SAT 7000009419 ->
          CHECK ls_pedido-lifn2 EQ ztmm0012-lifn2
                AND sy-subrc EQ 0.
          CLEAR: lv_awkey, ls_bkpf.
          CONCATENATE t_rbkp-belnr t_rbkp-gjahr INTO lv_awkey.
          SELECT SINGLE * INTO ls_bkpf
            FROM bkpf
            WHERE bukrs = t_rbkp-bukrs
            AND awkey = lv_awkey
            AND awtyp = 'RMRP'.
          CHECK ls_bkpf IS NOT INITIAL AND ls_bkpf-xblnr CO '0123456789 '.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = ls_bkpf-xblnr
            IMPORTING
              output = xblnr_desde.
          CHECK xblnr_desde >= ztmm0012-desde.

*          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*            EXPORTING
*              input  = t_rbkp-xblnr
*            IMPORTING
*              output = xblnr_desde.
*
*          CHECK ls_pedido-lifn2 EQ ztmm0012-lifn2
*            AND xblnr_desde    >= ztmm0012-desde.
* GST - 28/01/2016 - SAT 7000009419 <-
          MOVE xblnr_desde TO ztmm0012-desde.
        ENDLOOP.
      ENDLOOP.
      ADD 1 TO ztmm0012-desde.
      MOVE ztmm0012-desde TO e_rbkpv_ers_change-xblnr.
    ELSE.
      "nueva logica - e_rbkpv_ers_change-xblnr y e_change = 'X'.
    ENDIF.

* JTM - Tema TRASERCO <-
  ELSE.
*-------------------------------------------------------------------------------------
* INI CGIJON - SAT 7000038937 - Ticket 66300 - Referencia autofacturas
*-------------------------------------------------------------------------------------
*  1. Buscar si la Sociedad aplica a la lógica de numeración para autofacturas
*  2.	Recuperar el campo NIF4 del proveedor: LFA1-STCD4
*  3.	Recuperar el prefijo a utilizar.
*  4.	Rellenar la Referencia de la factura e_rbkpv_ers_change-xblnr y e_change = 'X'.
*-------------------------------------------------------------------------------------


    DATA: test_1(100)      VALUE '(RMMR1MRS)B_XTEST'.
    FIELD-SYMBOLS: <test_1>.
    ASSIGN (test_1) TO <test_1>.

    IF sy-subrc EQ 0 AND <test_1> NE 'X'.
      IF e_change NE 'X'.
        e_change = 'X'.
        MOVE-CORRESPONDING i_rbkpv TO e_rbkpv_ers_change.
      ENDIF.


*  1. Buscar si la Sociedad aplica a la lógica de numeración para autofacturas
      SELECT SINGLE paval FROM ztmm0029
        INTO @DATA(lv_paval)
        WHERE bukrs = @i_rbkpv-bukrs.

      CHECK lv_paval IS NOT INITIAL.

*  2.	Recuperar el campo NIF4 del proveedor: LFA1-STCD4
      SELECT SINGLE stcd4 FROM lfa1
        INTO @DATA(lv_stcd4)
        WHERE lifnr = @i_rbkpv-lifnr.

      CHECK lv_stcd4 IS NOT INITIAL.

*  3.	Recuperar el prefijo a utilizar.
      SELECT SINGLE land1 FROM t001
        INTO @DATA(lv_land1)
        WHERE bukrs = @i_rbkpv-bukrs.

*    SELECT SINGLE blart FROM rbkp
*      INTO @DATA(lv_blart)
*      WHERE belnr =  @i_rbkpv-belnr AND
*            gjahr = @i_rbkpv-gjahr.

      SELECT SINGLE doccls FROM t003_i
        INTO @DATA(lv_doccls)
        WHERE land1 = @lv_land1 AND
              blart = @i_rbkpv-blart.

      SELECT SINGLE prefixcode, subobject FROM ofnum_es
        INTO (@DATA(lv_prefixcode), @DATA(lv_subobject))
        WHERE bukrs = @i_rbkpv-bukrs AND
             docclass = @lv_doccls AND
             subobject = @lv_stcd4 AND
             groupnumber = @lv_paval.

*  4.	Rellenar la Referencia de la factura e_rbkpv_ers_change-xblnr y e_change = 'X'.
      lv_range = lv_paval.

      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr             = lv_range
          object                  = 'J_1AOFFDOC'
          quantity                = '1'
          subobject               = lv_subobject
*         TOYEAR                  = '0000'
*         IGNORE_BUFFER           = ' '
        IMPORTING
          number                  = lv_numero
*         QUANTITY                =
          returncode              = ret_code
        EXCEPTIONS
          interval_not_found      = 1
          number_range_not_intern = 2
          object_not_found        = 3
          quantity_is_0           = 4
          quantity_is_not_1       = 5
          interval_overflow       = 6
          buffer_overflow         = 7
          OTHERS                  = 8.
      IF sy-subrc = 0.
        WRITE lv_numero TO lv_numero_c.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lv_numero_c
          IMPORTING
            output = lv_numero_c.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = lv_numero_c
          IMPORTING
            output = lv_numero_c8.


        CONCATENATE lv_prefixcode lv_numero_c8 INTO e_rbkpv_ers_change-xblnr.
*      e_change = 'X'.
      ENDIF.
    ENDIF.
* FIN CGIJON - SAT 7000038937 - Ticket 66300 - Referencia autofacturas
*-------------------------------------------------------------------------------------

  ENDIF.
