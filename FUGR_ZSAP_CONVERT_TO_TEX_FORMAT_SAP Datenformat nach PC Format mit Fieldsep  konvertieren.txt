FUNCTION zsap_convert_to_tex_format.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_FIELD_SEPERATOR) TYPE  CHAR01
*"     VALUE(I_LINE_HEADER) TYPE  CHAR01 OPTIONAL
*"     VALUE(I_FILENAME) LIKE  RLGRAP-FILENAME OPTIONAL
*"     VALUE(I_APPL_KEEP) TYPE  CHAR01 DEFAULT SPACE
*"  TABLES
*"      I_TAB_SAP_DATA TYPE  STANDARD TABLE
*"  CHANGING
*"     VALUE(I_TAB_CONVERTED_DATA) TYPE  TRUXS_T_TEXT_DATA OPTIONAL
*"  EXCEPTIONS
*"      CONVERSION_FAILED
*"----------------------------------------------------------------------
  FIELD-SYMBOLS: <f_source>.

  DATA:
    l_percentage(4)    TYPE         c,
    l_numc             TYPE         string,
    l_text80(80),
    l_text6(6),
    l_itab_entries     LIKE         sy-tabix,
    l_tabix            LIKE         sy-tabix,
    l_help_id          LIKE         tline-tdline,
    l_struc_raw_data   LIKE LINE OF i_tab_converted_data,
    l_struc_col_names  LIKE LINE OF i_tab_converted_data,
    l_max_field        LIKE         l_struc_raw_data,
    l_date_extern(30)  TYPE         c,
    l_type,
    l_edit_mask(10)    TYPE         c,
    l_len_string       TYPE         i,
    l_len_col_string   TYPE         i,
    l_len_field_sep    TYPE         i,
    l_start_string     TYPE         i,
    l_start_col_string TYPE         i,
    l_end_string       TYPE         i,
    l_end_col_string   TYPE         i,
    l_eol_string       TYPE         i,
    l_struc_index      LIKE         sy-index.

  CLEAR i_line_header.                 " is not supported yet.
  CONSTANTS: c_rc0 LIKE sy-subrc   VALUE 0,
  c_darl_number(12)     type c value '1234567890',
             c_rc4 LIKE sy-subrc   VALUE 4.

  CLEAR: i_tab_converted_data.
  REFRESH: i_tab_converted_data.

  DESCRIBE FIELD l_struc_raw_data LENGTH l_eol_string
                                    IN CHARACTER MODE.
  l_len_field_sep = strlen( i_field_seperator ).

  DESCRIBE TABLE i_tab_sap_data LINES l_itab_entries.
  LOOP AT i_tab_sap_data.
    l_tabix = sy-tabix.
    CLEAR: l_struc_index, l_struc_raw_data, l_start_string,
           l_start_col_string.
    IF sy-batch IS INITIAL.
      l_percentage = l_tabix / l_itab_entries * 100.
      l_text6 = l_tabix.
      CONDENSE l_text6 NO-GAPS.
      l_text80 = text-kon.
      REPLACE '&&&&&&' WITH l_text6 INTO l_text80.
      l_text6 = l_itab_entries.
      REPLACE '&&&&&&' WITH l_text6 INTO l_text80.
      CONDENSE l_text80.
      CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
        EXPORTING
          percentage = l_percentage
          text       = l_text80.
    ENDIF.
    DO.
      l_struc_index = l_struc_index + 1.
      CLEAR l_len_string.
      ASSIGN COMPONENT l_struc_index OF
               STRUCTURE i_tab_sap_data TO <f_source>.
      IF sy-subrc <> c_rc0.
        EXIT.
      ELSE.
*       header line versorgen
        IF l_tabix = 1 AND NOT i_line_header IS INITIAL.
          ASSIGN COMPONENT l_struc_index OF
                   STRUCTURE i_tab_sap_data TO <f_source>.
          DESCRIBE FIELD <f_source>  HELP-ID l_help_id.
          CONDENSE l_help_id.
          l_len_col_string = strlen( l_help_id ).
          IF l_len_col_string <> c_rc0.
            IF l_struc_index <> 1.
              l_struc_col_names+l_start_col_string(l_len_col_string) =
                                                   i_field_seperator.
              l_len_col_string = l_len_field_sep.
            ENDIF.
            l_end_col_string = l_start_col_string + l_len_col_string.
            IF l_end_col_string > l_eol_string.
              MESSAGE ID 'UX' TYPE 'E' NUMBER 898
                         WITH l_tabix l_struc_index
                              RAISING conversion_failed.
            ENDIF.
            l_struc_col_names+l_start_col_string(l_len_col_string) =
                                           l_help_id.
            l_start_col_string = l_start_col_string + l_len_col_string.
          ENDIF.
        ENDIF.
*       Special processing when field is type DATA
        DESCRIBE FIELD <f_source> TYPE l_type.
        CASE l_type.
          WHEN 'C'.
*            CONCATENATE SPACE <F_SOURCE> INTO L_NUMC SEPARATED BY SPACE.
*            ASSIGN L_NUMC TO <F_SOURCE>.
            IF <f_source> is not initial AND <f_source> CO c_darl_number.
              "Concatenar comilla sencilla delante de las cadenas de caracteres que solo contienen numero para que excel no se confunda
              CONCATENATE space <F_SOURCE> INTO L_NUMC SEPARATED BY space.
              ASSIGN L_NUMC TO <F_SOURCE>.
            ENDIF.
          WHEN 'P'.
            WRITE <f_source> TO l_date_extern.
            CATCH SYSTEM-EXCEPTIONS conversion_errors  = c_rc4.
              IF sy-subrc <> c_rc0.
                MESSAGE e899(ux) WITH l_type <f_source> l_help_id
                                      l_tabix RAISING conversion_failed.
              ENDIF.
            ENDCATCH.
            ASSIGN l_date_extern TO <f_source>.
          WHEN 'I'.                                         "N1855878
            WRITE <f_source> TO l_date_extern.
            CATCH SYSTEM-EXCEPTIONS conversion_errors  = c_rc4.
              IF sy-subrc <> c_rc0.
                MESSAGE e899(ux) WITH l_type <f_source> l_help_id
                                      l_tabix RAISING conversion_failed.
              ENDIF.
            ENDCATCH.
            ASSIGN l_date_extern TO <f_source>.
          WHEN 'X'.
            ASSIGN COMPONENT l_struc_index OF
                    STRUCTURE i_tab_sap_data TO <f_source> TYPE 'C'.
            WRITE <f_source> TO l_date_extern.
            ASSIGN l_date_extern TO <f_source>.
          WHEN 'T'.
            CLEAR l_date_extern.
            l_date_extern(2) = <f_source>(2).
            l_date_extern+2(1) = ':'.
            l_date_extern+3(2) = <f_source>+2(2).
            l_date_extern+5(1) = ':'.
            l_date_extern+6(2) = <f_source>+4(2).
            ASSIGN l_date_extern TO <f_source>.
          WHEN 'D'.
            CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
              EXPORTING
                date_internal = <f_source>
              IMPORTING
                date_external = l_date_extern
              EXCEPTIONS
                OTHERS        = c_rc4.
            IF sy-subrc <> c_rc0.
              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                    RAISING conversion_failed.
            ELSE.
              ASSIGN l_date_extern TO <f_source>.
            ENDIF.
          WHEN 'F'.
            CALL FUNCTION 'FLTP_CHAR_CONVERSION'
              EXPORTING
                input  = <f_source>
              IMPORTING
                flstr  = l_date_extern
              EXCEPTIONS
                OTHERS = c_rc4.
            IF sy-subrc <> c_rc0.
              MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                    RAISING conversion_failed.
            ELSE.
              ASSIGN l_date_extern TO <f_source>.
            ENDIF.
          WHEN OTHERS.
        ENDCASE.
*       remember der seperation character!
        IF l_struc_index <> 1.
          l_max_field+l_len_string(l_len_field_sep) = i_field_seperator.
          l_len_string = l_len_field_sep.
        ENDIF.
*        IF <F_SOURCE> CO C_DARL_NUMBER.
*          CONDENSE <F_SOURCE> NO-GAPS.
*        ELSE.
*          CONDENSE <F_SOURCE>.
*        ENDIF.
        l_max_field+l_len_string = <f_source>.
*       check the remaining space of target structure
        l_len_string = strlen( l_max_field ).
        CHECK l_len_string <> c_rc0.
        l_end_string = l_start_string + l_len_string.
        IF l_end_string > l_eol_string.
          MESSAGE ID 'UX' TYPE 'E' NUMBER 898
                     WITH l_tabix l_struc_index
                          RAISING conversion_failed.
        ENDIF.
        l_struc_raw_data+l_start_string(l_len_string) = l_max_field.
        l_start_string = l_start_string + l_len_string.
      ENDIF.
    ENDDO.
    IF l_tabix = 1 AND NOT l_struc_col_names IS INITIAL.
      APPEND l_struc_col_names TO i_tab_converted_data.
      CLEAR l_struc_col_names.
    ENDIF.
    IF NOT l_struc_raw_data IS INITIAL.
      APPEND l_struc_raw_data TO i_tab_converted_data.
    ENDIF.
  ENDLOOP.
ENDFUNCTION.
