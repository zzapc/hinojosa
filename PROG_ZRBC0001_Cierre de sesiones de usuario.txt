*&---------------------------------------------------------------------*
*& Report  ZRBC0001
*&
*&---------------------------------------------------------------------*
*& Autor: Carlos Vivó Jiménez
*& Ticket: 61379
*& Fecha: 3/06/2020
*&
*& Descripción: Cerrar sesiones de usuario
*&---------------------------------------------------------------------*
REPORT zrbc0001.

CLASS lcl_handle_events DEFINITION DEFERRED.
DATA gr_table TYPE REF TO cl_salv_table.
DATA gr_events TYPE REF TO lcl_handle_events.
DATA layout_settings TYPE REF TO cl_salv_layout.
DATA layout_key      TYPE salv_s_layout_key.
DATA columns TYPE REF TO cl_salv_columns_table.
DATA column  TYPE REF TO cl_salv_column.
DATA not_found TYPE REF TO cx_salv_not_found.
DATA functions TYPE REF TO cl_salv_functions_list.
DATA display_settings TYPE REF TO cl_salv_display_settings.

DATA t_users TYPE TABLE OF zbc_user_logout.

*---------------------------------------------------------------------*
*       CLASS lcl_handle_events DEFINITION
*---------------------------------------------------------------------*
* §5.1 define a local class for handling events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_events DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.
ENDCLASS.                    "lcl_handle_events DEFINITION

*---------------------------------------------------------------------*
*       CLASS lcl_handle_events IMPLEMENTATION
*---------------------------------------------------------------------*
* §5.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_events IMPLEMENTATION.
  METHOD on_user_command.
    DATA: lo_selections TYPE REF TO cl_salv_selections.
    DATA lt_rows TYPE salv_t_row.
    DATA ls_row TYPE sytabix.

    lo_selections = gr_table->get_selections( ).
    lt_rows = lo_selections->get_selected_rows( ).

    IF lines( lt_rows ) GT 1.
      MESSAGE 'Seleccione un único usuario' TYPE 'E'.
    ENDIF.

    READ TABLE lt_rows INTO ls_row INDEX 1.

    READ TABLE t_users INTO DATA(user) INDEX ls_row.

    IF user-usuario IS NOT INITIAL.
      CALL FUNCTION 'TH_DELETE_USER'
        EXPORTING
          user            = user-usuario
          client          = '100'
        EXCEPTIONS
          authority_error = 1
          OTHERS          = 2.

      IF sy-subrc <> 0.
        MESSAGE 'No se ha podido finalizar la sesión' TYPE 'E'.
      ELSE.
        MESSAGE 'Sesiones finalizadas' TYPE 'I'.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "on_user_command
ENDCLASS.                    "lcl_handle_events IMPLEMENTATION

START-OF-SELECTION.

  SELECT * FROM zbc_user_logout
    INTO TABLE t_users
    WHERE admin EQ sy-uname.


  IF t_users IS INITIAL.
    MESSAGE 'No tiene autorización para finalizar sesiones de usuario' TYPE 'E'.
  ENDIF.

END-OF-SELECTION.

* Instanciar ALV desde tabla interna
  cl_salv_table=>factory( IMPORTING r_salv_table = gr_table CHANGING t_table = t_users ).

* Disposición ALV
  layout_settings = gr_table->get_layout( ).
  layout_key-report = sy-repid.
  layout_settings->set_key( layout_key ).
  layout_settings->set_save_restriction( if_salv_c_layout=>restrict_none ).

* Optimizar columnas
  columns = gr_table->get_columns( ).
  columns->set_optimize( ).

* Modificar/ocultar columnas
  TRY.
      column = columns->get_column( 'MANDT' ).
      column->set_visible( if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found INTO not_found.
  ENDTRY.
  TRY.
      column = columns->get_column( 'ADMIN' ).
      column->set_visible( if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found INTO not_found.
  ENDTRY.

* Funciones ALV activar
  functions = gr_table->get_functions( ).
  functions->set_all( abap_false ).

*... §3.2 include own functions by setting own status
  gr_table->set_screen_status(  pfstatus      =  'B'
                                report        =  sy-repid
                                set_functions = gr_table->c_functions_all ).

*... §6 register to the events of cl_salv_table
  DATA: lr_events TYPE REF TO cl_salv_events_table.

  lr_events = gr_table->get_event( ).
  CREATE OBJECT gr_events.
*... §6.1 register to the event USER_COMMAND
  SET HANDLER gr_events->on_user_command FOR lr_events.

* Opciones generales ALV
  display_settings = gr_table->get_display_settings( ).
  display_settings->set_striped_pattern( if_salv_c_bool_sap=>true ).
  display_settings->set_list_header( 'Selección de usuarios a finalizar' ).

  gr_table->display( ).
