
class ZHCL_ENTREGAS_CORE definition
  public
  final
  create public .

public section.

  methods CONTABILIZAR
    returning
      value(TP_RETURN) type BAPIRET2_T .
  methods CREAR_EE_DESDE_ES
    exporting
      !LP_VBELN_EE type LIKP-VBELN
      value(TP_RETURN) type BAPIRET2_T .
  methods EM_UN_PASO
    returning
      value(TP_RETURN) type BAPIRET2_T .
  methods GET_LOGOS_NORMAS
    returning
      value(WP_LOGOS_NORMAS) type ZHPG_S_PATH_LOGOS_NORMAS .
  methods GET_VBELN
    returning
      value(LP_VBELN) type LIKP-VBELN .
  methods CONSTRUCTOR
    importing
      !LP_VBELN type LIKP-VBELN .
protected section.
private section.

  data GS_LIKP type LIKP .
  data GV_VBELN type LIKP-VBELN .
endclass. "ZHCL_ENTREGAS_CORE definition
class ZHCL_ENTREGAS_CORE implementation.
  METHOD constructor.
    gv_vbeln = lp_vbeln.

    SELECT SINGLE vbeln, vkorg
      INTO CORRESPONDING FIELDS OF @gs_likp
      FROM likp
      WHERE vbeln = @lp_vbeln.

  ENDMETHOD.
  METHOD contabilizar.
    DATA: ls_vbkok TYPE vbkok,
          lt_prot  TYPE TABLE OF prott,
          lv_error TYPE xfeld.


    ls_vbkok-wadat_ist  = sy-datum.
    ls_vbkok-vbeln_vl   = gv_vbeln.
    ls_vbkok-komue      = 'X'.
    ls_vbkok-wabuc      = 'X'.
    CALL FUNCTION 'HU_PACKING_REFRESH'.
    CALL FUNCTION 'LE_DELIVERY_REFRESH_BUFFER'
      EXCEPTIONS
        no_key_specified = 1
        OTHERS           = 2.

    CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
      EXPORTING
        vbkok_wa       = ls_vbkok
        delivery       = gv_vbeln
        update_picking = 'X'
      IMPORTING
        ef_error_any   = lv_error
      TABLES
        prot           = lt_prot
      EXCEPTIONS
        error_message  = 1
        OTHERS         = 2.

    IF sy-subrc <> 0.
      APPEND INITIAL LINE TO tp_return ASSIGNING FIELD-SYMBOL(<fs_return>).
      <fs_return> = VALUE #( type = sy-msgty id = sy-msgid number = sy-msgno
                             message_v1 = sy-msgv1 message_v2 = sy-msgv2 message_v3 = sy-msgv3 message_v4 = sy-msgv4 ).
    ENDIF.

    LOOP AT lt_prot ASSIGNING FIELD-SYMBOL(<fs_prot>) WHERE msgty CA 'EA'.
      APPEND INITIAL LINE TO tp_return ASSIGNING <fs_return>.
      <fs_return> = VALUE #( type = <fs_prot>-msgty id = <fs_prot>-msgid number = <fs_prot>-msgno
                             message_v1 = <fs_prot>-msgv1 message_v2 = <fs_prot>-msgv2 message_v3 = <fs_prot>-msgv3 message_v4 = <fs_prot>-msgv4 ).
    ENDLOOP.



  ENDMETHOD.
  METHOD crear_ee_desde_es.
    CLEAR: lp_vbeln_ee, tp_return.

    DATA: lv_vbeln_ee TYPE vbeln_vl,
          lt_return   TYPE TABLE OF bapiret2.


    CALL FUNCTION 'SHP_IBDLV_CREATE_FROM_OBDLV'
      EXPORTING
        if_outb_deliv_num = gv_vbeln
      IMPORTING
        ef_inb_deliv_num  = lv_vbeln_ee
      TABLES
        et_return         = tp_return.
*    zcl_seis_odata_utils=>lanzar_excepcion( bapiret2_t = lt_return ) .

    lp_vbeln_ee = lv_vbeln_ee.


    """FM Z_WM_RF_FIN_TRANSPORTE


*          CLEAR wl_vbsk.
*          wl_vbsk-mandt = sy-mandt.
*          wl_vbsk-ernam = sy-uname.
*          wl_vbsk-erdat = sy-datum.
*          wl_vbsk-uzeit = sy-uzeit.
*          wl_vbsk-smart = 'L'.
*
*          CLEAR: tl_komdlgn, tl_vbfs, tl_vbls.
*          LOOP AT tl_lips ASSIGNING <fs_lips> WHERE vbeln = <fs_vttp>-vbeln.
*            DATA(vl_kunnr_dest)  = CONV kna1-kunnr( rl_param_1paso->get_atr1( campo = 'ZPT4' valor = <fs_lips>-werks valor2 = <fs_lips>-lgort ) ).
*            vl_kunnr_dest = |{ vl_kunnr_dest ALPHA = IN }|.
*            CHECK vl_kunnr_dest IS NOT INITIAL AND vl_kunnr_dest = <fs_lips>-kunnr.
*
*            READ TABLE tl_ekpo ASSIGNING FIELD-SYMBOL(<fs_ekpo>) WITH KEY ebeln = <fs_lips>-vgbel
*                                                                          ebelp = <fs_lips>-vgpos.
*            CHECK sy-subrc = 0.
*
*
*            APPEND INITIAL LINE TO tl_komdlgn ASSIGNING FIELD-SYMBOL(<fs_komdlgn>).
*            <fs_komdlgn>-lfdat = sy-datum.
*            <fs_komdlgn>-lifnr = <fs_lips>-lifnr.
*            <fs_komdlgn>-arktx = <fs_lips>-arktx.
*            <fs_komdlgn>-matnr = <fs_lips>-matnr.
*            <fs_komdlgn>-charg = <fs_lips>-charg.
*            <fs_komdlgn>-lfart = 'EL'.
*
*            <fs_komdlgn>-uebtk = <fs_lips>-uebtk.
*            <fs_komdlgn>-uebto = <fs_lips>-uebto.
*            <fs_komdlgn>-untto = <fs_lips>-untto.
*            <fs_komdlgn>-werks = <fs_ekpo>-werks.
*            <fs_komdlgn>-lgort = <fs_ekpo>-lgort.
*            <fs_komdlgn>-lfimg = <fs_lips>-lfimg.
*            <fs_komdlgn>-vrkme = <fs_lips>-vrkme.
*            <fs_komdlgn>-meins = <fs_lips>-meins.
*            <fs_komdlgn>-umvkz = <fs_lips>-umvkz.
*            <fs_komdlgn>-umvkn = <fs_lips>-umvkn.
*            <fs_komdlgn>-vgbel = <fs_lips>-vgbel.
*            <fs_komdlgn>-vgpos = <fs_lips>-vgpos.
*            <fs_komdlgn>-vgtyp = <fs_lips>-vgtyp. "<fs_komdlgn>-vgtyp = 'V'.
*            <fs_komdlgn>-kzazu = <fs_lips>-kzazu. "<fs_komdlgn>-kzazu = 'X'.
*            <fs_komdlgn>-verur = <fs_lips>-verur.
*            <fs_komdlgn>-lifex = <fs_lips>-lifex.
*          ENDLOOP.
*
*          CHECK tl_komdlgn IS NOT INITIAL.
*          CALL FUNCTION 'GN_DELIVERY_CREATE'
*            EXPORTING
*              vbsk_i   = wl_vbsk
*            IMPORTING
*              vbsk_e   = wl_vbsk
*            TABLES
*              xkomdlgn = tl_komdlgn
*              xvbfs    = tl_vbfs
*              xvbls    = tl_vbls
*              xxlips   = tl_xlips
*            EXCEPTIONS
*              OTHERS   = 1.
*
*          READ TABLE tl_vbfs ASSIGNING FIELD-SYMBOL(<fs_vbfs>) WITH KEY msgty = 'E'.
*          IF sy-subrc <> 0.
*            READ TABLE tl_vbls ASSIGNING FIELD-SYMBOL(<fs_vbls>) INDEX 1.
*            CHECK sy-subrc = 0.
*          ELSE.
*            DATA(vl_msgno) = CONV sy-msgno( <fs_vbfs>-msgno ).
*            PERFORM mensaje USING <fs_vbfs>-msgty <fs_vbfs>-msgid vl_msgno <fs_vbfs>-msgv1 <fs_vbfs>-msgv2 <fs_vbfs>-msgv3 <fs_vbfs>-msgv4 CHANGING tt_log[].
*            MOVE abap_true TO error.
*          ENDIF.


  ENDMETHOD.
  METHOD em_un_paso.
    DATA(rl_param_1paso) = NEW zcl_ap_parametros( 'ZMMEE1PASO' ).

    SELECT lips~vbeln, likp~lifnr, lips~arktx, lips~matnr, lips~charg, lips~uebtk, lips~uebto, lips~untto, lips~werks, lips~lgort, lips~lfimg,
           lips~vrkme, lips~meins, lips~umvkz, lips~umvkn, lips~vgbel, lips~vgpos, lips~vgtyp, likp~kzazu, likp~verur, likp~lifex, likp~vstel, likp~kunnr
      INTO TABLE @DATA(tl_lips)
      FROM lips INNER JOIN likp ON likp~vbeln = lips~vbeln
      WHERE lips~vbeln = @gv_vbeln AND
            lips~pstyv NOT LIKE 'ZHU%'.


    DATA lv_found TYPE xfeld.
    LOOP AT tl_lips ASSIGNING FIELD-SYMBOL(<fs_lips>).
      DATA(lv_kunnr_dest)  = CONV kna1-kunnr( rl_param_1paso->get_atr1( campo = 'ZPT4' valor = <fs_lips>-werks valor2 = <fs_lips>-lgort ) ).
      lv_kunnr_dest = |{ lv_kunnr_dest ALPHA = IN }|.
      IF <fs_lips>-kunnr = lv_kunnr_dest.
        lv_found = 'X'.
        EXIT.
      ENDIF.
    ENDLOOP.

    CHECK lv_found = 'X'.

    crear_ee_desde_es( IMPORTING lp_vbeln_ee = DATA(lv_vbeln_ee)
                                 tp_return   = tp_return ).
    LOOP AT tp_return ASSIGNING FIELD-SYMBOL(<fs_return>) WHERE type CA 'EA'.
      ROLLBACK WORK.
      RETURN.
    ENDLOOP.


    " Contabilizamos SM de la entrega creada
    IF lv_vbeln_ee IS NOT INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      DATA(lo_entrega_ee) = NEW zhcl_entregas_core( lv_vbeln_ee ).
      tp_return = lo_entrega_ee->contabilizar( ).

      LOOP AT tp_return ASSIGNING <fs_return> WHERE type CA 'EA'.
        ROLLBACK WORK.
        RETURN.
      ENDLOOP.
    ENDIF.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.


  ENDMETHOD.
  METHOD get_logos_normas.

    DATA tl_dir_list  TYPE TABLE OF epsfili.

    SELECT SINGLE dirname
      INTO @DATA(vl_dirname)
      FROM user_dir
      WHERE aliass = 'Z_LOGOS'.
    IF sy-subrc = 0.
      DATA(vl_dir_name) = CONV epsf-epsdirnam( vl_dirname ).

      CALL FUNCTION 'EPS_GET_DIRECTORY_LISTING'
        EXPORTING
          dir_name               = vl_dir_name
        TABLES
          dir_list               = tl_dir_list
        EXCEPTIONS
          invalid_eps_subdir     = 1
          sapgparam_failed       = 2
          build_directory_failed = 3
          no_authorization       = 4
          read_directory_failed  = 5
          too_many_read_errors   = 6
          empty_directory_list   = 7
          OTHERS                 = 8.
      SORT tl_dir_list BY name DESCENDING.
      DATA vl_idx TYPE num2.

      LOOP AT tl_dir_list ASSIGNING FIELD-SYMBOL(<fs_dir_list>) WHERE name CP |ALB_{ gs_likp-vkorg }_*.jpg|.
        ADD 1 TO vl_idx.
        ASSIGN COMPONENT |PATH{ vl_idx }| OF STRUCTURE wp_logos_normas TO FIELD-SYMBOL(<fs_path>).
        IF sy-subrc = 0.
          <fs_path> = vl_dir_name && '/' && <fs_dir_list>-name.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.
  METHOD get_vbeln.
    lp_vbeln = gv_vbeln.
  ENDMETHOD.
