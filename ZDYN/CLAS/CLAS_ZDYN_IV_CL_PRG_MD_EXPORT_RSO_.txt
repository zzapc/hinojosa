
class ZDYN_IV_CL_PRG_MD_EXPORT_RSO definition
  public
  create public .

public section.

  class-data MC_TEXT_016 type STRING .
  class-data MC_TEXT_058 type STRING .

  methods REPLACE_INCORRECT_DIR_CHARS
    changing
      !C_STR type ANY .
  methods MD_ADD_SUP_BANK_XML_CONTENT
    importing
      !IC_HTML_CODEPAGE type EPSTECO-LINE
      !II_UPTOROWS type I
      !GC_SB_FILE type ANY
      !IB_SEPARATE_FILES type ABAP_BOOL
      !GC_SB_CL_PATH type SAPB-SAPPFAD
      !I_FILENAME type ANY optional
      !IB_NO_TRAIL type ABAP_BOOL
      !IB_SAVE_LOCAL type ABAP_BOOL
    changing
      !GT_SUP_BANK_TMP type ZDYN_IV_TT_VMDE_SB
      !GT_SUP_BANK type ZDYN_IV_TT_SUP_BANK_MDXPRT_RSO
      !GT_XMLSTRINGS type ZDYN_TT_MD_EXPORT_LINE_NOSTRUC .
  methods MD_ADD_SUPPLIER_XML_CONTENT
    importing
      !IC_HTML_CODEPAGE type EPSTECO-LINE
      !II_UPTOROWS type I
      !GC_S_FILE type ANY
      !IB_SEPARATE_FILES type ABAP_BOOL
      !GC_S_CL_PATH type SAPB-SAPPFAD
      !I_FILENAME type ANY optional
      !IB_NO_TRAIL type ABAP_BOOL
      !IB_SAVE_LOCAL type ABAP_BOOL
      !IB_DISABLE_BLOCKED type ABAP_BOOL
    changing
      !GT_SUPPLIER_TMP type ZDYN_IV_TT_VMDE_O
      !GT_SUPPLIER type ZDYN_IV_TT_SUPPLIER_MDXPRT_RSO
      !GT_XMLSTRINGS type ZDYN_TT_MD_EXPORT_LINE_NOSTRUC .
protected section.
private section.

  methods CREATE_DIR_LOCAL
    importing
      !I_FILE type ANY .
  methods FINALIZE_FILE
    importing
      !IS_FILE type RLGRAP-FILENAME
      !IB_SAVE_LOCAL type ABAP_BOOL
      !IS_PATH type STRING .
  methods MD_SAVE_FILE_USR_SIDE
    importing
      !IC_PATH type ANY
      !IC_TARGETPATH type ANY .
  methods MD_PREPARE_SUP_BANK_XML
    importing
      !IST_SUPPLIERBANKDATA type ZDYN_IV_S_SUP_BANK_MDXPRT_RSO
      !IB_NO_TRAIL type ABAP_BOOL
    changing
      !CT_XMLSTRINGS type ZDYN_TT_MD_EXPORT_LINE_NOSTRUC .
  methods MD_ADD_SUPPLIERBANK_XML_HEADER
    importing
      !IC_HTML_CODEPAGE type EPSTECO-LINE
    changing
      !CT_XMLSTRINGS type ZDYN_TT_MD_EXPORT_LINE_NOSTRUC .
  methods ADD_SUPPLIERBANK_XML_FOOTER
    importing
      !I_FILENAME type ANY .
  methods ADD_SUPPLIER_XML_FOOTER
    importing
      !I_FILENAME type ANY .
  methods MD_ADD_SUPPLIER_XML_HEADER
    importing
      !IC_HTML_CODEPAGE type EPSTECO-LINE
    changing
      !CT_XMLSTRINGS type ZDYN_TT_MD_EXPORT_LINE_NOSTRUC .
  methods MD_PREPARE_SUPPLIER_XML
    importing
      !IST_SUPPLIERDATA type ZDYN_IV_S_SUPPLIER_MDXPRT_RSO
      !IB_NO_TRAIL type ABAP_BOOL
      !IB_DISABLE_BLOCKED type ABAP_BOOL
    changing
      !CT_XMLSTRINGS type ZDYN_TT_MD_EXPORT_LINE_NOSTRUC .
  methods GET_PAYMENT_TERM_TEXT
    importing
      !IS_DATA type ZDYN_IV_S_SUPPLIER_MDXPRT_RSO
    returning
      value(ES_PAYMENT_TERM) type STRING .
  methods GET_PAYMENT_METHOD_TEXT
    importing
      !IS_DATA type ZDYN_IV_S_SUPPLIER_MDXPRT_RSO
    returning
      value(ES_PAYMENT_METHOD) type STRING .
  methods CREATE_DIR
    changing
      !CC_FILE type ANY .
  methods ADJUST_FILES_AND_DIR
    importing
      !IS_COMP_CODE type BUKRS
      !IS_FILE type ANY
      !IB_SEPARATE_FILES type ABAP_BOOL
      !IB_SAVE_LOCAL type ABAP_BOOL
    changing
      !CS_FILE_SERVER type RLGRAP-FILENAME
      !CS_PATH type STRING .
  methods CREATE_SERVER_DIRECTORY4FILE
    importing
      !IC_FILE type ANY
    exceptions
      ERROR_OCCURED .
endclass. "ZDYN_IV_CL_PRG_MD_EXPORT_RSO definition
class ZDYN_IV_CL_PRG_MD_EXPORT_RSO implementation.
METHOD ADD_SUPPLIER_XML_FOOTER.

  DATA:
    lt_xmlstrings TYPE zdyn_tt_md_export_line_nostruc.

  APPEND '</Suppliers>' TO lt_xmlstrings.

  PERFORM md_save_data_in_file IN PROGRAM zdyn_iv_prg_md_export_rso
    TABLES  lt_xmlstrings
    USING   i_filename.

ENDMETHOD.
METHOD add_supplierbank_xml_footer.

  DATA:
    lt_xmlstrings TYPE zdyn_tt_md_export_line_nostruc.

  APPEND '</SupplierBankAccounts>' TO lt_xmlstrings.

  PERFORM md_save_data_in_file IN PROGRAM zdyn_iv_prg_md_export_rso
    TABLES  lt_xmlstrings
    USING   i_filename.

ENDMETHOD.
METHOD adjust_files_and_dir.

  DATA:
    ls_folder TYPE string,
    ls_text   TYPE char100, "t001-butxt,
    ls_file   TYPE string.

  CHECK ib_separate_files = abap_true.

  ls_file = is_file.

  SELECT SINGLE butxt INTO ls_text FROM t001 WHERE bukrs = is_comp_code.

  replace_incorrect_dir_chars( CHANGING c_str = ls_text ).

  CONCATENATE ls_text '\' ls_file INTO ls_folder.
  IF ib_save_local EQ abap_false.
    REPLACE ls_file WITH ls_folder INTO cs_file_server.
    create_dir( CHANGING cc_file = cs_file_server ).
  ELSE.
    REPLACE ls_file WITH ls_folder INTO cs_path.
    create_dir_local( cs_path ).
  ENDIF.

ENDMETHOD.
METHOD create_dir.

  create_server_directory4file(
    EXPORTING  ic_file       = cc_file
    EXCEPTIONS error_occured = 1 ).
  CHECK sy-subrc <> 0.

  WRITE: /10 cc_file, mc_text_016.
  CLEAR cc_file.

ENDMETHOD.
METHOD create_dir_local.

  DATA: lc_dir      TYPE string,
        lc_dr       TYPE pcfile-drive,
        lc_file     TYPE string,
        lr_frontend TYPE REF TO cl_gui_frontend_services,
        li_rc       TYPE i.

  CREATE OBJECT lr_frontend.

  lc_file = i_file.
  CALL FUNCTION 'CH_SPLIT_FILENAME'
    EXPORTING
      complete_filename = lc_file
    IMPORTING
      drive             = lc_dr
      path              = lc_dir
    EXCEPTIONS
      OTHERS            = 0.
  IF lc_dr IS NOT INITIAL.
    CONCATENATE lc_dr ':' lc_dir INTO lc_dir.
  ENDIF.

  lr_frontend->directory_create( EXPORTING directory                 = lc_dir
                                 CHANGING  rc                        = li_rc
                                 EXCEPTIONS directory_already_exists = 0
                                            OTHERS                   = 0 ).

ENDMETHOD.
METHOD create_server_directory4file.

**********************************************************************
* CAUTION
*
* This method is a copy of ZDYN_CL_TOOLS->CREATE_SERVER_DIRECTORY4FILE
* If something is changed here - do changes in the twin method
*
**********************************************************************

  DATA: lc_dir  TYPE string,
        lc_dr   TYPE pcfile-drive,
        lc_dir2 TYPE btch0000-text80,
        lc_file TYPE  string.

  DATA: lc_com TYPE rlgrap-filename.

  lc_file = IC_FILE.
  CALL FUNCTION 'CH_SPLIT_FILENAME'
    EXPORTING
      complete_filename = lc_file
    IMPORTING
      drive             = lc_dr
      path              = lc_dir
    EXCEPTIONS
      OTHERS            = 0.
  IF lc_dr IS NOT INITIAL.
    CONCATENATE lc_dr ':' lc_dir INTO lc_dir.
  ENDIF.

  lc_dir2 = lc_dir.

  CALL FUNCTION 'PFL_CHECK_DIRECTORY'
    EXPORTING
      directory         = lc_dir2
    EXCEPTIONS
      pfl_dir_not_exist = 1.

  CHECK sy-subrc = 1.

  CONCATENATE '"' lc_dir '"' INTO lc_dir.

* execute create command
  CONCATENATE 'cmd /c mkdir' lc_dir INTO lc_com SEPARATED BY space.
  CALL 'SYSTEM' ID 'COMMAND' FIELD lc_com.

* check if directory created
  CALL FUNCTION 'PFL_CHECK_DIRECTORY'
    EXPORTING
      directory         = lc_dir2
    EXCEPTIONS
      pfl_dir_not_exist = 1.

  CHECK sy-subrc = 1.
  RAISE error_occured.

ENDMETHOD.
METHOD finalize_file.

  DATA: lb_file_closed TYPE abap_bool.

  PERFORM md_close_file  IN PROGRAM zdyn_iv_prg_md_export_rso
    USING     is_file
              ib_save_local
    CHANGING  lb_file_closed.

* Save XML file to HDD on client side
  CHECK ib_save_local EQ abap_true AND lb_file_closed EQ abap_true.

  IF strlen( is_path ) > 70.
    WRITE: /10 is_path, mc_text_058.
  ENDIF.

  md_save_file_usr_side( ic_path       = is_file
                         ic_targetpath = is_path ).

ENDMETHOD.
METHOD get_payment_method_text.

  DATA: lt_payment_meth LIKE RANGE OF is_data-zwels,
        ls_payment_meth LIKE LINE OF lt_payment_meth,
        li_idx          TYPE i,
        lt_texts        TYPE TABLE OF t042z-text1,
        ls_text         LIKE LINE OF lt_texts.

  CLEAR es_payment_method.
  CHECK is_data-zwels IS NOT INITIAL.

  ls_payment_meth-sign = 'I'.
  ls_payment_meth-option = 'EQ'.
  DO strlen( is_data-zwels ) TIMES.
    ls_payment_meth-low = is_data-zwels+li_idx(1).
    APPEND ls_payment_meth TO lt_payment_meth.
    li_idx = li_idx + 1.
  ENDDO.

  SELECT text1 FROM t042z INTO TABLE lt_texts
  WHERE land1 = is_data-land1
    AND zlsch IN lt_payment_meth.

  CHECK lt_texts IS NOT INITIAL.

  LOOP AT lt_texts INTO ls_text.
    IF es_payment_method IS INITIAL.
      es_payment_method = ls_text .
    ELSE.
      CONCATENATE es_payment_method ls_text INTO es_payment_method SEPARATED BY ','.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
METHOD get_payment_term_text.

  CLEAR es_payment_term.
  CHECK is_data-zterm IS NOT INITIAL.
  SELECT SINGLE vtext FROM tvzbt INTO es_payment_term WHERE zterm = is_data-zterm
                                                        AND spras = sy-langu.
ENDMETHOD.
METHOD md_add_sup_bank_xml_content.

  DATA:
    lb_exit_loop     TYPE abap_bool,
    lb_open_file_err TYPE abap_bool,
    ls_path          TYPE string,
    ls_comp_code     TYPE bukrs,
    ls_folder        TYPE string,
    ls_file          TYPE string,
    lst_sup_bank     LIKE LINE OF gt_sup_bank,
    lt_sup_bank      LIKE gt_sup_bank[],
    ls_file_server   TYPE rlgrap-filename,
    lt_comp_codes    LIKE TABLE OF lst_sup_bank-bukrs.

  DO.

*   Fetch Supplier Bank data from DB
    PERFORM md_get_sup_bank_data IN PROGRAM zdyn_iv_prg_md_export_rso
     TABLES   gt_sup_bank_tmp
              gt_sup_bank
     USING    ii_uptorows
     CHANGING lb_exit_loop.

    IF lb_exit_loop = abap_true. EXIT. ENDIF.
  ENDDO.

  IF ib_separate_files = abap_true.
*   Get company codes
    LOOP AT gt_sup_bank INTO lst_sup_bank.
      COLLECT lst_sup_bank-bukrs INTO lt_comp_codes.
    ENDLOOP.
  ELSE.
    APPEND INITIAL LINE TO lt_comp_codes.
  ENDIF.

  LOOP AT lt_comp_codes INTO ls_comp_code.

    CLEAR: lb_open_file_err, gt_xmlstrings[].
    ls_path = gc_sb_cl_path.
    ls_file_server = gc_sb_file.

    adjust_files_and_dir( EXPORTING is_comp_code      = ls_comp_code
                                    is_file           = i_filename
                                    ib_separate_files = ib_separate_files
                                    ib_save_local     = ib_save_local
                          CHANGING  cs_file_server    = ls_file_server
                                    cs_path           = ls_path ).
    PERFORM md_open_file IN PROGRAM zdyn_iv_prg_md_export_rso
      USING     ls_file_server
      CHANGING  lb_open_file_err.

    IF lb_open_file_err = space.
*     Add XML Header at the file begining
      md_add_supplierbank_xml_header(
        EXPORTING ic_html_codepage = ic_html_codepage
        CHANGING  ct_xmlstrings    = gt_xmlstrings[] ).
    ELSE.
      CONTINUE. "with next company code
    ENDIF.

    lt_sup_bank[] = gt_sup_bank[].
    IF ib_separate_files = abap_true.
      DELETE lt_sup_bank WHERE bukrs <> ls_comp_code.
    ENDIF.

*   Loop through Supplier Data
    LOOP AT lt_sup_bank INTO lst_sup_bank.
*     Prepare XML tags for Supplier Bank data
      md_prepare_sup_bank_xml(
        EXPORTING ist_supplierbankdata = lst_sup_bank
                  ib_no_trail          = ib_no_trail
        CHANGING  ct_xmlstrings        = gt_xmlstrings[] ).
    ENDLOOP.

*   Save XML content into file
    PERFORM md_save_data_in_file IN PROGRAM zdyn_iv_prg_md_export_rso
      TABLES  gt_xmlstrings
      USING   ls_file_server.

*     Add XML footer to the end of file
    add_supplierbank_xml_footer( ls_file_server ).

    finalize_File( is_file       = ls_file_server
                   is_path       = ls_path
                   ib_save_local = ib_save_local ).

  ENDLOOP.

*   Release memory
  REFRESH gt_xmlstrings.
  REFRESH gt_sup_bank.

ENDMETHOD.
METHOD md_add_supplier_xml_content.

  DATA:
    lb_exit_loop     TYPE abap_bool,
    lb_open_file_err TYPE abap_bool,
    ls_path          TYPE string,
    ls_comp_code     TYPE bukrs,
    lst_supplierdata LIKE LINE OF gt_supplier,
    lt_supplier      LIKE gt_supplier[],
    ls_file_server   TYPE rlgrap-filename,
    lt_comp_codes    LIKE TABLE OF lst_supplierdata-bukrs.

  DO.

*       Fetch Supplier data from DB
    PERFORM md_get_supplier_data  IN PROGRAM zdyn_iv_prg_md_export_rso
     TABLES   gt_supplier_tmp
              gt_supplier
     USING    ii_uptorows
     CHANGING lb_exit_loop.

    IF lb_exit_loop = abap_true. EXIT. ENDIF.

  ENDDO.

  IF ib_separate_files = abap_true.
* Get company codes
    LOOP AT gt_supplier INTO lst_supplierdata.
      COLLECT lst_supplierdata-bukrs INTO lt_comp_codes.
    ENDLOOP.
  ELSE.
    APPEND INITIAL LINE TO lt_comp_codes.
  ENDIF.

  LOOP AT lt_comp_codes INTO ls_comp_code.

    CLEAR: lb_open_file_err, gt_xmlstrings[].
    ls_path = gc_s_cl_path.
    ls_file_server = gc_s_file.

    adjust_files_and_dir( EXPORTING is_comp_code      = ls_comp_code
                                    is_file           = i_filename
                                    ib_separate_files = ib_separate_files
                                    ib_save_local     = ib_save_local
                          CHANGING  cs_file_server    = ls_file_server
                                    cs_path           = ls_path ).

    PERFORM md_open_file  IN PROGRAM zdyn_iv_prg_md_export_rso
    USING     ls_file_server
    CHANGING  lb_open_file_err.

    IF lb_open_file_err = space.

*     Add XML Header at the file begining
      md_add_supplier_xml_header(
        EXPORTING ic_html_codepage = ic_html_codepage
        CHANGING  ct_xmlstrings    = gt_xmlstrings[] ).
    ELSE.
      CONTINUE. "with next company code
    ENDIF.

    lt_supplier[] = gt_supplier[].
    IF ib_separate_files = abap_true.
      DELETE lt_supplier WHERE bukrs <> ls_comp_code.
    ENDIF.

*   Loop through Supplier Data
    LOOP AT lt_supplier INTO lst_supplierdata.

* Prepare XML tags for Supplier data
      md_prepare_supplier_xml(
        EXPORTING ist_supplierdata   = lst_supplierdata
                  ib_no_trail        = ib_no_trail
                  ib_disable_blocked = ib_disable_blocked
        CHANGING  ct_xmlstrings      = gt_xmlstrings ).
    ENDLOOP.

*       Save XML content into file
    PERFORM md_save_data_in_file  IN PROGRAM zdyn_iv_prg_md_export_rso
      TABLES  gt_xmlstrings
      USING   ls_file_server.
*     Add XML footer to the end of file
    add_supplier_xml_footer( ls_file_server ).

    finalize_File( is_file       = ls_file_server
                   is_path       = ls_path
                   ib_save_local = ib_save_local ).

  ENDLOOP.

*       Release memory
  REFRESH gt_xmlstrings.
  REFRESH gt_supplier.

ENDMETHOD.
METHOD MD_ADD_SUPPLIER_XML_HEADER.

  DATA:
    lc_xmltag(1024)   TYPE c.

  CLEAR lc_xmltag.

  CONCATENATE
    '<?xml version="1.0" encoding="' ic_html_codepage '"?>'
    INTO lc_xmltag.

  APPEND lc_xmltag
    TO ct_xmlstrings.

  APPEND '<Suppliers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'
    TO ct_xmlstrings.

ENDMETHOD.
METHOD md_add_supplierbank_xml_header.

  DATA:
    lc_xmltag(1024)   TYPE c.

  CLEAR lc_xmltag.

  CONCATENATE
    '<?xml version="1.0" encoding="' ic_html_codepage '"?>'
    INTO lc_xmltag.

  APPEND lc_xmltag
    TO ct_xmlstrings.

  APPEND '<SupplierBankAccounts xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'
    TO ct_xmlstrings.

ENDMETHOD.
METHOD md_prepare_sup_bank_xml.

  DATA:
    lc_xmltag(1024)     TYPE c, " TYPE string,
    ls_supplierbankdata TYPE zdyn_iv_s_sup_bank_mdxprt_rso,
    lc_iban             TYPE /cockpit/scheckdata-iban1,
    lc_banks            TYPE /cockpit/vmde_sb-banks,
    lc_bankl            TYPE /cockpit/vmde_sb-bankl,
    lc_bankn            TYPE /cockpit/vmde_sb-bankn,
    lc_bkont            TYPE /cockpit/vmde_sb-bkont,
    lc_bkref            TYPE /cockpit/vmde_sb-bkref,
    ls_account          TYPE string,
    ls_accounttype      TYPE string,
    lc_corpgrid(4)      TYPE c,
    ls_supplier         TYPE string.

  ls_supplierbankdata = ist_supplierbankdata.



*   XML tag preparation with Supplier Bank Data
  CLEAR: lc_xmltag, lc_iban.

*   Convert data to data types readable by READ_IBAN
  lc_banks = ls_supplierbankdata-banks.
  lc_bankl = ls_supplierbankdata-bankl.
  lc_bankn = ls_supplierbankdata-bankn.
  lc_bkont = ls_supplierbankdata-bkont.
  lc_bkref = ls_supplierbankdata-bkref.

*   Assigning IBAN number
  CALL FUNCTION 'READ_IBAN'
    EXPORTING
      i_banks = lc_banks
      i_bankl = lc_bankl
      i_bankn = lc_bankn
      i_bkont = lc_bkont
      i_bkref = lc_bkref
    IMPORTING
      e_iban  = lc_iban
    EXCEPTIONS
      OTHERS  = 0.
  CALL FUNCTION '/COCKPIT/ENCODE_ENTITIES'
****CALL FUNCTION 'ZDYN_ENCODE_ENTITIES' "Remove special chars
    CHANGING
      cc_string = lc_iban.

  IF lc_iban IS NOT INITIAL.
    ls_account     = lc_iban.
    ls_accounttype = 'iban'.
  ELSE.
    ls_account     = ls_supplierbankdata-bankn.
    ls_accounttype = space.
  ENDIF.

*   Encode special XML signs to HTML format (<,>," and &)
  PERFORM md_encode_special_chars_sb IN PROGRAM zdyn_iv_prg_md_export_rso"/cockpit/md_encode_spec_c_sb
    CHANGING ls_supplierbankdata.

*   Removing leading zeros
  IF ib_no_trail EQ abap_true.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_supplierbankdata-lifnr
      IMPORTING
        output = ls_supplierbankdata-lifnr.
  ENDIF.

*   Create unique combo based on selection screen parameters: Suppliernr|company code|VAT number
  PERFORM fill_supplier_number IN PROGRAM zdyn_iv_prg_md_export_rso
                               USING ls_supplierbankdata
                               CHANGING ls_supplier.

  CONCATENATE
    '<SupplierBankAccount> '
    ' <BankName>' ls_supplierbankdata-banka       '</BankName>'
    ' <SupplierNumber>' ls_supplier               '</SupplierNumber>'
    ' <BankNumberType>'                           '</BankNumberType>'
    ' <BankNumber>' ls_supplierbankdata-bankl     '</BankNumber>'
    ' <AccountNumberType>' ls_accounttype         '</AccountNumberType>'
    ' <AccountNumber>' ls_account                 '</AccountNumber>'
    '</SupplierBankAccount> '
  INTO  lc_xmltag.

*   Appending of xmltag to strings table
  APPEND lc_xmltag TO ct_xmlstrings.

  CLEAR lc_corpgrid.

ENDMETHOD.
METHOD md_prepare_supplier_xml.
  DATA:
    lc_xmltag(1024)  TYPE c,  "string,
    lst_supplierdata TYPE zdyn_iv_s_supplier_mdxprt_rso,
    lc_blocked(1)    TYPE c VALUE IS INITIAL,
    ls_payment_term  TYPE string,
    ls_payment_meth  TYPE string,
    ls_supplier      TYPE string.

  lst_supplierdata = ist_supplierdata.

*   Encode special XML signs to HTML format (<,>," and &)
  PERFORM md_encode_special_chars_s  IN PROGRAM zdyn_iv_prg_md_export_rso
    CHANGING lst_supplierdata.

*   Removing leading zeros
  IF ib_no_trail EQ abap_true.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lst_supplierdata-lifnr
      IMPORTING
        output = lst_supplierdata-lifnr.
  ENDIF.

*   Create unique combo based on selection screen parameters: Suppliernr|company code|VAT number
  PERFORM fill_supplier_number IN PROGRAM zdyn_iv_prg_md_export_rso
                               USING lst_supplierdata
                               CHANGING ls_supplier.
  ls_payment_term = get_payment_term_text( lst_supplierdata ).
  ls_payment_meth = get_payment_method_text( lst_supplierdata ).

*   Logical check for blocked field
  IF lst_supplierdata-loevm = abap_true
    OR lst_supplierdata-sperr = abap_true.
    IF ib_disable_blocked EQ abap_false.
      lc_blocked = '1'.
    ELSE.
      lc_blocked = '0'.
    ENDIF.
  ELSE.
    lc_blocked = '0'.
  ENDIF.

  IF lst_supplierdata-stceg = 'NOVATREGNR'.
    CLEAR lst_supplierdata-stceg.
  ENDIF.

*   XML tag preparation with Supplier Data
  CLEAR lc_xmltag.
  CONCATENATE
    '<Supplier>'
    ' <SupplierNumber>' ls_supplier                   '</SupplierNumber>'
    ' <Name>' lst_supplierdata-name1                  '</Name>'
    ' <Description></Description>      '
    ' <TaxRegistrationNumber>' lst_supplierdata-stceg '</TaxRegistrationNumber>'
    ' <OrganizationNumber>' lst_supplierdata-bukrs    '</OrganizationNumber>'
    ' <Street>' lst_supplierdata-stras                '</Street>'
    ' <PostalCode>' lst_supplierdata-pstlz            '</PostalCode>'
    ' <City>' lst_supplierdata-ort01                  '</City>'
    ' <CountryName>' lst_supplierdata-landx           '</CountryName>'
    ' <PaymentTerm>' ls_payment_term                  '</PaymentTerm>'
    ' <PaymentMethod>' ls_payment_meth                '</PaymentMethod>'
    ' <CurrencyCode></CurrencyCode>' "<- does not make sens for vendor
    ' <Location></Location>'
    ' <State></State>'
    ' <Blocked>' lc_blocked                           '</Blocked>'
    ' <TelephoneNumber>' lst_supplierdata-telf1       '</TelephoneNumber>'
    ' <FaxNumber>' lst_supplierdata-telfx             '</FaxNumber>'
    ' <TaxCode>'  lst_supplierdata-stcd1              '</TaxCode>'
    ' <BypassVerification><Value>false</Value>         </BypassVerification>'
    ' <ExcludeFromIdentification><Value>false</Value>  </ExcludeFromIdentification>'
    '</Supplier>'
    INTO  lc_xmltag.

*   Appending of xmltag to strings table
  APPEND lc_xmltag TO ct_xmlstrings.
ENDMETHOD.
METHOD md_save_file_usr_side.

  PERFORM md_save_file_usr_side IN PROGRAM zdyn_iv_prg_md_export_rso"IN PROGRAM /cockpit/md_export
    USING ic_path
          ic_targetpath.

ENDMETHOD.
METHOD replace_incorrect_dir_chars.

* This signs are not allowed in directory name
  REPLACE ALL OCCURRENCES OF ':' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '*' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '?' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '"' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '<' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '>' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '|' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '/' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '\' IN c_str WITH space.
  REPLACE ALL OCCURRENCES OF '.' IN c_str WITH space.

ENDMETHOD.
