
DEFINE add_msg_int.
  zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = '&1'
                                  ic_msgno    = '&2'
                                  ic_msgid    = '&3'
                                  ii_level    = &4
                                  ic_msgv1    = &5
                                  ic_msgv2    = &6
                                  ic_msgv3    = &7
                                  ic_msgv4    = &8 ).
END-OF-DEFINITION.

* Add a message without variables
DEFINE add_msg_0.
  add_msg_int &1 &2 &3 &4 space space space space.
  if 1 = 2. message &1&2(&3). endif. "where-used
END-OF-DEFINITION.

* Add a message with 1 variable
DEFINE add_msg_1.
  add_msg_int &1 &2 &3 &4 &5 space space space.
  if 1 = 2. message &1&2(&3) with space. endif. "where-used
END-OF-DEFINITION.

* Add a message with 2 variables
DEFINE add_msg_2.
  add_msg_int &1 &2 &3 &4 &5 &6 space space.
  if 1 = 2. message &1&2(&3) with space space. endif. "where-used
END-OF-DEFINITION.

* Add a message with 3 variables
DEFINE add_msg_3.
  add_msg_int &1 &2 &3 &4 &5 &6 &7 space.
  if 1 = 2. message &1&2(&3) with space space space. endif. "where-used
END-OF-DEFINITION.

* Add a message with 4 variables
DEFINE add_msg_4.
  add_msg_int &1 &2 &3 &4 &5 &6 &7 &8
  if 1 = 2. message &1&2(&3) with space space space space. endif. "where-used
END-OF-DEFINITION.

* Add log message
DEFINE add_msg_long.
  zdyn_cl_msg=>add_long_msg( EXPORTING ic_msgty    = '&1'
                                       ic_msgno    = '&2'
                                       ic_msgid    = '&3'
                                       ii_level    = &4
                                       is_param    = &5 ).
    if 1 = 2. message &1&2(&3). endif. "where-used
END-OF-DEFINITION.
class ZDYN_CL_MSG definition
  public
  create public .

public section.

  class-data MT_MESSAGES type ZDYN_LSTR_MESSAGE read-only .
  class-data MN_LAST_NUMBER type BALMNR read-only .
  class-data MB_GROUP type ABAP_BOOL read-only .
  constants CON_MESSAGE_LEVEL_0 type ZDYN_WS_DMESSAGE_LEVEL value 0. "#EC NOTEXT
  constants CON_MESSAGE_LEVEL_1 type ZDYN_WS_DMESSAGE_LEVEL value 1. "#EC NOTEXT
  constants CON_MESSAGE_LEVEL_2 type ZDYN_WS_DMESSAGE_LEVEL value 2. "#EC NOTEXT

  class-methods TRANSFORM_LONG_PARAM
    importing
      !IS_PARAM type STRING
    exporting
      !EC_MSGV1 type SY-MSGV1
      !EC_MSGV2 type SY-MSGV1
      !EC_MSGV3 type SY-MSGV1
      !EC_MSGV4 type SY-MSGV1 .
  class-methods ADD_BAPIRET2_MSG
    importing
      !IST_BAPIRET2 type BAPIRET2
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL .
  class-methods ADD_BAPIRET_MSG
    importing
      !IST_BAPIRET type BAPIRETURN
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL .
  class-methods ADD_BATCH_INFO
    importing
      !II_BATCH_COUNT type ANY default 1
      !II_ENTRY_COUNT type ANY .
  class-methods ADD_PD_MSGS
    importing
      !IT_MESSAGES type ZDYN_LSTRU_PD_MESSAGE
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL .
  class-methods ADD_TO_CALL_STACK .
  class-methods CLEAR_GROUP .
  class-methods START_GROUP .
  class-methods STOP_GROUP .
  class-methods ADD_LONG_MSG
    importing
      !IC_MSGTY type SY-MSGTY default 'E'
      !IC_MSGID type SY-MSGID
      !IC_MSGNO type SY-MSGNO
      !IS_PARAM type ANY optional
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL optional .
  class-methods ADD_MSG
    importing
      !IC_MSGTY type SY-MSGTY default 'E'
      !IC_MSGID type SY-MSGID
      !IC_MSGNO type SY-MSGNO
      !IC_MSGV1 type ANY optional
      !IC_MSGV2 type ANY optional
      !IC_MSGV3 type ANY optional
      !IC_MSGV4 type ANY optional
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL optional
    changing
      !CT_MESSAGES type BAPIRET2_T optional .
  class-methods ADD_INTERNAL_MSGS
    importing
      !IT_MESSAGES type ZDYN_LSTR_MESSAGE .
  class-methods ADD_MSGS
    importing
      !IT_MESSAGES type BAPIRET2_T
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL optional .
  class-methods GET_INTERNAL_MSGS
    exporting
      !ET_MESSAGES type ZDYN_LSTR_MESSAGE .
  class-methods CLEAR_MESSAGES .
  class-methods GET_MESSAGES
    importing
      !IB_ONLY_GROUP type ABAP_BOOL default ABAP_FALSE
      !IB_SKIP_DUPLICATES type ABAP_BOOL default ABAP_TRUE
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL default CON_MESSAGE_LEVEL_0
    returning
      value(RT_MSG) type BAPIRET2_T .
  class-methods GET_MESSAGES_FULL
    importing
      !IB_ONLY_GROUP type ABAP_BOOL default ABAP_FALSE
      !IB_SKIP_DUPLICATES type ABAP_BOOL default ABAP_TRUE
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL default CON_MESSAGE_LEVEL_0
    returning
      value(RT_MSG) like MT_MESSAGES .
  class-methods ADD_SYSMSG
    importing
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL optional
    changing
      !CT_MESSAGES type BAPIRET2_T optional .
  class-methods CLEAR_SYSMSG .
  class-methods MAP_FULL_TO_BAL
    importing
      !IT_FULL_MSG like MT_MESSAGES
    returning
      value(RT_MSG) type BAL_T_MSG .
protected section.
private section.
endclass. "ZDYN_CL_MSG definition
class ZDYN_CL_MSG implementation.
METHOD add_bapiret2_msg.

  DATA: lst_message TYPE bapiret2,
        lst_int_msg LIKE LINE OF mt_messages.

  lst_message = ist_bapiret2.

  lst_message-log_msg_no = mn_last_number.
  mn_last_number = mn_last_number + 1.

  MOVE-CORRESPONDING lst_message TO lst_int_msg.
  lst_int_msg-level = ii_level.
  lst_int_msg-group = mb_group.
  GET TIME STAMP FIELD lst_int_msg-time_stmp.
  APPEND lst_int_msg TO mt_messages.

ENDMETHOD.
METHOD add_bapiret_msg.

  DATA: lc_id     TYPE sy-msgid,
        lc_number TYPE sy-msgno,
        lc_type   TYPE sy-msgty.

  lc_id     = ist_bapiret-code(2).
  lc_number = ist_bapiret-code+2(3).

  add_msg( EXPORTING ic_msgty = lc_type
                     ic_msgid = lc_id
                     ic_msgno = lc_number
                     ic_msgv1 = ist_bapiret-message_v1
                     ic_msgv2 = ist_bapiret-message_v2
                     ic_msgv3 = ist_bapiret-message_v3
                     ic_msgv4 = ist_bapiret-message_v4
                     ii_level = ii_level ).

ENDMETHOD.
METHOD add_batch_info.

  DATA: lc_var1 TYPE sy-msgv1,
        lc_var2 TYPE sy-msgv2.

  WRITE ii_entry_count TO lc_var1 LEFT-JUSTIFIED.
  WRITE ii_batch_count TO lc_var2 LEFT-JUSTIFIED.

  add_msg( EXPORTING ic_msgty = 'S'
                     ic_msgid = 'ZDYN_WS'
                     ic_msgno = '031'
                     ic_msgv1 = lc_var1
                     ic_msgv2 = lc_var2
                     ii_level = con_message_level_0 ).
*   MESSAGE s031(zdyn_ws).

ENDMETHOD.
METHOD add_internal_msgs.

  APPEND LINES OF it_messages TO mt_messages.

ENDMETHOD.
METHOD add_long_msg.

  DATA: lc_msgv1 TYPE sy-msgv1,
        lc_msgv2 TYPE sy-msgv2,
        lc_msgv3 TYPE sy-msgv3,
        lc_msgv4 TYPE sy-msgv4.

  transform_long_param( EXPORTING is_param = is_param
                        IMPORTING ec_msgv1 = lc_msgv1
                                  ec_msgv2 = lc_msgv2
                                  ec_msgv3 = lc_msgv3
                                  ec_msgv4 = lc_msgv4 ).

  add_msg( EXPORTING ic_msgty = ic_msgty
                     ic_msgid = ic_msgid
                     ic_msgno = ic_msgno
                     ic_msgv1 = lc_msgv1
                     ic_msgv2 = lc_msgv2
                     ic_msgv3 = lc_msgv3
                     ic_msgv4 = lc_msgv4
                     ii_level = ii_level ).

ENDMETHOD.
METHOD add_msg.

  DATA: ls_message TYPE bapiret2,
        ls_int_msg LIKE LINE OF mt_messages,
        lc_msgv1   TYPE sy-msgv1,
        lc_msgv2   TYPE sy-msgv2,
        lc_msgv3   TYPE sy-msgv3,
        lc_msgv4   TYPE sy-msgv4.

* This way we allow to use any character/number values at the input, which is easier
  WRITE ic_msgv1 TO lc_msgv1 LEFT-JUSTIFIED.
  WRITE ic_msgv2 TO lc_msgv2 LEFT-JUSTIFIED.
  WRITE ic_msgv3 TO lc_msgv3 LEFT-JUSTIFIED.
  WRITE ic_msgv4 TO lc_msgv4 LEFT-JUSTIFIED.

  CALL FUNCTION 'FS_BAPI_BAPIRET2_FILL'
    EXPORTING
      type   = ic_msgty
      cl     = ic_msgid
      number = ic_msgno
      par1   = lc_msgv1
      par2   = lc_msgv2
      par3   = lc_msgv3
      par4   = lc_msgv4
    IMPORTING
      return = ls_message.

  ls_message-log_msg_no = mn_last_number.
  mn_last_number = mn_last_number + 1.
  APPEND ls_message TO ct_messages.

  MOVE-CORRESPONDING ls_message TO ls_int_msg.
  IF ii_level IS INITIAL.
    ls_int_msg-level = con_message_level_0.
  ELSE.
    ls_int_msg-level = ii_level.
  ENDIF.
  ls_int_msg-group = mb_group.
  GET TIME STAMP FIELD ls_int_msg-time_stmp.
  APPEND ls_int_msg TO mt_messages.

ENDMETHOD.
METHOD add_msgs.

  FIELD-SYMBOLS: <st_msg> LIKE LINE OF it_messages.

  LOOP AT it_messages ASSIGNING <st_msg>.
    add_msg( EXPORTING ic_msgty = <st_msg>-type
                       ic_msgid = <st_msg>-id
                       ic_msgno = <st_msg>-number
                       ic_msgv1 = <st_msg>-message_v1
                       ic_msgv2 = <st_msg>-message_v2
                       ic_msgv3 = <st_msg>-message_v3
                       ic_msgv4 = <st_msg>-message_v4
                       ii_level = ii_level ).
  ENDLOOP.

ENDMETHOD.
METHOD add_pd_msgs.

  FIELD-SYMBOLS: <st_msg> LIKE LINE OF it_messages.

  LOOP AT it_messages ASSIGNING <st_msg>.
    add_msg( EXPORTING ic_msgty = <st_msg>-msg_type
                       ic_msgid = <st_msg>-msg_id
                       ic_msgno = <st_msg>-msg_no
                       ic_msgv1 = <st_msg>-msg_v1
                       ic_msgv2 = <st_msg>-msg_v2
                       ic_msgv3 = <st_msg>-msg_v3
                       ic_msgv4 = <st_msg>-msg_v4
                       ii_level = ii_level ).
  ENDLOOP.

ENDMETHOD.
METHOD add_sysmsg.

  CHECK sy-msgid IS NOT INITIAL.

  add_msg( EXPORTING ic_msgty    = sy-msgty
                     ic_msgid    = sy-msgid
                     ic_msgno    = sy-msgno
                     ic_msgv1    = sy-msgv1
                     ic_msgv2    = sy-msgv2
                     ic_msgv3    = sy-msgv3
                     ic_msgv4    = sy-msgv4
                     ii_level    = ii_level
           CHANGING  ct_messages = ct_messages ).

ENDMETHOD.
METHOD add_to_call_stack.

  DATA: lt_callstack TYPE sys_callst,
        ls_call      LIKE LINE OF lt_callstack,
        li_lines     TYPE i,
        li_pos       TYPE i,
        lc_name      TYPE string.

  CALL FUNCTION 'SYSTEM_CALLSTACK'
    EXPORTING
      max_level    = 2
    IMPORTING
      et_callstack = lt_callstack.

  li_lines = lines( lt_callstack ).
  READ TABLE lt_callstack INDEX li_lines INTO ls_call.
  CHECK sy-subrc = 0.

  FIND '=' IN ls_call-progname IN CHARACTER MODE MATCH OFFSET li_pos.
  IF li_pos = 0.
    li_pos = strlen( ls_call-progname ).
    li_pos = li_pos - 2.
  ENDIF.
  CONCATENATE ls_call-progname(li_pos) '->' ls_call-eventname INTO lc_name.
  add_msg( EXPORTING ic_msgty  = 'S'
                     ic_msgid  = 'ZDYN_WS'
                     ic_msgno  = '000'
                     ic_msgv1  = lc_name
                     ii_level  = con_message_level_2 ).
*   MESSAGE s000(zdyn_ws).

ENDMETHOD.
METHOD clear_group.

* Clear the GROUP flag in all the messages
  DATA: ls_msg LIKE LINE OF mt_messages.

  MODIFY mt_messages FROM ls_msg TRANSPORTING group WHERE group = abap_true.

ENDMETHOD.
METHOD clear_messages.

  CLEAR: mt_messages,
         mn_last_number.

ENDMETHOD.
METHOD clear_sysmsg.

  CLEAR:
    sy-msgty,
    sy-msgid,
    sy-msgno,
    sy-msgv1,
    sy-msgv2,
    sy-msgv3,
    sy-msgv4.

ENDMETHOD.
METHOD get_internal_msgs.

  et_messages = mt_messages.

ENDMETHOD.
METHOD get_messages.

  DATA: lt_messages LIKE mt_messages.

  lt_messages = get_messages_full( ib_only_group      = ib_only_group
                                   ib_skip_duplicates = ib_skip_duplicates
                                   ii_level           = ii_level ).


  zdyn_cl_system=>mo->move_corresponding_tab( EXPORTING it_input  = lt_messages
                                              CHANGING  ct_output = rt_msg ).

ENDMETHOD.
METHOD get_messages_full.

  rt_msg = mt_messages.
  IF ib_skip_duplicates = abap_true.
    SORT rt_msg BY type id number message_v1 message_v2 message_v3 message_v4.
    DELETE ADJACENT DUPLICATES FROM rt_msg COMPARING type id number message_v1 message_v2 message_v3 message_v4.
  ENDIF.

  SORT rt_msg BY log_msg_no.

* take messages up to specific level only
  DELETE rt_msg WHERE level > ii_level.

  IF ib_only_group = abap_true.
*   collect only messages marked as a group (for example for feedback)
    DELETE rt_msg WHERE group = abap_false.
  ENDIF.

ENDMETHOD.
METHOD MAP_FULL_TO_BAL.

  DATA: ls_msg TYPE bal_s_msg.

  FIELD-SYMBOLS: <s_full_msg> like LINE OF it_full_msg.

  LOOP AT it_full_msg ASSIGNING <s_full_msg>.
    ls_msg-msgty      = <s_full_msg>-type.
    ls_msg-msgid      = <s_full_msg>-id.
    ls_msg-msgno      = <s_full_msg>-number.
    ls_msg-msgv1      = <s_full_msg>-message_v1.
    ls_msg-msgv2      = <s_full_msg>-message_v2.
    ls_msg-msgv3      = <s_full_msg>-message_v3.
    ls_msg-msgv4      = <s_full_msg>-message_v4.
    ls_msg-time_stmp  = <s_full_msg>-time_stmp.
    IF <s_full_msg>-type = 'E'.
      ls_msg-probclass = '2'. " Important
    ELSE.
      ls_msg-probclass = '4'. " Additional information
    ENDIF.
    APPEND ls_msg TO rt_msg.
  ENDLOOP.

ENDMETHOD.
METHOD start_group.

* Clear previous group first
  clear_group( ).

* Since now until STOP_GROUP is called all of the registered messages
* are marked with GROUP flag
  mb_group = abap_true.

ENDMETHOD.
METHOD stop_group.

* Subsquent messages won't be marked as a group anymore.
  mb_group = abap_false.

ENDMETHOD.
METHOD transform_long_param.

  DATA: li_len TYPE i.

  CHECK is_param IS NOT INITIAL.

  ec_msgv1 = is_param.
  li_len = strlen( is_param ).
  IF li_len > 50.
    ec_msgv2 = is_param+50.
  ENDIF.
  IF li_len > 100.
    ec_msgv3 = is_param+100.
  ENDIF.
  IF li_len > 150.
    ec_msgv4 = is_param+150.
  ENDIF.

ENDMETHOD.
