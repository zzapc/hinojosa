INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_REST_TOOLS_RSO definition
  public
  inheriting from ZDYN_CL_REST_TOOLS
  create public .

public section.
  class ZDYN_CL_BAPI definition load .

  interfaces ZDYN_IF_REST_TOOLS_RSO .

  constants CON_RSO_URL type STRING value 'https://services.readsoftonline.com/'. "#EC NOTEXT
  constants CON_GETOUTPUTDOCUMENTS_API type STRING value '/documents/rest/customers/outputdocumentsbycurrentcustomer'. "#EC NOTEXT
  constants CON_GETOUTPUTFILE type STRING value '/documents/rest/file/'. "#EC NOTEXT
  data MST_CONFIG type ZDYN_STRU_RSO_CONFIG .
  constants CON_XSLT_TO_PD type CXSLTDESC value 'ZDYN_RSO_TO_PD'. "#EC NOTEXT
  constants CON_XSLT_TO_IDOC type CXSLTDESC value 'ZDYN_RSO_TO_IDOC'. "#EC NOTEXT
  constants CON_LEVEL_HEADER type STRNAME value 'HEADER'. "#EC NOTEXT
  constants CON_LEVEL_ITEM type STRNAME value 'ITEM'. "#EC NOTEXT
  constants CON_LEVEL_TAX type STRNAME value 'TAX'. "#EC NOTEXT
  constants CON_LEVEL_ACCOUNT type STRNAME value 'ACCOUNT'. "#EC NOTEXT
  constants CON_LEVEL_CUSTOM type STRNAME value 'CUSTOM'. "#EC NOTEXT
  constants CON_LEVEL_PROCESSLOG type STRNAME value 'IT_PROCESSLOG'. "#EC NOTEXT
  data MST_ACCOUNT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_RSOACCOUNT .
  data MT_ACCOUNTS type ZDYN_CL_REST_TOOLS_RSO_DATA=>TT_RSOACCOUNTS .
  constants CON_GETCURRENTUSERBUYERS type STRING value '/accounts/rest/customers/currentuser/buyers'. "#EC NOTEXT
  constants CON_GETCURRENTCUSTOMER type STRING value '/accounts/rest/currentcustomer'. "#EC NOTEXT
  constants CON_GETMASTERDATACFG type STRING value '/services/masterdata'. "#EC NOTEXT
  constants CON_GETACCOUNTS type STRING value '/accounts/rest/'. "#EC NOTEXT
  constants CON_MASTERDATA type STRING value '/masterdata/rest/'. "#EC NOTEXT
  constants CON_QUERY_PAGESIZE type STRING value 'pageSize=1000'. "#EC NOTEXT
  constants CON_MAXSIZE type I value 2000. "#EC NOTEXT
  constants CON_ACCEPT type STRING value 'Accept'. "#EC NOTEXT
  constants CON_EN_US type STRING value 'en-US'. "#EC NOTEXT
  constants CON_X_RS_CULTURE type STRING value 'x-rs-culture'. "#EC NOTEXT
  constants CON_X_RS_UICULTURE type STRING value 'x-rs-uiculture'. "#EC NOTEXT
  constants CON_X_RS_VERSION type STRING value 'x-rs-version'. "#EC NOTEXT
  constants CON_VERSION type STRING value '2011-10-14'. "#EC NOTEXT
  constants CON_ACCEPT_ENCODING type STRING value 'Accept-Encoding'. "#EC NOTEXT
  constants CON_CONTENT_TYPE type STRING value 'Content-Type'. "#EC NOTEXT
  constants CON_ORDER type STRING value 'Order'. "#EC NOTEXT
  constants CON_GETBATCH type STRING value '/documents/rest/batches/'. "#EC NOTEXT
  constants CON_EMAIL type STRING value '/originalemail'. "#EC NOTEXT
  constants CON_MIME_MAIL type STRING value 'message/rfc822'. "#EC NOTEXT

  methods GET_ID_FROM_XML
    importing
      !IS_XML type STRING
    returning
      value(RS_ID) type STRING .
  methods SET_ORDERS
    importing
      !IT_SEL_OPT type ZDYN_CL_BAPI=>YT_RANGE_AUFNR
      !IB_DELETE type ABAP_BOOL
      !ID_CHANGE_DATE type FC_DATUM optional .
  methods CONSTRUCTOR
    importing
      !IC_RFCDEST type RFCDEST optional
      !IST_CONFIG type ZDYN_STRU_RSO_CONFIG optional .
  methods PREPARE_CLIENT
    exceptions
      ERROR_OCCURRED .
  methods AUTHENTICATE
    importing
      !IS_USER type STRING
      !IS_PASSWORD type STRING
      !IB_TEST type ABAP_BOOL default ABAP_FALSE
    returning
      value(RB_OK) type ABAP_BOOL .
  methods GET_OUTPUT_DOCUMENTS
    importing
      !IC_XSLT type CXSLTDESC default CON_XSLT_TO_PD
      !IB_SKIP_FEEDBACK type ABAP_BOOL default ABAP_FALSE .
  methods GET_OUTPUT_DOCUMENT_IMAGE
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_OUTPUTDOCUMENTS
    exporting
      value(EB_OK) type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T .
  methods GET_OUTPUT_DOCUMENT_DATA
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_OUTPUTDOCUMENTS
      !IC_XSLT type CXSLTDESC default CON_XSLT_TO_PD
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods SET_DOCUMENT_DOWNLOADED
    importing
      !IS_DOCUMENTID type STRING
    returning
      value(RB_OK) type ABAP_BOOL .
  methods PROCESS_OUTPUT_DOCUMENT
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_OUTPUTDOCUMENTS
      !IC_XSLT type CXSLTDESC default CON_XSLT_TO_PD
      !IS_XML type STRING optional
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods TRANSFORM_OUTPUT_DOCUMENT
    importing
      !IC_XSLT type CXSLTDESC default CON_XSLT_TO_PD
      !IB_SKIP_PARSING type ABAP_BOOL default ABAP_FALSE
    exporting
      value(EB_OK) type ABAP_BOOL
      !ES_XML type STRING
    changing
      !CT_DATA type ABAP_TRANS_RESBIND_TAB .
  methods SAVE_FILES_LOCALLY
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_OUTPUTDOCUMENTS
      !IS_DATA type STRING
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods TRANSFER_DATA_TO_PD
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_OUTPUTDOCUMENTS
      !IT_DATA type ABAP_TRANS_RESBIND_TAB
    exporting
      !EB_OK type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods GET_PD_MAPID
    returning
      value(RST_PDMAP) type ZDYN_RSO_TPDMAP .
  methods SET_DOCUMENT_REJECTED
    importing
      !IS_DOCUMENTID type STRING
    returning
      value(RB_OK) type ABAP_BOOL .
  methods GET_CURRENT_PARTNERID .
  methods INBOUND_PROCESS
    importing
      !IC_XSLT type CXSLTDESC optional
      !IB_SKIP_FEEDBACK type ABAP_BOOL default ABAP_FALSE .
  methods SET_CURRENCIES
    importing
      !IT_SEL_WAERS type ZDYN_CL_BAPI=>YT_RANGE_WAERS optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_STATISTIC_MESSAGES
    importing
      !IS_INPUT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_MDRESPONSE
    changing
      !CT_MESSAGES type BAPIRET2_T optional .
  methods SET_COSTCENTERS
    importing
      !IT_SEL_KOSTL type ZDYN_CL_BAPI=>YT_RANGE_KOSTL optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_GLACCOUNTS
    importing
      !IT_SEL_SAKNR type ZDYN_CL_BAPI=>YT_RANGE_SAKNR optional
      !IS_GROUP type STRING optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_SUPPLIERS
    importing
      !IT_SEL_LIFNR type ZDYN_CL_BAPI=>YT_RANGE_LIFNR optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !IB_DELFLG type ABAP_BOOL default ABAP_FALSE
      !ID_DATE type FC_DATUM optional
      !IB_BANKDATA type ABAP_BOOL default ABAP_FALSE .
  methods SET_PURCHASE_ORDERS
    importing
      !IT_SEL_ERDAT type ZDYN_CL_BAPI=>YT_RANGE_ERDAT optional
      !IT_SEL_EBELN type ZDYN_CL_BAPI=>YT_RANGE_EBELN optional
      !IT_EBELN type ZDYN_CL_BAPI=>YT_EBELN optional
      !ID_CHG_DATE type FC_DATUM optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_MASTERDATA
    importing
      !IT_DATA type ZDYN_CL_REST_TOOLS_RSO_DATA=>TT_MASTERDATA_WITH_CC optional
      !IS_NAME type STRING optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_PROJECTS
    importing
      !IT_SEL_PSPNR type ZDYN_CL_BAPI=>YT_RANGE_PSPNR optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !ID_CHANGE_DATE type FC_DATUM optional .
  methods FILL_BANKACCOUNT
    importing
      !IC_LIFNR type LIFNR
    returning
      value(RT_BANKACCOUNTS) type ZDYN_CL_REST_TOOLS_RSO_DATA=>TT_BANKACCOUNT .
  methods SET_PAYMENTTERMS
    importing
      !IT_SEL_ZTERM type ZDYN_CL_BAPI=>YT_RANGE_ZTERM optional
      !IB_REPLACE type ABAP_BOOL default ABAP_FALSE .
  methods TRANSFER_DATA_TO_SAP
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_OUTPUTDOCUMENTS
      !IT_DATA type ABAP_TRANS_RESBIND_TAB
    exporting
      !EB_OK type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods GET_OUTPUT_DOCUMENT_ATT
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_RSO_DATA=>TY_OUTPUTDOCUMENTS
    exporting
      value(EB_OK) type ABAP_BOOL .
  methods SET_CUSTOMERS
    importing
      !IT_SEL_KUNNR type ZDYN_CL_BAPI=>YT_RANGE_KUNNR optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !ID_DATE type FC_DATUM optional
      !IB_DELFLG type ABAP_BOOL default ABAP_FALSE
      !IB_REPLACE type ABAP_BOOL default ABAP_FALSE .
  methods SET_CUSTOM_MASTERDATA
    importing
      !IS_TCUST type ZDYN_RSO_TCUST
      !IB_DELETE type ABAP_BOOL .
  methods FILL_CUSTOMERS
    importing
      !IT_CUSTOMERS type ZDYN_CL_BAPI=>YT_CUSTOMERS
      !ID_DATE type FC_DATUM optional
      !IC_BUKRS type BUKRS optional
    changing
      !CT_CUSTOMER type ZDYN_CL_REST_TOOLS_RSO_DATA=>TT_CUSTOMER .
  methods CREATE_BUYERS .
  methods SET_COMP_CODE
    importing
      !IC_BUKRS type BUKRS .

  methods GET_AR_OBJECT_VALUE
    redefinition .
  methods SET_COMPANY_CODES
    redefinition .
protected section.

  methods SET_ERROR_MESSAGE .
  methods CHECK_BEFORE_TRANS_DATA_TO_PD
    importing
      !IT_EXTDATA type ZDYN_LSTRU_EXTDATA
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T .
private section.
endclass. "ZDYN_CL_REST_TOOLS_RSO definition
class ZDYN_CL_REST_TOOLS_RSO implementation.
METHOD authenticate.

  DATA: li_return_code TYPE i,
        ls_isauth      TYPE zdyn_cl_rest_tools_rso_data=>ty_isok,
        ls_response    TYPE zdyn_cl_rest_tools_rso_data=>ty_authresponse,
        ls_auth        TYPE zdyn_cl_rest_tools_rso_data=>ty_auth,
        lt_cookies     TYPE tihttpcki,
        ls_json        TYPE string.

  FIELD-SYMBOLS: <cookie> TYPE ihttpcki.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.
* already authenticated ?
  READ TABLE mt_cookies WITH KEY name = 'x-rs-auth-v1'
                        TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
*   ensure cookies are added to the request
    LOOP AT mt_cookies ASSIGNING <cookie>.
      mo_http_client->request->set_cookie( EXPORTING  name  = <cookie>-name
                                                      value = <cookie>-value ).
    ENDLOOP.

    set_new_rel_url( is_path = '/authentication/rest/isauthenticated' ).
    call_http_get( IMPORTING ei_return_code = li_return_code ).

    IF li_return_code = 200.
      deserialize_from_json( EXPORTING is_json  = ms_result
                             CHANGING  cst_data = ls_isauth ).
    ENDIF.

    IF ls_isauth-value EQ abap_true.
      rb_ok = abap_true.

      set_new_rel_url( is_path = '/authentication/rest/touch' ).
      call_http_get( IMPORTING ei_return_code = li_return_code ).
      EXIT.
    ELSE.
      CLEAR mt_cookies.
    ENDIF.

  ENDIF.

* authenticate
  set_new_rel_url( is_path = '/authentication/rest/authenticate' ).

  ls_auth-_user_name = is_user.
  ls_auth-_password = is_password.
  ls_json = serialize_to_json( ist_data       = ls_auth
                               ic_compress    = abap_false
                               ic_pretty_name = con_camel_case ).
  call_http_post( EXPORTING is_input       = ls_json
                  IMPORTING ei_return_code = li_return_code ).

  IF li_return_code <> 200.
    add_msg_1 e 045 zdyn_ws 1 li_return_code.
*    MESSAGE e045(zdyn_ws) with space.
    add_msg_0 e 048 zdyn_ws 0.
*    MESSAGE e048(zdyn_ws).
    rb_ok = abap_false.
    RETURN.
  ENDIF.

  deserialize_from_json( EXPORTING is_json  = ms_result
                         CHANGING  cst_data = ls_response ).

  CLEAR mt_cookies.
  IF ls_response-status = 1.
    mo_http_client->response->get_cookies( CHANGING cookies = lt_cookies ).

    LOOP AT lt_cookies ASSIGNING <cookie>.
      CHECK <cookie>-name(4) EQ 'x-rs'.
      APPEND <cookie> TO mt_cookies.
      mo_http_client->request->set_cookie( name  = <cookie>-name
                                           value = <cookie>-value ).
    ENDLOOP.
    rb_ok = abap_true.
  ELSE.
    add_msg_1 e 046 zdyn_ws 1 ls_response-status.
*    MESSAGE e046(zdyn_ws) with space.
    add_msg_0 e 048 zdyn_ws 0.
*    MESSAGE e048(zdyn_ws).
    rb_ok = abap_false.
    RETURN.
  ENDIF.

  IF ib_test = abap_true AND rb_ok = abap_true.
    add_msg_0 s 047 zdyn_ws 0.
*    MESSAGE e047(zdyn_ws).
  ELSEIF rb_ok = abap_true.
    add_msg_0 s 047 zdyn_ws 1.
*    MESSAGE e047(zdyn_ws).
  ENDIF.

ENDMETHOD.
METHOD check_before_trans_data_to_pd.
* "exit point" to be implemented in subclasses.

* Variables:
* @eb_ok = false - document will be marked in web service as erroneous and is not
*                  avaliable for processing again
* @eb_skip_feedback = abap_true - document skipped an that run and can be processed again
ENDMETHOD.
METHOD constructor.

  zdyn_cl_msg=>add_to_call_stack( ).

  CALL METHOD super->constructor.

  mst_config = ist_config.

  mr_attachments->set_skip_attach_add( mst_config-skip_attach_add ).

ENDMETHOD.
  METHOD create_buyers.

    DATA:
      li_return_code TYPE i,
      ls_path        TYPE string,
      ls_json        TYPE string,
      lst_account    TYPE zdyn_cl_rest_tools_rso_data=>ty_rsoaccount,
      ls_t001        TYPE t001,
      lt_t001        TYPE STANDARD TABLE OF t001,
      lc_landx       TYPE landx,
      ls_adrc        TYPE adrc,
      ls_error       TYPE zdyn_cl_rest_tools_rso_data=>ty_error,
      ls_buyer_ok    TYPE zdyn_cl_rest_tools_rso_data=>ty_buyer_ok,
      ls_buyer       TYPE zdyn_cl_rest_tools_rso_data=>ty_buyer.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK NOT mt_sel_comp_codes IS INITIAL.
    CHECK mo_http_client IS BOUND.

    SELECT * FROM t001 INTO TABLE lt_t001
     WHERE bukrs IN  mt_sel_comp_codes.

    CHECK lt_t001 IS NOT INITIAL.
    set_new_rel_url( EXPORTING is_path = con_getcurrentcustomer ).
* get the current account
    call_http_get( IMPORTING ei_return_code = li_return_code ).

    CHECK li_return_code = 200.
    deserialize_from_json( EXPORTING is_json  = ms_result
                           CHANGING  cst_data = lst_account ).

    CONCATENATE con_getaccounts 'customers/' lst_account-id '/buyers' INTO ls_path.
    set_new_rel_url( EXPORTING is_path = ls_path ).

    LOOP AT lt_t001 INTO ls_t001.
      CLEAR: ls_buyer, ls_buyer_ok, ls_adrc.
      ls_buyer-_name = ls_t001-butxt.
      ls_buyer-_external_id = ls_t001-bukrs.
      ls_buyer-_vat_number = ls_t001-stceg.
      ls_buyer-_organization_number = ls_t001-rcomp.
      SELECT SINGLE landx FROM t005t INTO lc_landx
             WHERE spras = 'E'
               AND land1 = ls_t001-land1.
      IF sy-subrc = 0.
        ls_buyer-_address_country = lc_landx.
      ENDIF.
      IF ls_t001-adrnr IS NOT INITIAL.
        SELECT SINGLE * FROM adrc INTO ls_adrc
                WHERE addrnumber = ls_t001-adrnr.
      ENDIF.
      IF ls_adrc IS NOT INITIAL.
        CONCATENATE ls_adrc-street ls_adrc-house_num1 INTO
        ls_buyer-_address_street_address SEPARATED BY space.
        ls_buyer-_address_post_code = ls_adrc-post_code1.
        ls_buyer-_address_state = ls_adrc-region.
        ls_buyer-_address_city = ls_adrc-city1.
        ls_buyer-_phone_number = ls_adrc-tel_number.
        ls_buyer-_alternative_name1 = ls_adrc-name2.
      ENDIF.
      ls_json = serialize_to_json( ist_data       = ls_buyer
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).

* post the current buyer
      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = ls_buyer_ok ).
        zdyn_cl_msg=>add_msg( EXPORTING ic_msgty = 'S'
                                        ic_msgid = '63'
                                        ic_msgno = '627'
                                        ic_msgv1 = ls_buyer_ok-name ).
*   MESSAGE s627(63) with space.
      ELSE.
*  for errors potentially change the buyer
        call_http_put( EXPORTING is_input       = ls_json
                       IMPORTING ei_return_code = li_return_code ).

        IF li_return_code = 200.
          deserialize_from_json( EXPORTING is_json  = ms_result
                                 CHANGING  cst_data = ls_buyer_ok ).
          zdyn_cl_msg=>add_msg( EXPORTING ic_msgty = 'S'
                                          ic_msgid = '5G'
                                          ic_msgno = '653'
                                          ic_msgv1 = ls_buyer_ok-name ).
*   MESSAGE s653(5G) with space.
        ELSE.
          deserialize_from_json( EXPORTING is_json  = ms_result
                       CHANGING  cst_data = ls_error ).
          zdyn_cl_msg=>add_msg( EXPORTING ic_msgty = 'E'
                                          ic_msgid = 'ZDYN_WS'
                                          ic_msgno = '000'
                                          ic_msgv1 = ls_error-code
                                          ic_msgv2 = ls_error-message
                                           ).
*   MESSAGE e000(zdyn_ws) with space space space space.

        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
METHOD fill_bankaccount.

  DATA: lt_lfbk  TYPE TABLE OF lfbk,
        ls_bank  TYPE zdyn_cl_rest_tools_rso_data=>ty_bankaccount,
        lc_lifnr TYPE lifnr,
        lc_iban  TYPE iban,
        lc_banka TYPE banka.

  FIELD-SYMBOLS:
        <lfbk> TYPE lfbk.

  CHECK NOT ic_lifnr IS INITIAL.

  zdyn_cl_bapi=>mo->get_vendor_banks( EXPORTING ic_vendor = ic_lifnr
                                      IMPORTING et_banks  = lt_lfbk ).
  CHECK lt_lfbk IS NOT INITIAL.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = ic_lifnr
    IMPORTING
      output = lc_lifnr.

  LOOP AT lt_lfbk ASSIGNING <lfbk>.
    CLEAR: lc_banka, lc_iban.
*   read the iban from tiban
    zdyn_cl_bapi=>mo->get_iban( EXPORTING ic_banks = <lfbk>-banks
                                          ic_bankl = <lfbk>-bankl
                                          ic_bankn = <lfbk>-bankn
                                          ic_bkont = <lfbk>-bkont
                                IMPORTING ec_iban  = lc_iban ).
*     read the bank name from bnka
    lc_banka = zdyn_cl_bapi=>mo->get_bank_name( ic_country_key = <lfbk>-banks
                                                ic_keys        = <lfbk>-bankl ).
    ls_bank-_supplier_number = lc_lifnr.
    ls_bank-_bank_name = lc_banka.
    ls_bank-_bank_number = <lfbk>-bankl.
    IF lc_iban IS INITIAL.
      CLEAR ls_bank-_account_number_type.
      ls_bank-_account_number = <lfbk>-bankn.
    ELSE.
      ls_bank-_account_number_type = 'iban'.
      ls_bank-_account_number = lc_iban.
    ENDIF.
    APPEND ls_bank TO rt_bankaccounts.
  ENDLOOP.

ENDMETHOD.
  METHOD fill_customers.

    DATA:
          lc_kunnr    TYPE kunnr,
          ls_customer TYPE zdyn_cl_rest_tools_rso_data=>ty_customer.

    FIELD-SYMBOLS: <cmd> TYPE zdyn_ws_cmd.

    LOOP AT it_customers ASSIGNING <cmd>.
*       now we check date of last change
      IF NOT id_date IS INITIAL.
        IF id_date > <cmd>-erdat.
          CHECK abap_true = zdyn_cl_bapi=>mo->is_object_modified( ic_object_id    = <cmd>-kunnr
                                                                  ic_object_class = 'DEBI'
                                                                  id_date         = id_date ).
        ENDIF.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = <cmd>-kunnr
        IMPORTING
          output = lc_kunnr.

      ls_customer-_customer_number = lc_kunnr.
      ls_customer-_name = <cmd>-name1.
      ls_customer-_tax_registration_number = <cmd>-stceg.
      ls_customer-_organization_number = <cmd>-stcd1.
      ls_customer-_street = <cmd>-stras.
      ls_customer-_postal_code = <cmd>-pstlz.
      ls_customer-_city = <cmd>-ort01.
      ls_customer-_country_name = <cmd>-intca.
      ls_customer-_state = <cmd>-regio.
*        ls_customer-_id = <cmd>-some_guid.
      ls_customer-_telephone_number = <cmd>-telf1.
      ls_customer-_fax_number = <cmd>-telfx.
      IF NOT <cmd>-loevm IS INITIAL OR
         NOT <cmd>-sperr IS INITIAL.
        ls_customer-_blocked = abap_true.
      ELSEIF NOT ic_bukrs IS INITIAL
         AND ( NOT <cmd>-bukrs_loevm IS INITIAL OR
               NOT <cmd>-bukrs_sperr IS INITIAL ).
        ls_customer-_blocked = abap_true.
      ELSE.
        CLEAR ls_customer-_blocked.
      ENDIF.
      APPEND ls_customer TO ct_customer.
      mi_entry_counter = mi_entry_counter + 1.
    ENDLOOP.

  ENDMETHOD.
METHOD get_ar_object_value.

  rc_ar_object = zdyn_cl_config=>mo->get_archive_object( ic_comp_code = mst_config-bukrs
                                                         ic_username  = mst_config-username
                                                         ic_api_key   = mst_config-apikey ).

ENDMETHOD.
METHOD get_current_partnerid.

  DATA: li_return_code    TYPE i,
        ls_path           TYPE string,
        lst_sel_comp_code LIKE LINE OF mt_sel_comp_codes,
        lst_cfg           TYPE zdyn_cl_rest_tools_rso_data=>ty_mastercfg,
        lt_buyer          TYPE STANDARD TABLE OF zdyn_cl_rest_tools_rso_data=>ty_rsoaccount,
        lst_account       TYPE zdyn_cl_rest_tools_rso_data=>ty_rsoaccount.

  zdyn_cl_msg=>add_to_call_stack( ).

* reuse existing account
  CHECK mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.
  set_new_rel_url( EXPORTING is_path = con_getcurrentcustomer ).
* get the current account
  call_http_get( IMPORTING ei_return_code = li_return_code ).

  CHECK li_return_code = 200.
  deserialize_from_json( EXPORTING is_json  = ms_result
                         CHANGING  cst_data = lst_account ).
* get the masterdata config
  CONCATENATE con_getaccounts lst_account-id con_getmasterdatacfg INTO ls_path.
  set_new_rel_url( EXPORTING is_path = ls_path ).
  call_http_get( IMPORTING ei_return_code = li_return_code ).

  CHECK li_return_code = 200.
  deserialize_from_json( EXPORTING is_json  = ms_result
                         CHANGING  cst_data = lst_cfg ).

  IF lst_cfg-masterdataoncustomerlevel = abap_true.
*    LOOP AT mt_sel_comp_codes INTO lst_sel_comp_code.
*      lst_account-comp_code = lst_sel_comp_code-low.
*      APPEND lst_account TO mt_accounts.
*    ENDLOOP.
    IF mt_accounts IS INITIAL.
      APPEND lst_account TO mt_accounts.
    ENDIF.

  ELSE.
*   master data on buyer level
    set_new_rel_url( EXPORTING is_path = con_getcurrentuserbuyers ).
    call_http_get( IMPORTING ei_return_code = li_return_code ).

    CHECK li_return_code = 200.
    deserialize_from_json( EXPORTING is_json  = ms_result
                           CHANGING  cst_data = lt_buyer ).
    IF mst_config-sel_all = abap_true AND lt_buyer IS NOT INITIAL.
      LOOP AT lt_buyer INTO lst_account WHERE externalid <> space.
        lst_account-comp_code = lst_account-externalid.
        APPEND lst_account TO mt_accounts.
      ENDLOOP.
    ELSE.
*   find buyer ID for current company code
      READ TABLE lt_buyer WITH KEY externalid = mst_config-bukrs
                 INTO lst_account.
      IF sy-subrc = 0 OR lt_buyer IS INITIAL.
        LOOP AT mt_sel_comp_codes INTO lst_sel_comp_code.
          lst_account-comp_code = lst_sel_comp_code-low.
          APPEND lst_account TO mt_accounts.
        ENDLOOP.
        IF mt_accounts IS INITIAL.
          APPEND lst_account TO mt_accounts.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDIF.

  CHECK mt_accounts IS INITIAL.
* error message that externalid needs to be populated at buyer level
  zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = '7Q'
                                  ic_msgno = '447'
                                  ic_msgv1 = mst_config-bukrs ).
* message e447(7q) with space.

ENDMETHOD.
METHOD GET_ID_FROM_XML.

  DATA: li_pos TYPE i,
        li_len TYPE i.

* Take the first HEX number (potentially with '-' characters) ending with </Id>. It will be the Batch ID value from the file.
  FIND FIRST OCCURRENCE OF REGEX '\b[a-fA-F0-9\-]+(?=<\/Id>)' IN is_xml MATCH OFFSET li_pos MATCH LENGTH li_len.
  IF li_pos <> 0 AND li_len <> 0.
    rs_id = is_xml+li_pos(li_len).
  ENDIF.

ENDMETHOD.
METHOD get_output_document_att.

  DATA: li_return_code TYPE i,
        li_size        TYPE i,
        ls_attachment  TYPE zdyn_stru_archiving,
        ls_path        TYPE string,
        ls_query       TYPE string,
        ls_media_type  TYPE string,
        lx_image       TYPE xstring,
        lt_attachments TYPE zdyn_cl_rest_tools_rso_data=>tt_documentatt.

  FIELD-SYMBOLS: <lst_attachment> TYPE zdyn_cl_rest_tools_rso_data=>ty_documentatt.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.
  CHECK NOT is_document-documentid IS INITIAL.
  eb_ok = abap_true.
  IF NOT mst_config-store_mail IS INITIAL AND NOT is_document-batchid IS INITIAL.
    CLEAR ls_query.
    CLEAR eb_ok.
    CONCATENATE con_getbatch is_document-batchid con_email INTO ls_path.
    set_new_rel_url( EXPORTING is_path  = ls_path
                               is_query = ls_query ).
*   get the real attachment data
    mo_http_client->request->set_header_field( EXPORTING name  = con_accept
                                                         value = '*/*' ).

    call_http_get( IMPORTING ei_return_code = li_return_code
                             es_media_type  = ls_media_type
                             ex_xstring     = lx_image ).

    ls_attachment-filename  = 'original.eml'.
    IF li_return_code = 200.
      eb_ok = abap_true.
*     prepare archiving
      mo_http_client->response->if_http_entity~get_data_length( IMPORTING data_length = li_size ).
*     document has been created from an email otherwise size = 0
      IF li_size > 0.
        ls_attachment-binlength = li_size.
        ls_attachment-mimetype  = con_mime_mail.
        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
          EXPORTING
            buffer     = lx_image
          TABLES
            binary_tab = ls_attachment-content.
        IF mo_file->is_doc_to_file( ) = abap_false.
          mr_attachments->add( ls_attachment ).
        ELSE.
          eb_ok = mo_file->save_image_in_file( is_filename = ls_attachment-filename
                                               it_data     = ls_attachment-content ).
        ENDIF.
      ENDIF.
    ELSE.
*     error message
      zdyn_cl_msg=>add_sysmsg( ).
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = '1R'
                                      ic_msgno    = '516'
                                      ic_msgv1    = ls_attachment-filename ).
*     message e516(1r) with space.
*     if the email was supposed to be retrieved and it failed, we should not continue
      RETURN.
    ENDIF.
    CLEAR ls_attachment.
  ENDIF.
  CHECK NOT mst_config-store_att IS INITIAL.
  CONCATENATE '/documents/rest/' is_document-customerid '/'
              is_document-documentid '/attachments' INTO ls_path.
  ls_query = 'includeOriginalFiles=1'.
  set_new_rel_url( EXPORTING is_path  = ls_path
                             is_query = ls_query ).
  mo_http_client->request->set_header_field( EXPORTING name  = con_accept
                                                       value = con_mimetype_json ).
  call_http_get( IMPORTING ei_return_code = li_return_code ).

  CHECK li_return_code = 200.
  deserialize_from_json( EXPORTING is_json  = ms_result
                         CHANGING  cst_data = lt_attachments ).
*  list of attachments to be downloaded
  LOOP AT lt_attachments ASSIGNING <lst_attachment>.
    CLEAR ls_attachment.
    CHECK <lst_attachment>-filename <> 'original.eml'.
*   get the real attachment data
    mo_http_client->request->set_header_field( EXPORTING name  = con_accept
                                                         value = '*/*' ).
    CLEAR eb_ok.

*    URL is set in the data
    ms_url = <lst_attachment>-downloaduri.

    call_http_get( IMPORTING ei_return_code = li_return_code
                             es_media_type  = ls_media_type
                             ex_xstring     = lx_image ).
    IF li_return_code = 200.
      eb_ok = abap_true.
*     prepare archiving
      mo_http_client->response->if_http_entity~get_data_length( IMPORTING data_length = li_size ).

      ls_attachment-binlength = li_size.
      ls_attachment-mimetype = ls_media_type.
*     check if this is the invoice image we already use
      READ TABLE mr_attachments->mt_attachments
        WITH KEY binlength = li_size
                 mimetype  = ls_media_type
                 TRANSPORTING NO FIELDS.
      CHECK sy-subrc <> 0.

      ls_attachment-filename = <lst_attachment>-displayname.
      CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
        EXPORTING
          buffer     = lx_image
        TABLES
          binary_tab = ls_attachment-content.
      IF mo_file->is_doc_to_file( ) = abap_false.
        mr_attachments->add( ls_attachment ).
      ELSE.
        eb_ok = mo_file->save_image_in_file( is_filename = ls_attachment-filename
                                             it_data     = ls_attachment-content ).
      ENDIF.
    ELSE.
*     error message
      zdyn_cl_msg=>add_sysmsg( ).
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = '1R'
                                      ic_msgno    = '516'
                                      ic_msgv1    = ls_attachment-filename ).
*     message e516(1r) with space.
*     if any attachment from the list cannot be retrived, we should not continue
      RETURN.
    ENDIF.

  ENDLOOP.

ENDMETHOD.
METHOD get_output_document_data.

  DATA: li_return_code TYPE i,
        ls_path        TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_document-documentid IS INITIAL.
  CONCATENATE con_getoutputfile is_document-documentid '/data' INTO ls_path.
  CHECK mo_http_client IS BOUND.
  set_new_rel_url( EXPORTING is_path = ls_path ).
  mo_http_client->request->set_header_field( EXPORTING name  = con_accept
                                                       value = con_mimetype_json ).
  call_http_post( EXPORTING is_input       = '[]'
                  IMPORTING ei_return_code = li_return_code ).

  IF li_return_code = 200.
*   process the data e.g. transform XML using xslt ...
    IF mo_file->is_doc_to_file( ) = abap_false.
      process_output_document( EXPORTING is_document      = is_document
                                         ic_xslt          = ic_xslt
                               IMPORTING eb_ok            = eb_ok
                                         eb_skip_feedback = eb_skip_feedback ).
    ELSE.
      eb_ok = mo_file->save_doc_in_xml_file( is_doc_no = is_document-documentid
                                             is_xml    = ms_result ).
    ENDIF.
  ELSE.
*   error message
    zdyn_cl_msg=>add_sysmsg( ).
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'M8'
                                    ic_msgno    = '714'
                                    ic_msgv1    = is_document-documentid ).
*   message e714(m8) with space space space.
  ENDIF.

ENDMETHOD.
METHOD get_output_document_image.

  DATA: li_return_code TYPE i,
        li_size        TYPE i,
        ls_attachment  TYPE zdyn_stru_archiving,
        ls_path        TYPE string,
        ls_media_type  TYPE string,
        lx_image       TYPE xstring.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_document-documentid IS INITIAL.
  CONCATENATE con_getoutputfile is_document-documentid '/image' INTO ls_path.
  CHECK mo_http_client IS BOUND.
  set_new_rel_url( is_path = ls_path ).
  mo_http_client->request->set_header_field( EXPORTING name  = con_accept
                                                       value = '*/*' ).
  call_http_get( IMPORTING ei_return_code = li_return_code
                           es_media_type  = ls_media_type
                           ex_xstring     = lx_image ).
  IF li_return_code = 200.
*   prepare archiving
    mo_http_client->response->if_http_entity~get_data_length( IMPORTING data_length = li_size ).

    ls_attachment-binlength = li_size.
    ls_attachment-mimetype = ls_media_type.
*   set the default AR_OBJECT value for the output document
    ls_attachment-ar_object = get_ar_object_value( ).

    IF ls_media_type = 'application/pdf'.
      CONCATENATE is_document-documentid '.pdf' INTO ls_attachment-filename.
    ELSEIF ls_media_type = 'image/tiff'.
      CONCATENATE is_document-documentid '.tif' INTO ls_attachment-filename.
    ENDIF.
    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        buffer     = lx_image
      TABLES
        binary_tab = ls_attachment-content.
    IF mo_file->is_doc_to_file( ) = abap_false.
      mr_attachments->add( ls_attachment ).
      eb_ok = abap_true.
    ELSE.
      eb_ok = mo_file->save_image_in_file( is_filename = ls_attachment-filename
                                           it_data     = ls_attachment-content ).
    ENDIF.
  ELSE.
*   error message
    zdyn_cl_msg=>add_sysmsg( ).
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'QISR'
                                    ic_msgno    = '606' ).
*   message e606(qisr).
  ENDIF.

ENDMETHOD.
METHOD get_output_documents.

  DATA: li_return_code   TYPE i,
        lb_ok            TYPE abap_bool,
        lb_skip_feedback TYPE abap_bool,
        lt_documents     TYPE zdyn_cl_rest_tools_rso_data=>tt_outputdocuments.
  FIELD-SYMBOLS: <ls_document> TYPE zdyn_cl_rest_tools_rso_data=>ty_outputdocuments.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.
  get_current_partnerid( ).
  CHECK NOT mt_accounts IS INITIAL.

  set_new_rel_url( is_path = con_getoutputdocuments_api ).
  call_http_get( IMPORTING ei_return_code = li_return_code ).

  IF li_return_code = 200.
    deserialize_from_json( EXPORTING is_json  = ms_result
                           CHANGING  cst_data = lt_documents ).

    CLEAR mi_entry_counter.
*   list of outputdocuments to be downloaded
    LOOP AT lt_documents ASSIGNING <ls_document>.
      lb_skip_feedback = abap_false.

      READ TABLE mt_accounts TRANSPORTING NO FIELDS WITH KEY id = <ls_document>-buyerid.
      IF sy-subrc <> 0.
        READ TABLE mt_accounts TRANSPORTING NO FIELDS WITH KEY id = <ls_document>-customerid.
      ENDIF.
      CHECK sy-subrc = 0.

*     start collecting messages that will be sent back in feedback
      zdyn_cl_msg=>start_group( ).

*     first get the image
      get_output_document_image( EXPORTING is_document = <ls_document>
                                 IMPORTING eb_ok       = lb_ok ).
      IF lb_ok = abap_true.
*       get original attachments and/or email body
        get_output_document_att( EXPORTING is_document = <ls_document>
                                 IMPORTING eb_ok       = lb_ok ).
        IF lb_ok = abap_true.
*         the get the data
          get_output_document_data( EXPORTING is_document      = <ls_document>
                                              ic_xslt          = ic_xslt
                                    IMPORTING eb_ok            = lb_ok
                                              eb_skip_feedback = lb_skip_feedback ).
        ENDIF.
      ENDIF.
      zdyn_cl_msg=>stop_group( ).
*     after success update status in RSO
      IF ib_skip_feedback	= abap_false AND lb_skip_feedback = abap_false.
        IF lb_ok = abap_true.
          lb_ok = set_document_downloaded( is_documentid = <ls_document>-documentid ).
        ENDIF.
        IF lb_ok = abap_false.
*         return error message to RSO and set new status
          lb_ok = set_document_rejected( is_documentid = <ls_document>-documentid ).
        ENDIF.
      ENDIF.
      mi_entry_counter = mi_entry_counter + 1.

*     clear the processed document/attachment data
      clear_document_data( ).
    ENDLOOP.

*   only a message when entries have been processed
    IF mi_entry_counter IS NOT INITIAL.
     zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).
    ENDIF.

  ELSE.
*   error message no variables are populated
    zdyn_cl_msg=>add_sysmsg( ).
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'FPRL'
                                    ic_msgno    = '013' ).
*   message e013(fprl).
  ENDIF.

ENDMETHOD.
METHOD get_pd_mapid.

  zdyn_cl_msg=>add_to_call_stack( ).

  SELECT SINGLE * FROM zdyn_rso_tpdmap INTO rst_pdmap
                 WHERE sysid    = sy-sysid
                   AND bukrs    = mst_config-bukrs
                   AND apikey   = mst_config-apikey
                   AND username = mst_config-username.

  IF rst_pdmap-obj IS INITIAL.
    rst_pdmap-obj = 'IV'.
  ENDIF.
  IF rst_pdmap-mapid IS INITIAL.
    rst_pdmap-mapid = 'RSO'.
  ENDIF.

ENDMETHOD.
METHOD inbound_process.

  DATA: ls_xml  TYPE string,
        lst_doc TYPE zdyn_cl_rest_tools_rso_data=>ty_outputdocuments.

  IF mo_file->is_file_to_doc( ) = abap_false.
    IF ic_xslt IS INITIAL.
      get_output_documents( ib_skip_feedback = ib_skip_feedback ).
    ELSE.
      get_output_documents( ic_xslt          = ic_xslt
                            ib_skip_feedback = ib_skip_feedback ).
    ENDIF.
  ELSE.
    mo_file->get_file_content( IMPORTING es_content = ls_xml ).
    lst_doc-documentid = get_id_from_xml( ls_xml ).
    IF ic_xslt IS INITIAL.
      process_output_document( is_document = lst_doc
                               is_xml      = ls_xml ).
    ELSE.
      process_output_document( is_document = lst_doc
                               is_xml      = ls_xml
                               ic_xslt     = ic_xslt ).
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD prepare_client.

  DATA: ls_apikey TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  ls_apikey = mst_config-apikey.

  IF mst_config-rfcdest IS NOT INITIAL.
    create_http_client( EXPORTING  ic_rfcdest   = mst_config-rfcdest
                                   ib_skip_test = mst_config-skip_http_test
                        EXCEPTIONS OTHERS       = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
  ELSE.
    create_http_client( EXPORTING  is_url       = con_rso_url
                                   ib_skip_test = mst_config-skip_http_test
                        EXCEPTIONS OTHERS       = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
  ENDIF.

  CHECK mo_http_client IS BOUND.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_x_rs_culture
      value = con_en_us.
  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_x_rs_uiculture
      value = con_en_us.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_x_rs_version
      value = con_version.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = 'x-rs-key'
      value = ls_apikey.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_accept
      value = con_mimetype_json.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_accept_encoding
      value = 'gzip,deflate'.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_content_type
      value = con_mimetype_json.

ENDMETHOD.
METHOD process_output_document.

  DATA: lt_data         TYPE abap_trans_resbind_tab,
        ls_xml          TYPE string,
        ls_addr         TYPE string,
        lst_edidc       TYPE edidc,
        lc_object_id    TYPE saeobjid,
        lc_msgv1        TYPE sy-msgv1,
        lc_msgv2        TYPE sy-msgv2,
        lc_msgv3        TYPE sy-msgv3,
        lb_skip_parsing TYPE abap_bool,
        lt_messages     TYPE bapiret2_t.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF is_xml IS NOT INITIAL.
    ms_result = is_xml.
  ENDIF.

  IF ic_xslt NE space.
*    use XSLT from external call
    mst_config-xslt = ic_xslt.
  ENDIF.
*    set default XSLT values for import types
  IF mst_config-xslt IS INITIAL.
    IF mst_config-imp_type EQ con_imp_type_pd.
      mst_config-xslt = con_xslt_to_pd.
    ENDIF.
    IF mst_config-imp_type EQ con_imp_type_idoc.
      mst_config-xslt = con_xslt_to_idoc.
    ENDIF.
  ENDIF.
*    special preparation of lt_data for IDOC handling to suppress error.
  IF mst_config-imp_type = con_imp_type_idoc.
    IF mst_config-xslt = con_xslt_to_pd.
      mst_config-xslt = con_xslt_to_idoc.
    ENDIF.
    lb_skip_parsing = abap_true.
*   root node after XSLT transformation is DOCUMENT
*   converted structure see template ZDYN_RSO_TO_PD xslt
*    lst_data-name = 'IDOC'.
*    GET REFERENCE OF mst_pdiv_document INTO lst_data-value.
*    APPEND lst_data TO lt_data.
  ENDIF.

*   do we need XSLT processing ?
  IF NOT mst_config-xslt IS INITIAL.
    transform_output_document( EXPORTING ic_xslt          = mst_config-xslt
                                         ib_skip_parsing  = lb_skip_parsing
                               IMPORTING eb_ok            = eb_ok
                                         es_xml           = ls_xml
                               CHANGING  ct_data          = lt_data ).
  ENDIF.

* needs to be processed somehow - config stored in mst_config
  CASE mst_config-imp_type.
    WHEN con_imp_type_localfile.
*  1. save file on server
      CHECK NOT ls_xml IS INITIAL.
      save_files_locally( EXPORTING is_document      = is_document
                                    is_data          = ls_xml
                          IMPORTING eb_ok            = eb_ok
                                    eb_skip_feedback = eb_skip_feedback ).

    WHEN con_imp_type_idoc.
      CLEAR eb_ok.
*  2. create IDOC
      CHECK NOT ls_xml IS INITIAL.
      ls_addr = is_document-documentid.
      call_xml_to_idoc( EXPORTING  is_xml           = ls_xml
                                   is_remote_addr   = ls_addr
                        IMPORTING  eb_skip_feedback = eb_skip_feedback
                        EXCEPTIONS OTHERS           = 1 ).
      IF sy-subrc <> 0.
* Implement suitable error handling here
        IF sy-msgid = 'EA' AND sy-msgno = '097'.
          sy-msgty = 'S'.
          eb_ok = abap_true.
        ENDIF.
        zdyn_cl_msg=>add_sysmsg( ).
      ELSE.
* get created IDOC number
        CLEAR: lc_msgv1, lc_msgv2.
        zdyn_cl_bapi=>mo->get_idoc_control_record( EXPORTING is_external_doc_id = is_document-documentid
                                                   IMPORTING es_record          = lst_edidc ).
        IF lst_edidc-docnum IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = lst_edidc-docnum
            IMPORTING
              output = lc_msgv1.
          lc_msgv2 = lst_edidc-rcvprn.
          lc_object_id = lst_edidc-docnum.

          archive_attachment_data( EXPORTING  ic_sap_object = 'IDOC'
                                              ic_object_id  = lc_object_id ).
        ENDIF.
* we need a success message
        eb_ok = abap_true.
        lc_msgv3 = is_document-documentid.
        zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                        ic_msgid    = 'GJ'
                                        ic_msgno    = '859'
                                        ic_msgv1    = lc_msgv1
                                        ic_msgv2    = lc_msgv2
                                        ic_msgv3    = lc_msgv3 ).
*       message s859(gj) with space space space.
      ENDIF.
    WHEN con_imp_type_pd.
*  3. send to PD
      CHECK eb_ok = abap_true.
      CHECK NOT lt_data IS INITIAL.
      transfer_data_to_pd( EXPORTING is_document      = is_document
                                     it_data          = lt_data
                           IMPORTING eb_ok            = eb_ok
                                     eb_skip_feedback = eb_skip_feedback
                                     et_messages      = lt_messages ).
      zdyn_cl_msg=>add_msgs( EXPORTING it_messages = lt_messages
                                       ii_level    = zdyn_cl_msg=>con_message_level_1 ).
    WHEN con_imp_type_sap.
*  4. send to SAP
      CHECK eb_ok = abap_true.
      CHECK NOT lt_data IS INITIAL.
      transfer_data_to_sap( EXPORTING is_document      = is_document
                                      it_data          = lt_data
                            IMPORTING eb_ok            = eb_ok
                                      eb_skip_feedback = eb_skip_feedback
                                      et_messages      = lt_messages ).
      zdyn_cl_msg=>add_msgs( EXPORTING it_messages = lt_messages
                                       ii_level    = zdyn_cl_msg=>con_message_level_1 ).
    WHEN OTHERS.
*   still to be developed
  ENDCASE.

ENDMETHOD.
METHOD save_files_locally.

  DATA: ls_filename TYPE string,
        lt_data     TYPE rmps_t_1024,
        lc_file     TYPE text255.

  FIELD-SYMBOLS: <lst_att> TYPE zdyn_stru_archiving.

  zdyn_cl_msg=>add_to_call_stack( ).

  CLEAR eb_ok.
  CHECK NOT mst_config-importfile IS INITIAL.

  CONCATENATE is_document-documentid '.xml' INTO lc_file.

  mo_file->get_file_name_using_path( EXPORTING  ic_logical_path   = mst_config-importfile
                                                is_file_name      = lc_file
                                     IMPORTING  es_full_file_name = ls_filename
                                     EXCEPTIONS OTHERS            = 1 ).
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_sysmsg( ).
    EXIT.
  ENDIF.

  convert_string_to_tt_tbl1024( EXPORTING is_string = is_data
                                IMPORTING et_data   = lt_data ).

* save data file
  eb_ok = mo_file->store_file_on_appserver( is_filename = ls_filename
                                            it_data     = lt_data ).
  IF eb_ok = abap_false.
    zdyn_cl_msg=>add_sysmsg( ).
    EXIT.
  ENDIF.
  zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                  ic_msgid    = '1E'
                                  ic_msgno    = '226'
                                  ic_msgv1    = lc_file ).

  LOOP AT mr_attachments->mt_attachments ASSIGNING <lst_att>.

    mo_file->get_file_name_using_path( EXPORTING  ic_logical_path   = mst_config-importfile
                                                  is_file_name      = <lst_att>-filename
                                       IMPORTING  es_full_file_name = ls_filename
                                       EXCEPTIONS OTHERS            = 0 ).
*   save the image file
    eb_ok = mo_file->store_file_on_appserver( is_filename = ls_filename
                                              it_data     = <lst_att>-content ).
    IF eb_ok = abap_false.
      zdyn_cl_msg=>add_sysmsg( ).
      EXIT.
    ENDIF.

    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = '1R'
                                    ic_msgno    = '412'
                                    ic_msgv1    = <lst_att>-filename ).
*  message s412(1r) with space.

  ENDLOOP.

  IF eb_ok = abap_true.
    add_msg_1 s 050 zdyn_ws 0 is_document-documentid.
*   message s050(zdyn_ws) with space.
  ENDIF.

ENDMETHOD.
  METHOD set_comp_code.

    DATA: lst_sel_comp_code LIKE LINE OF mt_sel_comp_codes.

    zdyn_cl_msg=>add_to_call_stack( ).

    IF ic_bukrs IS NOT INITIAL.
      CLEAR mt_sel_comp_codes.
      lst_sel_comp_code-sign = 'I'.
      lst_sel_comp_code-option = 'EQ'.
      lst_sel_comp_code-low = ic_bukrs.
      APPEND lst_sel_comp_code TO mt_sel_comp_codes.
    ENDIF.

  ENDMETHOD.
METHOD set_company_codes.

  DATA: lst_sel_comp_code LIKE LINE OF mt_sel_comp_codes.

  zdyn_cl_msg=>add_to_call_stack( ).

  super->set_company_codes( EXPORTING it_sel_comp_codes = it_sel_comp_codes ).

  IF mst_config-bukrs IS NOT INITIAL.
*    READ TABLE mt_sel_comp_codes TRANSPORTING NO FIELDS
*      WITH KEY low = mst_config-bukrs.
*    IF sy-subrc <> 0.
    IF mt_sel_comp_codes[] IS INITIAL.
      lst_sel_comp_code-sign = 'I'.
      lst_sel_comp_code-option = 'EQ'.
      lst_sel_comp_code-low = mst_config-bukrs.
      APPEND lst_sel_comp_code TO mt_sel_comp_codes.
    ENDIF.
  ENDIF.
  SORT mt_sel_comp_codes BY low.

ENDMETHOD.
METHOD set_costcenters.

  DATA: li_return_code TYPE i,
        li_tabix       TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        ls_sel_cc      LIKE LINE OF mt_sel_comp_codes,
        lc_kokrs       TYPE kokrs,
        lt_kosts       TYPE STANDARD TABLE OF m_kosts,
        lt_kosts_cc    TYPE STANDARD TABLE OF m_kosts,
        lst_account    LIKE LINE OF mt_accounts,
        lt_costcenter  TYPE zdyn_cl_rest_tools_rso_data=>tt_costcenter,
        ls_costcenter  TYPE zdyn_cl_rest_tools_rso_data=>ty_costcenter,
        ls_costcenters TYPE zdyn_cl_rest_tools_rso_data=>ty_costcenters,
        lst_mdresponse TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS: <kosts> TYPE m_kosts.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ib_delete IS INITIAL OR NOT it_sel_kostl IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR mi_entry_counter.
  LOOP AT mt_accounts INTO lst_account.

    CONCATENATE con_masterdata lst_account-id '/costcenters' INTO ls_path.

    IF ib_delete = abap_true.
      CLEAR: ls_costcenters, lst_mdresponse.
*     remove all entries before adding new ones
      set_new_rel_url( EXPORTING is_path  = ls_path
                                 is_query = con_query_pagesize ).

*     first read all
      call_http_get( IMPORTING  ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json        = ms_result
                                         ic_pretty_name = con_camel_case
                               CHANGING  cst_data       = ls_costcenters ).
        IF NOT ls_costcenters-pagecount IS INITIAL.
*         are there entries to be deleted ?
          ls_json = serialize_to_json( ist_data       = ls_costcenters-costcenters
                                       ic_compress    = abap_false
                                       ic_pretty_name = con_camel_case ).
          set_new_rel_url( EXPORTING is_path = ls_path ).

          call_http_delete( EXPORTING is_input       = ls_json
                            IMPORTING ei_return_code = li_return_code ).

          IF li_return_code = 200.
            deserialize_from_json( EXPORTING is_json  = ms_result
                                   CHANGING  cst_data = lst_mdresponse ).
            set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
          ELSE.
            set_error_message( ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF NOT it_sel_kostl IS INITIAL.
      CLEAR: lc_kokrs, lt_kosts, lt_costcenter.
*     if bulk processing is active
      IF mst_config-sel_all = abap_true.
        CALL METHOD set_comp_code
          EXPORTING
            ic_bukrs = lst_account-comp_code.
      ENDIF.

      LOOP AT mt_sel_comp_codes INTO ls_sel_cc.
        lst_account-comp_code = ls_sel_cc-low.
        zdyn_cl_bapi=>mo->get_controlling_area( EXPORTING   ic_comp_code   = lst_account-comp_code
                                                IMPORTING   ec_ctrl_area   = lc_kokrs
                                                EXCEPTIONS  OTHERS         = 0 ).

*     add/modify entries
        zdyn_cl_bapi=>mo->get_cost_centers( EXPORTING ic_comp_code    = lst_account-comp_code
                                                      ic_ctrl_area    = lc_kokrs
                                                      it_sel_opt      = it_sel_kostl
                                                      it_sel_langu    = mt_sel_langu
                                            IMPORTING et_cost_centers = lt_kosts_cc ).
        APPEND LINES OF lt_kosts_cc TO lt_kosts.
        CLEAR lt_kosts_cc.
      ENDLOOP.
      IF mt_sel_comp_codes IS INITIAL.
        zdyn_cl_bapi=>mo->get_cost_centers( EXPORTING it_sel_opt      = it_sel_kostl
                                                      it_sel_langu    = mt_sel_langu
                                            IMPORTING et_cost_centers = lt_kosts ).
      ENDIF.
      ls_costcenter-_active = abap_true.
      LOOP AT lt_kosts ASSIGNING <kosts>.
        ls_costcenter-_code = <kosts>-kostl.
        ls_costcenter-_description = ls_costcenter-_name = <kosts>-mctxt.
        APPEND ls_costcenter TO lt_costcenter.
        mi_entry_counter = mi_entry_counter + 1.
      ENDLOOP.
      CHECK lt_costcenter IS NOT INITIAL.
      ls_json = serialize_to_json( ist_data       = lt_costcenter
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).
      set_new_rel_url( EXPORTING is_path = ls_path ).

      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).
      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_mdresponse ).
        set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
      ELSE.
        set_error_message( ).
      ENDIF.
    ENDIF.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_currencies.

  DATA: li_return_code TYPE i,
        li_tabix       TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        lt_tcurt       TYPE STANDARD TABLE OF tcurt,
*        lc_local       TYPE waers,
        lst_account    LIKE LINE OF mt_accounts,
        lt_currency    TYPE zdyn_cl_rest_tools_rso_data=>tt_currency,
        ls_currency    TYPE zdyn_cl_rest_tools_rso_data=>ty_currency,
        ls_currencies  TYPE zdyn_cl_rest_tools_rso_data=>ty_currencies,
        lst_mdresponse TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS: <tcurt> TYPE tcurt.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ib_delete IS INITIAL OR NOT it_sel_waers IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR: mi_entry_counter, lt_currency.
  LOOP AT mt_accounts INTO lst_account.

    CONCATENATE con_masterdata lst_account-id '/currencies' INTO ls_path.

    IF ib_delete = abap_true.
      CLEAR: ls_currencies.

*     remove all entries before adding new ones
      set_new_rel_url( is_path  = ls_path
                       is_query = con_query_pagesize ).

*     first read all
      call_http_get( IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json        = ms_result
                                         ic_pretty_name = con_camel_case
                               CHANGING  cst_data       = ls_currencies ).
        IF NOT ls_currencies-pagecount IS INITIAL.
*         are there entries to be deleted ?
          ls_json = serialize_to_json( ist_data       = ls_currencies-currencies
                                       ic_compress    = abap_false
                                       ic_pretty_name = con_camel_case ).
          mi_entry_counter = mi_entry_counter + lines( ls_currencies-currencies ).
          set_new_rel_url( is_path = ls_path ).

          call_http_delete( EXPORTING is_input       = ls_json
                            IMPORTING ei_return_code = li_return_code ).

          IF li_return_code = 200.
            deserialize_from_json( EXPORTING is_json  = ms_result
                                   CHANGING  cst_data = lst_mdresponse ).
            set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
          ELSE.
            set_error_message( ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF NOT it_sel_waers IS INITIAL.
      IF lt_currency IS INITIAL.
        CLEAR: lt_tcurt.
*     get local currency (deactivated, not required)
*      IF NOT lst_account-comp_code IS INITIAL.
*        lc_local = zdyn_cl_bapi=>mo->get_local_currency( ic_comp_code = lst_account-comp_code ).
*      ENDIF.
*     add/modify entries
        zdyn_cl_bapi=>mo->get_currency_texts( EXPORTING it_sel_opt    = it_sel_waers
                                                        it_sel_langu  = mt_sel_langu
                                              IMPORTING et_texts      = lt_tcurt ).
        LOOP AT lt_tcurt ASSIGNING <tcurt>.
          ls_currency-_code          = <tcurt>-waers.
          ls_currency-_name          = <tcurt>-ktext.
          ls_currency-_active        = abap_true.
          ls_currency-_exchange_rate = 1.
*        IF NOT mst_config-bukrs IS INITIAL.
*          zdyn_cl_bapi=>mo->get_exchange_rate( EXPORTING  ic_foreign_currency = <tcurt>-waers
*                                                          ic_local_currency   = lc_local
*                                               IMPORTING  ec_exchange_rate    = ls_currency-_exchange_rate
*                                               EXCEPTIONS OTHERS              = 0 ).
*          IF ls_currency-_exchange_rate <> 1.
**         here we have to potentially verify the output
*          ENDIF.
*        ENDIF.
          APPEND ls_currency TO lt_currency.
          mi_entry_counter = mi_entry_counter + 1.
        ENDLOOP.
      ENDIF.
      CHECK lt_currency IS NOT INITIAL.
      ls_json = serialize_to_json( ist_data       = lt_currency
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).
      set_new_rel_url( is_path = ls_path ).

      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).
      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING cst_data = lst_mdresponse ).
        set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
      ELSE.
        set_error_message( ).
      ENDIF.
    ENDIF.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_custom_masterdata.

  DATA: lt_domvals         TYPE STANDARD TABLE OF dd07v,
        lt_values          TYPE STANDARD TABLE OF zdyn_rso_tcusval,
        lc_extname         TYPE string,
        lst_account        LIKE LINE OF mt_accounts,
        li_counter         TYPE i,
        lt_master_with_cc  TYPE zdyn_cl_rest_tools_rso_data=>tt_masterdata_with_cc,
        lst_master_with_cc LIKE LINE OF lt_master_with_cc,
        lst_master         LIKE LINE OF lst_master_with_cc-masterdata.

  FIELD-SYMBOLS:
    <dd07v> TYPE dd07v,
    <val>   TYPE zdyn_rso_tcusval.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_tcust-extname IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.

  lc_extname = is_tcust-extname.
  CLEAR: mi_entry_counter, lt_domvals.
  LOOP AT mt_accounts INTO lst_account.

    IF ib_delete IS INITIAL.
      CLEAR lst_master_with_cc.
      lst_master_with_cc-comp_code = lst_account-comp_code.
      CLEAR li_counter.

      IF is_tcust-useddomain IS NOT INITIAL.
        IF lt_domvals IS INITIAL.
          CALL FUNCTION 'DD_DOMVALUES_GET'
            EXPORTING
              domname   = is_tcust-useddomain
              text      = abap_true
            TABLES
              dd07v_tab = lt_domvals
            EXCEPTIONS
              OTHERS    = 0.
        ENDIF.

        LOOP AT lt_domvals ASSIGNING <dd07v>.
          lst_master-_value = <dd07v>-domvalue_l.
          lst_master-_name = lst_master-_description = <dd07v>-ddtext.
          lst_master-_active = abap_true.
          APPEND lst_master TO lst_master_with_cc-masterdata.
          mi_entry_counter = mi_entry_counter + 1.
          ADD 1 TO li_counter.
        ENDLOOP.
      ENDIF.

      IF li_counter = 0.
        CLEAR lt_values.
* select from value table
        SELECT * FROM zdyn_rso_tcusval INTO TABLE lt_values
                      WHERE extname = is_tcust-extname
                        AND ( extid = lst_account-comp_code OR
                              extid = space ).
        LOOP AT lt_values ASSIGNING <val>.
          lst_master-_value = <val>-value.
          lst_master-_name = lst_master-_description = <val>-description.
          IF <val>-inactive = abap_true.
            lst_master-_active = abap_false.
          ELSE.
            lst_master-_active = abap_true.
          ENDIF.
          APPEND lst_master TO lst_master_with_cc-masterdata.
          mi_entry_counter = mi_entry_counter + 1.
          ADD 1 TO li_counter.
        ENDLOOP.
      ENDIF.

      IF li_counter IS NOT INITIAL.
        APPEND lst_master_with_cc TO lt_master_with_cc.
      ENDIF.
    ENDIF.

  ENDLOOP.

  set_masterdata( EXPORTING ib_delete     = ib_delete
                            is_name       = lc_extname
                            it_data       = lt_master_with_cc ).

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_customers.

  DATA: li_return_code TYPE i,
        lc_msg         TYPE symsgv,
        ls_path        TYPE string,
        ls_json        TYPE string,
*        ls_xml         TYPE string,
        lt_cmd_all     TYPE STANDARD TABLE OF zdyn_ws_cmd,
        lt_cmd         LIKE lt_cmd_all,
        li_remaining   TYPE i,
        li_copied      TYPE i,
        lst_account    LIKE LINE OF mt_accounts,
*        ls_customers   TYPE zdyn_cl_rest_tools_rso_data=>ty_md_customers,
        lt_customer    TYPE zdyn_cl_rest_tools_rso_data=>tt_customer,
*        ls_customer    TYPE zdyn_cl_rest_tools_rso_data=>ty_customer,
*        lst_upload     TYPE zdyn_cl_rest_tools_rso_data=>ty_upload,
        lst_ok         TYPE zdyn_cl_rest_tools_rso_data=>ty_isok.

  FIELD-SYMBOLS: <cmd> TYPE zdyn_ws_cmd.
*                 <key> TYPE zdyn_cl_rest_tools_rso_data=>ty_keyval.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_kunnr IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR: mi_entry_counter, mi_batch_counter.
  LOOP AT mt_accounts INTO lst_account.
    CLEAR lt_cmd_all.
*     if bulk processing is active
    IF mst_config-sel_all = abap_true.
      CALL METHOD set_comp_code
        EXPORTING
          ic_bukrs = lst_account-comp_code.
    ENDIF.

    zdyn_cl_bapi=>mo->get_customers( EXPORTING it_sel_opt        = it_sel_kunnr
                                               it_sel_comp_codes = mt_sel_comp_codes
                                     IMPORTING et_customers      = lt_cmd_all ).
    CHECK lt_cmd_all IS NOT INITIAL.
    remove_inactive_customers( EXPORTING ib_take_inactive = ib_delflg
                                         ib_delete_all    = ib_delete
                                         id_date          = id_date
                               CHANGING  ct_customers     = lt_cmd_all ).

    IF ib_replace = abap_true.
*      CONCATENATE con_masterdata lst_account-id '/masterdatacustomers/startupload' INTO ls_path.
*      set_new_rel_url( EXPORTING is_path = ls_path ).
*      call_http_get( IMPORTING ei_return_code = li_return_code ).
*      IF li_return_code = 200.
*        deserialize_from_json( EXPORTING is_json  = ms_result
*                               CHANGING  cst_data = lst_upload ).
*
**   now we prepare the bulk upload
*        LOOP AT lst_upload-headerstouse ASSIGNING <key>.
*
*          CALL METHOD mo_http_client->request->set_header_field
*            EXPORTING
*              name  = <key>-key
*              value = <key>-value.
*
*        ENDLOOP.
*    we process all customers
*        CALL METHOD fill_customers
*          EXPORTING
*            it_customers = lt_cmd_all
*            id_date      = id_date
*            ic_bukrs     = lst_account-comp_code
*          CHANGING
*            ct_customer  = lt_customer.
*
*        ls_customers-_master_data_customers-_master_data_customer = lt_customer.
*        ls_json = serialize_to_json( ist_data       = ls_customers
*                                     ic_compress    = abap_false
*                                     ic_pretty_name = con_camel_case ).
*
*
*
*        transform_json_to_xml( EXPORTING  is_xml      = ls_json
*                                          ic_xslt     = 'ZDYN_ROUTTY_JSONXML2XML'
*                               IMPORTING  es_xml      = ls_xml
*                               EXCEPTIONS OTHERS      = 1 ).
*    abs url returned by werbservice
*        ms_url = lst_upload-uploadurl.

*      ENDIF.
    ENDIF.

    li_remaining = lines( lt_cmd_all ).
    WHILE li_remaining > 0.
      CLEAR: lt_cmd, lt_customer, li_copied, lst_ok.

      IF li_remaining <= con_maxsize.   " todo change for bulk load
        lt_cmd = lt_cmd_all.
        li_remaining = 0.
      ELSE.
        LOOP AT lt_cmd_all ASSIGNING <cmd>.
          APPEND <cmd> TO lt_cmd.
          DELETE lt_cmd_all.
          li_copied = li_copied + 1.
          IF li_copied >= con_maxsize.
            li_remaining = li_remaining - li_copied.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.
      mi_batch_counter = mi_batch_counter + 1.

      CALL METHOD fill_customers
        EXPORTING
          it_customers = lt_cmd
          id_date      = id_date
          ic_bukrs     = lst_account-comp_code
        CHANGING
          ct_customer  = lt_customer.

      ls_json = serialize_to_json( ist_data       = lt_customer
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).

      CONCATENATE con_masterdata lst_account-id '/masterdatacustomers' INTO ls_path.
      set_new_rel_url( EXPORTING is_path = ls_path ).
      IF ib_delete = abap_true.
        call_http_delete( EXPORTING is_input       = ls_json
                          IMPORTING ei_return_code = li_return_code ).
      ELSE.
        call_http_post( EXPORTING is_input       = ls_json
                        IMPORTING ei_return_code = li_return_code ).
      ENDIF.

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_ok ).
      ELSE.
        set_error_message( ).
        CONTINUE.
      ENDIF.

    ENDWHILE.

  ENDLOOP.
  IF mi_entry_counter IS NOT INITIAL.
    lc_msg = mi_entry_counter.
    CONDENSE lc_msg.
    IF ib_delete = abap_true.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                      ic_msgid    = 'CCSEQ'
                                      ic_msgno    = '043'
                                      ic_msgv1    = lc_msg ).
*     message s043(ccseq) with space.
    ELSEIF ib_replace = abap_true.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty  = 'S'
                                    ic_msgid    = 'CCSEQ'
                                    ic_msgno    = '044'
                                    ic_msgv1    = lc_msg ).
*     message s044(ccseq) with space.
    ELSE.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty  = 'S'
                                    ic_msgid    = 'CCSEQ'
                                    ic_msgno    = '045'
                                    ic_msgv1    = lc_msg ).
*     message s045(ccseq) with space.
    ENDIF.
  ENDIF.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                               ii_batch_count = mi_batch_counter ).

ENDMETHOD.
METHOD set_document_downloaded.

  DATA: li_return_code TYPE i,
        ls_message     TYPE string,
        lt_messages	   TYPE	bapiret2_t,
        ls_isok        TYPE zdyn_cl_rest_tools_rso_data=>ty_isok,
        lst_status     TYPE zdyn_cl_rest_tools_rso_data=>ty_status,
        ls_json        TYPE string,
        ls_path        TYPE string.

  FIELD-SYMBOLS:
        <message> TYPE bapiret2.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_documentid IS INITIAL.
  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_accept
      value = con_mimetype_json.

  lt_messages = zdyn_cl_msg=>get_messages( ib_only_group = abap_true ).
  LOOP AT lt_messages ASSIGNING <message>.
    IF sy-tabix = 1.
      ls_message = <message>-message.
    ELSE.
      CONCATENATE ls_message <message>-message INTO ls_message SEPARATED BY space.
    ENDIF.
  ENDLOOP.

  IF mst_config-mark_as_del IS INITIAL.

*   now set the status to Success
    CONCATENATE '/documents/rest/' is_documentid '/documentstatus' INTO ls_path.
    CALL METHOD set_new_rel_url
      EXPORTING
        is_path = ls_path.

    lst_status-_status = 1.
    lst_status-_message = ls_message.
    CALL METHOD serialize_to_json
      EXPORTING
        ist_data       = lst_status
        ic_compress    = abap_false
        ic_pretty_name = con_camel_case
      RECEIVING
        es_json        = ls_json.

    CALL METHOD call_http_put
      EXPORTING
        is_input       = ls_json
      IMPORTING
        ei_return_code = li_return_code.

    CONCATENATE '/documents/rest/' is_documentid '/downloaded' INTO ls_path.
    CHECK mo_http_client IS BOUND.
    CALL METHOD set_new_rel_url
      EXPORTING
        is_path = ls_path.

*   set as downloaded
    CALL METHOD call_http_put
      EXPORTING
        is_input       = '[]'
      IMPORTING
        ei_return_code = li_return_code.

  ELSE.

    CONCATENATE '/documents/rest/' is_documentid '/delete' INTO ls_path.
    CALL METHOD set_new_rel_url
      EXPORTING
        is_path = ls_path.

    CALL METHOD serialize_to_json
      EXPORTING
        ist_data       = ls_message
        ic_compress    = abap_false
        ic_pretty_name = con_camel_case
      RECEIVING
        es_json        = ls_json.

*   set as deleted
    CALL METHOD call_http_post
      EXPORTING
        is_input       = ls_json
      IMPORTING
        ei_return_code = li_return_code.

  ENDIF.

  IF li_return_code = 200.
    CALL METHOD deserialize_from_json
      EXPORTING
        is_json  = ms_result
      CHANGING
        cst_data = ls_isok.

    CHECK ls_isok-value EQ abap_true.
    rb_ok = abap_true.
  ENDIF.

ENDMETHOD.
METHOD set_document_rejected.

  DATA: li_return_code TYPE i,
        ls_message     TYPE string,
        lt_messages	   TYPE	bapiret2_t,
        ls_isok        TYPE zdyn_cl_rest_tools_rso_data=>ty_isok,
        ls_path        TYPE string.
  FIELD-SYMBOLS: <message> TYPE bapiret2.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_documentid IS INITIAL.
  CONCATENATE '/documents/rest/' is_documentid '/rejected' INTO ls_path.

  CHECK mo_http_client IS BOUND.
  CALL METHOD set_new_rel_url
    EXPORTING
      is_path = ls_path.

  lt_messages = zdyn_cl_msg=>get_messages( ib_only_group = abap_true ).

  LOOP AT lt_messages ASSIGNING <message>.
    IF sy-tabix = 1.
      ls_message = <message>-message.
    ELSE.
      CONCATENATE ls_message <message>-message INTO ls_message SEPARATED BY space.
    ENDIF.
  ENDLOOP.

  CALL METHOD mo_http_client->append_field_url
    EXPORTING
      name  = 'message'
      value = ls_message
    CHANGING
      url   = ms_url.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_accept
      value = con_mimetype_json.

  CALL METHOD call_http_put
    EXPORTING
      is_input       = '[]'
    IMPORTING
      ei_return_code = li_return_code.

  IF li_return_code = 200.
    CALL METHOD deserialize_from_json
      EXPORTING
        is_json  = ms_result
      CHANGING
        cst_data = ls_isok.
  ENDIF.

  IF ls_isok-value EQ abap_true.
    rb_ok = abap_true.
  ENDIF.

ENDMETHOD.
METHOD set_error_message.

  DATA: lst_error TYPE zdyn_cl_rest_tools_rso_data=>ty_error,
        ls_error  type string.

  deserialize_from_json( EXPORTING is_json  = ms_result
                         CHANGING  cst_data = lst_error ).
  IF lst_error IS NOT INITIAL.
    CONCATENATE lst_error-code lst_error-message INTO ls_error SEPARATED BY space.
    zdyn_cl_msg=>add_long_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                         ic_msgno = '000'
                                         is_param = ls_error ).
*   message e000(zdyn_ws).
  ELSE.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'PQ'
                                    ic_msgno    = '612' ).
*   message e612(pq).
  ENDIF.

ENDMETHOD.
METHOD set_glaccounts.

  DATA: li_return_code TYPE i,
        li_tabix       TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        lt_saknr       TYPE STANDARD TABLE OF gl_acct_cc,
        ls_skat        TYPE skat,
        lst_account    LIKE LINE OF mt_accounts,
        lt_glaccount   TYPE zdyn_cl_rest_tools_rso_data=>tt_glaccount,
        ls_glaccount   TYPE zdyn_cl_rest_tools_rso_data=>ty_glaccount,
        ls_glaccounts  TYPE zdyn_cl_rest_tools_rso_data=>ty_glaccounts,
        lst_mdresponse TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS: <gl_acct_cc> TYPE gl_acct_cc.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ib_delete IS INITIAL OR NOT it_sel_saknr IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR mi_entry_counter.
  LOOP AT mt_accounts INTO lst_account.

    CONCATENATE con_masterdata lst_account-id '/generalledgeraccounts' INTO ls_path.

    IF ib_delete = abap_true.
      CLEAR: ls_glaccounts.

*     remove all entries before adding new ones
      set_new_rel_url( EXPORTING is_path  = ls_path
                                 is_query = con_query_pagesize ).
*     first read all
      call_http_get( IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json        = ms_result
                                         ic_pretty_name = con_camel_case
                               CHANGING  cst_data       = ls_glaccounts ).

        IF NOT ls_glaccounts-pagecount IS INITIAL.
*         are there entries to be deleted ?
          ls_json = serialize_to_json( ist_data       = ls_glaccounts-generalledgeraccounts
                                       ic_compress    = abap_false
                                       ic_pretty_name = con_camel_case ).
          set_new_rel_url( EXPORTING is_path = ls_path ).
          call_http_delete( EXPORTING is_input       = ls_json
                            IMPORTING ei_return_code = li_return_code ).

          IF li_return_code = 200.
            deserialize_from_json( EXPORTING is_json  = ms_result
                                   CHANGING  cst_data = lst_mdresponse ).
            set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
          ELSE.
            set_error_message( ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF NOT it_sel_saknr IS INITIAL.
      CLEAR: lt_saknr, lt_glaccount.
*     if bulk processing is active
      IF mst_config-sel_all = abap_true.
        CALL METHOD set_comp_code
          EXPORTING
            ic_bukrs = lst_account-comp_code.
      ENDIF.
*     add/modify entries
      zdyn_cl_bapi=>mo->get_gl_accounts( EXPORTING it_sel_opt        = it_sel_saknr
                                                   it_sel_comp_codes = mt_sel_comp_codes
                                         IMPORTING et_gl_accounts    = lt_saknr ).
      ls_glaccount-_active = abap_true.
      ls_glaccount-_group = is_group.
      CLEAR lt_glaccount.
      LOOP AT lt_saknr ASSIGNING <gl_acct_cc>.
        CLEAR ls_skat.
        zdyn_cl_bapi=>mo->get_gl_account_details( EXPORTING ic_chart_of_accounts = <gl_acct_cc>-ktopl
                                                            ic_gl_account        = <gl_acct_cc>-saknr
                                                            it_sel_langu         = mt_sel_langu
                                                  IMPORTING est_details          = ls_skat ).
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <gl_acct_cc>-saknr
          IMPORTING
            output = <gl_acct_cc>-saknr.
        ls_glaccount-_code = <gl_acct_cc>-saknr.
        ls_glaccount-_name = ls_skat-txt20.
        ls_glaccount-_description = ls_skat-txt50.
        APPEND ls_glaccount TO lt_glaccount.
        mi_entry_counter = mi_entry_counter + 1.
      ENDLOOP.
      CHECK lt_glaccount IS NOT INITIAL.
      ls_json = serialize_to_json( ist_data       = lt_glaccount
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).
      set_new_rel_url( EXPORTING is_path = ls_path ).
      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).
      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_mdresponse ).
        set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
      ELSE.
        set_error_message( ).
      ENDIF.
    ENDIF.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_masterdata.

  DATA: li_return_code TYPE i,
        li_tabix       TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        lst_account    LIKE LINE OF mt_accounts,
        ls_isok        TYPE zdyn_cl_rest_tools_rso_data=>ty_isok,
        ls_masterdatas TYPE zdyn_cl_rest_tools_rso_data=>ty_masterdatas,
        ls_delmaster   TYPE zdyn_cl_rest_tools_rso_data=>ty_delmaster,
        lt_delmaster   TYPE zdyn_cl_rest_tools_rso_data=>tt_delmaster,
        ls_delmasterp  TYPE zdyn_cl_rest_tools_rso_data=>ty_delmasterparams,
        lt_delmasterp  TYPE zdyn_cl_rest_tools_rso_data=>tt_delmasterparams,
        lst_mdresponse TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS:  <st_data> LIKE LINE OF it_data,
                  <mdo>     TYPE zdyn_cl_rest_tools_rso_data=>ty_masterdata.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_name IS INITIAL.
  CHECK NOT it_data IS INITIAL OR NOT ib_delete IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  LOOP AT mt_accounts INTO lst_account.

    CONCATENATE con_masterdata lst_account-id '/masterdataobjects/' is_name INTO ls_path.

    IF ib_delete = abap_true.
      CLEAR: lt_delmaster, lt_delmasterp.
      set_new_rel_url( EXPORTING is_path  = ls_path
                                 is_query = con_query_pagesize ).
* first read all
      call_http_get( IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json        = ms_result
                                         ic_pretty_name = con_camel_case
                               CHANGING  cst_data       = ls_masterdatas ).

        IF NOT ls_masterdatas-pagecount IS INITIAL.
          LOOP AT ls_masterdatas-masterdataobjects ASSIGNING <mdo>.
            ls_delmaster-_value = <mdo>-_value.
            ls_delmaster-_name = <mdo>-_name.
            APPEND ls_delmaster TO lt_delmaster.
          ENDLOOP.
*     remove all entries before adding new ones
          CONCATENATE con_masterdata lst_account-id '/masterdataobjects' INTO ls_path.

          set_new_rel_url( EXPORTING is_path  = ls_path ).
          ls_delmasterp-_type_name = is_name.
          ls_delmasterp-_master_data_objects = lt_delmaster.
          APPEND ls_delmasterp TO lt_delmasterp.
          ls_json = serialize_to_json( ist_data       = lt_delmasterp
                                       ic_compress    = abap_false
                                       ic_pretty_name = con_camel_case ).

          call_http_delete( EXPORTING is_input       = ls_json
                            IMPORTING ei_return_code = li_return_code ).

          IF li_return_code = 200.
            deserialize_from_json( EXPORTING is_json  = ms_result
                                   CHANGING  cst_data = ls_isok ).
            IF ls_isok-value = abap_true.
              zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                              ic_msgid    = 'AD'
                                              ic_msgno    = '969' ).
*             message s969(ad).
            ENDIF.
          ELSE.
            set_error_message( ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF NOT it_data IS INITIAL.

      CONCATENATE con_masterdata lst_account-id '/masterdataobjects/' is_name INTO ls_path.

      IF lst_account-comp_code IS NOT INITIAL.
        READ TABLE it_data ASSIGNING <st_data> WITH KEY comp_code = lst_account-comp_code.
      ELSE.
        READ TABLE it_data ASSIGNING <st_data> INDEX 1.
      ENDIF.
*     in case we've got master data for buyers
      CHECK sy-subrc = 0 AND <st_data> IS ASSIGNED.

*     add/modify entries
      ls_json = serialize_to_json( ist_data       = <st_data>-masterdata
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).

      set_new_rel_url( EXPORTING is_path = ls_path ).
      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).

      IF  li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_mdresponse ).
        set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
      ELSE.
        set_error_message( ).
      ENDIF.
      UNASSIGN <st_data>.
    ENDIF.

  ENDLOOP.

ENDMETHOD.
METHOD set_orders.

  DATA: lt_orders          TYPE zdyn_lstr_orders,
        lst_order          LIKE LINE OF lt_orders,
        lst_account        LIKE LINE OF mt_accounts,
        lt_master_with_cc  TYPE zdyn_cl_rest_tools_rso_data=>tt_masterdata_with_cc,
        lst_master_with_cc LIKE LINE OF lt_master_with_cc,
        lst_master         LIKE LINE OF lst_master_with_cc-masterdata,
        ld_change_date     LIKE id_change_date.

  zdyn_cl_msg=>add_to_call_stack( ).

  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.

  LOOP AT mt_accounts INTO lst_account.

    IF it_sel_opt IS NOT INITIAL.
      CLEAR lst_master_with_cc.
*     if bulk processing is active
      IF mst_config-sel_all = abap_true.
        CALL METHOD set_comp_code
          EXPORTING
            ic_bukrs = lst_account-comp_code.
      ENDIF.
      zdyn_cl_bapi=>mo->get_orders( EXPORTING it_sel_opt        = it_sel_opt
                                              it_sel_comp_codes = mt_sel_comp_codes
                                    IMPORTING et_orders         = lt_orders ).
      CHECK lt_orders IS NOT INITIAL.

      IF NOT id_change_date IS INITIAL.
        ld_change_date = id_change_date.
        IF ld_change_date = sy-datlo.
          ld_change_date = sy-datlo - 1.
        ENDIF.
      ENDIF.

      lst_master_with_cc-comp_code = lst_account-comp_code.
      CLEAR mi_entry_counter.
      SORT lt_orders BY bukrs.
      LOOP AT lt_orders INTO lst_order.

        IF ld_change_date IS NOT INITIAL AND lst_order-erdat < ld_change_date AND lst_order-aedat < ld_change_date.
          CONTINUE.
        ENDIF.
        lst_master-_value = lst_order-aufnr.
        lst_master-_name = lst_master-_description = lst_order-ktext.
        IF lst_order-loekz IS INITIAL.
          lst_master-_active = abap_true.
        ELSE.
          lst_master-_active = abap_false.
        ENDIF.
        APPEND lst_master TO lst_master_with_cc-masterdata.
        mi_entry_counter = mi_entry_counter + 1.

      ENDLOOP.
      CHECK NOT lst_master_with_cc-masterdata IS INITIAL.
      APPEND lst_master_with_cc TO lt_master_with_cc.

    ENDIF.

  ENDLOOP.

  set_masterdata( EXPORTING ib_delete     = ib_delete
                            is_name       = con_order
                            it_data       = lt_master_with_cc ).

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_paymentterms.

  DATA: li_return_code TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        lt_t052        TYPE STANDARD TABLE OF t052,
        lt_text        TYPE STANDARD TABLE OF ttext,
        lst_account    LIKE LINE OF mt_accounts,
        lst_zterm      TYPE zdyn_cl_rest_tools_rso_data=>ty_paymentterm,
        lt_zterm       TYPE zdyn_cl_rest_tools_rso_data=>tt_paymentterm,
        lst_mdresponse TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS: <t052> TYPE t052,
                 <text> TYPE ttext.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_zterm IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  zdyn_cl_bapi=>mo->get_payment_terms( EXPORTING it_sel_opt = it_sel_zterm
                                       IMPORTING et_terms   = lt_t052 ).
  CHECK NOT lt_t052 IS INITIAL.
  CLEAR mi_entry_counter.

  SORT lt_t052 BY zterm.
  DELETE ADJACENT DUPLICATES FROM lt_t052 COMPARING zterm.
  LOOP AT lt_t052 ASSIGNING <t052>.
    CLEAR: lst_zterm, lt_text.
    lst_zterm-_payment_term_code = <t052>-zterm.
    lst_zterm-_due_date_is_empty = abap_true.
    IF <t052>-zfael = '31'.
      lst_zterm-_after_end_of_month = abap_true.
    ENDIF.
    IF NOT <t052>-ztag3 IS INITIAL.
      lst_zterm-_days = <t052>-ztag3.
    ELSEIF NOT <t052>-ztag2 IS INITIAL.
      lst_zterm-_days = <t052>-ztag2.
    ELSEIF NOT <t052>-ztag1 IS INITIAL.
      lst_zterm-_days = <t052>-ztag1.
    ENDIF.

    zdyn_cl_bapi=>mo->fi_print_zterm( EXPORTING   ic_zterm       = <t052>-zterm
                                                  it_sel_langu   = mt_sel_langu
                                      IMPORTING   et_texts       = lt_text
                                      EXCEPTIONS  error_occurred = 0 ).
    LOOP AT lt_text ASSIGNING <text>.
      IF sy-tabix = 1.
        lst_zterm-_description = <text>-text1.
      ELSE.
        CONCATENATE lst_zterm-_description ' | ' <text>-text1
               INTO lst_zterm-_description.
      ENDIF.
    ENDLOOP.
    APPEND lst_zterm TO lt_zterm.
    mi_entry_counter = mi_entry_counter + 1.
  ENDLOOP.

* add/modify entries
  ls_json = serialize_to_json( ist_data       = lt_zterm
                               ic_compress    = abap_false
                               ic_pretty_name = con_camel_case ).

  LOOP AT mt_accounts INTO lst_account.
    CONCATENATE con_masterdata lst_account-id '/paymentterms' INTO ls_path.

    set_new_rel_url( is_path = ls_path ).

    IF ib_replace IS INITIAL.
      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).
    ELSE.
      call_http_put( EXPORTING is_input       = ls_json
                     IMPORTING ei_return_code = li_return_code ).
    ENDIF.
    IF li_return_code = 200.
      deserialize_from_json( EXPORTING is_json  = ms_result
                             CHANGING  cst_data = lst_mdresponse ).
      set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
    ELSE.
      set_error_message( ).
    ENDIF.
  ENDLOOP.

*  li_account_num = lines( mt_accounts ).
*  mi_entry_counter = mi_entry_counter * li_account_num.
  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_projects.

  DATA: li_return_code TYPE i,
        li_tabix       TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        lst_prps       TYPE zdyn_stru_wbs_element,
        lt_prps        LIKE STANDARD TABLE OF lst_prps,
        ld_change_date LIKE id_change_date,
        lst_account    LIKE LINE OF mt_accounts,
        lt_project     TYPE zdyn_cl_rest_tools_rso_data=>tt_project,
        ls_project     TYPE zdyn_cl_rest_tools_rso_data=>ty_project,
        ls_projects    TYPE zdyn_cl_rest_tools_rso_data=>ty_projects,
        lst_mdresponse TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS: <prps> LIKE lst_prps.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ib_delete IS INITIAL OR NOT it_sel_pspnr IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR mi_entry_counter.
  LOOP AT mt_accounts INTO lst_account.
    CLEAR: ls_projects.

    CONCATENATE con_masterdata lst_account-id '/projects' INTO ls_path.

    IF ib_delete = abap_true.
      CLEAR: ls_projects.

*     remove all entries before adding new ones
      set_new_rel_url( EXPORTING is_path  = ls_path
                                 is_query = con_query_pagesize ).
*     first read all
      call_http_get( IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json        = ms_result
                                         ic_pretty_name = con_camel_case
                               CHANGING  cst_data       = ls_projects ).
        IF NOT ls_projects-pagecount IS INITIAL.
*         are there entries to be deleted?
          ls_json = serialize_to_json( ist_data       = ls_projects-projects
                                       ic_compress    = abap_false
                                       ic_pretty_name = con_camel_case ).

          set_new_rel_url( EXPORTING is_path = ls_path ).
          call_http_delete( EXPORTING is_input       = ls_json
                            IMPORTING ei_return_code = li_return_code ).

          IF li_return_code = 200.
            deserialize_from_json( EXPORTING is_json  = ms_result
                                   CHANGING  cst_data = lst_mdresponse ).
            set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
          ELSE.
            set_error_message( ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF NOT it_sel_pspnr IS INITIAL.
      CLEAR: lt_prps, lt_project.

*     if bulk processing is active
      IF mst_config-sel_all = abap_true.
        CALL METHOD set_comp_code
          EXPORTING
            ic_bukrs = lst_account-comp_code.
      ENDIF.
      zdyn_cl_bapi=>mo->get_wbs_elements( EXPORTING it_sel_opt        = it_sel_pspnr
                                                    it_sel_comp_codes = mt_sel_comp_codes
                                                    ib_active_only    = abap_false
                                          IMPORTING et_wbs_elements   = lt_prps ).
      CHECK NOT lt_prps IS INITIAL.

      IF NOT id_change_date IS INITIAL.
        ld_change_date = id_change_date.
        IF ld_change_date = sy-datlo.
          ld_change_date = sy-datlo - 1.
        ENDIF.
      ENDIF.

*     add/modify entries
      CLEAR lt_project.
      LOOP AT lt_prps ASSIGNING <prps>.
        IF NOT ld_change_date IS INITIAL.
          IF <prps>-erdat < ld_change_date AND <prps>-aedat < ld_change_date.
            CONTINUE.
          ENDIF.
        ENDIF.
        ls_project-_project_number = <prps>-pspnr.
        ls_project-_name = <prps>-posid.
        ls_project-_description = <prps>-post1.
        IF <prps>-loevm IS INITIAL.
          ls_project-_active = abap_true.
        ELSE.
          ls_project-_active = abap_false.
        ENDIF.
        APPEND ls_project TO lt_project.
        mi_entry_counter = mi_entry_counter + 1.
      ENDLOOP.

      CHECK NOT lt_project IS INITIAL.

      ls_json = serialize_to_json( ist_data       = lt_project
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).

      set_new_rel_url( EXPORTING is_path = ls_path ).
      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_mdresponse ).
        set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
      ELSE.
        set_error_message( ).
      ENDIF.
    ENDIF.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_purchase_orders.

  DATA: li_return_code  TYPE i,
        ls_path         TYPE string,
        ls_json         TYPE string,
        lst_account     LIKE LINE OF mt_accounts,
        lt_ebeln        TYPE zdyn_cl_bapi=>yt_ebeln,
        ls_po_header    TYPE bapiekkol,
        lc_po_item      TYPE ebelp,
        lt_po_items     TYPE STANDARD TABLE OF bapiekpo,
        lt_po_item_hist TYPE STANDARD TABLE OF bapiekbes,
        lt_po           TYPE zdyn_cl_rest_tools_rso_data=>tt_purchaseorder,
        ls_po           TYPE zdyn_cl_rest_tools_rso_data=>ty_purchaseorder,
        ls_poitem       TYPE zdyn_cl_rest_tools_rso_data=>ty_purchaseorderline,
        lt_poitem       TYPE zdyn_cl_rest_tools_rso_data=>tt_purchaseorderline,
        lst_mdresponse  TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS: <ebeln>        TYPE ebeln,
                 <po_item>      TYPE bapiekpo,
                 <po_item_hist> TYPE bapiekbes.

  zdyn_cl_msg=>add_to_call_stack( ).

  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR mi_entry_counter.
  LOOP AT mt_accounts INTO lst_account.
    CLEAR: lt_po, ls_po.
*     if bulk processing is active
    IF mst_config-sel_all = abap_true.
      CALL METHOD set_comp_code
        EXPORTING
          ic_bukrs = lst_account-comp_code.
    ENDIF.

*   fallback for modified reports ?
    IF it_ebeln IS NOT INITIAL.
      lt_ebeln = it_ebeln.
    ELSE.
      zdyn_cl_bapi=>mo->get_po_list( EXPORTING it_sel_po          = it_sel_ebeln
                                               it_sel_comp_codes  = mt_sel_comp_codes
                                               it_sel_create_date = it_sel_erdat
                                               id_change_date     = id_chg_date
                                     IMPORTING et_po_list         = lt_ebeln ).
    ENDIF.

    CHECK lt_ebeln IS NOT INITIAL.

    IF ib_delete = abap_true.

*   remove all entries from table it_ebeln
      LOOP AT lt_ebeln ASSIGNING <ebeln>.
        ls_po-_order_number = <ebeln>.
        APPEND ls_po TO lt_po.
      ENDLOOP.
      ls_json = serialize_to_json( ist_data       = lt_po
                                   ic_compress    = abap_true
                                   ic_pretty_name = con_camel_case ).

      CONCATENATE con_masterdata lst_account-id '/purchaseorders' INTO ls_path.
      set_new_rel_url( EXPORTING is_path = ls_path ).

      call_http_delete( EXPORTING is_input       = ls_json
                        IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_mdresponse ).
        set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
      ELSE.
        set_error_message( ).

      ENDIF.

    ELSE.

*   add/modify entries
      LOOP AT lt_ebeln ASSIGNING <ebeln>.
        CLEAR: ls_po_header, lt_po_items, lt_po_item_hist, lt_poitem, ls_po.

        zdyn_cl_bapi=>mo->bapi_po_getdetail( EXPORTING ic_po_number           = <ebeln>
                                             IMPORTING es_header              = ls_po_header
                                                       et_items               = lt_po_items
                                                       et_item_history_totals = lt_po_item_hist ).
        CHECK NOT ls_po_header IS INITIAL.
        LOOP AT lt_po_items ASSIGNING <po_item>.
          IF <po_item>-preq_no IS NOT INITIAL AND
             ls_po-_requisitioned_by IS INITIAL.
* get requisitioner
            SELECT SINGLE afnam FROM ekpo INTO ls_po-_requisitioned_by
                      WHERE ebeln = <po_item>-po_number
                        AND ebelp = <po_item>-po_item.
          ENDIF.
*       fill item lines
          CLEAR ls_poitem.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = <po_item>-po_item
            IMPORTING
              output = lc_po_item.
          ls_poitem-_order_line_number = lc_po_item.
          ls_poitem-_article_number = <po_item>-material.
          ls_poitem-_supplier_article_number = <po_item>-vend_mat.
          ls_poitem-_article_description = <po_item>-short_text.
          ls_poitem-_category_number = <po_item>-mat_grp.
*        ls_poitem-_category_description = ???
          ls_poitem-_quantity = <po_item>-quantity.
          ls_poitem-_unit = <po_item>-unit.
          ls_poitem-_unit_price = <po_item>-net_price.
          ls_poitem-_row_total_amount_vat_excluded = <po_item>-net_value.
*        ls_poitem-_status_text = ???
*         now read the history
          READ TABLE lt_po_item_hist WITH KEY po_item = <po_item>-po_item
                                     ASSIGNING <po_item_hist>.
          IF sy-subrc = 0.
            ls_poitem-_invoiced_quantity = <po_item_hist>-iv_qty.
            ls_poitem-_delivered_quantity = <po_item_hist>-deliv_qty.
          ELSE.
            ls_poitem-_invoiced_quantity = 0.
            ls_poitem-_delivered_quantity = 0.
          ENDIF.
          ls_poitem-_is_delivery_required = <po_item>-gr_basediv.
          ls_poitem-_price_unit = <po_item>-price_unit.
          APPEND ls_poitem TO lt_poitem.
        ENDLOOP.
*     now fill the complete po data
        ls_po-_order_number = ls_po_header-po_number.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = ls_po_header-vendor
          IMPORTING
            output = ls_po_header-vendor.
        ls_po-_supplier_number = ls_po_header-vendor.

        ls_po-_currency_code = ls_po_header-currency_iso.

        ls_po-_date_created = get_epoch_datestring_from_date( ls_po_header-created_on ).
*      ls_po-_contact_name = ls_po_header-???.
*      ls_po-_description = ls_po_header-???.
*      ls_po-_status_text = ls_po_header-???.
        ls_po-_lines = lt_poitem.
        ls_po-_supplier_name = ls_po_header-vend_name.
        ls_po-_created_by = ls_po_header-created_by.
        APPEND ls_po TO lt_po.
        mi_entry_counter = mi_entry_counter + 1.
      ENDLOOP.

      ls_json = serialize_to_json( ist_data       = lt_po
                                   ic_compress    = abap_false
                                   ic_pretty_name = con_camel_case ).

      CONCATENATE con_masterdata lst_account-id '/purchaseorders' INTO ls_path.
      set_new_rel_url( EXPORTING is_path = ls_path ).

      call_http_post( EXPORTING is_input       = ls_json
                      IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_mdresponse ).
        set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
      ELSE.
        set_error_message( ).
      ENDIF.

    ENDIF.
  ENDLOOP.
*  li_account_num = lines( mt_accounts ).
*  mi_entry_counter = mi_entry_counter * li_account_num.
  CHECK mi_entry_counter > 0.
  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

ENDMETHOD.
METHOD set_statistic_messages.

  DATA: lc_msgv1 TYPE symsgv,
        lc_msgv2 TYPE symsgv,
        lc_msgv3 TYPE symsgv.

  lc_msgv1 = is_input-created.
  lc_msgv2 = is_input-updated.
  lc_msgv3 = is_input-deleted.
  CONDENSE: lc_msgv1, lc_msgv2, lc_msgv3.

  IF NOT is_input-created IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = 'CCSEQ'
                                    ic_msgno    = '044'
                                    ic_msgv1    = lc_msgv1 ).
*   message s044(ccseq) with space.
  ENDIF.
  IF NOT is_input-updated IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = 'CCSEQ'
                                    ic_msgno    = '045'
                                    ic_msgv1    = lc_msgv2 ).
*   message s045(ccseq) with space.
  ENDIF.
  IF NOT is_input-deleted IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = 'CCSEQ'
                                    ic_msgno    = '043'
                                    ic_msgv1    = lc_msgv3 ).
*   message s043(ccseq) with space.
  ENDIF.

ENDMETHOD.
METHOD set_suppliers.

  DATA: li_return_code TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        lt_vmd_all     TYPE zdyn_lstr_vmd,
        lt_vmd         LIKE lt_vmd_all,
        li_remaining   TYPE i,
        li_copied      TYPE i,
        lst_account    LIKE LINE OF mt_accounts,
        lt_banks       TYPE zdyn_cl_rest_tools_rso_data=>tt_bankaccount,
        lt_bankaccount TYPE zdyn_cl_rest_tools_rso_data=>tt_bankaccount,
        lt_supplier    TYPE zdyn_cl_rest_tools_rso_data=>tt_supplier,
        ls_supplier    TYPE zdyn_cl_rest_tools_rso_data=>ty_supplier,
        ls_suppliers   TYPE zdyn_cl_rest_tools_rso_data=>ty_suppliers,
        lst_mdresponse TYPE zdyn_cl_rest_tools_rso_data=>ty_mdresponse.
  FIELD-SYMBOLS: <vmd> TYPE zdyn_ws_vmd.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ib_delete IS INITIAL OR NOT it_sel_lifnr IS INITIAL.
  get_current_partnerid( ).

  CHECK NOT mt_accounts IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR: mi_entry_counter, mi_batch_counter.
  LOOP AT mt_accounts INTO lst_account.

    IF ib_delete = abap_true.
      CLEAR: ls_suppliers.
*     remove all entries before adding new ones
      CONCATENATE con_masterdata lst_account-id '/suppliers' INTO ls_path.
      set_new_rel_url( EXPORTING is_path  = ls_path
                                 is_query = con_query_pagesize ).

*     first read all
      call_http_get( IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json        = ms_result
                                         ic_pretty_name = con_camel_case
                               CHANGING  cst_data       = ls_suppliers ).

        IF NOT ls_suppliers-pagecount IS INITIAL.
*         are there entries to be deleted ?
          ls_json = serialize_to_json( ist_data       = ls_suppliers-suppliers
                                       ic_compress    = abap_false
                                       ic_pretty_name = con_camel_case ).
          set_new_rel_url( EXPORTING is_path = ls_path ).
          call_http_delete( EXPORTING is_input       = ls_json
                            IMPORTING ei_return_code = li_return_code ).

          IF li_return_code = 200.
            deserialize_from_json( EXPORTING is_json  = ms_result
                                   CHANGING  cst_data = lst_mdresponse ).
            set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
          ELSE.
            zdyn_cl_msg=>add_sysmsg( ).
            set_error_message( ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF NOT it_sel_lifnr IS INITIAL.
      CLEAR: lt_vmd_all.
*     if bulk processing is active
      IF mst_config-sel_all = abap_true.
        CALL METHOD set_comp_code
          EXPORTING
            ic_bukrs = lst_account-comp_code.
      ENDIF.

      zdyn_cl_bapi=>mo->get_vendors( EXPORTING it_sel_opt        = it_sel_lifnr
                                               it_sel_comp_codes = mt_sel_comp_codes
                                     IMPORTING et_vendors        = lt_vmd_all ).
      CHECK lt_vmd_all IS NOT INITIAL.
      remove_inactive_suppliers( EXPORTING id_date          = id_date
                                           ib_take_inactive = ib_delflg
                                 CHANGING  ct_suppliers     = lt_vmd_all ).

      li_remaining = lines( lt_vmd_all ).
      WHILE li_remaining > 0.
        CLEAR: lt_vmd, lt_supplier, lt_bankaccount, li_copied, lst_mdresponse.

        IF li_remaining < mi_bulk_size.
          lt_vmd = lt_vmd_all.
          li_remaining = 0.
        ELSE.
          LOOP AT lt_vmd_all ASSIGNING <vmd>.
            APPEND <vmd> TO lt_vmd.
            DELETE lt_vmd_all.
            li_copied = li_copied + 1.
            IF li_copied >= mi_bulk_size.
              li_remaining = li_remaining - li_copied.
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDIF.
        mi_batch_counter = mi_batch_counter + 1.

        LOOP AT lt_vmd ASSIGNING <vmd>.
*       now we check date of last change
          IF NOT id_date IS INITIAL.
            IF id_date > <vmd>-erdat.
              CHECK abap_true = zdyn_cl_bapi=>mo->is_object_modified( ic_object_id    = <vmd>-lifnr
                                                                      ic_object_class = 'KRED'
                                                                      id_date         = id_date ).
            ENDIF.
          ENDIF.
          IF ib_bankdata = abap_true.
            lt_banks = fill_bankaccount( ic_lifnr = <vmd>-lifnr ).
            APPEND LINES OF lt_banks TO lt_bankaccount.
          ENDIF.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = <vmd>-lifnr
            IMPORTING
              output = <vmd>-lifnr.

          ls_supplier-_supplier_number = <vmd>-lifnr.
          ls_supplier-_name = <vmd>-name1.
*        ls_supplier-_description = <vmd>-???.
          ls_supplier-_tax_registration_number = <vmd>-stceg.
          ls_supplier-_organization_number = <vmd>-kraus.
          ls_supplier-_street = <vmd>-stras.
          ls_supplier-_postal_code = <vmd>-pstlz.
          ls_supplier-_city = <vmd>-ort01.
          ls_supplier-_country_name = <vmd>-intca.
          ls_supplier-_payment_term = <vmd>-zterm.
          ls_supplier-_payment_method = <vmd>-zwels.
*        ls_supplier-_currency_code = <vmd>-???.
*        ls_supplier-_id = <vmd>-some_guid.
          ls_supplier-_telephone_number = <vmd>-telf1.
          ls_supplier-_fax_number = <vmd>-telfx.
*        ls_supplier-_bank_accounts = lt_banks.
          IF NOT <vmd>-loevm IS INITIAL OR
             NOT <vmd>-sperr IS INITIAL.
            ls_supplier-_blocked = abap_true.
          ELSEIF NOT lst_account-comp_code IS INITIAL
             AND ( NOT <vmd>-bukrs_loevm IS INITIAL OR
                   NOT <vmd>-bukrs_sperr IS INITIAL ).
            ls_supplier-_blocked = abap_true.
          ELSE.
            CLEAR ls_supplier-_blocked.
          ENDIF.
          APPEND ls_supplier TO lt_supplier.
          mi_entry_counter = mi_entry_counter + 1.
        ENDLOOP.

        ls_json = serialize_to_json( ist_data       = lt_supplier
                                     ic_compress    = abap_false
                                     ic_pretty_name = con_camel_case ).
        CONCATENATE con_masterdata lst_account-id '/suppliers' INTO ls_path.
        set_new_rel_url( EXPORTING is_path = ls_path ).
        call_http_post( EXPORTING is_input       = ls_json
                        IMPORTING ei_return_code = li_return_code ).

        IF li_return_code = 200.
          CLEAR lst_mdresponse.
          deserialize_from_json( EXPORTING is_json  = ms_result
                                 CHANGING  cst_data = lst_mdresponse ).
          set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
        ELSE.
          set_error_message( ).
          CONTINUE.
        ENDIF.

        CHECK NOT lt_bankaccount IS INITIAL.
        ls_json = serialize_to_json( ist_data       = lt_bankaccount
                                     ic_compress    = abap_false
                                     ic_pretty_name = con_camel_case ).
        CONCATENATE con_masterdata lst_account-id '/supplierbankaccounts' INTO ls_path.
        set_new_rel_url( EXPORTING is_path = ls_path ).
        call_http_post( EXPORTING is_input       = ls_json
                        IMPORTING ei_return_code = li_return_code ).
        IF li_return_code = 200.
          CLEAR lst_mdresponse.
          deserialize_from_json( EXPORTING is_json  = ms_result
                                 CHANGING  cst_data = lst_mdresponse ).
          set_statistic_messages( EXPORTING is_input = lst_mdresponse ).
        ELSE.
          set_error_message( ).
          CONTINUE.
        ENDIF.

      ENDWHILE.
    ENDIF.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                               ii_batch_count = mi_batch_counter ).

ENDMETHOD.
METHOD transfer_data_to_pd.

  DATA: lst_pdmap   TYPE zdyn_rso_tpdmap,
        lr_document TYPE REF TO data.
  FIELD-SYMBOLS: <record>   TYPE any,
                 <document> TYPE any,
                 <tab>      TYPE ANY TABLE.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mst_config-imp_type = con_imp_type_pd.

  lr_document = mo_pdiv_document->get_container( ).
  ASSIGN lr_document->* TO <document>.

* handover data from RSO
  add_extdata( is_data = is_document
               ic_node = con_level_header ).

* handover header fields
  add_extdata( is_data = <document>
               ic_node = con_level_header ).

* item table
  ASSIGN COMPONENT 'TAB_ITEM' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_item
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

* account table
  ASSIGN COMPONENT 'TAB_ACCOUNT' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_account
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

* tax table
  ASSIGN COMPONENT 'TAB_TAX' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_tax
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

* custom table
  ASSIGN COMPONENT 'TAB_CUSTOM' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_custom
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

  lst_pdmap = get_pd_mapid( ).

  IF lst_pdmap-obj = zdyn_if_rest_data=>con_pdiv_obj.
*   processlog table
    ASSIGN COMPONENT 'TAB_PROCESSLOG' OF STRUCTURE <document> TO <tab>.
    IF sy-subrc = 0 AND <tab> IS ASSIGNED.
      LOOP AT <tab> ASSIGNING <record>.
        add_extdata( is_data   = <record>
                     ic_node   = con_level_processlog
                     ic_parent = con_level_header ).
      ENDLOOP.
    ENDIF.
  ENDIF.

  check_before_trans_data_to_pd( EXPORTING it_extdata       = mt_extdata
                                 IMPORTING eb_ok            = eb_ok
                                           eb_skip_feedback = eb_skip_feedback
                                           et_messages      = et_messages ).

  IF eb_ok = abap_false OR eb_skip_feedback = abap_true.
    CLEAR mt_extdata.
    RETURN.
  ENDIF.

  eb_ok = call_pd_rfc( ic_obj      = lst_pdmap-obj
                       ic_mapid    = lst_pdmap-mapid ).

  CLEAR mt_extdata.

ENDMETHOD.
METHOD transfer_data_to_sap.

  zdyn_cl_msg=>add_to_call_stack( ).
*  needs to be implemented in a project (call any SAP BAPI ...)
*  use data from attributes MST_CONFIG, MST_ACCOUNT and MST_DOCUMENT
*  attachment in attribute table MR_ATTACHMENT->MT_ATTACHMENTS

ENDMETHOD.
METHOD transform_output_document.

  DATA: lst_data  TYPE abap_trans_resbind.
  FIELD-SYMBOLS <st_data> TYPE any.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF ct_data IS INITIAL.
*   root node after XSLT transformation is DOCUMENT
*   converted structure see template ZDYN_RSO_TO_PD xslt
    lst_data-name = zdyn_if_rest_data=>con_pdiv_document_root.
    lst_data-value = mo_pdiv_document->get_container( ).
    APPEND lst_data TO ct_data.
  ENDIF.

* send to PD
  transform_xml_to_data( EXPORTING  is_xml          = ms_result
                                    ic_xslt         = ic_xslt
                                    ib_skip_parsing = ib_skip_parsing
                         IMPORTING  es_xml          = es_xml
                         CHANGING   cst_data        = ct_data
                         EXCEPTIONS OTHERS          = 1 ).
  CHECK sy-subrc = 0.

* take the data from the dynamic structure to the static one for compatibility reasons
  IF ct_data IS NOT INITIAL.
    ASSIGN lst_data-value->* TO <st_data>.
    zdyn_cl_system=>mo->move_corresponding_with_nested( EXPORTING ist_input  = <st_data>
                                                        CHANGING  cst_output = mst_pdiv_document ).
  ENDIF.

  eb_ok = abap_true.

ENDMETHOD.
