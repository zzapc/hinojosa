INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_REST_TOOLS_ROUTTY definition
  public
  inheriting from ZDYN_CL_REST_TOOLS
  create public .

public section.
  class ZDYN_CL_REST_TOOLS_ROUTTY_DATA definition load .

  interfaces ZDYN_IF_REST_TOOLS_ROUTTY .

  types:
    yt_range_mwskz TYPE RANGE OF mwskz .

  constants CON_XSLT_IV_TO_PD type CXSLTDESC value 'ZDYN_ROUTTY_IV_TO_PD'. "#EC NOTEXT
  data MO_AR type ref to ZDYN_CL_AR read-only .
  constants CON_REPEAT_TIMES type I value 2. "#EC NOTEXT
  data MST_CONFIG type ZDYN_STRU_ROUTTY_CONFIG .
  constants CON_MASTERDATA type STRING value 'masterdata/'. "#EC NOTEXT
  constants CON_PARTIES type STRING value 'parties'. "#EC NOTEXT
  constants CON_PARTYBANKS type STRING value 'partybanks'. "#EC NOTEXT
  constants CON_PURCHASEORDERS type STRING value 'purchaseordermasterdata'. "#EC NOTEXT
  constants CON_ARTICLES type STRING value 'articles'. "#EC NOTEXT
  constants CON_PING type STRING value 'ping'. "#EC NOTEXT
  constants CON_DOCUMENTIDS type STRING value 'accounting/IdsReadyForExport'. "#EC NOTEXT
  constants CON_TYPE_COSTCENTER type STRING value 'CostCenter'. "#EC NOTEXT
  constants CON_TYPE_GLACCOUNT type STRING value 'GlAccount'. "#EC NOTEXT
  constants CON_TYPE_CURRENCY type STRING value 'Currency'. "#EC NOTEXT
  constants CON_TYPE_PAYMENTTERMS type STRING value 'PaymentTerms'. "#EC NOTEXT
  constants CON_ACCOUNTING type STRING value 'accountingmasterdata'. "#EC NOTEXT
  constants CON_DOCUMENT type STRING value 'accounting/document/'. "#EC NOTEXT
  constants CON_ARCHIVE_URL type STRING value '/portal/app/archive.html'. "#EC NOTEXT
  data MS_GUID type STRING .
  constants CON_ACC_FEEDBACK type STRING value 'document/accountingfeedback'. "#EC NOTEXT
  constants CON_GOODSRECEIPT type STRING value 'goodsreceiptmasterdata'. "#EC NOTEXT
  constants CON_TYPE_VATCODE type STRING value 'VatCode'. "#EC NOTEXT
  constants CON_DEFAULT_API_PREFIX type STRING value 'api'. "#EC NOTEXT
  constants CON_PURCHASE_INVOICE_ATT type STRING value 'Purchase Invoice'. "#EC NOTEXT
  constants CON_SALES_INVOICE_ATT type STRING value 'Sales Invoice'. "#EC NOTEXT
  constants CON_CSV_SEPARATOR type STRING value ';'. "#EC NOTEXT

  methods EXTEND_METADATA_BANK
    importing
      !IST_CC_DETAILS type BAPI0002_2 optional
      !IST_CC_ADDRESS type BAPI0002_3 optional
      !IST_VENDOR type ZDYN_WS_VMD optional
      !IST_CUSTOMER type ZDYN_WS_CMD optional
    changing
      !CST_METADATA type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TY_METADATA_BANK .
  methods ADD_IDOC_NUMBER
    changing
      !CS_XML type STRING .
  methods SET_ORDERS
    importing
      !IT_SEL_OPT type ZDYN_CL_BAPI=>YT_RANGE_AUFNR
      !IC_DIMENSION type ZDYN_DDIMENSIONS
      !IB_DELETE type ABAP_BOOL
      !ID_CHANGE_DATE type FC_DATUM optional .
  methods SET_AR_LOGIC
    importing
      !IO_AR type ref to ZDYN_CL_AR optional .
  methods TRANSFER_DATA_TO_SAP_AS_IDOC
    importing
      !IS_ID type STRING
      !IS_DOCUMENT type STRING
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods SET_WBS_ELEMENTS
    importing
      !IT_SEL_OPT type ZDYN_CL_BAPI=>YT_RANGE_PSPNR
      !IC_DIMENSION type ZDYN_DDIMENSIONS
      !IB_DELETE type ABAP_BOOL
      !ID_CHANGE_DATE type FC_DATUM optional .
  methods CONSTRUCTOR
    importing
      !IST_CONFIG type ZDYN_STRU_ROUTTY_CONFIG optional
      !II_BULK_SIZE type I optional
      !IB_MASTERDATA_TO_FILE type ABAP_BOOL default ABAP_FALSE
      !IB_MASTERDATA_FILE_TEST type ABAP_BOOL default ABAP_FALSE
      !IS_MASTERDATA_PATHNAME type ANY optional
    exceptions
      ERROR_OCCURRED .
  methods PREPARE_CLIENT
    importing
      !IS_USER type STRING optional
      !IS_PASSWORD type STRING optional
    exceptions
      ERROR_OCCURRED .
  methods TRANSFORM_IV_TO_PD_DOCUMENT
    importing
      !IC_XSLT type CXSLTDESC default CON_XSLT_IV_TO_PD
      !IS_ROOT_NODE type STRING optional
    exporting
      !EB_OK type ABAP_BOOL
      !ES_XML type STRING
    changing
      !CT_DATA type ABAP_TRANS_RESBIND_TAB optional .
  methods SET_CUSTOMERS
    importing
      !IT_SEL_KUNNR type ZDYN_CL_BAPI=>YT_RANGE_KUNNR optional
      !IT_DYN_SEL type RSDS_TRANGE optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !IB_TAKE_INACTIVE type ABAP_BOOL default ABAP_FALSE
      !ID_DATE type FC_DATUM optional
      !IB_BANKDATA type ABAP_BOOL default ABAP_FALSE
      !IB_UNIQUE_ID type ABAP_BOOL default ABAP_FALSE .
  methods SET_SUPPLIERS
    importing
      !IT_SEL_LIFNR type ZDYN_CL_BAPI=>YT_RANGE_LIFNR optional
      !IT_DYN_SEL type RSDS_TRANGE optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !IB_TAKE_INACTIVE type ABAP_BOOL default ABAP_FALSE
      !ID_DATE type FC_DATUM optional
      !IB_BANKDATA type ABAP_BOOL default ABAP_FALSE
      !IB_BANKDATA_DEL type ABAP_BOOL default ABAP_TRUE
      !IB_UNIQUE_ID type ABAP_BOOL default ABAP_FALSE .
  methods POST_PARTY
    importing
      !IST_ROUTTY_PAR type ANY
      !IS_API_NAME type STRING default CON_PARTIES
    exceptions
      ERROR_OCCURRED .
  methods GET_OUTPUT_DOCUMENTS
    importing
      !IC_XSLT type CXSLTDESC optional
      !IB_SKIP_FEEDBACK type ABAP_BOOL default ABAP_FALSE .
  methods INBOUND_PROCESS
    importing
      !IC_XSLT type CXSLTDESC optional
      !IB_SKIP_FEEDBACK type ABAP_BOOL default ABAP_FALSE .
  methods SET_GOODS_RECEIPT
    importing
      !IT_PO_HIST type BAPIEKBE_TP
      !IT_PO_ITEM type BAPIEKPO_TP
      !IST_PO_HEADER type BAPIEKKOL .
  methods SET_APPEND
    importing
      !IB_DELETE type ABAP_BOOL default ABAP_TRUE .
  methods SET_COMPANY
    importing
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !IB_UNIQUE_ID type ABAP_BOOL default ABAP_FALSE .
  methods FILL_VENDOR_BANKACCOUNT
    importing
      !IST_VENDOR type ZDYN_WS_VMD
    returning
      value(RT_BANKACCOUNTS) type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TT_PARTYBANKS .
  methods FILL_CUSTOMER_BANKACCOUNT
    importing
      !IST_CUSTOMER type ZDYN_WS_CMD
    returning
      value(RT_BANKACCOUNTS) type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TT_PARTYBANKS .
  methods EXTEND_PARTYBANK
    importing
      !IST_CC_DETAILS type BAPI0002_2 optional
      !IST_VENDOR type ZDYN_WS_VMD optional
      !IST_LFBK type LFBK optional
      !IST_CUSTOMER type ZDYN_WS_CMD optional
      !IST_KNBK type KNBK optional
    changing
      !CST_PARTYBANK type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TY_PARTYBANK .
  methods EXTEND_METADATA
    importing
      !IST_CC_DETAILS type BAPI0002_2 optional
      !IST_CC_ADDRESS type BAPI0002_3 optional
      !IST_VENDOR type ZDYN_WS_VMD optional
      !IST_CUSTOMER type ZDYN_WS_CMD optional
    changing
      !CST_METADATA type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TY_METADATA .
  methods SET_RESPONSE_MESSAGE
    importing
      !IC_DOC_ID type ANY optional
      !IC_DOC_NUMBER type ANY optional
      !II_HTTP_STATUS type ANY optional .
  methods PING_SYSTEM .
  methods EXTEND_PO_LINES
    importing
      !IST_PO_HEADER type BAPIEKKOL optional
      !IST_PO_ITEM type BAPIEKPO optional
      !IST_PO_ITEM_HIST type BAPIEKBES optional
    changing
      !CST_PO_LINE type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TY_PO_LINE .
  methods POST_ACCOUNTING_MD
    importing
      !IT_ACCOUNTING type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TT_ACCOUNTING
      !IS_TYPE type STRING .
  methods EXTEND_ACCOUNTING_MD
    importing
      !IS_TYPE type STRING
    changing
      !CST_ACCOUNTING type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TY_ACCOUNTING .
  methods SET_CURRENCIES
    importing
      !IT_SEL_WAERS type ZDYN_CL_BAPI=>YT_RANGE_WAERS optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_COSTCENTERS
    importing
      !IT_SEL_KOSTL type ZDYN_CL_BAPI=>YT_RANGE_KOSTL optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_GLACCOUNTS
    importing
      !IT_SEL_SAKNR type ZDYN_CL_BAPI=>YT_RANGE_SAKNR optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_PAYMENTTERMS
    importing
      !IT_SEL_ZTERM type ZDYN_CL_BAPI=>YT_RANGE_ZTERM optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods TRANSFER_DATA_TO_SAP
    importing
      !IS_ID type STRING
      !IS_DOCUMENT type STRING
    exporting
      !ET_MESSAGES type BAPIRET2_T
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods GET_OUTPUT_DOCUMENT_ATT
    importing
      !IS_ID type STRING .
  methods SAVE_FILES_LOCALLY
    importing
      !IS_ID type STRING
      !IS_DATA type STRING
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods PROCESS_OUTPUT_DOCUMENT
    importing
      !IS_ID type STRING
      !IS_DOCUMENT type STRING
      !IC_XSLT type CXSLTDESC default CON_XSLT_IV_TO_PD
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods TRANSFER_DATA_TO_PD
    exporting
      !ET_MESSAGES type BAPIRET2_T
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods GET_PD_MAPID
    returning
      value(RST_PDMAP) type ZDYN_ROUTTY_TMAP .
  methods SEND_FEEDBACK
    importing
      !IB_OK type ABAP_BOOL optional .
  methods SET_PURCHASE_ORDERS
    importing
      !IT_EBELN type ZDYN_CL_BAPI=>YT_EBELN optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !IB_GM type ABAP_BOOL default ABAP_FALSE .
  methods ADD_ATTACHMENT
    importing
      !IS_ATTACHMENT type ZDYN_IF_REST_DATA=>TY_ATTACHMENT .
  methods SET_VATCODES
    importing
      !IT_SEL_MWSKZ type YT_RANGE_MWSKZ optional
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE .
  methods SET_DIMENSION
    importing
      !IB_DELETE type ABAP_BOOL default ABAP_FALSE
      !IC_NAME type ZDYN_DDIMENSIONS
    changing
      !CT_DATA type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TT_ACCOUNTING .

  methods CLEAR_DOCUMENT_DATA
    redefinition .
  methods GET_AR_OBJECT_VALUE
    redefinition .
  methods SET_COMPANY_CODES
    redefinition .
protected section.

  methods API_KEY_AUTHENTICATION .
  methods ADD_LINE_TO_CSV_FILE
    importing
      !IST_CSV_LINE type ZDYN_CL_REST_TOOLS_ROUTTY_DATA=>TY_CSV_LINE
    changing
      !CS_CONTENT type STRING .
  methods DEL_FROM_FAULTY_BUFFER
    importing
      !IST_ID type ZDYN_ROUTTY_TIDS .
  methods GET_FROM_FAULTY_BUFFER
    exporting
      !ET_FAULTY_DOCS type ZDYN_CL_BAPI=>YT_IDS
    changing
      !CT_DOCUMENTS type ZDYN_CL_BAPI=>YT_IDS .
  methods PUT_INTO_FAULTY_BUFFER
    importing
      !IST_ID type ZDYN_ROUTTY_TIDS
      !IT_FAULTY_DOCS type ZDYN_CL_BAPI=>YT_IDS .
  methods CHECK_BEFORE_TRANS_DATA_TO_PD
    importing
      !IT_EXTDATA type ZDYN_LSTRU_EXTDATA
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T .
private section.

  constants CON_XSLT_TO_IDOC type CXSLTDESC value 'ZDYN_ROUTTY_TO_IDOC'. "#EC NOTEXT
  constants CON_LEVEL_HEADER type STRNAME value 'HEADER'. "#EC NOTEXT
  constants CON_LEVEL_ITEM type STRNAME value 'ITEM'. "#EC NOTEXT
  constants CON_LEVEL_TAX type STRNAME value 'TAX'. "#EC NOTEXT
  constants CON_LEVEL_ACCOUNT type STRNAME value 'ACCOUNT'. "#EC NOTEXT
  constants CON_LEVEL_CUSTOM type STRNAME value 'CUSTOM'. "#EC NOTEXT
  constants CON_LEVEL_PROCESSLOG type STRNAME value 'IT_PROCESSLOG'. "#EC NOTEXT
  constants CON_XSLT_JSON type CXSLTDESC value 'ZDYN_ROUTTY_JSONXML2XML'. "#EC NOTEXT
endclass. "ZDYN_CL_REST_TOOLS_ROUTTY definition
class ZDYN_CL_REST_TOOLS_ROUTTY implementation.
METHOD add_attachment.

  DATA: li_size       TYPE i,
        li_bin_size   TYPE i,
        ls_message    TYPE bapiret2,
        ls_attachment TYPE zdyn_stru_archiving,
        lx_image      TYPE xstring.

  zdyn_cl_msg=>add_to_call_stack( ).

  li_size = strlen( is_attachment-data ).

  ls_attachment-mimetype  = is_attachment-mimetype.
  ls_attachment-filename  = is_attachment-filename.
  ls_attachment-ar_object = is_attachment-arch_object.

  CALL FUNCTION 'SSFC_BASE64_DECODE'
    EXPORTING
      b64data = is_attachment-data
      b64leng = li_size
    IMPORTING
      bindata = lx_image
    EXCEPTIONS
      OTHERS  = 1.
* some error leave
  IF sy-subrc = 0.
    CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
      EXPORTING
        buffer        = lx_image
      IMPORTING
        output_length = li_bin_size
      TABLES
        binary_tab    = ls_attachment-content.
    ls_attachment-binlength = li_bin_size.
    mr_attachments->add( ls_attachment ).
  ELSE.
*   error message
    ls_message-message_v1 = ls_attachment-filename.
    zdyn_cl_msg=>add_sysmsg( ).
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = '1R'
                                    ic_msgno = '516'
                                    ic_msgv1 = ls_message-message_v1 ).
* message e516(1r) with space.
  ENDIF.

ENDMETHOD.
METHOD add_idoc_number.

  DATA: li_pos      TYPE i,
        li_next_pos TYPE i,
        ld_ts       TYPE timestampl,
        ls_ts       TYPE string,
        ls_result   TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  FIND FIRST OCCURRENCE OF '<DOCNUM/>' IN cs_xml IN CHARACTER MODE MATCH OFFSET li_pos.
  IF sy-subrc = 0.
    ld_ts = zdyn_cl_bapi=>mo->get_current_timestamp( ).
    ls_ts = ld_ts.
    CONCATENATE '<DOCNUM>' ls_ts '</DOCNUM>' INTO ls_ts.
    CONDENSE ls_ts NO-GAPS.
    REPLACE ALL OCCURRENCES OF '.' IN ls_ts WITH ''.
    li_next_pos = li_pos + 10.
    CONCATENATE cs_xml(li_pos) ls_ts cs_xml+li_next_pos INTO ls_result.
    cs_xml = ls_result.
  ENDIF.

ENDMETHOD.
METHOD add_line_to_csv_file.

  FIELD-SYMBOLS: <field> TYPE any.

  CHECK ist_csv_line IS NOT INITIAL.

  DO.
    ASSIGN COMPONENT sy-index OF STRUCTURE ist_csv_line TO <field>.
    IF sy-subrc <> 0 OR <field> IS NOT ASSIGNED.
      EXIT.
    ENDIF.
    IF sy-index = 1.
      CONCATENATE cs_content <field> INTO cs_content.
    ELSE.
      CONCATENATE cs_content con_csv_separator <field> INTO cs_content.
    ENDIF.
    UNASSIGN <field>.
  ENDDO.

  CONCATENATE cs_content cl_abap_char_utilities=>cr_lf INTO cs_content.

ENDMETHOD.
METHOD api_key_authentication.

  DATA: ls_api_key  TYPE string.

  ls_api_key = mst_config-api_key.
  mo_http_client->request->set_header_field( EXPORTING name  = 'ApiKey'
                                                       value = ls_api_key ).

ENDMETHOD.
METHOD check_before_trans_data_to_pd.
* "exit point" to be implemented in subclasses.

* Variables:
* @eb_ok = false - document will be marked in web service as erroneous and is not
*                  avaliable for processing again
* @eb_skip_feedback = abap_true - document skipped an that run and can be processed again
ENDMETHOD.
METHOD clear_document_data.

  super->clear_document_data( ).
  CLEAR ms_guid.

ENDMETHOD.
METHOD constructor.

  zdyn_cl_msg=>add_to_call_stack( ).

  super->constructor( ii_bulk_size ).
  mst_config = ist_config.

  IF mst_config-api_prefix IS INITIAL.
    mc_api_prefix = con_default_api_prefix.
  ELSE.
    mc_api_prefix = mst_config-api_prefix.
  ENDIF.

  mb_masterdata_to_file   = ib_masterdata_to_file.
  ms_masterdata_pathname  = is_masterdata_pathname.
  mb_masterdata_file_test = ib_masterdata_file_test.

  mr_attachments->set_skip_attach_add( mst_config-skip_attach_add ).

ENDMETHOD.
METHOD del_from_faulty_buffer.

  DELETE FROM zdyn_routty_tids WHERE id = ist_id-id. "#EC CI_NOFIELD

ENDMETHOD.
  METHOD EXTEND_ACCOUNTING_MD.

*  change accounting master data
* IS_TYPE current data type
* CST_ACOUNTING current structure with data

  ENDMETHOD.
METHOD extend_metadata.

*  Add custom code here to add info to custom fields

*  This method is called for several master data objects:
*  ist_cc_details = company code details
*  ist_cc_address = company code address data
*  ist_vendor = vendor information
*  ist_customer = customer information

ENDMETHOD.
METHOD extend_metadata_bank.

*  Add custom code here to add info to custom fields

*  This method is called for several master data objects:
*  ist_cc_details = company code details
*  ist_cc_address = company code address data
*  ist_vendor = vendor information
*  ist_customer = customer information

ENDMETHOD.
METHOD extend_partybank.

*  Add custom code here to add info to custom fields

*  This method is called for several master data objects:
*  ist_cc_details = company code details for Company bank data
*  ist_customer = customer information for Customer bank data
*  ist_knbk   = Customer bank account data
*  ist_vendor = vendor information for Vendor bank data
*  ist_lfbk   = Vendor bank account data

ENDMETHOD.
  method EXTEND_PO_LINES.

*  add custom code here to add info to custom fields
*  ist_po_header = purchase order header
*  ist_po_item = purchase order item
*  ist_po_item_hist = history of this item

  endmethod.
METHOD fill_customer_bankaccount.

  DATA: lt_knbk   TYPE TABLE OF knbk,
        lst_banks TYPE zdyn_cl_rest_tools_routty_data=>ty_partybanks,
        lst_bank  TYPE zdyn_cl_rest_tools_routty_data=>ty_partybank,
        lc_iban   type iban.

  FIELD-SYMBOLS: <knbk> TYPE knbk.

  CHECK NOT ist_customer-kunnr IS INITIAL.

  zdyn_cl_bapi=>mo->get_customer_banks( EXPORTING ic_customer = ist_customer-kunnr
                                        IMPORTING et_banks    = lt_knbk ).
  CHECK lt_knbk IS NOT INITIAL.

  LOOP AT lt_knbk ASSIGNING <knbk>.
    CLEAR: lst_bank.
    lst_bank-_bank_number    = <knbk>-bankl.
    lst_bank-_account_number = <knbk>-bankn.
    lst_bank-_currency       = ist_customer-waers.
    zdyn_cl_bapi=>mo->get_iban( EXPORTING ic_banks = <knbk>-banks
                                          ic_bankl = <knbk>-bankl
                                          ic_bankn = <knbk>-bankn
                                          ic_bkont = <knbk>-bkont
                                IMPORTING ec_iban  = lc_iban ).
    lst_bank-_i_b_a_n = lc_iban.
    lst_bank-_b_i_c =  zdyn_cl_bapi=>mo->get_swift( ic_banks = <knbk>-banks
                                                    ic_bankl = <knbk>-bankl ).
    extend_partybank( EXPORTING ist_customer  = ist_customer
                                ist_knbk      = <knbk>
                      CHANGING  cst_partybank = lst_bank ).

    lst_banks-_party_bank_account = lst_bank.
    APPEND lst_banks TO rt_bankaccounts.
  ENDLOOP.

ENDMETHOD.
METHOD fill_vendor_bankaccount.

  DATA: lt_lfbk   TYPE TABLE OF lfbk,
        lst_banks TYPE zdyn_cl_rest_tools_routty_data=>ty_partybanks,
        lst_bank  TYPE zdyn_cl_rest_tools_routty_data=>ty_partybank,
        lc_iban   TYPE iban.

  FIELD-SYMBOLS:  <lfbk> TYPE lfbk.

  CHECK NOT ist_vendor-lifnr IS INITIAL.

  zdyn_cl_bapi=>mo->get_vendor_banks( EXPORTING ic_vendor = ist_vendor-lifnr
                                      IMPORTING et_banks  = lt_lfbk ).
  CHECK lt_lfbk IS NOT INITIAL.

  LOOP AT lt_lfbk ASSIGNING <lfbk>.
    CLEAR: lst_bank.
    lst_bank-_bank_number     = <lfbk>-bankl.
    lst_bank-_account_number  = <lfbk>-bankn.
    lst_bank-_currency        = ist_vendor-waers.
    zdyn_cl_bapi=>mo->get_iban( EXPORTING ic_banks = <lfbk>-banks
                                          ic_bankl = <lfbk>-bankl
                                          ic_bankn = <lfbk>-bankn
                                          ic_bkont = <lfbk>-bkont
                                IMPORTING ec_iban  = lc_iban ).
    lst_bank-_i_b_a_n = lc_iban.
    lst_bank-_b_i_c =  zdyn_cl_bapi=>mo->get_swift( ic_banks = <lfbk>-banks
                                                    ic_bankl = <lfbk>-bankl ).
    extend_partybank( EXPORTING ist_vendor    = ist_vendor
                                ist_lfbk      = <lfbk>
                      CHANGING  cst_partybank = lst_bank ).

    lst_banks-_party_bank_account = lst_bank.
    APPEND lst_banks TO rt_bankaccounts.
  ENDLOOP.

ENDMETHOD.
METHOD get_ar_object_value.

  rc_ar_object = zdyn_cl_config=>mo->get_archive_object( ic_comp_code = mst_config-bukrs
                                                         ic_username  = mst_config-username ).

ENDMETHOD.
METHOD get_from_faulty_buffer.

  DATA: lt_ids TYPE zdyn_cl_bapi=>yt_ids.

* clean up documents that have been already processed 3 times (counting from 0)
  DELETE FROM zdyn_routty_tids WHERE counter GE con_repeat_times. "#EC CI_NOFIELD
  SELECT id FROM zdyn_routty_tids INTO TABLE et_faulty_docs.
  APPEND LINES OF et_faulty_docs TO ct_documents.    "#EC CI_SEL_NESTED

* just in case Routty provided the document once again
  SORT ct_documents.
  DELETE ADJACENT DUPLICATES FROM ct_documents.

ENDMETHOD.
METHOD get_output_document_att.

  DATA: li_tabix TYPE sy-tabix.
  FIELD-SYMBOLS: <att>    LIKE LINE OF mst_pdiv_document-tab_attachments,
                 <custom> LIKE LINE OF mst_pdiv_document-tab_custom.

  zdyn_cl_msg=>add_to_call_stack( ).

  LOOP AT mst_pdiv_document-tab_custom ASSIGNING <custom>.
    IF <custom>-name = 'GUID' AND <custom>-value IS NOT INITIAL.
      ms_guid = <custom>-value.
      EXIT.
    ENDIF.
  ENDLOOP.
  mst_pdiv_document-guid = ms_guid.
  mo_pdiv_document->set( ic_name = 'GUID'
                         i_value = ms_guid ).

* list of attachments to be downloaded
  READ TABLE mst_pdiv_document-tab_attachments ASSIGNING <att>
       WITH KEY type = con_purchase_invoice_att.
  IF sy-subrc <> 0.
    READ TABLE mst_pdiv_document-tab_attachments ASSIGNING <att>
        WITH KEY type = con_sales_invoice_att.
  ENDIF.
  IF sy-subrc = 0.
    <att>-arch_object = get_ar_object_value( ).
    add_attachment( <att> ).
  ELSE.
    READ TABLE mst_pdiv_document-tab_attachments ASSIGNING <att>
         WITH KEY type     = 'Attachment'
                  mimetype = 'application/pdf'.
    IF sy-subrc = 0.
      li_tabix = sy-tabix.
      <att>-arch_object = get_ar_object_value( ).
      add_attachment( <att> ).
      DELETE mst_pdiv_document-tab_attachments INDEX li_tabix.
    ENDIF.
  ENDIF.

  READ TABLE mst_pdiv_document-tab_attachments ASSIGNING <att>
       WITH KEY type = 'Base Document'.
  IF sy-subrc = 0.
    add_attachment( <att> ).
  ENDIF.

  LOOP AT mst_pdiv_document-tab_attachments ASSIGNING <att>
       WHERE type = 'Attachment'.
    add_attachment( <att> ).
  ENDLOOP.

ENDMETHOD.
METHOD get_output_documents.

  DATA: li_return_code   TYPE i,
        lb_ok            TYPE abap_bool,
        lb_skip_feedback TYPE abap_bool,
        ls_id            TYPE string,
        ls_url           TYPE string,
        li_len           TYPE i,
        li_id            TYPE i,
        lt_ids           TYPE STANDARD TABLE OF i,
        lst_id           TYPE zdyn_routty_tids,
        lst_document     TYPE zdyn_cl_rest_tools_routty_data=>ty_document,
        lst_documents    TYPE zdyn_cl_rest_tools_routty_data=>ty_ready.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.

  set_new_rel_url( is_path = con_documentids ).
  call_http_get( IMPORTING ei_return_code = li_return_code ).

  IF li_return_code = 200.
    deserialize_from_json( EXPORTING is_json  = ms_result
                           CHANGING  cst_data = lst_documents ).
    IF lst_documents-success = abap_false.
      set_response_message( ).
    ENDIF.

    get_from_faulty_buffer( IMPORTING et_faulty_docs = lt_ids
                       CHANGING ct_documents = lst_documents-data ).

    lst_id-client = sy-mandt.

    CLEAR mi_entry_counter.
    LOOP AT lst_documents-data INTO li_id.

      CLEAR: lb_ok, ls_id, lb_skip_feedback.
      clear_document_data( ).

*     start collecting messages that will be sent back in feedback
      zdyn_cl_msg=>start_group( ).

      lst_id-id = li_id.
      put_into_faulty_buffer( EXPORTING ist_id         = lst_id
                                        it_faulty_docs = lt_ids ).
      ls_id = li_id.
      CONDENSE ls_id NO-GAPS.
      CHECK NOT ls_id IS INITIAL.
      CONCATENATE con_document ls_id INTO ls_url.

      set_new_rel_url( is_path = ls_url ).
      call_http_get( IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_document ).
        IF lst_document-success = abap_true.
*         now we have to process the data
          IF mo_file->is_doc_to_file( ) = abap_false.
            process_output_document( EXPORTING is_id            = ls_id
                                               is_document      = lst_document-data
                                               ic_xslt          = ic_xslt
                                     IMPORTING eb_ok            = lb_ok
                                               eb_skip_feedback = lb_skip_feedback ).
          ELSE.
            lb_ok = mo_file->save_doc_in_xml_file( is_doc_no = ls_id
                                                   is_xml    = lst_document-data ).
          ENDIF.
*         either set error mesasges or delete the document from our buffer with faulty documents
          IF lb_ok = abap_true.
            del_from_faulty_buffer( lst_id ).
            mi_entry_counter = mi_entry_counter + 1.
          ELSE.
            set_response_message( ic_doc_id = li_id ).
          ENDIF.
        ELSE.
          set_response_message( ic_doc_id = li_id ).
        ENDIF.
      ELSE.
        zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'E'
                                        ic_msgid    = 'TRUST'
                                        ic_msgno    = '113'
                                        ic_msgv1    = li_return_code ).
*        MESSAGE e113(trust).
        set_response_message( ic_doc_id = li_id ).
      ENDIF.
      zdyn_cl_msg=>stop_group( ).

      IF ib_skip_feedback = abap_false AND lb_skip_feedback = abap_false.
*       here we send a message back to Routty
        send_feedback( ib_ok = lb_ok ).
      ENDIF.
    ENDLOOP.

    zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  ELSE.

    set_response_message( ii_http_status = li_return_code ).

  ENDIF.

ENDMETHOD.
  METHOD GET_PD_MAPID.

    SELECT SINGLE * FROM zdyn_routty_tmap INTO rst_pdmap
                   WHERE sysid    = sy-sysid
                     AND bukrs    = mst_config-bukrs
                     AND username = mst_config-username.

    IF rst_pdmap-obj IS INITIAL.
      rst_pdmap-obj = 'IV'.
    ENDIF.
    IF rst_pdmap-mapid IS INITIAL.
      rst_pdmap-mapid = 'ROUTTY'.
    ENDIF.

  ENDMETHOD.
METHOD inbound_process.

  DATA: ls_xml  TYPE string,
        ls_id   TYPE string.

  IF mo_file->is_file_to_doc( ) = abap_false.
    IF ic_xslt IS INITIAL.
      get_output_documents( ib_skip_feedback = ib_skip_feedback ).
    ELSE.
      get_output_documents( ic_xslt          = ic_xslt
                            ib_skip_feedback = ib_skip_feedback ).
    ENDIF.
  ELSE.
    mo_file->get_file_content( IMPORTING es_content = ls_xml ).
    ls_id = mo_file->get_id_from_file_name( ).
    IF ic_xslt IS INITIAL.
      process_output_document( is_id       = ls_id
                               is_document = ls_xml ).
    ELSE.
      process_output_document( is_id       = ls_id
                               is_document = ls_xml
                               ic_xslt     = ic_xslt ).
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD ping_system.

  DATA li_return_code TYPE i.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.

  set_new_rel_url( is_path = con_ping ).

  call_http_get( IMPORTING ei_return_code = li_return_code ).

  set_response_message( ii_http_status = li_return_code ).

ENDMETHOD.
METHOD post_accounting_md.

  DATA: ls_path   TYPE string,
        ls_input  TYPE string,
        ls_output TYPE string,
        ls_xml    TYPE string.
  FIELD-SYMBOLS: <acc> TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_type IS INITIAL.
  CHECK NOT it_accounting IS INITIAL.

  CONCATENATE con_masterdata con_accounting INTO ls_path.
  set_new_rel_url( is_path = ls_path ).

* should be more sophisticated right now hardcoded
  ls_xml = '<?xml version="1.0" encoding="UTF-8"?>'.
  CONCATENATE ls_xml '<AccountingMasterDataList>' INTO ls_xml.

  LOOP AT it_accounting ASSIGNING <acc>.
    CONCATENATE ls_xml '<AccountingMasterData type="' is_type '">' INTO ls_xml.

    CONCATENATE ls_xml '<Value>' <acc>-value '</Value>' INTO ls_xml.
    ls_input = <acc>-description.
    ls_output = mo_http_client->escape_html( ls_input ).

    CONCATENATE ls_xml '<Description>' ls_output '</Description>' INTO ls_xml.
    CONCATENATE ls_xml '<CorporateGroupID>' <acc>-corporategroupid '</CorporateGroupID>' INTO ls_xml.
    IF NOT <acc>-field1 IS INITIAL.
      ls_input = <acc>-field1.
      ls_output = mo_http_client->escape_html( ls_input ).
      CONCATENATE ls_xml '<Field1>' ls_output '</Field1>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field2 IS INITIAL.
      CONCATENATE ls_xml '<Field2>' <acc>-field1 '</Field2>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field3 IS INITIAL.
      CONCATENATE ls_xml '<Field3>' <acc>-field1 '</Field3>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field4 IS INITIAL.
      CONCATENATE ls_xml '<Field4>' <acc>-field1 '</Field4>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field5 IS INITIAL.
      CONCATENATE ls_xml '<Field5>' <acc>-field1 '</Field5>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field6 IS INITIAL.
      CONCATENATE ls_xml '<Field6>' <acc>-field1 '</Field6>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field7 IS INITIAL.
      CONCATENATE ls_xml '<Field7>' <acc>-field1 '</Field7>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field8 IS INITIAL.
      CONCATENATE ls_xml '<Field8>' <acc>-field1 '</Field8>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field9 IS INITIAL.
      CONCATENATE ls_xml '<Field9>' <acc>-field1 '</Field9>' INTO ls_xml.
    ENDIF.
    IF NOT <acc>-field10 IS INITIAL.
      CONCATENATE ls_xml '<Field10>' <acc>-field1 '</Field10>' INTO ls_xml.
    ENDIF.

    CONCATENATE ls_xml '</AccountingMasterData>' INTO ls_xml.

  ENDLOOP.

  CONCATENATE ls_xml '</AccountingMasterDataList>' INTO ls_xml.

  call_http_post( EXPORTING is_input = ls_xml ).

  set_response_message( ).

ENDMETHOD.
METHOD post_party.

  DATA: ls_json TYPE string,
        ls_path TYPE string,
        ls_xml  TYPE string.

  CHECK mo_http_client IS BOUND.

  zdyn_cl_msg=>add_to_call_stack( ).

  CONCATENATE con_masterdata is_api_name INTO ls_path.
  set_new_rel_url( is_path = ls_path ).

  mo_http_client->request->set_header_field( EXPORTING name  = 'Content-Type'
                                                       value = con_mimetype_xml ).

  ls_json = serialize_to_json( ist_data       = ist_routty_par
                               ic_compress    = abap_true
                               ic_pretty_name = con_camel_case ).

  transform_json_to_xml( EXPORTING  is_xml  = ls_json
                                    ic_xslt = con_xslt_json
                         IMPORTING  es_xml  = ls_xml
                         EXCEPTIONS OTHERS  = 1 ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

  call_http_post( EXPORTING is_input = ls_xml ).

  set_response_message( ).

ENDMETHOD.
METHOD prepare_client.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF mst_config-rfcdest IS NOT INITIAL.
    create_http_client( EXPORTING  ic_rfcdest = mst_config-rfcdest
                        EXCEPTIONS OTHERS     = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
  ELSE.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'ZDYN_WS'
                                    ic_msgno    = '042' ).
*   MESSAGE e042(zdyn_ws).
    RAISE error_occurred.
  ENDIF.

  CHECK mo_http_client IS BOUND.

  mo_http_client->request->set_header_field( name  = 'Content-Type'
                                             value = con_mimetype_json ).

  IF is_user IS NOT INITIAL AND mst_config-api_key IS INITIAL.
*   single-tenant requires user name and password
    basic_authentication( EXPORTING is_user     = is_user
                                    is_password = is_password ).
  ELSEIF mst_config-api_key IS NOT INITIAL.
*   multi-tenant requires API key
    api_key_authentication( ).
  ENDIF.

ENDMETHOD.
METHOD process_output_document.

  DATA: lt_data      TYPE abap_trans_resbind_tab,
        ls_xml       TYPE string,
        ls_root_node TYPE string,
        lt_messages  TYPE bapiret2_t.

  zdyn_cl_msg=>add_to_call_stack( ).

  ms_result = is_document.

* anyway we need the attachments, so first call the attachment transformation
  IF mst_config-xslt_attach IS INITIAL.
    IF mst_config-xslt IS NOT INITIAL.
      mst_config-xslt_attach = mst_config-xslt.
    ELSE.
      mst_config-xslt_attach = con_xslt_iv_to_pd.
    ENDIF.
  ENDIF.
* default root node name
  ls_root_node = zdyn_if_rest_data=>con_pdiv_document_root.

  transform_iv_to_pd_document( EXPORTING ic_xslt      = mst_config-xslt_attach
                                         is_root_node = ls_root_node
                               IMPORTING eb_ok        = eb_ok
                                         es_xml       = ls_xml
                               CHANGING  ct_data      = lt_data ).
* now we have to fetch the attachments
  IF eb_ok = abap_true.
    get_output_document_att( is_id ).
  ENDIF.

  IF ic_xslt NE space.
*   use XSLT from external call
    mst_config-xslt = ic_xslt.
  ENDIF.
*    set default XSLT values for import types
  IF mst_config-xslt IS INITIAL.
    IF mst_config-imp_type EQ con_imp_type_pd.
      mst_config-xslt = con_xslt_iv_to_pd.
    ENDIF.
    IF mst_config-imp_type EQ con_imp_type_idoc.
      mst_config-xslt = con_xslt_to_idoc.
    ENDIF.
  ENDIF.
* special preparation of lt_data for IDOC handling to suppress error.
  IF mst_config-imp_type = con_imp_type_idoc.
    IF mst_config-xslt = con_xslt_iv_to_pd.
      mst_config-xslt = con_xslt_to_idoc.
    ENDIF.
*   we do not need to run transformation
    ls_root_node = space.
  ENDIF.

* do we need a different XSLT processing ?
  IF NOT mst_config-xslt IS INITIAL AND mst_config-xslt <> mst_config-xslt_attach. "con_xslt_iv_to_pd.
    transform_iv_to_pd_document( EXPORTING ic_xslt      = mst_config-xslt
                                           is_root_node = ls_root_node
                                 IMPORTING eb_ok        = eb_ok
                                           es_xml       = ls_xml ).
  ENDIF.

*  needs to be processed somehow - config stored in mst_config
  CASE mst_config-imp_type.
    WHEN con_imp_type_localfile.
*  1. save file on server
      CHECK NOT ls_xml IS INITIAL.
      save_files_locally( EXPORTING is_id            = is_id
                                    is_data          = is_document
                          IMPORTING eb_ok            = eb_ok
                                    eb_skip_feedback = eb_skip_feedback ).

    WHEN con_imp_type_idoc.
*  2. create IDOC
      transfer_data_to_sap_as_idoc( EXPORTING is_id       = is_id
                                              is_document = ls_xml
                                    IMPORTING eb_ok            = eb_ok
                                              eb_skip_feedback = eb_skip_feedback ).
    WHEN con_imp_type_pd.
*  3. send to PD
      CHECK eb_ok = abap_true.
      CHECK NOT lt_data IS INITIAL.
      transfer_data_to_pd( IMPORTING et_messages      = lt_messages
                                     eb_ok            = eb_ok
                                     eb_skip_feedback = eb_skip_feedback ).
      zdyn_cl_msg=>add_msgs( lt_messages ).

    WHEN con_imp_type_sap.
*  4. send to SAP
      CHECK eb_ok = abap_true.
      transfer_data_to_sap( EXPORTING is_id            = is_id
                                      is_document      = is_document
                            IMPORTING et_messages      = lt_messages
                                      eb_ok            = eb_ok
                                      eb_skip_feedback = eb_skip_feedback ).
      zdyn_cl_msg=>add_msgs( lt_messages ).
    WHEN OTHERS.
*   still to be developed
  ENDCASE.

ENDMETHOD.
METHOD put_into_faulty_buffer.

  READ TABLE it_faulty_docs TRANSPORTING NO FIELDS WITH KEY table_line = ist_id-id.
  IF sy-subrc = 0.
    UPDATE zdyn_routty_tids
           SET counter = counter + 1
           WHERE id = ist_id-id.  "#EC CI_NOFIELD
  ELSE.
    INSERT INTO zdyn_routty_tids VALUES ist_id.
  ENDIF.

ENDMETHOD.
METHOD save_files_locally.

  DATA: ls_filename TYPE string,
        lt_data     TYPE rmps_t_1024,
        lc_file     TYPE text255,
        lc_msgv1    TYPE sy-msgv1.
  FIELD-SYMBOLS: <lst_att> TYPE zdyn_stru_archiving.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT mst_config-importfile IS INITIAL.

  CONCATENATE is_id '.xml' INTO lc_file.

  mo_file->get_file_name_using_path( EXPORTING  ic_logical_path   = mst_config-importfile
                                                is_file_name      = lc_file
                                     IMPORTING  es_full_file_name = ls_filename
                                     EXCEPTIONS OTHERS            = 1 ).
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_sysmsg( ).
    EXIT.
  ENDIF.

  convert_string_to_tt_tbl1024( EXPORTING is_string = is_data
                                IMPORTING  et_data   = lt_data ).

* save data file
  eb_ok = mo_file->store_file_on_appserver( is_filename = ls_filename
                                            it_data     = lt_data ).
  IF eb_ok = abap_false.
    zdyn_cl_msg=>add_sysmsg( ).
    EXIT.
  ENDIF.
  lc_msgv1 = lc_file.
  zdyn_cl_msg=>add_msg( EXPORTING ic_msgty = 'S'
                                  ic_msgid = '1E'
                                  ic_msgno = '226'
                                  ic_msgv1 = lc_msgv1 ).
* message s226(1e).

  LOOP AT mr_attachments->mt_attachments ASSIGNING <lst_att>.

    mo_file->get_file_name_using_path( EXPORTING  ic_logical_path   = mst_config-importfile
                                                  is_file_name      = <lst_att>-filename
                                       IMPORTING  es_full_file_name = ls_filename
                                       EXCEPTIONS OTHERS            = 0 ).
*   save the image file
    eb_ok = mo_file->store_file_on_appserver( is_filename = ls_filename
                                              it_data     = <lst_att>-content ).
    IF eb_ok = abap_false.
      zdyn_cl_msg=>add_sysmsg( ).
      EXIT.
    ENDIF.

    lc_msgv1 = <lst_att>-filename.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = '1R'
                                    ic_msgno    = '412'
                                    ic_msgv1    = lc_msgv1 ).
*   message s412(1r) with space.
  ENDLOOP.

  IF eb_ok = abap_true.
    add_msg_1 s 050 zdyn_ws 0 is_id.
*   message s050(zdyn_ws) with space.
  ENDIF.

ENDMETHOD.
METHOD send_feedback.

  DATA: lt_messages   TYPE bapiret2_t,
        lst_message   TYPE zdyn_cl_rest_tools_routty_data=>ty_message,
        lst_feedback  TYPE zdyn_cl_rest_tools_routty_data=>ty_feedback,
        lst_feedbacks TYPE zdyn_cl_rest_tools_routty_data=>ty_feedbacks,
        lst_routty    TYPE zdyn_cl_rest_tools_routty_data=>ty_routtyfeedback,
        ls_json       TYPE string,
        ls_xml        TYPE string.
  FIELD-SYMBOLS: <message> TYPE bapiret2.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ms_guid IS INITIAL.
  CHECK mo_http_client IS BOUND.

  set_new_rel_url( is_path = con_acc_feedback ).

  lt_messages = zdyn_cl_msg=>get_messages( ib_only_group = abap_true ).
  LOOP AT lt_messages ASSIGNING <message>.
    IF sy-tabix = 1.
      lst_message-_message = <message>-message.
    ELSE.
      CONCATENATE lst_message-_message <message>-message
             INTO lst_message-_message SEPARATED BY space.
    ENDIF.
  ENDLOOP.

  IF ib_ok = abap_true.
    lst_feedback-_status = 'Success'.
  ELSE.
    lst_feedback-_status = 'Error'.
  ENDIF.
  lst_feedback-_document_guid = ms_guid.
  lst_feedback-_process_date = sy-datlo.
  lst_feedback-_messages = lst_message.
  lst_feedbacks-_routty_feedback_document = lst_feedback.
  APPEND lst_feedbacks TO lst_routty-_routty_feedback_documents.

  mo_http_client->request->set_header_field( name  = 'Accept'
                                             value = con_mimetype_json ).

  ls_json = serialize_to_json( ist_data       = lst_routty
                               ic_compress    = abap_false
                               ic_pretty_name = con_camel_case ).

  transform_json_to_xml( EXPORTING  is_xml      = ls_json
                                    ic_xslt     = con_xslt_json
                         IMPORTING  es_xml      = ls_xml
                         EXCEPTIONS OTHERS      = 1 ).
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.

  call_http_post( EXPORTING is_input = ls_xml ).

  set_response_message( ).

ENDMETHOD.
METHOD set_append.

  CHECK mo_http_client IS BOUND.

  IF ib_delete = abap_true.
*  set flag Append = false
    CALL METHOD mo_http_client->request->set_header_field
      EXPORTING
        name  = 'Append'
        value = 'false'.
  ELSE.
    CALL METHOD mo_http_client->request->set_header_field
      EXPORTING
        name  = 'Append'
        value = 'true'.
  ENDIF.

ENDMETHOD.
METHOD SET_AR_LOGIC.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF io_ar IS NOT INITIAL.
    mo_ar = io_ar.
  ELSE.
    CREATE OBJECT mo_ar.
  ENDIF.

ENDMETHOD.
METHOD set_company.

  DATA: li_return_code TYPE i,
        ls_path        TYPE string,
        ls_json        TYPE string,
        lt_bukrs       TYPE STANDARD TABLE OF bukrs,
        lt_messages    TYPE bapiret2_t,
        lst_cc_detail  TYPE bapi0002_2,
        lst_cc_address TYPE bapi0002_3,
        lst_metadata   TYPE zdyn_cl_rest_tools_routty_data=>ty_metadata,
        lst_type       TYPE zdyn_cl_rest_tools_routty_data=>ty_type,
        lst_partyregno TYPE zdyn_cl_rest_tools_routty_data=>ty_partyregno,
        lst_partyregs  TYPE zdyn_cl_rest_tools_routty_data=>ty_partyregs,
        lst_partybank  TYPE zdyn_cl_rest_tools_routty_data=>ty_partybank,
        lst_partybanks TYPE zdyn_cl_rest_tools_routty_data=>ty_partybanks,
        lst_party      TYPE zdyn_cl_rest_tools_routty_data=>ty_party,
        lst_partylist  TYPE zdyn_cl_rest_tools_routty_data=>ty_partylist,
        lst_routty_par TYPE zdyn_cl_rest_tools_routty_data=>ty_routty_partylist.

  FIELD-SYMBOLS: <bukrs> TYPE bukrs.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT mt_sel_comp_codes IS INITIAL.
  CHECK mo_http_client IS BOUND.

  set_append( ib_delete = ib_delete ).

* add/modify entries
  zdyn_cl_bapi=>mo->get_company_codes( EXPORTING it_sel_opt       = mt_sel_comp_codes
                                       IMPORTING et_company_codes = lt_bukrs ).
  CHECK NOT lt_bukrs IS INITIAL.
  CLEAR: mi_entry_counter, lst_routty_par, lst_partylist.

  CLEAR mi_entry_counter.
  LOOP AT lt_bukrs ASSIGNING <bukrs>.

    zdyn_cl_bapi=>mo->bapi_companycode_getdetail( EXPORTING ic_companycode_id       = <bukrs>
                                                  IMPORTING est_companycode_detail  = lst_cc_detail
                                                            est_companycode_address = lst_cc_address ).

    CLEAR: lst_party, lst_partyregno, lst_partyregs, lst_metadata, lst_partybank, lst_type, lst_party.
    IF lst_cc_detail-vat_reg_no IS NOT INITIAL.
      lst_partyregno-_number = lst_cc_detail-vat_reg_no.
      lst_partyregno-_scheme = 'VAT'.
      lst_partyregs-_party_registration_number = lst_partyregno.
    ENDIF.
    APPEND lst_partyregs TO lst_metadata-_party_registration_numbers.

    IF lst_cc_detail-currency_iso IS NOT INITIAL.
      lst_partybank-_currency = lst_cc_detail-currency_iso.
      extend_partybank( EXPORTING ist_cc_details = lst_cc_detail
                        CHANGING  cst_partybank  = lst_partybank ).
      lst_partybanks-_party_bank_account = lst_partybank.
    ELSE.
    ENDIF.
    APPEND lst_partybanks TO lst_metadata-_party_bank_accounts.

    lst_metadata-_number = lst_cc_detail-comp_code.
    lst_metadata-_corporate_group_i_d = lst_cc_detail-comp_code.
*    lst_metadata-_is_masterdata = abap_true.
    lst_metadata-_name1  = lst_cc_detail-comp_name.
*    lst_metadata-_name2  = lst_cc_address-name_2.
    lst_metadata-_address1  = lst_cc_address-street.
    lst_metadata-_address2  = lst_cc_address-str_suppl1.
    lst_metadata-_postal_code  = lst_cc_address-postl_cod1.
    lst_metadata-_po_box  = lst_cc_address-po_box.
    lst_metadata-_city  = lst_cc_address-city.
    lst_metadata-_state  = lst_cc_address-region.
    lst_metadata-_country_code = lst_cc_detail-country_iso.
    lst_metadata-_telephone = lst_cc_address-tel1_numbr.
    lst_metadata-_email_address = zdyn_cl_bapi=>mo->get_email_from_adr6( ic_adrnr = lst_cc_address-addr_no ).

    extend_metadata( EXPORTING ist_cc_details = lst_cc_detail
                               ist_cc_address = lst_cc_address
                     CHANGING  cst_metadata   = lst_metadata ).

    lst_type-_name = 'Company'.
    lst_party-_type = lst_type.
    lst_party-_metadata = lst_metadata.
    lst_party-_active = abap_true.
    lst_partylist-_party = lst_party.
    APPEND lst_partylist TO lst_routty_par-_party_list.
    mi_entry_counter = mi_entry_counter + 1.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  post_party( EXPORTING  ist_routty_par = lst_routty_par
              EXCEPTIONS OTHERS         = 0 ).

ENDMETHOD.
METHOD set_company_codes.

  DATA: lst_sel_comp_code LIKE LINE OF mt_sel_comp_codes.

  super->set_company_codes( EXPORTING it_sel_comp_codes = it_sel_comp_codes ).

  IF mst_config-bukrs IS NOT INITIAL.
    READ TABLE mt_sel_comp_codes TRANSPORTING NO FIELDS
      WITH KEY low = mst_config-bukrs.
    IF sy-subrc <> 0.
      lst_sel_comp_code-sign = 'I'.
      lst_sel_comp_code-option = 'EQ'.
      lst_sel_comp_code-low = mst_config-bukrs.
      APPEND lst_sel_comp_code TO mt_sel_comp_codes.
    ENDIF.
  ENDIF.
  SORT mt_sel_comp_codes BY low.

ENDMETHOD.
METHOD set_costcenters.

  DATA: lc_kokrs     TYPE kokrs,
        lt_kosts_tmp TYPE STANDARD TABLE OF m_kosts,
        lt_kosts     TYPE STANDARD TABLE OF m_kosts,
        lst_acc      TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting,
        lt_acc       TYPE zdyn_cl_rest_tools_routty_data=>tt_accounting.
  FIELD-SYMBOLS: <st_kosts>         TYPE m_kosts,
                 <st_sel_comp_code> LIKE LINE OF mt_sel_comp_codes.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.
  CHECK NOT it_sel_kostl IS INITIAL.

* add/modify entries
  set_append( ib_delete = ib_delete ).

  CLEAR mi_entry_counter.
  LOOP AT mt_sel_comp_codes ASSIGNING <st_sel_comp_code>.
    CLEAR: lc_kokrs, lt_kosts_tmp.
    IF <st_sel_comp_code>-low IS NOT INITIAL.
      zdyn_cl_bapi=>mo->get_controlling_area( EXPORTING   ic_comp_code   = <st_sel_comp_code>-low
                                              IMPORTING   ec_ctrl_area   = lc_kokrs
                                              EXCEPTIONS  OTHERS         = 0 ).
    ENDIF.
    zdyn_cl_bapi=>mo->get_cost_centers( EXPORTING ic_comp_code    = <st_sel_comp_code>-low
                                                  ic_ctrl_area    = lc_kokrs
                                                  it_sel_opt      = it_sel_kostl
                                                  it_sel_langu    = mt_sel_langu
                                        IMPORTING et_cost_centers = lt_kosts_tmp ).
    APPEND LINES OF lt_kosts_tmp TO lt_kosts.
  ENDLOOP.

  IF lt_kosts IS INITIAL.
    zdyn_cl_bapi=>mo->get_cost_centers( EXPORTING it_sel_opt      = it_sel_kostl
                                                  it_sel_langu    = mt_sel_langu
                                        IMPORTING et_cost_centers = lt_kosts ).
  ENDIF.

* just in case
  SORT lt_kosts BY bukrs kostl.
  DELETE ADJACENT DUPLICATES FROM lt_kosts COMPARING bukrs kostl.

  LOOP AT lt_kosts ASSIGNING <st_kosts>.
    CLEAR lst_acc.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <st_kosts>-kostl
      IMPORTING
        output = <st_kosts>-kostl.

    lst_acc-value             = <st_kosts>-kostl.
    lst_acc-description       = <st_kosts>-mctxt.
    lst_acc-corporategroupid  = <st_kosts>-bukrs.

    extend_accounting_md( EXPORTING is_type        = con_type_costcenter
                          CHANGING  cst_accounting = lst_acc ).
    APPEND lst_acc TO lt_acc.
    mi_entry_counter = mi_entry_counter + 1.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  post_accounting_md( it_accounting = lt_acc
                      is_type       = con_type_costcenter ).

ENDMETHOD.
METHOD set_currencies.

  DATA: lt_tcurt TYPE STANDARD TABLE OF tcurt,
        lst_acc  TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting,
        lt_acc   TYPE zdyn_cl_rest_tools_routty_data=>tt_accounting.
  FIELD-SYMBOLS: <tcurt>        TYPE tcurt,
                 <st_comp_code> LIKE LINE OF mt_sel_comp_codes.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_waers IS INITIAL.
  CHECK NOT mt_sel_comp_codes IS INITIAL.
  CHECK mo_http_client IS BOUND.

* add/modify entries
  set_append( ib_delete = ib_delete ).
  zdyn_cl_bapi=>mo->get_currency_texts( EXPORTING it_sel_opt    = it_sel_waers
                                                  it_sel_langu  = mt_sel_langu
                                        IMPORTING et_texts      = lt_tcurt ).
  CLEAR mi_entry_counter.
  LOOP AT lt_tcurt ASSIGNING <tcurt>.
    CLEAR lst_acc.
    lst_acc-value             = <tcurt>-waers.
    lst_acc-description       = <tcurt>-ktext.
    LOOP AT mt_sel_comp_codes ASSIGNING <st_comp_code>.
      lst_acc-corporategroupid  = <st_comp_code>-low.
      extend_accounting_md( EXPORTING is_type        = con_type_currency
                            CHANGING  cst_accounting = lst_acc ).
      APPEND lst_acc TO lt_acc.
      mi_entry_counter = mi_entry_counter + 1.
    ENDLOOP.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  post_accounting_md( it_accounting = lt_acc
                      is_type       = con_type_currency ).

ENDMETHOD.
METHOD set_customers.

  DATA: li_return_code  TYPE i,
        lt_cmd_all      TYPE zdyn_cl_bapi=>yt_customers,
        lt_cmd          LIKE lt_cmd_all,
        lt_messages     TYPE bapiret2_t,
        ld_date         LIKE id_date,
        li_remaining    TYPE i,
        li_copied       TYPE i,
        lt_bankaccounts TYPE zdyn_cl_rest_tools_routty_data=>tt_partybanks,
        lst_metadata    TYPE zdyn_cl_rest_tools_routty_data=>ty_metadata,
        lst_type        TYPE zdyn_cl_rest_tools_routty_data=>ty_type,
        lst_partyregno  TYPE zdyn_cl_rest_tools_routty_data=>ty_partyregno,
        lst_partyregs   TYPE zdyn_cl_rest_tools_routty_data=>ty_partyregs,
        lst_party       TYPE zdyn_cl_rest_tools_routty_data=>ty_party,
        lst_partylist   TYPE zdyn_cl_rest_tools_routty_data=>ty_partylist,
        lst_routty_par  TYPE zdyn_cl_rest_tools_routty_data=>ty_routty_partylist.
  FIELD-SYMBOLS: <cmd> TYPE zdyn_ws_cmd.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_kunnr IS INITIAL.
  CHECK mo_http_client IS BOUND.

  IF id_date IS NOT INITIAL.
    ld_date = id_date.
    IF ld_date = sy-datlo.
      ld_date = sy-datlo - 1.
    ENDIF.
  ENDIF.

* add/modify entries
  set_append( ib_delete = ib_delete ).

  zdyn_cl_bapi=>mo->get_customers( EXPORTING it_sel_opt        = it_sel_kunnr
                                             it_sel_comp_codes = mt_sel_comp_codes
                                   IMPORTING et_customers      = lt_cmd_all ).
  remove_inactive_customers( EXPORTING ib_take_inactive = ib_take_inactive
                                       id_date          = id_date
                             CHANGING  ct_customers     = lt_cmd_all ).
  CHECK NOT lt_cmd_all IS INITIAL.

  CLEAR: mi_entry_counter, mi_batch_counter.
  li_remaining = lines( lt_cmd_all ).
  WHILE li_remaining > 0.
*   if this is already a consecutive iteration, switch to the 'modify' mode
    IF ib_delete = abap_true AND li_copied > 0.
      set_append( ib_delete = abap_false ).
    ENDIF.
    CLEAR: lt_cmd, li_copied, lst_routty_par.

    IF li_remaining < mi_bulk_size.
      lt_cmd = lt_cmd_all.
      li_remaining = 0.
    ELSE.
      LOOP AT lt_cmd_all ASSIGNING <cmd>.
        APPEND <cmd> TO lt_cmd.
        DELETE lt_cmd_all.
        li_copied = li_copied + 1.
        IF li_copied >= mi_bulk_size.
          li_remaining = li_remaining - li_copied.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT lt_cmd ASSIGNING <cmd>.
*   now we check date of last change
      IF NOT ld_date IS INITIAL.
        IF ld_date > <cmd>-erdat.
          CHECK abap_true = zdyn_cl_bapi=>mo->is_object_modified( ic_object_id    = <cmd>-kunnr
                                                                  ic_object_class = 'DEBI'
                                                                  id_date         = ld_date ).
        ENDIF.
      ENDIF.
      CLEAR: lst_party, lst_partyregno, lt_bankaccounts, lst_partyregs, lst_metadata, lst_type, lst_party.

      IF ib_bankdata = abap_true.
        lt_bankaccounts = fill_customer_bankaccount( ist_customer = <cmd> ).
      ENDIF.
      IF lt_bankaccounts IS INITIAL.
        APPEND INITIAL LINE TO lt_bankaccounts.
      ENDIF.

      lst_metadata-_party_bank_accounts = lt_bankaccounts.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = <cmd>-kunnr
        IMPORTING
          output = <cmd>-kunnr.

      IF <cmd>-stceg IS NOT INITIAL.
        lst_partyregno-_number = <cmd>-stceg.
        lst_partyregno-_scheme = 'VAT'.
        lst_partyregs-_party_registration_number = lst_partyregno.
      ENDIF.
      APPEND lst_partyregs TO lst_metadata-_party_registration_numbers.
      lst_metadata-_number              = <cmd>-kunnr.
      lst_metadata-_corporate_group_i_d = <cmd>-bukrs.
*      lst_metadata-_is_masterdata       = abap_true.
      lst_metadata-_name1               = <cmd>-name1.
*      lst_metadata-_name2               = <cmd>-name2.
      lst_metadata-_address1            = <cmd>-stras.
      lst_metadata-_postal_code         = <cmd>-pstlz.
      lst_metadata-_po_box              = <cmd>-pfach.
      lst_metadata-_city                = <cmd>-ort01.
      lst_metadata-_state               = <cmd>-regio.
      lst_metadata-_country_code        = <cmd>-land1.
      lst_metadata-_telephone           = <cmd>-telf1.
      lst_metadata-_payment_terms       = <cmd>-zterm.
      lst_metadata-_payment_method      = <cmd>-zwels.
      lst_metadata-_email_address       = zdyn_cl_bapi=>mo->get_email_from_adr6( ic_adrnr = <cmd>-adrnr ).

      extend_metadata( EXPORTING ist_customer = <cmd>
                       CHANGING  cst_metadata = lst_metadata ).

      lst_type-_name      = 'Partner'.
      lst_party-_type     = lst_type.
      lst_party-_metadata = lst_metadata.
      IF NOT <cmd>-loevm IS INITIAL OR
         NOT <cmd>-sperr IS INITIAL.
*       will be serialized as 'false' in JSON, also in compressed version
        lst_party-_active = abap_undefined.
      ELSEIF NOT mt_sel_comp_codes IS INITIAL
         AND ( NOT <cmd>-bukrs_loevm IS INITIAL OR
               NOT <cmd>-bukrs_sperr IS INITIAL ).
*       will be serialized as 'false' in JSON, also in compressed version
        lst_party-_active = abap_undefined.
      ELSE.
        lst_party-_active = abap_true.
      ENDIF.

      lst_partylist-_party = lst_party.
      APPEND lst_partylist TO lst_routty_par-_party_list.
      mi_entry_counter = mi_entry_counter + 1.
    ENDLOOP.

    IF lst_routty_par-_party_list IS NOT INITIAL.
      mi_batch_counter = mi_batch_counter + 1.
    ELSE.
      CONTINUE.
    ENDIF.
    post_party( EXPORTING  ist_routty_par = lst_routty_par
                EXCEPTIONS OTHERS         = 0 ).
  ENDWHILE.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                               ii_batch_count = mi_batch_counter ).

ENDMETHOD.
METHOD set_dimension.

  DATA: is_name TYPE string.
  FIELD-SYMBOLS: <data> TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting.

  CHECK NOT mt_sel_comp_codes IS INITIAL.
  CHECK mo_http_client IS BOUND.
  set_append( ib_delete = ib_delete ).
*   add/modify entries
  is_name = ic_name.
  LOOP AT ct_data ASSIGNING <data>.

    extend_accounting_md( EXPORTING is_type        = is_name
                          CHANGING  cst_accounting = <data> ).

  ENDLOOP.

  post_accounting_md( it_accounting = ct_data
                      is_type       = is_name ).

ENDMETHOD.
METHOD set_glaccounts.

  DATA: lt_saknr TYPE STANDARD TABLE OF gl_acct_cc,
        ls_skat  TYPE skat,
        lst_acc  TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting,
        lt_acc   TYPE zdyn_cl_rest_tools_routty_data=>tt_accounting.
  FIELD-SYMBOLS: <gl_acct_cc> TYPE gl_acct_cc.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_saknr IS INITIAL.
  CHECK mo_http_client IS BOUND.

* add/modify entries
  set_append( ib_delete = ib_delete ).

  CLEAR: lt_saknr, lt_acc.

  zdyn_cl_bapi=>mo->get_gl_accounts( EXPORTING it_sel_opt        = it_sel_saknr
                                               it_sel_comp_codes = mt_sel_comp_codes
                                     IMPORTING et_gl_accounts    = lt_saknr ).
  CLEAR mi_entry_counter.
  LOOP AT lt_saknr ASSIGNING <gl_acct_cc>.
    CLEAR: ls_skat, lst_acc.
    zdyn_cl_bapi=>mo->get_gl_account_details( EXPORTING ic_chart_of_accounts = <gl_acct_cc>-ktopl
                                                        ic_gl_account        = <gl_acct_cc>-saknr
                                                        it_sel_langu         = mt_sel_langu
                                              IMPORTING est_details          = ls_skat ).
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <gl_acct_cc>-saknr
      IMPORTING
        output = <gl_acct_cc>-saknr.
    lst_acc-value = <gl_acct_cc>-saknr.
    lst_acc-description = ls_skat-txt50.
    lst_acc-corporategroupid = <gl_acct_cc>-bukrs.

    extend_accounting_md( EXPORTING is_type        = con_type_glaccount
                          CHANGING  cst_accounting = lst_acc ).

    APPEND lst_acc TO lt_acc.
    mi_entry_counter = mi_entry_counter + 1.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  post_accounting_md( it_accounting = lt_acc
                      is_type       = con_type_glaccount ).

ENDMETHOD.
METHOD set_goods_receipt.

  DATA: ls_path          TYPE string,
        ls_json          TYPE string,
        ls_xml           TYPE string,
        lst_mapping      TYPE ys_name_mapping,
        lc_vendor        TYPE lifnr,
        lc_po_item       TYPE ebelp,
        lc_mat_doc       TYPE mblnr,
        ls_dn            TYPE zdyn_cl_rest_tools_routty_data=>ty_dn_header,
        ls_dnitem        TYPE zdyn_cl_rest_tools_routty_data=>ty_dn_line,
        ls_dn_lines      TYPE zdyn_cl_rest_tools_routty_data=>ty_dn_lines,
        ls_dn_master     TYPE zdyn_cl_rest_tools_routty_data=>ty_dn_masterdata,
        ls_dn_masterlist TYPE zdyn_cl_rest_tools_routty_data=>ty_dn_masterdatalist,
        ls_routty_dn     TYPE zdyn_cl_rest_tools_routty_data=>ty_routty_dn.
  FIELD-SYMBOLS: <po_item> TYPE bapiekpo,
                 <po_hist> TYPE bapiekbe.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_po_hist IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CONCATENATE con_masterdata con_goodsreceipt INTO ls_path.
  set_new_rel_url( is_path = ls_path ).

  CLEAR: ls_dn_master, ls_dn_masterlist, ls_routty_dn, lc_mat_doc.

  CLEAR mi_entry_counter.
  LOOP AT it_po_hist ASSIGNING <po_hist>.
*   fill item lines
    CLEAR ls_dnitem.
    UNASSIGN <po_item>.
    IF lc_mat_doc <> <po_hist>-mat_doc.

      IF lc_mat_doc IS NOT INITIAL.
*    start a new doc
        ls_dn_masterlist-_goods_receipt_master_data = ls_dn_master.
        APPEND ls_dn_masterlist TO ls_routty_dn-_dn_mdlist.
        mi_entry_counter = mi_entry_counter + 1.
        CLEAR: ls_dn_master, ls_dn.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = ist_po_header-vendor
        IMPORTING
          output = lc_vendor.

*  now fill the goods receipt header data
      ls_dn-_document_reference = <po_hist>-mat_doc.
      ls_dn-_extra_reference = <po_hist>-ref_doc_no.
      ls_dn-_document_date = write_date( id_date = <po_hist>-pstng_date ).
      ls_dn-_document_type = <po_hist>-move_type.
      ls_dn-_order_reference = ist_po_header-po_number.
*      ls_dn-_header_text1 = ls_po_header-???.
*      ls_dn-_header_text2 = ls_po_header-???.
      ls_dn-_document_status = 'Open'.
      ls_dn-_supplier_name = ist_po_header-vend_name.
      ls_dn-_supplier_number = lc_vendor.
      ls_dn-_buyer_number = ist_po_header-co_code.

      ls_dn_master-_goods_receipt_header = ls_dn.


      lc_mat_doc = <po_hist>-mat_doc.

    ENDIF.

    READ TABLE it_po_item WITH KEY po_item = <po_hist>-po_item
       ASSIGNING <po_item>.
    CHECK <po_item> IS ASSIGNED.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <po_hist>-po_item
      IMPORTING
        output = lc_po_item.

    ls_dnitem-_line_id = <po_hist>-matdoc_itm.
    ls_dnitem-_order_line_id = lc_po_item.
    ls_dnitem-_order_reference = ist_po_header-po_number.
    ls_dnitem-_extra_reference = <po_hist>-mat_doc.
    ls_dnitem-_article_number_supplier = <po_item>-vend_mat.
    ls_dnitem-_article_number_buyer = <po_item>-material.
    ls_dnitem-_standard_article_number = <po_item>-ean_upc.
    ls_dnitem-_article_description = <po_item>-short_text.

*        ls_poitem-_quantity = <po_item>-quantity.
    ls_dnitem-_quantity = write_unit_to_string(
                            id_quantity = <po_hist>-quantity
                            id_unit     = <po_item>-unit ).
    ls_dnitem-_unit_code = <po_item>-unit.

    ls_dn_lines-_goods_receipt_line = ls_dnitem.
    APPEND ls_dn_lines TO ls_dn_master-_goods_receipt_lines.
  ENDLOOP.

*    add the last doc
  ls_dn_masterlist-_goods_receipt_master_data = ls_dn_master.
  APPEND ls_dn_masterlist TO ls_routty_dn-_dn_mdlist.
  mi_entry_counter = mi_entry_counter + 1.

  ls_json = serialize_to_json( ist_data       = ls_routty_dn
                               ic_compress    = abap_false
                               ic_pretty_name = con_camel_case ).

  transform_json_to_xml( EXPORTING  is_xml      = ls_json
                                    ic_xslt     = con_xslt_json
                         IMPORTING  es_xml      = ls_xml
                         EXCEPTIONS OTHERS      = 1 ).
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  call_http_post( EXPORTING is_input = ls_xml ).

  set_response_message( ).

ENDMETHOD.
METHOD set_orders.

  DATA: lt_orders      TYPE zdyn_lstr_orders,
        lst_order      LIKE LINE OF lt_orders,
        lst_acc        TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting,
        lt_acc         TYPE zdyn_cl_rest_tools_routty_data=>tt_accounting,
        ld_change_date LIKE id_change_date.

  zdyn_cl_msg=>add_to_call_stack( ).

  zdyn_cl_bapi=>mo->get_orders( EXPORTING it_sel_opt        = it_sel_opt
                                          it_sel_comp_codes = mt_sel_comp_codes
                                IMPORTING et_orders         = lt_orders ).
  IF lt_orders IS INITIAL.
    RETURN.
  ENDIF.

  IF NOT id_change_date IS INITIAL.
    ld_change_date = id_change_date.
    IF ld_change_date = sy-datlo.
      ld_change_date = sy-datlo - 1.
    ENDIF.
  ENDIF.

  CLEAR mi_entry_counter.
  LOOP AT lt_orders INTO lst_order.
    IF ld_change_date IS NOT INITIAL AND lst_order-erdat < ld_change_date AND lst_order-aedat < ld_change_date.
      CONTINUE.
    ENDIF.
    CHECK lst_order-loekz IS INITIAL.
    lst_acc-value             = lst_order-aufnr.
    lst_acc-description       = lst_order-ktext.
    lst_acc-corporategroupid  = lst_order-bukrs.
    APPEND lst_acc TO lt_acc.
    mi_entry_counter = mi_entry_counter + 1.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  IF lt_acc IS INITIAL.
    RETURN.
  ENDIF.

  set_dimension( EXPORTING ib_delete   = ib_delete
                           ic_name     = ic_dimension
                 CHANGING  ct_data     = lt_acc ).

ENDMETHOD.
METHOD set_paymentterms.

  DATA: lt_t052 TYPE STANDARD TABLE OF t052,
        lt_text TYPE STANDARD TABLE OF ttext,
        li_len  TYPE i,
        lst_acc TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting,
        lt_acc  TYPE zdyn_cl_rest_tools_routty_data=>tt_accounting.
  FIELD-SYMBOLS:  <t052>         TYPE t052,
                  <text>         TYPE ttext,
                  <st_comp_code> LIKE LINE OF mt_sel_comp_codes.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_zterm IS INITIAL.
  CHECK NOT mt_sel_comp_codes IS INITIAL.
  CHECK mo_http_client IS BOUND.

* add/modify entries
  set_append( ib_delete = ib_delete ).

  zdyn_cl_bapi=>mo->get_payment_terms( EXPORTING it_sel_opt = it_sel_zterm
                                       IMPORTING et_terms   = lt_t052 ).

  CHECK NOT lt_t052 IS INITIAL.
  SORT lt_t052 BY zterm.
  DELETE ADJACENT DUPLICATES FROM lt_t052 COMPARING zterm.

  CLEAR mi_entry_counter.
  LOOP AT lt_t052 ASSIGNING <t052>.
    CLEAR: lt_text, lst_acc.

    lst_acc-value = <t052>-zterm.

    zdyn_cl_bapi=>mo->fi_print_zterm( EXPORTING   ic_zterm       = <t052>-zterm
                                                  it_sel_langu   = mt_sel_langu
                                      IMPORTING   et_texts       = lt_text
                                      EXCEPTIONS  error_occurred = 0 ).
    LOOP AT lt_text ASSIGNING <text>.
      IF sy-tabix = 1.
        lst_acc-description = <text>-text1.
      ELSE.
        CONCATENATE lst_acc-description ' | ' <text>-text1
               INTO lst_acc-description.
      ENDIF.
    ENDLOOP.

    LOOP AT mt_sel_comp_codes ASSIGNING <st_comp_code>.
      lst_acc-corporategroupid = <st_comp_code>-low.

      extend_accounting_md( EXPORTING is_type        = con_type_paymentterms
                            CHANGING  cst_accounting = lst_acc ).

      li_len = strlen( lst_acc-description ).
      IF li_len > 255.
        lst_acc-description = lst_acc-description(255).
      ENDIF.

      APPEND lst_acc TO lt_acc.
      mi_entry_counter = mi_entry_counter + 1.
    ENDLOOP.

  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  post_accounting_md( it_accounting = lt_acc
                      is_type       = con_type_paymentterms ).

ENDMETHOD.
METHOD set_purchase_orders.

  DATA: ls_path          TYPE string,
        ls_json          TYPE string,
        ls_xml           TYPE string,
        lst_mapping      TYPE ys_name_mapping,
        ls_po_header     TYPE bapiekkol,
        ls_po_item_hist  TYPE bapiekbes,
        ld_po_value      TYPE netwr,
        lc_po_item       TYPE ebelp,
        lt_po_items      TYPE STANDARD TABLE OF bapiekpo,
        lt_po_item_hist  TYPE STANDARD TABLE OF bapiekbes,
        lt_po_history    TYPE STANDARD TABLE OF bapiekbe,
        ls_po            TYPE zdyn_cl_rest_tools_routty_data=>ty_po_header,
        ls_poitem        TYPE zdyn_cl_rest_tools_routty_data=>ty_po_line,
        ls_po_lines      TYPE zdyn_cl_rest_tools_routty_data=>ty_po_lines,
        ls_po_master     TYPE zdyn_cl_rest_tools_routty_data=>ty_po_masterdata,
        ls_po_masterlist TYPE zdyn_cl_rest_tools_routty_data=>ty_po_masterdatalist,
        ls_routty_po     TYPE zdyn_cl_rest_tools_routty_data=>ty_routty_po.
  FIELD-SYMBOLS: <ebeln>   TYPE ebeln,
                 <po_item> TYPE bapiekpo.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_ebeln IS INITIAL.
  CHECK mo_http_client IS BOUND.

  set_append( ib_delete = ib_delete ).

  CONCATENATE con_masterdata con_purchaseorders INTO ls_path.

  CLEAR: ls_po_master, ls_po_masterlist, ls_routty_po.
  lst_mapping-abap = '_po_mdlist'.
  lst_mapping-json = 'PurchaseOrderMasterDataList'.
  add_json_mapping( is_mapping = lst_mapping ).

  lst_mapping-abap = '_dn_mdlist'.
  lst_mapping-json = 'GoodsReceiptMasterDataList'.
  add_json_mapping( is_mapping = lst_mapping ).

  CLEAR mi_entry_counter.
*   add/modify entries
  LOOP AT it_ebeln ASSIGNING <ebeln>.
    CLEAR: ls_po_header, lt_po_items, ld_po_value, ls_po_master, ls_po_lines.
    zdyn_cl_bapi=>mo->bapi_po_getdetail( EXPORTING ic_po_number           = <ebeln>
                                         IMPORTING es_header              = ls_po_header
                                                   et_items               = lt_po_items
                                                   et_item_history        = lt_po_history
                                                   et_item_history_totals = lt_po_item_hist ).
    CHECK NOT ls_po_header IS INITIAL.
    LOOP AT lt_po_items ASSIGNING <po_item>.
*   fill item lines
      CLEAR ls_poitem.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = <po_item>-po_item
        IMPORTING
          output = lc_po_item.
      ls_poitem-_line_id = lc_po_item.
      ls_poitem-_extra_reference = <po_item>-po_number.
      ls_poitem-_article_number_supplier = <po_item>-vend_mat.
      ls_poitem-_article_number_buyer = <po_item>-material.
      ls_poitem-_standard_article_number = <po_item>-ean_upc.
      ls_poitem-_article_description = <po_item>-short_text.
*        ls_poitem-_quantity = <po_item>-quantity.
      ls_poitem-_quantity = write_unit_to_string(
                              id_quantity = <po_item>-quantity
                              id_unit     = <po_item>-unit ).
      ls_poitem-_unit_code = <po_item>-unit.
      ls_poitem-_price = <po_item>-net_price.
*        ls_poitem-_discount_amount = <po_item>-.
*        ls_poitem-_discount_rate = <po_item>-.
      ls_poitem-_line_amount = <po_item>-net_value.
      ld_po_value = ld_po_value + <po_item>-net_value.
*        ls_poitem-_status = <po_item>-.
*        ls_poitem-_gl_account = <po_item>-.
*        ls_poitem-_costcenter = <po_item>-.
      ls_poitem-_vat_code = <po_item>-tax_code.
* now read the history
      CLEAR ls_po_item_hist.
      READ TABLE lt_po_item_hist WITH KEY po_item = <po_item>-po_item
                                 INTO ls_po_item_hist.
      IF sy-subrc = 0.
        ls_poitem-_invoiced_quantity = write_unit_to_string(
                                id_quantity = ls_po_item_hist-iv_qty
                                id_unit     = <po_item>-unit ).
*          ls_poitem-_invoiced_quantity = ls_po_item_hist-iv_qty.
        ls_poitem-_invoiced_amount = ls_po_item_hist-val_iv_for.
      ELSE.
        ls_poitem-_invoiced_quantity = '0'.
        ls_poitem-_invoiced_amount = 0.
      ENDIF.
      extend_po_lines( EXPORTING ist_po_header    = ls_po_header
                                 ist_po_item      = <po_item>
                                 ist_po_item_hist = ls_po_item_hist
                       CHANGING  cst_po_line      = ls_poitem ).

      ls_po_lines-_purchase_order_line = ls_poitem.
      APPEND ls_po_lines TO ls_po_master-_purchase_order_lines.
    ENDLOOP.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_po_header-vendor
      IMPORTING
        output = ls_po_header-vendor.
*  now fill the complete po data
    ls_po-_document_reference = ls_po_header-po_number.
    ls_po-_extra_reference = ls_po_header-our_ref.
    ls_po-_document_date = write_date( id_date = ls_po_header-doc_date ).
*      ls_po-_document_date = ls_po_header-doc_date.
    ls_po-_document_type = ls_po_header-doc_type.
*      ls_po-document_sub_type = ls_po_header-???.
    ls_po-_currency = ls_po_header-currency_iso.
    ls_po-_total_net_amount = ld_po_value.
*      ls_po-_total_vat_amount = ls_po_header-???.
    ls_po-_total_gross_amount = ld_po_value.
*      ls_po-_total_discount_amount = ls_po_header-???.
    ls_po-_order_reference = ls_po_header-ref_1.
*      ls_po-_header_text1 = ls_po_header-???.
*      ls_po-_header_text2 = ls_po_header-???.
    ls_po-_start_date = write_date( id_date = ls_po_header-vper_start ).
    ls_po-_end_date = write_date( id_date = ls_po_header-vper_end ).
*      ls_po-_document_raw_id = ls_po_header-po_number.
    ls_po-_document_status = 'Open'.
    ls_po-_supplier_name = ls_po_header-vend_name.
    ls_po-_supplier_number = ls_po_header-vendor.
*      ls_po-_buyer_name = ls_po_header-vend_name.
    ls_po-_buyer_number = ls_po_header-co_code.

    ls_po_master-_purchase_order_header = ls_po.


    ls_po_masterlist-_purchase_order_master_data = ls_po_master.
    APPEND ls_po_masterlist TO ls_routty_po-_po_mdlist.
    mi_entry_counter = mi_entry_counter + 1.

* potentially send goods receipt
    IF ib_gm = abap_true.
      DELETE lt_po_history WHERE hist_type <> 'E'.
      IF NOT lt_po_history IS INITIAL.
        SORT lt_po_history BY mat_doc matdoc_itm.
        set_goods_receipt( it_po_hist    = lt_po_history
                           it_po_item    = lt_po_items
                           ist_po_header = ls_po_header ).
      ENDIF.
    ENDIF.

  ENDLOOP.

  ls_json = serialize_to_json( ist_data       = ls_routty_po
                               ic_compress    = abap_false
                               ic_pretty_name = con_camel_case ).
  transform_json_to_xml( EXPORTING  is_xml      = ls_json
                                    ic_xslt     = con_xslt_json
                         IMPORTING  es_xml      = ls_xml
                         EXCEPTIONS OTHERS      = 1 ).
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  set_new_rel_url( is_path = ls_path ).
  call_http_post( EXPORTING is_input = ls_xml ).

  set_response_message( ).

ENDMETHOD.
METHOD set_response_message.

  DATA: lc_msgty      TYPE sy-msgty,
        li_len        TYPE i,
        lc_doc_id     TYPE char50,
        lc_msgv1      TYPE sy-msgv1,
        lc_msgv2      TYPE sy-msgv1,
        lc_msgv3      TYPE sy-msgv1,
        lc_msgv4      TYPE sy-msgv1,
        ls_msg        TYPE string,
        ls_number     TYPE string,
        lst_response  TYPE zdyn_cl_rest_routty_exp_data=>ty_response,
        lst_response2 TYPE zdyn_cl_rest_routty_exp_data=>ty_response2,
        lst_response3 TYPE zdyn_cl_rest_routty_exp_data=>ty_response3,
        li_pos1       TYPE i,
        li_pos2       TYPE i.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF ms_result IS INITIAL.
    zdyn_cl_msg=>add_sysmsg( ).
    IF ic_doc_id IS NOT INITIAL.
      WRITE ic_doc_id TO lc_doc_id LEFT-JUSTIFIED.
      CONCATENATE 'Routty ID:' lc_doc_id INTO lc_msgv1 SEPARATED BY space.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                      ic_msgid    = 'ZDYN_WS'
                                      ic_msgno    = '000'
                                      ic_msgv1    = lc_msgv1 ).
*   message s000(zdyn_ws) with space space space space.
    ELSEIF ii_http_status >= 300.
      WRITE ii_http_status TO lc_msgv1 LEFT-JUSTIFIED.
      IF ic_doc_number IS NOT INITIAL.
        CONCATENATE lc_msgv1 ' (doc: ' ic_doc_number INTO lc_msgv1 SEPARATED BY space.
        CONCATENATE lc_msgv1 ')' INTO lc_msgv1.
      ENDIF.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'E'
                                      ic_msgid    = '1S'
                                      ic_msgno    = '437'
                                      ic_msgv1    = lc_msgv1 ).
*     message s437(1s) with space.
    ENDIF.
    RETURN.
  ENDIF.

  CLEAR: li_len, lc_msgty, lc_msgv1, lc_msgv2, lc_msgv3, lc_msgv4, lst_response.
  deserialize_from_json( EXPORTING is_json  = ms_result
                         CHANGING  cst_data = lst_response ).
  IF lst_response IS NOT INITIAL.
    IF lst_response-success = abap_true.
      lc_msgty = 'S'.
    ELSE.
      lc_msgty = 'E'.
    ENDIF.
    ls_msg = lst_response-message.
  ELSE.
    deserialize_from_json( EXPORTING is_json  = ms_result
                           CHANGING  cst_data = lst_response2 ).
    IF lst_response2 IS NOT INITIAL.
      IF lst_response2-errormessage IS INITIAL.
        IF lst_response2-routtyid IS NOT INITIAL.
          lc_msgty = 'S'.
          CONCATENATE 'Routty ID:' lst_response2-routtyid INTO ls_msg SEPARATED BY space.
        ELSEIF ic_doc_id IS NOT INITIAL.
          lc_msgty = 'E'.
          WRITE ic_doc_id TO lc_doc_id LEFT-JUSTIFIED.
          CONCATENATE 'Routty ID:' lc_doc_id INTO ls_msg SEPARATED BY space.
        ENDIF.
      ELSE.
        lc_msgty = 'E'.
        ls_msg = lst_response2-errormessage.
      ENDIF.
    ELSE.
      deserialize_from_json( EXPORTING is_json  = ms_result
                             CHANGING  cst_data = lst_response3 ).
      IF lst_response3 IS NOT INITIAL.
        IF lst_response3-detail IS NOT INITIAL.
          ls_msg = lst_response3-detail.
          lc_msgty = 'E'.
        ELSEIF lst_response3-title IS NOT INITIAL.
          ls_msg = lst_response3-title.
          lc_msgty = 'E'.
        ENDIF.
      ELSE.
        FIND FIRST OCCURRENCE OF '<Message>' IN ms_result MATCH OFFSET li_pos1.
        FIND FIRST OCCURRENCE OF '</Message>' IN ms_result MATCH OFFSET li_pos2.
        IF li_pos1 > 0 AND li_pos2 > li_pos1.
          li_pos1 = li_pos1 + 9.
          li_len = li_pos2 - li_pos1.
          ls_msg = ms_result+li_pos1(li_len).
          lc_msgty = 'E'.
        ELSEIF ii_http_status >= 300.
          WRITE ii_http_status TO lc_msgv1 LEFT-JUSTIFIED.
          IF ic_doc_number IS NOT INITIAL.
            CONCATENATE lc_msgv1 ' (doc: ' ic_doc_number INTO lc_msgv1 SEPARATED BY space.
            CONCATENATE lc_msgv1 ')' INTO lc_msgv1.
          ENDIF.
          zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'E'
                                          ic_msgid    = '1S'
                                          ic_msgno    = '437'
                                          ic_msgv1    = lc_msgv1 ).
*         message s437(1s) with space.
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  IF ls_msg IS NOT INITIAL.
    zdyn_cl_msg=>transform_long_param( EXPORTING is_param = ls_msg
                                       IMPORTING ec_msgv1 = lc_msgv1
                                                 ec_msgv2 = lc_msgv2
                                                 ec_msgv3 = lc_msgv3
                                                 ec_msgv4 = lc_msgv4 ).

*   We might need the number in case there is none in the return message from Routty
    IF ic_doc_number IS NOT INITIAL.
      IF ls_msg IS NOT INITIAL.
        ls_number = '; '.
      ENDIF.
      CONCATENATE ls_number 'Document:'(001) ic_doc_number INTO ls_number SEPARATED BY space.
      IF lc_msgv2 IS INITIAL.
        lc_msgv2 = ls_number.
      ELSEIF lc_msgv3 IS INITIAL.
        lc_msgv3 = ls_number.
      ELSEIF lc_msgv4 IS INITIAL.
        lc_msgv4 = ls_number.
      ENDIF.
    ENDIF.

    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = lc_msgty
                                    ic_msgid    = 'ZDYN_WS'
                                    ic_msgno    = '040'
                                    ic_msgv1    = lc_msgv1
                                    ic_msgv2    = lc_msgv2
                                    ic_msgv3    = lc_msgv3
                                    ic_msgv4    = lc_msgv4 ).
*   message s040(zdyn_ws) with space space space space.
  ELSE.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'PQ'
                                    ic_msgno    = '612' ).
*   message e612(pq).
  ENDIF.

ENDMETHOD.
METHOD set_suppliers.

  DATA: li_return_code     TYPE i,
        lt_vmd_all         TYPE zdyn_lstr_vmd,
        lt_vmd             LIKE lt_vmd_all,
        lt_messages        TYPE bapiret2_t,
        ld_date            LIKE id_date,
        li_remaining       TYPE i,
        li_copied          TYPE i,
        lb_delete          TYPE abap_bool,
        lt_bankaccounts    TYPE zdyn_cl_rest_tools_routty_data=>tt_partybanks,
        lst_metadata       TYPE zdyn_cl_rest_tools_routty_data=>ty_metadata,
        lst_metadata_bank  TYPE zdyn_cl_rest_tools_routty_data=>ty_metadata_bank,
        lst_type           TYPE zdyn_cl_rest_tools_routty_data=>ty_type,
        lst_partyregno     TYPE zdyn_cl_rest_tools_routty_data=>ty_partyregno,
        lst_partyregs      TYPE zdyn_cl_rest_tools_routty_data=>ty_partyregs,
        lst_party          TYPE zdyn_cl_rest_tools_routty_data=>ty_party,
        lst_party_bank     TYPE zdyn_cl_rest_tools_routty_data=>ty_party_bank,
        lst_partylist      TYPE zdyn_cl_rest_tools_routty_data=>ty_partylist,
        lst_partylist_bank TYPE zdyn_cl_rest_tools_routty_data=>ty_partylist_bank,
        lst_routty_par     TYPE zdyn_cl_rest_tools_routty_data=>ty_routty_partylist,
        lst_routty_bank    TYPE zdyn_cl_rest_tools_routty_data=>ty_routty_partbankaccountlist.
  FIELD-SYMBOLS: <vmd> TYPE zdyn_ws_vmd.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_lifnr IS INITIAL.
  CHECK mo_http_client IS BOUND.

  IF id_date IS NOT INITIAL.
    ld_date = id_date.
    IF ld_date = sy-datlo.
      ld_date = sy-datlo - 1.
    ENDIF.
  ENDIF.

* add/modify entries
  lb_delete = ib_delete.

  zdyn_cl_bapi=>mo->get_vendors( EXPORTING it_sel_opt        = it_sel_lifnr
                                           it_sel_comp_codes = mt_sel_comp_codes
                                 IMPORTING et_vendors        = lt_vmd_all ).
  remove_inactive_suppliers( EXPORTING id_date          = id_date
                                       ib_take_inactive = ib_take_inactive
                             CHANGING  ct_suppliers     = lt_vmd_all ).
  CHECK lt_vmd_all IS NOT INITIAL.

  CLEAR: mi_entry_counter, mi_batch_counter.
  li_remaining = lines( lt_vmd_all ).
  WHILE li_remaining > 0.
*   if this is already a consecutive iteration, switch to the 'modify' mode
    IF ib_delete = abap_true AND li_copied > 0.
      lb_delete = abap_false.
    ENDIF.
    CLEAR: lt_vmd, li_copied, lst_routty_par, lst_routty_bank.

    IF li_remaining < mi_bulk_size.
      lt_vmd = lt_vmd_all.
      li_remaining = 0.
    ELSE.
      LOOP AT lt_vmd_all ASSIGNING <vmd>.
        APPEND <vmd> TO lt_vmd.
        DELETE lt_vmd_all.
        li_copied = li_copied + 1.
        IF li_copied >= mi_bulk_size.
          li_remaining = li_remaining - li_copied.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT lt_vmd ASSIGNING <vmd>.
*     now we check date of last change
      IF NOT ld_date IS INITIAL.
        IF ld_date > <vmd>-erdat.
          CHECK abap_true = zdyn_cl_bapi=>mo->is_object_modified( ic_object_id    = <vmd>-lifnr
                                                                  ic_object_class = 'KRED'
                                                                  id_date         = ld_date ).
        ENDIF.
      ENDIF.
      CLEAR: lst_party, lst_partyregno, lst_partyregs, lst_metadata, lst_type.
      CLEAR: lst_party_bank, lt_bankaccounts, lst_metadata_bank.

      IF ib_bankdata = abap_true.
        lt_bankaccounts = fill_vendor_bankaccount( ist_vendor = <vmd> ).
        IF lt_bankaccounts IS INITIAL.
          APPEND INITIAL LINE TO lt_bankaccounts.
        ENDIF.
        lst_metadata_bank-_party_bank_accounts = lt_bankaccounts.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = <vmd>-lifnr
        IMPORTING
          output = <vmd>-lifnr.

      IF <vmd>-stceg IS NOT INITIAL.
        lst_partyregno-_number = <vmd>-stceg.
        lst_partyregno-_scheme = 'VAT'.
        lst_partyregs-_party_registration_number = lst_partyregno.
      ENDIF.
      APPEND lst_partyregs TO lst_metadata-_party_registration_numbers.
      lst_metadata-_number              = <vmd>-lifnr.
      lst_metadata-_corporate_group_i_d = <vmd>-bukrs.
*      lst_metadata-_is_masterdata       = abap_true.
      lst_metadata-_name1               = <vmd>-name1.
*      lst_metadata-_name2               = <vmd>-name2.
      lst_metadata-_address1            = <vmd>-stras.
*      lst_metadata-street              = <vmd>-street.
*      lst_metadata-_house_num           = <vmd>-house_num.
      lst_metadata-_postal_code         = <vmd>-pstlz.
      lst_metadata-_po_box              = <vmd>-pfach.
      lst_metadata-_city                = <vmd>-ort01.
      lst_metadata-_state               = <vmd>-regio.
      lst_metadata-_country_code        = <vmd>-land1.
      lst_metadata-_telephone           = <vmd>-telf1.
      lst_metadata-_payment_terms       = <vmd>-zterm.
      lst_metadata-_payment_method      = <vmd>-zwels.
      lst_metadata-_email_address       = zdyn_cl_bapi=>mo->get_email_from_adr6( ic_adrnr = <vmd>-adrnr ).

      extend_metadata( EXPORTING ist_vendor   = <vmd>
                       CHANGING  cst_metadata = lst_metadata ).

      lst_type-_name      = 'Partner'.
      lst_party-_type     = lst_type.
      lst_party-_metadata = lst_metadata.
      IF NOT <vmd>-loevm IS INITIAL OR
         NOT <vmd>-sperr IS INITIAL.
*       will be serialized as 'false' in JSON, also in compressed version
        lst_party-_active = abap_undefined.
      ELSEIF NOT mt_sel_comp_codes IS INITIAL
         AND ( NOT <vmd>-bukrs_loevm IS INITIAL OR
               NOT <vmd>-bukrs_sperr IS INITIAL ).
*       will be serialized as 'false' in JSON, also in compressed version
        lst_party-_active = abap_undefined.
      ELSE.
        lst_party-_active = abap_true.
      ENDIF.

      lst_partylist-_party = lst_party.
      APPEND lst_partylist TO lst_routty_par-_party_list.

      IF ib_bankdata = abap_true.
*       keys
        lst_metadata_bank-_number              = lst_metadata-_number.
        lst_metadata_bank-_corporate_group_i_d = lst_metadata-_corporate_group_i_d.

        extend_metadata_bank( EXPORTING ist_vendor   = <vmd>
                              CHANGING  cst_metadata = lst_metadata_bank ).

        lst_party_bank-_metadata  = lst_metadata_bank.
        lst_partylist_bank-_party = lst_party_bank.
        APPEND lst_partylist_bank TO lst_routty_bank-_party_bank_account_list.
      ENDIF.

      mi_entry_counter = mi_entry_counter + 1.
    ENDLOOP.

    IF lst_routty_par-_party_list IS NOT INITIAL.
      mi_batch_counter = mi_batch_counter + 1.
    ELSE.
      CONTINUE.
    ENDIF.

    set_append( ib_delete = lb_delete ).
    post_party( EXPORTING  ist_routty_par = lst_routty_par
                EXCEPTIONS OTHERS         = 0 ).

    IF ib_bankdata = abap_true.
      set_append( ib_delete = ib_bankdata_del ).
      post_party( EXPORTING  ist_routty_par = lst_routty_bank
                             is_api_name    = con_partybanks
                  EXCEPTIONS OTHERS         = 0 ).
    ENDIF.
  ENDWHILE.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                               ii_batch_count = mi_batch_counter ).

ENDMETHOD.
METHOD set_vatcodes.

  DATA: lc_text1     TYPE t007s-text1,
        lt_tax_codes TYPE zdyn_cl_bapi=>yt_tax_codes,
        lst_acc      TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting,
        lt_acc       TYPE zdyn_cl_rest_tools_routty_data=>tt_accounting.
  FIELD-SYMBOLS: <st_tax> LIKE LINE OF lt_tax_codes.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT it_sel_mwskz IS INITIAL.
  CHECK NOT mt_sel_comp_codes IS INITIAL.
  CHECK mo_http_client IS BOUND.

* add/modify entries
  set_append( ib_delete = ib_delete ).

  zdyn_cl_bapi=>mo->get_tax_codes( EXPORTING it_sel_opt        = it_sel_mwskz
                                             it_sel_comp_codes = mt_sel_comp_codes
                                   IMPORTING et_tax_codes      = lt_tax_codes ).
  CLEAR mi_entry_counter.
  LOOP AT lt_tax_codes ASSIGNING <st_tax>.
    CHECK <st_tax>-tax_code IN it_sel_mwskz.
    CLEAR: lst_acc, lc_text1.
    lst_acc-value = <st_tax>-tax_code.
    zdyn_cl_bapi=>mo->get_tax_code_text( EXPORTING ic_tax_code  = <st_tax>-tax_code
                                                   ic_procedure = <st_tax>-procedure
                                                   it_sel_langu = mt_sel_langu
                                         IMPORTING ec_text      = lc_text1 ).
    lst_acc-description = lc_text1.
    lst_acc-corporategroupid = <st_tax>-comp_code.

    extend_accounting_md( EXPORTING is_type        = con_type_vatcode
                          CHANGING  cst_accounting = lst_acc ).

    APPEND lst_acc TO lt_acc.
    mi_entry_counter = mi_entry_counter + 1.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  post_accounting_md( it_accounting = lt_acc
                      is_type       = con_type_vatcode ).

ENDMETHOD.
METHOD set_wbs_elements.

  DATA: lt_wbs_elements TYPE zdyn_lstr_wbs_elements,
        lst_wbs_element LIKE LINE OF lt_wbs_elements,
        lst_acc         TYPE zdyn_cl_rest_tools_routty_data=>ty_accounting,
        lt_acc          TYPE zdyn_cl_rest_tools_routty_data=>tt_accounting,
        ld_change_date  LIKE id_change_date.

  zdyn_cl_msg=>add_to_call_stack( ).

  zdyn_cl_bapi=>mo->get_wbs_elements( EXPORTING it_sel_opt        = it_sel_opt
                                                it_sel_comp_codes = mt_sel_comp_codes
                                      IMPORTING et_wbs_elements   = lt_wbs_elements ).
  IF lt_wbs_elements IS INITIAL.
    RETURN.
  ENDIF.

  IF NOT id_change_date IS INITIAL.
    ld_change_date = id_change_date.
    IF ld_change_date = sy-datlo.
      ld_change_date = sy-datlo - 1.
    ENDIF.
  ENDIF.

  CLEAR mi_entry_counter.
  LOOP AT lt_wbs_elements INTO lst_wbs_element.
    IF ld_change_date IS NOT INITIAL AND lst_wbs_element-erdat < ld_change_date AND lst_wbs_element-aedat < ld_change_date.
      CONTINUE.
    ENDIF.
    lst_acc-value             = lst_wbs_element-posid.
    lst_acc-description       = lst_wbs_element-post1.
    lst_acc-corporategroupid  = lst_wbs_element-pbukr.
    lst_acc-field1            = lst_wbs_element-pspnr.
    APPEND lst_acc TO lt_acc.
    mi_entry_counter = mi_entry_counter + 1.
  ENDLOOP.

  zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

  IF lt_acc IS INITIAL.
    RETURN.
  ENDIF.

  set_dimension( EXPORTING ib_delete   = ib_delete
                           ic_name     = ic_dimension
                 CHANGING  ct_data     = lt_acc ).

ENDMETHOD.
METHOD transfer_data_to_pd.

  DATA: lst_map     TYPE zdyn_routty_tmap,
        lr_document TYPE REF TO data.
  FIELD-SYMBOLS: <record>   TYPE any,
                 <document> TYPE any,
                 <tab>      TYPE ANY TABLE.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mst_config-imp_type = con_imp_type_pd.

  lr_document = mo_pdiv_document->get_container( ).
  ASSIGN lr_document->* TO <document>.

* handover header fields
  add_extdata( is_data = <document>
               ic_node = con_level_header ).

* item table
  ASSIGN COMPONENT 'TAB_ITEM' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_item
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

* account table
  ASSIGN COMPONENT 'TAB_ACCOUNT' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_account
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

* tax table
  ASSIGN COMPONENT 'TAB_TAX' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_tax
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

* custom table
  ASSIGN COMPONENT 'TAB_CUSTOM' OF STRUCTURE <document> TO <tab>.
  IF sy-subrc = 0 AND <tab> IS ASSIGNED.
    LOOP AT <tab> ASSIGNING <record>.
      add_extdata( is_data   = <record>
                   ic_node   = con_level_custom
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

  lst_map = get_pd_mapid( ).

  IF lst_map-obj = zdyn_if_rest_data=>con_pdiv_obj.
*   processlog table
    ASSIGN COMPONENT 'TAB_PROCESSLOG' OF STRUCTURE <document> TO <tab>.
    IF sy-subrc = 0 AND <tab> IS ASSIGNED.
      LOOP AT <tab> ASSIGNING <record>.
        add_extdata( is_data   = <record>
                     ic_node   = con_level_processlog
                     ic_parent = con_level_header ).
      ENDLOOP.
    ENDIF.
  ENDIF.

  check_before_trans_data_to_pd( EXPORTING it_extdata       = mt_extdata
                                 IMPORTING et_messages      = et_messages
                                           eb_ok            = eb_ok
                                           eb_skip_feedback = eb_skip_feedback ).

  IF eb_ok = abap_false OR eb_skip_feedback = abap_true.
    CLEAR mt_extdata.
    RETURN.
  ENDIF.

  eb_ok = call_pd_rfc( ic_obj   = lst_map-obj
                       ic_mapid = lst_map-mapid ).

  CLEAR mt_extdata.

ENDMETHOD.
METHOD transfer_data_to_sap.

  zdyn_cl_msg=>add_to_call_stack( ).

*  needs to be implemented in a project (call any SAP BAPI ...)
*  use data from attributes MST_CONFIG, MST_PDIV_DOCUMENT
*  attachment in attribute table MR_ATTACHMENT->MT_ATTACHMENTS
*  input is the XML document from ROUTTY

ENDMETHOD.
METHOD transfer_data_to_sap_as_idoc.

  DATA: ls_xml       TYPE string,
        ls_addr      TYPE string,
        lst_edidc    TYPE edidc,
        lc_object_id TYPE saeobjid,
        lc_msgv1     TYPE sy-msgv1,
        lc_msgv2     TYPE sy-msgv2,
        lc_msgv3     TYPE sy-msgv3.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_document IS INITIAL.

  ls_xml = is_document.
  ls_addr = is_id.
  add_idoc_number( CHANGING cs_xml = ls_xml ).
  call_xml_to_idoc( EXPORTING  is_xml         = ls_xml
                               is_remote_addr = ls_addr
                    EXCEPTIONS OTHERS         = 1 ).
  IF sy-subrc <> 0.
    IF sy-msgid = 'EA' AND sy-msgno = '097'.
      sy-msgty = 'S'.
      eb_ok = abap_true.
    ENDIF.
    zdyn_cl_msg=>add_sysmsg( ).
  ELSE.
*   get created IDOC number
    zdyn_cl_bapi=>mo->get_idoc_control_record( EXPORTING is_external_doc_id = is_id
                                               IMPORTING es_record          = lst_edidc ).
    IF lst_edidc IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = lst_edidc-docnum
        IMPORTING
          output = lc_msgv1.
      lc_msgv2 = lst_edidc-rcvprn.
      lc_object_id = lst_edidc-docnum.
      archive_attachment_data( ic_sap_object = 'IDOC'
                               ic_object_id  = lc_object_id ).
    ENDIF.
*   we need a success message
    eb_ok = abap_true.
    lc_msgv3 = is_id.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = 'GJ'
                                    ic_msgno    = '859'
                                    ic_msgv1    = lc_msgv1
                                    ic_msgv2    = lc_msgv2
                                    ic_msgv3    = lc_msgv3 ).
*   message s859(gj) with space space space.
  ENDIF.

ENDMETHOD.
METHOD transform_iv_to_pd_document.

  DATA: lst_data  TYPE abap_trans_resbind.
  FIELD-SYMBOLS <st_data> TYPE any.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF is_root_node IS NOT INITIAL.
*   add segment only if it's not yet there
    READ TABLE ct_data TRANSPORTING NO FIELDS WITH KEY name = is_root_node.
    IF sy-subrc <> 0.
*     converted structure see template ZDYN_ROUTTY_IV_TO_PD xslt
      lst_data-name = is_root_node.
      lst_data-value = mo_pdiv_document->get_container( ).
      APPEND lst_data TO ct_data.
    ENDIF.
  ENDIF.

* send to PD
  transform_xml_to_data( EXPORTING  is_xml      = ms_result
                                    ic_xslt     = ic_xslt
                         IMPORTING  es_xml      = es_xml
                         CHANGING   cst_data    = ct_data
                         EXCEPTIONS OTHERS      = 1 ).
  CHECK sy-subrc = 0.

* take the data from the dynamic structure to the static one for compatibility reasons
  IF ct_data IS NOT INITIAL.
    ASSIGN lst_data-value->* TO <st_data>.
    zdyn_cl_system=>mo->move_corresponding_with_nested( EXPORTING ist_input  = <st_data>
                                                        CHANGING  cst_output = mst_pdiv_document ).
  ENDIF.

* in case the XML format was incorrect, the structure may be empty
  IF ct_data IS NOT INITIAL AND mst_pdiv_document IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'CE0'
                                    ic_msgno    = '408' ).
*   message e408(ce0).
    RETURN.
  ENDIF.

  eb_ok = abap_true.

ENDMETHOD.
