
class ZDYN_CL_JSON_PROCESSOR definition
  public
  create public .

public section.

  types:
    BEGIN OF yst_name_mapping,
        abap TYPE abap_compname,
        json TYPE string,
      END OF yst_name_mapping .
  types:
    yt_name_mappings TYPE HASHED TABLE OF yst_name_mapping WITH UNIQUE KEY abap .

  data MO_PROCESSOR type ref to OBJECT read-only .

  class-methods DESERIALIZE
    importing
      !IS_JSON type STRING
      !IC_PRETTY_NAME type CHAR1 default ZDYN_CL_JSON=>PRETTY_MODE-LOW_CASE
      !IT_MAPPINGS type YT_NAME_MAPPINGS optional
    changing
      !CST_DATA type DATA .
  class-methods SERIALIZE
    importing
      !IST_DATA type DATA
      !IC_COMPRESS type ABAP_BOOL default ABAP_TRUE
      !IC_PRETTY_NAME type CHAR1 default ZDYN_CL_JSON=>PRETTY_MODE-LOW_CASE
      !IT_MAPPINGS type YT_NAME_MAPPINGS optional
    returning
      value(ES_JSON) type STRING .
protected section.
private section.
endclass. "ZDYN_CL_JSON_PROCESSOR definition
class ZDYN_CL_JSON_PROCESSOR implementation.
METHOD deserialize.

  DATA: lo_processor TYPE REF TO object.

* Class /UI2/CL_JSON not always exists in the system
  TRY.
      CREATE OBJECT lo_processor TYPE ('/UI2/CL_JSON')
             EXPORTING
               pretty_name   = ic_pretty_name
               name_mappings = it_mappings.
    CATCH cx_root.
  ENDTRY.
  IF lo_processor IS INITIAL.
    CREATE OBJECT lo_processor TYPE zdyn_cl_json
      EXPORTING
        pretty_name   = ic_pretty_name
        name_mappings = it_mappings.
  ENDIF.

  TRY.
      CALL METHOD lo_processor->('DESERIALIZE_INT')
        EXPORTING
          json = is_json
        CHANGING
          data = cst_data.
    CATCH cx_sy_move_cast_error.                        "#EC NO_HANDLER
  ENDTRY.

ENDMETHOD.
METHOD serialize.

  DATA: lo_processor TYPE REF TO object.

* Class /UI2/CL_JSON not always exists in the system
  TRY.
      CREATE OBJECT lo_processor TYPE ('/UI2/CL_JSON')
             EXPORTING
               compress      = ic_compress
               pretty_name   = ic_pretty_name
               name_mappings = it_mappings.
    CATCH cx_root.
  ENDTRY.
  IF lo_processor IS INITIAL.
    CREATE OBJECT lo_processor TYPE zdyn_cl_json
      EXPORTING
        compress      = ic_compress
        pretty_name   = ic_pretty_name
        name_mappings = it_mappings.
  ENDIF.

  CALL METHOD lo_processor->('SERIALIZE_INT')
    EXPORTING
      data   = ist_data
    RECEIVING
      r_json = es_json.

ENDMETHOD.
