INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_REST_TOOLS definition
  public
  create public .

public section.
  type-pools ABAP .

  types:
    BEGIN OF ys_name_mapping,
        abap TYPE abap_compname,
        json TYPE string,
      END OF ys_name_mapping .
  types:
    yt_name_mappings TYPE HASHED TABLE OF ys_name_mapping WITH UNIQUE KEY abap .

  constants CON_MIMETYPE_JSON type STRING value ZDYN_IF_REST_DATA=>CON_MIMETYPE_JSON. "#EC NOTEXT
  constants CON_MIMETYPE_XML type STRING value ZDYN_IF_REST_DATA=>CON_MIMETYPE_XML. "#EC NOTEXT
  constants CON_MIMETYPE_PDF type STRING value ZDYN_IF_REST_DATA=>CON_MIMETYPE_PDF. "#EC NOTEXT
  constants CON_IMP_TYPE_LOCALFILE type ZDYN_DIMPORT_TYPE value 'L'. "#EC NOTEXT
  data MI_BULK_SIZE type I value 5000. "#EC NOTEXT
  constants CON_IMP_TYPE_IDOC type ZDYN_DIMPORT_TYPE value 'I'. "#EC NOTEXT
  constants CON_IMP_TYPE_PD type ZDYN_DIMPORT_TYPE value 'P'. "#EC NOTEXT
  constants CON_IMP_TYPE_SAP type ZDYN_DIMPORT_TYPE value 'S'. "#EC NOTEXT
*........appl log
  constants CON_MSGID_WS type SYMSGID value 'ZDYN_WS'. "#EC NOTEXT
  constants CON_LOG_FATAL type BALMI-PROBCLASS value '1'. "#EC NOTEXT
  constants CON_LOG_ERROR type BALMI-PROBCLASS value '2'. "#EC NOTEXT
  constants CON_LOG_WARN type BALMI-PROBCLASS value '3'. "#EC NOTEXT
  constants CON_LOG_INFO type BALMI-PROBCLASS value ' '. "#EC NOTEXT
  constants CON_LOG_DEBUG type BALMI-PROBCLASS value '4'. "#EC NOTEXT
  constants CON_NO_DATA_FOUND type ABAP_COMPNAME value 'NO_DATA_FOUND'. "#EC NOTEXT
  data MO_HTTP_CLIENT_OLD type ref to IF_HTTP_CLIENT read-only .
  data MO_HTTP_CLIENT type ref to ZDYN_IF_HTTP_CLIENT read-only .
  data MO_REST_CLIENT type ref to CL_REST_HTTP_CLIENT read-only .
  data MS_URL type STRING read-only .
  data MT_MAPPINGS type YT_NAME_MAPPINGS .
  data MS_RESULT type STRING read-only .
  data MT_COOKIES type TIHTTPCKI read-only .
  data MR_ATTACHMENTS type ref to ZDYN_CL_REST_IMAGE_CTX .
  data MC_MSGNR type MSGNR read-only .
  data MST_PDIV_DOCUMENT type ZDYN_IF_REST_DATA=>TY_PDDOCUMENT .
  data MO_PDIV_DOCUMENT type ref to ZDYN_CL_DATA_CONTAINER .
  constants CON_AUTH_BASIC type STRING value 'Basic'. "#EC NOTEXT
  data MT_EXTDATA type ZDYN_LSTRU_EXTDATA read-only .
  constants CON_PD_RFC type FUNCNAM value '/EBY/PDBO_RFC_DATA_RECEIVE'. "#EC NOTEXT
  constants CON_CAMEL_CASE type CHAR1 value 'X'. "#EC NOTEXT
  data MT_SEL_COMP_CODES type ZDYN_CL_BAPI=>YT_RANGE_BUKRS read-only .
  data MT_SEL_LANGU type ZDYN_CL_BAPI=>YT_RANGE_LANGU read-only .
  data MC_API_PREFIX type STRING read-only .
  data MI_ENTRY_COUNTER type INT4 .
  data MI_BATCH_COUNTER type INT4 .
  data MB_MASTERDATA_TO_FILE type ABAP_BOOL .
  data MS_MASTERDATA_PATHNAME type STRING .
  data MB_MASTERDATA_FILE_TEST type ABAP_BOOL value ABAP_FALSE. "#EC NOTEXT
  data MO_ACCESS_PROTECTION type ref to ZDYN_CL_ACCESS_PROTECTION .
  data MO_FILE type ref to ZDYN_CL_FILE .
  constants CON_AUTHORIZATION type STRING value 'Authorization'. "#EC NOTEXT
  constants CON_HTTP_REPEAT_TIMES type I value 3. "#EC NOTEXT
  constants CON_HTTP_REPEAT_WAIT type I value 1. "#EC NOTEXT

  methods SET_LANGU
    importing
      !IT_SEL_LANGU type ZDYN_CL_BAPI=>YT_RANGE_LANGU optional .
  methods SET_FILE
    importing
      !IO_FILE type ref to ZDYN_CL_FILE optional .
  methods REMOVE_INACTIVE_SUPPLIERS
    importing
      !IB_TAKE_INACTIVE type ABAP_BOOL default ABAP_FALSE
      !ID_DATE type FC_DATUM
    changing
      !CT_SUPPLIERS type ZDYN_LSTR_VMD .
  methods REMOVE_INACTIVE_CUSTOMERS
    importing
      !IB_TAKE_INACTIVE type ABAP_BOOL default ABAP_FALSE
      !IB_DELETE_ALL type ABAP_BOOL default ABAP_FALSE
      !ID_DATE type FC_DATUM
    changing
      !CT_CUSTOMERS type ZDYN_LSTR_CMD .
  methods CLEAR_DOCUMENT_DATA .
  methods GET_API_NAME
    importing
      !IC_SERVICE_NAME type STRING
    returning
      value(RC_NAME) type STRING .
  methods SET_COMPANY_CODES
    importing
      !IT_SEL_COMP_CODES type ZDYN_CL_BAPI=>YT_RANGE_BUKRS optional .
  methods IS_COMP_CODES_SET
    returning
      value(RB_RESULT) type ABAP_BOOL .
  methods CONVERT_JSON_TO_UPPERCASE
    changing
      !CS_JSON type STRING .
  methods ADD_CONFIRMATION_MSG
    importing
      !IC_OBJECT type SY-MSGV1
    changing
      !CT_LAST_MSG type BAPIRET2_T optional
      !CT_FINAL_MSG type BAPIRET2_T optional .
  methods SET_MASTERDATA_FILE_PARAMS
    importing
      !IB_MASTERDATA_TO_FILE type ABAP_BOOL
      !IB_MASTERDATA_FILE_TEST type ABAP_BOOL default ABAP_FALSE
      !IS_MASTERDATA_PATHNAME type ANY optional .
  methods SET_HTTP_CLIENT
    importing
      !IO_HTTP_CLIENT type ref to ZDYN_IF_HTTP_CLIENT .
  methods CONSTRUCTOR
    importing
      !II_BULK_SIZE type I optional .
  methods CREATE_HTTP_CLIENT
    importing
      !IC_RFCDEST type RFCDEST optional
      !IS_URL type STRING optional
      !IB_SKIP_TEST type ABAP_BOOL default ABAP_FALSE
    exceptions
      ERROR_OCCURRED .
  methods SET_NEW_ABS_URL
    importing
      !IS_PATH type STRING optional
      !IS_QUERY type STRING optional .
  methods SET_NEW_REL_URL
    importing
      !IS_PATH type STRING
      !IS_QUERY type STRING optional .
  methods CALL_HTTP_GET
    exporting
      !EI_RETURN_CODE type I
      !ES_MEDIA_TYPE type STRING
      !EX_XSTRING type XSTRING .
  methods CALL_HTTP_POST
    importing
      !IS_INPUT type STRING
      !IB_REPEAT_AFTER_ERROR type ABAP_BOOL default ABAP_FALSE
    exporting
      !EI_RETURN_CODE type I
      !ES_MEDIA_TYPE type STRING
      !EX_XSTRING type XSTRING .
  methods CALL_HTTP_PUT
    importing
      !IS_INPUT type STRING
      !IB_REPEAT_AFTER_ERROR type ABAP_BOOL default ABAP_FALSE
    exporting
      !EI_RETURN_CODE type I
      !ES_MEDIA_TYPE type STRING
      !EX_XSTRING type XSTRING .
  methods ADD_JSON_MAPPING
    importing
      !IS_MAPPING type YS_NAME_MAPPING .
  methods SERIALIZE_TO_JSON
    importing
      !IST_DATA type DATA
      !IC_COMPRESS type ABAP_BOOL default ABAP_TRUE
      !IC_PRETTY_NAME type CHAR1 default ZDYN_CL_JSON=>PRETTY_MODE-LOW_CASE
    returning
      value(ES_JSON) type STRING .
  methods DESERIALIZE_FROM_JSON
    importing
      !IS_JSON type STRING optional
      !IC_PRETTY_NAME type CHAR1 default ZDYN_CL_JSON=>PRETTY_MODE-LOW_CASE
    changing
      value(CST_DATA) type DATA .
  methods TRANSFORM_XML_TO_DATA
    importing
      !IS_XML type STRING
      !IC_XSLT type CXSLTDESC
      !IB_SKIP_PARSING type ABAP_BOOL default ABAP_FALSE
    exporting
      !ES_XML type STRING
    changing
      !CST_DATA type ABAP_TRANS_RESBIND_TAB
    exceptions
      ERROR_OCCURRED .
  methods GET_DATE_FROM_DATESTRING
    importing
      !IC_DATE type STRING
    returning
      value(EC_DATE) type SYDATUM .
  methods CALL_XML_TO_IDOC
    importing
      !IS_XML type STRING
      !IS_REMOTE_ADDR type STRING optional
    exporting
      !EB_SKIP_FEEDBACK type ABAP_BOOL
    exceptions
      ERROR_OCCURRED .
  methods LOG_WRITE
    importing
      !IC_LOG_OBJECT type BALOBJ_D
      !IC_LOG_SUBOBJECT type BALSUBOBJ
      !IC_EXTNUMBER type BALNREXT
      !IT_MSG type BAL_T_MSG optional
      !IT_MSG_BAPIRET type BAPIRET2_T optional
      !IT_MSG_FULL like ZDYN_CL_MSG=>MT_MESSAGES optional
      !II_LEVEL type ZDYN_WS_DMESSAGE_LEVEL optional
    exporting
      !EC_EXTNUMBER type BALNREXT
      !EC_LOGNUMBER type BALOGNR
    exceptions
      ERROR_OCCURED
      OBJECT_NOT_FOUND
      SUBOBJECT_NOT_FOUND .
  class-methods CONVERT_STRING_TO_TT_TBL1024
    importing
      !IS_STRING type STRING optional
      !IX_STRING type XSTRING optional
    exporting
      !ET_DATA type RMPS_T_1024
      !EI_LENGTH type INT4 .
  methods WRITE_DATE_AND_TIME
    importing
      !ID_DATE type ERDAT
      !ID_TIME type ERZET
    returning
      value(ES_DATE) type STRING .
  methods WRITE_DATE
    importing
      !ID_DATE type ERDAT
    returning
      value(ES_DATE) type STRING .
  methods ADD_SYSMSG_TO_BAPIRET2
    changing
      !CT_MESSAGES type BAPIRET2_T optional .
  methods ADD_MSG_TO_BAPIRET2
    importing
      !IC_MSGTY type SY-MSGTY default 'E'
      !IC_MSGID type SY-MSGID
      !IC_MSGNO type SY-MSGNO
      !IC_MSGV1 type SY-MSGV1 optional
      !IC_MSGV2 type SY-MSGV2 optional
      !IC_MSGV3 type SY-MSGV3 optional
      !IC_MSGV4 type SY-MSGV4 optional
    changing
      !CT_MESSAGES type BAPIRET2_T optional .
  methods BASIC_AUTHENTICATION
    importing
      !IS_USER type STRING
      !IS_PASSWORD type STRING .
  methods ADD_EXTDATA
    importing
      !IS_DATA type ANY
      !IC_NODE type C
      !IC_PARENT type C optional .
  methods CALL_PD_RFC
    importing
      !IC_OBJ type ZDYN_DOBJ_PD default 'IV'
      !IC_MAPID type ZDYN_DMAPID_PD default 'RSO'
    returning
      value(RB_OK) type ABAP_BOOL .
  methods FILL_PD_ARC_DATA
    exporting
      !ET_ARC type ZDYN_LSTRU_ARCHIVE
      !ET_CONTENT type RMPS_T_1024 .
  methods ARCHIVE_ATTACHMENT_DATA
    importing
      !IC_SAP_OBJECT type SAEANWDID
      !IC_OBJECT_ID type SAEOBJID
    returning
      value(RB_OK) type ABAP_BOOL .
  methods GET_AR_OBJECT_VALUE
    returning
      value(RC_AR_OBJECT) type SAEOBJART .
  methods CALL_HTTP_DELETE
    importing
      !IS_INPUT type STRING optional
    exporting
      !EI_RETURN_CODE type I
      !ES_MEDIA_TYPE type STRING
      !EX_XSTRING type XSTRING .
  class-methods MAP_BAPIRET2_TO_BAL
    importing
      !IT_MESSAGES type BAPIRET2_T
    returning
      value(ET_MSG) type BAL_T_MSG .
  class-methods GET_EPOCH_DATESTRING_FROM_DATE
    importing
      !ID_DATE type DATUM
    returning
      value(RS_DATE) type STRING .
  methods TRANSFORM_XML_TO_XML
    importing
      !IS_XML type STRING
      !IC_XSLT type CXSLTDESC
    exporting
      !ES_XML type STRING
    exceptions
      ERROR_OCCURRED .
  methods TRANSFORM_JSON_TO_XML
    importing
      !IS_XML type STRING
      !IC_XSLT type CXSLTDESC
    exporting
      !ES_XML type STRING
    exceptions
      ERROR_OCCURRED .
  methods TRANSFORM_JSON_TO_JSONXML
    importing
      !IS_XML type STRING
    exporting
      !ES_XML type STRING
      !ET_MESSAGES type BAPIRET2_T
    exceptions
      ERROR_OCCURRED .
  methods WRITE_UNIT_TO_STRING
    importing
      !ID_QUANTITY type BSTMG
      !ID_UNIT type BSTME optional
    returning
      value(RS_STRING) type STRING .
protected section.

  methods CALL_HTTP
    importing
      !IC_METHOD type CHAR10
      !IS_INPUT type STRING
      !IB_REPEAT_AFTER_ERROR type ABAP_BOOL default ABAP_FALSE
    exporting
      !EI_RETURN_CODE type I
      !ES_MEDIA_TYPE type STRING
      !EX_XSTRING type XSTRING .
private section.
endclass. "ZDYN_CL_REST_TOOLS definition
class ZDYN_CL_REST_TOOLS implementation.
METHOD add_confirmation_msg.

  DATA: lt_last_msg TYPE bapiret2_t.

  IF ct_last_msg IS INITIAL.
    lt_last_msg = zdyn_cl_msg=>get_messages( ).
  ELSE.
    lt_last_msg = ct_last_msg.
  ENDIF.
  CHECK lt_last_msg IS NOT INITIAL.

  zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                  ic_msgid    = '69'
                                  ic_msgno    = '420'
                                  ic_msgv1    = ic_object
                        CHANGING  ct_messages = ct_final_msg ).
* message s420(69) with space.
  APPEND LINES OF lt_last_msg TO ct_final_msg.
  CLEAR ct_last_msg.

ENDMETHOD.
  METHOD add_extdata.

    DATA: lr_descr       TYPE REF TO cl_abap_structdescr,
          ls_comp        LIKE LINE OF lr_descr->components,
          li_offset      TYPE i,
          li_len         TYPE i,
          li_strlen      TYPE i,
          ls_ext         LIKE LINE OF mt_extdata,
          ls_last        LIKE ls_ext,
          li_index       TYPE i,
          lb_field_added TYPE flag.

    FIELD-SYMBOLS <l_field> TYPE any.

    ls_ext-node          = ic_node.
    ls_ext-parentnode    = ic_parent.

    IF NOT ic_parent IS INITIAL.
      DESCRIBE TABLE mt_extdata.
      li_index = sy-tfill.
      WHILE li_index > 0.
        READ TABLE mt_extdata INTO ls_last INDEX li_index.
        IF ls_last-node = ic_parent.
          ls_ext-parentsubnode = ls_last-subnode.
          EXIT.
        ENDIF.
        SUBTRACT 1 FROM li_index.
      ENDWHILE.
    ENDIF.

    DESCRIBE TABLE mt_extdata.
    li_index = sy-tfill.
    WHILE li_index > 0.
      READ TABLE mt_extdata INTO ls_last INDEX li_index.
      IF ls_last-node = ic_node AND ls_last-parentnode = ic_parent.
        EXIT.
      ENDIF.
      SUBTRACT 1 FROM li_index.
      CLEAR ls_last.
    ENDWHILE.
    ls_ext-subnode = ls_last-subnode + 1.

    lr_descr ?= cl_abap_typedescr=>describe_by_data( is_data ).
    LOOP AT lr_descr->components INTO ls_comp WHERE"only simple data types
     type_kind <> lr_descr->typekind_table AND"Internal table
     type_kind <> lr_descr->typekind_xstring AND "XString
     type_kind <> lr_descr->typekind_struct2."Deep structure
      ASSIGN COMPONENT ls_comp-name OF STRUCTURE is_data TO <l_field>.
*   only handle fields with data
      CHECK NOT <l_field> IS INITIAL.
      ls_ext-extfield = ls_comp-name.
*   able to map type_kind P
      IF ls_comp-type_kind = lr_descr->typekind_packed
         OR ls_comp-type_kind = lr_descr->typekind_int
         OR ls_comp-type_kind = lr_descr->typekind_int1
         OR ls_comp-type_kind = lr_descr->typekind_int2
         OR ls_comp-type_kind = lr_descr->typekind_numeric.
        ls_ext-extent = 1.
        ls_ext-extvalue = <l_field>.
        CONDENSE ls_ext-extvalue NO-GAPS.
        APPEND ls_ext TO mt_extdata.
      ELSE.
        li_len = ls_comp-length / cl_abap_char_utilities=>charsize.
        li_offset = 0.
        WHILE li_offset < li_len.
          ls_ext-extent   = sy-index.
          li_strlen = strlen( <l_field>+li_offset ).
          IF li_strlen = 0.
            EXIT.
          ENDIF.
          ls_ext-extvalue = <l_field>+li_offset.
          APPEND ls_ext TO mt_extdata.
          ADD 50 TO li_offset.
        ENDWHILE.
      ENDIF.
      lb_field_added = abap_true.
    ENDLOOP.

    CHECK lb_field_added = abap_false.
**In case data is saved only in subordinated tables, we need to fill intermediate tables,
** otherwise parent linkage is lost

**Could it somehow damage flat table processing?
    ls_ext-extfield = con_no_data_found.
    ls_ext-extvalue = abap_true.
    APPEND ls_ext TO mt_extdata.

  ENDMETHOD.
  METHOD add_json_mapping.

    CHECK NOT is_mapping-abap IS INITIAL.
    CHECK NOT is_mapping-json IS INITIAL.
    READ TABLE mt_mappings WITH KEY abap = is_mapping-abap
         TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      MODIFY TABLE mt_mappings FROM is_mapping.
    ELSE.
      INSERT is_mapping INTO TABLE mt_mappings.
    ENDIF.

  ENDMETHOD.
METHOD add_msg_to_bapiret2.

  zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = ic_msgty
                                  ic_msgid    = ic_msgid
                                  ic_msgno    = ic_msgno
                                  ic_msgv1    = ic_msgv1
                                  ic_msgv2    = ic_msgv2
                                  ic_msgv3    = ic_msgv3
                                  ic_msgv4    = ic_msgv4
                        CHANGING  ct_messages = ct_messages ).

ENDMETHOD.
METHOD add_sysmsg_to_bapiret2.

  zdyn_cl_msg=>add_sysmsg( CHANGING ct_messages = ct_messages ).

ENDMETHOD.
METHOD archive_attachment_data.

  DATA: lst_arc      TYPE zdyn_stru_archive,
        lb_error     TYPE abap_bool,
        lb_ok        TYPE abap_bool,
        lt_mimetypes TYPE TABLE OF zdyn_stru_archiving-mimetype,
        lc_mimetype  LIKE LINE OF lt_mimetypes.
  FIELD-SYMBOLS: <attachment> TYPE zdyn_stru_archiving.

  CHECK mr_attachments IS BOUND.

* pick attachment type we want to archive, with preference for PDF (first place) and TIFF (second place)
* we have to pick only one, since there is only one archiving type defined in the configuration
  LOOP AT mr_attachments->mt_attachments ASSIGNING <attachment>.
    COLLECT <attachment>-mimetype INTO lt_mimetypes.
  ENDLOOP.
  READ TABLE lt_mimetypes INTO lc_mimetype WITH KEY table_line = 'application/pdf'.
  IF sy-subrc <> 0.
    READ TABLE lt_mimetypes INTO lc_mimetype WITH KEY table_line = 'image/tiff'.
    IF sy-subrc <> 0.
      READ TABLE lt_mimetypes INTO lc_mimetype INDEX 1.
    ENDIF.
  ENDIF.


  LOOP AT mr_attachments->mt_attachments ASSIGNING <attachment> WHERE mimetype = lc_mimetype.
    CLEAR: lst_arc, lb_ok.
    zdyn_cl_msg=>clear_sysmsg( ).
    MOVE-CORRESPONDING <attachment> TO lst_arc.
    IF lst_arc-ar_object IS INITIAL.
*     get a configured AR_OBJECT value
      lst_arc-ar_object = get_ar_object_value( ).
    ENDIF.
    lst_arc-sap_object = ic_sap_object.
    lst_arc-object_id  = ic_object_id.
*   read OAC3 customizing and use those values
    zdyn_cl_bapi=>mo->archive_prepare( CHANGING cst_arc = lst_arc ).
*   archive the external data
    zdyn_cl_bapi=>mo->archive_external_data( EXPORTING  ist_arc       = lst_arc
                                                        it_content    = <attachment>-content
                                             IMPORTING  ec_arc_doc_id = lst_arc-arc_doc_id
                                             EXCEPTIONS OTHERS        = 1 ).
    IF sy-subrc = 0.
*     create a link to the SAP object
      lb_ok = zdyn_cl_bapi=>mo->archive_create_link( ist_arc = lst_arc ).
    ENDIF.

    IF lb_ok = abap_true.
*     success message
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                      ic_msgid    = 'ZDYN_WS'
                                      ic_msgno    = '024'
                                      ic_msgv1    = lst_arc-filename ).
*     message s024(zdyn_ws) with space.
    ELSE.
*     error_message
      zdyn_cl_msg=>add_sysmsg( ).
      lb_error = abap_true.
    ENDIF.
  ENDLOOP.

  IF lb_error = abap_false.
    rb_ok = abap_true.
  ENDIF.

ENDMETHOD.
  METHOD basic_authentication.

    DATA: ls_auth TYPE string,
          ls_out  TYPE string.

* Basic authentication needs an HTTP header of type
* Authorization: Basic base64-encoded-string of content username:password
    CHECK mo_http_client IS BOUND.
    CONCATENATE is_user is_password INTO ls_auth SEPARATED BY ':'.

    CALL METHOD cl_http_utility=>if_http_utility~encode_base64    "Method for Encryption
      EXPORTING
        unencoded = ls_auth
      RECEIVING
        encoded   = ls_out.

    CLEAR ls_auth.
    CONCATENATE con_auth_basic ls_out INTO ls_auth SEPARATED BY space.

    CALL METHOD mo_http_client->request->set_header_field
      EXPORTING
        name  = con_authorization
        value = ls_auth.

  ENDMETHOD.
METHOD call_http.

  CLEAR ms_result.
  zdyn_cl_msg=>clear_sysmsg( ).

  zdyn_cl_msg=>add_long_msg( EXPORTING ic_msgty  = 'S'
                                       ic_msgid  = 'ZDYN_WS'
                                       ic_msgno  = '044'
                                       is_param  = ms_url
                                       ii_level  = zdyn_cl_msg=>con_message_level_2 ).
*  MESSAGE s044(zdyn_ws) with space.

  DO con_http_repeat_times TIMES.
    mo_http_client->call_http( EXPORTING ic_method      = ic_method
                                         is_input       = is_input
                                         is_url         = ms_url
                               IMPORTING ei_return_code = ei_return_code
                                         es_media_type  = es_media_type
                                         es_result      = ms_result
                                         ex_xstring     = ex_xstring ).

    IF ei_return_code < 300.
      add_msg_1 s 049 zdyn_ws 2 ei_return_code.
      EXIT.
    ELSE.
      add_msg_1 e 049 zdyn_ws 2 ei_return_code.
      IF ib_repeat_after_error = abap_false.
        EXIT.
      ELSE.
        WAIT UP TO con_http_repeat_wait SECONDS.
        add_msg_0 s 052 zdyn_ws 2.
*       MESSAGE s052(zdyn_ws).
      ENDIF.
    ENDIF.
*   MESSAGE s049(zdyn_ws).
  ENDDO.

ENDMETHOD.
METHOD call_http_delete.

  zdyn_cl_msg=>add_to_call_stack( ).

  call_http( EXPORTING ic_method      = 'DELETE'
                       is_input       = is_input
             IMPORTING ei_return_code = ei_return_code
                       es_media_type  = es_media_type
                       ex_xstring     = ex_xstring ).

ENDMETHOD.
METHOD call_http_get.

  zdyn_cl_msg=>add_to_call_stack( ).

  call_http( EXPORTING ic_method      = 'GET'
                       is_input       = ''
             IMPORTING ei_return_code = ei_return_code
                       es_media_type  = es_media_type
                       ex_xstring     = ex_xstring ).

ENDMETHOD.
METHOD call_http_post.

  zdyn_cl_msg=>add_to_call_stack( ).

  call_http( EXPORTING ic_method              = 'POST'
                       is_input               = is_input
                       ib_repeat_after_error  = ib_repeat_after_error
             IMPORTING ei_return_code         = ei_return_code
                       es_media_type          = es_media_type
                       ex_xstring             = ex_xstring ).

ENDMETHOD.
METHOD call_http_put.

  zdyn_cl_msg=>add_to_call_stack( ).

  call_http( EXPORTING ic_method              = 'PUT'
                       is_input               = is_input
                       ib_repeat_after_error  = ib_repeat_after_error
             IMPORTING ei_return_code         = ei_return_code
                       es_media_type          = es_media_type
                       ex_xstring             = ex_xstring ).

ENDMETHOD.
METHOD call_pd_rfc.

  DATA: lc_function TYPE funcnam,
        lc_msgv1    TYPE sy-msgv1,
        lc_msgv2    TYPE sy-msgv2,
        ls_guid     TYPE string,
        lt_content  TYPE rmps_t_1024,
        ls_message  TYPE zdyn_stru_pd_message,
        lt_messages TYPE STANDARD TABLE OF zdyn_stru_pd_message,
        lt_arc      TYPE zdyn_lstru_archive,
        ls_bo_hdr   TYPE zdyn_stru_bo_hdr,
        ls_status   TYPE zdyn_stru_bo_rfcstatus.

  zdyn_cl_msg=>add_to_call_stack( ).

  lc_function = con_pd_rfc.
  CALL FUNCTION 'RH_FUNCTION_EXIST'
    EXPORTING
      name   = lc_function
    EXCEPTIONS
      OTHERS = 1.
* skip in case PD is not installed
  CHECK sy-subrc = 0.
  CHECK NOT mt_extdata IS INITIAL.

  fill_pd_arc_data( IMPORTING et_arc     = lt_arc
                              et_content = lt_content ).
  zdyn_cl_bapi=>mo->eby_pdbo_rfc_data_receive(
    EXPORTING
    ic_obj        = ic_obj
    ic_env        = 'XB'   " we use XBOUND as default
    ic_mapid      = ic_mapid
    it_extdata    = mt_extdata
    it_archiving  = lt_arc
    it_content    = lt_content
  IMPORTING
    es_bo_hdr     = ls_bo_hdr
    es_status     = ls_status
    et_messages   = lt_messages ).

  IF ls_status-retcode = 'S' AND ls_bo_hdr-numbr IS NOT INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_bo_hdr-numbr
      IMPORTING
        output = ls_bo_hdr-numbr.
    ls_guid = ls_bo_hdr-guid.
    CONCATENATE ic_mapid ls_guid INTO lc_msgv1 SEPARATED BY space.
    IF ic_obj = 'IV'.
      CONCATENATE 'PDAP' ls_bo_hdr-numbr INTO lc_msgv2 SEPARATED BY space.
    ELSE.
      CONCATENATE 'PD' ic_obj INTO lc_msgv2.
      CONCATENATE lc_msgv2 ls_bo_hdr-numbr INTO lc_msgv2 SEPARATED BY space.
    ENDIF.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = '/COCKPIT/GEN'
                                    ic_msgno    = '011'
                                    ic_msgv1    = lc_msgv1
                                    ic_msgv2    = lc_msgv2 ).
*   MESSAGE s011(/cockpit/gen).
    rb_ok = abap_true.
  ELSE.
    CLEAR rb_ok.
    LOOP AT lt_messages INTO ls_message
         WHERE msg_type = 'E'.
*     special handling for duplicate GUID
      IF ls_message-msg_id = '/EBY/PDBO' AND
         ls_message-msg_no = '017'.
*       force setting status to complete
        rb_ok = abap_true.
        ls_message-msg_type = 'S'.
      ELSEIF ls_message-msg_id = '/COCKPIT/GEN' AND
         ls_message-msg_no = '215'.
*       force setting status to complete for deleted docs
        rb_ok = abap_true.
        ls_message-msg_type = 'S'.
      ENDIF.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = ls_message-msg_type
                                      ic_msgid    = ls_message-msg_id
                                      ic_msgno    = ls_message-msg_no
                                      ic_msgv1    = ls_message-msg_v1
                                      ic_msgv2    = ls_message-msg_v2
                                      ic_msgv3    = ls_message-msg_v3
                                      ic_msgv4    = ls_message-msg_v4 ).
      DELETE lt_messages.
    ENDLOOP.
  ENDIF.

* Add all the remaining messages for debugging
  zdyn_cl_msg=>add_pd_msgs( it_messages = lt_messages
                            ii_level    = zdyn_cl_msg=>con_message_level_2 ).
  CLEAR mt_extdata.

ENDMETHOD.
METHOD call_xml_to_idoc.

  zdyn_cl_msg=>add_to_call_stack( ).

  zdyn_cl_bapi=>mo->idoc_inbound_xml_via_http( EXPORTING  is_xml         = is_xml
                                                          is_remote_addr = is_remote_addr
                                               EXCEPTIONS OTHERS         = 1 ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD clear_document_data.

  mr_attachments->clear( ).
  CLEAR mst_pdiv_document.
  mo_pdiv_document->clear( ).

ENDMETHOD.
METHOD constructor.

  CALL METHOD super->constructor.
  CREATE OBJECT: mr_attachments, mo_access_protection, mo_file.
  IF ii_bulk_size <> 0.
    mi_bulk_size = ii_bulk_size.
  ENDIF.

  set_langu( ).

  mo_pdiv_document = zdyn_cl_data_container=>create( ).

ENDMETHOD.
METHOD convert_json_to_uppercase.

*  REPLACE REGEX '' IN cs_json WITH ''.

ENDMETHOD.
METHOD convert_string_to_tt_tbl1024.

  DATA: lx_string TYPE xstring.

  IF NOT is_string IS INITIAL.
    CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
      EXPORTING
        text   = is_string
      IMPORTING
        buffer = lx_string
      EXCEPTIONS
        OTHERS = 0.
  ELSEIF NOT ix_string IS INITIAL.
    lx_string = ix_string.
  ENDIF.

  ei_length = xstrlen( lx_string ).

  CHECK NOT lx_string IS INITIAL.
  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
    EXPORTING
      buffer     = lx_string
    TABLES
      binary_tab = et_data.
  CLEAR lx_string.

ENDMETHOD.
METHOD create_http_client.

  DATA: lo_http_client TYPE REF TO zdyn_cl_http_client.

  zdyn_cl_msg=>add_to_call_stack( ).

  CREATE OBJECT lo_http_client
    EXPORTING
      ic_rfcdest   = ic_rfcdest
      is_url       = is_url
      ib_skip_test = ib_skip_test
    EXCEPTIONS
      OTHERS       = 1.
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_sysmsg( ).
    RAISE error_occurred.
  ENDIF.
  mo_http_client = lo_http_client.

ENDMETHOD.
METHOD deserialize_from_json.

  IF is_json IS NOT INITIAL.
    zdyn_cl_json_processor=>deserialize( EXPORTING is_json        = is_json
                                                   ic_pretty_name = ic_pretty_name
                                                   it_mappings    = mt_mappings
                                         CHANGING  cst_data       = cst_data ).
  ELSE.
    zdyn_cl_json_processor=>deserialize( EXPORTING is_json        = ms_result
                                                   ic_pretty_name = ic_pretty_name
                                                   it_mappings    = mt_mappings
                                         CHANGING  cst_data       = cst_data ).
  ENDIF.

ENDMETHOD.
  METHOD fill_pd_arc_data.

    DATA:
      ls_arc   TYPE zdyn_stru_archive,
      li_len   TYPE i,
      li_first TYPE i.

    FIELD-SYMBOLS:
          <attachment> TYPE zdyn_stru_archiving.

    CHECK mr_attachments IS BOUND.
    LOOP AT mr_attachments->mt_attachments ASSIGNING <attachment>.
      CLEAR ls_arc.
      DESCRIBE TABLE et_content LINES li_len.
      li_first = li_len + 1.
      MOVE-CORRESPONDING <attachment> TO ls_arc.
      DESCRIBE TABLE <attachment>-content LINES li_len.
      ls_arc-firstline = li_first.
      ls_arc-lastline = li_first + li_len - 1.
      APPEND LINES OF <attachment>-content TO et_content.
      APPEND ls_arc TO et_arc.
    ENDLOOP.

  ENDMETHOD.
METHOD get_api_name.

  DATA: lc_separator TYPE string.

  IF ic_service_name(1) <> '/'.
    lc_separator = '/'.
  ENDIF.

  IF mc_api_prefix IS INITIAL.
    CONCATENATE lc_separator ic_service_name INTO rc_name.
  ELSE.
    CONCATENATE '/' mc_api_prefix lc_separator ic_service_name INTO rc_name.
  ENDIF.

ENDMETHOD.
  method GET_AR_OBJECT_VALUE.

  endmethod.
  METHOD get_date_from_datestring.
    DATA:       lx_smt_error TYPE REF TO cx_smt_unsuccessful_trans,
                lx_root      TYPE REF TO cx_root.

* https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html
    TRY.


        CALL METHOD cl_smt_trans_date_time_in=>map_offset_date_time_in
          EXPORTING
            i_prefetch         = abap_false
            iv_offset_datetime = ic_date
          IMPORTING
            ev_date            = ec_date.


      CATCH cx_smt_unsuccessful_trans INTO lx_smt_error.
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = lx_smt_error->get_text( ).
*           level  = CRITICAL
*           quit   = METHOD
*           detail =
      CATCH cx_root INTO lx_root.
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = lx_root->get_text( ).

    ENDTRY.

  ENDMETHOD.
  METHOD GET_EPOCH_DATESTRING_FROM_DATE.

    DATA:
      lp_timestamp TYPE timestamp,
      lp_start     TYPE timestamp VALUE 19700101000000,
      lp_secs      TYPE tzntstmpl.

    CHECK NOT id_date IS INITIAL.
    CONVERT DATE id_date
                 TIME '120000'
                 INTO TIME STAMP lp_timestamp TIME ZONE sy-zonlo.
    CHECK NOT lp_timestamp IS INITIAL.

    TRY.
        CALL METHOD cl_abap_tstmp=>subtract
          EXPORTING
            tstmp1 = lp_timestamp
            tstmp2 = lp_start
          RECEIVING
            r_secs = lp_secs.
*   we need miliseconds
        lp_timestamp = lp_secs * 1000.
        rs_date = lp_timestamp.
        CONCATENATE '/Date(' rs_date ')/' INTO rs_date.

      CATCH cx_parameter_invalid_range .
      CATCH cx_parameter_invalid_type .
    ENDTRY.

  ENDMETHOD.
METHOD is_comp_codes_set.

  IF mt_sel_comp_codes IS NOT INITIAL.
    rb_result = abap_true.
  ENDIF.

ENDMETHOD.
METHOD log_write.

  DATA: lt_msg          LIKE it_msg,
        lt_msg_full     LIKE zdyn_cl_msg=>mt_messages,
        ls_log          TYPE bal_s_log,
        ls_hnd          TYPE balloghndl,
        lt_hnd          TYPE bal_t_logh,
        lt_new          TYPE bal_t_lgnm,
        ls_msg          TYPE bal_s_msg,
        ls_disp_profile TYPE bal_s_prof,
        ls_fcat         LIKE LINE OF ls_disp_profile-mess_fcat.

  IF it_msg IS INITIAL AND it_msg_bapiret IS INITIAL AND it_msg_full IS INITIAL.
    lt_msg_full = zdyn_cl_msg=>get_messages( ii_level = ii_level ).
    lt_msg = zdyn_cl_msg=>map_full_to_bal( lt_msg_full ).
  ELSEIF it_msg_bapiret IS NOT INITIAL.
    lt_msg = zdyn_cl_rest_tools=>map_bapiret2_to_bal( it_msg_bapiret ).
  ELSEIF it_msg_full IS NOT INITIAL.
    lt_msg = zdyn_cl_msg=>map_full_to_bal( it_msg_full ).
  ELSE.
    lt_msg = it_msg.
  ENDIF.

  CHECK lt_msg IS NOT INITIAL.

  ls_log-object    = ic_log_object.
  ls_log-subobject = ic_log_subobject.
  ls_log-extnumber = ic_extnumber.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = ls_log
    IMPORTING
      e_log_handle = ls_hnd.

  LOOP AT lt_msg INTO ls_msg.
    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle = ls_hnd
        i_s_msg      = ls_msg.
  ENDLOOP.

  APPEND ls_hnd TO lt_hnd.

  IF NOT ic_log_object IS INITIAL AND
     NOT ic_log_subobject IS INITIAL.
    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_t_log_handle   = lt_hnd
      IMPORTING
        e_new_lognumbers = lt_new
      EXCEPTIONS
        others           = 1.
  ENDIF.

  IF sy-subrc = 0.
*   message display profile
    ls_fcat-ref_table = 'BAL_S_SHOW'.
    ls_fcat-ref_field = 'T_MSG'.
*    ls_fcat-outputlen = 100.
    ls_fcat-col_pos   = 2.
    ls_fcat-no_out    = abap_false.
    APPEND ls_fcat TO ls_disp_profile-mess_fcat.

    ls_fcat-ref_table = 'BAL_S_SHOW'.
    ls_fcat-ref_field = 'MSG_STMP'.
*    ls_fcat-outputlen = 24.
    ls_fcat-col_pos   = 3.
    ls_fcat-no_out    = abap_false.
    APPEND ls_fcat TO ls_disp_profile-mess_fcat.

    ls_disp_profile-cwidth_opt = abap_true.
    ls_disp_profile-use_grid = abap_true.

    CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
      EXPORTING
        i_s_display_profile = ls_disp_profile
        i_t_log_handle      = lt_hnd.
  ENDIF.

ENDMETHOD.
METHOD map_bapiret2_to_bal.

  DATA: ls_msg TYPE bal_s_msg.

  FIELD-SYMBOLS: <bapiret2> TYPE bapiret2.

  LOOP AT it_messages ASSIGNING <bapiret2>.
    ls_msg-msgty = <bapiret2>-type.
    ls_msg-msgid = <bapiret2>-id.
    ls_msg-msgno = <bapiret2>-number.
    ls_msg-msgv1 = <bapiret2>-message_v1.
    ls_msg-msgv2 = <bapiret2>-message_v2.
    ls_msg-msgv3 = <bapiret2>-message_v3.
    ls_msg-msgv4 = <bapiret2>-message_v4.
    IF <bapiret2>-type = 'E'.
      ls_msg-probclass = '2'. " Important
    ELSE.
      ls_msg-probclass = '4'. " Additional information
    ENDIF.
    APPEND ls_msg TO et_msg.
  ENDLOOP.

ENDMETHOD.
METHOD remove_inactive_customers.

* In case of full update (empty modification date), skip inactive customers (blocked or marked for deletion)
* In case of delta run, inactive customers are taken
  IF id_date IS INITIAL AND ib_take_inactive = abap_false AND ib_delete_all = abap_false.
    DELETE ct_customers WHERE sperr IS NOT INITIAL
                           OR loevm IS NOT INITIAL
                           OR bukrs_sperr IS NOT INITIAL
                           OR bukrs_loevm IS NOT INITIAL.
  ENDIF.

ENDMETHOD.
METHOD remove_inactive_suppliers.

* In case of full update (empty modification date), skip inactive suppliers (blocked or marked for deletion)
* In case of delta run, inactive suppliers are taken
  IF id_date IS INITIAL AND ib_take_inactive = abap_false.
    DELETE ct_suppliers WHERE sperr IS NOT INITIAL
                           OR loevm IS NOT INITIAL
                           OR bukrs_sperr IS NOT INITIAL
                           OR bukrs_loevm IS NOT INITIAL.
  ENDIF.

ENDMETHOD.
METHOD serialize_to_json.

  es_json = zdyn_cl_json_processor=>serialize( ist_data       = ist_data
                                               ic_compress    = ic_compress
                                               ic_pretty_name = ic_pretty_name
                                               it_mappings    = mt_mappings ).
ENDMETHOD.
METHOD set_company_codes.

* IT_SEL_COMP_CODES parameter is optional for redefinitions in subclasses

  DATA: lst_sel_comp_code LIKE LINE OF mt_sel_comp_codes.

  mt_sel_comp_codes = it_sel_comp_codes.
  SORT mt_sel_comp_codes BY low.

ENDMETHOD.
METHOD set_file.

  IF io_file IS NOT INITIAL.
    mo_file = io_file.
  ELSE.
    CREATE OBJECT mo_file.
  ENDIF.

ENDMETHOD.
METHOD set_http_client.

  mo_http_client = io_http_client.

ENDMETHOD.
METHOD set_langu.

  DATA lst_langu LIKE LINE OF mt_sel_langu.

  IF it_sel_langu IS INITIAL.
    IF mt_sel_langu IS NOT INITIAL.
      CLEAR mt_sel_langu.
    ENDIF.
    lst_langu-low = sy-langu.
    lst_langu-sign = 'I'.
    lst_langu-option = 'EQ'.
    APPEND lst_langu TO mt_sel_langu.
  ELSE.
    mt_sel_langu = it_sel_langu.
  ENDIF.

ENDMETHOD.
METHOD set_masterdata_file_params.

  zdyn_cl_msg=>add_to_call_stack( ).

  mb_masterdata_to_file   = ib_masterdata_to_file.
  ms_masterdata_pathname  = is_masterdata_pathname.
  mb_masterdata_file_test = ib_masterdata_file_test.

ENDMETHOD.
METHOD set_new_abs_url.

* Deprecated. Use SET_NEW_REL_URL directly.

  set_new_rel_url( is_path  = is_path
                   is_query = is_query ).

ENDMETHOD.
METHOD set_new_rel_url.

  DATA: ls_path TYPE string.

  CHECK mo_http_client IS BOUND.

  IF is_path IS NOT INITIAL.
    ls_path = get_api_name( is_path ).
  ENDIF.

  ms_url = mo_http_client->create_rel_url( path        = ls_path
                                           querystring = is_query ).
ENDMETHOD.
METHOD transform_json_to_jsonxml.

  DATA: lo_writer   TYPE REF TO cl_sxml_string_writer,
        lo_cx_root  TYPE REF TO cx_root,
        lt_messages TYPE bapiret2_t.

  zdyn_cl_msg=>add_to_call_stack( ).

  lo_writer = cl_sxml_string_writer=>create( ).

  TRY.

      CALL TRANSFORMATION id
           SOURCE XML is_xml
           RESULT XML lo_writer.
      es_xml = cl_abap_codepage=>convert_from( lo_writer->get_output( ) ).

    CATCH cx_root INTO lo_cx_root.
      CALL FUNCTION 'RS_EXCEPTION_TO_BAPIRET2'
        EXPORTING
          i_r_exception = lo_cx_root
        CHANGING
          c_t_bapiret2  = lt_messages.
      zdyn_cl_msg=>add_msgs( lt_messages ).
      RAISE error_occurred.

  ENDTRY.

ENDMETHOD.
METHOD transform_json_to_xml.

    DATA: ls_xml  TYPE string.

    CALL METHOD transform_json_to_jsonxml
      EXPORTING
        is_xml      = is_xml
      IMPORTING
        es_xml      = ls_xml
      EXCEPTIONS
        OTHERS      = 1.
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.

    CALL METHOD transform_xml_to_xml
      EXPORTING
        is_xml      = ls_xml
        ic_xslt     = ic_xslt
      IMPORTING
        es_xml      = es_xml
      EXCEPTIONS
        OTHERS      = 1.

    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.

  ENDMETHOD.
METHOD transform_xml_to_data.

  DATA: lo_cx_root  TYPE REF TO cx_root,
        lt_messages TYPE bapiret2_t.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ic_xslt IS INITIAL.

  transform_xml_to_xml( EXPORTING  is_xml      = is_xml
                                   ic_xslt     = ic_xslt
                        IMPORTING  es_xml      = es_xml
                        EXCEPTIONS OTHERS      = 1 ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

  CHECK ib_skip_parsing	= abap_false.
  CHECK NOT es_xml IS INITIAL.
  CHECK NOT cst_data IS INITIAL.

  TRY.

      CALL TRANSFORMATION id
           SOURCE XML es_xml
           RESULT (cst_data).
    CATCH cx_root INTO lo_cx_root.
      CALL FUNCTION 'RS_EXCEPTION_TO_BAPIRET2'
        EXPORTING
          i_r_exception = lo_cx_root
        CHANGING
          c_t_bapiret2  = lt_messages.
      zdyn_cl_msg=>add_msgs( lt_messages ).
      RAISE error_occurred.

  ENDTRY.

ENDMETHOD.
METHOD transform_xml_to_xml.

  DATA: li_rc       TYPE i,
        lo_xslt     TYPE REF TO cl_xslt_processor,
        lo_xml      TYPE REF TO if_ixml,
        lo_result   TYPE REF TO if_ixml_document,
        lo_cx_root  TYPE REF TO cx_root,
        lt_messages TYPE bapiret2_t.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT ic_xslt IS INITIAL.
  lo_xml = cl_ixml=>create( ).
  lo_result = lo_xml->create_document( ).

  CREATE OBJECT lo_xslt.
  lo_xslt->set_source_string( is_xml ).
  lo_xslt->set_result_document( lo_result ).

  TRY.
      li_rc = lo_xslt->run( progname = ic_xslt ).
      lo_xslt->output_string( IMPORTING ostring = es_xml ).

    CATCH cx_root INTO lo_cx_root.
      CALL FUNCTION 'RS_EXCEPTION_TO_BAPIRET2'
        EXPORTING
          i_r_exception = lo_cx_root
        CHANGING
          c_t_bapiret2  = lt_messages.
      zdyn_cl_msg=>add_msgs( lt_messages ).
      RAISE error_occurred.
  ENDTRY.

ENDMETHOD.
  METHOD WRITE_DATE.

    CHECK id_date IS NOT INITIAL.
    CONCATENATE id_date(4) id_date+4(2) id_date+6(2) INTO es_date SEPARATED BY '-'.

  ENDMETHOD.
  METHOD write_date_and_time.

    CHECK id_date IS NOT INITIAL.
    CONCATENATE id_date(4) id_date+4(2) id_date+6(2) INTO es_date SEPARATED BY '-'.

    es_date = write_date( id_date ).
    CONCATENATE es_date 'T' id_time(2) ':' id_time+2(2) ':' id_time+4(2) '+00:00' INTO es_date.

  ENDMETHOD.
  METHOD write_unit_to_string.

    DATA:
    lc_text TYPE char50.

    IF id_quantity IS INITIAL.
      lc_text = '0'.
*    ELSEIF id_unit IS INITIAL.
*      WRITE id_quantity TO lc_text.
    ELSE.
*      WRITE id_quantity TO lc_text UNIT id_unit.
      lc_text = id_quantity.
    ENDIF.
    CONDENSE lc_text NO-GAPS.
    rs_string = lc_text.

  ENDMETHOD.
