INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_REST_TOOLS_IDP definition
  public
  inheriting from ZDYN_CL_REST_TOOLS
  create public .

public section.
  class ZDYN_CL_BAPI definition load .

  interfaces ZDYN_IF_REST_TOOLS_IDP .

  data MST_CONFIG type ZDYN_STRU_IDP_CONFIG .
  constants CON_IDP_URL type STRING value 'https://digipost-api.azurewebsites.net'. "#EC NOTEXT
  constants CON_GETREQUESTABLE type STRING value '/backend/api/Messages/all/requestable'. "#EC NOTEXT
  constants CON_AUTH type STRING value '/backend/api/Auth/login'. "#EC NOTEXT
  constants CON_GETGROUPS type STRING value '/backend/api/Groups/all/entity/current'. "#EC NOTEXT
  constants CON_GETDOCTYPES type STRING value '/backend/api/DocumentTypes/all/entity/current'. "#EC NOTEXT
  constants CON_GETMSGTYPES type STRING value '/backend/api/MessageTypes/all/entity/current'. "#EC NOTEXT
  constants CON_GETGUID type STRING value '/backend/api/Messages/info/guid'. "#EC NOTEXT
  constants CON_ACCEPT type STRING value 'Accept'. "#EC NOTEXT
  constants CON_CONTENT_TYPE type STRING value 'Content-Type'. "#EC NOTEXT
  data MC_TOKEN type STRING .
  data MST_MESSAGE type ZDYN_CL_REST_TOOLS_IDP_DATA=>TY_MESSAGE .
  constants CON_LEVEL_HEADER type STRNAME value 'HEADER'. "#EC NOTEXT
  constants CON_LEVEL_ITEM type STRNAME value 'ITEM'. "#EC NOTEXT
  constants CON_LEVEL_CUSTOM type STRNAME value 'CUSTOM'. "#EC NOTEXT
  constants CON_LEVEL_PROCESSLOG type STRNAME value 'IT_PROCESSLOG'. "#EC NOTEXT
  constants CON_LEVEL_CUSTOMITEM type STRNAME value 'CUSTOMITEM'. "#EC NOTEXT
  constants CON_TOGGLEREQUESTED type STRING value '/backend/api/Messages/requested/reset/guid'. "#EC NOTEXT
  constants CON_MESSAGEUPDATE type STRING value '/backend/api/Messages/requested/feedback/update'. "#EC NOTEXT
  constants CON_STATUS_SUCCESS type I value 6. "#EC NOTEXT
  constants CON_STATUS_ERROR type I value 7. "#EC NOTEXT
  constants CON_GETMETADATA type STRING value '/backend/api/metadata/object/documentType'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IST_CONFIG type ZDYN_STRU_IDP_CONFIG optional .
  methods PREPARE_CLIENT
    exceptions
      ERROR_OCCURRED .
  methods AUTHENTICATE
    importing
      !IS_USER type STRING
      !IS_PASSWORD type STRING
      !IB_TEST type ABAP_BOOL default ABAP_FALSE
    returning
      value(RB_OK) type ABAP_BOOL .
  methods INBOUND_PROCESS
    importing
      !IC_XSLT type CXSLTDESC optional
      !IB_SKIP_FEEDBACK type ABAP_BOOL default ABAP_FALSE .
  methods GET_OUTPUT_DOCUMENTS
    importing
      !IC_XSLT type CXSLTDESC optional
      !IB_SKIP_FEEDBACK type ABAP_BOOL default ABAP_FALSE .
  methods PROCESS_OUTPUT_DOCUMENT
    importing
      !IS_GUID type STRING
      !IC_XSLT type CXSLTDESC optional
      !IS_XML type STRING optional
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods SAVE_FILES_LOCALLY
    importing
      !IS_GUID type STRING
      !IS_DATA type STRING
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods TRANSFER_DATA_TO_PD
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_IDP_DATA=>TY_MESSAGE
    exporting
      !EB_OK type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods GET_OUTPUT_DOCUMENT_DATA
    importing
      !IS_GUID type STRING
      !IC_XSLT type CXSLTDESC optional
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods TRANSFER_DATA_TO_SAP
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_IDP_DATA=>TY_MESSAGE
    exporting
      !EB_OK type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T
      !EB_SKIP_FEEDBACK type ABAP_BOOL .
  methods GET_PD_MAPID
    returning
      value(RST_PDMAP) type ZDYN_IDP_TMAP .
  methods ADD_ATTACHMENT
    importing
      !IS_DOCUMENT type ZDYN_CL_REST_TOOLS_IDP_DATA=>TY_DOCUMENT .
  methods EXTRACT_HEADER
    importing
      !IT_METADATA type ZDYN_CL_REST_TOOLS_IDP_DATA=>TT_METADATA
    changing
      value(CS_HEADER) type ANY .
  methods EXTRACT_ROWS
    importing
      !IT_METADATA type ZDYN_CL_REST_TOOLS_IDP_DATA=>TT_ROWMETA
    changing
      value(CS_ITEM) type ANY .
  methods MESSAGE_REQUESTED_SET
    importing
      !IS_GUID type STRING
      !IB_REQUESTED type ABAP_BOOL default 'X' .
  methods MESSAGE_UPDATE_FEEDBACK
    importing
      !IS_GUID type STRING
      !II_STATUS type I
      !IS_FEEDBACK type STRING .
  methods SEND_FEEDBACK
    importing
      !IS_GUID type STRING
      !IB_OK type ABAP_BOOL .
  methods GET_METADATA_DOCTYPE
    importing
      !II_DOCTYPE type I
    returning
      value(RT_METADOCTYPE) type ZDYN_CL_REST_TOOLS_IDP_DATA=>TT_DOCMETA .
  methods GET_CURRENT_DOCTYPE
    returning
      value(RS_DOCTYPE) type ZDYN_CL_REST_TOOLS_IDP_DATA=>TY_DOCTYPE .
protected section.

  methods CHECK_BEFORE_TRANS_DATA_TO_PD
    importing
      !IT_EXTDATA type ZDYN_LSTRU_EXTDATA
    exporting
      !EB_OK type ABAP_BOOL
      !EB_SKIP_FEEDBACK type ABAP_BOOL
      !ET_MESSAGES type BAPIRET2_T .
private section.
endclass. "ZDYN_CL_REST_TOOLS_IDP definition
class ZDYN_CL_REST_TOOLS_IDP implementation.
  METHOD add_attachment.

    DATA: li_size       TYPE i,
          li_bin_size   TYPE i,
          ls_message    TYPE bapiret2,
          ls_attachment TYPE zdyn_stru_archiving,
          lx_image      TYPE xstring.

    zdyn_cl_msg=>add_to_call_stack( ).

    li_size = strlen( is_document-base64 ).

    ls_attachment-filename  = is_document-documentname.

    CALL FUNCTION 'SKWF_MIMETYPE_OF_FILE_GET'
      EXPORTING
        filename = ls_attachment-filename
      IMPORTING
        mimetype = ls_attachment-mimetype.


    CALL FUNCTION 'SSFC_BASE64_DECODE'
      EXPORTING
        b64data = is_document-base64
        b64leng = li_size
      IMPORTING
        bindata = lx_image
      EXCEPTIONS
        OTHERS  = 1.
* some error leave
    IF sy-subrc = 0.
      CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
        EXPORTING
          buffer        = lx_image
        IMPORTING
          output_length = li_bin_size
        TABLES
          binary_tab    = ls_attachment-content.
      ls_attachment-binlength = li_bin_size.
      mr_attachments->add( ls_attachment ).
    ELSE.
*   error message
      ls_message-message_v1 = ls_attachment-filename.
      zdyn_cl_msg=>add_sysmsg( ).
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = '1R'
                                      ic_msgno = '516'
                                      ic_msgv1 = ls_message-message_v1 ).
* message e516(1r) with space.
    ENDIF.

  ENDMETHOD.
METHOD AUTHENTICATE.

  DATA: li_return_code TYPE i,
        ls_response    TYPE zdyn_cl_rest_tools_idp_data=>ty_authresponse,
        ls_auth        TYPE zdyn_cl_rest_tools_idp_data=>ty_auth,
        ls_json        TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.
* already authenticated ?

* authenticate
  set_new_rel_url( is_path = con_auth ).

  ls_auth-_username = is_user.
  ls_auth-_password = is_password.
  ls_json = serialize_to_json( ist_data       = ls_auth
                               ic_compress    = abap_false
                               ic_pretty_name = con_camel_case ).
  call_http_post( EXPORTING is_input       = ls_json
                  IMPORTING ei_return_code = li_return_code ).

  IF li_return_code <> 200.
    add_msg_1 e 045 zdyn_ws 1 li_return_code.
*    MESSAGE e045(zdyn_ws) with space.
    add_msg_0 e 048 zdyn_ws 0.
*    MESSAGE e048(zdyn_ws).
    rb_ok = abap_false.
    RETURN.
  ENDIF.

  deserialize_from_json( EXPORTING is_json  = ms_result
                         CHANGING  cst_data = ls_response ).

  IF ls_response-token IS NOT INITIAL.
    CONCATENATE 'Bearer' ls_response-token INTO mc_token SEPARATED BY space.
    CALL METHOD mo_http_client->request->set_header_field
      EXPORTING
        name  = con_authorization
        value = mc_token.

    rb_ok = abap_true.
  ELSE.
    add_msg_0 e 048 zdyn_ws 0.
*    MESSAGE e048(zdyn_ws).
    rb_ok = abap_false.
    RETURN.
  ENDIF.

  IF ib_test = abap_true AND rb_ok = abap_true.
    add_msg_0 s 047 zdyn_ws 0.
*    MESSAGE e047(zdyn_ws).
  ELSEIF rb_ok = abap_true.
    add_msg_0 s 047 zdyn_ws 1.
*    MESSAGE e047(zdyn_ws).
  ENDIF.

ENDMETHOD.
METHOD check_before_trans_data_to_pd.
* "exit point" to be implemented in subclasses.
  eb_ok = abap_true.
* Variables:
* @eb_ok = false - document will be marked in web service as erroneous and is not
*                  avaliable for processing again
* @eb_skip_feedback = abap_true - document skipped an that run and can be processed again
ENDMETHOD.
  METHOD constructor.

    zdyn_cl_msg=>add_to_call_stack( ).

    CALL METHOD super->constructor.

    mst_config = ist_config.

    mr_attachments->set_skip_attach_add( mst_config-skip_attach_add ).

  ENDMETHOD.
  METHOD extract_header.

    DATA: lc_key TYPE string.

    FIELD-SYMBOLS: <meta>  TYPE zdyn_cl_rest_tools_idp_data=>ty_metadata,
                   <field> TYPE any.

    LOOP AT it_metadata ASSIGNING <meta> WHERE rows IS INITIAL.
      CHECK <meta>-key IS NOT INITIAL.
      CHECK <meta>-value IS NOT INITIAL.
      lc_key = <meta>-key.
*   field names no spaces
      CONDENSE lc_key NO-GAPS.
      ASSIGN COMPONENT lc_key OF STRUCTURE cs_header TO <field>.
      CHECK <field> IS ASSIGNED.
*   add value conversion if required
      <field> = <meta>-value.
      UNASSIGN <field>.
    ENDLOOP.

  ENDMETHOD.
  METHOD extract_rows.

    DATA: lc_key TYPE string.

    FIELD-SYMBOLS: <meta>  TYPE zdyn_cl_rest_tools_idp_data=>ty_rowmeta,
                   <field> TYPE any.

    LOOP AT it_metadata ASSIGNING <meta> WHERE key IS NOT INITIAL.
      CHECK <meta>-value IS NOT INITIAL.
      lc_key = <meta>-key.
*   field names no spaces
      CONDENSE lc_key NO-GAPS.
      ASSIGN COMPONENT lc_key OF STRUCTURE cs_item TO <field>.
      CHECK <field> IS ASSIGNED.
*   add value conversion if required
      <field> = <meta>-value.
      UNASSIGN <field>.
    ENDLOOP.

  ENDMETHOD.
  METHOD get_current_doctype.

    DATA:
      li_return_code TYPE i,
      tt_doctype     TYPE zdyn_cl_rest_tools_idp_data=>tt_doctypes.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK mo_http_client IS BOUND.

    set_new_rel_url( EXPORTING is_path  = con_getdoctypes ).
    call_http_get( IMPORTING ei_return_code = li_return_code ).

    IF li_return_code = 200.

      deserialize_from_json( EXPORTING is_json  = ms_result
                              CHANGING cst_data = tt_doctype ).
      CHECK tt_doctype IS NOT INITIAL.
      READ TABLE tt_doctype INDEX 1 INTO rs_doctype.

    ENDIF.

  ENDMETHOD.
  METHOD get_metadata_doctype.

    DATA:
      ls_query       TYPE string,
      ls_id          TYPE string,
      li_return_code TYPE i.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK NOT ii_doctype IS INITIAL.
    CHECK mo_http_client IS BOUND.

    ls_id = ii_doctype.
    CONCATENATE 'documentTypeId=' ls_id INTO ls_query.
    CONDENSE ls_query NO-GAPS.

    set_new_rel_url( EXPORTING is_path  = con_getmetadata
                               is_query = ls_query ).
    call_http_get( IMPORTING ei_return_code = li_return_code ).

    IF li_return_code = 200.
      deserialize_from_json( EXPORTING is_json  = ms_result
                              CHANGING cst_data = rt_metadoctype ).
    ENDIF.

  ENDMETHOD.
METHOD get_output_document_data.

  DATA: li_return_code TYPE i,
        ls_query       TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_guid IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CONCATENATE 'Guid=' is_guid '&setRequested=false' INTO ls_query.

  set_new_rel_url( EXPORTING is_path  = con_getguid
                             is_query = ls_query ).
  call_http_get( IMPORTING ei_return_code = li_return_code ).

  IF li_return_code = 200.
*   process the data e.g. transform XML using xslt ...
    IF mo_file->is_doc_to_file( ) = abap_false.
      process_output_document( EXPORTING is_guid          = is_guid
                                         ic_xslt          = ic_xslt
                               IMPORTING eb_ok            = eb_ok
                                         eb_skip_feedback = eb_skip_feedback ).
    ELSE.
      eb_ok = mo_file->save_doc_in_xml_file( is_doc_no = is_guid
                                             is_xml    = ms_result ).
    ENDIF.
  ELSE.
*   error message
    zdyn_cl_msg=>add_sysmsg( ).
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'M8'
                                    ic_msgno    = '714'
                                    ic_msgv1    = is_guid ).
*   message e714(m8) with space space space.
  ENDIF.

ENDMETHOD.
METHOD get_output_documents.

  DATA: li_return_code   TYPE i,
        lb_ok            TYPE abap_bool,
        lb_skip_feedback TYPE abap_bool,
        lt_documents     TYPE zdyn_cl_rest_tools_idp_data=>tt_messageids.
  FIELD-SYMBOLS: <guid> TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mo_http_client IS BOUND.

  set_new_rel_url( is_path = con_getrequestable ).
  call_http_get( IMPORTING ei_return_code = li_return_code ).

  IF li_return_code = 200.
    deserialize_from_json( EXPORTING is_json  = ms_result
                           CHANGING  cst_data = lt_documents ).

    CLEAR mi_entry_counter.
*   list of outputdocuments to be downloaded
    LOOP AT lt_documents ASSIGNING <guid>.
      lb_skip_feedback = abap_false.

*     start collecting messages that will be sent back in feedback
      zdyn_cl_msg=>start_group( ).

*         the get the data
      get_output_document_data( EXPORTING is_guid          = <guid>
                                          ic_xslt          = ic_xslt
                                IMPORTING eb_ok            = lb_ok
                                          eb_skip_feedback = lb_skip_feedback ).

      zdyn_cl_msg=>stop_group( ).
*     after success update status in RSO
      IF ib_skip_feedback	= abap_false AND lb_skip_feedback = abap_false.
        CALL METHOD send_feedback
          EXPORTING
            is_guid = <guid>
            ib_ok   = lb_ok.
      ENDIF.
      mi_entry_counter = mi_entry_counter + 1.

*     clear the processed document/attachment data
      clear_document_data( ).
      CLEAR mst_message.
    ENDLOOP.

*   only a message when entries have been processed
    IF mi_entry_counter IS NOT INITIAL.
      zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).
    ENDIF.

  ELSE.
*   error message no variables are populated
    zdyn_cl_msg=>add_sysmsg( ).
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'FPRL'
                                    ic_msgno    = '013' ).
*   message e013(fprl).
  ENDIF.

ENDMETHOD.
METHOD GET_PD_MAPID.

  zdyn_cl_msg=>add_to_call_stack( ).

  SELECT SINGLE * FROM zdyn_idp_tmap INTO rst_pdmap
                 WHERE sysid    = sy-sysid
                   AND username = mst_config-username.

  IF rst_pdmap-obj IS INITIAL.
    rst_pdmap-obj = 'IV'.
  ENDIF.
  IF rst_pdmap-mapid IS INITIAL.
    rst_pdmap-mapid = 'IDP'.
  ENDIF.

ENDMETHOD.
METHOD INBOUND_PROCESS.

  DATA: ls_xml  TYPE string,
        ls_guid TYPE string.

  IF mo_file->is_file_to_doc( ) = abap_false.
    IF ic_xslt IS INITIAL.
      get_output_documents( ib_skip_feedback = ib_skip_feedback ).
    ELSE.
      get_output_documents( ic_xslt          = ic_xslt
                            ib_skip_feedback = ib_skip_feedback ).
    ENDIF.
  ELSE.
    mo_file->get_file_content( IMPORTING es_content = ls_xml ).
    IF ic_xslt IS INITIAL.
      process_output_document( is_guid = ls_guid
                               is_xml  = ls_xml ).
    ELSE.
      process_output_document( is_xml      = ls_xml
                               is_guid     = ls_guid
                               ic_xslt     = ic_xslt ).
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD message_requested_set.

  DATA:
        ls_query       TYPE string,
        ls_requested   TYPE string,
        lst_response   TYPE zdyn_cl_rest_tools_idp_data=>ty_status_response,
        ls_json        TYPE string,
        li_return_code TYPE i.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_guid IS INITIAL.
  CHECK mo_http_client IS BOUND.
  IF ib_requested = abap_true.
    ls_requested = 'true'.
  ELSE.
    ls_requested = 'false'.
  ENDIF.
  CONCATENATE 'guid=' is_guid '&setRequested=' ls_requested INTO ls_query.
  ls_json = '[ ]'.

  set_new_rel_url( EXPORTING is_path  = con_togglerequested
                             is_query = ls_query ).
  call_http_post( EXPORTING  is_input = ls_json
                  IMPORTING  ei_return_code = li_return_code ).

  IF li_return_code = 200.
    deserialize_from_json( EXPORTING is_json  = ms_result
                           CHANGING  cst_data = lst_response ).
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'ZDYN_WS'
                                    ic_msgno    = '000'
                                    ic_msgv1    = is_guid
                                    ic_msgv2    = lst_response-status
                                    ic_msgv3    = ls_requested ).
*   message s000(zdyn_ws) with space space space space.

  ENDIF.

ENDMETHOD.
METHOD message_update_feedback.

  DATA: lst_feedback   TYPE zdyn_cl_rest_tools_idp_data=>ty_feedback,
        lt_feedback    TYPE zdyn_cl_rest_tools_idp_data=>tt_feedback,
        ls_json        TYPE string,
        li_return_code TYPE i.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK NOT is_guid IS INITIAL.
  CHECK NOT ii_status IS INITIAL.
  CHECK mo_http_client IS BOUND.

  CLEAR lt_feedback.
  lst_feedback-_message_guid = is_guid.
  lst_feedback-_status_id = ii_status.
  lst_feedback-_feedback = is_feedback.
  APPEND lst_feedback TO lt_feedback.
  ls_json = serialize_to_json( ist_data       = lt_feedback
                               ic_compress    = abap_false
                               ic_pretty_name = con_camel_case ).

  set_new_rel_url( EXPORTING is_path  = con_messageupdate ).
  call_http_post( EXPORTING  is_input       = ls_json
                  IMPORTING  ei_return_code = li_return_code ).

  IF li_return_code = 200.
* any message here ?
  ENDIF.

ENDMETHOD.
METHOD PREPARE_CLIENT.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF mst_config-rfcdest IS NOT INITIAL.
    create_http_client( EXPORTING  ic_rfcdest   = mst_config-rfcdest
                                   ib_skip_test = mst_config-skip_http_test
                        EXCEPTIONS OTHERS       = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
  ELSE.
    create_http_client( EXPORTING  is_url       = con_idp_url
                                   ib_skip_test = mst_config-skip_http_test
                        EXCEPTIONS OTHERS       = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
  ENDIF.

  CHECK mo_http_client IS BOUND.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_accept
      value = con_mimetype_json.

  CALL METHOD mo_http_client->request->set_header_field
    EXPORTING
      name  = con_content_type
      value = con_mimetype_json.

ENDMETHOD.
METHOD process_output_document.

  DATA: lt_data         TYPE abap_trans_resbind_tab,
        ls_xml          TYPE string,
        ls_addr         TYPE string,
        lst_edidc       TYPE edidc,
        lc_object_id    TYPE saeobjid,
        lc_msgv1        TYPE sy-msgv1,
        lc_msgv2        TYPE sy-msgv2,
        lc_msgv3        TYPE sy-msgv3,
        lb_skip_parsing TYPE abap_bool,
        lt_messages     TYPE bapiret2_t.

  FIELD-SYMBOLS:
    <document> TYPE zdyn_cl_rest_tools_idp_data=>ty_document.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF is_xml IS NOT INITIAL.
    ms_result = is_xml.
  ENDIF.

*  IF ic_xslt NE space.
**    use XSLT from external call
*    mst_config-xslt = ic_xslt.
*  ENDIF.
**    set default XSLT values for import types
*  IF mst_config-xslt IS INITIAL.
*    IF mst_config-imp_type EQ con_imp_type_pd.
*      mst_config-xslt = con_xslt_to_pd.
*    ENDIF.
*    IF mst_config-imp_type EQ con_imp_type_idoc.
*      mst_config-xslt = con_xslt_to_idoc.
*    ENDIF.
*  ENDIF.
*    special preparation of lt_data for IDOC handling to suppress error.
  IF mst_config-imp_type = con_imp_type_idoc.
*    IF mst_config-xslt = con_xslt_to_pd.
*      mst_config-xslt = con_xslt_to_idoc.
*    ENDIF.
    lb_skip_parsing = abap_true.
*   root node after XSLT transformation is DOCUMENT
*   converted structure see template ZDYN_RSO_TO_PD xslt
*    lst_data-name = 'IDOC'.
*    GET REFERENCE OF mst_pdiv_document INTO lst_data-value.
*    APPEND lst_data TO lt_data.
  ENDIF.

*   do we need XSLT processing ?
*  IF NOT mst_config-xslt IS INITIAL.
*    transform_output_document( EXPORTING ic_xslt          = mst_config-xslt
*                                         ib_skip_parsing  = lb_skip_parsing
*                               IMPORTING eb_ok            = eb_ok
*                                         es_xml           = ls_xml
*                               CHANGING  ct_data          = lt_data ).
*  ENDIF.

  deserialize_from_json( EXPORTING is_json  = ms_result
                          CHANGING cst_data = mst_message ).

*  1. extract all attachments
  LOOP AT mst_message-documents ASSIGNING <document>.
    CALL METHOD add_attachment
      EXPORTING
        is_document = <document>.
  ENDLOOP.
*
* needs to be processed somehow - config stored in mst_config
  CASE mst_config-imp_type.
    WHEN con_imp_type_localfile.
*  1. save file on server
      CHECK NOT ls_xml IS INITIAL.
      save_files_locally( EXPORTING is_guid          = is_guid
                                    is_data          = ls_xml
                          IMPORTING eb_ok            = eb_ok
                                    eb_skip_feedback = eb_skip_feedback ).

    WHEN con_imp_type_idoc.

      CLEAR eb_ok.
*  2. create IDOC
      CHECK NOT ls_xml IS INITIAL.
*      ls_addr = is_document-documentid.
*      call_xml_to_idoc( EXPORTING  is_xml           = ls_xml
*                                   is_remote_addr   = ls_addr
*                        IMPORTING  eb_skip_feedback = eb_skip_feedback
*                        EXCEPTIONS OTHERS           = 1 ).
*      IF sy-subrc <> 0.
** Implement suitable error handling here
*        IF sy-msgid = 'EA' AND sy-msgno = '097'.
*          sy-msgty = 'S'.
*          eb_ok = abap_true.
*        ENDIF.
*        zdyn_cl_msg=>add_sysmsg( ).
*      ELSE.
** get created IDOC number
*        CLEAR: lc_msgv1, lc_msgv2.
*        zdyn_cl_bapi=>mo->get_idoc_control_record( EXPORTING is_external_doc_id = is_document-documentid
*                                                   IMPORTING es_record          = lst_edidc ).
*        IF lst_edidc-docnum IS NOT INITIAL.
*          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*            EXPORTING
*              input  = lst_edidc-docnum
*            IMPORTING
*              output = lc_msgv1.
*          lc_msgv2 = lst_edidc-rcvprn.
*          lc_object_id = lst_edidc-docnum.
*
*          archive_attachment_data( EXPORTING  ic_sap_object = 'IDOC'
*                                              ic_object_id  = lc_object_id ).
*        ENDIF.
** we need a success message
*        eb_ok = abap_true.
*        lc_msgv3 = is_document-documentid.
*        zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
*                                        ic_msgid    = 'GJ'
*                                        ic_msgno    = '859'
*                                        ic_msgv1    = lc_msgv1
*                                        ic_msgv2    = lc_msgv2
*                                        ic_msgv3    = lc_msgv3 ).
**       message s859(gj) with space space space.
*      ENDIF.
    WHEN con_imp_type_pd.
*  3. send to PD
      transfer_data_to_pd( EXPORTING is_document      = mst_message
                           IMPORTING eb_ok            = eb_ok
                                     eb_skip_feedback = eb_skip_feedback
                                     et_messages      = lt_messages ).
      zdyn_cl_msg=>add_msgs( EXPORTING it_messages = lt_messages
                                       ii_level    = zdyn_cl_msg=>con_message_level_1 ).

    WHEN con_imp_type_sap.
*  4. send to SAP
      transfer_data_to_sap( EXPORTING is_document      = mst_message
                            IMPORTING eb_ok            = eb_ok
                                      eb_skip_feedback = eb_skip_feedback
                                      et_messages      = lt_messages ).
      zdyn_cl_msg=>add_msgs( EXPORTING it_messages = lt_messages
                                       ii_level    = zdyn_cl_msg=>con_message_level_1 ).
    WHEN OTHERS.
*   still to be developed
  ENDCASE.

ENDMETHOD.
METHOD SAVE_FILES_LOCALLY.

  DATA: ls_filename TYPE string,
        lt_data     TYPE rmps_t_1024,
        lc_file     TYPE text255.

  FIELD-SYMBOLS: <lst_att> TYPE zdyn_stru_archiving.

  zdyn_cl_msg=>add_to_call_stack( ).

  CLEAR eb_ok.
  CHECK NOT mst_config-importfile IS INITIAL.

  CONCATENATE is_guid '.txt' INTO lc_file.

  mo_file->get_file_name_using_path( EXPORTING  ic_logical_path   = mst_config-importfile
                                                is_file_name      = lc_file
                                     IMPORTING  es_full_file_name = ls_filename
                                     EXCEPTIONS OTHERS            = 1 ).
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_sysmsg( ).
    EXIT.
  ENDIF.

  convert_string_to_tt_tbl1024( EXPORTING is_string = is_data
                                IMPORTING et_data   = lt_data ).

* save data file
  eb_ok = mo_file->store_file_on_appserver( is_filename = ls_filename
                                            it_data     = lt_data ).
  IF eb_ok = abap_false.
    zdyn_cl_msg=>add_sysmsg( ).
    EXIT.
  ENDIF.
  zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                  ic_msgid    = '1E'
                                  ic_msgno    = '226'
                                  ic_msgv1    = lc_file ).

  LOOP AT mr_attachments->mt_attachments ASSIGNING <lst_att>.

    mo_file->get_file_name_using_path( EXPORTING  ic_logical_path   = mst_config-importfile
                                                  is_file_name      = <lst_att>-filename
                                       IMPORTING  es_full_file_name = ls_filename
                                       EXCEPTIONS OTHERS            = 0 ).
*   save the image file
    eb_ok = mo_file->store_file_on_appserver( is_filename = ls_filename
                                              it_data     = <lst_att>-content ).
    IF eb_ok = abap_false.
      zdyn_cl_msg=>add_sysmsg( ).
      EXIT.
    ENDIF.

    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'S'
                                    ic_msgid    = '1R'
                                    ic_msgno    = '412'
                                    ic_msgv1    = <lst_att>-filename ).
*  message s412(1r) with space.

  ENDLOOP.

  IF eb_ok = abap_true.
    add_msg_1 s 050 zdyn_ws 0 is_guid.
*   message s050(zdyn_ws) with space.
  ENDIF.

ENDMETHOD.
  METHOD send_feedback.

    DATA: lt_messages TYPE bapiret2_t,
          li_status   TYPE i,
          ls_message  TYPE string.

    FIELD-SYMBOLS:
          <message> TYPE bapiret2.

    lt_messages = zdyn_cl_msg=>get_messages( ib_only_group = abap_true ).
* prepare feedback string
    LOOP AT lt_messages ASSIGNING <message>.
      IF sy-tabix = 1.
        ls_message = <message>-message.
      ELSE.
        CONCATENATE ls_message <message>-message INTO ls_message SEPARATED BY space.
      ENDIF.
    ENDLOOP.

    IF ib_ok = abap_true.
      li_status = con_status_success.
*     toggle the requested flag
      CALL METHOD message_requested_set
        EXPORTING
          is_guid      = is_guid
          ib_requested = abap_true.
    ELSE.
      li_status = con_status_error.
    ENDIF.

    CALL METHOD message_update_feedback
      EXPORTING
        is_guid     = is_guid
        ii_status   = li_status
        is_feedback = ls_message.

  ENDMETHOD.
METHOD transfer_data_to_pd.

  DATA: lst_pdmap   TYPE zdyn_idp_tmap,
        ls_header   TYPE zdyn_stru_idp_shdr,
        ls_item     TYPE zdyn_stru_idp_sitm,
        ls_bapiret2 TYPE bapiret2,
        lst_data    TYPE zdyn_cl_rest_tools_idp_data=>ty_rowmeta.

  FIELD-SYMBOLS: <document> TYPE zdyn_cl_rest_tools_idp_data=>ty_document,
                 <metadata> TYPE zdyn_cl_rest_tools_idp_data=>ty_metadata,
                 <data>     TYPE zdyn_cl_rest_tools_idp_data=>ty_rowmeta,
                 <row>      TYPE zdyn_cl_rest_tools_idp_data=>ty_row,
                 <log>      TYPE zdyn_cl_rest_tools_idp_data=>ty_statuslog.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK mst_config-imp_type = con_imp_type_pd.

  LOOP AT is_document-documents ASSIGNING <document>.
* header fields
    CLEAR ls_header.
*   general data
    MOVE-CORRESPONDING is_document TO ls_header.
* use structure
    CALL METHOD extract_header
      EXPORTING
        it_metadata = <document>-metadata
      CHANGING
        cs_header   = ls_header.

    add_extdata( is_data = ls_header
                 ic_node = con_level_header ).

    LOOP AT <document>-metadata ASSIGNING <metadata> WHERE rows IS INITIAL.
      MOVE-CORRESPONDING <metadata> TO lst_data.
      add_extdata( is_data   = lst_data
                   ic_node   = con_level_custom
                   ic_parent = con_level_header ).

    ENDLOOP.  "header metadata
* item fields
    LOOP AT <document>-metadata ASSIGNING <metadata> WHERE rows IS NOT INITIAL.
*  extract the line item data
      LOOP AT <metadata>-rows ASSIGNING <row>.
        CLEAR ls_item.
        CALL METHOD extract_rows
          EXPORTING
            it_metadata = <row>-metadata
          CHANGING
            cs_item    = ls_item.
        IF ls_item IS INITIAL.
          ls_item-rowkey = <metadata>-key.
          add_extdata( is_data   = ls_item
                       ic_node   = con_level_item
                       ic_parent = con_level_header ).

          LOOP AT <row>-metadata ASSIGNING <data>.
            add_extdata( is_data   = <data>
                         ic_node   = con_level_customitem
                         ic_parent = con_level_item ).
          ENDLOOP.
        ELSE.
          ls_item-rowkey = <metadata>-key.
          add_extdata( is_data   = ls_item
                       ic_node   = con_level_item
                       ic_parent = con_level_header ).
        ENDIF.

      ENDLOOP. "item metadata rows
    ENDLOOP. "item rows
  ENDLOOP.  " documents

  lst_pdmap = get_pd_mapid( ).

  IF lst_pdmap-obj = zdyn_if_rest_data=>con_pdiv_obj.
* default values
    ls_bapiret2-type = 'S'.
    ls_bapiret2-id = '/COCKPIT/GEN'.
    ls_bapiret2-number = '099'.

*   processlog table
    LOOP AT is_document-statuslogs ASSIGNING <log>.
      ls_bapiret2-message_v1 = <log>-createdat.
      ls_bapiret2-message_v2 = <log>-status.
      ls_bapiret2-message_v3 = <log>-description.
      IF strlen( <log>-description ) > 50.
        ls_bapiret2-message_v4 = <log>-description+50.
      ELSE.
        CLEAR ls_bapiret2-message_v4.
      ENDIF.

      add_extdata( is_data   = ls_bapiret2
                   ic_node   = con_level_processlog
                   ic_parent = con_level_header ).
    ENDLOOP.
  ENDIF.

  check_before_trans_data_to_pd( EXPORTING it_extdata       = mt_extdata
                                 IMPORTING eb_ok            = eb_ok
                                           eb_skip_feedback = eb_skip_feedback
                                           et_messages      = et_messages ).

  IF eb_ok = abap_false OR eb_skip_feedback = abap_true.
    CLEAR mt_extdata.
    RETURN.
  ENDIF.

  eb_ok = call_pd_rfc( ic_obj      = lst_pdmap-obj
                       ic_mapid    = lst_pdmap-mapid ).

  CLEAR: mt_extdata.

ENDMETHOD.
METHOD TRANSFER_DATA_TO_SAP.

  zdyn_cl_msg=>add_to_call_stack( ).
*  needs to be implemented in a project (call any SAP BAPI ...)
*  use data from attributes MST_CONFIG, MST_ACCOUNT and MST_DOCUMENT
*  attachment in attribute table MR_ATTACHMENT->MT_ATTACHMENTS

ENDMETHOD.
