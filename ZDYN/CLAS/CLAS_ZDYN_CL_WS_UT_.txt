
class ZDYN_CL_WS_UT definition
  public
  create public .

public section.

  methods ASSERT_LEN
    importing
      !TAB type ANY TABLE
      !LEN type INT4
      !MSG type STRING optional
    returning
      value(RESULT) type INT2 .
  methods ASSERT_TRUE
    importing
      !ACT type ABAP_BOOL
      !MSG type STRING optional
    returning
      value(RESULT) type INT2 .
  methods ASSERT_FALSE
    importing
      !ACT type ABAP_BOOL
      !MSG type STRING optional
    returning
      value(RESULT) type INT2 .
  methods ASSERT_EQUALS
    importing
      !ACT type ANY
      !EXP type ANY
      !MSG type STRING optional
    returning
      value(RESULT) type INT2 .
  methods ASSERT_READ
    importing
      !MSG type STRING optional
    returning
      value(RESULT) type INT2 .
  methods ASSERT_NOT_READ
    importing
      !MSG type STRING optional
    returning
      value(RESULT) type INT2 .
  methods ASSERT_INITIAL
    importing
      !ACT type ANY
      !MSG type CSEQUENCE optional
    returning
      value(RESULT) type INT2 .
  methods ASSERT_NOT_INITIAL
    importing
      !ACT type ANY
      !MSG type CSEQUENCE optional
    returning
      value(RESULT) type INT2 .
protected section.
private section.
endclass. "ZDYN_CL_WS_UT definition
class ZDYN_CL_WS_UT implementation.
METHOD ASSERT_EQUALS.

  DATA: lb_failed TYPE abap_bool.

  IF msg IS NOT INITIAL.
    lb_failed = cl_abap_unit_assert=>assert_equals(
                  act              = act
                  exp              = exp
                  msg              = msg ).
  ELSE.
    lb_failed = cl_abap_unit_assert=>assert_equals(
                  exp              = exp
                  act              = act ).
  ENDIF.
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
METHOD ASSERT_FALSE.

  DATA: lb_failed TYPE abap_bool.

  IF msg IS NOT INITIAL.
    lb_failed = cl_abap_unit_assert=>assert_equals(
                 act                  = act
                 exp                  = abap_false
                 msg                  = msg ).
  ELSE.
    lb_failed = cl_abap_unit_assert=>assert_equals(
                 act                  = act
                 exp                  = abap_false ).

  ENDIF.
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
METHOD assert_initial.

  DATA: lb_failed TYPE abap_bool.
  lb_failed = cl_abap_unit_assert=>assert_initial( act              = act
                                                   msg              = msg ).
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
METHOD ASSERT_LEN.

  DATA: ln_len1   TYPE n,
        ln_len2   TYPE n,
        lc_msg    TYPE string,
        lb_failed TYPE abap_bool.

  DESCRIBE TABLE tab LINES ln_len1.

  IF msg IS INITIAL.
    ln_len2 = len.
    CONCATENATE 'Expected lenght of table' ln_len2 'but was' ln_len1 INTO lc_msg SEPARATED BY space.
  ELSE.
    lc_msg = msg.
  ENDIF.


  lb_failed = cl_abap_unit_assert=>assert_equals( act = ln_len1
                                                  exp = len
                                                  msg = lc_msg ).
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
METHOD assert_not_initial.

  DATA: lb_failed TYPE abap_bool.
  lb_failed = cl_abap_unit_assert=>assert_not_initial( act              = act
                                                       msg              = msg ).
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
METHOD ASSERT_NOT_READ.

  DATA: lb_failed TYPE abap_bool.

  CHECK sy-subrc = 0.

  IF msg IS NOT INITIAL.
    lb_failed = cl_abap_unit_assert=>assert_subrc(
                  msg = msg
                  exp = 4
                  act = 0 ).
  ELSE.
    lb_failed = cl_abap_unit_assert=>assert_subrc(
                  exp = 4
                  act = 0 ).
  ENDIF.
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
METHOD ASSERT_READ.

  DATA: lb_failed TYPE abap_bool.

  IF msg IS NOT INITIAL.
    lb_failed = cl_abap_unit_assert=>assert_subrc(
                  msg              = msg ).
  ELSE.
    lb_failed = cl_abap_unit_assert=>assert_subrc( ).
  ENDIF.
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
METHOD ASSERT_TRUE.

  DATA: lb_failed TYPE abap_bool.

  IF msg IS NOT INITIAL.
    lb_failed = cl_abap_unit_assert=>assert_equals(
                 act                  = act
                 exp                  = abap_true
                 msg                  = msg ).
  ELSE.
    lb_failed = cl_abap_unit_assert=>assert_equals(
                 act                  = act
                 exp                  = abap_true ).
  ENDIF.
  CHECK lb_failed = abap_false.
  result = 1.

ENDMETHOD.
