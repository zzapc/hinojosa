
class ZDYN_LIC_CL_TRANS definition
  public
  create public .

public section.
  type-pools ABAP .
  type-pools TRWBO .

  constants CON_TRANSPORT_OF_COPIES type TRFUNCTION value 'T' ##NO_TEXT.
  constants CON_WORKBENCH_REQUEST type TRFUNCTION value 'K' ##NO_TEXT.
  constants CON_CUSTOMIZING_REQUEST type TRFUNCTION value 'W' ##NO_TEXT.
  constants CON_DEVELOPMENT_TASK type TRFUNCTION value 'S' ##NO_TEXT.
  constants CON_CUSTOMIZING_TASK type TRFUNCTION value 'Q' ##NO_TEXT.
  constants CON_STATUS_MODIFIABLE type TRSTATUS value 'D' ##NO_TEXT.
  constants CON_TARGET_SYSTEM_LOCAL type E070-TARSYSTEM value ' ' ##NO_TEXT.
  constants CON_PGMID_OBJECT type E071-PGMID value 'R3TR' ##NO_TEXT.
  constants CON_PGMID_ADOS type E071-PGMID value 'R3OB' ##NO_TEXT.
  constants CON_OBJECT_TABLE_CONTENT type E071-OBJECT value 'TABU' ##NO_TEXT.
  constants CON_OBJECT_NUMBER_RANGE type E071-OBJECT value 'NROB' ##NO_TEXT.
  constants CON_OBJECT_NAMESPACE type E071-OBJECT value 'NSPC' ##NO_TEXT.
  constants CON_SOFT_COMPONENT type E071-OBJECT value 'VERS' ##NO_TEXT.
  constants CON_OBJECT_XPRA type E071-OBJECT value 'XPRA' ##NO_TEXT.
  constants CON_OBJFUNC_WITH_OBJECT_KEYS type E071-OBJFUNC value 'K' ##NO_TEXT.
  constants CON_OBJFUNC_NORMAL type E071-OBJFUNC value ' ' ##NO_TEXT.
  data MS_HEADER type TRWBO_REQUEST read-only .
  constants CON_MAX_KEYLEN type I value 120 ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IC_REQUEST type TRKORR
      !IC_TEXT type ANY optional
      !IB_KEYS type ABAP_BOOL default ABAP_FALSE
    exceptions
      NOT_FOUND .
  methods ADD_ENTRY_START
    importing
      !IC_PGMID type E071-PGMID default CON_PGMID_OBJECT
      !IC_OBJECT type E071-OBJECT default CON_OBJECT_TABLE_CONTENT
      !IC_OBJECT_FUNC type E071-OBJFUNC default CON_OBJFUNC_WITH_OBJECT_KEYS
      !IC_ACTIVITY type ANY default SPACE
      !IC_OBJECT_NAME type ANY optional
      value(IR_TABLE) type ref to CL_ABAP_STRUCTDESCR optional
    exceptions
      ERROR_OCCURRED .
  methods ADD_ENTRY
    importing
      !IS_ENTRY type ANY optional
    exceptions
      ERROR_OCCURRED .
  methods ADD_ENTRY_FINISH
    exceptions
      ERROR_OCCURRED .
  methods LOCK
    exceptions
      FOREIGN_LOCK .
  methods UNLOCK .
  methods AS_STRING
    returning
      value(EC_STRING) type STRING .
protected section.

  types:
    begin of YS_ADD_ENTRY,
    task        type trkorr,
    e071        TYPE e071,
    obj_entries TYPE STANDARD TABLE OF e071k with key table_line,
    ddic_hdr    type  x030l,
    end of YS_ADD_ENTRY .

  data MS_ADD_ENTRY type YS_ADD_ENTRY .
private section.

  types:
    yx_256(256) type x .

  class-data MR_TOOLS type ref to ZDYN_LIC_CL_TOOLS .

  methods REPLACE_LAST_FLD_WITH_WILDCARD
    importing
      !IC_TABNAME type E071K-OBJNAME
    changing
      !CC_TABKEY type E071K-TABKEY
    exceptions
      ERROR_OCCURRED .
  methods READ
    importing
      !IB_KEYS type ABAP_BOOL default ABAP_FALSE
    exceptions
      NOT_FOUND .
  methods CREATE_TASK
    importing
      !IC_TASK_TYPE type TRFUNCTION optional
    returning
      value(EC_TASK) type TRKORR
    exceptions
      ERROR_OCCURRED .
  methods DISPLAY_MSG
    importing
      !IC_TYPE type SYMSGTY
      !IC_ID type SYMSGID
      !IN_NO type SYMSGNO
      !IC_V1 type ANY
      !IC_V2 type ANY
      !IC_V3 type ANY
      !IC_V4 type ANY .
  methods GET_MSGVAR
    importing
      !I_MSGV type ANY
    returning
      value(EC_MSGV) type SY-MSGV1 .
  methods DISPLAY_SYSMSG .
endclass. "ZDYN_LIC_CL_TRANS definition
class ZDYN_LIC_CL_TRANS implementation.
METHOD add_entry .

  DATA: ls_obj_entr LIKE LINE OF ms_add_entry-obj_entries,
        lc_tabkey   LIKE ls_obj_entr-tabkey,
        lc_field    LIKE lc_tabkey,
        li_keylen   TYPE i,
        li_len      TYPE i.

  FIELD-SYMBOLS: <lx_tabkey> TYPE x,
                 <lx_entry>  TYPE x,
                 <l_field>   TYPE any.

  CHECK NOT ms_add_entry-e071 IS INITIAL.
  ms_add_entry-e071-objfunc   = con_objfunc_with_object_keys.

  MOVE-CORRESPONDING ms_add_entry-e071 TO ls_obj_entr.
  ls_obj_entr-mastertype = ms_add_entry-e071-object.
  ls_obj_entr-objname    =
  ls_obj_entr-mastername = ms_add_entry-e071-obj_name.
  CLEAR ls_obj_entr-objfunc.

  READ TABLE ms_add_entry-obj_entries TRANSPORTING NO FIELDS
    WITH KEY trkorr  = ls_obj_entr-trkorr
             pgmid   = ls_obj_entr-pgmid
             object  = ls_obj_entr-object
             objname = ls_obj_entr-objname.
  ls_obj_entr-as4pos  = sy-tabix + 1.

  ASSIGN ls_obj_entr-tabkey TO <lx_tabkey> CASTING.
  TRY.
      ASSIGN is_entry TO <lx_entry> CASTING.
    CATCH cx_sy_assign_cast_illegal_cast.
      DO.
        ASSIGN COMPONENT sy-index OF STRUCTURE is_entry TO <l_field>.
        IF sy-subrc <> 0 OR <l_field> IS INITIAL.
          EXIT.
        ENDIF.
        WRITE <l_field> TO lc_field.
        CONCATENATE lc_tabkey lc_field INTO lc_tabkey.
      ENDDO.
      ASSIGN lc_tabkey TO <lx_entry> CASTING.
  ENDTRY.

  IF mr_tools->is_unicode_system( ) = abap_true.
    li_keylen = mr_tools->get_keylen( ls_obj_entr-objname ).
  ELSE.
    li_keylen = ms_add_entry-ddic_hdr-keylen.
  ENDIF.
  li_len = con_max_keylen * cl_abap_char_utilities=>charsize.
  IF li_keylen <= li_len.
    <lx_tabkey>(ms_add_entry-ddic_hdr-keylen) =
                        <lx_entry>(ms_add_entry-ddic_hdr-keylen).
  ELSE.
    li_len              = li_len - 1.
    <lx_tabkey>(li_len) = <lx_entry>(li_len).
    CALL METHOD replace_last_fld_with_wildcard
      EXPORTING
        ic_tabname = ls_obj_entr-objname
      CHANGING
        cc_tabkey  = ls_obj_entr-tabkey
      EXCEPTIONS
        OTHERS     = 1.
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
  ENDIF.

  APPEND ls_obj_entr TO ms_add_entry-obj_entries.
ENDMETHOD.
METHOD add_entry_finish .

  CHECK NOT ms_add_entry-e071 IS INITIAL.

  CALL FUNCTION 'TR_APPEND_TO_COMM'
    EXPORTING
      pi_korrnum = ms_add_entry-task
      wi_e071    = ms_add_entry-e071
    TABLES
      wt_e071k   = ms_add_entry-obj_entries
    EXCEPTIONS
      OTHERS     = 22.
  IF sy-subrc <> 0.
    CLEAR ms_add_entry.
    RAISE error_occurred.
  ENDIF.

  CLEAR ms_add_entry.

ENDMETHOD.
METHOD add_entry_start .

  create_task( RECEIVING  ec_task        = ms_add_entry-task
               EXCEPTIONS error_occurred = 1 ).
  IF sy-subrc <> 0. RAISE error_occurred. ENDIF.

  ms_add_entry-e071-trkorr = ms_add_entry-task.
  ms_add_entry-e071-as4pos = 1.
  ms_add_entry-e071-pgmid  = ic_pgmid.
  ms_add_entry-e071-object = ic_object.
  IF ic_object_name IS NOT INITIAL.
    ms_add_entry-e071-obj_name = ic_object_name.
  ELSE.
    ms_add_entry-e071-obj_name = mr_tools->get_relative_name( ir_table ).
  ENDIF.
  ms_add_entry-e071-objfunc = ic_object_func.
  ms_add_entry-e071-activity = ic_activity.

  CHECK ic_object = con_object_table_content.

  IF ir_table IS INITIAL.
    ir_table ?= cl_abap_typedescr=>describe_by_name( ic_object_name ).
  ENDIF.

  mr_tools->get_ddic_header( EXPORTING ir_descr  = ir_table
                             RECEIVING es_header = ms_add_entry-ddic_hdr
                             EXCEPTIONS OTHERS  = 1 ).
  IF sy-subrc <> 0. RAISE error_occurred. ENDIF.

ENDMETHOD.
METHOD as_string.
  CONCATENATE ms_header-h-trkorr ms_header-h-as4text INTO ec_string SEPARATED BY space.
ENDMETHOD.
METHOD constructor .

  super->constructor( ).

  CREATE OBJECT mr_tools.

  ms_header-h-trkorr  = ic_request.
  IF ic_text IS NOT INITIAL.
    ms_header-h-as4text = ic_text.
  ENDIF.

  read( EXPORTING  ib_keys = ib_keys
        EXCEPTIONS OTHERS  = 1 ).
  IF sy-subrc <> 0. RAISE not_found. ENDIF.

ENDMETHOD.
METHOD create_task .

  DATA: lt_request_headers TYPE trwbo_request_headers,
        lc_task_type       TYPE trfunction.
  FIELD-SYMBOLS <hdr>      LIKE LINE OF lt_request_headers.

* Cannot add task to transport of copies
  IF ms_header-h-trfunction = con_transport_of_copies.
    ec_task = ms_header-h-trkorr.
    EXIT.
  ENDIF.

* Check if there is already a matching task available
  CALL FUNCTION 'TR_READ_REQUEST_WITH_TASKS'
    EXPORTING
      iv_trkorr          = ms_header-h-trkorr
    IMPORTING
      et_request_headers = lt_request_headers
    EXCEPTIONS
      OTHERS             = 1.
  IF sy-subrc <> 0. RAISE error_occurred. ENDIF.

  IF ic_task_type IS INITIAL.
    IF ms_header-h-trfunction = con_workbench_request.
      lc_task_type = con_development_task.
    ELSE.
      lc_task_type = con_customizing_task.
    ENDIF.
  ELSE.
    lc_task_type = ic_task_type.
  ENDIF.

  READ TABLE lt_request_headers ASSIGNING <hdr>
    WITH KEY trfunction = lc_task_type
             trstatus   = con_status_modifiable
             as4user    = sy-uname.
  IF sy-subrc = 0.
*   OK, modifiable task of the current user found
    ec_task = <hdr>-trkorr.
  ELSE.
    CALL FUNCTION 'TRINT_INSERT_NEW_COMM'
      EXPORTING
        wi_kurztext   = ms_header-h-as4text
        wi_trfunction = lc_task_type
        wi_strkorr    = ms_header-h-trkorr
      IMPORTING
        we_trkorr     = ec_task
      EXCEPTIONS
        OTHERS        = 9.
    IF sy-subrc <> 0. RAISE error_occurred. ENDIF.
  ENDIF.

ENDMETHOD.
METHOD display_msg .

  data: lc_v1 type syst-msgv1,
        lc_v2 like lc_v1,
        lc_v3 like lc_v1,
        lc_v4 like lc_v1.

  CHECK NOT: ic_type IS INITIAL,
             ic_id   IS INITIAL.

  CALL FUNCTION 'SAPGUI_SET_FUNCTIONCODE'
    EXPORTING
      functioncode           = space
    EXCEPTIONS
      function_not_supported = 0.

  lc_v1 = get_msgvar( ic_v1 ).
  lc_v2 = get_msgvar( ic_v2 ).
  lc_v3 = get_msgvar( ic_v3 ).
  lc_v4 = get_msgvar( ic_v4 ).

  MESSAGE ID ic_id
        TYPE ic_type
      NUMBER in_no
        WITH lc_v1 lc_v2 lc_v3 lc_v4.

ENDMETHOD.
METHOD display_sysmsg.
  CALL METHOD display_msg(
      ic_type = sy-msgty
      ic_id   = sy-msgid
      in_no   = sy-msgno
      ic_v1   = sy-msgv1
      ic_v2   = sy-msgv2
      ic_v3   = sy-msgv3
      ic_v4   = sy-msgv4 ).
ENDMETHOD.
METHOD get_msgvar .

  DATA: lr_descr TYPE REF TO cl_abap_typedescr,
        lr_sd    TYPE REF TO cl_abap_structdescr,
        lr_ed    TYPE REF TO cl_abap_elemdescr,
        li_len   TYPE i.

  FIELD-SYMBOLS: <comp>  LIKE LINE OF lr_sd->components,
                 <field> TYPE any.

  lr_descr = cl_abap_typedescr=>describe_by_data( i_msgv ).

  CASE lr_descr->type_kind.
    WHEN lr_descr->typekind_dref.
      IF i_msgv IS INITIAL.
        ec_msgv = 'Initial data reference'.
      ELSE.
        ASSIGN i_msgv->* TO <field>.
        ec_msgv = get_msgvar( <field> ).
      ENDIF.

    WHEN lr_descr->typekind_oref.
      IF i_msgv IS INITIAL.
        ec_msgv = 'Initial object reference'.
      ELSE.
        ec_msgv = mr_tools->get_relative_name( i_msgv ).
      ENDIF.

    WHEN lr_descr->typekind_struct1 OR lr_descr->typekind_struct2.
      lr_sd ?= lr_descr.
      ec_msgv = mr_tools->get_relative_name( lr_descr ).
      CONCATENATE ec_msgv ':' INTO ec_msgv.
      LOOP AT lr_sd->components ASSIGNING <comp>
      WHERE type_kind EQ lr_sd->typekind_char.
        ASSIGN COMPONENT <comp>-name OF STRUCTURE i_msgv TO <field>.
        CHECK NOT <field> IS INITIAL.
        CONCATENATE ec_msgv <comp>-name '=' <field> ';' INTO ec_msgv.
        li_len = strlen( ec_msgv ).
        IF li_len GE 50.
          EXIT.
        ENDIF.
      ENDLOOP.

    WHEN lr_descr->typekind_date OR lr_descr->typekind_time.
      WRITE i_msgv TO ec_msgv.

    WHEN lr_descr->typekind_num.
      WRITE i_msgv TO ec_msgv NO-ZERO.

    WHEN lr_descr->typekind_char.
      lr_ed ?= lr_descr.
      IF lr_ed->edit_mask IS NOT INITIAL.
        WRITE i_msgv TO ec_msgv USING EDIT MASK lr_ed->edit_mask.
      ELSE.
        ec_msgv = i_msgv.
        CONDENSE ec_msgv.
      ENDIF.

    WHEN lr_descr->typekind_string.
      ec_msgv = i_msgv.

    WHEN OTHERS.
      ec_msgv = i_msgv.
      CONDENSE ec_msgv.

  ENDCASE.

ENDMETHOD.
METHOD lock .

  CALL FUNCTION 'ENQUEUE_E_TRKORR'
    EXPORTING
      trkorr         = ms_header-h-trkorr
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2.
  IF sy-subrc <> 0.
    RAISE foreign_lock.
  ENDIF.

ENDMETHOD.
METHOD read .

  CALL FUNCTION 'TR_READ_REQUEST'
    EXPORTING
      iv_read_e070      = abap_true
      iv_read_e07t      = abap_true
      iv_read_objs_keys = ib_keys
    CHANGING
      cs_request        = ms_header
    EXCEPTIONS
      OTHERS            = 1.
  IF sy-subrc <> 0. RAISE not_found. ENDIF.

ENDMETHOD.
METHOD replace_last_fld_with_wildcard .

  DATA: lc_rel_name   TYPE ddobjname,
        lt_field_list TYPE ddfields,
        ls_field      LIKE LINE OF lt_field_list,
        li_rest       TYPE i,
        li_sum        TYPE i,
        li_prev       TYPE i.

  lc_rel_name = ic_tabname.
  CALL FUNCTION 'DDIF_FIELDINFO_GET'
    EXPORTING
      tabname   = lc_rel_name
      all_types = abap_true
    TABLES
      dfies_tab = lt_field_list
    EXCEPTIONS
      OTHERS    = 1.
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

  SORT lt_field_list BY position.
  LOOP AT lt_field_list INTO ls_field WHERE keyflag = abap_true.
    li_sum  = ls_field-outputlen + li_sum.
    IF li_sum >= con_max_keylen.
      li_rest = con_max_keylen - li_prev.
      cc_tabkey+li_prev(li_rest) = '*'.
      EXIT.
    ENDIF.
    li_prev = li_sum.
  ENDLOOP.

ENDMETHOD.
METHOD unlock .

  CALL FUNCTION 'DEQUEUE_E_TRKORR'
    EXPORTING
      trkorr = ms_header-h-trkorr.

ENDMETHOD.
