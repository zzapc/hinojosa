
class ZDYN_CL_HTTP_CLIENT definition
  public
  create public .

public section.

  interfaces IF_HTTP_CLIENT .
  interfaces ZDYN_IF_HTTP_CLIENT .
  interfaces ZDYN_IF_REST_DATA .

  aliases CON_MIMETYPE_JSON
    for ZDYN_IF_REST_DATA~CON_MIMETYPE_JSON .
  aliases CON_MIMETYPE_PROBLEM_JSON
    for ZDYN_IF_REST_DATA~CON_MIMETYPE_PROBLEM_JSON .
  aliases CON_MIMETYPE_XML
    for ZDYN_IF_REST_DATA~CON_MIMETYPE_XML .
  aliases CO_COMPRESS_BASED_ON_MIME_TYPE
    for IF_HTTP_CLIENT~CO_COMPRESS_BASED_ON_MIME_TYPE .
  aliases CO_COMPRESS_IN_ALL_CASES
    for IF_HTTP_CLIENT~CO_COMPRESS_IN_ALL_CASES .
  aliases CO_COMPRESS_NONE
    for IF_HTTP_CLIENT~CO_COMPRESS_NONE .
  aliases CO_DISABLED
    for IF_HTTP_CLIENT~CO_DISABLED .
  aliases CO_ENABLED
    for IF_HTTP_CLIENT~CO_ENABLED .
  aliases CO_EVENT
    for IF_HTTP_CLIENT~CO_EVENT .
  aliases CO_PROMPT
    for IF_HTTP_CLIENT~CO_PROMPT .
  aliases CO_TIMEOUT_DEFAULT
    for IF_HTTP_CLIENT~CO_TIMEOUT_DEFAULT .
  aliases CO_TIMEOUT_INFINITE
    for IF_HTTP_CLIENT~CO_TIMEOUT_INFINITE .
  aliases PROPERTYTYPE_ACCEPT_COMPRESS
    for IF_HTTP_CLIENT~PROPERTYTYPE_ACCEPT_COMPRESS .
  aliases PROPERTYTYPE_ACCEPT_COOKIE
    for IF_HTTP_CLIENT~PROPERTYTYPE_ACCEPT_COOKIE .
  aliases PROPERTYTYPE_APPLY_SPROXY
    for IF_HTTP_CLIENT~PROPERTYTYPE_APPLY_SPROXY .
  aliases PROPERTYTYPE_LOGON_POPUP
    for IF_HTTP_CLIENT~PROPERTYTYPE_LOGON_POPUP .
  aliases PROPERTYTYPE_REDIRECT
    for IF_HTTP_CLIENT~PROPERTYTYPE_REDIRECT .
  aliases REQUEST
    for IF_HTTP_CLIENT~REQUEST .
  aliases RESPONSE
    for IF_HTTP_CLIENT~RESPONSE .
  aliases VERSION
    for IF_HTTP_CLIENT~VERSION .
  aliases APPEND_FIELD_URL
    for IF_HTTP_CLIENT~APPEND_FIELD_URL .
  aliases AUTHENTICATE
    for IF_HTTP_CLIENT~AUTHENTICATE .
  aliases CALL_HTTP
    for ZDYN_IF_HTTP_CLIENT~CALL_HTTP .
  aliases CLOSE
    for IF_HTTP_CLIENT~CLOSE .
  aliases CREATE_ABS_URL
    for IF_HTTP_CLIENT~CREATE_ABS_URL .
  aliases CREATE_REL_URL
    for IF_HTTP_CLIENT~CREATE_REL_URL .
  aliases ESCAPE_HTML
    for IF_HTTP_CLIENT~ESCAPE_HTML .
  aliases ESCAPE_URL
    for IF_HTTP_CLIENT~ESCAPE_URL .
  aliases GET_LAST_ERROR
    for IF_HTTP_CLIENT~GET_LAST_ERROR .
  aliases LISTEN
    for IF_HTTP_CLIENT~LISTEN .
  aliases SEND
    for IF_HTTP_CLIENT~SEND .
  aliases SEND_SAP_ASSERTION_TICKET
    for IF_HTTP_CLIENT~SEND_SAP_ASSERTION_TICKET .
  aliases SEND_SAP_LOGON_TICKET
    for IF_HTTP_CLIENT~SEND_SAP_LOGON_TICKET .
  aliases SET_COMPRESSION
    for IF_HTTP_CLIENT~SET_COMPRESSION .
  aliases UNESCAPE_URL
    for IF_HTTP_CLIENT~UNESCAPE_URL .
  aliases EVENTKIND_HANDLE_COOKIE
    for IF_HTTP_CLIENT~EVENTKIND_HANDLE_COOKIE .

  data MO_HTTP_CLIENT type ref to IF_HTTP_CLIENT .

  methods CONSTRUCTOR
    importing
      !IC_RFCDEST type RFCDEST
      !IS_URL type STRING
      !IB_SKIP_TEST type ABAP_BOOL default ABAP_FALSE
    exceptions
      ERROR_OCCURRED .
  methods CREATE_HTTP_CLIENT
    importing
      !IC_RFCDEST type RFCDEST optional
      !IS_URL type STRING optional
      !IB_SKIP_TEST type ABAP_BOOL default ABAP_FALSE
    exceptions
      ERROR_OCCURRED .
protected section.
private section.

  aliases PROPERTYTYPE_SEND_SAP_PASSPORT
    for IF_HTTP_CLIENT~PROPERTYTYPE_SEND_SAP_PASSPORT .
  aliases RECEIVE
    for IF_HTTP_CLIENT~RECEIVE .
  aliases REFRESH_COOKIE
    for IF_HTTP_CLIENT~REFRESH_COOKIE .
  aliases REFRESH_REQUEST
    for IF_HTTP_CLIENT~REFRESH_REQUEST .
  aliases REFRESH_RESPONSE
    for IF_HTTP_CLIENT~REFRESH_RESPONSE .
endclass. "ZDYN_CL_HTTP_CLIENT definition
class ZDYN_CL_HTTP_CLIENT implementation.
METHOD constructor.

  create_http_client( EXPORTING  ic_rfcdest   = ic_rfcdest
                                 is_url       = is_url
                                 ib_skip_test = ib_skip_test
                      EXCEPTIONS OTHERS       = 1 ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD create_http_client.

  DATA: lc_msgnr TYPE msgnr.

  IF NOT ic_rfcdest IS INITIAL.
*   create the http client for the destination
    CALL METHOD cl_http_client=>create_by_destination
      EXPORTING
        destination = ic_rfcdest
      IMPORTING
        client      = mo_http_client
      EXCEPTIONS
        OTHERS      = 1.
    IF sy-subrc <> 0.
*     message in system message
      RAISE error_occurred.
    ENDIF.
  ENDIF.

  IF NOT is_url IS INITIAL.
*   create the http client for the url - with proxy ... use destination
    CALL METHOD cl_http_client=>create_by_url
      EXPORTING
        url    = is_url
      IMPORTING
        client = mo_http_client
      EXCEPTIONS
        OTHERS = 1.
    IF sy-subrc <> 0.
*     message in system message
      RAISE error_occurred.
    ENDIF.
  ENDIF.

  CHECK mo_http_client IS BOUND.

  IF ib_skip_test = abap_false.
*   now check the connection
    CALL METHOD mo_http_client->send
      EXCEPTIONS
        OTHERS = 1.
    IF sy-subrc <> 0.
*     get error message and set it to a system message
      CALL METHOD get_last_error( ).
      CALL METHOD mo_http_client->close.
      CLEAR mo_http_client.
      RAISE error_occurred.
    ENDIF.

    CALL METHOD mo_http_client->receive
      EXCEPTIONS
        OTHERS = 1.
    IF sy-subrc <> 0.
*     get error message and set it to a system message
      CALL METHOD get_last_error( ).
      CALL METHOD mo_http_client->close.
      CLEAR mo_http_client.
      RAISE error_occurred.
    ENDIF.
  ENDIF.

  if_http_client~request  = mo_http_client->request.
  if_http_client~response = mo_http_client->response.

ENDMETHOD.
METHOD if_http_client~append_field_url.

  mo_http_client->append_field_url(
    EXPORTING
      name   = name
      value  = value
    CHANGING
      url    = url ).

ENDMETHOD.
METHOD if_http_client~authenticate.

  mo_http_client->authenticate(
    EXPORTING
      proxy_authentication =  proxy_authentication
      client               =  client
      username             =  username
      password             =  password
      language             =  language ).

ENDMETHOD.
METHOD if_http_client~close.

  mo_http_client->close(
    EXCEPTIONS
      http_invalid_state = 1
      OTHERS             = 2 ).
  IF sy-subrc <> 0.
    RAISE http_invalid_state.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~create_abs_url.

  url = mo_http_client->create_abs_url( protocol    = protocol
                                        host        = host
                                        port        = port
                                        path        = path
                                        querystring = querystring
                                        stateful    = stateful ).

ENDMETHOD.
METHOD if_http_client~create_rel_url.

  url = path.

  IF querystring IS NOT INITIAL.
    CONCATENATE url '?' querystring INTO url.
  ENDIF.

*  url = mo_http_client->create_rel_url( path        = path
*                                        querystring = querystring
*                                        stateful    = stateful ).

ENDMETHOD.
METHOD if_http_client~escape_html.

  escaped = cl_http_client=>if_http_client~escape_html( unescaped = unescaped ).

ENDMETHOD.
METHOD if_http_client~escape_url.

  escaped = cl_http_client=>escape_url( unescaped = unescaped ).

ENDMETHOD.
METHOD if_http_client~get_last_error.

  DATA: lc_message  TYPE string.
  FIELD-SYMBOLS: <message_class>  TYPE any,
                 <message_number> TYPE any.

* This method has limited interface in older releases.
* In case only two parameters are available, a generic message will be raised.
  ASSIGN ('MESSAGE_CLASS') TO <message_class>.
  ASSIGN ('MESSAGE_NUMBER') TO <message_number>.

  IF <message_class> IS ASSIGNED AND <message_number> IS ASSIGNED.
    CLEAR: <message_class>, <message_number>.
    CALL METHOD mo_http_client->('GET_LAST_ERROR')
      IMPORTING
        code           = code
        message        = message
        message_class  = <message_class>
        message_number = <message_number>.

    sy-msgty = 'E'.
    sy-msgid = <message_class>.
    sy-msgno = <message_number>.
  ELSE.
    CALL METHOD mo_http_client->('GET_LAST_ERROR')
      IMPORTING
        code    = code
        message = lc_message.
    IF lc_message IS NOT INITIAL.
      sy-msgty = 'E'.
      sy-msgid = 'ZDYN_WS'.
      sy-msgno = '000'.
      sy-msgv1 = lc_message.
*     MESSAGE e000(zdyn_ws) WITH space.
    ELSE.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'PQ'
                                      ic_msgno    = '612' ).
*   message e612(pq).
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~listen.

  cl_http_client=>if_http_client~listen(
    RECEIVING
      client                     = client
    EXCEPTIONS
      http_communication_failure = 1
      http_no_open_connection    = 2
      OTHERS                     = 3 ).
  IF sy-subrc = 2.
    RAISE http_no_open_connection.
  ELSEIF sy-subrc <> 0.
    RAISE http_communication_failure.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~receive.

  mo_http_client->receive(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      OTHERS                     = 4 ).
  IF sy-subrc = 1.
    RAISE http_communication_failure.
  ELSEIF sy-subrc = 2.
    RAISE http_invalid_state.
  ELSEIF sy-subrc <> 0.
    RAISE http_processing_failed.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~refresh_cookie.

  mo_http_client->refresh_cookie(
    EXCEPTIONS
      http_action_failed     = 1
      http_processing_failed = 2
      OTHERS                 = 3 ).
  IF sy-subrc = 1.
    RAISE http_action_failed.
  ELSEIF sy-subrc <> 0.
    RAISE http_processing_failed.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~refresh_request.

  mo_http_client->refresh_request(
    EXCEPTIONS
      http_action_failed = 1
      OTHERS             = 2 ).
  IF sy-subrc <> 0.
    RAISE http_action_failed.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~refresh_response.

  mo_http_client->refresh_response(
    EXCEPTIONS
      http_action_failed = 1
      OTHERS             = 2 ).
  IF sy-subrc <> 0.
    RAISE http_action_failed.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~send.

  mo_http_client->send(
    EXPORTING
      timeout                    = timeout
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      http_invalid_timeout       = 4
      OTHERS                     = 5 ).
  IF sy-subrc = 1.
    RAISE http_communication_failure.
  ELSEIF sy-subrc = 2.
    RAISE http_invalid_state.
  ELSEIF sy-subrc = 4.
    RAISE http_invalid_timeout.
  ELSEIF sy-subrc <> 0.
    RAISE http_processing_failed.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~send_sap_assertion_ticket.

  mo_http_client->send_sap_assertion_ticket(
    EXPORTING
      client             = client
      system_id          = system_id
    EXCEPTIONS
      argument_not_found = 1
      OTHERS             = 2 ).
  IF sy-subrc <> 0.
    RAISE argument_not_found.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~send_sap_logon_ticket.

  mo_http_client->send_sap_logon_ticket( ).

ENDMETHOD.
METHOD if_http_client~set_compression.

  mo_http_client->set_compression(
    EXPORTING
      options                  = options
    EXCEPTIONS
      compression_not_possible = 1
      OTHERS                   = 2 ).
  IF sy-subrc <> 0.
    RAISE compression_not_possible.
  ENDIF.

ENDMETHOD.
METHOD if_http_client~unescape_url.

  unescaped = cl_http_client=>if_http_client~unescape_url( escaped = escaped ).

ENDMETHOD.
METHOD zdyn_if_http_client~call_http.

  DATA: lo_rest_client TYPE REF TO zdyn_cl_rest_http_client,
        lc_msgnr       TYPE msgnr.

  CHECK mo_http_client IS BOUND.
  CHECK NOT is_url IS INITIAL.

* create new rest client
  CREATE OBJECT lo_rest_client TYPE zdyn_cl_rest_http_client
    EXPORTING
      io_http_client = mo_http_client.

  cl_http_utility=>set_request_uri( EXPORTING request = mo_http_client->request
                                              uri     = is_url ).

  IF NOT is_input IS INITIAL.
    lo_rest_client->set_string_data( is_data = is_input ).
  ENDIF.

* perform the call
  CASE ic_method.
    WHEN 'POST'.
      lo_rest_client->post( ).
    WHEN 'PUT'.
      lo_rest_client->put( ).
    WHEN 'DELETE'.
      lo_rest_client->delete( ).
    WHEN 'GET'.
      lo_rest_client->get( ).
    WHEN OTHERS.
*     default is GET
      lo_rest_client->get( ).
  ENDCASE.

  ei_return_code = lo_rest_client->get_status( ).
* get error message and set it to a system message
  IF ei_return_code >= 300.
    get_last_error( ).
  ENDIF.

  lo_rest_client->get_content_type( IMPORTING es_media_type = es_media_type ).
  IF es_media_type IS NOT INITIAL.
    IF es_media_type EQ con_mimetype_json OR
       es_media_type EQ con_mimetype_xml OR
       es_media_type EQ con_mimetype_problem_json OR
       es_media_type(4) EQ 'text'.
      es_result = lo_rest_client->get_string_data( ).
    ELSE.
      ex_xstring = lo_rest_client->get_binary_data( ).
    ENDIF.
  ENDIF.

ENDMETHOD.
