
class ZDYN_LIC_CL_MSG definition
  public
  create public .

public section.

  class-methods ADD
    importing
      !IC_TYPE type BAPIRET2-TYPE
      !IC_ID type BAPIRET2-ID
      !IN_NUMBER type BAPIRET2-NUMBER
      !IC_MESSAGE_V1 type ANY optional
      !IC_MESSAGE_V2 type ANY optional
      !IC_MESSAGE_V3 type ANY optional
      !IC_MESSAGE_V4 type ANY optional
    changing
      !CT_MESSAGES type BAPIRET2_T .
  class-methods ADD_SYSTEM
    changing
      !CT_MESSAGES type BAPIRET2_T .
  class-methods GET_TEXT
    importing
      !IST_BAPIRET2_MSG type BAPIRET2 optional
      !IC_LANGU type LANGU default SY-LANGU
    returning
      value(RS_TEXT) type STRINGVAL .
protected section.
private section.

  class-methods CREATE
    importing
      !IC_TYPE type BAPIRET2-TYPE
      !IC_ID type BAPIRET2-ID
      !IN_NUMBER type BAPIRET2-NUMBER
      !IC_MESSAGE_V1 type ANY
      !IC_MESSAGE_V2 type ANY
      !IC_MESSAGE_V3 type ANY
      !IC_MESSAGE_V4 type ANY
    returning
      value(ES_MESSAGE) type BAPIRET2 .
  class-methods RETRIEVE_TEXT
    importing
      !IC_TYPE type BAPIRET2-TYPE
      !IC_ID type BAPIRET2-ID
      !IN_NUMBER type BAPIRET2-NUMBER
      !IC_MESSAGE_V1 type ANY
      !IC_MESSAGE_V2 type ANY
      !IC_MESSAGE_V3 type ANY
      !IC_MESSAGE_V4 type ANY
    returning
      value(EC_MESSAGE) type STRING .
endclass. "ZDYN_LIC_CL_MSG definition
class ZDYN_LIC_CL_MSG implementation.
METHOD add.

  DATA: ls_message TYPE bapiret2,
        ls_msg_old TYPE bapiret2.

  ls_message = create( ic_type        = ic_type
                       ic_id          = ic_id
                       in_number      = in_number
                       ic_message_v1  = ic_message_v1
                       ic_message_v2  = ic_message_v2
                       ic_message_v3  = ic_message_v3
                       ic_message_v4  = ic_message_v4 ).

  CHECK ls_message IS NOT INITIAL.

* Append message
  READ TABLE ct_messages INTO ls_msg_old
             WITH KEY id      = ls_message-id
                      number  = ls_message-number
                      message = ls_message-message.
  IF sy-subrc IS INITIAL.
    CHECK ls_message-type NE ls_msg_old-type.
    IF ( ls_message-type EQ 'E' AND
         ls_msg_old-type CA 'WIS' ) OR
       ( ls_message-type EQ 'W' AND
         ls_msg_old-type CA 'IS' ) OR
       ( ls_message-type EQ 'I' AND
         ls_msg_old-type CA 'S' ).
      DELETE ct_messages INDEX sy-tabix.
      APPEND ls_message TO ct_messages.
    ELSEIF ( ls_msg_old-type EQ 'E' AND
             ls_message-type CA 'WIS' ) OR
           ( ls_msg_old-type EQ 'W' AND
             ls_message-type CA 'IS' ) OR
           ( ls_msg_old-type EQ 'I' AND
             ls_message-type CA 'S' ).
      "Do nothing
    ELSE.
      APPEND ls_message TO ct_messages.
    ENDIF.
  ELSE.
    APPEND ls_message TO ct_messages.
  ENDIF.

ENDMETHOD.
METHOD add_system.

  CHECK NOT: sy-msgty IS INITIAL,
             sy-msgid IS INITIAL.


  add( EXPORTING ic_type       = sy-msgty
                 ic_id         = sy-msgid
                 in_number     = sy-msgno
                 ic_message_v1 = sy-msgv1
                 ic_message_v2 = sy-msgv2
                 ic_message_v3 = sy-msgv3
                 ic_message_v4 = sy-msgv4
       CHANGING  ct_messages   = ct_messages ).

ENDMETHOD.
METHOD create.

  DATA: lc_number TYPE bdcmsgcoll-msgnr.

  IF ic_type   IS INITIAL AND
     ic_id     IS INITIAL AND
     in_number IS INITIAL.
    EXIT.
  ENDIF.

  IF ic_id IS INITIAL.
    es_message-id = 'ZDYN_LICENSE'.
  ELSE.
    es_message-id = ic_id.
  ENDIF.
  IF ic_type IS INITIAL.
    es_message-type = 'E'.
  ELSE.
    es_message-type = ic_type.
  ENDIF.

* Get message
  es_message-number     = in_number.
  es_message-message_v1 = ic_message_v1.
  es_message-message_v2 = ic_message_v2.
  es_message-message_v3 = ic_message_v3.
  es_message-message_v4 = ic_message_v4.

  CONDENSE es_message-message_v1.
  CONDENSE es_message-message_v2.
  CONDENSE es_message-message_v3.
  CONDENSE es_message-message_v4.

  lc_number = es_message-number.

  es_message-message = retrieve_text( ic_type        = ic_type
                                      ic_id          = ic_id
                                      in_number      = in_number
                                      ic_message_v1  = ic_message_v1
                                      ic_message_v2  = ic_message_v2
                                      ic_message_v3  = ic_message_v3
                                      ic_message_v4  = ic_message_v4 ).

  CHECK es_message-message IS INITIAL.
  CLEAR es_message.

ENDMETHOD.
METHOD get_text.

  DATA: lst_msg TYPE bapiret2.

  IF ist_bapiret2_msg IS NOT INITIAL.
    MOVE-CORRESPONDING ist_bapiret2_msg TO lst_msg.
  ENDIF.

  CALL FUNCTION 'RP_READ_T100'
    EXPORTING
      arbgb          = lst_msg-id
      msgnr          = lst_msg-number
      msgv1          = lst_msg-message_v1
      msgv2          = lst_msg-message_v2
      msgv3          = lst_msg-message_v3
      msgv4          = lst_msg-message_v4
      sprsl          = ic_langu
    IMPORTING
      text           = rs_text
    EXCEPTIONS
      no_entry_found = 1
      OTHERS         = 2.

ENDMETHOD.
METHOD retrieve_text.

  DATA: ls_t100     TYPE t100,
        lc_msg(550) TYPE c,
        lb_replace  TYPE abap_bool.

  DO 1 TIMES.
    SELECT SINGLE * FROM t100 INTO ls_t100
                    WHERE sprsl EQ sy-langu
                      AND arbgb EQ ic_id
                      AND msgnr EQ in_number.

    CHECK sy-subrc <> 0.
    SELECT SINGLE * FROM t100 INTO ls_t100
                    WHERE sprsl EQ 'E'
                      AND arbgb EQ ic_id
                      AND msgnr EQ in_number.

    CHECK sy-subrc <> 0.
    SELECT SINGLE * FROM t100 INTO ls_t100
                    WHERE sprsl EQ 'N'
                      AND arbgb EQ ic_id
                      AND msgnr EQ in_number.
  ENDDO.
  CHECK ls_t100-text IS NOT INITIAL.
  lc_msg = ls_t100-text.

  DO.
    REPLACE '&1' WITH ic_message_v1 INTO lc_msg.
    IF sy-subrc EQ 0.
      lb_replace = abap_true.
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.
  DO.
    REPLACE '&2' WITH ic_message_v2 INTO lc_msg.
    IF sy-subrc EQ 0.
      lb_replace = abap_true.
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.
  DO.
    REPLACE '&3' WITH ic_message_v3 INTO lc_msg.
    IF sy-subrc EQ 0.
      lb_replace = abap_true.
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.
  DO.
    REPLACE '&4' WITH ic_message_v4 INTO lc_msg.
    IF sy-subrc EQ 0.
      lb_replace = abap_true.
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.


  IF lb_replace EQ abap_false.
    REPLACE '&' WITH ic_message_v1 INTO lc_msg.
    REPLACE '&' WITH ic_message_v2 INTO lc_msg.
    REPLACE '&' WITH ic_message_v3 INTO lc_msg.
    REPLACE '&' WITH ic_message_v4 INTO lc_msg.
  ENDIF.
  CONDENSE lc_msg.
  ec_message = lc_msg.

ENDMETHOD.
