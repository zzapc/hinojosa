
class ZDYN_CL_DATA_CONTAINER definition
  public
  create public .

public section.

  class-data MO type ref to ZDYN_CL_DATA_CONTAINER read-only .
  data MR_CONTAINER type ref to DATA read-only .
  class-data MC_ADD_STRUCTURE type TABNAME .
  constants CON_ADD_STRUCTURE type TABNAME value '/COCKPIT/THDR'. "#EC NOTEXT

  methods CLEAR .
  class-methods CREATE
    importing
      !IC_ADD_STRUCTURE type ANY optional
    returning
      value(EO_CONTAINER) type ref to ZDYN_CL_DATA_CONTAINER .
  methods GET
    importing
      !IC_NAME type ANY optional
    exporting
      !E_VALUE type ANY .
  methods GET_CONTAINER
    returning
      value(RR_CONTAINER) type ref to DATA .
  methods SET
    importing
      !IC_NAME type ANY
      !I_VALUE type ANY .
protected section.

  methods CREATE_DATA_CONTAINER .
  methods CREATE_DOCUMENT_STRUCTURE
    returning
      value(RO_DESCR) type ref to CL_ABAP_STRUCTDESCR .
  methods CREATE_TABLE
    importing
      !IC_PD_TABLE_NAME type TABNAME
      !IC_TYPE_NAME type STRING
    returning
      value(RO_DESCR) type ref to CL_ABAP_TABLEDESCR .
private section.
endclass. "ZDYN_CL_DATA_CONTAINER definition
class ZDYN_CL_DATA_CONTAINER implementation.
METHOD clear.

  FIELD-SYMBOLS: <data> TYPE any.

  ASSIGN mr_container->* TO <data>.
  CLEAR <data>.

ENDMETHOD.
METHOD create.

  mc_add_structure = ic_add_structure.
  IF mc_add_structure IS INITIAL.
    mc_add_structure = con_add_structure.
  ENDIF.

  CREATE OBJECT mo.
  mo->create_data_container( ).
  eo_container = mo.

ENDMETHOD.
METHOD create_data_container.

  DATA: lo_struct_descr TYPE REF TO cl_abap_structdescr.

  lo_struct_descr = create_document_structure( ).
  CREATE DATA mr_container TYPE HANDLE lo_struct_descr.

ENDMETHOD.
METHOD create_document_structure.

  DATA: lo_type_descr        TYPE REF TO cl_abap_structdescr,
        lt_static_components TYPE cl_abap_structdescr=>included_view,
        lt_components        TYPE cl_abap_structdescr=>included_view,
        lt_merged_components TYPE cl_abap_structdescr=>component_table.
  FIELD-SYMBOLS: <st_comp> LIKE LINE OF lt_components.


  lo_type_descr ?= cl_abap_typedescr=>describe_by_name( 'ZDYN_IF_REST_DATA=>TY_PDDOCUMENT' ).
  lt_static_components = lo_type_descr->get_included_view( ).


  READ TABLE lt_static_components ASSIGNING <st_comp> WITH KEY name = 'TAB_ITEM'.
  IF sy-subrc = 0.
    <st_comp>-type = create_table( ic_pd_table_name = '/COCKPIT/TITEM'
                                   ic_type_name     = 'ZDYN_IF_REST_DATA=>TT_ITEMTABLE' ).
  ENDIF.

  READ TABLE lt_static_components ASSIGNING <st_comp> WITH KEY name = 'TAB_ACCOUNT'.
  IF sy-subrc = 0.
    <st_comp>-type = create_table( ic_pd_table_name = '/COCKPIT/TACCT'
                                   ic_type_name     = 'ZDYN_IF_REST_DATA=>TT_ACCTABLE' ).
  ENDIF.

  READ TABLE lt_static_components ASSIGNING <st_comp> WITH KEY name = 'TAB_TAX'.
  IF sy-subrc = 0.
    <st_comp>-type = create_table( ic_pd_table_name = '/COCKPIT/TTAX'
                                   ic_type_name     = 'ZDYN_IF_REST_DATA=>TT_TAXTABLE' ).
  ENDIF.

  IF zdyn_cl_bapi=>mo->is_table_exist( mc_add_structure ) = abap_true.
    lo_type_descr ?= cl_abap_typedescr=>describe_by_name( mc_add_structure ).
    lt_components = lo_type_descr->get_included_view( ).
  ENDIF.

* eliminate duplicated fields, with priority for staticly defined ones
  LOOP AT lt_components ASSIGNING <st_comp>.
    READ TABLE lt_static_components TRANSPORTING NO FIELDS WITH KEY name = <st_comp>-name.
    IF sy-subrc = 0.
      DELETE lt_components.
    ELSE.
      IF <st_comp>-type->type_kind = cl_abap_typedescr=>typekind_date.
        <st_comp>-type = cl_abap_elemdescr=>get_string( ).
      ENDIF.
    ENDIF.
  ENDLOOP.

  zdyn_cl_system=>mo->move_corresponding_tab( EXPORTING it_input  = lt_static_components
                                              CHANGING  ct_output = lt_merged_components ).
  zdyn_cl_system=>mo->move_corresponding_tab( EXPORTING it_input        = lt_components
                                                        ib_keep_target  = abap_true
                                              CHANGING  ct_output       = lt_merged_components ).

  ro_descr ?= cl_abap_structdescr=>create( lt_merged_components ).

ENDMETHOD.
METHOD create_table.

  DATA: lo_type_descr        TYPE REF TO cl_abap_structdescr,
        lo_table_descr       TYPE REF TO cl_abap_tabledescr,
        lo_struct_descr      TYPE REF TO cl_abap_structdescr,
        lt_static_components TYPE cl_abap_structdescr=>included_view,
        lt_components        TYPE cl_abap_structdescr=>included_view,
        lt_merged_components TYPE cl_abap_structdescr=>component_table.
  FIELD-SYMBOLS: <s_comp> LIKE LINE OF lt_components.

  lo_table_descr ?= cl_abap_typedescr=>describe_by_name( ic_type_name ).
  lo_type_descr ?= lo_table_descr->get_table_line_type( ).
  lt_static_components = lo_type_descr->get_included_view( ).

  IF zdyn_cl_bapi=>mo->is_table_exist( ic_pd_table_name ) = abap_true.
    lo_type_descr ?= cl_abap_typedescr=>describe_by_name( ic_pd_table_name ).
    lt_components = lo_type_descr->get_included_view( ).
  ENDIF.

* eliminate duplicated fields, with priority for staticly defined ones
  LOOP AT lt_components ASSIGNING <s_comp>.
    READ TABLE lt_static_components TRANSPORTING NO FIELDS WITH KEY name = <s_comp>-name.
    CHECK sy-subrc = 0.
    DELETE lt_components.
  ENDLOOP.

  zdyn_cl_system=>mo->move_corresponding_tab( EXPORTING it_input  = lt_static_components
                                              CHANGING  ct_output = lt_merged_components ).
  zdyn_cl_system=>mo->move_corresponding_tab( EXPORTING it_input        = lt_components
                                                        ib_keep_target  = abap_true
                                              CHANGING  ct_output       = lt_merged_components ).

* return created table description
  lo_struct_descr = cl_abap_structdescr=>create( lt_merged_components ).
  ro_descr ?= cl_abap_tabledescr=>create( p_line_type = lo_struct_descr ).

ENDMETHOD.
METHOD get.

  DATA: lc_field_name TYPE fieldname.
  FIELD-SYMBOLS: <st_data> TYPE any,
                 <field>   TYPE any.

  ASSIGN mr_container->* TO <st_data>.

  IF ic_name IS NOT INITIAL.
    lc_field_name = ic_name.

    ASSIGN COMPONENT lc_field_name OF STRUCTURE <st_data> TO <field>.
    IF <field> IS ASSIGNED.
      e_value = <field>.
    ENDIF.
  ELSE.
    e_value = <st_data>.
  ENDIF.

ENDMETHOD.
METHOD get_container.

  rr_container = mr_container.

ENDMETHOD.
METHOD set.

  DATA: lc_field_name TYPE fieldname.
  FIELD-SYMBOLS: <st_data> TYPE any,
                 <field>   TYPE any.

  lc_field_name = ic_name.

  ASSIGN mr_container->* TO <st_data>.
  ASSIGN COMPONENT lc_field_name OF STRUCTURE <st_data> TO <field>.
  IF <field> IS ASSIGNED.
    <field> = i_value.
  ENDIF.

ENDMETHOD.
