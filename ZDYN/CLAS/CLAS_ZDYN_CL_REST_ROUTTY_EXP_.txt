INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_REST_ROUTTY_EXP definition
  public
  inheriting from ZDYN_CL_REST_TOOLS_ROUTTY
  create public .

public section.

  constants CON_OUTPUT_DOCUMENTS type STRING value 'output-documents'. "#EC NOTEXT
  constants CON_INPUT_DOCUMENTS type STRING value 'input-documents'. "#EC NOTEXT
  constants CON_TECHNICAL_ACK type STRING value 'technical-acknowledgment'. "#EC NOTEXT
  constants CON_DOCUMENT_STATUSES type STRING value 'documents/statuses'. "#EC NOTEXT
  constants CON_REGISTER_VALIDITY type INT1 value 12. "#EC NOTEXT
  constants CON_ERROR_CODE_01 type STRING value 'ProcessingError'. "#EC NOTEXT
  data MO_HTTP_CLIENT_API type ref to ZDYN_IF_HTTP_CLIENT .
  data MO_HTTP_CLIENT_DOC type ref to ZDYN_IF_HTTP_CLIENT .
  data MST_AR_CONFIG type ZDYN_ROUTTY_TARI .
  data MST_PARALLEL_PROC type ZDYN_WS_SPARALLEL_PROC .

  methods CONSTRUCTOR
    importing
      !IST_CONFIG type ZDYN_STRU_ROUTTY_CONFIG optional
      !II_BULK_SIZE type I optional
      !IB_MASTERDATA_TO_FILE type ABAP_BOOL default ABAP_FALSE
      !IS_MASTERDATA_PATHNAME type ANY optional
      !IB_MASTERDATA_FILE_TEST type ABAP_BOOL default ABAP_FALSE
    exceptions
      ERROR_OCCURRED .
  methods SET_PARALLEL_PROCESSING
    importing
      !IB_ACTIVE type ABAP_BOOL
      !IC_SERVER_GROUP type ANY optional
      !II_MAX_PROCESSES type ANY optional
      !II_PACKGE_SIZE type ANY optional .
  methods SET_INPUT_DOCUMENTS_INT
    importing
      !IT_DOC_NUMBERS type TT_VBELN
      !IB_GENERATE_PDF type ABAP_BOOL default ABAP_FALSE
      !IB_ADD_ATTACHMENTS type ABAP_BOOL default ABAP_FALSE
      !IB_REQUIRE_ATTACH type ABAP_BOOL default ABAP_FALSE
      !IB_USE_REGISTER type ABAP_BOOL
      !IST_AR_CONFIG type ZDYN_ROUTTY_TARI .
  methods SET_INPUT_DOCUMENTS_INT_PAR
    importing
      !IT_DOC_NUMBERS type TT_VBELN
      !IB_GENERATE_PDF type ABAP_BOOL default ABAP_FALSE
      !IB_ADD_ATTACHMENTS type ABAP_BOOL default ABAP_FALSE
      !IB_REQUIRE_ATTACH type ABAP_BOOL default ABAP_FALSE
      !IB_USE_REGISTER type ABAP_BOOL
    exporting
      !EB_OK type ABAP_BOOL .
  methods SET_INPUT_DOCUMENTS
    importing
      !IT_SEL_SALES_DOC type ZDYN_CL_BAPI=>YT_RANGE_VBELN optional
      !IT_SEL_DOC_TYPE type ZDYN_CL_BAPI=>YT_RANGE_FKART optional
      !IT_SEL_COMP_CODE type ZDYN_CL_BAPI=>YT_RANGE_BUKRS optional
      !IT_SEL_CUSTOMER type ZDYN_CL_BAPI=>YT_RANGE_KUNNR optional
      !IT_SEL_APPLICATION type ZDYN_CL_BAPI=>YT_RANGE_KAPPL optional
      !IT_SEL_MSG_TYPE type ZDYN_CL_BAPI=>YT_RANGE_KSCHL optional
      !IT_DYN_SEL type RSDS_TRANGE optional
      !IT_SEL_CREATE_DATE type ZDYN_CL_BAPI=>YT_RANGE_ERDAT optional
      !IB_GENERATE_PDF type ABAP_BOOL default ABAP_FALSE
      !IB_ADD_ATTACHMENTS type ABAP_BOOL default ABAP_FALSE
      !IB_REQUIRE_ATTACH type ABAP_BOOL default ABAP_FALSE
      !IB_USE_REGISTER type ABAP_BOOL default ABAP_TRUE .
  methods SET_INPUT_DOCUMENTS_AP
    importing
      !IT_SEL_COMP_CODE type ZDYN_CL_BAPI=>YT_RANGE_BUKRS optional
      !IT_SEL_DOC_NUM type ZDYN_CL_BAPI=>YT_RANGE_BELNR optional
      !IT_SEL_FISCAL_YEAR type ZDYN_CL_BAPI=>YT_RANGE_GJAHR optional
      !IT_SEL_REF_NUM type ZDYN_CL_BAPI=>YT_RANGE_XBLNR optional
      !IT_SEL_DOC_TYPE type ZDYN_CL_BAPI=>YT_RANGE_BLART optional
      !IT_SEL_ENT_DATE type ZDYN_CL_BAPI=>YT_RANGE_CPUDT optional
      !IS_LAND type LAND1 optional
      !IS_TAX_NUM type STCEG optional
      !IP_ROUND type BSET-KBETR optional
      !IB_NORMAL type ABAP_BOOL default ABAP_TRUE
      !IB_CORR type ABAP_BOOL default ABAP_FALSE
      !IB_FINAL type ABAP_BOOL default ABAP_FALSE
      !IB_FLIP_SIGN type ABAP_BOOL default ABAP_FALSE
      !IB_USE_REGISTER type ABAP_BOOL default ABAP_TRUE
      !IB_REQUIRE_ATTACH type ABAP_BOOL default ABAP_FALSE
      !IB_GENERATE_PDF type ABAP_BOOL default ABAP_FALSE
      !IB_ADD_ATTACHMENTS type ABAP_BOOL default ABAP_FALSE .
  methods SEND_TECH_STATUS
    importing
      !IB_OK type ABAP_BOOL .

  methods GET_AR_OBJECT_VALUE
    redefinition .
  methods GET_OUTPUT_DOCUMENTS
    redefinition .
  methods GET_PD_MAPID
    redefinition .
  methods PING_SYSTEM
    redefinition .
  methods PREPARE_CLIENT
    redefinition .
  methods SEND_FEEDBACK
    redefinition .
  methods SET_COMPANY
    redefinition .
  methods SET_CUSTOMERS
    redefinition .
  methods SET_HTTP_CLIENT
    redefinition .
  methods SET_SUPPLIERS
    redefinition .
  methods POST_PARTY
    redefinition .
protected section.

  methods ADD_IDENTIFICATION_MESGS
    importing
      !IST_DOCUMENT type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_OUTPUT_DOCUMENT .
  methods REMOVE_MULTI_CC_PARTIES
    changing
      !CT_PARTIES type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_EXP_ROUTTY_PARTYLIST-_PARTY_LIST .
  methods SET_INPUT_CHANNEL
    importing
      !IST_DOCUMENT type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_OUTPUT_DOCUMENT .
  methods EXTEND_EXP_METADATA
    importing
      !IST_CC_DETAILS type BAPI0002_2 optional
      !IST_CC_ADDRESS type BAPI0002_3 optional
      !IST_VENDOR type ZDYN_WS_VMD optional
      !IST_CUSTOMER type ZDYN_WS_CMD optional
    changing
      !CST_METADATA type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_EXP_METADATA .
  methods CLEANUP_REGISTER
    exceptions
      ERROR_OCCURRED .
  methods EXTEND_IDENTIFIERS
    importing
      !IST_METADATA type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_EXP_METADATA
      !IST_LINE type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_CSV_LINE
    changing
      !CT_IDENTIFIERS type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TT_IDENTIFIERS .
  methods REGISTER_DOCUMENT
    importing
      !IC_DOC_NUMBER type ANY
    exceptions
      ERROR_OCCURRED .
  methods SEND_DOCUMENT
    importing
      !IS_DOC_NO type ANY
      !IS_XML type STRING optional
      !IT_XML type ZDYN_LSTRING optional
    returning
      value(EB_OK) type ABAP_BOOL .
  methods SET_DOC_DOWNLOAD_URL
    importing
      !IS_FULL_URL type ANY .
  methods SET_GUID
    exceptions
      ERROR_OCCURRED .
  methods SET_IDENTIFIERS
    importing
      !IST_PARTY type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_EXP_PARTYLIST
    exporting
      !ET_IDS type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TT_IDENTIFIERS
    changing
      !CST_LINE type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_CSV_LINE optional .
  methods SAVE_PARTY_IN_CSV_FILE
    importing
      !IST_ROUTTY_PAR type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_EXP_ROUTTY_PARTYLIST
    exceptions
      ERROR_OCCURRED .
  methods POST_PARTY_EXP
    importing
      !IST_ROUTTY_PAR type ZDYN_CL_REST_ROUTTY_EXP_DATA=>TY_EXP_ROUTTY_PARTYLIST
      !IS_API_NAME type STRING default CON_PARTIES
    exceptions
      ERROR_OCCURRED .
  PRIVATE SECTION.
endclass. "ZDYN_CL_REST_ROUTTY_EXP definition
class ZDYN_CL_REST_ROUTTY_EXP implementation.
  METHOD add_identification_mesgs.

    add_msg_1 s 027 zdyn_ws zdyn_cl_msg=>con_message_level_2 ist_document-id.
* MESSAGE s027(zdyn_ws).
    add_msg_2 s 000 zdyn_ws zdyn_cl_msg=>con_message_level_2 'Corelation ID:' ist_document-correlationid.
* MESSAGE s000(zdyn_ws).
    add_msg_2 s 000 zdyn_ws zdyn_cl_msg=>con_message_level_2 'Received on:' ist_document-receivedon.
* MESSAGE s000(zdyn_ws).

  ENDMETHOD.
  METHOD cleanup_register.

    zdyn_cl_db=>mo->cleanup_register( EXCEPTIONS timeout = 1
                                                 OTHERS  = 2 ).
    IF sy-subrc = 1.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                      ic_msgno = '026'
                                      ic_msgv1 = 'ZDYN_ROUTTY_TDOC' ).
*   message e026(zdyn_ws) with space.
      RAISE error_occurred.
    ELSEIF sy-subrc <> 0.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = '6C'
                                      ic_msgno = '056' ).
*   message e056(6c).
      RAISE error_occurred.
    ENDIF.

  ENDMETHOD.
  METHOD constructor.

    zdyn_cl_msg=>add_to_call_stack( ).

    super->constructor( EXPORTING   ist_config              = ist_config
                                    ii_bulk_size            = ii_bulk_size
                                    ib_masterdata_to_file   = ib_masterdata_to_file
                                    is_masterdata_pathname  = is_masterdata_pathname
                                    ib_masterdata_file_test = ib_masterdata_file_test
                        EXCEPTIONS  OTHERS                  = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.

  ENDMETHOD.
  METHOD extend_exp_metadata.

*  Add custom code here to add info to custom fields

  ENDMETHOD.
  METHOD extend_identifiers.

*  Add custom code here to add info to custom fields

  ENDMETHOD.
  METHOD get_ar_object_value.

    rc_ar_object = zdyn_cl_config=>mo->get_archive_object( ic_id = mst_config-id ).

  ENDMETHOD.
  METHOD get_output_documents.

    DATA: li_return_code   TYPE i,
          lb_ok            TYPE abap_bool,
          lb_skip_feedback TYPE abap_bool,
          ls_id            TYPE string,
          lst_document_res TYPE zdyn_cl_rest_routty_exp_data=>ty_output_documents_res,
          lst_document     LIKE LINE OF lst_document_res-_embedded-_entries,
          li_page_num      TYPE i,
          li_pages         TYPE i,
          ls_query         TYPE string.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK mo_http_client IS BOUND.

    CLEAR mi_entry_counter.
    li_page_num = 1.
    li_pages = 1.

    WHILE li_page_num <= li_pages.

      mo_http_client = mo_http_client_api.
      ls_query = li_page_num.
      CONCATENATE 'page=' ls_query INTO ls_query.
      set_new_rel_url( is_path = con_output_documents
                       is_query = ls_query ).
      call_http_get( IMPORTING ei_return_code = li_return_code ).

      IF li_return_code = 200.
        deserialize_from_json( EXPORTING is_json  = ms_result
                               CHANGING  cst_data = lst_document_res ).
        IF li_page_num = 1.
          li_pages = lst_document_res-pages.
        ENDIF.
        li_page_num = li_page_num + 1.

        LOOP AT lst_document_res-_embedded-_entries INTO lst_document.

          CLEAR: lb_ok, lb_skip_feedback.
          clear_document_data( ).

          add_identification_mesgs( lst_document ).

*       start collecting messages that will be sent back in feedback
          zdyn_cl_msg=>start_group( ).

          ls_id = lst_document-id.
          set_input_channel( lst_document ).

          mo_http_client = mo_http_client_doc.

          set_doc_download_url( lst_document-downloadurl ).
          set_guid( EXCEPTIONS OTHERS = 1 ).
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.

          call_http_get( IMPORTING ei_return_code = li_return_code ).

          IF li_return_code = 200.
            IF ms_result IS NOT INITIAL.
              IF mo_file->is_doc_to_file( ) = abap_false.
                process_output_document( EXPORTING is_id            = ls_id
                                                   is_document      = ms_result
                                                   ic_xslt          = ic_xslt
                                         IMPORTING eb_ok            = lb_ok
                                                   eb_skip_feedback = lb_skip_feedback ).
              ELSE.
                lb_ok = mo_file->save_doc_in_xml_file( is_doc_no = ls_id
                                                       is_xml    = ms_result ).
              ENDIF.
              IF lb_ok = abap_false.
                set_response_message( ic_doc_id = ls_id ).
              ELSE.
                mi_entry_counter = mi_entry_counter + 1.
              ENDIF.
            ENDIF.
          ELSE.
            zdyn_cl_msg=>add_msg( EXPORTING ic_msgid  = 'TRUST'
                                            ic_msgno  = '113'
                                            ic_msgv1  = li_return_code ).
*         MESSAGE e113(trust).
            set_response_message( ic_doc_id = ls_id ).
          ENDIF.
          zdyn_cl_msg=>stop_group( ).

*       here we send a message back to Routty
          IF ib_skip_feedback = abap_false AND lb_skip_feedback = abap_false.
            send_tech_status( ib_ok = lb_ok ).
            IF lb_ok = abap_true.
              send_feedback( ).
            ENDIF.
          ENDIF.
        ENDLOOP.

      ELSE.

        set_response_message( ii_http_status = li_return_code ).
        RETURN.

      ENDIF.

      mi_batch_counter = mi_batch_counter + 1.

    ENDWHILE.

    zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                                 ii_batch_count = mi_batch_counter ).

  ENDMETHOD.
  METHOD get_pd_mapid.

    DATA: lst_pdmap TYPE zdyn_rex_tmap.

    SELECT SINGLE * FROM zdyn_rex_tmap INTO lst_pdmap
                   WHERE sysid  = sy-sysid
                     AND id     = mst_config-id.

    MOVE-CORRESPONDING lst_pdmap TO rst_pdmap.

    IF rst_pdmap-obj IS INITIAL.
      rst_pdmap-obj = 'IV'.
    ENDIF.
    IF rst_pdmap-mapid IS INITIAL.
      rst_pdmap-mapid = 'ROUTTY'.
    ENDIF.

  ENDMETHOD.
  METHOD ping_system.

    DATA: ls_query       TYPE string,
          li_return_code TYPE i.

    zdyn_cl_msg=>add_to_call_stack( ).

    mo_http_client = mo_http_client_api.
    CHECK mo_http_client IS BOUND.

    ls_query = 'limit=1'.
    set_new_rel_url( is_path  = con_output_documents
                     is_query = ls_query ).
    call_http_get( IMPORTING ei_return_code = li_return_code ).
    IF li_return_code = 200.
      add_msg_0 s 047 zdyn_ws 0.
*   message s047(zdyn_ws).
    ELSE.
      set_new_rel_url( is_path  = con_document_statuses ).
      call_http_get( IMPORTING ei_return_code = li_return_code ).
      IF li_return_code = 200.
        add_msg_0 s 047 zdyn_ws 0.
*   message s047(zdyn_ws).
      ELSE.

        set_response_message( ii_http_status = li_return_code ).
        add_msg_0 e 048 zdyn_ws 0.
*   message e048(zdyn_ws).
      ENDIF.
    ENDIF.


  ENDMETHOD.
METHOD post_party.

  DATA: ls_json        TYPE string,
        ls_path        TYPE string,
        li_return_code TYPE i.

  CHECK mo_http_client IS BOUND.

  zdyn_cl_msg=>add_to_call_stack( ).

  ls_path = '/connector-api/masterdata'.
  ms_url = mo_http_client->create_rel_url( path = ls_path ).

  mo_http_client->request->set_header_field( EXPORTING name  = 'Content-Type'
                                                       value = con_mimetype_json ).

  ls_json = serialize_to_json( ist_data       = ist_routty_par
                               ic_compress    = abap_true
                               ic_pretty_name = con_camel_case ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

  call_http_post( EXPORTING is_input       = ls_json
                  IMPORTING ei_return_code = li_return_code ).

  IF li_return_code > 299.
    set_response_message( ).
  ENDIF.

ENDMETHOD.
METHOD post_party_exp.

  DATA: lb_ok       TYPE abap_bool,
        lst_parties TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_routty_partylist2,
        lst_party   LIKE LINE OF lst_parties-_items,
        lst_contact LIKE LINE OF lst_party-_contact_information,
        lst_line    TYPE zdyn_cl_rest_routty_exp_data=>ty_csv_line.
  FIELD-SYMBOLS: <st_part>  LIKE LINE OF ist_routty_par-_party_list.

  zdyn_cl_msg=>add_to_call_stack( ).

  LOOP AT ist_routty_par-_party_list ASSIGNING <st_part>.
    CLEAR lst_party.
    lst_party-_externalref      = <st_part>-_party-_metadata-_number.
    lst_party-_name             = <st_part>-_party-_metadata-_name1.
    lst_party-_company_group_id = <st_part>-_party-_metadata-_corporate_group_i_d.
    lst_party-_enabled          = <st_part>-_party-_active.
    lst_party-_number           = <st_part>-_party-_metadata-_number.
    lst_party-_type             = <st_part>-_party-_type-_type.

    lst_contact-_primary        = abap_true.
    lst_contact-_street_name    = <st_part>-_party-_metadata-_street.
    lst_contact-_street_number  = <st_part>-_party-_metadata-_house_num.
    lst_contact-_po_box         = <st_part>-_party-_metadata-_po_box.
    lst_contact-_postal_code    = <st_part>-_party-_metadata-_postal_code.
    lst_contact-_city           = <st_part>-_party-_metadata-_city.
    lst_contact-_country_code   = <st_part>-_party-_metadata-_country_code.
    lst_contact-_email          = <st_part>-_party-_metadata-_email_address.
    lst_contact-_phone_number   = <st_part>-_party-_metadata-_telephone.

    APPEND lst_contact TO lst_party-_contact_information.

    set_identifiers( EXPORTING ist_party = <st_part>
                     IMPORTING et_ids    = lst_party-_identifiers ).

    APPEND lst_party TO lst_parties-_items.
  ENDLOOP.


  lst_parties-_externaltrackingref = '1'.
  post_party( EXPORTING  ist_routty_par = lst_parties
              EXCEPTIONS OTHERS         = 0 ).

ENDMETHOD.
  METHOD prepare_client.

    DATA: ls_api_key  TYPE string.

    zdyn_cl_msg=>add_to_call_stack( ).

    super->prepare_client( EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.

    mo_http_client_api = mo_http_client.

* Documents are available under different URL
    IF mst_config-doc_rfcdest IS NOT INITIAL.
      create_http_client( EXPORTING  ic_rfcdest = mst_config-doc_rfcdest
                          EXCEPTIONS OTHERS     = 1 ).
      IF sy-subrc = 0.
        mo_http_client_doc = mo_http_client.
      ELSE.
        RAISE error_occurred.
      ENDIF.
    ELSE.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'ZDYN_WS'
                                      ic_msgno    = '043' ).
*   MESSAGE e043(zdyn_ws).
      RAISE error_occurred.
    ENDIF.

* default
    mo_http_client = mo_http_client_api.

    CONCATENATE 'ApiKey' mst_config-api_key INTO ls_api_key SEPARATED BY space.

* only API requires authorization, document BLOB doesn't
    mo_http_client_api->request->set_header_field( EXPORTING name  = 'Authorization'
                                                             value = ls_api_key ).

  ENDMETHOD.
  METHOD register_document.

    zdyn_cl_db=>mo->register_document( EXPORTING  ic_doc_type = mst_ar_config-out_doc_type
                                                  ic_number   = ic_doc_number
                                       EXCEPTIONS timeout     = 1
                                                  OTHERS      = 2 ).
    IF sy-subrc = 1.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                      ic_msgno = '026'
                                      ic_msgv1 = 'ZDYN_ROUTTY_TDOC' ).
*         message e026(zdyn_ws) with space.
      RAISE error_occurred.
    ELSEIF sy-subrc <> 0.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = '6C'
                                      ic_msgno = '056' ).
*         message e056(6c).
      RAISE error_occurred.
    ENDIF.

  ENDMETHOD.
  METHOD remove_multi_cc_parties.

    DATA: li_counter TYPE i,
          lb_active  TYPE abap_bool.
    FIELD-SYMBOLS: <st_party>     LIKE LINE OF ct_parties,
                   <st_party_int> LIKE LINE OF ct_parties.


************************************************************************************************************
* Eliminate records for multiple company codes, setting the ACTIVE flag if it is active for any company code
* Clear CorporateGroupId field

    SORT ct_parties BY _party-_metadata-_number.

    LOOP AT ct_parties ASSIGNING <st_party>.
      IF li_counter > 0.
        li_counter = li_counter - 1.
        DELETE ct_parties.
        CONTINUE.
      ENDIF.
      lb_active = <st_party>-_party-_active.
      LOOP AT ct_parties ASSIGNING <st_party_int>
          WHERE _party-_metadata-_number = <st_party>-_party-_metadata-_number
            AND _party-_metadata-_corporate_group_i_d <> <st_party>-_party-_metadata-_corporate_group_i_d.
        IF lb_active = abap_false AND <st_party_int>-_party-_active = abap_true.
          lb_active = abap_true.
        ENDIF.
        li_counter = li_counter + 1.
      ENDLOOP.
      <st_party>-_party-_active = lb_active.
      <st_party>-_party-_metadata-_corporate_group_i_d = '0'.
    ENDLOOP.

  ENDMETHOD.
  METHOD save_party_in_csv_file.

    DATA: lt_data     TYPE rmps_t_1024,
          lb_ok       TYPE abap_bool,
          ls_content  TYPE string,
          lst_line    TYPE zdyn_cl_rest_routty_exp_data=>ty_csv_line,
          ls_filename TYPE string,
          ls_suffix   TYPE char10,
          li_length   TYPE i.
    FIELD-SYMBOLS: <st_part>    TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_partylist.

    IF mi_batch_counter = 0.
      ls_suffix = '1'.
    ELSE.
      ls_suffix = mi_batch_counter.
    ENDIF.

    CONCATENATE 'EntityType;Type;CrmNumber;Name;CompanyGroupId;Status;Street;Number;PoBox;PostalCode;City;CountryCode;Phone;Email;'
      'Identifier1Type;Identifier1Value;Identifier2Type;Identifier2Value;Identifier3Type;Identifier3Value;Identifier4Type;'
      'Identifier4Value;Identifier5Type;Identifier5Value;isTest'
      cl_abap_char_utilities=>cr_lf
    INTO ls_content.

    LOOP AT ist_routty_par-_party_list ASSIGNING <st_part>.
      CLEAR lst_line.
      IF ls_filename IS INITIAL.
        CONCATENATE ls_suffix '.csv' INTO ls_filename.
        CONDENSE ls_filename.
        CONCATENATE ms_masterdata_pathname '/' <st_part>-_party-_type-_name '_' ls_filename INTO ls_filename.
      ENDIF.
      lst_line-entity_type         = <st_part>-_party-_type-_name.
      lst_line-party_type          = <st_part>-_party-_type-_type.
      lst_line-crm_number          = <st_part>-_party-_metadata-_number.
      lst_line-name                = <st_part>-_party-_metadata-_name1.
      lst_line-company_group_id    = <st_part>-_party-_metadata-_corporate_group_i_d.
      IF <st_part>-_party-_metadata-_street IS INITIAL.
        lst_line-street            = <st_part>-_party-_metadata-_address1.
      ELSE.
        lst_line-street            = <st_part>-_party-_metadata-_street.
      ENDIF.
      lst_line-number              = <st_part>-_party-_metadata-_house_num.
      lst_line-po_box              = <st_part>-_party-_metadata-_po_box.
      lst_line-postal_code         = <st_part>-_party-_metadata-_postal_code.
      lst_line-city                = <st_part>-_party-_metadata-_city.
      lst_line-country_code        = <st_part>-_party-_metadata-_country_code.
      lst_line-phone               = <st_part>-_party-_metadata-_telephone.
      lst_line-email               = <st_part>-_party-_metadata-_email_address.
      IF mb_masterdata_file_test = abap_true.
        lst_line-istest              = 'TRUE'.
      ELSE.
        lst_line-istest              = 'FALSE'.
      ENDIF.

      set_identifiers( EXPORTING ist_party = <st_part>
                       CHANGING  cst_line  = lst_line ).

      IF <st_part>-_party-_active = abap_true.
        lst_line-status = 'ACTIVE'.
      ELSE.
        lst_line-status = 'DISABLED'.
      ENDIF.

      add_line_to_csv_file( EXPORTING ist_csv_line = lst_line
                            CHANGING  cs_content   = ls_content ).
    ENDLOOP.

    convert_string_to_tt_tbl1024( EXPORTING is_string  = ls_content
                                  IMPORTING  et_data   = lt_data
                                             ei_length = li_length ).

    lb_ok = mo_file->store_file_on_client( is_filename = ls_filename
                                           is_filetype = 'BIN'
                                           ii_length   = li_length
                                           it_data     = lt_data ).
    IF lb_ok = abap_true.
      add_msg_1 s 136 umg 0 ls_filename.
*   MESSAGE s136(umg).
    ELSE.
      add_msg_1 e 383 s# 0 ls_filename.
*   MESSAGE e383(s#).
      RAISE error_occurred.
    ENDIF.

  ENDMETHOD.
  METHOD send_document.

    DATA: ls_xml           TYPE string,
          ls_xml_out       TYPE string,
          li_return_code   TYPE i,
          ls_date          TYPE string,
          ls_input         TYPE string,
          ls_doc_no        TYPE string,
          lc_timestamp     TYPE timestamp,
          lc_tz            TYPE ttzz-tzone, "empty means UTC
          ld_utc_date      TYPE erdat,
          ld_utc_time      TYPE erzet,
          lst_document_res TYPE zdyn_cl_rest_routty_exp_data=>ty_input_document_res.

    zdyn_cl_msg=>add_to_call_stack( ).

    mo_http_client = mo_http_client_api.
    set_new_rel_url( is_path = con_input_documents ).
    ls_doc_no = is_doc_no.
    mo_http_client->request->set_header_field( EXPORTING name  = 'x-correlation-id'
                                                         value =  ls_doc_no ).
* we need UTC date and time
    GET TIME STAMP FIELD lc_timestamp .
    CONVERT TIME STAMP lc_timestamp TIME ZONE lc_tz INTO DATE ld_utc_date TIME ld_utc_time.
    ls_date = write_date_and_time( id_date = ld_utc_date
                                   id_time = ld_utc_time ).
    CONCATENATE '{ "receivedOn": "' ls_date '" }' INTO ls_input.
    call_http_post( EXPORTING is_input              = ls_input
                              ib_repeat_after_error = abap_true
                    IMPORTING ei_return_code        = li_return_code ).

    IF li_return_code < 300.
      deserialize_from_json( EXPORTING is_json  = ms_result
                             CHANGING  cst_data = lst_document_res ).
      IF lst_document_res-uploadurl IS NOT INITIAL.

        IF is_xml IS INITIAL.
          LOOP AT it_xml INTO ls_xml.
            CONCATENATE ls_xml_out ls_xml INTO ls_xml_out.
          ENDLOOP.
        ELSE.
          ls_xml_out = is_xml.
        ENDIF.

        mo_http_client = mo_http_client_doc.
        set_doc_download_url( lst_document_res-uploadurl ).
        mo_http_client->request->set_header_field( EXPORTING name  = 'x-ms-blob-type'
                                                             value =  'BlockBlob' ).
        call_http_put( EXPORTING is_input               = ls_xml_out
                                 ib_repeat_after_error  = abap_true
                       IMPORTING ei_return_code         = li_return_code ).
        IF li_return_code < 300.
          mi_entry_counter = mi_entry_counter + 1.
          eb_ok = abap_true.
        ENDIF.
      ENDIF.
      set_response_message( ii_http_status = li_return_code
                            ic_doc_number  = ls_doc_no ).
    ELSE.
      set_response_message( ii_http_status = li_return_code ).
    ENDIF.

  ENDMETHOD.
  METHOD send_feedback.

    DATA: lt_messages    TYPE bapiret2_t,
          lst_feedback   TYPE zdyn_cl_rest_routty_exp_data=>ty_acknowlagement,
          ls_message     TYPE string,
          ls_url         LIKE ms_url,
          li_return_code TYPE i,
          ls_json        TYPE string.
    FIELD-SYMBOLS: <message> TYPE bapiret2.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK NOT ms_guid IS INITIAL.
    CHECK mo_http_client IS BOUND.

    mo_http_client = mo_http_client_api.
    CONCATENATE con_output_documents '/' ms_guid INTO ls_url.
    set_new_rel_url( is_path = ls_url ).

    lt_messages = zdyn_cl_msg=>get_messages( ib_only_group = abap_true ).
    LOOP AT lt_messages ASSIGNING <message>.
      IF sy-tabix = 1.
        ls_message = <message>-message.
      ELSE.
        CONCATENATE ls_message <message>-message INTO ls_message SEPARATED BY space.
      ENDIF.
    ENDLOOP.

    lst_feedback-status   = 'OK'.
    lst_feedback-code     = 'Processed'.
    lst_feedback-message  = ls_message.

    mo_http_client->request->set_header_field( name  = 'Accept'
                                               value = con_mimetype_json ).

    ls_json = serialize_to_json( ist_data       = lst_feedback
                                 ic_compress    = abap_false
                                 ic_pretty_name = con_camel_case ).

    call_http_put( EXPORTING is_input       = ls_json
                   IMPORTING ei_return_code = li_return_code ).

    set_response_message( ii_http_status = li_return_code ).

  ENDMETHOD.
  METHOD send_tech_status.

    DATA: lt_messages    TYPE bapiret2_t,
          lst_feedback   TYPE zdyn_cl_rest_routty_exp_data=>ty_tech_acknowlagement,
          ls_message     TYPE string,
          ls_url         LIKE ms_url,
          li_return_code TYPE i,
          ls_json        TYPE string.
    FIELD-SYMBOLS: <message> TYPE bapiret2.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK NOT ms_guid IS INITIAL.
    CHECK mo_http_client IS BOUND.

    mo_http_client = mo_http_client_api.
    CONCATENATE con_output_documents '/' ms_guid '/' con_technical_ack INTO ls_url.
    set_new_rel_url( is_path = ls_url ).

    lst_feedback-successful = ib_ok.

    IF ib_ok = abap_false.
      lst_feedback-errorcode = con_error_code_01.
      lt_messages = zdyn_cl_msg=>get_messages( ib_only_group = abap_true ).
      LOOP AT lt_messages ASSIGNING <message>.
        IF sy-tabix = 1.
          ls_message = <message>-message.
        ELSE.
          CONCATENATE ls_message <message>-message INTO ls_message SEPARATED BY space.
        ENDIF.
      ENDLOOP.
      lst_feedback-errormessage = ls_message.
    ENDIF.

    mo_http_client->request->set_header_field( name  = 'Accept'
                                               value = con_mimetype_json ).

    ls_json = serialize_to_json( ist_data       = lst_feedback
                                 ic_compress    = abap_false
                                 ic_pretty_name = con_camel_case ).

    call_http_put( EXPORTING is_input       = ls_json
                   IMPORTING ei_return_code = li_return_code ).

    set_response_message( ii_http_status = li_return_code ).

  ENDMETHOD.
  METHOD set_company.

    DATA: li_return_code TYPE i,
          ls_path        TYPE string,
          ls_json        TYPE string,
          lt_bukrs       TYPE STANDARD TABLE OF bukrs,
          lt_messages    TYPE bapiret2_t,
          lst_cc_detail  TYPE bapi0002_2,
          lst_cc_address TYPE bapi0002_3,
          lst_metadata   TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_metadata,
          lst_type       TYPE zdyn_cl_rest_routty_exp_data=>ty_type,
          lst_partyregno TYPE zdyn_cl_rest_routty_exp_data=>ty_partyregno,
          lst_partyregs  TYPE zdyn_cl_rest_routty_exp_data=>ty_partyregs,
          lst_partybank  TYPE zdyn_cl_rest_routty_exp_data=>ty_partybank,
          lst_partybanks TYPE zdyn_cl_rest_routty_exp_data=>ty_partybanks,
          lst_party      TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_party,
          lst_partylist  TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_partylist,
          lst_routty_par TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_routty_partylist.

    FIELD-SYMBOLS: <bukrs> TYPE bukrs.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK NOT mt_sel_comp_codes IS INITIAL.
    CHECK mo_http_client IS BOUND OR mb_masterdata_to_file = abap_true.

*    set_append( ib_delete = ib_delete ).

* add/modify entries
    zdyn_cl_bapi=>mo->get_company_codes( EXPORTING it_sel_opt       = mt_sel_comp_codes
                                         IMPORTING et_company_codes = lt_bukrs ).
    CHECK NOT lt_bukrs IS INITIAL.
    CLEAR: mi_entry_counter, lst_routty_par, lst_partylist.

    CLEAR mi_entry_counter.
    LOOP AT lt_bukrs ASSIGNING <bukrs>.

      zdyn_cl_bapi=>mo->bapi_companycode_getdetail( EXPORTING ic_companycode_id       = <bukrs>
                                                    IMPORTING est_companycode_detail  = lst_cc_detail
                                                              est_companycode_address = lst_cc_address ).

      CLEAR: lst_party, lst_partyregno, lst_partyregs, lst_metadata, lst_partybank, lst_type, lst_party.
      IF lst_cc_detail-vat_reg_no IS NOT INITIAL.
        lst_partyregno-_number = lst_cc_detail-vat_reg_no.
        lst_partyregno-_scheme = 'VAT'.
        lst_partyregs-_party_registration_number = lst_partyregno.
      ENDIF.
      APPEND lst_partyregs TO lst_metadata-_party_registration_numbers.

      IF lst_cc_detail-currency_iso IS NOT INITIAL.
        lst_partybank-_currency = lst_cc_detail-currency_iso.
        extend_partybank( EXPORTING ist_cc_details = lst_cc_detail
                          CHANGING  cst_partybank  = lst_partybank ).
        lst_partybanks-_party_bank_account = lst_partybank.
      ELSE.
      ENDIF.
      APPEND lst_partybanks TO lst_metadata-_party_bank_accounts.

      IF ib_unique_id = abap_false.
        lst_metadata-_corporate_group_i_d = lst_cc_detail-comp_code.
      ELSE.
        lst_metadata-_corporate_group_i_d = '0'.
      ENDIF.
      lst_metadata-_number              = lst_cc_detail-comp_code.
      lst_metadata-_name1               = lst_cc_detail-comp_name.
      lst_metadata-_name2               = lst_cc_address-name_2.
      lst_metadata-_address1            = lst_cc_address-street.
      lst_metadata-_address2            = lst_cc_address-str_suppl1.
      lst_metadata-_street              = lst_cc_address-street.
      lst_metadata-_house_num           = lst_cc_address-house_no.
      lst_metadata-_postal_code         = lst_cc_address-postl_cod1.
      lst_metadata-_po_box              = lst_cc_address-po_box.
      lst_metadata-_city                = lst_cc_address-city.
      lst_metadata-_state               = lst_cc_address-region.
      lst_metadata-_country_code        = lst_cc_detail-country_iso.
      lst_metadata-_telephone           = lst_cc_address-tel1_numbr.
      lst_metadata-_email_address       = zdyn_cl_bapi=>mo->get_email_from_adr6( ic_adrnr = lst_cc_address-addr_no ).

      REPLACE ALL OCCURRENCES OF '"' IN lst_metadata-_name1 WITH ''''.
      REPLACE ALL OCCURRENCES OF '"' IN lst_metadata-_name2 WITH ''''.

      extend_exp_metadata( EXPORTING ist_cc_details = lst_cc_detail
                                     ist_cc_address = lst_cc_address
                           CHANGING  cst_metadata   = lst_metadata ).

      lst_type-_name = 'Company'.
      lst_type-_type = 'COMPANY'.
      lst_party-_type = lst_type.
      lst_party-_metadata = lst_metadata.
      lst_party-_active = abap_true.
      lst_partylist-_party = lst_party.
      APPEND lst_partylist TO lst_routty_par-_party_list.
      mi_entry_counter = mi_entry_counter + 1.
    ENDLOOP.

    zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).

    IF mb_masterdata_to_file = abap_false.
      post_party_exp( EXPORTING  ist_routty_par = lst_routty_par
                      EXCEPTIONS OTHERS         = 0 ).
    ELSE.
      save_party_in_csv_file( EXPORTING  ist_routty_par = lst_routty_par
                              EXCEPTIONS OTHERS         = 0 ).
    ENDIF.

  ENDMETHOD.
  METHOD set_customers.

    DATA: li_return_code  TYPE i,
          lt_cmd_all      TYPE zdyn_cl_bapi=>yt_customers,
          lt_cmd          LIKE lt_cmd_all,
          lt_messages     TYPE bapiret2_t,
          ld_date         LIKE id_date,
          li_remaining    TYPE i,
          li_copied       TYPE i,
          lt_bankaccounts TYPE zdyn_cl_rest_routty_exp_data=>tt_partybanks,
          lst_metadata    TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_metadata,
          lst_type        TYPE zdyn_cl_rest_routty_exp_data=>ty_type,
          lst_partyregno  TYPE zdyn_cl_rest_routty_exp_data=>ty_partyregno,
          lst_partyregs   TYPE zdyn_cl_rest_routty_exp_data=>ty_partyregs,
          lst_party       TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_party,
          lst_partylist   TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_partylist,
          lst_routty_par  TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_routty_partylist.
    FIELD-SYMBOLS: <cmd> TYPE zdyn_ws_cmd.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK NOT it_sel_kunnr IS INITIAL.
    CHECK mo_http_client IS BOUND OR mb_masterdata_to_file = abap_true.

    IF id_date IS NOT INITIAL.
      ld_date = id_date.
      IF ld_date = sy-datlo.
        ld_date = sy-datlo - 1.
      ENDIF.
    ENDIF.

* add/modify entries
*    set_append( ib_delete = ib_delete ).

    zdyn_cl_bapi=>mo->get_customers( EXPORTING it_sel_opt        = it_sel_kunnr
                                               it_sel_comp_codes = mt_sel_comp_codes
                                               it_dyn_sel	       = it_dyn_sel
                                     IMPORTING et_customers      = lt_cmd_all ).
    remove_inactive_customers( EXPORTING ib_take_inactive = ib_take_inactive
                                         id_date          = id_date
                               CHANGING  ct_customers     = lt_cmd_all ).
    CHECK NOT lt_cmd_all IS INITIAL.

    CLEAR: mi_entry_counter, mi_batch_counter.
    li_remaining = lines( lt_cmd_all ).
    WHILE li_remaining > 0.
*   if this is already a consecutive iteration, switch to the 'modify' mode
      IF ib_delete = abap_true AND li_copied > 0.
        set_append( ib_delete = abap_false ).
      ENDIF.
      CLEAR: lt_cmd, li_copied, lst_routty_par.

      IF li_remaining < mi_bulk_size.
        lt_cmd = lt_cmd_all.
        li_remaining = 0.
      ELSE.
        LOOP AT lt_cmd_all ASSIGNING <cmd>.
          APPEND <cmd> TO lt_cmd.
          DELETE lt_cmd_all.
          li_copied = li_copied + 1.
          IF li_copied >= mi_bulk_size.
            li_remaining = li_remaining - li_copied.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      LOOP AT lt_cmd ASSIGNING <cmd>.
*   now we check date of last change
        IF NOT ld_date IS INITIAL.
          IF ld_date > <cmd>-erdat.
            CHECK abap_true = zdyn_cl_bapi=>mo->is_object_modified( ic_object_id    = <cmd>-kunnr
                                                                    ic_object_class = 'DEBI'
                                                                    id_date         = ld_date ).
          ENDIF.
        ENDIF.
        CLEAR: lst_party, lst_partyregno, lt_bankaccounts, lst_partyregs, lst_metadata, lst_type, lst_party.

        IF ib_bankdata = abap_true.
          lt_bankaccounts = fill_customer_bankaccount( ist_customer = <cmd> ).
        ENDIF.
        IF lt_bankaccounts IS INITIAL.
          APPEND INITIAL LINE TO lt_bankaccounts.
        ENDIF.

        lst_metadata-_party_bank_accounts = lt_bankaccounts.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <cmd>-kunnr
          IMPORTING
            output = <cmd>-kunnr.

        IF <cmd>-stceg IS NOT INITIAL.
          lst_partyregno-_number = <cmd>-stceg.
          lst_partyregno-_scheme = 'VAT'.
          lst_partyregs-_party_registration_number = lst_partyregno.
        ENDIF.
        APPEND lst_partyregs TO lst_metadata-_party_registration_numbers.

*     Fields Location 1 and 2 can contain KVK number value, used in the Netherlands (SAP note 101997)
        IF <cmd>-bbbnr IS NOT INITIAL OR <cmd>-bubkz IS NOT INITIAL.
          CONCATENATE <cmd>-bbbnr <cmd>-bubkz INTO lst_metadata-_party_id.
        ENDIF.

        lst_metadata-_number              = <cmd>-kunnr.
        lst_metadata-_corporate_group_i_d = <cmd>-bukrs.
*      lst_metadata-_is_masterdata       = abap_true.
        lst_metadata-_name1               = <cmd>-name1.
        lst_metadata-_name2               = <cmd>-name2.
        lst_metadata-_address1            = <cmd>-stras.
        lst_metadata-_street              = <cmd>-street.
        lst_metadata-_house_num           = <cmd>-house_num.
        lst_metadata-_postal_code         = <cmd>-pstlz.
        lst_metadata-_po_box              = <cmd>-pfach.
        lst_metadata-_city                = <cmd>-ort01.
        lst_metadata-_state               = <cmd>-regio.
        lst_metadata-_country_code        = <cmd>-land1.
        lst_metadata-_telephone           = <cmd>-telf1.
        lst_metadata-_payment_terms       = <cmd>-zterm.
        lst_metadata-_payment_method      = <cmd>-zwels.
        lst_metadata-_email_address       = zdyn_cl_bapi=>mo->get_email_from_adr6( ic_adrnr = <cmd>-adrnr ).

        REPLACE ALL OCCURRENCES OF '"' IN lst_metadata-_name1 WITH ''''.
        REPLACE ALL OCCURRENCES OF '"' IN lst_metadata-_name2 WITH ''''.

        extend_exp_metadata( EXPORTING ist_customer = <cmd>
                             CHANGING  cst_metadata = lst_metadata ).

        lst_type-_name      = 'Partner'.
        lst_type-_type      = 'CUSTOMER'.
        lst_party-_type     = lst_type.
        lst_party-_metadata = lst_metadata.
        IF NOT <cmd>-loevm IS INITIAL OR
           NOT <cmd>-sperr IS INITIAL.
          lst_party-_active = abap_false.
        ELSEIF NOT mt_sel_comp_codes IS INITIAL
           AND ( NOT <cmd>-bukrs_loevm IS INITIAL OR
                 NOT <cmd>-bukrs_sperr IS INITIAL ).
          lst_party-_active = abap_false.
        ELSE.
          lst_party-_active = abap_true.
        ENDIF.

        lst_partylist-_party = lst_party.
        APPEND lst_partylist TO lst_routty_par-_party_list.
        mi_entry_counter = mi_entry_counter + 1.
      ENDLOOP.

      IF lst_routty_par-_party_list IS NOT INITIAL.
        mi_batch_counter = mi_batch_counter + 1.
      ELSE.
        CONTINUE.
      ENDIF.

      IF ib_unique_id = abap_true.
        remove_multi_cc_parties( CHANGING  ct_parties = lst_routty_par-_party_list ).
      ENDIF.

      IF mb_masterdata_to_file = abap_false.
        post_party_exp( EXPORTING  ist_routty_par = lst_routty_par
                        EXCEPTIONS OTHERS         = 0 ).
      ELSE.
        save_party_in_csv_file( EXPORTING  ist_routty_par = lst_routty_par
                                EXCEPTIONS OTHERS         = 0 ).
      ENDIF.
    ENDWHILE.

    zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                                 ii_batch_count = mi_batch_counter ).

  ENDMETHOD.
  METHOD set_doc_download_url.

    DATA: li_pos TYPE i.

* cut off the domain name
    FIND FIRST OCCURRENCE OF REGEX '[^\/]\/[^\/]' IN is_full_url MATCH OFFSET li_pos.
    li_pos = li_pos + 1.
    ms_url = is_full_url+li_pos.

  ENDMETHOD.
  METHOD set_guid.

    DATA: li_pos TYPE i,
          li_len TYPE i.

* we may expect '.xml' file name extension in the name
    FIND FIRST OCCURRENCE OF REGEX '\b[0-9a-fA-F_\-]+(?=.xml)' IN ms_url MATCH OFFSET li_pos MATCH LENGTH li_len.
    IF li_pos = 0 OR li_len = 0.
      FIND FIRST OCCURRENCE OF REGEX '\/[0-9a-fA-F_\-]+\?' IN ms_url MATCH OFFSET li_pos MATCH LENGTH li_len.
      IF li_pos = 0 OR li_len = 0.
        zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                        ic_msgno = '29' ).
*   message e028(zdyn_ws).
        RAISE error_occurred.
      ENDIF.
      li_pos = li_pos + 1.
      li_len = li_len - 2.
      ms_guid = ms_url+li_pos(li_len).
    ENDIF.
    ms_guid = ms_url+li_pos(li_len).

  ENDMETHOD.
  METHOD set_http_client.

    super->set_http_client( io_http_client ).

    mo_http_client_api = io_http_client.
    mo_http_client_doc = io_http_client.

  ENDMETHOD.
METHOD set_identifiers.

  DATA: lt_ids        TYPE zdyn_cl_rest_routty_exp_data=>tt_identifiers,
        lst_id        LIKE LINE OF lt_ids,
        lc_field_name TYPE string,
        lc_index      TYPE char2.
  FIELD-SYMBOLS: <st_account> LIKE LINE OF ist_party-_party-_metadata-_party_bank_accounts,
                 <st_reg>     LIKE LINE OF ist_party-_party-_metadata-_party_registration_numbers,
                 <id>         TYPE any.

  READ TABLE ist_party-_party-_metadata-_party_registration_numbers INDEX 1 ASSIGNING <st_reg>.
  IF sy-subrc = 0 AND <st_reg>-_party_registration_number-_number IS NOT INITIAL.
    lst_id-type  = 'VAT'.
    lst_id-value = <st_reg>-_party_registration_number-_number.
    APPEND lst_id TO lt_ids.
  ENDIF.

  IF ist_party-_party-_metadata-_party_id IS NOT INITIAL.
    lst_id-type  = 'KVK'.
    lst_id-value = ist_party-_party-_metadata-_party_id.
    APPEND lst_id TO lt_ids.
  ENDIF.

  LOOP AT ist_party-_party-_metadata-_party_bank_accounts ASSIGNING <st_account>
      WHERE _party_bank_account-_i_b_a_n IS NOT INITIAL.
    lst_id-type  = 'IBAN'.
    lst_id-value = <st_account>-_party_bank_account-_i_b_a_n.
    APPEND lst_id TO lt_ids.
  ENDLOOP.

* we are trying to add at least the number - the name is optional, only if it fits
  lst_id-type  = 'CRMNB'.
  lst_id-value = ist_party-_party-_metadata-_number.
  APPEND lst_id TO lt_ids.

  lst_id-type  = 'NAME'.
  lst_id-value = ist_party-_party-_metadata-_name1.
  APPEND lst_id TO lt_ids.

* customer extension
  extend_identifiers( EXPORTING ist_metadata   = ist_party-_party-_metadata
                                ist_line       = cst_line
                      CHANGING  ct_identifiers = lt_ids ).

  LOOP AT lt_ids INTO lst_id.
    lc_index = sy-tabix.
    CONCATENATE 'IDENTIFIER_' lc_index '_TYPE' INTO lc_field_name.
    ASSIGN COMPONENT lc_field_name OF STRUCTURE cst_line TO <id>.
    CHECK <id> IS ASSIGNED AND sy-subrc = 0.
    <id> = lst_id-type.

    CONCATENATE 'IDENTIFIER_' lc_index '_VALUE' INTO lc_field_name.
    ASSIGN COMPONENT lc_field_name OF STRUCTURE cst_line TO <id>.
    CHECK <id> IS ASSIGNED AND sy-subrc = 0.
    <id> = lst_id-value.
  ENDLOOP.

  et_ids = lt_ids.

ENDMETHOD.
  METHOD set_input_channel.

    DATA: lst_doc    LIKE ist_document,
          ls_channel LIKE lst_doc-inputchannelname.

    lst_doc = ist_document.
    TRANSLATE lst_doc-inputchannelname TO UPPER CASE.
    TRANSLATE lst_doc-correlationid TO UPPER CASE.

    IF lst_doc-inputchannelname IS NOT INITIAL.
      ls_channel = lst_doc-inputchannelname.
    ELSE.
      IF lst_doc-correlationid CS 'FTP'.
        ls_channel = 'SFTP'.
      ELSE.
        ls_channel = 'PEPPOL'.
      ENDIF.
    ENDIF.

* we are not sure what value have been found finally, we need to standarize it
    IF ls_channel CS 'FTP'.
*    zdyn_cl_data_container=>mo_set( ic_name = 'INPUT_CHANNEL' )
      mo_pdiv_document->set( ic_name = 'INPUT_CHANNEL'
                             i_value = 'SFTP' ).
    ELSEIF ls_channel CS 'PEPPOL'.
      mo_pdiv_document->set( ic_name = 'INPUT_CHANNEL'
                             i_value = 'PEPPOL' ).
    ELSE.
      mo_pdiv_document->set( ic_name = 'INPUT_CHANNEL'
                             i_value = ls_channel ).
    ENDIF.

  ENDMETHOD.
  METHOD set_input_documents.

    DATA: lc_doc_number TYPE nast-objky,
          lt_doc_no     TYPE tt_vbeln,
          lc_doc_no     LIKE LINE OF lt_doc_no,
          lb_ok         TYPE abap_bool,
          lt_xml        TYPE zdyn_lstring,
          lt_msgs       TYPE zdyn_lstr_message.

    zdyn_cl_msg=>add_to_call_stack( ).

    set_ar_logic( mo_ar ).
    CLEAR mi_entry_counter.

    cleanup_register( EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    zdyn_cl_config=>mo->get_accounts_recv_config( EXPORTING ic_id         = mst_config-id
                                                  IMPORTING est_ar_config = mst_ar_config ).
    IF mst_ar_config IS INITIAL.
      zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                      ic_msgno = '023' ).
*   message s023(zdyn_ws).
      RETURN.
    ENDIF.
* DOC_TYPE may not be equvalent to OUTPUT_TYPE, it's up to configuration
    IF mst_ar_config-out_doc_type IS INITIAL.
      mst_ar_config-out_doc_type = zdyn_cl_ar=>con_f2_doc_type.
    ENDIF.

    zdyn_cl_bapi=>mo->get_sales_doc_numbers( EXPORTING it_sel_sales_doc   = it_sel_sales_doc
                                                       it_sel_doc_type    = it_sel_doc_type
                                                       it_sel_comp_code   = it_sel_comp_code
                                                       it_sel_customer    = it_sel_customer
                                                       it_sel_application = it_sel_application
                                                       it_sel_msg_type    = it_sel_msg_type
                                                       it_dyn_sel         = it_dyn_sel
                                                       it_sel_create_date = it_sel_create_date
                                                       ic_doc_type        = mst_ar_config-out_doc_type
                                                       ib_use_register    = ib_use_register
                                             IMPORTING et_sales_docs      = lt_doc_no ).

    IF mst_parallel_proc-active = abap_false.
      set_input_documents_int( EXPORTING it_doc_numbers     = lt_doc_no
                                         ib_generate_pdf    = ib_generate_pdf
                                         ib_add_attachments = ib_add_attachments
                                         ib_require_attach  = ib_require_attach
                                         ib_use_register    = ib_use_register
                                         ist_ar_config      = mst_ar_config ).
      zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter ).
    ELSE.
      set_input_documents_int_par( EXPORTING it_doc_numbers     = lt_doc_no
                                             ib_generate_pdf    = ib_generate_pdf
                                             ib_add_attachments = ib_add_attachments
                                             ib_require_attach  = ib_require_attach
                                             ib_use_register    = ib_use_register
                                   IMPORTING eb_ok              = lb_ok ).
      zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                                   ii_batch_count = mi_batch_counter ).
      IF lb_ok = abap_false.
        add_msg_0 s 065 zdyn_ws 0.
*     message s065(zdyn_ws).
        RETURN.
      ENDIF.
    ENDIF.

  ENDMETHOD.
METHOD set_input_documents_ap.

* to be defined in a subclass

ENDMETHOD.
  METHOD set_input_documents_int.

    DATA: lc_doc_number TYPE nast-objky,
          lc_doc_no     LIKE LINE OF it_doc_numbers,
          lb_ok         TYPE abap_bool,
          lt_xml        TYPE zdyn_lstring.

    zdyn_cl_msg=>add_to_call_stack( ).

    set_ar_logic( mo_ar ).
    mst_ar_config = ist_ar_config.

    CLEAR mi_entry_counter.

    LOOP AT it_doc_numbers INTO lc_doc_no.
      CLEAR: lt_xml.

      lc_doc_number = lc_doc_no.

      zdyn_cl_msg=>add_msg( EXPORTING ic_msgty = 'S'
                                      ic_msgid = 'ZDYN_WS'
                                      ic_msgno = '027'
                                      ic_msgv1 = lc_doc_number
                                      ii_level = zdyn_cl_msg=>con_message_level_1 ).
*   message s027(zdyn_ws) with space.

      mo_ar->get_billing_doc_xml( EXPORTING   ic_doc_number      = lc_doc_number
                                              ic_application     = mst_ar_config-application
                                              ic_output_type     = mst_ar_config-message_type
                                              ic_doc_type        = mst_ar_config-out_doc_type
                                              ib_add_attachments = ib_add_attachments
                                              ib_generate_pdf    = ib_generate_pdf
                                              ib_require_attach  = ib_require_attach
                                  IMPORTING   et_xml             = lt_xml
                                  EXCEPTIONS  no_attachments     = 1
                                              OTHERS             = 2 ).
      IF sy-subrc = 1.
        zdyn_cl_msg=>add_msg( EXPORTING ic_msgty = 'W'
                                        ic_msgid = 'ZDYN_WS'
                                        ic_msgno = '38'
                                        ic_msgv1 = lc_doc_number ).
*     message e038(zdyn_ws) with space.
        CONTINUE.
      ELSEIF sy-subrc <> 0 OR lt_xml IS INITIAL.
        zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                        ic_msgno = '28'
                                        ic_msgv1 = lc_doc_number ).
*     message e028(zdyn_ws) with space.
        CONTINUE.
      ENDIF.

      IF mo_file->is_doc_to_file( ) = abap_false.
        lb_ok = send_document( is_doc_no = lc_doc_number
                               it_xml    = lt_xml ).
      ELSE.
        lb_ok = mo_file->save_doc_in_xml_file( is_doc_no = lc_doc_number
                                               it_xml    = lt_xml ).
        mi_entry_counter = mi_entry_counter + 1.
      ENDIF.

      IF ib_use_register = abap_true AND lb_ok = abap_true.
        register_document( EXPORTING  ic_doc_number = lc_doc_number
                           EXCEPTIONS OTHERS        = 1 ).
        IF sy-subrc <> 0.
          RETURN.
        ENDIF.
      ENDIF.
    ENDLOOP.
    mi_batch_counter = mi_batch_counter + 1.

  ENDMETHOD.
METHOD set_input_documents_int_par.

  DATA: lt_msgs TYPE zdyn_lstr_message.

  CALL FUNCTION 'ZDYN_AR_PROCESS_DOCUMENTS_EXT'
    EXPORTING
      it_doc_numbers     = it_doc_numbers
      ib_generate_pdf    = ib_generate_pdf
      ib_add_attachments = ib_add_attachments
      ib_require_attach  = ib_require_attach
      ib_use_register    = ib_use_register
      ist_config         = mst_config
      ist_ar_config      = mst_ar_config
      ist_parallel_proc  = mst_parallel_proc
    IMPORTING
      et_messages        = lt_msgs
      ei_entry_counter   = mi_entry_counter
      ei_batch_counter   = mi_batch_counter
      eb_ok              = eb_ok.

  zdyn_cl_msg=>add_internal_msgs( lt_msgs ).

  IF eb_ok = abap_false.
    add_msg_0 s 065 zdyn_ws 0.
*   message s065(zdyn_ws).
  ENDIF.

ENDMETHOD.
  METHOD set_parallel_processing.

    mst_parallel_proc-active        = ib_active.
    mst_parallel_proc-server_group  = ic_server_group.
    mst_parallel_proc-max_processes = ii_max_processes.
    mst_parallel_proc-package_size  = ii_packge_size.

  ENDMETHOD.
  METHOD set_suppliers.

    DATA: li_return_code  TYPE i,
          lt_vmd_all      TYPE STANDARD TABLE OF zdyn_ws_vmd,
          lt_vmd          LIKE lt_vmd_all,
          lt_messages     TYPE bapiret2_t,
          ld_date         LIKE id_date,
          li_remaining    TYPE i,
          li_copied       TYPE i,
          lt_bankaccounts TYPE zdyn_cl_rest_routty_exp_data=>tt_partybanks,
          lst_metadata    TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_metadata,
          lst_type        TYPE zdyn_cl_rest_routty_exp_data=>ty_type,
          lst_partyregno  TYPE zdyn_cl_rest_routty_exp_data=>ty_partyregno,
          lst_partyregs   TYPE zdyn_cl_rest_routty_exp_data=>ty_partyregs,
          lst_party       TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_party,
          lst_partylist   TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_partylist,
          lst_routty_par  TYPE zdyn_cl_rest_routty_exp_data=>ty_exp_routty_partylist.
    FIELD-SYMBOLS: <vmd> TYPE zdyn_ws_vmd.

    zdyn_cl_msg=>add_to_call_stack( ).

    CHECK NOT it_sel_lifnr IS INITIAL.
    CHECK mo_http_client IS BOUND OR mb_masterdata_to_file = abap_true.

    IF id_date IS NOT INITIAL.
      ld_date = id_date.
      IF ld_date = sy-datlo.
        ld_date = sy-datlo - 1.
      ENDIF.
    ENDIF.

* add/modify entries
*    set_append( ib_delete = ib_delete ).

    zdyn_cl_bapi=>mo->get_vendors( EXPORTING it_sel_opt        = it_sel_lifnr
                                             it_sel_comp_codes = mt_sel_comp_codes
                                             it_dyn_sel	       = it_dyn_sel
                                   IMPORTING et_vendors        = lt_vmd_all ).
    remove_inactive_suppliers( EXPORTING id_date          = id_date
                                         ib_take_inactive = ib_take_inactive
                               CHANGING  ct_suppliers     = lt_vmd_all ).
    CHECK lt_vmd_all IS NOT INITIAL.

    CLEAR: mi_entry_counter, mi_batch_counter.
    li_remaining = lines( lt_vmd_all ).
    WHILE li_remaining > 0.
      CLEAR: lt_vmd, li_copied, lst_routty_par.

      IF li_remaining < mi_bulk_size.
        lt_vmd = lt_vmd_all.
        li_remaining = 0.
      ELSE.
        LOOP AT lt_vmd_all ASSIGNING <vmd>.
          APPEND <vmd> TO lt_vmd.
          DELETE lt_vmd_all.
          li_copied = li_copied + 1.
          IF li_copied >= mi_bulk_size.
            li_remaining = li_remaining - li_copied.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.
      mi_batch_counter = mi_batch_counter + 1.

      LOOP AT lt_vmd ASSIGNING <vmd>.
*     now we check date of last change
        IF NOT ld_date IS INITIAL.
          IF ld_date > <vmd>-erdat.
            CHECK abap_true = zdyn_cl_bapi=>mo->is_object_modified( ic_object_id    = <vmd>-lifnr
                                                                    ic_object_class = 'KRED'
                                                                    id_date         = ld_date ).
          ENDIF.
        ENDIF.
        CLEAR: lst_party, lst_partyregno, lt_bankaccounts, lst_partyregs, lst_metadata, lst_type, lst_party.

        IF ib_bankdata = abap_true.
          lt_bankaccounts = fill_vendor_bankaccount( ist_vendor = <vmd> ).
        ENDIF.
        IF lt_bankaccounts IS INITIAL.
          APPEND INITIAL LINE TO lt_bankaccounts.
        ENDIF.

        lst_metadata-_party_bank_accounts = lt_bankaccounts.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <vmd>-lifnr
          IMPORTING
            output = <vmd>-lifnr.

        IF <vmd>-stceg IS NOT INITIAL.
          lst_partyregno-_number = <vmd>-stceg.
          lst_partyregno-_scheme = 'VAT'.
          lst_partyregs-_party_registration_number = lst_partyregno.
        ENDIF.
        APPEND lst_partyregs TO lst_metadata-_party_registration_numbers.

*     Fields Location 1 and 2 can contain KVK number value, used in the Netherlands (SAP note 101997)
        IF <vmd>-bbbnr IS NOT INITIAL OR <vmd>-bubkz IS NOT INITIAL.
          CONCATENATE <vmd>-bbbnr <vmd>-bubkz INTO lst_metadata-_party_id.
        ENDIF.

        lst_metadata-_number              = <vmd>-lifnr.
        lst_metadata-_corporate_group_i_d = <vmd>-bukrs.
        lst_metadata-_name1               = <vmd>-name1.
        lst_metadata-_name2               = <vmd>-name2.
        lst_metadata-_address1            = <vmd>-stras.
        lst_metadata-_street              = <vmd>-street.
        lst_metadata-_house_num           = <vmd>-house_num.
        lst_metadata-_postal_code         = <vmd>-pstlz.
        lst_metadata-_po_box              = <vmd>-pfach.
        lst_metadata-_city                = <vmd>-ort01.
        lst_metadata-_state               = <vmd>-regio.
        lst_metadata-_country_code        = <vmd>-land1.
        lst_metadata-_telephone           = <vmd>-telf1.
        lst_metadata-_payment_terms       = <vmd>-zterm.
        lst_metadata-_payment_method      = <vmd>-zwels.
        lst_metadata-_email_address       = zdyn_cl_bapi=>mo->get_email_from_adr6( ic_adrnr = <vmd>-adrnr ).

        REPLACE ALL OCCURRENCES OF '"' IN lst_metadata-_name1 WITH ''''.
        REPLACE ALL OCCURRENCES OF '"' IN lst_metadata-_name2 WITH ''''.

        extend_exp_metadata( EXPORTING ist_vendor   = <vmd>
                             CHANGING  cst_metadata = lst_metadata ).

        lst_type-_name      = 'Partner'.
        lst_type-_type      = 'SUPPLIER'.
        lst_party-_type     = lst_type.
        lst_party-_metadata = lst_metadata.
        IF NOT <vmd>-loevm IS INITIAL OR
           NOT <vmd>-sperr IS INITIAL.
          lst_party-_active = abap_false.
        ELSEIF NOT mt_sel_comp_codes IS INITIAL
           AND ( NOT <vmd>-bukrs_loevm IS INITIAL OR
                 NOT <vmd>-bukrs_sperr IS INITIAL ).
          lst_party-_active = abap_false.
        ELSE.
          lst_party-_active = abap_true.
        ENDIF.

        lst_partylist-_party = lst_party.
        APPEND lst_partylist TO lst_routty_par-_party_list.
        mi_entry_counter = mi_entry_counter + 1.
      ENDLOOP.

      IF ib_unique_id = abap_true.
        remove_multi_cc_parties( CHANGING  ct_parties = lst_routty_par-_party_list ).
      ENDIF.

      IF mb_masterdata_to_file = abap_false.
        post_party_exp( EXPORTING  ist_routty_par = lst_routty_par
                        EXCEPTIONS OTHERS         = 0 ).
      ELSE.
        save_party_in_csv_file( EXPORTING  ist_routty_par = lst_routty_par
                                EXCEPTIONS OTHERS         = 0 ).
      ENDIF.
    ENDWHILE.

    zdyn_cl_msg=>add_batch_info( ii_entry_count = mi_entry_counter
                                 ii_batch_count = mi_batch_counter ).

  ENDMETHOD.
