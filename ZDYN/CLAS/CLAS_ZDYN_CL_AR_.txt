INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_AR definition
  public
  create public .

public section.

  types:
    yt_range_doc_no TYPE RANGE OF zdyn_cl_bapi=>yst_sales_doc-sales_doc_nr .
  types:
    BEGIN OF yst_direct_conditions,
        vgbel      TYPE vbeln_va,
        empty_vbak TYPE abap_bool,
        cond       TYPE zdyn_tbapisdcond,
      END OF yst_direct_conditions .
  types:
    yt_direct_conditions TYPE SORTED TABLE OF yst_direct_conditions WITH UNIQUE KEY vgbel empty_vbak .

  constants CON_AR_DOC_NUMBER type STRING value 'ArDocumentNumber'. "#EC NOTEXT
  constants CON_AP_DOC_NUMBER type STRING value 'ApDocumentNumber'. "#EC NOTEXT
  constants CON_PARTNER_NUMBER type STRING value 'PartnerId'. "#EC NOTEXT
  constants CON_PARTNER_NAME type STRING value 'PartnerName'. "#EC NOTEXT
  constants CON_F2_DOC_TYPE type ZDYN_WS_DOUT_TYPE value 'F2'. "#EC NOTEXT
  constants CON_SELF_BILL_DOC_TYPE type ZDYN_WS_DOUT_TYPE value 'SB'. "#EC NOTEXT
  data MT_SAP_TO_XML_MAP type ZDYN_LWS_XMP .
  data MT_VGBEL_CONDITIONS type ZDYN_TBAPISDCOND .
  data MT_AUBEL_CONDITIONS type ZDYN_TBAPISDCOND .
  data MT_DIRECT_CONDITIONS type YT_DIRECT_CONDITIONS .
  data MT_VGBEL_NUMBERS type MDS_SALES_KEY_TAB .
  data MT_AUBEL_NUMBERS type MDS_SALES_KEY_TAB .
  data MT_VBRP type TT_VBRP .

  methods GET_BILLING_DOC_PDF
    importing
      !IC_DOC_NUMBER type ANY
      !IC_APPLICATION type SNA_KAPPL
      !IC_OUTPUT_TYPE type SNA_KSCHL
      !IC_LANGU type SY-LANGU default SY-LANGU
    exporting
      !ET_DATA type RMPS_T_1024
      !EI_BIN_LENGTH type I
      !EX_STREAM type XSTRING
    exceptions
      ERROR_OCCURRED .
  methods GET_BILLING_DOC_XML
    importing
      !IC_DOC_NUMBER type ANY
      !IC_APPLICATION type SNA_KAPPL
      !IC_OUTPUT_TYPE type SNA_KSCHL
      !IC_DOC_TYPE type ZDYN_WS_DOUT_TYPE optional
      !IC_LANGU type SY-LANGU default SY-LANGU
      !IB_ADD_ATTACHMENTS type ABAP_BOOL default ABAP_FALSE
      !IB_GENERATE_PDF type ABAP_BOOL default ABAP_FALSE
      !IB_REQUIRE_ATTACH type ABAP_BOOL default ABAP_FALSE
    exporting
      !ET_XML type ZDYN_LSTRING
    exceptions
      ERROR_OCCURRED
      NO_ATTACHMENTS .
  methods GET_BILLING_DOC_XML_NAST
    importing
      !IST_NAST type NAST
      !IT_ATTACHMENTS type ZDYN_LATTACHMENT optional
      !IC_DOC_TYPE type ZDYN_WS_CXML-DOC_TYPE
    exporting
      !ET_XML type ZDYN_LSTRING
    exceptions
      ERROR_OCCURRED .
  methods GET_NAST
    importing
      !IC_DOC_NUMBER type NAST-OBJKY
      !IC_APPLICATION type NAST-KAPPL
      !IC_OUTPUT_TYPE type NAST-KSCHL optional
    exporting
      !EST_NAST type NAST .
  methods TRANSFER_BILLING_TO_XML
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
      !IC_DOC_TYPE type ZDYN_WS_CXML-DOC_TYPE
      !IT_ATTACHMENTS type ZDYN_LATTACHMENT optional
    exporting
      !ET_XML type ZDYN_LSTRING
    exceptions
      ERROR_OCCURRED .
protected section.

  methods GET_CONDITIONS_FROM_VGBEL
    importing
      !IST_VBRP type VBRP
    exporting
      !ET_CONDITIONS type ZDYN_TBAPISDCOND
      !EB_FULL_SUCCESS type ABAP_BOOL .
  methods GET_MAPPING
    importing
      !IC_SAP_ALIAS type ZDYN_DSAP_ALIAS_NAME
      !IC_SAP_FIELD type ZDYN_DSAP_FIELD_NAME
      !IC_XML_ALIAS type ZDYN_DXML_ALIAS_NAME
      !IC_XML_FIELD type ZDYN_DXML_FIELD_NAME
    returning
      value(RST_RESULT) type ZDYN_WS_CXMP .
  methods GET_AUBEL_VGBEL_NUMBERS
    importing
      !IST_SAP_DATA type LBBIL_INVOICE .
  methods MAP_DOCUMENT_TYPE
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods GET_BUYER_ADDRESS
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    returning
      value(RST_RESULT) type LBBIL_HD_ADR .
  methods GET_CONDITIONS_FROM_BILL
    importing
      !IN_COND_NUMB type KNUMV
      !IST_VBRP type VBRP
    exporting
      !ET_CONDITIONS type ZDYN_TBAPISDCOND
      !EB_FULL_SUCCESS type ABAP_BOOL .
  methods GET_CONDITIONS_FROM_AUBEL
    importing
      !IST_VBRP type VBRP
    exporting
      !EB_FULL_SUCCESS type ABAP_BOOL
      !ET_CONDITIONS type ZDYN_TBAPISDCOND .
  methods ADD_TRADE_TAX
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_SELLER_OLD
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_SELLER
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_PARTNER_DATA
    importing
      !IST_ADDR type LBBIL_HD_ADR
      !IC_MAP_STRUC type ZDYN_DALIAS_NAME
      !IB_WITH_ADDRESS type ABAP_BOOL default ABAP_TRUE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_ITEM_TEXTS
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
      !IST_IT_GEN type LBBIL_IT_GEN
    changing
      !CST_ITEM type ZDYN_SXML_ITEM .
  methods ADD_ITEM_TAX
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
      !IST_IT_GEN type LBBIL_IT_GEN
      !IT_CONDITIONS type ZDYN_TBAPISDCOND
    changing
      !CST_ITEM type ZDYN_SXML_ITEM .
  methods ADD_ITEM_REFERENCES
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
      !IST_IT_GEN type LBBIL_IT_GEN
    changing
      !CST_ITEM type ZDYN_SXML_ITEM .
  methods ADD_ITEM_GENERAL
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
      !IST_IT_GEN type LBBIL_IT_GEN
    changing
      !CST_ITEM type ZDYN_SXML_ITEM .
  methods ADD_ITEM_AMOUNTS
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
      !IST_IT_GEN type LBBIL_IT_GEN
      !IST_VBRP type VBRP
      !IT_CONDITIONS type ZDYN_TBAPISDCOND
    changing
      !CST_ITEM type ZDYN_SXML_ITEM .
  methods ADD_HEADER_TEXTS
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_HEADER_GENERAL
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_BUYER_TAX_CODE
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_BUYER
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods ADD_PAYMENT_TERMS
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    exporting
      !ET_PTERMS type ZDYN_SXML_DST-STPT .
  methods BIN_TO_BASE64
    importing
      !IT_BINARY type ZDYN_LTBL1024
      !I_LENGTH type ANY
    exporting
      !ET_BASE64 type ZDYN_LXML_NOTE_CONTENT
    exceptions
      ERROR_OCCURRED .
  methods CONVERSION
    importing
      !IC_CONVERSION_FUNC type ZDYN_WS_CXMP-CONVERSION_FUNC optional
      !INPUT type ANY
    exporting
      !OUTPUT type ANY .
  methods EXTEND_ATTACHMENTS
    importing
      !IC_DOC_NUMBER type ANY
      !IST_NAST type NAST
    exporting
      !EB_SKIP_STANDARD type ABAP_BOOL
    changing
      !CT_ATTACHMENTS type ZDYN_LATTACHMENT .
  methods EXTEND_ITEM
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
      !IT_CONDITIONS type ZDYN_TBAPISDCOND
    changing
      !CST_ITEM type ZDYN_SXML_ITEM .
  methods EXTEND_HEADER
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_DATA type ZDYN_SXML_DST .
  methods GET_CONDITIONS
    importing
      !IN_COND_NUMB type KNUMV
      !IST_VBRP type VBRP
    exporting
      !ET_CONDITIONS type ZDYN_TBAPISDCOND .
  methods GET_NET_PRICE
    importing
      !IT_CONDITIONS type ZDYN_TBAPISDCOND
      !IST_ITEM type VBRP
    exporting
      !EST_PRICE_COND type BAPISDCOND .
  methods GET_PDF
    importing
      !IC_DOC_NUMBER type ANY
      !IC_APPLICATION type SNA_KAPPL
      !IC_OUTPUT_TYPE type SNA_KSCHL
      !IC_LANGU type SY-LANGU
    changing
      !CT_ATTACHMENTS type ZDYN_LATTACHMENT
    exceptions
      ERROR_OCCURRED .
  methods PROCESS_HEADER
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods PROCESS_ITEMS
    importing
      !IST_SAP_DATA type LBBIL_INVOICE
    changing
      !CST_XML type ZDYN_SXML_DST .
  methods TRANSFER_FIELDS
    importing
      !IC_SAP_ALIAS type ZDYN_DALIAS_NAME
      !IC_XML_ALIAS type ZDYN_DALIAS_NAME
      !I_ADD_KEY type ANY optional
      !IST_SOURCE type ANY optional
    changing
      !CST_DESTINATION type ANY .
  methods GET_BANKDATA_OLD
    importing
      !IC_BUKRS type BUKRS optional
      !IC_PARTNR type KUNNR optional
      !IC_ROLE type PARVW
    exporting
      !ET_BNKA type RE_T_BNKA
      !ET_T012K type TT_T012K_IT
      !ET_IBAN type ZDYN_LTIBAN_OLD
    exceptions
      ERROR_OCCURRED .
  methods GET_BANKDATA
    importing
      !IC_BUKRS type BUKRS optional
      !IC_PARTNR type KUNNR optional
      !IC_ROLE type PARVW
      !IC_BILLING_DOC type VBELN_VF
    exporting
      !ET_BNKA type ZDYN_LBNKA
      !ET_T012K type ZDYN_LT012K
      !ET_IBAN type ZDYN_LTIBAN
    exceptions
      ERROR_OCCURRED .
  methods CONVERT_255_TO_1024
    importing
      !IT_255 type SOLIX_TAB
    returning
      value(RT_1024) type ZDYN_LTBL1024 .
private section.
endclass. "ZDYN_CL_AR definition
class ZDYN_CL_AR implementation.
METHOD add_buyer.

  DATA: lst_hd_adr      TYPE lbbil_hd_adr,
        lb_with_address TYPE abap_bool,
        ln_invoicee_id  LIKE cst_xml-invoicee_id.

  lst_hd_adr = get_buyer_address( ist_sap_data = ist_sap_data ).
  IF lst_hd_adr IS NOT INITIAL.
    add_partner_data( EXPORTING ist_addr     = lst_hd_adr
                                ic_map_struc = 'SAP_HDR_ADR_DEB'
                      CHANGING  cst_xml      = cst_xml ).
  ENDIF.

* get data for invoicee if different than the buyer
* Bill-To Party
  READ TABLE  ist_sap_data-hd_adr INTO lst_hd_adr WITH KEY partn_role = 'RE'. "#EC CI_SORTSEQ
  IF sy-subrc = 0.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lst_hd_adr-partn_numb
      IMPORTING
        output = ln_invoicee_id.
    IF ln_invoicee_id <> cst_xml-buyer_id.
      lb_with_address = abap_true.
    ENDIF.
    add_partner_data( EXPORTING ist_addr        = lst_hd_adr
                                ic_map_struc    = 'SAP_HDR_ADR_INV'
                                ib_with_address = lb_with_address
                      CHANGING  cst_xml         = cst_xml ).
  ENDIF.

* Ship-To party (delivery address)
  READ TABLE ist_sap_data-hd_adr INTO lst_hd_adr WITH KEY partn_role = 'WE'. "#EC CI_SORTSEQ
  IF sy-subrc = 0.
    add_partner_data( EXPORTING ist_addr     = lst_hd_adr
                                ic_map_struc = 'SAP_HDR_ADR_DLV'
                      CHANGING  cst_xml      = cst_xml ).
  ENDIF.

  add_buyer_tax_code( EXPORTING ist_sap_data = ist_sap_data
                      CHANGING  cst_xml      = cst_xml ).

ENDMETHOD.
METHOD add_buyer_tax_code.

  DATA: lst_hd_adr    TYPE lbbil_hd_adr,
        lst_taxreg    TYPE zdyn_stax_reg,
        lst_hdtax     TYPE zdyn_stax,
        lst_tax_codes TYPE zdyn_ws_stax_codes.

  lst_hd_adr = get_buyer_address( ist_sap_data = ist_sap_data ).
  lst_tax_codes = zdyn_cl_bapi=>mo->get_customer_tax_code( lst_hd_adr-partn_numb ).

* buyer tax registration
  IF lst_tax_codes-stceg IS NOT INITIAL.
    lst_taxreg-taxtype = 'VA'.
    lst_taxreg-taxid = lst_tax_codes-stceg.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

  lst_taxreg-taxtype = 'FC'.
* other tax identifiers
  IF lst_tax_codes-stcd1 IS NOT INITIAL.
    lst_taxreg-taxid = lst_tax_codes-stcd1.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

  IF lst_tax_codes-stcd2 IS NOT INITIAL.
    lst_taxreg-taxid = lst_tax_codes-stcd2.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

  IF lst_tax_codes-stcd3 IS NOT INITIAL.
    lst_taxreg-taxid = lst_tax_codes-stcd3.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

  IF lst_tax_codes-stcd4 IS NOT INITIAL.
    lst_taxreg-taxid = lst_tax_codes-stcd4.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

  IF lst_tax_codes-stcd5 IS NOT INITIAL.
    lst_taxreg-taxid = lst_tax_codes-stcd5.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

  IF lst_tax_codes-stcd6 IS NOT INITIAL.
    lst_taxreg-taxid = lst_tax_codes-stcd6.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

* GLN
  IF lst_tax_codes-bbbnr IS NOT INITIAL AND lst_tax_codes-bbbnr <> '0000000'.
    lst_taxreg-taxtype = '0088'.
    CONCATENATE lst_tax_codes-bbbnr lst_tax_codes-bbsnr lst_tax_codes-bubkz INTO lst_taxreg-taxid.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

* DUNS
  IF lst_tax_codes-duns IS NOT INITIAL.
    lst_taxreg-taxtype = '0060'.
    lst_taxreg-taxid = lst_tax_codes-duns.
    APPEND lst_taxreg TO cst_xml-buyer_taxreg.
  ENDIF.

ENDMETHOD.
METHOD add_header_general.

  transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR'
                             ic_xml_alias = 'XML_HDR'
                             ist_source = ist_sap_data-hd_gen
                   CHANGING  cst_destination = cst_xml ).
  transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_ORG'
                             ic_xml_alias = 'XML_HDR'
                             ist_source = ist_sap_data-hd_org
                   CHANGING  cst_destination = cst_xml ).

  transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_REF'
                             ic_xml_alias = 'XML_HDR'
                             ist_source = ist_sap_data-hd_ref
                    CHANGING  cst_destination = cst_xml ).

  transfer_fields( EXPORTING ic_sap_alias = 'FIXEDVAL1'
                             ic_xml_alias = 'XML_HDR'
                   CHANGING  cst_destination = cst_xml ).

  map_document_type( EXPORTING ist_sap_data = ist_sap_data
                     CHANGING  cst_xml      = cst_xml ).

  transfer_fields( EXPORTING ic_sap_alias = 'FIXEDVAL6'
                             ic_xml_alias = 'XML_HDR'
                   CHANGING  cst_destination = cst_xml ).

ENDMETHOD.
METHOD add_header_texts.

  TYPES: BEGIN OF yst_addtext,
           ddtext TYPE ddtext,
         END OF yst_addtext.
  TYPES: BEGIN OF yst_notes,
           notes TYPE zdyn_lxml_note,
         END OF yst_notes.

  DATA: lst_addtext   TYPE yst_addtext,
        lst_notes     TYPE yst_notes,
        lst_note      LIKE LINE OF lst_notes-notes,
        lst_note_line LIKE LINE OF lst_note-content,
        lt_lines      TYPE tline_tab.
  FIELD-SYMBOLS: <st_line> LIKE LINE OF lt_lines.

  zdyn_cl_bapi=>mo->get_text_from_domain( EXPORTING ic_domain = 'VBTYP'
                                                    ic_value  = ist_sap_data-hd_gen-bil_vbtype
                                          IMPORTING ec_text   = lst_addtext-ddtext ).

  transfer_fields( EXPORTING ic_sap_alias = 'SAP_TEXT'
                             ic_xml_alias = 'XML_HDR'
                             ist_source = lst_addtext
                   CHANGING  cst_destination = cst_xml ).

  zdyn_cl_bapi=>mo->get_texts( EXPORTING ic_number = ist_sap_data-hd_gen-bil_number
                               IMPORTING et_lines  = lt_lines ).

  IF lt_lines IS NOT INITIAL.
    LOOP AT lt_lines ASSIGNING <st_line>.
      lst_note_line-content = <st_line>-tdline.
      APPEND lst_note_line TO lst_note-content.
    ENDLOOP.
    APPEND lst_note TO lst_notes-notes.

    transfer_fields( EXPORTING ic_sap_alias = 'SAP_TEXT'
                               ic_xml_alias = 'XML_HDR'
                               ist_source = lst_notes
                     CHANGING  cst_destination = cst_xml ).
  ENDIF.

ENDMETHOD.
METHOD add_item_amounts.

  DATA: lst_it_price  TYPE lbbil_it_price,
        lst_it_kond   TYPE lbbil_it_kond,
        lst_condition LIKE LINE OF it_conditions.

  READ TABLE ist_sap_data-it_price INTO lst_it_price
       WITH KEY bil_number = ist_sap_data-hd_gen-bil_number
                itm_number = ist_it_gen-itm_number.
  READ TABLE ist_sap_data-it_kond INTO lst_it_kond
       WITH KEY bil_number = ist_sap_data-hd_gen-bil_number
                itm_number = ist_it_gen-itm_number.

  transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_PRICE'
                            ic_xml_alias = 'XML_ITEM'
                            ist_source =  lst_it_price
                   CHANGING  cst_destination = cst_item ).

  transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_KOND'
                             ic_xml_alias = 'XML_ITEM'
                             ist_source =  lst_it_kond
                   CHANGING  cst_destination = cst_item ).
* read additional data, e.g. grossamount
  transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_VBRP'
                             ic_xml_alias = 'XML_ITEM'
                             ist_source =  ist_vbrp
                   CHANGING  cst_destination = cst_item ).

  get_net_price( EXPORTING it_conditions  = it_conditions
                           ist_item       = ist_vbrp
                 IMPORTING est_price_cond = lst_condition ).
  IF lst_condition IS NOT INITIAL.
    transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_KOND'
                               ic_xml_alias = 'XML_ITEM'
                               ist_source = lst_condition
                    CHANGING cst_destination = cst_item ).
  ENDIF.

ENDMETHOD.
METHOD add_item_general.

  transfer_fields( EXPORTING ic_sap_alias    = 'SAP_ITEM'
                             ic_xml_alias    = 'XML_ITEM'
                             ist_source      =  ist_it_gen
                   CHANGING  cst_destination = cst_item ).

ENDMETHOD.
METHOD add_item_references.

  DATA: lst_it_refpurord TYPE lbbil_it_refpurord,
        lst_it_ref       TYPE lbbil_it_ref,
        lst_it_refdlv    TYPE lbbil_it_refdlv.

  READ TABLE ist_sap_data-it_ref INTO lst_it_ref
       WITH KEY bil_number = ist_sap_data-hd_gen-bil_number
                itm_number = ist_it_gen-itm_number.
  READ TABLE ist_sap_data-it_refdlv INTO lst_it_refdlv
       WITH KEY bil_number = ist_sap_data-hd_gen-bil_number
                itm_number = ist_it_gen-itm_number.
  READ TABLE ist_sap_data-it_refpurord INTO lst_it_refpurord
       WITH KEY bil_number = ist_sap_data-hd_gen-bil_number
                itm_number = ist_it_gen-itm_number.

* buyer order referenced document
  transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_REF'
                             ic_xml_alias = 'XML_ITEM'
                             ist_source = lst_it_ref
                  CHANGING cst_destination = cst_item ).

* delivery note referenced document
  transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_REFDLV'
                             ic_xml_alias = 'XML_ITEM'
                             ist_source = lst_it_refdlv
                  CHANGING cst_destination = cst_item ).

* reference PO
  transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_REFPUR'
                             ic_xml_alias = 'XML_ITEM'
                             ist_source = lst_it_refpurord
                  CHANGING cst_destination = cst_item ).

ENDMETHOD.
METHOD add_item_tax.

  DATA: lst_it_tax    TYPE zdyn_stax,
        lst_it_price  TYPE lbbil_it_price,
        lst_it_fin    TYPE lbbil_it_fin,
        lst_condition LIKE LINE OF it_conditions.

  READ TABLE ist_sap_data-it_price INTO lst_it_price
       WITH KEY bil_number = ist_sap_data-hd_gen-bil_number
                itm_number = ist_it_gen-itm_number.
  READ TABLE ist_sap_data-it_fin INTO lst_it_fin
       WITH KEY bil_number = ist_sap_data-hd_gen-bil_number
                itm_number = ist_it_gen-itm_number.


  READ TABLE it_conditions INTO lst_condition
       WITH KEY condclass  = 'D'
                condtype   = 'D'.
  IF sy-subrc = 0.
    transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_KOND'
                               ic_xml_alias = 'XML_ITEM_TAX'
                               ist_source = lst_condition
                    CHANGING cst_destination = lst_it_tax ).

    transfer_fields( EXPORTING ic_sap_alias   = 'SAP_ITEM_PRICE'
                               ic_xml_alias   = 'XML_ITEM_TAX'
                               ist_source     = lst_it_price
                    CHANGING cst_destination  = lst_it_tax ).
  ENDIF.

*   tax type VAT
  transfer_fields( EXPORTING ic_sap_alias = 'FIXEDVAL0'
                             ic_xml_alias = 'XML_ITEM_TAX'
                  CHANGING cst_destination = lst_it_tax ).

  CLEAR cst_item-app_tradetax.

*   trade taxes
  transfer_fields( EXPORTING ic_sap_alias = 'SAP_ITEM_FIN'
                             ic_xml_alias = 'XML_ITEM_TAX'
                             ist_source = lst_it_fin
                  CHANGING cst_destination = lst_it_tax ).

  APPEND lst_it_tax TO cst_item-app_tradetax.

ENDMETHOD.
METHOD add_item_texts.

  TYPES: BEGIN OF yst_notes,
           notes TYPE zdyn_lxml_note,
         END OF yst_notes.

  DATA: lst_notes     TYPE yst_notes,
        lst_note      LIKE LINE OF lst_notes-notes,
        lst_note_line LIKE LINE OF lst_note-content,
        lt_lines      TYPE tline_tab,
        lc_number     TYPE string.
  FIELD-SYMBOLS: <st_line> LIKE LINE OF lt_lines.

  CONCATENATE ist_it_gen-bil_number ist_it_gen-itm_number INTO lc_number.

  zdyn_cl_bapi=>mo->get_texts( EXPORTING ic_number = lc_number
                               IMPORTING et_lines  = lt_lines ).

  IF lt_lines IS NOT INITIAL.
    LOOP AT lt_lines ASSIGNING <st_line>.
      lst_note_line-content = <st_line>-tdline.
      APPEND lst_note_line TO lst_note-content.
    ENDLOOP.
    APPEND lst_note TO lst_notes-notes.

    transfer_fields( EXPORTING ic_sap_alias     = 'SAP_TEXT'
                               ic_xml_alias     = 'XML_ITEM'
                               ist_source       = lst_notes
                     CHANGING  cst_destination  = cst_item ).
  ENDIF.

ENDMETHOD.
METHOD add_partner_data.

  DATA:
    lst_addr_complete TYPE szadr_addr1_complete,
    lst_addr1         TYPE szadr_addr1_line,
    li_subrc          TYPE sy-subrc.

  transfer_fields( EXPORTING ic_sap_alias = ic_map_struc
                             ic_xml_alias = 'XML_HDR'
                             ist_source =  ist_addr
                   CHANGING  cst_destination = cst_xml ).

  IF ib_with_address = abap_true.
    IF NOT ist_addr-addr_no IS INITIAL.
      CLEAR lst_addr_complete.
      zdyn_cl_bapi=>mo->get_address( EXPORTING ic_address_no = ist_addr-addr_no
                                     IMPORTING est_address   = lst_addr_complete
                                               ei_subrc      = li_subrc ).
      IF li_subrc = 0.
        READ TABLE lst_addr_complete-addr1_tab INTO lst_addr1 INDEX 1.

*       address data seller / creditor
        transfer_fields( EXPORTING ic_sap_alias = ic_map_struc
                                   ic_xml_alias = 'XML_HDR'
                                   ist_source =  lst_addr1-data
                         CHANGING  cst_destination = cst_xml ).
      ENDIF.
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD add_payment_terms.

  TYPES: BEGIN OF yst_duedate,
           duedate TYPE netdt,
         END OF yst_duedate.

  DATA: lst_pterms      LIKE LINE OF et_pterms,
        lst_description LIKE LINE OF lst_pterms-descriptions,
        lst_bseg        TYPE bseg,
        lst_duedate     TYPE yst_duedate.

* we take the data from BSID/BSAD as it can be manually modified
  zdyn_cl_bapi=>mo->get_bsid_bsad( EXPORTING ic_doc_num   = ist_sap_data-hd_gen-bil_number
                                             ic_comp_code = ist_sap_data-hd_org-comp_code
                                   IMPORTING est_bseg     = lst_bseg ).

* not for credit notes
  IF ist_sap_data-hd_gen-bil_vbtype <> 'O' and
     ist_sap_data-hd_gen-bil_vbtype <> 'S' and
     ist_sap_data-hd_gen-bil_vbtype <> 'K'.
    zdyn_cl_bapi=>mo->get_duedate( EXPORTING id_baseline_date = lst_bseg-zfbdt
                                             ii_discount_days_1 = lst_bseg-zbd1t
                                             ii_discount_days_2 = lst_bseg-zbd2t
                                             ii_discount_days_3 = lst_bseg-zbd3t
                                   IMPORTING ed_duedate         = lst_duedate-duedate ).

    transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_DESCRIPT'
                               ic_xml_alias = 'XML_HDR_PTERMS'
                               ist_source = lst_duedate
                     CHANGING  cst_destination = lst_pterms ).
  ENDIF.

  transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_DESCRIPT'
                             ic_xml_alias = 'XML_HDR_PTERMS'
                             ist_source = ist_sap_data-hd_gen_descript
                   CHANGING  cst_destination = lst_description ).

  IF lst_description IS NOT INITIAL.
    APPEND lst_description TO lst_pterms-descriptions.
  ENDIF.
  IF lst_pterms IS NOT INITIAL.
    APPEND lst_pterms TO et_pterms.
  ENDIF.

ENDMETHOD.
METHOD add_seller.

  DATA: lst_paymeans      TYPE zdyn_spayment_means,
        lt_bnka           TYPE zdyn_lbnka,
        lst_bnka          TYPE zdyn_sbnka,
        lt_t012k          TYPE zdyn_lt012k,
        lst_t012k         TYPE zdyn_st012k,
        lt_iban           TYPE zdyn_ltiban,
        lst_iban          TYPE zdyn_stiban,
        lc_iban           TYPE zdyn_spayment_means-cfa_iban,
        lc_buyer_country  LIKE lst_bnka-banks,
        lst_t001          TYPE t001,
        lst_addr_complete TYPE szadr_addr1_complete,
        li_subrc          TYPE sy-subrc,
        li_line           TYPE sy-tabix,
        lst_addr1_tab     TYPE szadr_addr1_line,
        lst_taxreg        TYPE zdyn_stax_reg.

  zdyn_cl_bapi=>mo->get_company_details( EXPORTING  ic_company_code = ist_sap_data-hd_org-comp_code
                                         IMPORTING  est_company     = lst_t001
                                         EXCEPTIONS OTHERS          = 1 ).
  CHECK sy-subrc = 0.

  IF NOT lst_t001-adrnr IS INITIAL.
    zdyn_cl_bapi=>mo->get_address( EXPORTING ic_address_no  = lst_t001-adrnr
                                   IMPORTING est_address    = lst_addr_complete
                                             ei_subrc       = li_subrc ).
    IF li_subrc = 0.
      READ TABLE lst_addr_complete-addr1_tab INTO lst_addr1_tab INDEX 1.

*       address data seller / creditor
      transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_ADR_KRD'
                                 ic_xml_alias = 'XML_HDR'
                                 ist_source =  lst_addr1_tab-data
                       CHANGING  cst_destination = cst_xml ).
    ENDIF.
  ENDIF.

* tax registration
  DO 2 TIMES.
    li_line = li_line + 1.
    CLEAR lst_taxreg.
    transfer_fields( EXPORTING ic_sap_alias     = 'SAP_HDR'
                               ic_xml_alias     = 'XML_HDR_TAX_KRD'
                               i_add_key        = li_line
                               ist_source       = ist_sap_data-hd_gen
                     CHANGING  cst_destination  = lst_taxreg ).

    CHECK lst_taxreg IS NOT INITIAL.
    transfer_fields( EXPORTING ic_sap_alias    = 'FIXEDVAL2'
                               ic_xml_alias    = 'XML_HDR_TAX_KRD'
                               i_add_key       = li_line
                     CHANGING  cst_destination = lst_taxreg ).
    APPEND lst_taxreg TO cst_xml-seller_taxreg.
  ENDDO.

* means of payment
  get_bankdata( EXPORTING ic_bukrs        = ist_sap_data-hd_org-comp_code
                          ic_partnr       = ist_sap_data-hd_gen-bill_to_party
                          ic_role         = 'RE'
                          ic_billing_doc  = ist_sap_data-hd_gen-bil_number
                IMPORTING et_bnka         = lt_bnka
                          et_t012k        = lt_t012k
                          et_iban         = lt_iban
                EXCEPTIONS OTHERS         = 1 ).
  IF sy-subrc = 0.
    lc_buyer_country = cst_xml-buyer_countryid.
*   check if there is at least one bank account in the buyer country
    READ TABLE lt_bnka WITH KEY banks = lc_buyer_country TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
*     delete bank accounts from other countries
      DELETE lt_bnka WHERE banks <> lc_buyer_country.
      DELETE lt_iban WHERE banks <> lc_buyer_country.
    ENDIF.

    LOOP AT lt_iban INTO lst_iban WHERE iban IS NOT INITIAL.
      transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM'
                                 ic_xml_alias = 'XML_HDR_PAYM'
                                 ist_source =  lst_iban
                       CHANGING  cst_destination = lst_paymeans ).
      IF lst_paymeans-typecode IS INITIAL.
        transfer_fields( EXPORTING ic_sap_alias = 'FIXEDVAL4'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                         CHANGING  cst_destination = lst_paymeans ).
      ENDIF.
      APPEND lst_paymeans TO cst_xml-ts_paymeans.
    ENDLOOP.

    LOOP AT lt_bnka INTO lst_bnka.
      CLEAR lst_paymeans.

      READ TABLE lt_t012k INTO lst_t012k INDEX sy-tabix.
      READ TABLE lt_iban INTO lst_iban
                 WITH  KEY bankl = lst_bnka-bankl
                           bankn = lst_t012k-bankn.
      IF sy-subrc <> 0.
        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM2'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   ist_source =  lst_bnka
                         CHANGING  cst_destination = lst_paymeans ).

        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM3'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   ist_source =  lst_t012k
                         CHANGING  cst_destination = lst_paymeans ).

        IF lst_paymeans-typecode IS INITIAL.
          transfer_fields( EXPORTING ic_sap_alias = 'FIXEDVAL4'
                                     ic_xml_alias = 'XML_HDR_PAYM'
                           CHANGING  cst_destination = lst_paymeans ).
        ENDIF.

        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM2'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   i_add_key = 'BIC'
                                   ist_source =  lst_bnka
                         CHANGING  cst_destination = lst_paymeans ).

        APPEND lst_paymeans TO cst_xml-ts_paymeans.

      ELSE.
        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM2'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   i_add_key = 'BIC'
                                   ist_source =  lst_bnka
                         CHANGING  cst_destination = lst_paymeans ).
        WRITE lst_iban-iban TO lc_iban LEFT-JUSTIFIED.
        MODIFY cst_xml-ts_paymeans FROM lst_paymeans TRANSPORTING cfi_bic
               WHERE cfa_iban = lc_iban.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMETHOD.
METHOD add_seller_old.

  DATA: lst_paymeans      TYPE zdyn_spayment_means,
        lt_bnka           TYPE TABLE OF bnka,
        lst_bnka          TYPE bnka,
        lt_t012k          TYPE TABLE OF t012k,
        lst_t012k         TYPE t012k,
        lt_iban           TYPE TABLE OF tiban,
        lst_iban          TYPE tiban,
        lc_iban           TYPE zdyn_spayment_means-cfa_iban,
        lst_t001          TYPE t001,
        lst_addr_complete TYPE szadr_addr1_complete,
        li_subrc          TYPE sy-subrc,
        li_line           TYPE sy-tabix,
        lst_addr1_tab     TYPE szadr_addr1_line,
        lst_taxreg        TYPE zdyn_stax_reg.

  zdyn_cl_bapi=>mo->get_company_details( EXPORTING  ic_company_code = ist_sap_data-hd_org-comp_code
                                         IMPORTING  est_company     = lst_t001
                                         EXCEPTIONS OTHERS          = 1 ).
  CHECK sy-subrc = 0.

  IF NOT lst_t001-adrnr IS INITIAL.
    zdyn_cl_bapi=>mo->get_address( EXPORTING ic_address_no  = lst_t001-adrnr
                                   IMPORTING est_address    = lst_addr_complete
                                             ei_subrc       = li_subrc ).
    IF li_subrc = 0.
      READ TABLE lst_addr_complete-addr1_tab INTO lst_addr1_tab INDEX 1.

*       address data seller / creditor
      transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_ADR_KRD'
                                 ic_xml_alias = 'XML_HDR'
                                 ist_source =  lst_addr1_tab-data
                       CHANGING  cst_destination = cst_xml ).
    ENDIF.
  ENDIF.

* tax registration
  DO 2 TIMES.
    li_line = li_line + 1.
    CLEAR lst_taxreg.
    transfer_fields( EXPORTING ic_sap_alias     = 'SAP_HDR'
                               ic_xml_alias     = 'XML_HDR_TAX_KRD'
                               i_add_key        = li_line
                               ist_source       = ist_sap_data-hd_gen
                     CHANGING  cst_destination  = lst_taxreg ).

    CHECK lst_taxreg IS NOT INITIAL.
    transfer_fields( EXPORTING ic_sap_alias    = 'FIXEDVAL2'
                               ic_xml_alias    = 'XML_HDR_TAX_KRD'
                               i_add_key       = li_line
                     CHANGING  cst_destination = lst_taxreg ).
    APPEND lst_taxreg TO cst_xml-seller_taxreg.
  ENDDO.

* means of payment
  get_bankdata_old( EXPORTING ic_bukrs  = ist_sap_data-hd_org-comp_code
                          ic_role   = 'KR'
                IMPORTING et_bnka   = lt_bnka
                          et_t012k  = lt_t012k
                          et_iban   = lt_iban
                EXCEPTIONS OTHERS   = 1 ).
  IF sy-subrc = 0.
*   read country from buyer
    lst_iban-banks = cst_xml-buyer_countryid.
*   check if there is at least one bank account in that country
    READ TABLE lt_bnka WITH KEY banks = lst_iban-banks TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
*     delete bank account from other countries
      DELETE lt_bnka WHERE banks <> lst_iban-banks.
      DELETE lt_iban WHERE banks <> lst_iban-banks.
    ENDIF.

    LOOP AT lt_iban INTO lst_iban WHERE iban IS NOT INITIAL.
      transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM'
                                 ic_xml_alias = 'XML_HDR_PAYM'
                                 ist_source =  lst_iban
                       CHANGING  cst_destination = lst_paymeans ).

      transfer_fields( EXPORTING ic_sap_alias = 'FIXEDVAL4'
                                 ic_xml_alias = 'XML_HDR_PAYM'
                       CHANGING  cst_destination = lst_paymeans ).

      APPEND lst_paymeans TO cst_xml-ts_paymeans.
    ENDLOOP.

    LOOP AT lt_bnka INTO lst_bnka.
      CLEAR lst_paymeans.

      READ TABLE lt_t012k INTO lst_t012k INDEX sy-tabix.
      READ TABLE lt_iban INTO lst_iban
                 WITH  KEY bankl = lst_bnka-bankl
                           bankn = lst_t012k-bankn.
      IF sy-subrc <> 0.
        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM2'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   ist_source =  lst_bnka
                         CHANGING  cst_destination = lst_paymeans ).

        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM3'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   ist_source =  lst_t012k
                         CHANGING  cst_destination = lst_paymeans ).

        transfer_fields( EXPORTING ic_sap_alias = 'FIXEDVAL4'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                         CHANGING  cst_destination = lst_paymeans ).

        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM2'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   i_add_key = 'BIC'
                                   ist_source =  lst_bnka
                         CHANGING  cst_destination = lst_paymeans ).

        APPEND lst_paymeans TO cst_xml-ts_paymeans.

      ELSE.
        transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_PAYM2'
                                   ic_xml_alias = 'XML_HDR_PAYM'
                                   i_add_key = 'BIC'
                                   ist_source =  lst_bnka
                         CHANGING  cst_destination = lst_paymeans ).
        WRITE lst_iban-iban TO lc_iban LEFT-JUSTIFIED.
        MODIFY cst_xml-ts_paymeans FROM lst_paymeans TRANSPORTING cfi_bic
               WHERE cfa_iban = lc_iban.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMETHOD.
METHOD add_trade_tax.

  DATA: lst_hd_kond TYPE lbbil_hd_kond,
        lst_mapping TYPE zdyn_ws_cxmp,
        lp_percent  TYPE kbetr,
        lst_hdtax   TYPE zdyn_stax.

  LOOP AT ist_sap_data-hd_kond INTO lst_hd_kond
    WHERE mwskz <> space AND kntyp = 'D'
      AND ( kawrt <> 0 OR kwert <> 0 ).
    transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_KOND'
                               ic_xml_alias = 'XML_HDR_TAX'
                               ist_source = lst_hd_kond
                     CHANGING  cst_destination = lst_hdtax ).
    IF NOT lst_hd_kond-krech = 'A'.
      CLEAR lst_hdtax-percent.
    ENDIF.

*   conversion to n decimals
    IF lst_hd_kond-koei1 CA '1234567890'.
      lp_percent = lst_hdtax-percent.
      WRITE lp_percent TO lst_hdtax-percent CURRENCY lst_hd_kond-koei1.
*     convert again if necessary
      lst_mapping = get_mapping( ic_sap_alias = 'SAP_HDR_KOND'
                                 ic_sap_field = 'KBETR'
                                 ic_xml_alias = 'XML_HDR_TAX'
                                 ic_xml_field = 'PERCENT' ).
      IF lst_mapping IS NOT INITIAL.
        conversion( EXPORTING ic_conversion_func = lst_mapping-conversion_func
                              input              = lst_hdtax-percent
                    IMPORTING output             = lst_hdtax-percent ).
      ENDIF.
    ENDIF.
    APPEND lst_hdtax TO cst_xml-ts_tradetax.
  ENDLOOP.

* we need just any tax record to generate SUBTOTAL structure in UBL documents
  IF cst_xml-ts_tradetax IS INITIAL.
    CLEAR: lst_hd_kond, lst_hdtax.
    lst_hd_kond-kawrt = ist_sap_data-hd_gen-bil_netwr.
    lst_hd_kond-kwert = ist_sap_data-hd_gen-bil_tax.
    IF ist_sap_data-hd_gen-bil_tax = 0.
      lst_hd_kond-kbetr = 0.
    ELSE.
      lst_hd_kond-kbetr = ist_sap_data-hd_gen-bil_tax / ist_sap_data-hd_gen-bil_netwr * 100.
      lst_hd_kond-mwskz = 'S'.
    ENDIF.
    transfer_fields( EXPORTING ic_sap_alias = 'SAP_HDR_KOND'
                               ic_xml_alias = 'XML_HDR_TAX'
                               ist_source = lst_hd_kond
                     CHANGING  cst_destination = lst_hdtax ).
    APPEND lst_hdtax TO cst_xml-ts_tradetax.
  ENDIF.

ENDMETHOD.
METHOD bin_to_base64.

* Left for compatibility with customer development
  zdyn_cl_bapi=>mo->bin_to_base64( EXPORTING  it_binary = it_binary
                                              i_length  = i_length
                                   IMPORTING  et_base64 = et_base64
                                   EXCEPTIONS OTHERS    = 1 ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD conversion.

  DATA: lr_datadescr TYPE REF TO cl_abap_datadescr.

  IF ic_conversion_func IS INITIAL.
*   we can use WRITE only for simple types
    lr_datadescr ?= cl_abap_datadescr=>describe_by_data( input ).
    IF lr_datadescr->kind = lr_datadescr->kind_elem.
      WRITE input TO output LEFT-JUSTIFIED.
    ELSE.
      output = input.
    ENDIF.
  ELSE.
    IF zdyn_cl_bapi=>mo->is_function_exist( ic_name = ic_conversion_func ).
      CALL FUNCTION ic_conversion_func
        EXPORTING
          input  = input
        IMPORTING
          output = output.
      WRITE output TO output LEFT-JUSTIFIED.
    ELSE.
      WRITE input TO output LEFT-JUSTIFIED.
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD convert_255_to_1024.

* Left for compatibility with customer development
  rt_1024 = zdyn_cl_bapi=>mo->convert_255_to_1024( it_255 ).

ENDMETHOD.
METHOD extend_attachments.

* Retrieve attachments with custom code

ENDMETHOD.
METHOD extend_header.

*  Modify header data with custom code

ENDMETHOD.
METHOD extend_item.

*  Modify item data with custom code

ENDMETHOD.
METHOD get_aubel_vgbel_numbers.

  DATA: lst_aubel TYPE sales_key,
        lst_vgbel TYPE sales_key.
  FIELD-SYMBOLS: <item> LIKE LINE OF mt_vbrp.

  zdyn_cl_bapi=>mo->get_vbrps( EXPORTING ic_doc_number = ist_sap_data-hd_gen-bil_number
                               IMPORTING et_vbrp       = mt_vbrp ).

  LOOP AT mt_vbrp ASSIGNING <item>.
    lst_aubel-vbeln = <item>-aubel.
    lst_vgbel-vbeln = <item>-vgbel.
    COLLECT lst_aubel INTO mt_aubel_numbers.
    COLLECT lst_vgbel INTO mt_vgbel_numbers.
  ENDLOOP.

ENDMETHOD.
METHOD get_bankdata.

* Can be changed in a project to send SAP payment means codes (like 'A', 'L', etc)
* They can be needed in Routty to be mapped to external target values
  CONSTANTS con_send_sap_paymeans_codes TYPE abap_bool VALUE abap_false.

  DATA: lt_t042i           TYPE zdyn_lt042i,
        lst_t012k          TYPE t012k,
        lst_dyn_t012k      TYPE zdyn_st012k,
        lst_bnka           TYPE bnka,
        lst_dyn_bnka       TYPE zdyn_sbnka,
        lst_iban           TYPE tiban,
        lst_dyn_iban       TYPE zdyn_stiban,
        lc_bankn           TYPE tiban-bankn,
        lc_zlsch           TYPE schzw_bseg,
        lc_billing_partner TYPE kunnr,
        lc_zwels           TYPE dzwels,
        lc_hbkid           TYPE hbkid,
        lt_zlsch           TYPE zdyn_lstring.
  FIELD-SYMBOLS: <st_t042i> LIKE LINE OF lt_t042i.

  CHECK ic_bukrs IS NOT INITIAL.

  IF ic_partnr IS INITIAL.
    zdyn_cl_bapi=>mo->get_billing_partner( EXPORTING ic_billing_doc     = ic_billing_doc
                                                     ic_role            = ic_role
                                           IMPORTING ec_billing_partner = lc_billing_partner ).
  ELSE.
    lc_billing_partner = ic_partnr .
  ENDIF.

* get payment methods and bank id from bill to party and billing document
  zdyn_cl_bapi=>mo->get_payment_data( EXPORTING ic_billing_partner  = lc_billing_partner
                                                ic_billing_doc      = ic_billing_doc
                                                ic_company_code     = ic_bukrs
                                      IMPORTING et_payment_methods  = lt_zlsch
                                                ec_bank_id          = lc_hbkid ).


  zdyn_cl_bapi=>mo->get_account_determination( EXPORTING ic_company_code = ic_bukrs
                                                         it_zlsch        = lt_zlsch
                                               IMPORTING et_rules        = lt_t042i ).

  SORT lt_t042i BY hbkid hktid.
  DELETE ADJACENT DUPLICATES FROM lt_t042i COMPARING hbkid hktid.

  LOOP AT lt_t042i ASSIGNING <st_t042i>.
    IF lc_hbkid IS NOT INITIAL AND  lc_hbkid NE <st_t042i>-hbkid.
      CONTINUE.
    ENDIF.

    zdyn_cl_bapi=>mo->get_bank_details( EXPORTING  ic_company_code = ic_bukrs
                                                   ic_bank_key     = <st_t042i>-hbkid
                                                   ic_account_id   = <st_t042i>-hktid
                                        IMPORTING  est_account     = lst_t012k
                                                   est_bank_master = lst_bnka
                                        EXCEPTIONS OTHERS          = 1 ).
    CHECK sy-subrc = 0.
    MOVE-CORRESPONDING lst_t012k TO lst_dyn_t012k.
    IF con_send_sap_paymeans_codes = abap_true.
      MOVE <st_t042i>-zlsch        TO lst_dyn_t012k-zlsch.
    ENDIF.
    MOVE-CORRESPONDING lst_bnka  TO lst_dyn_bnka.
    IF con_send_sap_paymeans_codes = abap_true.
      MOVE <st_t042i>-zlsch        TO lst_dyn_bnka-zlsch.
    ENDIF.
    APPEND: lst_dyn_t012k TO et_t012k,
            lst_dyn_bnka TO et_bnka.
  ENDLOOP.

  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

  LOOP AT et_t012k INTO lst_dyn_t012k.
    READ TABLE et_bnka INTO lst_dyn_bnka INDEX sy-tabix.
    WRITE lst_dyn_t012k-bankn TO lc_bankn LEFT-JUSTIFIED.

    zdyn_cl_bapi=>mo->get_iban( EXPORTING ic_banks = lst_dyn_bnka-banks
                                          ic_bankl = lst_dyn_bnka-bankl
                                          ic_bankn = lc_bankn
                                          ic_bkont = ' '
                                IMPORTING est_iban = lst_iban ).

    IF lst_iban-iban IS NOT INITIAL.
      MOVE-CORRESPONDING lst_iban TO lst_dyn_iban.
      IF con_send_sap_paymeans_codes = abap_true.
        MOVE  lst_dyn_t012k-zlsch TO lst_dyn_iban-zlsch.
      ENDIF.
      APPEND lst_dyn_iban TO et_iban.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
METHOD get_bankdata_old.

  DATA: lt_t042i  TYPE zdyn_lt042i,
        lst_t012k TYPE t012k,
        lst_bnka  TYPE bnka,
        lst_iban  TYPE tiban,
        lc_bankn  TYPE tiban-bankn.
  FIELD-SYMBOLS: <st_t042i> LIKE LINE OF lt_t042i.

  CHECK ic_role = 'KR'
    AND ic_bukrs IS NOT INITIAL.

  zdyn_cl_bapi=>mo->get_account_determination( EXPORTING ic_company_code = ic_bukrs
                                               IMPORTING et_rules        = lt_t042i ).
  SORT lt_t042i BY hbkid hktid.
  DELETE ADJACENT DUPLICATES FROM lt_t042i COMPARING hbkid hktid.

  LOOP AT lt_t042i ASSIGNING <st_t042i>.
    zdyn_cl_bapi=>mo->get_bank_details( EXPORTING  ic_company_code = ic_bukrs
                                                   ic_bank_key     = <st_t042i>-hbkid
                                                   ic_account_id   = <st_t042i>-hktid
                                        IMPORTING  est_account     = lst_t012k
                                                   est_bank_master = lst_bnka
                                        EXCEPTIONS OTHERS          = 1 ).
    CHECK sy-subrc = 0.
    APPEND: lst_t012k TO et_t012k,
            lst_bnka TO et_bnka.
  ENDLOOP.

  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

  LOOP AT et_t012k INTO lst_t012k.
    READ TABLE et_bnka INTO lst_bnka INDEX sy-tabix.
    WRITE lst_t012k-bankn TO lc_bankn LEFT-JUSTIFIED.

    zdyn_cl_bapi=>mo->get_iban( EXPORTING ic_banks = lst_bnka-banks
                                          ic_bankl = lst_bnka-bankl
                                          ic_bankn = lc_bankn
                                          ic_bkont = ' '
                                IMPORTING est_iban = lst_iban ).
    IF lst_iban-iban IS NOT INITIAL.
      APPEND lst_iban TO et_iban.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
METHOD get_billing_doc_pdf.

  DATA: lst_nast      TYPE nast,
        lc_doc_number TYPE nast-objky,
        lc_smartform  TYPE na_fname.

  lc_doc_number = ic_doc_number.

* try to find NAST record first to get the data closest to business requirements
  zdyn_cl_bapi=>mo->get_nast( EXPORTING ic_doc_number  = lc_doc_number
                                        ic_application = ic_application
                                        ic_output_type = ic_output_type
                              IMPORTING est_nast       = lst_nast ).
  IF lst_nast IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'W'
                                    ic_msgid    = 'ZDYN_WS'
                                    ic_msgno    = '025'
                                    ic_msgv1    = lc_doc_number
                                    ic_msgv2    = 'NAST'
                                    ii_level    = zdyn_cl_msg=>con_message_level_2 ).
*   message w025(zdyn_ws) with space space.
*   if NAST not found try to use generic settings
    CLEAR lst_nast.
    lst_nast-kappl = ic_application.
    lst_nast-kschl = ic_output_type.
    lst_nast-objky = lc_doc_number.
    lst_nast-spras = ic_langu.
  ENDIF.
* transmission medium: printout
  lst_nast-nacha = '1'.

  lc_smartform = zdyn_cl_bapi=>mo->get_napr( ic_output_type  = lst_nast-kschl
                                             ic_application  = lst_nast-kappl
                                             ic_trans_medium = lst_nast-nacha ).
  IF lc_smartform IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid    = 'ZDYN_WS'
                                    ic_msgno    = '022'
                                    ic_msgv1    = lc_doc_number ).
*   message e022(zdyn_ws).
    RAISE error_occurred.
  ENDIF.

  zdyn_cl_bapi=>mo->get_billing_doc_pdf_nast( EXPORTING  ist_nast       = lst_nast
                                                         ic_smartform   = lc_smartform
                                                         ic_langu       = ic_langu
                                              IMPORTING  et_data        = et_data
                                                         ei_bin_length  = ei_bin_length
                                                         ex_stream      = ex_stream
                                              EXCEPTIONS OTHERS         = 1 ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD get_billing_doc_xml.

  DATA: lst_nast         TYPE nast,
        lc_doc_number    TYPE nast-objky,
        lc_smartform     TYPE na_fname,
        lt_attachments   TYPE zdyn_lattachment,
        ls_attachment    LIKE LINE OF lt_attachments,
        lb_skip_standard TYPE abap_bool,
        lc_doc_type      TYPE zdyn_ws_dout_type.

  lc_doc_number = ic_doc_number.

* try to find NAST record first to get the data closest to business requirements
  zdyn_cl_bapi=>mo->get_nast( EXPORTING ic_doc_number  = lc_doc_number
                                        ic_application = ic_application
                                        ic_output_type = ic_output_type
                              IMPORTING est_nast       = lst_nast ).
  IF lst_nast IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty    = 'W'
                                    ic_msgid    = 'ZDYN_WS'
                                    ic_msgno    = '025'
                                    ic_msgv1    = lc_doc_number
                                    ic_msgv2    = 'NAST'
                                    ii_level    = zdyn_cl_msg=>con_message_level_2 ).
*   message w025(zdyn_ws).
*   if NAST not found try to use generic settings
    CLEAR lst_nast.
    lst_nast-kappl = ic_application.
    lst_nast-kschl = ic_output_type.
    lst_nast-nacha = '1'.
    lst_nast-objky = lc_doc_number.
    lst_nast-spras = ic_langu.
  ENDIF.

  IF ib_generate_pdf = abap_true.
    get_pdf( EXPORTING  ic_doc_number  = ic_doc_number
                        ic_application = ic_application
                        ic_output_type = ic_output_type
                        ic_langu       = ic_langu
             CHANGING   ct_attachments = lt_attachments
             EXCEPTIONS OTHERS         = 1 ).
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
    IF ib_require_attach = abap_true AND  lt_attachments IS INITIAL.
      RAISE no_attachments.
    ENDIF.
  ENDIF.

  IF ib_add_attachments = abap_true.
*   this method can be redefined in custom implementation
    extend_attachments( EXPORTING ic_doc_number    = ic_doc_number
                                  ist_nast         = lst_nast
                        IMPORTING eb_skip_standard = lb_skip_standard
                        CHANGING  ct_attachments   = lt_attachments ).
    IF lb_skip_standard = abap_false.
      zdyn_cl_bapi=>mo->get_attachments( EXPORTING  ic_doc_number  = ic_doc_number
                                                    ic_doc_type    = 'VBRK'
                                         CHANGING   ct_attachments = lt_attachments
                                         EXCEPTIONS OTHERS         = 1 ).
    ENDIF.
    IF sy-subrc <> 0.
      RAISE error_occurred.
    ENDIF.
    IF ib_require_attach = abap_true AND lt_attachments IS INITIAL.
      RAISE no_attachments.
    ENDIF.
  ENDIF.

  get_billing_doc_xml_nast( EXPORTING  ist_nast       = lst_nast
                                       ic_doc_type    = ic_doc_type
                                       it_attachments = lt_attachments
                            IMPORTING  et_xml         = et_xml
                            EXCEPTIONS OTHERS         = 1 ).
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD get_billing_doc_xml_nast.

  DATA: lst_print_data_to_read TYPE lbbil_print_data_to_read,
        lst_bill_data          TYPE lbbil_invoice,
        lst_nast               LIKE ist_nast.

  lst_nast = ist_nast.

  lst_print_data_to_read-hd_gen = 'X'.
  lst_print_data_to_read-hd_adr = 'X'.
  lst_print_data_to_read-hd_gen_descript = 'X'.
  lst_print_data_to_read-hd_org = 'X'.
  lst_print_data_to_read-hd_kond = 'X'.
  lst_print_data_to_read-hd_fin = 'X'.
  lst_print_data_to_read-hd_ref = 'X'.
  lst_print_data_to_read-hd_part_add = 'X'.
  lst_print_data_to_read-it_gen = 'X'.
  lst_print_data_to_read-it_adr = 'X'.
  lst_print_data_to_read-it_price = 'X'.
  lst_print_data_to_read-it_kond = 'X'.
  lst_print_data_to_read-it_ref = 'X'.
  lst_print_data_to_read-it_refdlv = 'X'.
  lst_print_data_to_read-it_refpurord = 'X'.
  lst_print_data_to_read-it_fin = 'X'.
  lst_print_data_to_read-it_confbatch = 'X'.

  zdyn_cl_bapi=>mo->get_billing_doc( EXPORTING  ic_doc_number      = lst_nast-objky
                                                ic_data_selection  = lst_print_data_to_read
                                                ic_partner         = lst_nast-parvw
                                                ic_partner_role    = lst_nast-parnr
                                                ic_langu           = lst_nast-spras
                                     IMPORTING  est_data           = lst_bill_data
                                     EXCEPTIONS records_not_found  = 1
                                                error_occurred     = 2
                                                OTHERS             = 3 ).
  IF sy-subrc = 1.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                    ic_msgno = '021' ).
*   message e021(zdyn_ws).
    RAISE error_occurred.
  ELSEIF sy-subrc = 2.
    zdyn_cl_msg=>add_sysmsg( ).
    RAISE error_occurred.
  ELSEIF sy-subrc <> 0.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ABADR'
                                    ic_msgno = '090'
                                    ic_msgv1 = 'LB_BIL_INV_OUTP_READ_PRTDATA'
                                    ic_msgv2 = sy-subrc ).
*   message e090(abadr).
    RAISE error_occurred.
  ENDIF.

  transfer_billing_to_xml( EXPORTING  ist_sap_data    = lst_bill_data
                                      ic_doc_type     = ic_doc_type
                                      it_attachments  = it_attachments
                           IMPORTING  et_xml          = et_xml
                           EXCEPTIONS OTHERS          = 1 ).
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                    ic_msgno = '028'
                                    ic_msgv1 = lst_nast-objky ).
*   message e028(zdyn_ws).
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD get_buyer_address.

* Payer
  READ TABLE ist_sap_data-hd_adr INTO rst_result WITH KEY partn_role = 'RG'. "#EC CI_SORTSEQ
  IF sy-subrc <> 0.
*   Sold-To Party
    READ TABLE ist_sap_data-hd_adr INTO rst_result WITH KEY partn_role = 'AG'. "#EC CI_SORTSEQ
    IF sy-subrc <> 0.
*     Ship-To Party
      READ TABLE ist_sap_data-hd_adr INTO rst_result WITH KEY partn_role = 'WE'. "#EC CI_SORTSEQ
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD get_conditions.

  DATA: lb_full_success TYPE abap_bool.

* we need to find records with condition calss 'B' (price) and 'D' (tax)
* conditions for the billing document can be available in the referenced document (probably a contract)
* or in a sales order

* we are starting with the billing document condtions
* the order can be changed based on experience

  get_conditions_from_bill( EXPORTING  in_cond_numb   = in_cond_numb
                                       ist_vbrp       = ist_vbrp
                             IMPORTING et_conditions  = et_conditions
                                        eb_full_success = lb_full_success ).
  IF et_conditions IS INITIAL OR lb_full_success = abap_false.
    get_conditions_from_aubel( EXPORTING ist_vbrp       = ist_vbrp
                               IMPORTING et_conditions  = et_conditions
                                          eb_full_success = lb_full_success ).
    IF et_conditions IS INITIAL OR lb_full_success = abap_false AND ist_vbrp-vgbel <> ist_vbrp-aubel.
      get_conditions_from_vgbel( EXPORTING ist_vbrp       = ist_vbrp
                                 IMPORTING et_conditions  = et_conditions ).
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD get_conditions_from_aubel.

  DATA: lst_order_view TYPE order_view.

  lst_order_view-sdcond = abap_true.

* we need to find records with condition calss 'B' (price) and 'D' (tax)
* conditions for the billing document can be available in the referenced document (probably a contract)
* or in a sales order

* we are starting with the referenced document
* buffering, cleared in PROCESS_ITEMS
  IF mt_aubel_conditions IS INITIAL AND mt_aubel_numbers IS NOT INITIAL.
    zdyn_cl_bapi=>mo->bapisdorder_getdetailedlist( EXPORTING ist_view           = lst_order_view
                                                             it_sales_documents = mt_aubel_numbers
                                                   IMPORTING et_conditions      = mt_aubel_conditions ).
    IF mt_aubel_conditions IS INITIAL.
*     to stop calling it next time
      CLEAR mt_aubel_numbers.
    ENDIF.
  ENDIF.
  et_conditions = mt_aubel_conditions.

  DELETE et_conditions WHERE sd_doc <> ist_vbrp-aubel OR itm_number <> ist_vbrp-aupos.
  READ TABLE et_conditions TRANSPORTING NO FIELDS WITH KEY condclass = 'B'.
  IF sy-subrc = 0.
    READ TABLE et_conditions TRANSPORTING NO FIELDS WITH KEY condclass = 'D'.
    IF sy-subrc = 0.
      eb_full_success = abap_true.
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD get_conditions_from_bill.

  DATA: lt_komv         TYPE STANDARD TABLE OF komv,
        lt_vbak         TYPE STANDARD TABLE OF vbak,
        lst_direct_cond TYPE yst_direct_conditions.
  FIELD-SYMBOLS: <st_direct_cond> TYPE yst_direct_conditions.

* we need to find records with condition calss 'B' (price) and 'D' (tax)
* conditions for the billing document can be available in the referenced document (probably a contract)
* or in a sales order

  READ TABLE mt_direct_conditions ASSIGNING <st_direct_cond>
    WITH KEY vgbel = ist_vbrp-vgbel
    BINARY SEARCH.
  IF sy-subrc = 0.
    et_conditions = <st_direct_cond>-cond.
  ELSE.
    zdyn_cl_bapi=>mo->get_vbak( EXPORTING in_doc_number = ist_vbrp-vgbel
                                IMPORTING et_vbak       = lt_vbak ).
    IF lt_vbak IS INITIAL.
      READ TABLE mt_direct_conditions ASSIGNING <st_direct_cond>
        WITH KEY empty_vbak = abap_true.
      IF sy-subrc = 0.
*           all results for empty VBAK are the same, becasue they are for the same IN_COND_NUMB,
*           which is taken from billing document header
        et_conditions = <st_direct_cond>-cond.
      ELSE.
        zdyn_cl_bapi=>mo->get_konv( EXPORTING in_cond_numb  = in_cond_numb
                                    IMPORTING et_komv       = lt_komv ).
        zdyn_cl_bapi=>mo->map_int_to_ext_structure( EXPORTING it_vbak       = lt_vbak
                                                              it_komv       = lt_komv
                                                    IMPORTING et_conditions = et_conditions ).
        lst_direct_cond-vgbel = ist_vbrp-vgbel.
        IF lt_vbak IS INITIAL.
          lst_direct_cond-empty_vbak = abap_true.
        ENDIF.
        lst_direct_cond-cond = et_conditions.
        INSERT lst_direct_cond INTO TABLE mt_direct_conditions.
      ENDIF.
    ENDIF.
  ENDIF.
  DELETE et_conditions WHERE itm_number <> ist_vbrp-aupos.

  READ TABLE et_conditions TRANSPORTING NO FIELDS WITH KEY condclass = 'B'.
  IF sy-subrc = 0.
    READ TABLE et_conditions TRANSPORTING NO FIELDS WITH KEY condclass = 'D'.
    IF sy-subrc = 0.
      eb_full_success = abap_true.
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD get_conditions_from_vgbel.

  DATA: lst_order_view TYPE order_view.

  lst_order_view-sdcond = abap_true.

* we need to find records with condition calss 'B' (price) and 'D' (tax)
* conditions for the billing document can be available in the referenced document (probably a contract)
* or in a sales order

* sales order
  IF mt_vgbel_conditions IS INITIAL AND mt_vgbel_numbers IS NOT INITIAL.
    zdyn_cl_bapi=>mo->bapisdorder_getdetailedlist( EXPORTING ist_view           = lst_order_view
                                                             it_sales_documents = mt_vgbel_numbers
                                                   IMPORTING et_conditions      = mt_vgbel_conditions ).
    IF mt_vgbel_conditions IS INITIAL.
*         to stop calling it next time
      CLEAR mt_vgbel_numbers.
    ENDIF.
  ENDIF.
  et_conditions = mt_vgbel_conditions.

  DELETE et_conditions WHERE sd_doc <> ist_vbrp-vgbel OR itm_number <> ist_vbrp-vgpos.
  READ TABLE et_conditions TRANSPORTING NO FIELDS WITH KEY condclass = 'B'.
  IF sy-subrc = 0.
    READ TABLE et_conditions TRANSPORTING NO FIELDS WITH KEY condclass = 'D'.
    IF sy-subrc = 0.
      eb_full_success = abap_true.
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD get_mapping.

  READ TABLE mt_sap_to_xml_map INTO rst_result
    WITH KEY sap_alias = ic_sap_alias
             sap_field = ic_sap_field
             xml_alias = ic_xml_alias
             xml_field = ic_xml_field.

ENDMETHOD.
METHOD get_nast.

  IF ic_output_type IS NOT INITIAL.
    SELECT SINGLE * FROM nast INTO est_nast
      WHERE objky = ic_doc_number
        AND kappl = ic_application
        AND kschl = ic_output_type.
  ELSE.
    SELECT SINGLE * FROM nast INTO est_nast
      WHERE objky = ic_doc_number
        AND kappl = ic_application.
  ENDIF.

ENDMETHOD.
METHOD get_net_price.

  DATA: lp_quantity LIKE ist_item-fkimg.

* We want to avoid VPRS (CONDCLASS = 'B', CONDTYPE = 'G', internal price),
* but in case no other price condition exists we should take it.
* We start with basic price with populated tax code.

  LOOP AT it_conditions INTO est_price_cond
    WHERE condclass   = 'B'   " price
      AND condtype    = 'H'  " basic price
      AND tax_code    <> space.
    EXIT.
  ENDLOOP.
  IF sy-subrc <> 0.
    READ TABLE it_conditions INTO est_price_cond
         WITH KEY condclass   = 'B'   " price
                  condtype    = 'H'.  " basic price
    IF sy-subrc <> 0.
      READ TABLE it_conditions INTO est_price_cond
           WITH KEY condclass   = 'B'
                    condtype    = space.
      IF sy-subrc <> 0.
        READ TABLE it_conditions INTO est_price_cond
             WITH KEY condclass   = 'B'.
      ENDIF.
    ENDIF.
  ENDIF.

* In most of the cases it is 1. Especially if there is no condition stating otherwise.
  IF est_price_cond-cond_p_unt = 0.
    est_price_cond-cond_p_unt = 1.
  ENDIF.

*1.	The price must be calculated, because in some cases it does not match the amount and quantity - it shows only a contract / lump sum or is not available.
*2.	The net amount is the most important value here and we provide it as it is without modifications.
*3.	The price and price unit must simply be provided in a value that matches the net amount and quantity.
  lp_quantity = ist_item-fkimg.
  IF lp_quantity = 0.
    lp_quantity = 1.
  ENDIF.

  est_price_cond-cond_value = ist_item-netwr * est_price_cond-cond_p_unt / lp_quantity.
  IF est_price_cond-cond_value < 1 AND est_price_cond-cond_p_unt <= 100.
    est_price_cond-cond_p_unt = 10000.
    est_price_cond-cond_value = ist_item-netwr * est_price_cond-cond_p_unt / lp_quantity.
  ENDIF.

ENDMETHOD.
METHOD get_pdf.

  DATA: li_pdf_len     TYPE i,
        li_pdf_xlen    TYPE i,
        li_pos         TYPE i,
        li_chunk_len   TYPE i,
        lst_attachment LIKE LINE OF ct_attachments,
        lst_line       LIKE LINE OF lst_attachment-content,
        ls_pdf         TYPE string,
        lx_pdf         TYPE xstring.

  get_billing_doc_pdf( EXPORTING  ic_doc_number  = ic_doc_number
                                  ic_application = ic_application
                                  ic_output_type = ic_output_type
                                  ic_langu       = ic_langu
                       IMPORTING  ex_stream      = lx_pdf
                       EXCEPTIONS OTHERS         = 1 ).
  lst_attachment-mimetype = 'application/pdf'.
  lst_attachment-name = 'image.pdf'.

  li_pdf_xlen = xstrlen( lx_pdf ).

  CALL FUNCTION 'SSFC_BASE64_ENCODE'
    EXPORTING
      bindata = lx_pdf
      binleng = li_pdf_xlen
    IMPORTING
      b64data = ls_pdf
    EXCEPTIONS
      OTHERS  = 1.
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.


  IF ls_pdf IS NOT INITIAL.
    li_pdf_len = strlen( ls_pdf ).
    DO.
      li_chunk_len = li_pdf_len - li_pos.
      IF li_chunk_len > 200.
        li_chunk_len = 200.
      ELSEIF li_chunk_len <= 0.
        EXIT.
      ENDIF.
      lst_line-content = ls_pdf+li_pos(li_chunk_len).
      APPEND lst_line TO lst_attachment-content.
      li_pos = li_pos + li_chunk_len.
    ENDDO.

    APPEND lst_attachment TO ct_attachments.
  ENDIF.

ENDMETHOD.
METHOD map_document_type.

  CASE ist_sap_data-hd_gen-bil_vbtype.
    WHEN 'M'.
      cst_xml-header_doccode = '380'.
    WHEN 'N'.
      cst_xml-header_doccode = '381'.
    WHEN 'O'.
      cst_xml-header_doccode = '381'.
    WHEN 'P'.
      cst_xml-header_doccode = '380'.
    WHEN 'S'.
      cst_xml-header_doccode = '380'.
    WHEN 'U'.
    WHEN '5'.
      cst_xml-header_doccode = '380'.
    WHEN '6'.
      cst_xml-header_doccode = '381'.
    WHEN OTHERS.
      cst_xml-header_doccode = '380'.
  ENDCASE.

ENDMETHOD.
METHOD process_header.

  add_header_general( EXPORTING ist_sap_data = ist_sap_data
                      CHANGING  cst_xml      = cst_xml ).

  add_seller( EXPORTING ist_sap_data = ist_sap_data
              CHANGING  cst_xml      = cst_xml ).

  add_buyer( EXPORTING ist_sap_data = ist_sap_data
             CHANGING  cst_xml      = cst_xml ).

  add_header_texts( EXPORTING ist_sap_data = ist_sap_data
                    CHANGING  cst_xml      = cst_xml ).

  add_trade_tax( EXPORTING ist_sap_data = ist_sap_data
                 CHANGING  cst_xml      = cst_xml ).

  add_payment_terms( EXPORTING ist_sap_data = ist_sap_data
                     IMPORTING et_pterms    = cst_xml-stpt ).

* this method can be redefined in custom implementation
  extend_header( EXPORTING ist_sap_data = ist_sap_data
                 CHANGING  cst_data     = cst_xml ).

ENDMETHOD.
METHOD process_items.

  DATA: lst_item      TYPE zdyn_sxml_item,
        lst_it_gen    TYPE lbbil_it_gen,
        lst_vbrp      TYPE vbrp,
        lt_conditions TYPE zdyn_tbapisdcond.

  CLEAR: mt_vgbel_conditions, mt_aubel_conditions, mt_direct_conditions.
  get_aubel_vgbel_numbers( ist_sap_data ).

  LOOP AT ist_sap_data-it_gen INTO lst_it_gen.
    CLEAR: lst_vbrp, lt_conditions, lst_item.

    zdyn_cl_bapi=>mo->get_vbrp( EXPORTING ic_doc_number = ist_sap_data-hd_gen-bil_number
                                          ic_itm_number = lst_it_gen-itm_number
                                IMPORTING est_vbrp      = lst_vbrp ).

    get_conditions( EXPORTING in_cond_numb  = ist_sap_data-hd_gen-kond_numb
                              ist_vbrp      = lst_vbrp
                    IMPORTING et_conditions = lt_conditions ).

    add_item_general( EXPORTING ist_sap_data  = ist_sap_data
                                ist_it_gen    = lst_it_gen
                      CHANGING  cst_item      = lst_item ).

    add_item_texts( EXPORTING ist_sap_data  = ist_sap_data
                              ist_it_gen    = lst_it_gen
                    CHANGING  cst_item      = lst_item ).

    add_item_amounts( EXPORTING ist_sap_data  = ist_sap_data
                                ist_it_gen    = lst_it_gen
                                ist_vbrp      = lst_vbrp
                                it_conditions = lt_conditions
                      CHANGING  cst_item      = lst_item ).

    add_item_references( EXPORTING ist_sap_data  = ist_sap_data
                                   ist_it_gen    = lst_it_gen
                         CHANGING  cst_item      = lst_item ).

    add_item_tax( EXPORTING ist_sap_data  = ist_sap_data
                            ist_it_gen    = lst_it_gen
                            it_conditions = lt_conditions
                  CHANGING  cst_item      = lst_item ).

*   this method can be redefined in custom implementation
    extend_item( EXPORTING ist_sap_data   = ist_sap_data
                           it_conditions  = lt_conditions
                 CHANGING  cst_item       = lst_item ).

    IF lst_item IS NOT INITIAL.
      APPEND lst_item TO cst_xml-items.
    ENDIF.

    CLEAR lst_item.
  ENDLOOP.

ENDMETHOD.
METHOD transfer_billing_to_xml.

  DATA: lst_xml        TYPE zdyn_sxml_dst,
        lo_generator   TYPE REF TO zdyn_cl_ar_xml_generator,
        lt_xmltemplate TYPE zdyn_lws_xml,
        li_xml_return  TYPE i,
        lt_xmlfile     LIKE et_xml.

  zdyn_cl_config=>mo->get_sap_to_xml_mapping( EXPORTING ic_doc_type = ic_doc_type
                                              IMPORTING et_mapping  = mt_sap_to_xml_map ).
  IF mt_sap_to_xml_map IS INITIAL.
    add_msg_1 e 051 zdyn_ws 0 ic_doc_type.
    RAISE error_occurred.
  ENDIF.

  lst_xml-header_attach = it_attachments.
  lst_xml-testindicator = 'false'.

  process_header( EXPORTING ist_sap_data = ist_sap_data
                  CHANGING  cst_xml      = lst_xml ).

  process_items( EXPORTING ist_sap_data = ist_sap_data
                 CHANGING  cst_xml      = lst_xml ).

  zdyn_cl_config=>mo->get_xml_template( EXPORTING ic_doc_type = ic_doc_type
                                        IMPORTING et_template = lt_xmltemplate ).
  SORT lt_xmltemplate ASCENDING BY line_num.
  IF lt_xmltemplate IS INITIAL.
    add_msg_1 e 051 zdyn_ws 0 ic_doc_type.
    RAISE error_occurred.
  ENDIF.

  CREATE OBJECT lo_generator.
  lo_generator->process( EXPORTING  it_template  = lt_xmltemplate
                                    ist_xml_map  = lst_xml
                         IMPORTING  et_xml       = lt_xmlfile
                         EXCEPTIONS OTHERS         = 1 ).
  IF sy-subrc = 0 AND lt_xmlfile IS NOT INITIAL.
    et_xml = lt_xmlfile.
  ELSE.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD transfer_fields.

  DATA: lst_mapping  LIKE LINE OF mt_sap_to_xml_map,
        li_off       TYPE i,
        li_len       TYPE i,
        li_off2      TYPE i,
        lr_elemdescr TYPE REF TO cl_abap_elemdescr.

  FIELD-SYMBOLS: <source> TYPE any,
                 <dest>   TYPE any.

  SORT mt_sap_to_xml_map BY extension.
  LOOP AT mt_sap_to_xml_map INTO lst_mapping
      WHERE xml_alias = ic_xml_alias
        AND sap_alias = ic_sap_alias.

    IF lst_mapping-add_key IS NOT INITIAL AND i_add_key IS NOT INITIAL.
      CHECK lst_mapping-add_key = i_add_key.
    ENDIF.

    IF NOT lst_mapping-sap_alias CS 'FIXEDVAL' AND ist_source IS NOT INITIAL.
      ASSIGN COMPONENT  lst_mapping-sap_field OF STRUCTURE ist_source TO <source>.
    ENDIF.
    CHECK sy-subrc = 0.
    ASSIGN COMPONENT lst_mapping-xml_field OF STRUCTURE cst_destination TO <dest>.
    CHECK sy-subrc = 0.
    IF NOT lst_mapping-sap_alias CS 'FIXEDVAL' AND lst_mapping-extension IS INITIAL.
      IF <source> IS ASSIGNED AND ( <source> IS NOT INITIAL OR lst_mapping-add_empty = 'X' ).
        conversion( EXPORTING ic_conversion_func = lst_mapping-conversion_func
                              input              = <source>
                    IMPORTING output             = <dest> ).
      ENDIF.
    ELSEIF lst_mapping-extension IS NOT INITIAL AND NOT lst_mapping-sap_alias CS 'FIXEDVAL'.
*     destination field is longer and should get concatenated content of multiple source fields
      IF <source> IS ASSIGNED AND <source> IS NOT INITIAL.
        lr_elemdescr ?= cl_abap_elemdescr=>describe_by_data( <dest> ).
        li_len = lr_elemdescr->output_length.
        li_off  = strlen( <dest> ) + 1.
        li_off2 = li_off + strlen( <source> ).
        IF li_off2 <= li_len.
          IF lst_mapping-conversion_func IS NOT INITIAL.
            conversion( EXPORTING ic_conversion_func = lst_mapping-conversion_func
                                  input              = <source>
                        IMPORTING output             = <dest> ).
            WRITE <dest> TO <dest>+li_off LEFT-JUSTIFIED.
          ELSE.
            WRITE <source> TO <dest>+li_off LEFT-JUSTIFIED.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSEIF lst_mapping-sap_alias CS 'FIXEDVAL'.
      conversion( EXPORTING ic_conversion_func = lst_mapping-conversion_func
                            input              = lst_mapping-sap_field
                  IMPORTING output             = <dest> ).
    ENDIF.
  ENDLOOP.

ENDMETHOD.
