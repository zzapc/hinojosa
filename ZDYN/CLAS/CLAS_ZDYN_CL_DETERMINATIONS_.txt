
class ZDYN_CL_DETERMINATIONS definition
  public
  final
  create public .

public section.

  class-data DTM type ref to ZDYN_CL_DETERMINATIONS .

  methods DETERMINE
    importing
      !IST_DOCUMENT type ANY
    changing
      !CS_XML type STRING .
  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR .
protected section.

  methods IS_COMPANY_CODE_AVAILABLE
    importing
      !IST_DOCUMENT type ANY
    returning
      value(IB_RESULT) type ABAP_BOOL .
  methods INSERT_BUKRS_TO_IDOC_XML
    importing
      !IS_BUKRS type STRING
    changing
      !CS_XML type STRING .
  methods DTM_CC_RESULT_HANDLING
    importing
      !IST_CONFIG type ZDYN_STRU_DTM
      !IT_BUKRS type ZDYN_LBUKRS
    exporting
      !EB_FINISH type ABAP_BOOL
    changing
      !CT_BUKRS type ZDYN_LBUKRS .
  methods IS_METHOD_EXISTS
    importing
      !IC_CLASSNAME type CLASSNAME
      !IC_METHODNAME type SEOCMPNAME
    returning
      value(EB_METHOD_EXISTS) type ABAP_BOOL .
  methods DETERMINE_CC
    importing
      !IST_DOCUMENT type ANY
      !IT_CONFIG type ZDYN_LSTRU_DTM
    changing
      !ES_RESULT type STRING .
  methods DETERMINE_CC_TO_IDOC_XML
    importing
      !IST_DOCUMENT type ANY
      !IT_CONFIG type ZDYN_LSTRU_DTM
    changing
      !CS_XML type STRING .
  class-methods DETERMINE_CC_VIA_PO
    importing
      !IST_DOCUMENT type ANY
      !IS_XML type STRING optional
    exporting
      !ET_BUKRS type ZDYN_LBUKRS .
  class-methods DETERMINE_CC_VIA_BUYER_VAT
    importing
      !IST_DOCUMENT type ANY
      !IS_XML type STRING optional
    exporting
      !ET_BUKRS type ZDYN_LBUKRS .
  class-methods DETERMINE_CC_VIA_NAME
    importing
      !IST_DOCUMENT type ANY
      !IS_XML type STRING optional
    exporting
      !ET_BUKRS type ZDYN_LBUKRS .
  class-methods DETERMINE_CC_VIA_CITY
    importing
      !IST_DOCUMENT type ANY
      !IS_XML type STRING optional
    exporting
      !ET_BUKRS type ZDYN_LBUKRS .
private section.

  class-data MT_CONFIG type ZDYN_LSTRU_DTM .
endclass. "ZDYN_CL_DETERMINATIONS definition
class ZDYN_CL_DETERMINATIONS implementation.
METHOD class_constructor.
  CREATE OBJECT dtm.
ENDMETHOD.
METHOD constructor.

  zdyn_cl_config=>mo->get_determinations( IMPORTING et_config = mt_config ).

ENDMETHOD.
METHOD determine.

  DATA: lt_config_cc  TYPE zdyn_lstru_dtm,
        lst_config_cc LIKE LINE OF lt_config_cc.

  zdyn_cl_msg=>add_to_call_stack( ).

  LOOP AT mt_config INTO lst_config_cc WHERE attribute EQ '01'.
    APPEND lst_config_cc TO lt_config_cc.
  ENDLOOP.

* search for Company Codes

  determine_cc_to_idoc_xml( EXPORTING it_config     = lt_config_cc
                                      ist_document  = ist_document
                            CHANGING  cs_xml        = cs_xml ).


* extract vendor vat number / address etc from IT document
* parse ´found cto cs_xmöl string.

ENDMETHOD.
METHOD determine_cc.

  DATA:  lst_config_cc  TYPE zdyn_stru_dtm,
         lr_root        TYPE REF TO cx_root,
         lt_bukrs_total TYPE zdyn_lbukrs,
         lt_bukrs       TYPE zdyn_lbukrs,
         lb_finish      TYPE abap_bool.

  zdyn_cl_msg=>add_to_call_stack( ).

* we ignore the COMP_CODE from XML, as it can be just dummy
*  CHECK is_company_code_available( ist_document ) EQ abap_false.

  LOOP AT it_config INTO lst_config_cc WHERE
       ( class  IS NOT INITIAL AND
         method IS NOT INITIAL ).

    CHECK abap_true = is_method_exists( ic_classname  = lst_config_cc-class
                                        ic_methodname = lst_config_cc-method ).

    TRY.
        CLEAR lt_bukrs.
        CALL METHOD (lst_config_cc-class)=>(lst_config_cc-method)
          EXPORTING
            ist_document = ist_document
          IMPORTING
            et_bukrs     = lt_bukrs.

      CATCH cx_root INTO lr_root.
    ENDTRY.

    CALL METHOD dtm_cc_result_handling
      EXPORTING
        ist_config = lst_config_cc
        it_bukrs   = lt_bukrs
      IMPORTING
        eb_finish  = lb_finish
      CHANGING
        ct_bukrs   = lt_bukrs_total.

    IF lb_finish = abap_true.
      EXIT.
    ENDIF.

  ENDLOOP.

  CHECK lines( lt_bukrs_total ) = 1.

  READ TABLE lt_bukrs_total INTO es_result INDEX 1.

ENDMETHOD.
METHOD determine_cc_to_idoc_xml.

  DATA: ls_bukrs TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  determine_cc( EXPORTING ist_document = ist_document
                          it_config    = it_config
                CHANGING  es_result    = ls_bukrs ).

  IF ls_bukrs IS NOT INITIAL.
    insert_bukrs_to_idoc_xml( EXPORTING is_bukrs     = ls_bukrs
                              CHANGING  cs_xml       = cs_xml ).


  ELSE.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty  = 'W'
                                    ic_msgid  = 'ZDYN_WS'
                                    ic_msgno  = '054'
                                    ic_msgv1  = ls_bukrs ).
*   message s054(zdyn_ws).
  ENDIF.

ENDMETHOD.
METHOD determine_cc_via_buyer_vat.

  DATA: lc_vat TYPE stceg.
  FIELD-SYMBOLS: <c_vat> TYPE any.

  zdyn_cl_msg=>add_to_call_stack( ).

  ASSIGN COMPONENT 'CC_VAT_REG' OF STRUCTURE ist_document TO <c_vat>.
  CHECK <c_vat> IS ASSIGNED AND <c_vat> IS NOT INITIAL.

  lc_vat = <c_vat>.
  SELECT bukrs INTO TABLE et_bukrs FROM t001 WHERE stceg EQ lc_vat.

ENDMETHOD.
METHOD determine_cc_via_city.

  DATA: lc_search_term(42) TYPE c.
  FIELD-SYMBOLS: <s_city> TYPE any.

  zdyn_cl_msg=>add_to_call_stack( ).

  ASSIGN COMPONENT 'CC_CITY_NAME' OF STRUCTURE ist_document TO <s_city>.
  CHECK <s_city> IS ASSIGNED AND <s_city> IS NOT INITIAL.

  lc_search_term = <s_city>.
  TRANSLATE lc_search_term TO UPPER CASE.
  CONCATENATE '%' lc_search_term '%' INTO lc_search_term.

  SELECT bukrs
         FROM t001
         INTO TABLE et_bukrs
         WHERE ort01 LIKE lc_search_term.

ENDMETHOD.
METHOD determine_cc_via_name.

  DATA: lc_buyer_name  TYPE t001-butxt.
  FIELD-SYMBOLS: <s_name> TYPE any.

  zdyn_cl_msg=>add_to_call_stack( ).

  ASSIGN COMPONENT 'CC_NAME' OF STRUCTURE ist_document TO <s_name>.
  CHECK <s_name> IS ASSIGNED AND <s_name> IS NOT INITIAL.
  lc_buyer_name = <s_name>.

  SELECT bukrs FROM t001 INTO TABLE et_bukrs WHERE butxt = lc_buyer_name.

ENDMETHOD.
METHOD determine_cc_via_po.

  DATA: lc_bukrs TYPE bukrs,
        lc_po    TYPE ekko-ebeln.
  FIELD-SYMBOLS: <s_po> TYPE any.

  zdyn_cl_msg=>add_to_call_stack( ).

  ASSIGN COMPONENT 'PO_NUMBER' OF STRUCTURE ist_document TO <s_po>.
  CHECK <s_po> IS ASSIGNED AND <s_po> IS NOT INITIAL.

  lc_po = <s_po>.
  SELECT SINGLE bukrs INTO lc_bukrs FROM ekko WHERE ebeln = lc_po.
  CHECK sy-subrc = 0.

  APPEND lc_bukrs TO et_bukrs.

ENDMETHOD.
METHOD dtm_cc_result_handling.

  DATA:  li_tabix TYPE i.
  FIELD-SYMBOLS: <c_bukrs> TYPE bukrs.

  IF ist_config-add_flg = abap_true.
    APPEND LINES OF it_bukrs TO ct_bukrs.
  ENDIF.

  IF ist_config-filter_flg = abap_true.
    LOOP AT ct_bukrs ASSIGNING <c_bukrs>.
      li_tabix = sy-tabix.

      READ TABLE it_bukrs TRANSPORTING NO FIELDS
          WITH TABLE KEY table_line = <c_bukrs>.

      IF sy-subrc <> 0.
        DELETE ct_bukrs INDEX li_tabix.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF ist_config-finish1_flg = abap_true.
    IF lines( ct_bukrs ) = 1.
      eb_finish = abap_true.
      EXIT.
    ENDIF.
  ENDIF.

ENDMETHOD.
METHOD insert_bukrs_to_idoc_xml.

  DATA: li_off   TYPE i,
        li_len   TYPE i,
        ls_partn TYPE string.

  zdyn_cl_msg=>add_to_call_stack( ).

  CONCATENATE '<PARTN>' is_bukrs '</PARTN>' INTO ls_partn.

* try to find empty company code placeholder first
  FIND FIRST OCCURRENCE OF
    REGEX '<E1EDKA1.*<PARTN/>.*</E1EDKA1>' IN cs_xml
    MATCH OFFSET li_off
    MATCH LENGTH li_len.
  IF li_off = 0.
*   then try to find non-empty company code
    FIND FIRST OCCURRENCE OF
      REGEX '<E1EDKA1.*<PARTN>.*</PARTN>.*</E1EDKA1>' IN cs_xml
      MATCH OFFSET li_off
      MATCH LENGTH li_len.
    IF li_off > 0.
      REPLACE REGEX '<PARTN>.*</PARTN>' IN SECTION OFFSET li_off LENGTH li_len OF cs_xml WITH ls_partn.
    ENDIF.
  ELSE.
    REPLACE '<PARTN/>' IN SECTION OFFSET li_off LENGTH li_len OF cs_xml WITH ls_partn.
  ENDIF.

  CHECK li_len <> 0.


  zdyn_cl_msg=>add_msg( EXPORTING ic_msgty  = 'S'
                                  ic_msgid  = 'ZDYN_WS'
                                  ic_msgno  = '053'
                                  ic_msgv1  = is_bukrs ).
* message s053(zdyn_ws) with space.

ENDMETHOD.
METHOD is_company_code_available.

  FIELD-SYMBOLS: <bukrs> TYPE any.

  ASSIGN COMPONENT 'COMP_CODE' OF STRUCTURE ist_document TO <bukrs>.

  IF <bukrs> IS NOT ASSIGNED OR <bukrs> IS INITIAL.
    ib_result = abap_false.
  ELSE.
    ib_result = abap_true.
  ENDIF.

ENDMETHOD.
  method IS_METHOD_EXISTS.

     DATA:
      ls_cifkey  TYPE seoclskey,
      lt_methods TYPE seoo_methods_r.

    ls_cifkey-clsname = ic_classname.

    CALL FUNCTION 'SEO_METHOD_READ_ALL'
      EXPORTING
        cifkey            = ls_cifkey
      IMPORTING
        methods           = lt_methods
      EXCEPTIONS
        clif_not_existing = 1
        OTHERS            = 2.
    IF sy-subrc <> 0.
      eb_method_exists = abap_false.
      EXIT.
    ENDIF.

    READ TABLE lt_methods TRANSPORTING NO FIELDS
      WITH KEY cmpname = ic_methodname.
    IF sy-subrc = 0.
      eb_method_exists = abap_true.
    ELSE.
      eb_method_exists = abap_false.
    ENDIF.
  endmethod.
