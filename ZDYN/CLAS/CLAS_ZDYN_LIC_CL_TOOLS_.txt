
class ZDYN_LIC_CL_TOOLS definition
  public
  create public .

public section.

  methods GET_DOMAIN_TEXT
    importing
      !IC_DOMAIN type ANY
      !IC_DOMVAL type ANY
    exporting
      !EC_TEXT type ANY .
  methods IS_UNICODE_SYSTEM
    returning
      value(EB) type ABAP_BOOL .
  methods GET_KEYLEN
    importing
      !IC_TABLE type ANY
    returning
      value(EX_KEYLEN) type KEYLENGTH
    exceptions
      NOT_FOUND
      ERROR_OCCURRED .
  methods GET_RELATIVE_NAME
    importing
      !IR_OBJECT type ref to OBJECT
    returning
      value(EC_RELNAME) type STRING .
  methods GET_DDIC_HEADER
    importing
      !IR_DESCR type ref to CL_ABAP_TYPEDESCR
    returning
      value(ES_HEADER) type X030L
    exceptions
      NOT_FOUND
      NO_DDIC_TYPE .
protected section.
private section.

  types:
    BEGIN OF YS_KEYLEN,
           table type tabname,
           keylen type keylength,
          end OF YS_KEYLEN .
  types:
    YL_KEYLEN type HASHED TABLE OF YS_KEYLEN with unique key table .

  class-data MT_KEYLEN type YL_KEYLEN .

  methods TABLE_LENGTH_GET
    importing
      !IC_NAME type TABNAME
      !IC_VERSION type DDBOOL_D default 'A'
      !IC_KIND type DDBOOL_D default 'S'
    exporting
      !EI_RC type SYSUBRC
      !EI_DLENGTH type INTLEN
      !EI_TLENGTH type INTLEN
      !EI_KLENGTH type INTLEN .
endclass. "ZDYN_LIC_CL_TOOLS definition
class ZDYN_LIC_CL_TOOLS implementation.
METHOD get_ddic_header .

  ir_descr->get_ddic_header( RECEIVING p_header      = es_header
                             EXCEPTIONS not_found    = 1
                                        no_ddic_type = 2 ).
  CASE sy-subrc.
    WHEN 0. EXIT.
    WHEN 1. RAISE not_found.
    WHEN OTHERS. RAISE no_ddic_type.
  ENDCASE.

ENDMETHOD.
METHOD get_domain_text.

  DATA: lc_domval TYPE dd07v-domvalue_l,
        lc_domain TYPE dd07v-domname,
        lc_text   TYPE dd07v-ddtext.

  lc_domval = ic_domval.
  lc_domain = ic_domain.

  CALL FUNCTION 'DOMAIN_VALUE_GET'
    EXPORTING
      i_domname  = ic_domain
      i_domvalue = lc_domval
    IMPORTING
      e_ddtext   = lc_text
    EXCEPTIONS
      OTHERS     = 0.
  ec_text = lc_text.
ENDMETHOD.
METHOD get_keylen .

  DATA: li_subrc   TYPE sysubrc,
        li_keylen  TYPE intlen,
        ls_buffer  LIKE LINE OF mt_keylen,
        lc_tabname TYPE tabname.

  lc_tabname = ic_table.
  READ TABLE mt_keylen INTO ls_buffer WITH KEY table = lc_tabname.
  IF sy-subrc = 0.
    ex_keylen = ls_buffer-keylen.
    EXIT.
  ENDIF.

  table_length_get( EXPORTING ic_name    = lc_tabname
                    IMPORTING ei_rc      = li_subrc
                              ei_klength = li_keylen ).
  IF li_subrc <> 0. RAISE error_occurred. ENDIF.

  ex_keylen = li_keylen * cl_abap_char_utilities=>charsize.

  ls_buffer-table  = lc_tabname.
  ls_buffer-keylen = ex_keylen.
  INSERT ls_buffer INTO TABLE mt_keylen.

ENDMETHOD.
METHOD get_relative_name .

  DATA: lc_str1  TYPE string,
        lc_str2  TYPE string,
        lr_descr TYPE REF TO cl_abap_typedescr,
        li_len   TYPE i.

  CHECK ir_object IS NOT INITIAL.

  CATCH SYSTEM-EXCEPTIONS move_cast_error = 1.
    lr_descr ?= ir_object.
  ENDCATCH.
  IF sy-subrc NE 0.
    lr_descr = cl_abap_typedescr=>describe_by_object_ref( ir_object ).
  ENDIF.

  CASE lr_descr->type_kind.
    WHEN cl_abap_typedescr=>typekind_class.
      SPLIT lr_descr->absolute_name AT '\CLASS=' INTO lc_str1 lc_str2.
    WHEN cl_abap_typedescr=>typekind_intf.
      SPLIT lr_descr->absolute_name AT '\INTERFACE=' INTO lc_str1 lc_str2.
    WHEN OTHERS.
      SPLIT lr_descr->absolute_name AT '\TYPE=' INTO lc_str1 lc_str2.
  ENDCASE.

  IF lc_str2 IS INITIAL.
    ec_relname = lc_str1.
  ELSE.
    ec_relname = lc_str2.
  ENDIF.

  li_len = strlen( ec_relname ).
  IF li_len >= 2 AND ec_relname(2) = '%_'.
    CLEAR ec_relname.
  ENDIF.


  CHECK ec_relname IS INITIAL.
  ec_relname = lr_descr->absolute_name.

ENDMETHOD.
METHOD is_unicode_system.

  CHECK cl_abap_char_utilities=>charsize > 1.
  eb = abap_true.

ENDMETHOD.
METHOD table_length_get .

  DATA: ls_getstate TYPE dctabdget,
        ls_gotstate TYPE dctabdget,
        ls_dd02v_wa_n TYPE dd02v,
        lt_dd03p_tab_n TYPE TABLE OF dd03p,
        ls_dd02v_wa_a TYPE dd02v,
        lt_dd03p_tab_a TYPE TABLE OF dd03p,
        lb_incl_align TYPE ddrefstruc-bool.

  CHECK ( ic_kind = 'N' OR ic_kind = 'S' ).
  IF ic_kind = 'N'.
    lb_incl_align = 'X'.
  ENDIF.

  ls_getstate-tabd = ic_version.
  CALL FUNCTION 'DD_TABD_GET'
    EXPORTING
      get_state      = ls_getstate
      tabl_name      = ic_name
    IMPORTING
      dd02v_wa_n     = ls_dd02v_wa_n
      dd02v_wa_a     = ls_dd02v_wa_a
      got_state      = ls_gotstate
    TABLES
      dd03p_tab_n    = lt_dd03p_tab_n
      dd03p_tab_a    = lt_dd03p_tab_a
    EXCEPTIONS
      access_failure = 1
      OTHERS         = 2.
  IF sy-subrc <> 0 OR ls_gotstate = ''.
    ei_rc = 8.
    EXIT.
  ENDIF.

  IF ic_version = 'A'.
    ls_dd02v_wa_n = ls_dd02v_wa_a.
    lt_dd03p_tab_n[] = lt_dd03p_tab_a[].
  ENDIF.

  CALL FUNCTION 'DD_TABL_EXPAND'
    EXPORTING
      dd02v_wa          = ls_dd02v_wa_n
      prid              = 0
    IMPORTING
      subrc             = ei_rc
    TABLES
      dd03p_tab         = lt_dd03p_tab_n
    EXCEPTIONS
      illegal_parameter = 1
      OTHERS            = 2.
  IF sy-subrc <> 0 OR ei_rc > 4.
    ei_rc = 8.
    EXIT.
  ENDIF.

  CALL FUNCTION 'DD_TABL_LENGTH_GET'
    EXPORTING
      tabname       = ic_name
      dd02v_wa      = ls_dd02v_wa_n
      incl_align    = lb_incl_align
    IMPORTING
      datalength    = ei_dlength
      keylength     = ei_klength
      tablelength   = ei_tlength
    TABLES
      dd03p_tab     = lt_dd03p_tab_n
    EXCEPTIONS
      wrong_tabname = 1
      op_failure    = 2
      OTHERS        = 3.
  IF sy-subrc <> 0.
    ei_rc = 8.
  ENDIF.

ENDMETHOD.
