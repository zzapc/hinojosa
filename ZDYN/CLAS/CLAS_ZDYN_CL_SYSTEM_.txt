
CLASS zdyn_cl_system DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-DATA mo TYPE REF TO zdyn_cl_system .

    CLASS-METHODS set_mo
      IMPORTING
        !io_mo TYPE REF TO zdyn_cl_system OPTIONAL .
    CLASS-METHODS class_constructor .
    METHODS move_corresponding_tab
      IMPORTING
        !it_input       TYPE table
        !ib_keep_target TYPE abap_bool DEFAULT abap_false
      CHANGING
        !ct_output      TYPE table .
    METHODS move_corresponding_with_nested
      IMPORTING
        !ist_input  TYPE any
      CHANGING
        !cst_output TYPE any .
  PROTECTED SECTION.
  PRIVATE SECTION.
endclass. "ZDYN_CL_SYSTEM definition
class ZDYN_CL_SYSTEM implementation.
  METHOD class_constructor.

    set_mo( ).

  ENDMETHOD.
METHOD move_corresponding_tab.

* replacement for MOVE-CORRESPONDING src TO dst, where src and dst are internal tables
  FIELD-SYMBOLS: <st_in>  TYPE any,
                 <st_out> TYPE any,
                 <t_in>   TYPE any,
                 <t_out>  TYPE any.

* use faster solution in newer systems
  IF sy-saprl > '740' AND ib_keep_target = abap_false.
    ASSIGN it_input   TO <t_in>.
    ASSIGN ct_output  TO <t_out>.
    CATCH SYSTEM-EXCEPTIONS OTHERS = 1.
      MOVE-CORRESPONDING <t_in> TO <t_out>.
    ENDCATCH.
  ELSE.
    IF ib_keep_target = abap_false.
      CLEAR ct_output.
    ENDIF.
    LOOP AT it_input ASSIGNING <st_in>.
      APPEND INITIAL LINE TO ct_output ASSIGNING <st_out>.
      MOVE-CORRESPONDING <st_in> TO <st_out>.
    ENDLOOP.
  ENDIF.

ENDMETHOD.
METHOD move_corresponding_with_nested.

* replacement for MOVE-CORRESPONDING src TO dst EXPANDING NASTED TABLES
  DATA: lo_type_descr     TYPE REF TO cl_abap_structdescr,
        lt_in_components  TYPE cl_abap_structdescr=>included_view,
        lt_out_components TYPE cl_abap_structdescr=>included_view,
        lst_in_comp       LIKE LINE OF lt_in_components,
        lst_out_comp      LIKE LINE OF lt_out_components.
  FIELD-SYMBOLS: <in>    TYPE any,
                 <out>   TYPE any,
                 <t_in>  TYPE any,
                 <t_out> TYPE any.

  lo_type_descr ?= cl_abap_typedescr=>describe_by_data( ist_input ).
  lt_in_components = lo_type_descr->get_included_view( ).

  lo_type_descr ?= cl_abap_typedescr=>describe_by_data( cst_output ).
  lt_out_components = lo_type_descr->get_included_view( ).

  LOOP AT lt_in_components INTO lst_in_comp.
    READ TABLE lt_out_components INTO lst_out_comp WITH KEY name = lst_in_comp-name.
    CHECK sy-subrc = 0.
    ASSIGN COMPONENT lst_in_comp-name OF STRUCTURE ist_input TO <in>.
    ASSIGN COMPONENT lst_in_comp-name OF STRUCTURE cst_output TO <out>.
    IF lst_in_comp-type->kind = lst_in_comp-type->kind_table.
      move_corresponding_tab( EXPORTING it_input  = <in>
                              CHANGING  ct_output = <out> ).
    ELSE.
      MOVE <in> TO <out>.
    ENDIF.
    UNASSIGN: <in>, <out>.
  ENDLOOP.

ENDMETHOD.
    METHOD set_mo.

      IF io_mo IS INITIAL.
        CREATE OBJECT mo.
      ELSE.
        mo = io_mo.
      ENDIF.

    ENDMETHOD.
