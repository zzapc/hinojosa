
class ZDYN_CL_REST_TOOLS_ROUTTY_ARCH definition
  public
  inheriting from ZDYN_CL_REST_TOOLS_ROUTTY
  create public .

public section.

  types:
    BEGIN OF ys_document_information,
        key   TYPE string,
        value TYPE string,
      END OF ys_document_information .
  types:
    BEGIN OF ys_attachment,
        filename               TYPE string,
        data                   TYPE string,
        link                   TYPE string,
        mime_type              TYPE string,
        type                   TYPE string,
        external_attachment_id TYPE string,
        archive_link           TYPE string,
      END OF ys_attachment .
  types:
    yt_document_information TYPE STANDARD TABLE OF ys_document_information WITH DEFAULT KEY .
  types:
    BEGIN OF ys_archive_document,
        document_type        TYPE string,
        document_number      TYPE string,
        document_date        TYPE string,
        document_status      TYPE string,
        company_name         TYPE string,
        company_number       TYPE string,
        company_vat_number   TYPE string,
        partner_name         TYPE string,
        partner_number       TYPE string,
        partner_vat_number   TYPE string,
        document_information TYPE STANDARD TABLE OF ys_document_information WITH DEFAULT KEY,
        attachment           TYPE ys_attachment,
      END OF ys_archive_document .

  constants CON_ARCHIVING_API type STRING value 'document/archivedocument'. "#EC NOTEXT
  data MST_AR_CONFIG type ZDYN_ROUTTY_TARI .

  methods EXTAND_DATA
    importing
      !IST_DB_DOCUMENT type ZDYN_CL_BAPI=>YST_SALES_DOC
    changing
      !CST_DOCUMENT type YS_ARCHIVE_DOCUMENT .
  methods CONSTRUCTOR
    importing
      !IST_CONFIG type ZDYN_STRU_ROUTTY_CONFIG optional
      !II_BULK_SIZE type I optional
      !IB_MASTERDATA_TO_FILE type ABAP_BOOL default ABAP_FALSE
      !IB_MASTERDATA_FILE_TEST type ABAP_BOOL default ABAP_FALSE
      !IS_MASTERDATA_PATHNAME type ANY optional .
  methods GET_ARCHIVING
    importing
      !IST_DOCUMENT type ZDYN_CL_BAPI=>YST_SALES_DOC
      !IC_LANGU type SY-LANGU default SY-LANGU
    exporting
      !EST_ARCHIVING type ZDYN_STRU_ARCHIVING
    exceptions
      ERROR_OCCURRED .
  methods SEND_TO_ROUTTY
    importing
      !IST_DOCUMENT type ZDYN_CL_BAPI=>YST_SALES_DOC
      !IST_ARCHIVING type ZDYN_STRU_ARCHIVING
    exceptions
      ERROR_OCCURRED .
  methods PROCESS_ARCHIVING
    importing
      !IT_SEL_SALES_DOC type ZDYN_CL_BAPI=>YT_RANGE_VBELN optional
      !ID_CREATE_DATE type ERDAT optional
      !IC_LANGU type SY-LANGU default SY-LANGU
    exceptions
      ERROR_OCCURRED .
protected section.
private section.
endclass. "ZDYN_CL_REST_TOOLS_ROUTTY_ARCH definition
class ZDYN_CL_REST_TOOLS_ROUTTY_ARCH implementation.
METHOD constructor.

  zdyn_cl_msg=>add_to_call_stack( ).

  super->constructor( EXPORTING ist_config              = ist_config
                                ii_bulk_size            = ii_bulk_size
                                ib_masterdata_to_file   = ib_masterdata_to_file
                                ib_masterdata_file_test = ib_masterdata_file_test
                                is_masterdata_pathname  = is_masterdata_pathname ).

  set_ar_logic( ).

ENDMETHOD.
METHOD extand_data.

* Extend the document data with custom values
* CST_DOCUMENT - metadata and attachment

ENDMETHOD.
METHOD get_archiving.

  DATA: lc_doc_number TYPE nast-objky,
        li_bin_length TYPE i.

  zdyn_cl_msg=>add_to_call_stack( ).

  lc_doc_number = ist_document-sales_doc_nr.

  mo_ar->get_billing_doc_pdf( EXPORTING  ic_doc_number  = lc_doc_number
                                         ic_application = mst_ar_config-application
                                         ic_output_type = mst_ar_config-message_type
                                         ic_langu       = ic_langu
                              IMPORTING  et_data        = est_archiving-content
                                         ei_bin_length  = li_bin_length
                              EXCEPTIONS OTHERS         = 1 ).
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = '29'
                                    ic_msgno = '350'
                                    ic_msgv1 = lc_doc_number ).
*   message e350(29) with space space space space.
    RAISE error_occurred.
  ENDIF.

  est_archiving-binlength = li_bin_length.
  est_archiving-mimetype = con_mimetype_pdf.

  CONCATENATE ist_document-sales_doc_nr '.pdf' INTO est_archiving-filename.

ENDMETHOD.
METHOD process_archiving.

  DATA: lt_docs           TYPE zdyn_cl_bapi=>yt_sales_docs,
        lt_archiving      TYPE connection_tab,
        lst_archiving     TYPE zdyn_stru_archiving,
        lt_sel_comp_code  TYPE zdyn_cl_bapi=>yt_range_bukrs,
        lst_sel_comp_code LIKE LINE OF lt_sel_comp_code,
        ld_create_date    LIKE id_create_date.
  FIELD-SYMBOLS: <s_doc>  LIKE LINE OF lt_docs.

  zdyn_cl_msg=>add_to_call_stack( ).

  zdyn_cl_config=>mo->get_accounts_recv_config( EXPORTING ic_comp_code   = mst_config-bukrs
                                                          ic_username    = mst_config-username
                                                IMPORTING est_ar_config  = mst_ar_config ).
  IF mst_ar_config IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                    ic_msgno = '023' ).
*   message s023(zdyn_ws).
    RAISE error_occurred.
  ENDIF.

  IF it_sel_sales_doc IS INITIAL AND
     id_create_date   IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgid = 'ZDYN_WS'
                                    ic_msgno = '020' ).
*   message s020(zdyn_ws).
    RAISE error_occurred.
  ENDIF.

  IF mst_config-bukrs IS NOT INITIAL.
    lst_sel_comp_code-sign    = 'I'.
    lst_sel_comp_code-option  = 'EQ'.
    lst_sel_comp_code-low     = mst_config-bukrs.
    APPEND lst_sel_comp_code TO lt_sel_comp_code.
  ENDIF.

  IF NOT id_create_date IS INITIAL.
    ld_create_date = id_create_date.
    IF ld_create_date = sy-datlo.
      ld_create_date = sy-datlo - 1.
    ENDIF.
  ENDIF.

  zdyn_cl_bapi=>mo->get_sales_documents2( EXPORTING it_sel_sales_doc = it_sel_sales_doc
                                                   it_sel_comp_code = lt_sel_comp_code
                                                   id_create_date   = ld_create_date
                                         IMPORTING et_sales_docs    = lt_docs ).
  IF lt_docs IS INITIAL.
    zdyn_cl_msg=>add_msg( EXPORTING ic_msgty = 'S'
                                    ic_msgid = 'FR'
                                    ic_msgno = '056'
                                    ii_level = zdyn_cl_msg=>con_message_level_1 ).
*   message s056(fr).
    RETURN.
  ELSE.
    LOOP AT lt_docs ASSIGNING <s_doc>.
      CLEAR lt_archiving.
      get_archiving( EXPORTING  ist_document  = <s_doc>
                                ic_langu      = ic_langu
                     IMPORTING  est_archiving = lst_archiving
                     EXCEPTIONS OTHERS        = 1 ).
      IF sy-subrc <> 0.
        RAISE error_occurred.
      ENDIF.
      CHECK lst_archiving IS NOT INITIAL.

      send_to_routty( EXPORTING  ist_document  = <s_doc>
                                 ist_archiving = lst_archiving
                      EXCEPTIONS OTHERS        = 1 ).
      IF sy-subrc <> 0.
        RAISE error_occurred.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMETHOD.
METHOD send_to_routty.

  DATA: lst_doc              TYPE ys_archive_document,
        ls_json              TYPE string,
        lst_key_val          LIKE LINE OF lst_doc-document_information,
        lx_data              TYPE xstring,
        lst_cc_detail        TYPE bapi0002_2,
        lst_customer_details TYPE kna1,
        lc_partner_number    LIKE ist_document-partner,
        li_len               TYPE i,
        lst_message          TYPE bapireturn.

  zdyn_cl_msg=>add_to_call_stack( ).

  zdyn_cl_bapi=>mo->bapi_companycode_getdetail( EXPORTING ic_companycode_id       = ist_document-comp_code
                                                IMPORTING est_companycode_detail  = lst_cc_detail
                                                          est_return              = lst_message ).
  IF lst_message IS NOT INITIAL.
    zdyn_cl_msg=>add_bapiret_msg( ist_bapiret = lst_message
                                  ii_level    = zdyn_cl_msg=>con_message_level_1 ).
  ENDIF.
  zdyn_cl_bapi=>mo->get_customer_details( EXPORTING ic_customer = ist_document-partner
                                          IMPORTING est_details = lst_customer_details ).

  lst_doc-document_type       = mst_ar_config-document_type.
  lst_doc-document_number     = ist_document-sales_doc_nr.
  lst_doc-document_date       = write_date_and_time( id_date = ist_document-doc_date
                                                     id_time = '000000' ).
*  lst_doc-document_status     = ist_document-doc_status.
  lst_doc-company_number      = ist_document-comp_code.
  lst_doc-company_name        = lst_cc_detail-comp_name.
*  lst_doc-company_vat_number  = lst_cc_detail-vat_reg_no.

*  lst_doc-partner_number      = ist_document-partner.
*  lst_doc-partner_name        = lst_customer_details-name1.
*  lst_doc-partner_vat_number  = lst_customer_details-stceg.

* AR and AP document numbers
  lst_key_val-key   = zdyn_cl_ar=>con_ap_doc_number.
  lst_key_val-value = ist_document-ap_doc_nr.
  APPEND lst_key_val TO lst_doc-document_information.
  lst_key_val-key   = zdyn_cl_ar=>con_ar_doc_number.
  lst_key_val-value = ist_document-ar_doc_nr.
  APPEND lst_key_val TO lst_doc-document_information.

* partner data
  lst_key_val-key   = zdyn_cl_ar=>con_partner_number.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = ist_document-partner
    IMPORTING
      output = lc_partner_number.
  lst_key_val-value = lc_partner_number.
  APPEND lst_key_val TO lst_doc-document_information.
  lst_key_val-key   = zdyn_cl_ar=>con_partner_name.
  lst_key_val-value = lst_customer_details-name1.
  APPEND lst_key_val TO lst_doc-document_information.

  lst_doc-attachment-filename  = ist_archiving-filename.
  lst_doc-attachment-mime_type = ist_archiving-mimetype.
  lst_doc-attachment-type      = mst_ar_config-archiv_type.

  li_len = ist_archiving-binlength.
  CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
    EXPORTING
      input_length = li_len
    IMPORTING
      buffer       = lx_data
    TABLES
      binary_tab   = ist_archiving-content
    EXCEPTIONS
      failed       = 1
      OTHERS       = 2.
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_sysmsg( ).
    RAISE error_occurred.
  ENDIF.

  CALL FUNCTION 'SSFC_BASE64_ENCODE'
    EXPORTING
      bindata = lx_data
    IMPORTING
      b64data = lst_doc-attachment-data
    EXCEPTIONS
      OTHERS  = 1.
  IF sy-subrc <> 0.
    zdyn_cl_msg=>add_sysmsg( ).
    RAISE error_occurred.
  ENDIF.

* Custom extension
  extand_data( EXPORTING ist_db_document = ist_document
               CHANGING  cst_document    = lst_doc ).

  ls_json = serialize_to_json( ist_data       = lst_doc
                               ic_compress    = abap_true
                               ic_pretty_name = con_camel_case ).

  set_new_rel_url( is_path = con_archiving_api ).

  call_http_post( EXPORTING is_input = ls_json ).

  set_response_message( EXPORTING ic_doc_number = lst_doc-document_number ).

ENDMETHOD.
