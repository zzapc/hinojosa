INCLUDE zdyn_cl_msg===================ccmac.
class ZDYN_CL_ACCESS_PROTECTION definition
  public
  create public .

public section.

  constants CON_ACTIVITY_MASTER_DATA type ZDYN_WS_DACTIVITY value 'M'. "#EC NOTEXT
  constants CON_ACTIVITY_RECEIVE type ZDYN_WS_DACTIVITY value 'R'. "#EC NOTEXT
  constants CON_ACTIVITY_SEND type ZDYN_WS_DACTIVITY value 'S'. "#EC NOTEXT
  constants CON_ACTIVITY_SEND_AP type ZDYN_WS_DACTIVITY value 'P'. "#EC NOTEXT
  data MC_ID type CHAR120 read-only .
  data MC_ACTIVITY type ZDYN_WS_DACTIVITY read-only .
  data MC_MODULE type ZDYN_WS_DMODULE read-only .

  methods SET
    importing
      !IC_MODULE type ZDYN_WS_DMODULE
      !IC_ID type ANY default 'ANY'
      !IC_ACTIVITY type ZDYN_WS_DACTIVITY
    returning
      value(RB_OK) type ABAP_BOOL .
  methods SET_FOR_DOC_RECEIVE
    importing
      !IC_MODULE type ANY
      !IC_ID type ANY default 'ANY'
    returning
      value(RB_OK) type ABAP_BOOL .
  methods SET_FOR_DOC_SEND
    importing
      !IC_MODULE type ANY
      !IC_ID type ANY default 'ANY'
    returning
      value(RB_OK) type ABAP_BOOL .
  methods SET_FOR_DOC_SEND_AP
    importing
      !IC_MODULE type ANY
      !IC_ID type ANY default 'ANY'
    returning
      value(RB_OK) type ABAP_BOOL .
  methods SET_FOR_MASTER_DATA
    importing
      !IC_MODULE type ANY
      !IC_ID type ANY default 'ANY'
    returning
      value(RB_OK) type ABAP_BOOL .
  methods UNSET
    importing
      !IC_MODULE type ZDYN_WS_DMODULE optional
      !IC_ID type ANY optional
      !IC_ACTIVITY type ZDYN_WS_DACTIVITY optional .
PROTECTED SECTION.

  METHODS clear_lock_info .
  METHODS dequeue
    IMPORTING
      !ic_module   TYPE zdyn_ws_tacs-appl_module
      !ic_id       TYPE zdyn_ws_tacs-id
      !ic_activity TYPE zdyn_ws_tacs-activity .
  METHODS enqueue
    IMPORTING
      !ic_module   TYPE zdyn_ws_tacs-appl_module
      !ic_id       TYPE zdyn_ws_tacs-id
      !ic_activity TYPE zdyn_ws_tacs-activity
    EXCEPTIONS
      foreign_lock
      error_occurred .
private section.
endclass. "ZDYN_CL_ACCESS_PROTECTION definition
class ZDYN_CL_ACCESS_PROTECTION implementation.
METHOD clear_lock_info.

  CLEAR: mc_activity, mc_id, mc_module.

ENDMETHOD.
METHOD dequeue.

  CALL FUNCTION 'DEQUEUE_EZDYN_WS_TACS'
    EXPORTING
      appl_module = ic_module
      id          = ic_id
      activity    = ic_activity.

ENDMETHOD.
METHOD enqueue.

  CALL FUNCTION 'ENQUEUE_EZDYN_WS_TACS'
    EXPORTING
      mode_zdyn_ws_tacs = 'X'
      appl_module       = ic_module
      id                = ic_id
      activity          = ic_activity
    EXCEPTIONS
      foreign_lock      = 1
      system_failure    = 2
      OTHERS            = 3.

  IF sy-subrc = 1.
    RAISE foreign_lock.
  ELSEIF sy-subrc > 0.
    RAISE error_occurred.
  ENDIF.

ENDMETHOD.
METHOD set.

* Lock to prevent simultaneous process run
* Optional ID can be e.g. company code
* Activity can be:
* CON_ACTIVITY_MASTER_DATA
* CON_ACTIVITY_RECEIVE
* CON_ACTIVITY_SEND

  DATA: lc_id TYPE zdyn_ws_tacs-id.

  zdyn_cl_msg=>add_to_call_stack( ).

  lc_id = ic_id.
  IF lc_id IS INITIAL.
    lc_id = 'ANY'.
  ENDIF.
  enqueue( EXPORTING  ic_module  = ic_module
                      ic_id           = lc_id
                      ic_activity     = ic_activity
           EXCEPTIONS foreign_lock    = 1
                      OTHERS          = 2 ).
  IF sy-subrc = 0.
    rb_ok       = abap_true.
    mc_module   = ic_module.
    mc_id       = lc_id.
    mc_activity = ic_activity.
  ELSE.
    clear_lock_info( ).
    rb_ok = abap_false.
    add_msg_0 w 041 zdyn_ws zdyn_cl_msg=>con_message_level_1.
*    MESSAGE w041(zdyn_ws).
  ENDIF.

ENDMETHOD.
METHOD set_for_doc_receive.

  rb_ok = set( ic_module    = ic_module
               ic_id        = ic_id
               ic_activity  = con_activity_receive ).

ENDMETHOD.
METHOD set_for_doc_send.

  rb_ok = set( ic_module    = ic_module
               ic_id        = ic_id
               ic_activity  = con_activity_send ).

ENDMETHOD.
METHOD set_for_doc_send_ap.

  rb_ok = set( ic_module    = ic_module
               ic_id        = ic_id
               ic_activity  = con_activity_send_ap ).

ENDMETHOD.
METHOD set_for_master_data.

  rb_ok = set( ic_module    = ic_module
               ic_id        = ic_id
               ic_activity  = con_activity_master_data ).

ENDMETHOD.
METHOD unset.

  DATA: lc_module   LIKE mc_module,
        lc_id       LIKE mc_id,
        lc_activity LIKE mc_activity.

  zdyn_cl_msg=>add_to_call_stack( ).

  IF ic_module IS INITIAL.
    lc_module = mc_module.
  ELSE.
    lc_module = ic_module.
  ENDIF.

  IF ic_id IS INITIAL.
    lc_id = mc_id.
  ELSE.
    lc_id = ic_id.
  ENDIF.

  IF ic_activity IS INITIAL.
    lc_activity = mc_activity.
  ELSE.
    lc_activity = ic_activity.
  ENDIF.

  IF lc_id IS NOT INITIAL AND lc_activity IS NOT INITIAL.
    dequeue( EXPORTING ic_module    = lc_module
                       ic_id        = lc_id
                       ic_activity  = lc_activity ).
    IF lc_module = mc_module AND lc_activity = mc_activity AND lc_id = mc_id.
      clear_lock_info( ).
    ENDIF.
  ENDIF.

ENDMETHOD.
